

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 29 04:42:10 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44  0000                     
    45                           ; Version 1.41
    46                           ; Generated 25/01/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4620 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	mediumconst
    81  00FDB4                     __pmediumconst:
    82                           	opt stack 0
    83  00FDB4  00                 	db	0
    84  00FDB5                     _dpowers:
    85                           	opt stack 0
    86  00FDB5  0001               	dw	1
    87  00FDB7  0000               	dw	0
    88  00FDB9  000A               	dw	10
    89  00FDBB  0000               	dw	0
    90  00FDBD  0064               	dw	100
    91  00FDBF  0000               	dw	0
    92  00FDC1  03E8               	dw	1000
    93  00FDC3  0000               	dw	0
    94  00FDC5  2710               	dw	10000
    95  00FDC7  0000               	dw	0
    96  00FDC9  86A0               	dw	34464
    97  00FDCB  0001               	dw	1
    98  00FDCD  4240               	dw	16960
    99  00FDCF  000F               	dw	15
   100  00FDD1  9680               	dw	38528
   101  00FDD3  0098               	dw	152
   102  00FDD5  E100               	dw	57600
   103  00FDD7  05F5               	dw	1525
   104  00FDD9  CA00               	dw	51712
   105  00FDDB  3B9A               	dw	15258
   106  00FDDD                     __end_of_dpowers:
   107                           	opt stack 0
   108  00FDDD                     _hexpowers:
   109                           	opt stack 0
   110  00FDDD  0001               	dw	1
   111  00FDDF  0000               	dw	0
   112  00FDE1  0010               	dw	16
   113  00FDE3  0000               	dw	0
   114  00FDE5  0100               	dw	256
   115  00FDE7  0000               	dw	0
   116  00FDE9  1000               	dw	4096
   117  00FDEB  0000               	dw	0
   118  00FDED  0000               	dw	0
   119  00FDEF  0001               	dw	1
   120  00FDF1  0000               	dw	0
   121  00FDF3  0010               	dw	16
   122  00FDF5  0000               	dw	0
   123  00FDF7  0100               	dw	256
   124  00FDF9  0000               	dw	0
   125  00FDFB  1000               	dw	4096
   126  00FDFD                     __end_of_hexpowers:
   127                           	opt stack 0
   128  00FDFD                     _keys:
   129                           	opt stack 0
   130  00FDFD  31                 	db	49
   131  00FDFE  32                 	db	50
   132  00FDFF  33                 	db	51
   133  00FE00  41                 	db	65
   134  00FE01  34                 	db	52
   135  00FE02  35                 	db	53
   136  00FE03  36                 	db	54
   137  00FE04  42                 	db	66
   138  00FE05  37                 	db	55
   139  00FE06  38                 	db	56
   140  00FE07  39                 	db	57
   141  00FE08  43                 	db	67
   142  00FE09  2A                 	db	42
   143  00FE0A  30                 	db	48
   144  00FE0B  23                 	db	35
   145  00FE0C  44                 	db	68
   146  00FE0D  00                 	db	0
   147  00FE0E                     __end_of_keys:
   148                           	opt stack 0
   149  00FE0E                     _currtime:
   150                           	opt stack 0
   151  00FE0E  30                 	db	48
   152  00FE0F  26                 	db	38
   153  00FE10  13                 	db	19
   154  00FE11  04                 	db	4
   155  00FE12  01                 	db	1
   156  00FE13  03                 	db	3
   157  00FE14  17                 	db	23
   158  00FE15                     __end_of_currtime:
   159                           	opt stack 0
   160  0000                     _ADRES	set	4035
   161  0000                     _ADCON0bits	set	4034
   162  0000                     _PIR2bits	set	4001
   163  0000                     _EECON2	set	4007
   164  0000                     _EEDATA	set	4008
   165  0000                     _EECON1bits	set	4006
   166  0000                     _EEADR	set	4009
   167  0000                     _EEADRH	set	4010
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTBbits	set	3969
   170  0000                     _CCP2CONbits	set	4026
   171  0000                     _CCP1CONbits	set	4029
   172  0000                     _SSPBUF	set	4041
   173  0000                     _SSPADD	set	4040
   174  0000                     _SSPCON2	set	4037
   175  0000                     _SSPCON1	set	4038
   176  0000                     _SSPSTAT	set	4039
   177  0000                     _ADRESL	set	4035
   178  0000                     _ADRESH	set	4036
   179  0000                     _LATCbits	set	3979
   180  0000                     _LATAbits	set	3977
   181  0000                     _LATEbits	set	3981
   182  0000                     _LATBbits	set	3978
   183  0000                     _LATDbits	set	3980
   184  0000                     _T0CON	set	4053
   185  0000                     _CMCONbits	set	4020
   186  0000                     _CVRCON	set	4021
   187  0000                     _ADCON2	set	4032
   188  0000                     _ADCON1	set	4033
   189  0000                     _ADCON0	set	4034
   190  0000                     _LATE	set	3981
   191  0000                     _LATD	set	3980
   192  0000                     _LATC	set	3979
   193  0000                     _LATB	set	3978
   194  0000                     _LATA	set	3977
   195  0000                     _T2CON	set	4042
   196  0000                     _CCPR2L	set	4027
   197  0000                     _CCP2CON	set	4026
   198  0000                     _CCPR1L	set	4030
   199  0000                     _CCP1CON	set	4029
   200  0000                     _PR2	set	4043
   201  0000                     _TRISE	set	3990
   202  0000                     _TRISD	set	3989
   203  0000                     _TRISC	set	3988
   204  0000                     _TRISB	set	3987
   205  0000                     _TRISA	set	3986
   206  0000                     _OSCTUNEbits	set	3995
   207  0000                     _OSCCON	set	4051
   208  0000                     _ACKEN	set	32300
   209  0000                     _ACKDT	set	32301
   210  0000                     _RCEN	set	32299
   211  0000                     _PEN	set	32298
   212  0000                     _RSEN	set	32297
   213  0000                     _SEN	set	32296
   214  0000                     _TRISC4	set	31908
   215  0000                     _TRISC3	set	31907
   216  0000                     _ADFM	set	32263
   217  0000                     _nRBPU	set	32655
   218  00FE15                     STR_67:
   219  00FE15  30                 	db	48	;'0'
   220  00FE16  31                 	db	49	;'1'
   221  00FE17  32                 	db	50	;'2'
   222  00FE18  33                 	db	51	;'3'
   223  00FE19  34                 	db	52	;'4'
   224  00FE1A  35                 	db	53	;'5'
   225  00FE1B  36                 	db	54	;'6'
   226  00FE1C  37                 	db	55	;'7'
   227  00FE1D  38                 	db	56	;'8'
   228  00FE1E  39                 	db	57	;'9'
   229  00FE1F  61                 	db	97	;'a'
   230  00FE20  62                 	db	98	;'b'
   231  00FE21  63                 	db	99	;'c'
   232  00FE22  64                 	db	100	;'d'
   233  00FE23  65                 	db	101	;'e'
   234  00FE24  66                 	db	102	;'f'
   235  00FE25  00                 	db	0
   236  00FE26                     STR_57:
   237  00FE26  25                 	db	37
   238  00FE27  30                 	db	48	;'0'
   239  00FE28  32                 	db	50	;'2'
   240  00FE29  78                 	db	120	;'x'
   241  00FE2A  2F                 	db	47
   242  00FE2B  25                 	db	37
   243  00FE2C  30                 	db	48	;'0'
   244  00FE2D  32                 	db	50	;'2'
   245  00FE2E  78                 	db	120	;'x'
   246  00FE2F  2F                 	db	47
   247  00FE30  25                 	db	37
   248  00FE31  30                 	db	48	;'0'
   249  00FE32  32                 	db	50	;'2'
   250  00FE33  78                 	db	120	;'x'
   251  00FE34  20                 	db	32
   252  00FE35  00                 	db	0
   253  00FE36                     STR_64:
   254  00FE36  23                 	db	35
   255  00FE37  20                 	db	32
   256  00FE38  73                 	db	115	;'s'
   257  00FE39  6F                 	db	111	;'o'
   258  00FE3A  64                 	db	100	;'d'
   259  00FE3B  61                 	db	97	;'a'
   260  00FE3C  20                 	db	32
   261  00FE3D  63                 	db	99	;'c'
   262  00FE3E  61                 	db	97	;'a'
   263  00FE3F  6E                 	db	110	;'n'
   264  00FE40  73                 	db	115	;'s'
   265  00FE41  3A                 	db	58	;':'
   266  00FE42  20                 	db	32
   267  00FE43  25                 	db	37
   268  00FE44  64                 	db	100	;'d'
   269  00FE45  00                 	db	0
   270  00FE46                     STR_61:
   271  00FE46  52                 	db	82	;'R'
   272  00FE47  75                 	db	117	;'u'
   273  00FE48  6E                 	db	110	;'n'
   274  00FE49  23                 	db	35
   275  00FE4A  31                 	db	49	;'1'
   276  00FE4B  20                 	db	32
   277  00FE4C  20                 	db	32
   278  00FE4D  20                 	db	32
   279  00FE4E  20                 	db	32
   280  00FE4F  41                 	db	65	;'A'
   281  00FE50  3A                 	db	58	;':'
   282  00FE51  4E                 	db	78	;'N'
   283  00FE52  65                 	db	101	;'e'
   284  00FE53  78                 	db	120	;'x'
   285  00FE54  74                 	db	116	;'t'
   286  00FE55  00                 	db	0
   287  00FE56                     STR_1:
   288  00FE56  53                 	db	83	;'S'
   289  00FE57  6F                 	db	111	;'o'
   290  00FE58  72                 	db	114	;'r'
   291  00FE59  74                 	db	116	;'t'
   292  00FE5A  69                 	db	105	;'i'
   293  00FE5B  6E                 	db	110	;'n'
   294  00FE5C  67                 	db	103	;'g'
   295  00FE5D  20                 	db	32
   296  00FE5E  63                 	db	99	;'c'
   297  00FE5F  61                 	db	97	;'a'
   298  00FE60  6E                 	db	110	;'n'
   299  00FE61  73                 	db	115	;'s'
   300  00FE62  2E                 	db	46
   301  00FE63  2E                 	db	46
   302  00FE64  2E                 	db	46
   303  00FE65  00                 	db	0
   304  00FE66                     STR_5:
   305  00FE66  74                 	db	116	;'t'
   306  00FE67  65                 	db	101	;'e'
   307  00FE68  73                 	db	115	;'s'
   308  00FE69  74                 	db	116	;'t'
   309  00FE6A  69                 	db	105	;'i'
   310  00FE6B  6E                 	db	110	;'n'
   311  00FE6C  67                 	db	103	;'g'
   312  00FE6D  20                 	db	32
   313  00FE6E  53                 	db	83	;'S'
   314  00FE6F  20                 	db	32
   315  00FE70  73                 	db	115	;'s'
   316  00FE71  68                 	db	104	;'h'
   317  00FE72  61                 	db	97	;'a'
   318  00FE73  6B                 	db	107	;'k'
   319  00FE74  65                 	db	101	;'e'
   320  00FE75  00                 	db	0
   321  00FE76                     STR_2:
   322  00FE76  41                 	db	65	;'A'
   323  00FE77  6E                 	db	110	;'n'
   324  00FE78  79                 	db	121	;'y'
   325  00FE79  20                 	db	32
   326  00FE7A  6B                 	db	107	;'k'
   327  00FE7B  65                 	db	101	;'e'
   328  00FE7C  79                 	db	121	;'y'
   329  00FE7D  20                 	db	32
   330  00FE7E  74                 	db	116	;'t'
   331  00FE7F  6F                 	db	111	;'o'
   332  00FE80  20                 	db	32
   333  00FE81  73                 	db	115	;'s'
   334  00FE82  74                 	db	116	;'t'
   335  00FE83  6F                 	db	111	;'o'
   336  00FE84  70                 	db	112	;'p'
   337  00FE85  00                 	db	0
   338  00FE86                     STR_6:
   339  00FE86  74                 	db	116	;'t'
   340  00FE87  65                 	db	101	;'e'
   341  00FE88  73                 	db	115	;'s'
   342  00FE89  74                 	db	116	;'t'
   343  00FE8A  69                 	db	105	;'i'
   344  00FE8B  6E                 	db	110	;'n'
   345  00FE8C  67                 	db	103	;'g'
   346  00FE8D  20                 	db	32
   347  00FE8E  53                 	db	83	;'S'
   348  00FE8F  31                 	db	49	;'1'
   349  00FE90  20                 	db	32
   350  00FE91  70                 	db	112	;'p'
   351  00FE92  69                 	db	105	;'i'
   352  00FE93  6E                 	db	110	;'n'
   353  00FE94  73                 	db	115	;'s'
   354  00FE95  00                 	db	0
   355  00FE96                     STR_7:
   356  00FE96  74                 	db	116	;'t'
   357  00FE97  65                 	db	101	;'e'
   358  00FE98  73                 	db	115	;'s'
   359  00FE99  74                 	db	116	;'t'
   360  00FE9A  69                 	db	105	;'i'
   361  00FE9B  6E                 	db	110	;'n'
   362  00FE9C  67                 	db	103	;'g'
   363  00FE9D  20                 	db	32
   364  00FE9E  53                 	db	83	;'S'
   365  00FE9F  32                 	db	50	;'2'
   366  00FEA0  20                 	db	32
   367  00FEA1  70                 	db	112	;'p'
   368  00FEA2  69                 	db	105	;'i'
   369  00FEA3  6E                 	db	110	;'n'
   370  00FEA4  73                 	db	115	;'s'
   371  00FEA5  00                 	db	0
   372  00FEA6                     STR_8:
   373  00FEA6  74                 	db	116	;'t'
   374  00FEA7  65                 	db	101	;'e'
   375  00FEA8  73                 	db	115	;'s'
   376  00FEA9  74                 	db	116	;'t'
   377  00FEAA  69                 	db	105	;'i'
   378  00FEAB  6E                 	db	110	;'n'
   379  00FEAC  67                 	db	103	;'g'
   380  00FEAD  20                 	db	32
   381  00FEAE  53                 	db	83	;'S'
   382  00FEAF  33                 	db	51	;'3'
   383  00FEB0  20                 	db	32
   384  00FEB1  70                 	db	112	;'p'
   385  00FEB2  69                 	db	105	;'i'
   386  00FEB3  6E                 	db	110	;'n'
   387  00FEB4  73                 	db	115	;'s'
   388  00FEB5  00                 	db	0
   389  00FEB6                     STR_66:
   390  00FEB6  23                 	db	35
   391  00FEB7  20                 	db	32
   392  00FEB8  73                 	db	115	;'s'
   393  00FEB9  6F                 	db	111	;'o'
   394  00FEBA  75                 	db	117	;'u'
   395  00FEBB  70                 	db	112	;'p'
   396  00FEBC  20                 	db	32
   397  00FEBD  63                 	db	99	;'c'
   398  00FEBE  61                 	db	97	;'a'
   399  00FEBF  6E                 	db	110	;'n'
   400  00FEC0  73                 	db	115	;'s'
   401  00FEC1  3A                 	db	58	;':'
   402  00FEC2  20                 	db	32
   403  00FEC3  34                 	db	52	;'4'
   404  00FEC4  00                 	db	0
   405  00FEC5                     STR_59:
   406  00FEC5  25                 	db	37
   407  00FEC6  30                 	db	48	;'0'
   408  00FEC7  32                 	db	50	;'2'
   409  00FEC8  78                 	db	120	;'x'
   410  00FEC9  3A                 	db	58	;':'
   411  00FECA  25                 	db	37
   412  00FECB  30                 	db	48	;'0'
   413  00FECC  32                 	db	50	;'2'
   414  00FECD  78                 	db	120	;'x'
   415  00FECE  3A                 	db	58	;':'
   416  00FECF  25                 	db	37
   417  00FED0  30                 	db	48	;'0'
   418  00FED1  32                 	db	50	;'2'
   419  00FED2  78                 	db	120	;'x'
   420  00FED3  00                 	db	0
   421  00FED4                     STR_62:
   422  00FED4  23                 	db	35
   423  00FED5  20                 	db	32
   424  00FED6  6F                 	db	111	;'o'
   425  00FED7  66                 	db	102	;'f'
   426  00FED8  20                 	db	32
   427  00FED9  63                 	db	99	;'c'
   428  00FEDA  61                 	db	97	;'a'
   429  00FEDB  6E                 	db	110	;'n'
   430  00FEDC  73                 	db	115	;'s'
   431  00FEDD  3A                 	db	58	;':'
   432  00FEDE  20                 	db	32
   433  00FEDF  25                 	db	37
   434  00FEE0  64                 	db	100	;'d'
   435  00FEE1  00                 	db	0
   436  00FEE2                     STR_22:
   437  00FEE2  70                 	db	112	;'p'
   438  00FEE3  72                 	db	114	;'r'
   439  00FEE4  6F                 	db	111	;'o'
   440  00FEE5  67                 	db	103	;'g'
   441  00FEE6  72                 	db	114	;'r'
   442  00FEE7  61                 	db	97	;'a'
   443  00FEE8  6D                 	db	109	;'m'
   444  00FEE9  20                 	db	32
   445  00FEEA  73                 	db	115	;'s'
   446  00FEEB  70                 	db	112	;'p'
   447  00FEEC  65                 	db	101	;'e'
   448  00FEED  65                 	db	101	;'e'
   449  00FEEE  64                 	db	100	;'d'
   450  00FEEF  00                 	db	0
   451  00FEF0                     STR_18:
   452  00FEF0  74                 	db	116	;'t'
   453  00FEF1  65                 	db	101	;'e'
   454  00FEF2  73                 	db	115	;'s'
   455  00FEF3  74                 	db	116	;'t'
   456  00FEF4  69                 	db	105	;'i'
   457  00FEF5  6E                 	db	110	;'n'
   458  00FEF6  67                 	db	103	;'g'
   459  00FEF7  20                 	db	32
   460  00FEF8  6C                 	db	108	;'l'
   461  00FEF9  61                 	db	97	;'a'
   462  00FEFA  62                 	db	98	;'b'
   463  00FEFB  65                 	db	101	;'e'
   464  00FEFC  6C                 	db	108	;'l'
   465  00FEFD  00                 	db	0
   466  00FEFE                     STR_35:
   467  00FEFE  73                 	db	115	;'s'
   468  00FEFF  6F                 	db	111	;'o'
   469  00FF00  64                 	db	100	;'d'
   470  00FF01  61                 	db	97	;'a'
   471  00FF02  20                 	db	32
   472  00FF03  63                 	db	99	;'c'
   473  00FF04  61                 	db	97	;'a'
   474  00FF05  6E                 	db	110	;'n'
   475  00FF06  20                 	db	32
   476  00FF07  74                 	db	116	;'t'
   477  00FF08  65                 	db	101	;'e'
   478  00FF09  73                 	db	115	;'s'
   479  00FF0A  74                 	db	116	;'t'
   480  00FF0B  00                 	db	0
   481  00FF0C                     STR_24:
   482  00FF0C  73                 	db	115	;'s'
   483  00FF0D  6F                 	db	111	;'o'
   484  00FF0E  75                 	db	117	;'u'
   485  00FF0F  70                 	db	112	;'p'
   486  00FF10  20                 	db	32
   487  00FF11  63                 	db	99	;'c'
   488  00FF12  61                 	db	97	;'a'
   489  00FF13  6E                 	db	110	;'n'
   490  00FF14  20                 	db	32
   491  00FF15  74                 	db	116	;'t'
   492  00FF16  65                 	db	101	;'e'
   493  00FF17  73                 	db	115	;'s'
   494  00FF18  74                 	db	116	;'t'
   495  00FF19  00                 	db	0
   496  00FF1A                     STR_10:
   497  00FF1A  74                 	db	116	;'t'
   498  00FF1B  65                 	db	101	;'e'
   499  00FF1C  73                 	db	115	;'s'
   500  00FF1D  74                 	db	116	;'t'
   501  00FF1E  69                 	db	105	;'i'
   502  00FF1F  6E                 	db	110	;'n'
   503  00FF20  67                 	db	103	;'g'
   504  00FF21  20                 	db	32
   505  00FF22  50                 	db	80	;'P'
   506  00FF23  57                 	db	87	;'W'
   507  00FF24  4D                 	db	77	;'M'
   508  00FF25  31                 	db	49	;'1'
   509  00FF26  00                 	db	0
   510  00FF27                     STR_9:
   511  00FF27  74                 	db	116	;'t'
   512  00FF28  65                 	db	101	;'e'
   513  00FF29  73                 	db	115	;'s'
   514  00FF2A  74                 	db	116	;'t'
   515  00FF2B  69                 	db	105	;'i'
   516  00FF2C  6E                 	db	110	;'n'
   517  00FF2D  67                 	db	103	;'g'
   518  00FF2E  20                 	db	32
   519  00FF2F  50                 	db	80	;'P'
   520  00FF30  57                 	db	87	;'W'
   521  00FF31  4D                 	db	77	;'M'
   522  00FF32  32                 	db	50	;'2'
   523  00FF33  00                 	db	0
   524  00FF34                     STR_30:
   525  00FF34  72                 	db	114	;'r'
   526  00FF35  65                 	db	101	;'e'
   527  00FF36  74                 	db	116	;'t'
   528  00FF37  75                 	db	117	;'u'
   529  00FF38  72                 	db	114	;'r'
   530  00FF39  6E                 	db	110	;'n'
   531  00FF3A  69                 	db	105	;'i'
   532  00FF3B  6E                 	db	110	;'n'
   533  00FF3C  67                 	db	103	;'g'
   534  00FF3D  20                 	db	32
   535  00FF3E  25                 	db	37
   536  00FF3F  64                 	db	100	;'d'
   537  00FF40  00                 	db	0
   538  00FF41                     STR_12:
   539  00FF41  74                 	db	116	;'t'
   540  00FF42  65                 	db	101	;'e'
   541  00FF43  73                 	db	115	;'s'
   542  00FF44  74                 	db	116	;'t'
   543  00FF45  69                 	db	105	;'i'
   544  00FF46  6E                 	db	110	;'n'
   545  00FF47  67                 	db	103	;'g'
   546  00FF48  20                 	db	32
   547  00FF49  49                 	db	73	;'I'
   548  00FF4A  52                 	db	82	;'R'
   549  00FF4B  31                 	db	49	;'1'
   550  00FF4C  00                 	db	0
   551  00FF4D                     STR_14:
   552  00FF4D  74                 	db	116	;'t'
   553  00FF4E  65                 	db	101	;'e'
   554  00FF4F  73                 	db	115	;'s'
   555  00FF50  74                 	db	116	;'t'
   556  00FF51  69                 	db	105	;'i'
   557  00FF52  6E                 	db	110	;'n'
   558  00FF53  67                 	db	103	;'g'
   559  00FF54  20                 	db	32
   560  00FF55  49                 	db	73	;'I'
   561  00FF56  52                 	db	82	;'R'
   562  00FF57  32                 	db	50	;'2'
   563  00FF58  00                 	db	0
   564  00FF59                     STR_16:
   565  00FF59  74                 	db	116	;'t'
   566  00FF5A  65                 	db	101	;'e'
   567  00FF5B  73                 	db	115	;'s'
   568  00FF5C  74                 	db	116	;'t'
   569  00FF5D  69                 	db	105	;'i'
   570  00FF5E  6E                 	db	110	;'n'
   571  00FF5F  67                 	db	103	;'g'
   572  00FF60  20                 	db	32
   573  00FF61  49                 	db	73	;'I'
   574  00FF62  52                 	db	82	;'R'
   575  00FF63  33                 	db	51	;'3'
   576  00FF64  00                 	db	0
   577  00FF65                     STR_4:
   578  00FF65  74                 	db	116	;'t'
   579  00FF66  65                 	db	101	;'e'
   580  00FF67  73                 	db	115	;'s'
   581  00FF68  74                 	db	116	;'t'
   582  00FF69  69                 	db	105	;'i'
   583  00FF6A  6E                 	db	110	;'n'
   584  00FF6B  67                 	db	103	;'g'
   585  00FF6C  20                 	db	32
   586  00FF6D  53                 	db	83	;'S'
   587  00FF6E  20                 	db	32
   588  00FF6F  62                 	db	98	;'b'
   589  00FF70  00                 	db	0
   590  00FF71                     STR_20:
   591  00FF71  74                 	db	116	;'t'
   592  00FF72  65                 	db	101	;'e'
   593  00FF73  73                 	db	115	;'s'
   594  00FF74  74                 	db	116	;'t'
   595  00FF75  69                 	db	105	;'i'
   596  00FF76  6E                 	db	110	;'n'
   597  00FF77  67                 	db	103	;'g'
   598  00FF78  20                 	db	32
   599  00FF79  74                 	db	116	;'t'
   600  00FF7A  61                 	db	97	;'a'
   601  00FF7B  62                 	db	98	;'b'
   602  00FF7C  00                 	db	0
   603  00FF7D                     STR_34:
   604  00FF7D  66                 	db	102	;'f'
   605  00FF7E  69                 	db	105	;'i'
   606  00FF7F  6E                 	db	110	;'n'
   607  00FF80  69                 	db	105	;'i'
   608  00FF81  73                 	db	115	;'s'
   609  00FF82  68                 	db	104	;'h'
   610  00FF83  65                 	db	101	;'e'
   611  00FF84  64                 	db	100	;'d'
   612  00FF85  20                 	db	32
   613  00FF86  25                 	db	37
   614  00FF87  64                 	db	100	;'d'
   615  00FF88  00                 	db	0
   616  00FF89                     STR_3:
   617  00FF89  74                 	db	116	;'t'
   618  00FF8A  65                 	db	101	;'e'
   619  00FF8B  73                 	db	115	;'s'
   620  00FF8C  74                 	db	116	;'t'
   621  00FF8D  69                 	db	105	;'i'
   622  00FF8E  6E                 	db	110	;'n'
   623  00FF8F  67                 	db	103	;'g'
   624  00FF90  20                 	db	32
   625  00FF91  53                 	db	83	;'S'
   626  00FF92  20                 	db	32
   627  00FF93  66                 	db	102	;'f'
   628  00FF94  00                 	db	0
   629  00FF95                     STR_36:
   630  00FF95  25                 	db	37
   631  00FF96  64                 	db	100	;'d'
   632  00FF97  20                 	db	32
   633  00FF98  25                 	db	37
   634  00FF99  78                 	db	120	;'x'
   635  00FF9A  20                 	db	32
   636  00FF9B  25                 	db	37
   637  00FF9C  64                 	db	100	;'d'
   638  00FF9D  20                 	db	32
   639  00FF9E  25                 	db	37
   640  00FF9F  78                 	db	120	;'x'
   641  00FFA0  00                 	db	0
   642  00FFA1                     STR_29:
   643  00FFA1  73                 	db	115	;'s'
   644  00FFA2  6F                 	db	111	;'o'
   645  00FFA3  72                 	db	114	;'r'
   646  00FFA4  74                 	db	116	;'t'
   647  00FFA5  69                 	db	105	;'i'
   648  00FFA6  6E                 	db	110	;'n'
   649  00FFA7  67                 	db	103	;'g'
   650  00FFA8  20                 	db	32
   651  00FFA9  25                 	db	37
   652  00FFAA  64                 	db	100	;'d'
   653  00FFAB  00                 	db	0
   654  00FFAC                     STR_27:
   655  00FFAC  74                 	db	116	;'t'
   656  00FFAD  65                 	db	101	;'e'
   657  00FFAE  73                 	db	115	;'s'
   658  00FFAF  74                 	db	116	;'t'
   659  00FFB0  69                 	db	105	;'i'
   660  00FFB1  6E                 	db	110	;'n'
   661  00FFB2  67                 	db	103	;'g'
   662  00FFB3  20                 	db	32
   663  00FFB4  25                 	db	37
   664  00FFB5  64                 	db	100	;'d'
   665  00FFB6  00                 	db	0
   666  00FFB7                     STR_23:
   667  00FFB7  6C                 	db	108	;'l'
   668  00FFB8  6F                 	db	111	;'o'
   669  00FFB9  6F                 	db	111	;'o'
   670  00FFBA  70                 	db	112	;'p'
   671  00FFBB  73                 	db	115	;'s'
   672  00FFBC  3A                 	db	58	;':'
   673  00FFBD  20                 	db	32
   674  00FFBE  25                 	db	37
   675  00FFBF  6C                 	db	108	;'l'
   676  00FFC0  75                 	db	117	;'u'
   677  00FFC1  00                 	db	0
   678  00FFC2                     STR_11:
   679  00FFC2  74                 	db	116	;'t'
   680  00FFC3  69                 	db	105	;'i'
   681  00FFC4  6D                 	db	109	;'m'
   682  00FFC5  65                 	db	101	;'e'
   683  00FFC6  20                 	db	32
   684  00FFC7  25                 	db	37
   685  00FFC8  78                 	db	120	;'x'
   686  00FFC9  20                 	db	32
   687  00FFCA  25                 	db	37
   688  00FFCB  78                 	db	120	;'x'
   689  00FFCC  00                 	db	0
   690  00FFCD                     STR_26:
   691  00FFCD  76                 	db	118	;'v'
   692  00FFCE  61                 	db	97	;'a'
   693  00FFCF  6C                 	db	108	;'l'
   694  00FFD0  75                 	db	117	;'u'
   695  00FFD1  65                 	db	101	;'e'
   696  00FFD2  3A                 	db	58	;':'
   697  00FFD3  20                 	db	32
   698  00FFD4  25                 	db	37
   699  00FFD5  78                 	db	120	;'x'
   700  00FFD6  00                 	db	0
   701  00FFD7                     STR_28:
   702  00FFD7  6E                 	db	110	;'n'
   703  00FFD8  6F                 	db	111	;'o'
   704  00FFD9  20                 	db	32
   705  00FFDA  6C                 	db	108	;'l'
   706  00FFDB  61                 	db	97	;'a'
   707  00FFDC  62                 	db	98	;'b'
   708  00FFDD  65                 	db	101	;'e'
   709  00FFDE  6C                 	db	108	;'l'
   710  00FFDF  00                 	db	0
   711  00FFE0                     STR_60:
   712  00FFE0  20                 	db	32
   713  00FFE1  32                 	db	50	;'2'
   714  00FFE2  3A                 	db	58	;':'
   715  00FFE3  4C                 	db	76	;'L'
   716  00FFE4  6F                 	db	111	;'o'
   717  00FFE5  67                 	db	103	;'g'
   718  00FFE6  73                 	db	115	;'s'
   719  00FFE7  00                 	db	0
   720  00FFE8                     STR_58:
   721  00FFE8  33                 	db	51	;'3'
   722  00FFE9  3A                 	db	58	;':'
   723  00FFEA  53                 	db	83	;'S'
   724  00FFEB  74                 	db	116	;'t'
   725  00FFEC  61                 	db	97	;'a'
   726  00FFED  72                 	db	114	;'r'
   727  00FFEE  74                 	db	116	;'t'
   728  00FFEF  00                 	db	0
   729  00FFF0                     STR_19:
   730  00FFF0  25                 	db	37
   731  00FFF1  78                 	db	120	;'x'
   732  00FFF2  20                 	db	32
   733  00FFF3  20                 	db	32
   734  00FFF4  20                 	db	32
   735  00FFF5  25                 	db	37
   736  00FFF6  78                 	db	120	;'x'
   737  00FFF7  00                 	db	0
   738  00FFF8                     STR_25:
   739  00FFF8  25                 	db	37
   740  00FFF9  64                 	db	100	;'d'
   741  00FFFA  20                 	db	32
   742  00FFFB  20                 	db	32
   743  00FFFC  25                 	db	37
   744  00FFFD  64                 	db	100	;'d'
   745  00FFFE  00                 	db	0
   746  0000                     
   747                           ; #config settings
   748  00FFFF  00                 	db	0	; dummy byte at the end
   749  0000                     
   750                           	psect	cinit
   751  00D652                     __pcinit:
   752                           	opt stack 0
   753  00D652                     start_initialization:
   754                           	opt stack 0
   755  00D652                     __initialization:
   756                           	opt stack 0
   757                           
   758                           ; Clear objects allocated to BANK0 (10 bytes)
   759  00D652  EE00  F080         	lfsr	0,__pbssBANK0
   760  00D656  0E0A               	movlw	10
   761  00D658                     clear_0:
   762  00D658  6AEE               	clrf	postinc0,c
   763  00D65A  06E8               	decf	wreg,f,c
   764  00D65C  E1FD               	bnz	clear_0
   765                           
   766                           ; Clear objects allocated to COMRAM (16 bytes)
   767  00D65E  EE00  F070         	lfsr	0,__pbssCOMRAM
   768  00D662  0E10               	movlw	16
   769  00D664                     clear_1:
   770  00D664  6AEE               	clrf	postinc0,c
   771  00D666  06E8               	decf	wreg,f,c
   772  00D668  E1FD               	bnz	clear_1
   773  00D66A                     end_of_initialization:
   774                           	opt stack 0
   775  00D66A                     __end_of__initialization:
   776                           	opt stack 0
   777  00D66A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   778  00D66C  6EF8               	movwf	tblptru,c
   779  00D66E  0100               	movlb	0
   780  00D670  EF7A  F072         	goto	_main	;jump to C main() function
   781                           tblptru	equ	0xFF8
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           
   785                           	psect	bssCOMRAM
   786  000070                     __pbssCOMRAM:
   787                           	opt stack 0
   788  000070                     _time:
   789                           	opt stack 0
   790  000070                     	ds	7
   791  000077                     _t2:
   792                           	opt stack 0
   793  000077                     	ds	2
   794  000079                     _t:
   795                           	opt stack 0
   796  000079                     	ds	2
   797  00007B                     _s:
   798                           	opt stack 0
   799  00007B                     	ds	2
   800  00007D                     _t3:
   801                           	opt stack 0
   802  00007D                     	ds	2
   803  00007F                     _keypress:
   804                           	opt stack 0
   805  00007F                     	ds	1
   806                           tblptru	equ	0xFF8
   807                           postinc0	equ	0xFEE
   808                           wreg	equ	0xFE8
   809                           
   810                           	psect	bssBANK0
   811  000080                     __pbssBANK0:
   812                           	opt stack 0
   813  000080                     _curr:
   814                           	opt stack 0
   815  000080                     	ds	2
   816  000082                     _prev:
   817                           	opt stack 0
   818  000082                     	ds	2
   819  000084                     _s3:
   820                           	opt stack 0
   821  000084                     	ds	2
   822  000086                     _s2:
   823                           	opt stack 0
   824  000086                     	ds	2
   825  000088                     _s1:
   826                           	opt stack 0
   827  000088                     	ds	2
   828                           tblptru	equ	0xFF8
   829                           postinc0	equ	0xFEE
   830                           wreg	equ	0xFE8
   831                           
   832                           	psect	cstackCOMRAM
   833  000001                     __pcstackCOMRAM:
   834                           	opt stack 0
   835  000001                     ??_readADC:
   836  000001                     ??_eepromRead:
   837  000001                     ??_isdigit:
   838  000001                     ??_I2C_Master_Wait:
   839  000001                     ?___wmul:
   840                           	opt stack 0
   841  000001                     ?___lldiv:
   842                           	opt stack 0
   843  000001                     lcdNibble@temp:
   844                           	opt stack 0
   845  000001                     PWM1@duty:
   846                           	opt stack 0
   847  000001                     PWM2@duty:
   848                           	opt stack 0
   849  000001                     updateS2@mode:
   850                           	opt stack 0
   851  000001                     updateS3@mode:
   852                           	opt stack 0
   853  000001                     ___wmul@multiplier:
   854                           	opt stack 0
   855  000001                     ___lldiv@dividend:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x0
   859  000001                     	ds	1
   860  000002                     lcdNibble@data:
   861                           	opt stack 0
   862  000002                     I2C_Master_Read@a:
   863                           	opt stack 0
   864  000002                     readADC@channel:
   865                           	opt stack 0
   866  000002                     _isdigit$1330:
   867                           	opt stack 0
   868  000002                     I2C_Master_Write@d:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x1
   872  000002                     	ds	1
   873  000003                     ??_updateS2:
   874  000003                     ??_updateS3:
   875  000003                     ??_PWM2:
   876  000003                     ??_PWM1:
   877  000003                     lcdInst@data:
   878                           	opt stack 0
   879  000003                     putch@data:
   880                           	opt stack 0
   881  000003                     I2C_Master_Read@temp:
   882                           	opt stack 0
   883  000003                     eepromRead@address:
   884                           	opt stack 0
   885  000003                     isdigit@c:
   886                           	opt stack 0
   887  000003                     ___wmul@multiplicand:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x2
   891  000003                     	ds	1
   892  000004                     ??_initLCD:
   893  000004                     updateTime@j:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x3
   897  000004                     	ds	1
   898  000005                     ___wmul@product:
   899                           	opt stack 0
   900  000005                     ___lldiv@divisor:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x4
   904  000005                     	ds	2
   905  000007                     ?_timePassed:
   906                           	opt stack 0
   907  000007                     timePassed@start:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x6
   911  000007                     	ds	2
   912  000009                     ??_timePassed:
   913  000009                     ___lldiv@quotient:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x8
   917  000009                     	ds	4
   918  00000D                     ___lldiv@counter:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0xC
   922  00000D                     	ds	1
   923  00000E                     ?___llmod:
   924                           	opt stack 0
   925  00000E                     I2C_Master_Init@c:
   926                           	opt stack 0
   927  00000E                     ___llmod@dividend:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0xD
   931  00000E                     	ds	4
   932  000012                     ??_I2C_Master_Init:
   933  000012                     ___llmod@divisor:
   934                           	opt stack 0
   935                           
   936                           ; 4 bytes @ 0x11
   937  000012                     	ds	4
   938  000016                     ___llmod@counter:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x15
   942  000016                     	ds	1
   943  000017                     ?_printf:
   944                           	opt stack 0
   945  000017                     printf@f:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x16
   949  000017                     	ds	10
   950  000021                     ??_printf:
   951                           
   952                           ; 1 bytes @ 0x20
   953  000021                     	ds	4
   954  000025                     printf@idx:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x24
   958  000025                     	ds	1
   959  000026                     printf@prec:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x25
   963  000026                     	ds	2
   964  000028                     printf@ap:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x27
   968  000028                     	ds	2
   969  00002A                     printf@val:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x29
   973  00002A                     	ds	4
   974  00002E                     printf@width:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x2D
   978  00002E                     	ds	2
   979  000030                     printf@flag:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x2F
   983  000030                     	ds	1
   984  000031                     printf@c:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x30
   988  000031                     	ds	1
   989  000032                     ??_displayLogs:
   990  000032                     updateS1@mode:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x31
   994  000032                     	ds	2
   995  000034                     ??_updateS1:
   996                           
   997                           ; 1 bytes @ 0x33
   998  000034                     	ds	1
   999  000035                     ??_main:
  1000                           
  1001                           ; 1 bytes @ 0x34
  1002  000035                     	ds	7
  1003  00003C                     main@prevUnblock:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x3B
  1007  00003C                     	ds	2
  1008  00003E                     main@sodaLoad:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x3D
  1012  00003E                     	ds	2
  1013  000040                     main@canCheck:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x3F
  1017  000040                     	ds	2
  1018  000042                     main@prevSoupTime:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x41
  1022  000042                     	ds	2
  1023  000044                     main@sodaState:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x43
  1027  000044                     	ds	2
  1028  000046                     main@dc:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x45
  1032  000046                     	ds	2
  1033  000048                     main@prevSodaTime:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x47
  1037  000048                     	ds	2
  1038  00004A                     _main$1702:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x49
  1042  00004A                     	ds	2
  1043  00004C                     main@sodaThresh:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x4B
  1047  00004C                     	ds	2
  1048  00004E                     main@prevSoupLoad:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x4D
  1052  00004E                     	ds	2
  1053  000050                     main@c:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x4F
  1057  000050                     	ds	4
  1058  000054                     main@soupLoad:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x53
  1062  000054                     	ds	2
  1063  000056                     main@prevSodaLoad:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x55
  1067  000056                     	ds	2
  1068  000058                     main@startTime:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x57
  1072  000058                     	ds	2
  1073  00005A                     main@standby:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x59
  1077  00005A                     	ds	2
  1078  00005C                     main@tabState:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x5B
  1082  00005C                     	ds	2
  1083  00005E                     main@labelState:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x5D
  1087  00005E                     	ds	2
  1088  000060                     main@soupSort:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x5F
  1092  000060                     	ds	2
  1093  000062                     main@sodaSort:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x61
  1097  000062                     	ds	2
  1098  000064                     main@s:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x63
  1102  000064                     	ds	2
  1103  000066                     main@S2mode:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x65
  1107  000066                     	ds	2
  1108  000068                     main@S3steps:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x67
  1112  000068                     	ds	2
  1113  00006A                     main@S1mode:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x69
  1117  00006A                     	ds	2
  1118  00006C                     main@S1steps:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x6B
  1122  00006C                     	ds	2
  1123  00006E                     main@S3mode:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x6D
  1127  00006E                     	ds	2
  1128                           tblptru	equ	0xFF8
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           
  1132 ;;
  1133 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1134 ;;
  1135 ;; *************** function _main *****************
  1136 ;; Defined at:
  1137 ;;		line 62 in file "main.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;		None
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  c               4   79[COMRAM] unsigned long 
  1142 ;;  S3mode          2  109[COMRAM] int 
  1143 ;;  S1steps         2  107[COMRAM] int 
  1144 ;;  S1mode          2  105[COMRAM] int 
  1145 ;;  S3steps         2  103[COMRAM] int 
  1146 ;;  S2mode          2  101[COMRAM] int 
  1147 ;;  s               2   99[COMRAM] int 
  1148 ;;  sodaSort        2   97[COMRAM] int 
  1149 ;;  soupSort        2   95[COMRAM] int 
  1150 ;;  labelState      2   93[COMRAM] int 
  1151 ;;  tabState        2   91[COMRAM] int 
  1152 ;;  standby         2   89[COMRAM] int 
  1153 ;;  startTime       2   87[COMRAM] int 
  1154 ;;  prevSodaLoad    2   85[COMRAM] int 
  1155 ;;  soupLoad        2   83[COMRAM] int 
  1156 ;;  prevSoupLoad    2   77[COMRAM] int 
  1157 ;;  sodaThresh      2   75[COMRAM] int 
  1158 ;;  prevSodaTime    2   71[COMRAM] int 
  1159 ;;  dc              2   69[COMRAM] int 
  1160 ;;  sodaState       2   67[COMRAM] int 
  1161 ;;  prevSoupTime    2   65[COMRAM] int 
  1162 ;;  canCheck        2   63[COMRAM] int 
  1163 ;;  sodaLoad        2   61[COMRAM] int 
  1164 ;;  prevUnblock     2   59[COMRAM] int 
  1165 ;;  firstrun        2    0        int 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  2  119[None  ] int 
  1168 ;; Registers used:
  1169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1176 ;;      Locals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1177 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1178 ;;      Totals:        59       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1179 ;;Total ram usage:       59 bytes
  1180 ;; Hardware stack levels required when called:    4
  1181 ;; This function calls:
  1182 ;;		_PWM1
  1183 ;;		_PWM1off
  1184 ;;		_PWM2
  1185 ;;		_PWM2off
  1186 ;;		___llmod
  1187 ;;		___wmul
  1188 ;;		_displayLogs
  1189 ;;		_homescreen
  1190 ;;		_initialize
  1191 ;;		_keycheck
  1192 ;;		_keyinterrupt
  1193 ;;		_lcdInst
  1194 ;;		_printf
  1195 ;;		_readADC
  1196 ;;		_timePassed
  1197 ;;		_updateS1
  1198 ;;		_updateS2
  1199 ;;		_updateS3
  1200 ;;		_updateTime
  1201 ;; This function is called by:
  1202 ;;		Startup code after reset
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text0
  1207  00E4F4                     __ptext0:
  1208                           	opt stack 0
  1209  00E4F4                     _main:
  1210                           	opt stack 27
  1211                           
  1212                           ;main.c: 63: initialize();
  1213                           
  1214                           ;incstack = 0
  1215  00E4F4  ECE2  F06C         	call	_initialize	;wreg free
  1216                           
  1217                           ;main.c: 64: int standby = 1;
  1218  00E4F8  0E00               	movlw	0
  1219  00E4FA  6E5B               	movwf	main@standby+1,c
  1220  00E4FC  0E01               	movlw	1
  1221  00E4FE  6E5A               	movwf	main@standby,c
  1222                           
  1223                           ;main.c: 65: int s = 0;
  1224  00E500  0E00               	movlw	0
  1225  00E502  6E65               	movwf	main@s+1,c
  1226  00E504  0E00               	movlw	0
  1227  00E506  6E64               	movwf	main@s,c
  1228                           
  1229                           ;main.c: 66: int dc = 0;
  1230  00E508  0E00               	movlw	0
  1231  00E50A  6E47               	movwf	main@dc+1,c
  1232  00E50C  0E00               	movlw	0
  1233  00E50E  6E46               	movwf	main@dc,c
  1234                           
  1235                           ;main.c: 67: int startTime;
  1236                           ;main.c: 68: int prevUnblock = 0;
  1237  00E510  0E00               	movlw	0
  1238  00E512  6E3D               	movwf	main@prevUnblock+1,c
  1239  00E514  0E00               	movlw	0
  1240  00E516  6E3C               	movwf	main@prevUnblock,c
  1241                           
  1242                           ;main.c: 69: int soupLoad = 1;
  1243  00E518  0E00               	movlw	0
  1244  00E51A  6E55               	movwf	main@soupLoad+1,c
  1245  00E51C  0E01               	movlw	1
  1246  00E51E  6E54               	movwf	main@soupLoad,c
  1247                           
  1248                           ;main.c: 70: int sodaLoad = 1;
  1249  00E520  0E00               	movlw	0
  1250  00E522  6E3F               	movwf	main@sodaLoad+1,c
  1251  00E524  0E01               	movlw	1
  1252  00E526  6E3E               	movwf	main@sodaLoad,c
  1253                           
  1254                           ;main.c: 71: int canCheck;
  1255                           ;main.c: 72: int prevSodaTime = 0;
  1256  00E528  0E00               	movlw	0
  1257  00E52A  6E49               	movwf	main@prevSodaTime+1,c
  1258  00E52C  0E00               	movlw	0
  1259  00E52E  6E48               	movwf	main@prevSodaTime,c
  1260                           
  1261                           ;main.c: 73: int prevSoupTime = 0;
  1262  00E530  0E00               	movlw	0
  1263  00E532  6E43               	movwf	main@prevSoupTime+1,c
  1264  00E534  0E00               	movlw	0
  1265  00E536  6E42               	movwf	main@prevSoupTime,c
  1266                           
  1267                           ;main.c: 74: int sodaState = 0;
  1268  00E538  0E00               	movlw	0
  1269  00E53A  6E45               	movwf	main@sodaState+1,c
  1270  00E53C  0E00               	movlw	0
  1271  00E53E  6E44               	movwf	main@sodaState,c
  1272                           
  1273                           ;main.c: 75: int tabState = 0;
  1274  00E540  0E00               	movlw	0
  1275  00E542  6E5D               	movwf	main@tabState+1,c
  1276  00E544  0E00               	movlw	0
  1277  00E546  6E5C               	movwf	main@tabState,c
  1278                           
  1279                           ;main.c: 76: int labelState = 0;
  1280  00E548  0E00               	movlw	0
  1281  00E54A  6E5F               	movwf	main@labelState+1,c
  1282  00E54C  0E00               	movlw	0
  1283  00E54E  6E5E               	movwf	main@labelState,c
  1284                           
  1285                           ;main.c: 79: int soupSort;
  1286                           ;main.c: 80: int prevSoupLoad;
  1287                           ;main.c: 81: int sodaSort;
  1288                           ;main.c: 82: int prevSodaLoad;
  1289                           ;main.c: 83: int S1mode = 0;
  1290  00E550  0E00               	movlw	0
  1291  00E552  6E6B               	movwf	main@S1mode+1,c
  1292  00E554  0E00               	movlw	0
  1293  00E556  6E6A               	movwf	main@S1mode,c
  1294                           
  1295                           ;main.c: 84: int S2mode = 0;
  1296  00E558  0E00               	movlw	0
  1297  00E55A  6E67               	movwf	main@S2mode+1,c
  1298  00E55C  0E00               	movlw	0
  1299  00E55E  6E66               	movwf	main@S2mode,c
  1300                           
  1301                           ;main.c: 85: int S3mode = 0;
  1302  00E560  0E00               	movlw	0
  1303  00E562  6E6F               	movwf	main@S3mode+1,c
  1304  00E564  0E00               	movlw	0
  1305  00E566  6E6E               	movwf	main@S3mode,c
  1306                           
  1307                           ;main.c: 86: int S1steps;
  1308                           ;main.c: 87: int S3steps;
  1309                           ;main.c: 88: int firstrun;
  1310                           ;main.c: 89: int sodaThresh;
  1311                           ;main.c: 91: unsigned long c = 0;
  1312  00E568  0E00               	movlw	0
  1313  00E56A  6E50               	movwf	main@c,c
  1314  00E56C  0E00               	movlw	0
  1315  00E56E  6E51               	movwf	main@c+1,c
  1316  00E570  0E00               	movlw	0
  1317  00E572  6E52               	movwf	main@c+2,c
  1318  00E574  0E00               	movlw	0
  1319  00E576  6E53               	movwf	main@c+3,c
  1320                           
  1321                           ;main.c: 93: _delay((unsigned long)((10)*(32000000/4000.0)));
  1322  00E578  0E68               	movlw	104
  1323  00E57A  6E35               	movwf	??_main& (0+255),c
  1324  00E57C  0EE4               	movlw	228
  1325  00E57E                     u4707:
  1326  00E57E  2EE8               	decfsz	wreg,f,c
  1327  00E580  D7FE               	bra	u4707
  1328  00E582  2E35               	decfsz	??_main& (0+255),f,c
  1329  00E584  D7FC               	bra	u4707
  1330  00E586  D000               	nop2	
  1331  00E588                     l3907:
  1332                           
  1333                           ;main.c: 97: updateTime();
  1334  00E588  ECAF  F06C         	call	_updateTime	;wreg free
  1335                           
  1336                           ;main.c: 98: updateS1(S1mode);
  1337  00E58C  C06A  F032         	movff	main@S1mode,updateS1@mode
  1338  00E590  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  1339  00E594  EC84  F06F         	call	_updateS1	;wreg free
  1340                           
  1341                           ;main.c: 99: updateS2(S2mode);
  1342  00E598  C066  F001         	movff	main@S2mode,updateS2@mode
  1343  00E59C  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  1344  00E5A0  EC14  F06E         	call	_updateS2	;wreg free
  1345                           
  1346                           ;main.c: 100: updateS3(S3mode);
  1347  00E5A4  C06E  F001         	movff	main@S3mode,updateS3@mode
  1348  00E5A8  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  1349  00E5AC  ECCC  F06E         	call	_updateS3	;wreg free
  1350                           
  1351                           ;main.c: 102: readADC(2);
  1352  00E5B0  0E02               	movlw	2
  1353  00E5B2  EC3A  F06B         	call	_readADC
  1354                           
  1355                           ;main.c: 103: if (ADRES >= 0x3d0){soupLoad = 1;}
  1356  00E5B6  0ED0               	movlw	208
  1357  00E5B8  5CC3               	subwf	4035,w,c	;volatile
  1358  00E5BA  0E03               	movlw	3
  1359  00E5BC  58C4               	subwfb	4036,w,c	;volatile
  1360  00E5BE  A0D8               	btfss	status,0,c
  1361  00E5C0  D004               	goto	l3921
  1362  00E5C2  0E00               	movlw	0
  1363  00E5C4  6E55               	movwf	main@soupLoad+1,c
  1364  00E5C6  0E01               	movlw	1
  1365  00E5C8  D003               	goto	L1
  1366  00E5CA                     l3921:
  1367                           
  1368                           ;main.c: 104: else {soupLoad = 0;}
  1369  00E5CA  0E00               	movlw	0
  1370  00E5CC  6E55               	movwf	main@soupLoad+1,c
  1371  00E5CE  0E00               	movlw	0
  1372  00E5D0                     L1:
  1373  00E5D0  6E54               	movwf	main@soupLoad,c
  1374                           
  1375                           ;main.c: 107: if (standby == 1){
  1376  00E5D2  045A               	decf	main@standby,w,c
  1377  00E5D4  105B               	iorwf	main@standby+1,w,c
  1378  00E5D6  A4D8               	btfss	status,2,c
  1379  00E5D8  D1DC               	goto	l4019
  1380                           
  1381                           ;main.c: 109: keypress = (0);
  1382  00E5DA  0E00               	movlw	0
  1383  00E5DC  6E7F               	movwf	_keypress,c	;volatile
  1384                           
  1385                           ;main.c: 110: homescreen();
  1386  00E5DE  EC4B  F06C         	call	_homescreen	;wreg free
  1387                           
  1388                           ;main.c: 111: keyinterrupt();
  1389  00E5E2  EC10  F06B         	call	_keyinterrupt	;wreg free
  1390                           
  1391                           ;main.c: 114: if(keypress == 2){
  1392  00E5E6  0E02               	movlw	2
  1393  00E5E8  187F               	xorwf	_keypress,w,c	;volatile
  1394  00E5EA  A4D8               	btfss	status,2,c
  1395  00E5EC  D0EB               	goto	l3977
  1396                           
  1397                           ;main.c: 115: standby = 0;
  1398  00E5EE  0E00               	movlw	0
  1399  00E5F0  6E5B               	movwf	main@standby+1,c
  1400  00E5F2  0E00               	movlw	0
  1401  00E5F4  6E5A               	movwf	main@standby,c
  1402                           
  1403                           ;main.c: 116: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1404  00E5F6  0E01               	movlw	1
  1405  00E5F8  ECF1  F06A         	call	_lcdInst
  1406  00E5FC  0E34               	movlw	52
  1407  00E5FE  6E35               	movwf	??_main& (0+255),c
  1408  00E600  0EF2               	movlw	242
  1409  00E602                     u4717:
  1410  00E602  2EE8               	decfsz	wreg,f,c
  1411  00E604  D7FE               	bra	u4717
  1412  00E606  2E35               	decfsz	??_main& (0+255),f,c
  1413  00E608  D7FC               	bra	u4717
  1414                           
  1415                           ;main.c: 117: printf("Sorting cans...");
  1416  00E60A  0E56               	movlw	low STR_1
  1417  00E60C  6E17               	movwf	printf@f,c
  1418  00E60E  0EFE               	movlw	high STR_1
  1419  00E610  6E18               	movwf	printf@f+1,c
  1420  00E612  EC71  F070         	call	_printf	;wreg free
  1421                           
  1422                           ;main.c: 118: lcdInst(0b11000000);;
  1423  00E616  0EC0               	movlw	192
  1424  00E618  ECF1  F06A         	call	_lcdInst
  1425                           
  1426                           ;main.c: 119: printf("Any key to stop");
  1427  00E61C  0E76               	movlw	low STR_2
  1428  00E61E  6E17               	movwf	printf@f,c
  1429  00E620  0EFE               	movlw	high STR_2
  1430  00E622  6E18               	movwf	printf@f+1,c
  1431  00E624  EC71  F070         	call	_printf	;wreg free
  1432                           
  1433                           ;main.c: 121: dc = 1;
  1434  00E628  0E00               	movlw	0
  1435  00E62A  6E47               	movwf	main@dc+1,c
  1436  00E62C  0E01               	movlw	1
  1437  00E62E  6E46               	movwf	main@dc,c
  1438                           
  1439                           ;main.c: 122: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1440  00E630  C072  F035         	movff	_time+2,??_main
  1441  00E634  0E0F               	movlw	15
  1442  00E636  1635               	andwf	??_main,f,c
  1443  00E638  5035               	movf	??_main,w,c
  1444  00E63A  6E01               	movwf	___wmul@multiplier,c
  1445  00E63C  6A02               	clrf	___wmul@multiplier+1,c
  1446  00E63E  0E0E               	movlw	14
  1447  00E640  6E04               	movwf	___wmul@multiplicand+1,c
  1448  00E642  0E10               	movlw	16
  1449  00E644  6E03               	movwf	___wmul@multiplicand,c
  1450  00E646  EC4C  F06B         	call	___wmul	;wreg free
  1451  00E64A  C070  F036         	movff	_time,??_main+1
  1452  00E64E  3A36               	swapf	??_main+1,f,c
  1453  00E650  0E0F               	movlw	15
  1454  00E652  1636               	andwf	??_main+1,f,c
  1455  00E654  0E0F               	movlw	15
  1456  00E656  1636               	andwf	??_main+1,f,c
  1457  00E658  5036               	movf	??_main+1,w,c
  1458  00E65A  0D0A               	mullw	10
  1459  00E65C  5070               	movf	_time,w,c
  1460  00E65E  0B0F               	andlw	15
  1461  00E660  6E37               	movwf	(??_main+2)& (0+255),c
  1462  00E662  6A38               	clrf	(??_main+3)& (0+255),c
  1463  00E664  50F3               	movf	prodl,w,c
  1464  00E666  2637               	addwf	??_main+2,f,c
  1465  00E668  50F4               	movf	prodh,w,c
  1466  00E66A  2238               	addwfc	??_main+3,f,c
  1467  00E66C  C071  F039         	movff	_time+1,??_main+4
  1468  00E670  0E0F               	movlw	15
  1469  00E672  1639               	andwf	??_main+4,f,c
  1470  00E674  5039               	movf	??_main+4,w,c
  1471  00E676  0D3C               	mullw	60
  1472  00E678  50F3               	movf	prodl,w,c
  1473  00E67A  2637               	addwf	??_main+2,f,c
  1474  00E67C  50F4               	movf	prodh,w,c
  1475  00E67E  2238               	addwfc	??_main+3,f,c
  1476  00E680  C071  F03A         	movff	_time+1,??_main+5
  1477  00E684  3A3A               	swapf	??_main+5,f,c
  1478  00E686  0E0F               	movlw	15
  1479  00E688  163A               	andwf	??_main+5,f,c
  1480  00E68A  0E0F               	movlw	15
  1481  00E68C  163A               	andwf	??_main+5,f,c
  1482  00E68E  503A               	movf	??_main+5,w,c
  1483  00E690  0D0A               	mullw	10
  1484  00E692  50F3               	movf	prodl,w,c
  1485  00E694  2637               	addwf	??_main+2,f,c
  1486  00E696  50F4               	movf	prodh,w,c
  1487  00E698  2238               	addwfc	??_main+3,f,c
  1488  00E69A  5001               	movf	?___wmul,w,c
  1489  00E69C  2637               	addwf	??_main+2,f,c
  1490  00E69E  5002               	movf	?___wmul+1,w,c
  1491  00E6A0  2238               	addwfc	??_main+3,f,c
  1492  00E6A2  C072  F03B         	movff	_time+2,??_main+6
  1493  00E6A6  3A3B               	swapf	??_main+6,f,c
  1494  00E6A8  0E0F               	movlw	15
  1495  00E6AA  163B               	andwf	??_main+6,f,c
  1496  00E6AC  0E0F               	movlw	15
  1497  00E6AE  163B               	andwf	??_main+6,f,c
  1498  00E6B0  503B               	movf	??_main+6,w,c
  1499  00E6B2  0D0A               	mullw	10
  1500  00E6B4  50F3               	movf	prodl,w,c
  1501  00E6B6  2437               	addwf	??_main+2,w,c
  1502  00E6B8  6E58               	movwf	main@startTime,c
  1503  00E6BA  50F4               	movf	prodh,w,c
  1504  00E6BC  2038               	addwfc	??_main+3,w,c
  1505  00E6BE  6E59               	movwf	main@startTime+1,c
  1506                           
  1507                           ;main.c: 123: canCheck = startTime;
  1508  00E6C0  C058  F040         	movff	main@startTime,main@canCheck
  1509  00E6C4  C059  F041         	movff	main@startTime+1,main@canCheck+1
  1510                           
  1511                           ;main.c: 124: PWM2(600);
  1512  00E6C8  0E02               	movlw	2
  1513  00E6CA  6E02               	movwf	PWM2@duty+1,c
  1514  00E6CC  0E58               	movlw	88
  1515  00E6CE  6E01               	movwf	PWM2@duty,c
  1516  00E6D0  ECCE  F06B         	call	_PWM2	;wreg free
  1517                           
  1518                           ;main.c: 126: labelState = 0;
  1519  00E6D4  0E00               	movlw	0
  1520  00E6D6  6E5F               	movwf	main@labelState+1,c
  1521  00E6D8  0E00               	movlw	0
  1522  00E6DA  6E5E               	movwf	main@labelState,c
  1523                           
  1524                           ;main.c: 127: soupSort = 0;
  1525  00E6DC  0E00               	movlw	0
  1526  00E6DE  6E61               	movwf	main@soupSort+1,c
  1527  00E6E0  0E00               	movlw	0
  1528  00E6E2  6E60               	movwf	main@soupSort,c
  1529                           
  1530                           ;main.c: 128: prevSodaTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1531  00E6E4  C072  F035         	movff	_time+2,??_main
  1532  00E6E8  0E0F               	movlw	15
  1533  00E6EA  1635               	andwf	??_main,f,c
  1534  00E6EC  5035               	movf	??_main,w,c
  1535  00E6EE  6E01               	movwf	___wmul@multiplier,c
  1536  00E6F0  6A02               	clrf	___wmul@multiplier+1,c
  1537  00E6F2  0E0E               	movlw	14
  1538  00E6F4  6E04               	movwf	___wmul@multiplicand+1,c
  1539  00E6F6  0E10               	movlw	16
  1540  00E6F8  6E03               	movwf	___wmul@multiplicand,c
  1541  00E6FA  EC4C  F06B         	call	___wmul	;wreg free
  1542  00E6FE  C070  F036         	movff	_time,??_main+1
  1543  00E702  3A36               	swapf	??_main+1,f,c
  1544  00E704  0E0F               	movlw	15
  1545  00E706  1636               	andwf	??_main+1,f,c
  1546  00E708  0E0F               	movlw	15
  1547  00E70A  1636               	andwf	??_main+1,f,c
  1548  00E70C  5036               	movf	??_main+1,w,c
  1549  00E70E  0D0A               	mullw	10
  1550  00E710  5070               	movf	_time,w,c
  1551  00E712  0B0F               	andlw	15
  1552  00E714  6E37               	movwf	(??_main+2)& (0+255),c
  1553  00E716  6A38               	clrf	(??_main+3)& (0+255),c
  1554  00E718  50F3               	movf	prodl,w,c
  1555  00E71A  2637               	addwf	??_main+2,f,c
  1556  00E71C  50F4               	movf	prodh,w,c
  1557  00E71E  2238               	addwfc	??_main+3,f,c
  1558  00E720  C071  F039         	movff	_time+1,??_main+4
  1559  00E724  0E0F               	movlw	15
  1560  00E726  1639               	andwf	??_main+4,f,c
  1561  00E728  5039               	movf	??_main+4,w,c
  1562  00E72A  0D3C               	mullw	60
  1563  00E72C  50F3               	movf	prodl,w,c
  1564  00E72E  2637               	addwf	??_main+2,f,c
  1565  00E730  50F4               	movf	prodh,w,c
  1566  00E732  2238               	addwfc	??_main+3,f,c
  1567  00E734  C071  F03A         	movff	_time+1,??_main+5
  1568  00E738  3A3A               	swapf	??_main+5,f,c
  1569  00E73A  0E0F               	movlw	15
  1570  00E73C  163A               	andwf	??_main+5,f,c
  1571  00E73E  0E0F               	movlw	15
  1572  00E740  163A               	andwf	??_main+5,f,c
  1573  00E742  503A               	movf	??_main+5,w,c
  1574  00E744  0D0A               	mullw	10
  1575  00E746  50F3               	movf	prodl,w,c
  1576  00E748  2637               	addwf	??_main+2,f,c
  1577  00E74A  50F4               	movf	prodh,w,c
  1578  00E74C  2238               	addwfc	??_main+3,f,c
  1579  00E74E  5001               	movf	?___wmul,w,c
  1580  00E750  2637               	addwf	??_main+2,f,c
  1581  00E752  5002               	movf	?___wmul+1,w,c
  1582  00E754  2238               	addwfc	??_main+3,f,c
  1583  00E756  C072  F03B         	movff	_time+2,??_main+6
  1584  00E75A  3A3B               	swapf	??_main+6,f,c
  1585  00E75C  0E0F               	movlw	15
  1586  00E75E  163B               	andwf	??_main+6,f,c
  1587  00E760  0E0F               	movlw	15
  1588  00E762  163B               	andwf	??_main+6,f,c
  1589  00E764  503B               	movf	??_main+6,w,c
  1590  00E766  0D0A               	mullw	10
  1591  00E768  50F3               	movf	prodl,w,c
  1592  00E76A  2437               	addwf	??_main+2,w,c
  1593  00E76C  6E48               	movwf	main@prevSodaTime,c
  1594  00E76E  50F4               	movf	prodh,w,c
  1595  00E770  2038               	addwfc	??_main+3,w,c
  1596  00E772  6E49               	movwf	main@prevSodaTime+1,c
  1597                           
  1598                           ;main.c: 129: tabState = 0;
  1599  00E774  0E00               	movlw	0
  1600  00E776  6E5D               	movwf	main@tabState+1,c
  1601  00E778  0E00               	movlw	0
  1602  00E77A  6E5C               	movwf	main@tabState,c
  1603                           
  1604                           ;main.c: 130: sodaSort = 0;
  1605  00E77C  0E00               	movlw	0
  1606  00E77E  6E63               	movwf	main@sodaSort+1,c
  1607  00E780  0E00               	movlw	0
  1608  00E782  6E62               	movwf	main@sodaSort,c
  1609                           
  1610                           ;main.c: 131: for(s=0;s<40;s++){
  1611  00E784  0E00               	movlw	0
  1612  00E786  6E65               	movwf	main@s+1,c
  1613  00E788  0E00               	movlw	0
  1614  00E78A  6E64               	movwf	main@s,c
  1615  00E78C  BE65               	btfsc	main@s+1,7,c
  1616  00E78E  D008               	goto	l3969
  1617  00E790  5065               	movf	main@s+1,w,c
  1618  00E792  E105               	bnz	u3670
  1619  00E794  0E28               	movlw	40
  1620  00E796  5C64               	subwf	main@s,w,c
  1621  00E798  B0D8               	btfsc	status,0,c
  1622  00E79A  D6F6               	goto	l3907
  1623  00E79C  D001               	goto	l3969
  1624  00E79E                     u3670:
  1625  00E79E  D6F4               	goto	l3907
  1626  00E7A0                     l3969:
  1627                           
  1628                           ;main.c: 132: S2mode = 2;
  1629  00E7A0  0E00               	movlw	0
  1630  00E7A2  6E67               	movwf	main@S2mode+1,c
  1631  00E7A4  0E02               	movlw	2
  1632  00E7A6  6E66               	movwf	main@S2mode,c
  1633                           
  1634                           ;main.c: 133: updateS2(S2mode);
  1635  00E7A8  C066  F001         	movff	main@S2mode,updateS2@mode
  1636  00E7AC  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  1637  00E7B0  EC14  F06E         	call	_updateS2	;wreg free
  1638  00E7B4  4A64               	infsnz	main@s,f,c
  1639  00E7B6  2A65               	incf	main@s+1,f,c
  1640  00E7B8  BE65               	btfsc	main@s+1,7,c
  1641  00E7BA  D7F2               	goto	l3969
  1642  00E7BC  5065               	movf	main@s+1,w,c
  1643  00E7BE  E101               	bnz	u3680
  1644  00E7C0  D7E9               	goto	L2
  1645  00E7C2                     u3680:
  1646                           
  1647                           ;main.c: 134: }
  1648                           ;main.c: 135: }
  1649  00E7C2  D6E2               	goto	l3907
  1650  00E7C4                     l3977:
  1651                           
  1652                           ;main.c: 136: else if(keypress == 1){
  1653  00E7C4  047F               	decf	_keypress,w,c	;volatile
  1654  00E7C6  A4D8               	btfss	status,2,c
  1655  00E7C8  D003               	goto	l3981
  1656                           
  1657                           ;main.c: 138: displayLogs();
  1658  00E7CA  ECB4  F06D         	call	_displayLogs	;wreg free
  1659                           
  1660                           ;main.c: 139: }
  1661  00E7CE  D6DC               	goto	l3907
  1662  00E7D0                     l3981:
  1663                           
  1664                           ;main.c: 140: else if(keypress == 15 ) {
  1665  00E7D0  0E0F               	movlw	15
  1666  00E7D2  187F               	xorwf	_keypress,w,c	;volatile
  1667  00E7D4  A4D8               	btfss	status,2,c
  1668  00E7D6  D009               	goto	l3985
  1669                           
  1670                           ;main.c: 141: standby = 2;
  1671  00E7D8  0E00               	movlw	0
  1672  00E7DA  6E5B               	movwf	main@standby+1,c
  1673  00E7DC  0E02               	movlw	2
  1674  00E7DE  6E5A               	movwf	main@standby,c
  1675                           
  1676                           ;main.c: 142: s = 1;
  1677  00E7E0  0E00               	movlw	0
  1678  00E7E2  6E65               	movwf	main@s+1,c
  1679  00E7E4  0E01               	movlw	1
  1680  00E7E6  6E64               	movwf	main@s,c
  1681                           
  1682                           ;main.c: 143: }
  1683  00E7E8  D6CF               	goto	l3907
  1684  00E7EA                     l3985:
  1685                           
  1686                           ;main.c: 144: else if(keypress == 14 ) {
  1687  00E7EA  0E0E               	movlw	14
  1688  00E7EC  187F               	xorwf	_keypress,w,c	;volatile
  1689  00E7EE  A4D8               	btfss	status,2,c
  1690  00E7F0  D010               	goto	l3995
  1691                           
  1692                           ;main.c: 145: standby = 3;
  1693  00E7F2  0E00               	movlw	0
  1694  00E7F4  6E5B               	movwf	main@standby+1,c
  1695  00E7F6  0E03               	movlw	3
  1696  00E7F8  6E5A               	movwf	main@standby,c
  1697                           
  1698                           ;main.c: 146: PWM2(500);
  1699  00E7FA  0E01               	movlw	1
  1700  00E7FC  6E02               	movwf	PWM2@duty+1,c
  1701  00E7FE  0EF4               	movlw	244
  1702  00E800  6E01               	movwf	PWM2@duty,c
  1703  00E802  ECCE  F06B         	call	_PWM2	;wreg free
  1704                           
  1705                           ;main.c: 148: labelState = 0;
  1706  00E806  0E00               	movlw	0
  1707  00E808  6E5F               	movwf	main@labelState+1,c
  1708  00E80A  0E00               	movlw	0
  1709  00E80C  6E5E               	movwf	main@labelState,c
  1710  00E80E  EF0B  F07A         	goto	l4433
  1711  00E812                     l3995:
  1712                           
  1713                           ;main.c: 152: else if(keypress == 10) {
  1714  00E812  0E0A               	movlw	10
  1715  00E814  187F               	xorwf	_keypress,w,c	;volatile
  1716  00E816  A4D8               	btfss	status,2,c
  1717  00E818  D6B7               	goto	l3907
  1718                           
  1719                           ;main.c: 153: standby = 4;
  1720  00E81A  0E00               	movlw	0
  1721  00E81C  6E5B               	movwf	main@standby+1,c
  1722  00E81E  0E04               	movlw	4
  1723  00E820  6E5A               	movwf	main@standby,c
  1724                           
  1725                           ;main.c: 155: prevSodaTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1726  00E822  C072  F035         	movff	_time+2,??_main
  1727  00E826  0E0F               	movlw	15
  1728  00E828  1635               	andwf	??_main,f,c
  1729  00E82A  5035               	movf	??_main,w,c
  1730  00E82C  6E01               	movwf	___wmul@multiplier,c
  1731  00E82E  6A02               	clrf	___wmul@multiplier+1,c
  1732  00E830  0E0E               	movlw	14
  1733  00E832  6E04               	movwf	___wmul@multiplicand+1,c
  1734  00E834  0E10               	movlw	16
  1735  00E836  6E03               	movwf	___wmul@multiplicand,c
  1736  00E838  EC4C  F06B         	call	___wmul	;wreg free
  1737  00E83C  C070  F036         	movff	_time,??_main+1
  1738  00E840  3A36               	swapf	??_main+1,f,c
  1739  00E842  0E0F               	movlw	15
  1740  00E844  1636               	andwf	??_main+1,f,c
  1741  00E846  0E0F               	movlw	15
  1742  00E848  1636               	andwf	??_main+1,f,c
  1743  00E84A  5036               	movf	??_main+1,w,c
  1744  00E84C  0D0A               	mullw	10
  1745  00E84E  5070               	movf	_time,w,c
  1746  00E850  0B0F               	andlw	15
  1747  00E852  6E37               	movwf	(??_main+2)& (0+255),c
  1748  00E854  6A38               	clrf	(??_main+3)& (0+255),c
  1749  00E856  50F3               	movf	prodl,w,c
  1750  00E858  2637               	addwf	??_main+2,f,c
  1751  00E85A  50F4               	movf	prodh,w,c
  1752  00E85C  2238               	addwfc	??_main+3,f,c
  1753  00E85E  C071  F039         	movff	_time+1,??_main+4
  1754  00E862  0E0F               	movlw	15
  1755  00E864  1639               	andwf	??_main+4,f,c
  1756  00E866  5039               	movf	??_main+4,w,c
  1757  00E868  0D3C               	mullw	60
  1758  00E86A  50F3               	movf	prodl,w,c
  1759  00E86C  2637               	addwf	??_main+2,f,c
  1760  00E86E  50F4               	movf	prodh,w,c
  1761  00E870  2238               	addwfc	??_main+3,f,c
  1762  00E872  C071  F03A         	movff	_time+1,??_main+5
  1763  00E876  3A3A               	swapf	??_main+5,f,c
  1764  00E878  0E0F               	movlw	15
  1765  00E87A  163A               	andwf	??_main+5,f,c
  1766  00E87C  0E0F               	movlw	15
  1767  00E87E  163A               	andwf	??_main+5,f,c
  1768  00E880  503A               	movf	??_main+5,w,c
  1769  00E882  0D0A               	mullw	10
  1770  00E884  50F3               	movf	prodl,w,c
  1771  00E886  2637               	addwf	??_main+2,f,c
  1772  00E888  50F4               	movf	prodh,w,c
  1773  00E88A  2238               	addwfc	??_main+3,f,c
  1774  00E88C  5001               	movf	?___wmul,w,c
  1775  00E88E  2637               	addwf	??_main+2,f,c
  1776  00E890  5002               	movf	?___wmul+1,w,c
  1777  00E892  2238               	addwfc	??_main+3,f,c
  1778  00E894  C072  F03B         	movff	_time+2,??_main+6
  1779  00E898  3A3B               	swapf	??_main+6,f,c
  1780  00E89A  0E0F               	movlw	15
  1781  00E89C  163B               	andwf	??_main+6,f,c
  1782  00E89E  0E0F               	movlw	15
  1783  00E8A0  163B               	andwf	??_main+6,f,c
  1784  00E8A2  503B               	movf	??_main+6,w,c
  1785  00E8A4  0D0A               	mullw	10
  1786  00E8A6  50F3               	movf	prodl,w,c
  1787  00E8A8  2437               	addwf	??_main+2,w,c
  1788  00E8AA  6E48               	movwf	main@prevSodaTime,c
  1789  00E8AC  50F4               	movf	prodh,w,c
  1790  00E8AE  2038               	addwfc	??_main+3,w,c
  1791  00E8B0  6E49               	movwf	main@prevSodaTime+1,c
  1792                           
  1793                           ;main.c: 156: tabState = 0;
  1794  00E8B2  0E00               	movlw	0
  1795  00E8B4  6E5D               	movwf	main@tabState+1,c
  1796  00E8B6  0E00               	movlw	0
  1797  00E8B8  6E5C               	movwf	main@tabState,c
  1798                           
  1799                           ;main.c: 157: sodaSort = 0;
  1800  00E8BA  0E00               	movlw	0
  1801  00E8BC  6E63               	movwf	main@sodaSort+1,c
  1802  00E8BE  0E00               	movlw	0
  1803  00E8C0  6E62               	movwf	main@sodaSort,c
  1804                           
  1805                           ;main.c: 158: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1806  00E8C2  C072  F035         	movff	_time+2,??_main
  1807  00E8C6  0E0F               	movlw	15
  1808  00E8C8  1635               	andwf	??_main,f,c
  1809  00E8CA  5035               	movf	??_main,w,c
  1810  00E8CC  6E01               	movwf	___wmul@multiplier,c
  1811  00E8CE  6A02               	clrf	___wmul@multiplier+1,c
  1812  00E8D0  0E0E               	movlw	14
  1813  00E8D2  6E04               	movwf	___wmul@multiplicand+1,c
  1814  00E8D4  0E10               	movlw	16
  1815  00E8D6  6E03               	movwf	___wmul@multiplicand,c
  1816  00E8D8  EC4C  F06B         	call	___wmul	;wreg free
  1817  00E8DC  C070  F036         	movff	_time,??_main+1
  1818  00E8E0  3A36               	swapf	??_main+1,f,c
  1819  00E8E2  0E0F               	movlw	15
  1820  00E8E4  1636               	andwf	??_main+1,f,c
  1821  00E8E6  0E0F               	movlw	15
  1822  00E8E8  1636               	andwf	??_main+1,f,c
  1823  00E8EA  5036               	movf	??_main+1,w,c
  1824  00E8EC  0D0A               	mullw	10
  1825  00E8EE  5070               	movf	_time,w,c
  1826  00E8F0  0B0F               	andlw	15
  1827  00E8F2  6E37               	movwf	(??_main+2)& (0+255),c
  1828  00E8F4  6A38               	clrf	(??_main+3)& (0+255),c
  1829  00E8F6  50F3               	movf	prodl,w,c
  1830  00E8F8  2637               	addwf	??_main+2,f,c
  1831  00E8FA  50F4               	movf	prodh,w,c
  1832  00E8FC  2238               	addwfc	??_main+3,f,c
  1833  00E8FE  C071  F039         	movff	_time+1,??_main+4
  1834  00E902  0E0F               	movlw	15
  1835  00E904  1639               	andwf	??_main+4,f,c
  1836  00E906  5039               	movf	??_main+4,w,c
  1837  00E908  0D3C               	mullw	60
  1838  00E90A  50F3               	movf	prodl,w,c
  1839  00E90C  2637               	addwf	??_main+2,f,c
  1840  00E90E  50F4               	movf	prodh,w,c
  1841  00E910  2238               	addwfc	??_main+3,f,c
  1842  00E912  C071  F03A         	movff	_time+1,??_main+5
  1843  00E916  3A3A               	swapf	??_main+5,f,c
  1844  00E918  0E0F               	movlw	15
  1845  00E91A  163A               	andwf	??_main+5,f,c
  1846  00E91C  0E0F               	movlw	15
  1847  00E91E  163A               	andwf	??_main+5,f,c
  1848  00E920  503A               	movf	??_main+5,w,c
  1849  00E922  0D0A               	mullw	10
  1850  00E924  50F3               	movf	prodl,w,c
  1851  00E926  2637               	addwf	??_main+2,f,c
  1852  00E928  50F4               	movf	prodh,w,c
  1853  00E92A  2238               	addwfc	??_main+3,f,c
  1854  00E92C  5001               	movf	?___wmul,w,c
  1855  00E92E  2637               	addwf	??_main+2,f,c
  1856  00E930  5002               	movf	?___wmul+1,w,c
  1857  00E932  2238               	addwfc	??_main+3,f,c
  1858  00E934  C072  F03B         	movff	_time+2,??_main+6
  1859  00E938  3A3B               	swapf	??_main+6,f,c
  1860  00E93A  0E0F               	movlw	15
  1861  00E93C  163B               	andwf	??_main+6,f,c
  1862  00E93E  0E0F               	movlw	15
  1863  00E940  163B               	andwf	??_main+6,f,c
  1864  00E942  503B               	movf	??_main+6,w,c
  1865  00E944  0D0A               	mullw	10
  1866  00E946  50F3               	movf	prodl,w,c
  1867  00E948  2437               	addwf	??_main+2,w,c
  1868  00E94A  6E58               	movwf	main@startTime,c
  1869  00E94C  50F4               	movf	prodh,w,c
  1870  00E94E  2038               	addwfc	??_main+3,w,c
  1871  00E950  6E59               	movwf	main@startTime+1,c
  1872                           
  1873                           ;main.c: 160: for(s=0;s<40;s++){
  1874  00E952  0E00               	movlw	0
  1875  00E954  6E65               	movwf	main@s+1,c
  1876  00E956  0E00               	movlw	0
  1877  00E958  6E64               	movwf	main@s,c
  1878  00E95A  BE65               	btfsc	main@s+1,7,c
  1879  00E95C  D008               	goto	l4011
  1880  00E95E  5065               	movf	main@s+1,w,c
  1881  00E960  E105               	bnz	u3730
  1882  00E962  0E28               	movlw	40
  1883  00E964  5C64               	subwf	main@s,w,c
  1884  00E966  B0D8               	btfsc	status,0,c
  1885  00E968  D60F               	goto	l3907
  1886  00E96A  D001               	goto	l4011
  1887  00E96C                     u3730:
  1888  00E96C  D60D               	goto	l3907
  1889  00E96E                     l4011:
  1890                           
  1891                           ;main.c: 161: S2mode = 2;
  1892  00E96E  0E00               	movlw	0
  1893  00E970  6E67               	movwf	main@S2mode+1,c
  1894  00E972  0E02               	movlw	2
  1895  00E974  6E66               	movwf	main@S2mode,c
  1896                           
  1897                           ;main.c: 162: updateS2(S2mode);
  1898  00E976  C066  F001         	movff	main@S2mode,updateS2@mode
  1899  00E97A  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  1900  00E97E  EC14  F06E         	call	_updateS2	;wreg free
  1901  00E982  4A64               	infsnz	main@s,f,c
  1902  00E984  2A65               	incf	main@s+1,f,c
  1903  00E986  BE65               	btfsc	main@s+1,7,c
  1904  00E988  D7F2               	goto	l4011
  1905  00E98A  5065               	movf	main@s+1,w,c
  1906  00E98C  E101               	bnz	u3740
  1907  00E98E  D7E9               	goto	L3
  1908  00E990                     u3740:
  1909                           
  1910                           ;main.c: 163: }
  1911                           ;main.c: 165: }
  1912                           ;main.c: 167: }
  1913  00E990  D5FB               	goto	l3907
  1914  00E992                     l4019:
  1915                           
  1916                           ;main.c: 168: else if(standby == 2){
  1917  00E992  0E02               	movlw	2
  1918  00E994  185A               	xorwf	main@standby,w,c
  1919  00E996  105B               	iorwf	main@standby+1,w,c
  1920  00E998  A4D8               	btfss	status,2,c
  1921  00E99A  D397               	goto	l4317
  1922                           
  1923                           ;main.c: 170: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1924  00E99C  0E01               	movlw	1
  1925  00E99E  ECF1  F06A         	call	_lcdInst
  1926  00E9A2  0E34               	movlw	52
  1927  00E9A4  6E35               	movwf	??_main& (0+255),c
  1928  00E9A6  0EF2               	movlw	242
  1929  00E9A8                     u4727:
  1930  00E9A8  2EE8               	decfsz	wreg,f,c
  1931  00E9AA  D7FE               	bra	u4727
  1932  00E9AC  2E35               	decfsz	??_main& (0+255),f,c
  1933  00E9AE  D7FC               	bra	u4727
  1934                           
  1935                           ;main.c: 171: keypress = (0);
  1936  00E9B0  0E00               	movlw	0
  1937  00E9B2  6E7F               	movwf	_keypress,c	;volatile
  1938                           
  1939                           ;main.c: 173: if (s==1){
  1940  00E9B4  0464               	decf	main@s,w,c
  1941  00E9B6  1065               	iorwf	main@s+1,w,c
  1942  00E9B8  A4D8               	btfss	status,2,c
  1943  00E9BA  D027               	goto	l4039
  1944                           
  1945                           ;main.c: 174: printf("testing S f");
  1946  00E9BC  0E89               	movlw	low STR_3
  1947  00E9BE  6E17               	movwf	printf@f,c
  1948  00E9C0  0EFF               	movlw	high STR_3
  1949  00E9C2  6E18               	movwf	printf@f+1,c
  1950  00E9C4  EC71  F070         	call	_printf	;wreg free
  1951                           
  1952                           ;main.c: 175: S1mode = 1;
  1953  00E9C8  0E00               	movlw	0
  1954  00E9CA  6E6B               	movwf	main@S1mode+1,c
  1955  00E9CC  0E01               	movlw	1
  1956  00E9CE  6E6A               	movwf	main@S1mode,c
  1957                           
  1958                           ;main.c: 176: updateS1(S1mode);
  1959  00E9D0  C06A  F032         	movff	main@S1mode,updateS1@mode
  1960  00E9D4  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  1961  00E9D8  EC84  F06F         	call	_updateS1	;wreg free
  1962                           
  1963                           ;main.c: 177: S2mode = 1;
  1964  00E9DC  0E00               	movlw	0
  1965  00E9DE  6E67               	movwf	main@S2mode+1,c
  1966  00E9E0  0E01               	movlw	1
  1967  00E9E2  6E66               	movwf	main@S2mode,c
  1968                           
  1969                           ;main.c: 178: updateS2(S2mode);
  1970  00E9E4  C066  F001         	movff	main@S2mode,updateS2@mode
  1971  00E9E8  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  1972  00E9EC  EC14  F06E         	call	_updateS2	;wreg free
  1973                           
  1974                           ;main.c: 179: S3mode = 1;
  1975  00E9F0  0E00               	movlw	0
  1976  00E9F2  6E6F               	movwf	main@S3mode+1,c
  1977  00E9F4  0E01               	movlw	1
  1978  00E9F6  6E6E               	movwf	main@S3mode,c
  1979                           
  1980                           ;main.c: 180: updateS3(S3mode);
  1981  00E9F8  C06E  F001         	movff	main@S3mode,updateS3@mode
  1982  00E9FC  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  1983  00EA00  ECCC  F06E         	call	_updateS3	;wreg free
  1984                           
  1985                           ;main.c: 181: keyinterrupt();
  1986  00EA04  EC10  F06B         	call	_keyinterrupt	;wreg free
  1987                           
  1988                           ;main.c: 182: }
  1989  00EA08  D358               	goto	l140
  1990  00EA0A                     l4039:
  1991                           
  1992                           ;main.c: 183: else if(s==2){
  1993  00EA0A  0E02               	movlw	2
  1994  00EA0C  1864               	xorwf	main@s,w,c
  1995  00EA0E  1065               	iorwf	main@s+1,w,c
  1996  00EA10  A4D8               	btfss	status,2,c
  1997  00EA12  D027               	goto	l4051
  1998                           
  1999                           ;main.c: 184: printf("testing S b");
  2000  00EA14  0E65               	movlw	low STR_4
  2001  00EA16  6E17               	movwf	printf@f,c
  2002  00EA18  0EFF               	movlw	high STR_4
  2003  00EA1A  6E18               	movwf	printf@f+1,c
  2004  00EA1C  EC71  F070         	call	_printf	;wreg free
  2005                           
  2006                           ;main.c: 185: S1mode = 2;
  2007  00EA20  0E00               	movlw	0
  2008  00EA22  6E6B               	movwf	main@S1mode+1,c
  2009  00EA24  0E02               	movlw	2
  2010  00EA26  6E6A               	movwf	main@S1mode,c
  2011                           
  2012                           ;main.c: 186: updateS1(S1mode);
  2013  00EA28  C06A  F032         	movff	main@S1mode,updateS1@mode
  2014  00EA2C  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  2015  00EA30  EC84  F06F         	call	_updateS1	;wreg free
  2016                           
  2017                           ;main.c: 187: S2mode = 2;
  2018  00EA34  0E00               	movlw	0
  2019  00EA36  6E67               	movwf	main@S2mode+1,c
  2020  00EA38  0E02               	movlw	2
  2021  00EA3A  6E66               	movwf	main@S2mode,c
  2022                           
  2023                           ;main.c: 188: updateS2(S2mode);
  2024  00EA3C  C066  F001         	movff	main@S2mode,updateS2@mode
  2025  00EA40  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  2026  00EA44  EC14  F06E         	call	_updateS2	;wreg free
  2027                           
  2028                           ;main.c: 189: S3mode = 2;
  2029  00EA48  0E00               	movlw	0
  2030  00EA4A  6E6F               	movwf	main@S3mode+1,c
  2031  00EA4C  0E02               	movlw	2
  2032  00EA4E  6E6E               	movwf	main@S3mode,c
  2033                           
  2034                           ;main.c: 190: updateS3(S3mode);
  2035  00EA50  C06E  F001         	movff	main@S3mode,updateS3@mode
  2036  00EA54  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  2037  00EA58  ECCC  F06E         	call	_updateS3	;wreg free
  2038                           
  2039                           ;main.c: 191: keyinterrupt();
  2040  00EA5C  EC10  F06B         	call	_keyinterrupt	;wreg free
  2041                           
  2042                           ;main.c: 192: }
  2043  00EA60  D32C               	goto	l140
  2044  00EA62                     l4051:
  2045                           
  2046                           ;main.c: 194: else if(s==3){
  2047  00EA62  0E03               	movlw	3
  2048  00EA64  1864               	xorwf	main@s,w,c
  2049  00EA66  1065               	iorwf	main@s+1,w,c
  2050  00EA68  A4D8               	btfss	status,2,c
  2051  00EA6A  D027               	goto	l4063
  2052                           
  2053                           ;main.c: 195: printf("testing S shake");
  2054  00EA6C  0E66               	movlw	low STR_5
  2055  00EA6E  6E17               	movwf	printf@f,c
  2056  00EA70  0EFE               	movlw	high STR_5
  2057  00EA72  6E18               	movwf	printf@f+1,c
  2058  00EA74  EC71  F070         	call	_printf	;wreg free
  2059                           
  2060                           ;main.c: 196: S1mode = 3;
  2061  00EA78  0E00               	movlw	0
  2062  00EA7A  6E6B               	movwf	main@S1mode+1,c
  2063  00EA7C  0E03               	movlw	3
  2064  00EA7E  6E6A               	movwf	main@S1mode,c
  2065                           
  2066                           ;main.c: 197: updateS1(S1mode);
  2067  00EA80  C06A  F032         	movff	main@S1mode,updateS1@mode
  2068  00EA84  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  2069  00EA88  EC84  F06F         	call	_updateS1	;wreg free
  2070                           
  2071                           ;main.c: 198: S2mode = 3;
  2072  00EA8C  0E00               	movlw	0
  2073  00EA8E  6E67               	movwf	main@S2mode+1,c
  2074  00EA90  0E03               	movlw	3
  2075  00EA92  6E66               	movwf	main@S2mode,c
  2076                           
  2077                           ;main.c: 199: updateS2(S2mode);
  2078  00EA94  C066  F001         	movff	main@S2mode,updateS2@mode
  2079  00EA98  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  2080  00EA9C  EC14  F06E         	call	_updateS2	;wreg free
  2081                           
  2082                           ;main.c: 200: S3mode = 3;
  2083  00EAA0  0E00               	movlw	0
  2084  00EAA2  6E6F               	movwf	main@S3mode+1,c
  2085  00EAA4  0E03               	movlw	3
  2086  00EAA6  6E6E               	movwf	main@S3mode,c
  2087                           
  2088                           ;main.c: 201: updateS3(S3mode);
  2089  00EAA8  C06E  F001         	movff	main@S3mode,updateS3@mode
  2090  00EAAC  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  2091  00EAB0  ECCC  F06E         	call	_updateS3	;wreg free
  2092                           
  2093                           ;main.c: 202: keyinterrupt();
  2094  00EAB4  EC10  F06B         	call	_keyinterrupt	;wreg free
  2095                           
  2096                           ;main.c: 203: }
  2097  00EAB8  D300               	goto	l140
  2098  00EABA                     l4063:
  2099                           
  2100                           ;main.c: 205: else{
  2101                           ;main.c: 206: keypress = (0);
  2102  00EABA  0E00               	movlw	0
  2103  00EABC  6E7F               	movwf	_keypress,c	;volatile
  2104                           
  2105                           ;main.c: 207: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2106  00EABE  0E01               	movlw	1
  2107  00EAC0  ECF1  F06A         	call	_lcdInst
  2108  00EAC4  0E34               	movlw	52
  2109  00EAC6  6E35               	movwf	??_main& (0+255),c
  2110  00EAC8  0EF2               	movlw	242
  2111  00EACA                     u4737:
  2112  00EACA  2EE8               	decfsz	wreg,f,c
  2113  00EACC  D7FE               	bra	u4737
  2114  00EACE  2E35               	decfsz	??_main& (0+255),f,c
  2115  00EAD0  D7FC               	bra	u4737
  2116                           
  2117                           ;main.c: 208: printf("testing S1 pins");
  2118  00EAD2  0E86               	movlw	low STR_6
  2119  00EAD4  6E17               	movwf	printf@f,c
  2120  00EAD6  0EFE               	movlw	high STR_6
  2121  00EAD8  6E18               	movwf	printf@f+1,c
  2122  00EADA  EC71  F070         	call	_printf	;wreg free
  2123                           
  2124                           ;main.c: 209: while(keypress!=3){
  2125  00EADE  D01E               	goto	l4089
  2126  00EAE0                     l4071:
  2127                           
  2128                           ;main.c: 211: keyinterrupt();
  2129  00EAE0  EC10  F06B         	call	_keyinterrupt	;wreg free
  2130                           
  2131                           ;main.c: 213: if (keypress == 2){LATDbits.LATD1 = 1;}
  2132  00EAE4  0E02               	movlw	2
  2133  00EAE6  187F               	xorwf	_keypress,w,c	;volatile
  2134  00EAE8  A4D8               	btfss	status,2,c
  2135  00EAEA  D002               	goto	l147
  2136  00EAEC  828C               	bsf	3980,1,c	;volatile
  2137  00EAEE  D001               	goto	l4077
  2138  00EAF0                     l147:
  2139                           
  2140                           ;main.c: 214: else{LATDbits.LATD1 = 0;}
  2141  00EAF0  928C               	bcf	3980,1,c	;volatile
  2142  00EAF2                     l4077:
  2143                           
  2144                           ;main.c: 215: if (keypress == 6){LATBbits.LATB3 = 1;}
  2145  00EAF2  0E06               	movlw	6
  2146  00EAF4  187F               	xorwf	_keypress,w,c	;volatile
  2147  00EAF6  A4D8               	btfss	status,2,c
  2148  00EAF8  D002               	goto	l149
  2149  00EAFA  868A               	bsf	3978,3,c	;volatile
  2150  00EAFC  D001               	goto	l4081
  2151  00EAFE                     l149:
  2152                           
  2153                           ;main.c: 216: else{LATBbits.LATB3 = 0;}
  2154  00EAFE  968A               	bcf	3978,3,c	;volatile
  2155  00EB00                     l4081:
  2156                           
  2157                           ;main.c: 217: if (keypress == 10){LATBbits.LATB2 = 1;}
  2158  00EB00  0E0A               	movlw	10
  2159  00EB02  187F               	xorwf	_keypress,w,c	;volatile
  2160  00EB04  A4D8               	btfss	status,2,c
  2161  00EB06  D002               	goto	l151
  2162  00EB08  848A               	bsf	3978,2,c	;volatile
  2163  00EB0A  D001               	goto	l4085
  2164  00EB0C                     l151:
  2165                           
  2166                           ;main.c: 218: else{LATBbits.LATB2 = 0;}
  2167  00EB0C  948A               	bcf	3978,2,c	;volatile
  2168  00EB0E                     l4085:
  2169                           
  2170                           ;main.c: 219: if (keypress == 14){LATBbits.LATB0 = 1;}
  2171  00EB0E  0E0E               	movlw	14
  2172  00EB10  187F               	xorwf	_keypress,w,c	;volatile
  2173  00EB12  A4D8               	btfss	status,2,c
  2174  00EB14  D002               	goto	l153
  2175  00EB16  808A               	bsf	3978,0,c	;volatile
  2176  00EB18  D001               	goto	l4089
  2177  00EB1A                     l153:
  2178                           
  2179                           ;main.c: 220: else{LATBbits.LATB0 = 0;}
  2180  00EB1A  908A               	bcf	3978,0,c	;volatile
  2181  00EB1C                     l4089:
  2182  00EB1C  0E03               	movlw	3
  2183  00EB1E  187F               	xorwf	_keypress,w,c	;volatile
  2184  00EB20  A4D8               	btfss	status,2,c
  2185  00EB22  D7DE               	goto	l4071
  2186                           
  2187                           ;main.c: 221: }
  2188                           ;main.c: 223: keypress = (0);
  2189  00EB24  0E00               	movlw	0
  2190  00EB26  6E7F               	movwf	_keypress,c	;volatile
  2191                           
  2192                           ;main.c: 224: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2193  00EB28  0E01               	movlw	1
  2194  00EB2A  ECF1  F06A         	call	_lcdInst
  2195  00EB2E  0E34               	movlw	52
  2196  00EB30  6E35               	movwf	??_main& (0+255),c
  2197  00EB32  0EF2               	movlw	242
  2198  00EB34                     u4747:
  2199  00EB34  2EE8               	decfsz	wreg,f,c
  2200  00EB36  D7FE               	bra	u4747
  2201  00EB38  2E35               	decfsz	??_main& (0+255),f,c
  2202  00EB3A  D7FC               	bra	u4747
  2203                           
  2204                           ;main.c: 225: printf("testing S2 pins");
  2205  00EB3C  0E96               	movlw	low STR_7
  2206  00EB3E  6E17               	movwf	printf@f,c
  2207  00EB40  0EFE               	movlw	high STR_7
  2208  00EB42  6E18               	movwf	printf@f+1,c
  2209  00EB44  EC71  F070         	call	_printf	;wreg free
  2210                           
  2211                           ;main.c: 226: while(keypress!=3){
  2212  00EB48  D01E               	goto	l4117
  2213  00EB4A                     l4099:
  2214                           
  2215                           ;main.c: 228: keyinterrupt();
  2216  00EB4A  EC10  F06B         	call	_keyinterrupt	;wreg free
  2217                           
  2218                           ;main.c: 230: if (keypress == 2){LATEbits.LATE2 = 1;}
  2219  00EB4E  0E02               	movlw	2
  2220  00EB50  187F               	xorwf	_keypress,w,c	;volatile
  2221  00EB52  A4D8               	btfss	status,2,c
  2222  00EB54  D002               	goto	l158
  2223  00EB56  848D               	bsf	3981,2,c	;volatile
  2224  00EB58  D001               	goto	l4105
  2225  00EB5A                     l158:
  2226                           
  2227                           ;main.c: 231: else{LATEbits.LATE2 = 0;}
  2228  00EB5A  948D               	bcf	3981,2,c	;volatile
  2229  00EB5C                     l4105:
  2230                           
  2231                           ;main.c: 232: if (keypress == 6){LATEbits.LATE1 = 1;}
  2232  00EB5C  0E06               	movlw	6
  2233  00EB5E  187F               	xorwf	_keypress,w,c	;volatile
  2234  00EB60  A4D8               	btfss	status,2,c
  2235  00EB62  D002               	goto	l160
  2236  00EB64  828D               	bsf	3981,1,c	;volatile
  2237  00EB66  D001               	goto	l4109
  2238  00EB68                     l160:
  2239                           
  2240                           ;main.c: 233: else{LATEbits.LATE1 = 0;}
  2241  00EB68  928D               	bcf	3981,1,c	;volatile
  2242  00EB6A                     l4109:
  2243                           
  2244                           ;main.c: 234: if (keypress == 10){LATAbits.LATA4 = 1;}
  2245  00EB6A  0E0A               	movlw	10
  2246  00EB6C  187F               	xorwf	_keypress,w,c	;volatile
  2247  00EB6E  A4D8               	btfss	status,2,c
  2248  00EB70  D002               	goto	l162
  2249  00EB72  8889               	bsf	3977,4,c	;volatile
  2250  00EB74  D001               	goto	l4113
  2251  00EB76                     l162:
  2252                           
  2253                           ;main.c: 235: else{LATAbits.LATA4 = 0;}
  2254  00EB76  9889               	bcf	3977,4,c	;volatile
  2255  00EB78                     l4113:
  2256                           
  2257                           ;main.c: 236: if (keypress == 14){LATDbits.LATD0 = 1;}
  2258  00EB78  0E0E               	movlw	14
  2259  00EB7A  187F               	xorwf	_keypress,w,c	;volatile
  2260  00EB7C  A4D8               	btfss	status,2,c
  2261  00EB7E  D002               	goto	l164
  2262  00EB80  808C               	bsf	3980,0,c	;volatile
  2263  00EB82  D001               	goto	l4117
  2264  00EB84                     l164:
  2265                           
  2266                           ;main.c: 237: else{LATDbits.LATD0 = 0;}
  2267  00EB84  908C               	bcf	3980,0,c	;volatile
  2268  00EB86                     l4117:
  2269  00EB86  0E03               	movlw	3
  2270  00EB88  187F               	xorwf	_keypress,w,c	;volatile
  2271  00EB8A  A4D8               	btfss	status,2,c
  2272  00EB8C  D7DE               	goto	l4099
  2273                           
  2274                           ;main.c: 238: }
  2275                           ;main.c: 240: keypress = (0);
  2276  00EB8E  0E00               	movlw	0
  2277  00EB90  6E7F               	movwf	_keypress,c	;volatile
  2278                           
  2279                           ;main.c: 241: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2280  00EB92  0E01               	movlw	1
  2281  00EB94  ECF1  F06A         	call	_lcdInst
  2282  00EB98  0E34               	movlw	52
  2283  00EB9A  6E35               	movwf	??_main& (0+255),c
  2284  00EB9C  0EF2               	movlw	242
  2285  00EB9E                     u4757:
  2286  00EB9E  2EE8               	decfsz	wreg,f,c
  2287  00EBA0  D7FE               	bra	u4757
  2288  00EBA2  2E35               	decfsz	??_main& (0+255),f,c
  2289  00EBA4  D7FC               	bra	u4757
  2290                           
  2291                           ;main.c: 242: printf("testing S3 pins");
  2292  00EBA6  0EA6               	movlw	low STR_8
  2293  00EBA8  6E17               	movwf	printf@f,c
  2294  00EBAA  0EFE               	movlw	high STR_8
  2295  00EBAC  6E18               	movwf	printf@f+1,c
  2296  00EBAE  EC71  F070         	call	_printf	;wreg free
  2297                           
  2298                           ;main.c: 243: while(keypress!=3){
  2299  00EBB2  D01E               	goto	l4145
  2300  00EBB4                     l4127:
  2301                           
  2302                           ;main.c: 245: keyinterrupt();
  2303  00EBB4  EC10  F06B         	call	_keyinterrupt	;wreg free
  2304                           
  2305                           ;main.c: 247: if (keypress == 2){LATCbits.LATC7 = 1;}
  2306  00EBB8  0E02               	movlw	2
  2307  00EBBA  187F               	xorwf	_keypress,w,c	;volatile
  2308  00EBBC  A4D8               	btfss	status,2,c
  2309  00EBBE  D002               	goto	l169
  2310  00EBC0  8E8B               	bsf	3979,7,c	;volatile
  2311  00EBC2  D001               	goto	l4133
  2312  00EBC4                     l169:
  2313                           
  2314                           ;main.c: 248: else{LATCbits.LATC7 = 0;}
  2315  00EBC4  9E8B               	bcf	3979,7,c	;volatile
  2316  00EBC6                     l4133:
  2317                           
  2318                           ;main.c: 249: if (keypress == 6){LATCbits.LATC6 = 1;}
  2319  00EBC6  0E06               	movlw	6
  2320  00EBC8  187F               	xorwf	_keypress,w,c	;volatile
  2321  00EBCA  A4D8               	btfss	status,2,c
  2322  00EBCC  D002               	goto	l171
  2323  00EBCE  8C8B               	bsf	3979,6,c	;volatile
  2324  00EBD0  D001               	goto	l4137
  2325  00EBD2                     l171:
  2326                           
  2327                           ;main.c: 250: else{LATCbits.LATC6 = 0;}
  2328  00EBD2  9C8B               	bcf	3979,6,c	;volatile
  2329  00EBD4                     l4137:
  2330                           
  2331                           ;main.c: 251: if (keypress == 10){LATCbits.LATC0 = 1;}
  2332  00EBD4  0E0A               	movlw	10
  2333  00EBD6  187F               	xorwf	_keypress,w,c	;volatile
  2334  00EBD8  A4D8               	btfss	status,2,c
  2335  00EBDA  D002               	goto	l173
  2336  00EBDC  808B               	bsf	3979,0,c	;volatile
  2337  00EBDE  D001               	goto	l4141
  2338  00EBE0                     l173:
  2339                           
  2340                           ;main.c: 252: else{LATCbits.LATC0 = 0;}
  2341  00EBE0  908B               	bcf	3979,0,c	;volatile
  2342  00EBE2                     l4141:
  2343                           
  2344                           ;main.c: 253: if (keypress == 14){LATCbits.LATC5 = 1;}
  2345  00EBE2  0E0E               	movlw	14
  2346  00EBE4  187F               	xorwf	_keypress,w,c	;volatile
  2347  00EBE6  A4D8               	btfss	status,2,c
  2348  00EBE8  D002               	goto	l175
  2349  00EBEA  8A8B               	bsf	3979,5,c	;volatile
  2350  00EBEC  D001               	goto	l4145
  2351  00EBEE                     l175:
  2352                           
  2353                           ;main.c: 254: else{LATCbits.LATC5 = 0;}
  2354  00EBEE  9A8B               	bcf	3979,5,c	;volatile
  2355  00EBF0                     l4145:
  2356  00EBF0  0E03               	movlw	3
  2357  00EBF2  187F               	xorwf	_keypress,w,c	;volatile
  2358  00EBF4  A4D8               	btfss	status,2,c
  2359  00EBF6  D7DE               	goto	l4127
  2360                           
  2361                           ;main.c: 255: }
  2362                           ;main.c: 257: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2363  00EBF8  0E01               	movlw	1
  2364  00EBFA  ECF1  F06A         	call	_lcdInst
  2365  00EBFE  0E34               	movlw	52
  2366  00EC00  6E35               	movwf	??_main& (0+255),c
  2367  00EC02  0EF2               	movlw	242
  2368  00EC04                     u4767:
  2369  00EC04  2EE8               	decfsz	wreg,f,c
  2370  00EC06  D7FE               	bra	u4767
  2371  00EC08  2E35               	decfsz	??_main& (0+255),f,c
  2372  00EC0A  D7FC               	bra	u4767
  2373                           
  2374                           ;main.c: 258: printf("testing PWM2");
  2375  00EC0C  0E27               	movlw	low STR_9
  2376  00EC0E  6E17               	movwf	printf@f,c
  2377  00EC10  0EFF               	movlw	high STR_9
  2378  00EC12  6E18               	movwf	printf@f+1,c
  2379  00EC14  EC71  F070         	call	_printf	;wreg free
  2380                           
  2381                           ;main.c: 259: PWM2(500);
  2382  00EC18  0E01               	movlw	1
  2383  00EC1A  6E02               	movwf	PWM2@duty+1,c
  2384  00EC1C  0EF4               	movlw	244
  2385  00EC1E  6E01               	movwf	PWM2@duty,c
  2386  00EC20  ECCE  F06B         	call	_PWM2	;wreg free
  2387                           
  2388                           ;main.c: 260: keycheck();
  2389  00EC24  EC06  F06B         	call	_keycheck	;wreg free
  2390                           
  2391                           ;main.c: 261: PWM2off();
  2392  00EC28  ECE7  F06A         	call	_PWM2off	;wreg free
  2393                           
  2394                           ;main.c: 263: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2395  00EC2C  0E01               	movlw	1
  2396  00EC2E  ECF1  F06A         	call	_lcdInst
  2397  00EC32  0E34               	movlw	52
  2398  00EC34  6E35               	movwf	??_main& (0+255),c
  2399  00EC36  0EF2               	movlw	242
  2400  00EC38                     u4777:
  2401  00EC38  2EE8               	decfsz	wreg,f,c
  2402  00EC3A  D7FE               	bra	u4777
  2403  00EC3C  2E35               	decfsz	??_main& (0+255),f,c
  2404  00EC3E  D7FC               	bra	u4777
  2405                           
  2406                           ;main.c: 264: printf("testing PWM1");
  2407  00EC40  0E1A               	movlw	low STR_10
  2408  00EC42  6E17               	movwf	printf@f,c
  2409  00EC44  0EFF               	movlw	high STR_10
  2410  00EC46  6E18               	movwf	printf@f+1,c
  2411  00EC48  EC71  F070         	call	_printf	;wreg free
  2412                           
  2413                           ;main.c: 265: PWM1(500);
  2414  00EC4C  0E01               	movlw	1
  2415  00EC4E  6E02               	movwf	PWM1@duty+1,c
  2416  00EC50  0EF4               	movlw	244
  2417  00EC52  6E01               	movwf	PWM1@duty,c
  2418  00EC54  ECA9  F06B         	call	_PWM1	;wreg free
  2419                           
  2420                           ;main.c: 266: keycheck();
  2421  00EC58  EC06  F06B         	call	_keycheck	;wreg free
  2422                           
  2423                           ;main.c: 267: PWM1off();
  2424  00EC5C  ECE2  F06A         	call	_PWM1off	;wreg free
  2425                           
  2426                           ;main.c: 269: keypress = (0);
  2427  00EC60  0E00               	movlw	0
  2428  00EC62  6E7F               	movwf	_keypress,c	;volatile
  2429                           
  2430                           ;main.c: 270: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  2431  00EC64  C072  F035         	movff	_time+2,??_main
  2432  00EC68  0E0F               	movlw	15
  2433  00EC6A  1635               	andwf	??_main,f,c
  2434  00EC6C  5035               	movf	??_main,w,c
  2435  00EC6E  6E01               	movwf	___wmul@multiplier,c
  2436  00EC70  6A02               	clrf	___wmul@multiplier+1,c
  2437  00EC72  0E0E               	movlw	14
  2438  00EC74  6E04               	movwf	___wmul@multiplicand+1,c
  2439  00EC76  0E10               	movlw	16
  2440  00EC78  6E03               	movwf	___wmul@multiplicand,c
  2441  00EC7A  EC4C  F06B         	call	___wmul	;wreg free
  2442  00EC7E  C070  F036         	movff	_time,??_main+1
  2443  00EC82  3A36               	swapf	??_main+1,f,c
  2444  00EC84  0E0F               	movlw	15
  2445  00EC86  1636               	andwf	??_main+1,f,c
  2446  00EC88  0E0F               	movlw	15
  2447  00EC8A  1636               	andwf	??_main+1,f,c
  2448  00EC8C  5036               	movf	??_main+1,w,c
  2449  00EC8E  0D0A               	mullw	10
  2450  00EC90  5070               	movf	_time,w,c
  2451  00EC92  0B0F               	andlw	15
  2452  00EC94  6E37               	movwf	(??_main+2)& (0+255),c
  2453  00EC96  6A38               	clrf	(??_main+3)& (0+255),c
  2454  00EC98  50F3               	movf	prodl,w,c
  2455  00EC9A  2637               	addwf	??_main+2,f,c
  2456  00EC9C  50F4               	movf	prodh,w,c
  2457  00EC9E  2238               	addwfc	??_main+3,f,c
  2458  00ECA0  C071  F039         	movff	_time+1,??_main+4
  2459  00ECA4  0E0F               	movlw	15
  2460  00ECA6  1639               	andwf	??_main+4,f,c
  2461  00ECA8  5039               	movf	??_main+4,w,c
  2462  00ECAA  0D3C               	mullw	60
  2463  00ECAC  50F3               	movf	prodl,w,c
  2464  00ECAE  2637               	addwf	??_main+2,f,c
  2465  00ECB0  50F4               	movf	prodh,w,c
  2466  00ECB2  2238               	addwfc	??_main+3,f,c
  2467  00ECB4  C071  F03A         	movff	_time+1,??_main+5
  2468  00ECB8  3A3A               	swapf	??_main+5,f,c
  2469  00ECBA  0E0F               	movlw	15
  2470  00ECBC  163A               	andwf	??_main+5,f,c
  2471  00ECBE  0E0F               	movlw	15
  2472  00ECC0  163A               	andwf	??_main+5,f,c
  2473  00ECC2  503A               	movf	??_main+5,w,c
  2474  00ECC4  0D0A               	mullw	10
  2475  00ECC6  50F3               	movf	prodl,w,c
  2476  00ECC8  2637               	addwf	??_main+2,f,c
  2477  00ECCA  50F4               	movf	prodh,w,c
  2478  00ECCC  2238               	addwfc	??_main+3,f,c
  2479  00ECCE  5001               	movf	?___wmul,w,c
  2480  00ECD0  2637               	addwf	??_main+2,f,c
  2481  00ECD2  5002               	movf	?___wmul+1,w,c
  2482  00ECD4  2238               	addwfc	??_main+3,f,c
  2483  00ECD6  C072  F03B         	movff	_time+2,??_main+6
  2484  00ECDA  3A3B               	swapf	??_main+6,f,c
  2485  00ECDC  0E0F               	movlw	15
  2486  00ECDE  163B               	andwf	??_main+6,f,c
  2487  00ECE0  0E0F               	movlw	15
  2488  00ECE2  163B               	andwf	??_main+6,f,c
  2489  00ECE4  503B               	movf	??_main+6,w,c
  2490  00ECE6  0D0A               	mullw	10
  2491  00ECE8  50F3               	movf	prodl,w,c
  2492  00ECEA  2437               	addwf	??_main+2,w,c
  2493  00ECEC  6E58               	movwf	main@startTime,c
  2494  00ECEE  50F4               	movf	prodh,w,c
  2495  00ECF0  2038               	addwfc	??_main+3,w,c
  2496  00ECF2  6E59               	movwf	main@startTime+1,c
  2497                           
  2498                           ;main.c: 271: while(keypress==(0)){
  2499  00ECF4  D078               	goto	l4189
  2500  00ECF6                     l4173:
  2501                           
  2502                           ;main.c: 272: updateTime();
  2503  00ECF6  ECAF  F06C         	call	_updateTime	;wreg free
  2504                           
  2505                           ;main.c: 273: keypress = (0);
  2506  00ECFA  0E00               	movlw	0
  2507  00ECFC  6E7F               	movwf	_keypress,c	;volatile
  2508                           
  2509                           ;main.c: 274: _delay((unsigned long)((50)*(32000000/4000.0)));
  2510  00ECFE  0E03               	movlw	3
  2511  00ED00  6E36               	movwf	(??_main+1)& (0+255),c
  2512  00ED02  0E08               	movlw	8
  2513  00ED04  6E35               	movwf	??_main& (0+255),c
  2514  00ED06  0E77               	movlw	119
  2515  00ED08                     u4787:
  2516  00ED08  2EE8               	decfsz	wreg,f,c
  2517  00ED0A  D7FE               	bra	u4787
  2518  00ED0C  2E35               	decfsz	??_main& (0+255),f,c
  2519  00ED0E  D7FC               	bra	u4787
  2520  00ED10  2E36               	decfsz	(??_main+1)& (0+255),f,c
  2521  00ED12  D7FA               	bra	u4787
  2522  00ED14  F000               	nop	
  2523                           
  2524                           ;main.c: 275: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2525  00ED16  0E01               	movlw	1
  2526  00ED18  ECF1  F06A         	call	_lcdInst
  2527  00ED1C  0E34               	movlw	52
  2528  00ED1E  6E35               	movwf	??_main& (0+255),c
  2529  00ED20  0EF2               	movlw	242
  2530  00ED22                     u4797:
  2531  00ED22  2EE8               	decfsz	wreg,f,c
  2532  00ED24  D7FE               	bra	u4797
  2533  00ED26  2E35               	decfsz	??_main& (0+255),f,c
  2534  00ED28  D7FC               	bra	u4797
  2535                           
  2536                           ;main.c: 276: printf("time %x %x", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(ti
      +                          me[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)
      +                          *10), timePassed(startTime));
  2537  00ED2A  C072  F035         	movff	_time+2,??_main
  2538  00ED2E  0E0F               	movlw	15
  2539  00ED30  1635               	andwf	??_main,f,c
  2540  00ED32  5035               	movf	??_main,w,c
  2541  00ED34  6E01               	movwf	___wmul@multiplier,c
  2542  00ED36  6A02               	clrf	___wmul@multiplier+1,c
  2543  00ED38  0E0E               	movlw	14
  2544  00ED3A  6E04               	movwf	___wmul@multiplicand+1,c
  2545  00ED3C  0E10               	movlw	16
  2546  00ED3E  6E03               	movwf	___wmul@multiplicand,c
  2547  00ED40  EC4C  F06B         	call	___wmul	;wreg free
  2548  00ED44  C070  F036         	movff	_time,??_main+1
  2549  00ED48  3A36               	swapf	??_main+1,f,c
  2550  00ED4A  0E0F               	movlw	15
  2551  00ED4C  1636               	andwf	??_main+1,f,c
  2552  00ED4E  0E0F               	movlw	15
  2553  00ED50  1636               	andwf	??_main+1,f,c
  2554  00ED52  5036               	movf	??_main+1,w,c
  2555  00ED54  0D0A               	mullw	10
  2556  00ED56  5070               	movf	_time,w,c
  2557  00ED58  0B0F               	andlw	15
  2558  00ED5A  6E37               	movwf	(??_main+2)& (0+255),c
  2559  00ED5C  6A38               	clrf	(??_main+3)& (0+255),c
  2560  00ED5E  50F3               	movf	prodl,w,c
  2561  00ED60  2637               	addwf	??_main+2,f,c
  2562  00ED62  50F4               	movf	prodh,w,c
  2563  00ED64  2238               	addwfc	??_main+3,f,c
  2564  00ED66  C071  F039         	movff	_time+1,??_main+4
  2565  00ED6A  0E0F               	movlw	15
  2566  00ED6C  1639               	andwf	??_main+4,f,c
  2567  00ED6E  5039               	movf	??_main+4,w,c
  2568  00ED70  0D3C               	mullw	60
  2569  00ED72  50F3               	movf	prodl,w,c
  2570  00ED74  2637               	addwf	??_main+2,f,c
  2571  00ED76  50F4               	movf	prodh,w,c
  2572  00ED78  2238               	addwfc	??_main+3,f,c
  2573  00ED7A  C071  F03A         	movff	_time+1,??_main+5
  2574  00ED7E  3A3A               	swapf	??_main+5,f,c
  2575  00ED80  0E0F               	movlw	15
  2576  00ED82  163A               	andwf	??_main+5,f,c
  2577  00ED84  0E0F               	movlw	15
  2578  00ED86  163A               	andwf	??_main+5,f,c
  2579  00ED88  503A               	movf	??_main+5,w,c
  2580  00ED8A  0D0A               	mullw	10
  2581  00ED8C  50F3               	movf	prodl,w,c
  2582  00ED8E  2637               	addwf	??_main+2,f,c
  2583  00ED90  50F4               	movf	prodh,w,c
  2584  00ED92  2238               	addwfc	??_main+3,f,c
  2585  00ED94  5001               	movf	?___wmul,w,c
  2586  00ED96  2637               	addwf	??_main+2,f,c
  2587  00ED98  5002               	movf	?___wmul+1,w,c
  2588  00ED9A  2238               	addwfc	??_main+3,f,c
  2589  00ED9C  C072  F03B         	movff	_time+2,??_main+6
  2590  00EDA0  3A3B               	swapf	??_main+6,f,c
  2591  00EDA2  0E0F               	movlw	15
  2592  00EDA4  163B               	andwf	??_main+6,f,c
  2593  00EDA6  0E0F               	movlw	15
  2594  00EDA8  163B               	andwf	??_main+6,f,c
  2595  00EDAA  503B               	movf	??_main+6,w,c
  2596  00EDAC  0D0A               	mullw	10
  2597  00EDAE  50F3               	movf	prodl,w,c
  2598  00EDB0  2437               	addwf	??_main+2,w,c
  2599  00EDB2  6E4A               	movwf	_main$1702,c
  2600  00EDB4  50F4               	movf	prodh,w,c
  2601  00EDB6  2038               	addwfc	??_main+3,w,c
  2602  00EDB8  6E4B               	movwf	_main$1702+1,c
  2603                           
  2604                           ;main.c: 276: printf("time %x %x", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(ti
      +                          me[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)
      +                          *10), timePassed(startTime));
  2605  00EDBA  0EC2               	movlw	low STR_11
  2606  00EDBC  6E17               	movwf	printf@f,c
  2607  00EDBE  0EFF               	movlw	high STR_11
  2608  00EDC0  6E18               	movwf	printf@f+1,c
  2609  00EDC2  C04A  F019         	movff	_main$1702,?_printf+2
  2610  00EDC6  C04B  F01A         	movff	_main$1702+1,?_printf+3
  2611  00EDCA  C058  F007         	movff	main@startTime,timePassed@start
  2612  00EDCE  C059  F008         	movff	main@startTime+1,timePassed@start+1
  2613  00EDD2  EC5F  F06D         	call	_timePassed	;wreg free
  2614  00EDD6  C007  F01B         	movff	?_timePassed,?_printf+4
  2615  00EDDA  C008  F01C         	movff	?_timePassed+1,?_printf+5
  2616  00EDDE  EC71  F070         	call	_printf	;wreg free
  2617                           
  2618                           ;main.c: 277: keyinterrupt();
  2619  00EDE2  EC10  F06B         	call	_keyinterrupt	;wreg free
  2620  00EDE6                     l4189:
  2621  00EDE6  507F               	movf	_keypress,w,c	;volatile
  2622  00EDE8  B4D8               	btfsc	status,2,c
  2623  00EDEA  D785               	goto	l4173
  2624                           
  2625                           ;main.c: 278: }
  2626                           ;main.c: 280: keypress = (0);
  2627  00EDEC  0E00               	movlw	0
  2628  00EDEE  6E7F               	movwf	_keypress,c	;volatile
  2629                           
  2630                           ;main.c: 281: while(keypress==(0)){
  2631  00EDF0  D030               	goto	l181
  2632  00EDF2                     l4193:
  2633                           
  2634                           ;main.c: 282: keypress = (0);
  2635  00EDF2  0E00               	movlw	0
  2636  00EDF4  6E7F               	movwf	_keypress,c	;volatile
  2637                           
  2638                           ;main.c: 283: _delay((unsigned long)((50)*(32000000/4000.0)));
  2639  00EDF6  0E03               	movlw	3
  2640  00EDF8  6E36               	movwf	(??_main+1)& (0+255),c
  2641  00EDFA  0E08               	movlw	8
  2642  00EDFC  6E35               	movwf	??_main& (0+255),c
  2643  00EDFE  0E77               	movlw	119
  2644  00EE00                     u4807:
  2645  00EE00  2EE8               	decfsz	wreg,f,c
  2646  00EE02  D7FE               	bra	u4807
  2647  00EE04  2E35               	decfsz	??_main& (0+255),f,c
  2648  00EE06  D7FC               	bra	u4807
  2649  00EE08  2E36               	decfsz	(??_main+1)& (0+255),f,c
  2650  00EE0A  D7FA               	bra	u4807
  2651  00EE0C  F000               	nop	
  2652                           
  2653                           ;main.c: 284: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2654  00EE0E  0E01               	movlw	1
  2655  00EE10  ECF1  F06A         	call	_lcdInst
  2656  00EE14  0E34               	movlw	52
  2657  00EE16  6E35               	movwf	??_main& (0+255),c
  2658  00EE18  0EF2               	movlw	242
  2659  00EE1A                     u4817:
  2660  00EE1A  2EE8               	decfsz	wreg,f,c
  2661  00EE1C  D7FE               	bra	u4817
  2662  00EE1E  2E35               	decfsz	??_main& (0+255),f,c
  2663  00EE20  D7FC               	bra	u4817
  2664                           
  2665                           ;main.c: 285: printf("testing IR1");
  2666  00EE22  0E41               	movlw	low STR_12
  2667  00EE24  6E17               	movwf	printf@f,c
  2668  00EE26  0EFF               	movlw	high STR_12
  2669  00EE28  6E18               	movwf	printf@f+1,c
  2670  00EE2A  EC71  F070         	call	_printf	;wreg free
  2671                           
  2672                           ;main.c: 286: readADC(1);
  2673  00EE2E  0E01               	movlw	1
  2674  00EE30  EC3A  F06B         	call	_readADC
  2675                           
  2676                           ;main.c: 287: lcdInst(0b11000000);;
  2677  00EE34  0EC0               	movlw	192
  2678  00EE36  ECF1  F06A         	call	_lcdInst
  2679                           
  2680                           ;main.c: 288: printf("%x", ADRES);
  2681  00EE3A  0EF5               	movlw	low (STR_19+5)
  2682  00EE3C  6E17               	movwf	printf@f,c
  2683  00EE3E  0EFF               	movlw	high (STR_19+5)
  2684  00EE40  6E18               	movwf	printf@f+1,c
  2685  00EE42  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2686  00EE46  CFC4 F01A          	movff	4036,?_printf+3	;volatile
  2687  00EE4A  EC71  F070         	call	_printf	;wreg free
  2688                           
  2689                           ;main.c: 289: keyinterrupt();
  2690  00EE4E  EC10  F06B         	call	_keyinterrupt	;wreg free
  2691  00EE52                     l181:
  2692  00EE52  507F               	movf	_keypress,w,c	;volatile
  2693  00EE54  B4D8               	btfsc	status,2,c
  2694  00EE56  D7CD               	goto	l4193
  2695                           
  2696                           ;main.c: 290: }
  2697                           ;main.c: 292: keypress = (0);
  2698  00EE58  0E00               	movlw	0
  2699  00EE5A  6E7F               	movwf	_keypress,c	;volatile
  2700                           
  2701                           ;main.c: 293: while(keypress==(0)){
  2702  00EE5C  D030               	goto	l184
  2703  00EE5E                     l4213:
  2704                           
  2705                           ;main.c: 294: keypress = (0);
  2706  00EE5E  0E00               	movlw	0
  2707  00EE60  6E7F               	movwf	_keypress,c	;volatile
  2708                           
  2709                           ;main.c: 295: _delay((unsigned long)((50)*(32000000/4000.0)));
  2710  00EE62  0E03               	movlw	3
  2711  00EE64  6E36               	movwf	(??_main+1)& (0+255),c
  2712  00EE66  0E08               	movlw	8
  2713  00EE68  6E35               	movwf	??_main& (0+255),c
  2714  00EE6A  0E77               	movlw	119
  2715  00EE6C                     u4827:
  2716  00EE6C  2EE8               	decfsz	wreg,f,c
  2717  00EE6E  D7FE               	bra	u4827
  2718  00EE70  2E35               	decfsz	??_main& (0+255),f,c
  2719  00EE72  D7FC               	bra	u4827
  2720  00EE74  2E36               	decfsz	(??_main+1)& (0+255),f,c
  2721  00EE76  D7FA               	bra	u4827
  2722  00EE78  F000               	nop	
  2723                           
  2724                           ;main.c: 296: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2725  00EE7A  0E01               	movlw	1
  2726  00EE7C  ECF1  F06A         	call	_lcdInst
  2727  00EE80  0E34               	movlw	52
  2728  00EE82  6E35               	movwf	??_main& (0+255),c
  2729  00EE84  0EF2               	movlw	242
  2730  00EE86                     u4837:
  2731  00EE86  2EE8               	decfsz	wreg,f,c
  2732  00EE88  D7FE               	bra	u4837
  2733  00EE8A  2E35               	decfsz	??_main& (0+255),f,c
  2734  00EE8C  D7FC               	bra	u4837
  2735                           
  2736                           ;main.c: 297: printf("testing IR2");
  2737  00EE8E  0E4D               	movlw	low STR_14
  2738  00EE90  6E17               	movwf	printf@f,c
  2739  00EE92  0EFF               	movlw	high STR_14
  2740  00EE94  6E18               	movwf	printf@f+1,c
  2741  00EE96  EC71  F070         	call	_printf	;wreg free
  2742                           
  2743                           ;main.c: 298: readADC(0);
  2744  00EE9A  0E00               	movlw	0
  2745  00EE9C  EC3A  F06B         	call	_readADC
  2746                           
  2747                           ;main.c: 299: lcdInst(0b11000000);;
  2748  00EEA0  0EC0               	movlw	192
  2749  00EEA2  ECF1  F06A         	call	_lcdInst
  2750                           
  2751                           ;main.c: 300: printf("%x", ADRES);
  2752  00EEA6  0EF5               	movlw	low (STR_19+5)
  2753  00EEA8  6E17               	movwf	printf@f,c
  2754  00EEAA  0EFF               	movlw	high (STR_19+5)
  2755  00EEAC  6E18               	movwf	printf@f+1,c
  2756  00EEAE  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2757  00EEB2  CFC4 F01A          	movff	4036,?_printf+3	;volatile
  2758  00EEB6  EC71  F070         	call	_printf	;wreg free
  2759                           
  2760                           ;main.c: 301: keyinterrupt();
  2761  00EEBA  EC10  F06B         	call	_keyinterrupt	;wreg free
  2762  00EEBE                     l184:
  2763  00EEBE  507F               	movf	_keypress,w,c	;volatile
  2764  00EEC0  B4D8               	btfsc	status,2,c
  2765  00EEC2  D7CD               	goto	l4213
  2766                           
  2767                           ;main.c: 302: }
  2768                           ;main.c: 304: keypress = (0);
  2769  00EEC4  0E00               	movlw	0
  2770  00EEC6  6E7F               	movwf	_keypress,c	;volatile
  2771                           
  2772                           ;main.c: 305: while(keypress==(0)){
  2773  00EEC8  D030               	goto	l187
  2774  00EECA                     l4233:
  2775                           
  2776                           ;main.c: 306: keypress = (0);
  2777  00EECA  0E00               	movlw	0
  2778  00EECC  6E7F               	movwf	_keypress,c	;volatile
  2779                           
  2780                           ;main.c: 307: _delay((unsigned long)((50)*(32000000/4000.0)));
  2781  00EECE  0E03               	movlw	3
  2782  00EED0  6E36               	movwf	(??_main+1)& (0+255),c
  2783  00EED2  0E08               	movlw	8
  2784  00EED4  6E35               	movwf	??_main& (0+255),c
  2785  00EED6  0E77               	movlw	119
  2786  00EED8                     u4847:
  2787  00EED8  2EE8               	decfsz	wreg,f,c
  2788  00EEDA  D7FE               	bra	u4847
  2789  00EEDC  2E35               	decfsz	??_main& (0+255),f,c
  2790  00EEDE  D7FC               	bra	u4847
  2791  00EEE0  2E36               	decfsz	(??_main+1)& (0+255),f,c
  2792  00EEE2  D7FA               	bra	u4847
  2793  00EEE4  F000               	nop	
  2794                           
  2795                           ;main.c: 308: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2796  00EEE6  0E01               	movlw	1
  2797  00EEE8  ECF1  F06A         	call	_lcdInst
  2798  00EEEC  0E34               	movlw	52
  2799  00EEEE  6E35               	movwf	??_main& (0+255),c
  2800  00EEF0  0EF2               	movlw	242
  2801  00EEF2                     u4857:
  2802  00EEF2  2EE8               	decfsz	wreg,f,c
  2803  00EEF4  D7FE               	bra	u4857
  2804  00EEF6  2E35               	decfsz	??_main& (0+255),f,c
  2805  00EEF8  D7FC               	bra	u4857
  2806                           
  2807                           ;main.c: 309: printf("testing IR3");
  2808  00EEFA  0E59               	movlw	low STR_16
  2809  00EEFC  6E17               	movwf	printf@f,c
  2810  00EEFE  0EFF               	movlw	high STR_16
  2811  00EF00  6E18               	movwf	printf@f+1,c
  2812  00EF02  EC71  F070         	call	_printf	;wreg free
  2813                           
  2814                           ;main.c: 310: readADC(2);
  2815  00EF06  0E02               	movlw	2
  2816  00EF08  EC3A  F06B         	call	_readADC
  2817                           
  2818                           ;main.c: 311: lcdInst(0b11000000);;
  2819  00EF0C  0EC0               	movlw	192
  2820  00EF0E  ECF1  F06A         	call	_lcdInst
  2821                           
  2822                           ;main.c: 312: printf("%x", ADRES);
  2823  00EF12  0EF5               	movlw	low (STR_19+5)
  2824  00EF14  6E17               	movwf	printf@f,c
  2825  00EF16  0EFF               	movlw	high (STR_19+5)
  2826  00EF18  6E18               	movwf	printf@f+1,c
  2827  00EF1A  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2828  00EF1E  CFC4 F01A          	movff	4036,?_printf+3	;volatile
  2829  00EF22  EC71  F070         	call	_printf	;wreg free
  2830                           
  2831                           ;main.c: 313: keyinterrupt();
  2832  00EF26  EC10  F06B         	call	_keyinterrupt	;wreg free
  2833  00EF2A                     l187:
  2834  00EF2A  507F               	movf	_keypress,w,c	;volatile
  2835  00EF2C  B4D8               	btfsc	status,2,c
  2836  00EF2E  D7CD               	goto	l4233
  2837                           
  2838                           ;main.c: 314: }
  2839                           ;main.c: 316: keypress = (0);
  2840  00EF30  0E00               	movlw	0
  2841  00EF32  6E7F               	movwf	_keypress,c	;volatile
  2842                           
  2843                           ;main.c: 317: while(keypress==(0)){
  2844  00EF34  D032               	goto	l190
  2845  00EF36                     l4253:
  2846                           
  2847                           ;main.c: 318: keypress = (0);
  2848  00EF36  0E00               	movlw	0
  2849  00EF38  6E7F               	movwf	_keypress,c	;volatile
  2850                           
  2851                           ;main.c: 319: _delay((unsigned long)((50)*(32000000/4000.0)));
  2852  00EF3A  0E03               	movlw	3
  2853  00EF3C  6E36               	movwf	(??_main+1)& (0+255),c
  2854  00EF3E  0E08               	movlw	8
  2855  00EF40  6E35               	movwf	??_main& (0+255),c
  2856  00EF42  0E77               	movlw	119
  2857  00EF44                     u4867:
  2858  00EF44  2EE8               	decfsz	wreg,f,c
  2859  00EF46  D7FE               	bra	u4867
  2860  00EF48  2E35               	decfsz	??_main& (0+255),f,c
  2861  00EF4A  D7FC               	bra	u4867
  2862  00EF4C  2E36               	decfsz	(??_main+1)& (0+255),f,c
  2863  00EF4E  D7FA               	bra	u4867
  2864  00EF50  F000               	nop	
  2865                           
  2866                           ;main.c: 320: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2867  00EF52  0E01               	movlw	1
  2868  00EF54  ECF1  F06A         	call	_lcdInst
  2869  00EF58  0E34               	movlw	52
  2870  00EF5A  6E35               	movwf	??_main& (0+255),c
  2871  00EF5C  0EF2               	movlw	242
  2872  00EF5E                     u4877:
  2873  00EF5E  2EE8               	decfsz	wreg,f,c
  2874  00EF60  D7FE               	bra	u4877
  2875  00EF62  2E35               	decfsz	??_main& (0+255),f,c
  2876  00EF64  D7FC               	bra	u4877
  2877                           
  2878                           ;main.c: 321: printf("testing label");
  2879  00EF66  0EF0               	movlw	low STR_18
  2880  00EF68  6E17               	movwf	printf@f,c
  2881  00EF6A  0EFE               	movlw	high STR_18
  2882  00EF6C  6E18               	movwf	printf@f+1,c
  2883  00EF6E  EC71  F070         	call	_printf	;wreg free
  2884                           
  2885                           ;main.c: 322: readADC(4);
  2886  00EF72  0E04               	movlw	4
  2887  00EF74  EC3A  F06B         	call	_readADC
  2888                           
  2889                           ;main.c: 323: lcdInst(0b11000000);;
  2890  00EF78  0EC0               	movlw	192
  2891  00EF7A  ECF1  F06A         	call	_lcdInst
  2892                           
  2893                           ;main.c: 324: printf("%x   %x", ADRESH, ADRESL);
  2894  00EF7E  0EF0               	movlw	low STR_19
  2895  00EF80  6E17               	movwf	printf@f,c
  2896  00EF82  0EFF               	movlw	high STR_19
  2897  00EF84  6E18               	movwf	printf@f+1,c
  2898  00EF86  CFC4 F019          	movff	4036,?_printf+2	;volatile
  2899  00EF8A  6A1A               	clrf	?_printf+3,c
  2900  00EF8C  CFC3 F01B          	movff	4035,?_printf+4	;volatile
  2901  00EF90  6A1C               	clrf	?_printf+5,c
  2902  00EF92  EC71  F070         	call	_printf	;wreg free
  2903                           
  2904                           ;main.c: 325: keyinterrupt();
  2905  00EF96  EC10  F06B         	call	_keyinterrupt	;wreg free
  2906  00EF9A                     l190:
  2907  00EF9A  507F               	movf	_keypress,w,c	;volatile
  2908  00EF9C  B4D8               	btfsc	status,2,c
  2909  00EF9E  D7CB               	goto	l4253
  2910                           
  2911                           ;main.c: 326: }
  2912                           ;main.c: 328: keypress = (0);
  2913  00EFA0  0E00               	movlw	0
  2914  00EFA2  6E7F               	movwf	_keypress,c	;volatile
  2915                           
  2916                           ;main.c: 329: while(keypress==(0)){
  2917  00EFA4  D032               	goto	l193
  2918  00EFA6                     l4273:
  2919                           
  2920                           ;main.c: 330: keypress = (0);
  2921  00EFA6  0E00               	movlw	0
  2922  00EFA8  6E7F               	movwf	_keypress,c	;volatile
  2923                           
  2924                           ;main.c: 331: _delay((unsigned long)((50)*(32000000/4000.0)));
  2925  00EFAA  0E03               	movlw	3
  2926  00EFAC  6E36               	movwf	(??_main+1)& (0+255),c
  2927  00EFAE  0E08               	movlw	8
  2928  00EFB0  6E35               	movwf	??_main& (0+255),c
  2929  00EFB2  0E77               	movlw	119
  2930  00EFB4                     u4887:
  2931  00EFB4  2EE8               	decfsz	wreg,f,c
  2932  00EFB6  D7FE               	bra	u4887
  2933  00EFB8  2E35               	decfsz	??_main& (0+255),f,c
  2934  00EFBA  D7FC               	bra	u4887
  2935  00EFBC  2E36               	decfsz	(??_main+1)& (0+255),f,c
  2936  00EFBE  D7FA               	bra	u4887
  2937  00EFC0  F000               	nop	
  2938                           
  2939                           ;main.c: 332: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2940  00EFC2  0E01               	movlw	1
  2941  00EFC4  ECF1  F06A         	call	_lcdInst
  2942  00EFC8  0E34               	movlw	52
  2943  00EFCA  6E35               	movwf	??_main& (0+255),c
  2944  00EFCC  0EF2               	movlw	242
  2945  00EFCE                     u4897:
  2946  00EFCE  2EE8               	decfsz	wreg,f,c
  2947  00EFD0  D7FE               	bra	u4897
  2948  00EFD2  2E35               	decfsz	??_main& (0+255),f,c
  2949  00EFD4  D7FC               	bra	u4897
  2950                           
  2951                           ;main.c: 333: printf("testing tab");
  2952  00EFD6  0E71               	movlw	low STR_20
  2953  00EFD8  6E17               	movwf	printf@f,c
  2954  00EFDA  0EFF               	movlw	high STR_20
  2955  00EFDC  6E18               	movwf	printf@f+1,c
  2956  00EFDE  EC71  F070         	call	_printf	;wreg free
  2957                           
  2958                           ;main.c: 334: readADC(3);
  2959  00EFE2  0E03               	movlw	3
  2960  00EFE4  EC3A  F06B         	call	_readADC
  2961                           
  2962                           ;main.c: 335: lcdInst(0b11000000);;
  2963  00EFE8  0EC0               	movlw	192
  2964  00EFEA  ECF1  F06A         	call	_lcdInst
  2965                           
  2966                           ;main.c: 336: printf("%x   %x", ADRESH, ADRESL);
  2967  00EFEE  0EF0               	movlw	low STR_19
  2968  00EFF0  6E17               	movwf	printf@f,c
  2969  00EFF2  0EFF               	movlw	high STR_19
  2970  00EFF4  6E18               	movwf	printf@f+1,c
  2971  00EFF6  CFC4 F019          	movff	4036,?_printf+2	;volatile
  2972  00EFFA  6A1A               	clrf	?_printf+3,c
  2973  00EFFC  CFC3 F01B          	movff	4035,?_printf+4	;volatile
  2974  00F000  6A1C               	clrf	?_printf+5,c
  2975  00F002  EC71  F070         	call	_printf	;wreg free
  2976                           
  2977                           ;main.c: 337: keyinterrupt();
  2978  00F006  EC10  F06B         	call	_keyinterrupt	;wreg free
  2979  00F00A                     l193:
  2980  00F00A  507F               	movf	_keypress,w,c	;volatile
  2981  00F00C  B4D8               	btfsc	status,2,c
  2982  00F00E  D7CB               	goto	l4273
  2983                           
  2984                           ;main.c: 338: }
  2985                           ;main.c: 340: c = 0;
  2986  00F010  0E00               	movlw	0
  2987  00F012  6E50               	movwf	main@c,c
  2988  00F014  0E00               	movlw	0
  2989  00F016  6E51               	movwf	main@c+1,c
  2990  00F018  0E00               	movlw	0
  2991  00F01A  6E52               	movwf	main@c+2,c
  2992  00F01C  0E00               	movlw	0
  2993  00F01E  6E53               	movwf	main@c+3,c
  2994                           
  2995                           ;main.c: 341: keypress = (0);
  2996  00F020  0E00               	movlw	0
  2997  00F022  6E7F               	movwf	_keypress,c	;volatile
  2998                           
  2999                           ;main.c: 342: while(keypress==(0)){
  3000  00F024  D043               	goto	l4311
  3001  00F026                     l4293:
  3002                           
  3003                           ;main.c: 343: keypress = (0);
  3004  00F026  0E00               	movlw	0
  3005  00F028  6E7F               	movwf	_keypress,c	;volatile
  3006                           
  3007                           ;main.c: 344: c++;
  3008  00F02A  0E01               	movlw	1
  3009  00F02C  2650               	addwf	main@c,f,c
  3010  00F02E  0E00               	movlw	0
  3011  00F030  2251               	addwfc	main@c+1,f,c
  3012  00F032  2252               	addwfc	main@c+2,f,c
  3013  00F034  2253               	addwfc	main@c+3,f,c
  3014                           
  3015                           ;main.c: 345: if((c %10000)== 0){
  3016  00F036  C050  F00E         	movff	main@c,___llmod@dividend
  3017  00F03A  C051  F00F         	movff	main@c+1,___llmod@dividend+1
  3018  00F03E  C052  F010         	movff	main@c+2,___llmod@dividend+2
  3019  00F042  C053  F011         	movff	main@c+3,___llmod@dividend+3
  3020  00F046  0E10               	movlw	16
  3021  00F048  6E12               	movwf	___llmod@divisor,c
  3022  00F04A  0E27               	movlw	39
  3023  00F04C  6E13               	movwf	___llmod@divisor+1,c
  3024  00F04E  0E00               	movlw	0
  3025  00F050  6E14               	movwf	___llmod@divisor+2,c
  3026  00F052  0E00               	movlw	0
  3027  00F054  6E15               	movwf	___llmod@divisor+3,c
  3028  00F056  EC7C  F06C         	call	___llmod	;wreg free
  3029  00F05A  500E               	movf	?___llmod,w,c
  3030  00F05C  100F               	iorwf	?___llmod+1,w,c
  3031  00F05E  1010               	iorwf	?___llmod+2,w,c
  3032  00F060  1011               	iorwf	?___llmod+3,w,c
  3033  00F062  A4D8               	btfss	status,2,c
  3034  00F064  D021               	goto	l4309
  3035                           
  3036                           ;main.c: 346: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3037  00F066  0E01               	movlw	1
  3038  00F068  ECF1  F06A         	call	_lcdInst
  3039  00F06C  0E34               	movlw	52
  3040  00F06E  6E35               	movwf	??_main& (0+255),c
  3041  00F070  0EF2               	movlw	242
  3042  00F072                     u4907:
  3043  00F072  2EE8               	decfsz	wreg,f,c
  3044  00F074  D7FE               	bra	u4907
  3045  00F076  2E35               	decfsz	??_main& (0+255),f,c
  3046  00F078  D7FC               	bra	u4907
  3047                           
  3048                           ;main.c: 347: printf("program speed");
  3049  00F07A  0EE2               	movlw	low STR_22
  3050  00F07C  6E17               	movwf	printf@f,c
  3051  00F07E  0EFE               	movlw	high STR_22
  3052  00F080  6E18               	movwf	printf@f+1,c
  3053  00F082  EC71  F070         	call	_printf	;wreg free
  3054                           
  3055                           ;main.c: 348: lcdInst(0b11000000);;
  3056  00F086  0EC0               	movlw	192
  3057  00F088  ECF1  F06A         	call	_lcdInst
  3058                           
  3059                           ;main.c: 349: printf("loops: %lu", c);
  3060  00F08C  0EB7               	movlw	low STR_23
  3061  00F08E  6E17               	movwf	printf@f,c
  3062  00F090  0EFF               	movlw	high STR_23
  3063  00F092  6E18               	movwf	printf@f+1,c
  3064  00F094  C050  F019         	movff	main@c,?_printf+2
  3065  00F098  C051  F01A         	movff	main@c+1,?_printf+3
  3066  00F09C  C052  F01B         	movff	main@c+2,?_printf+4
  3067  00F0A0  C053  F01C         	movff	main@c+3,?_printf+5
  3068  00F0A4  EC71  F070         	call	_printf	;wreg free
  3069  00F0A8                     l4309:
  3070                           
  3071                           ;main.c: 350: }
  3072                           ;main.c: 352: keyinterrupt();
  3073  00F0A8  EC10  F06B         	call	_keyinterrupt	;wreg free
  3074  00F0AC                     l4311:
  3075  00F0AC  507F               	movf	_keypress,w,c	;volatile
  3076  00F0AE  B4D8               	btfsc	status,2,c
  3077  00F0B0  D7BA               	goto	l4293
  3078                           
  3079                           ;main.c: 353: }
  3080                           ;main.c: 355: standby = 1;
  3081  00F0B2  0E00               	movlw	0
  3082  00F0B4  6E5B               	movwf	main@standby+1,c
  3083  00F0B6  0E01               	movlw	1
  3084  00F0B8  6E5A               	movwf	main@standby,c
  3085  00F0BA                     l140:
  3086                           
  3087                           ;main.c: 356: }
  3088                           ;main.c: 358: if(keypress != (0)){
  3089  00F0BA  507F               	movf	_keypress,w,c	;volatile
  3090  00F0BC  B4D8               	btfsc	status,2,c
  3091  00F0BE  EFC4  F072         	goto	l3907
  3092                           
  3093                           ;main.c: 359: s++;
  3094  00F0C2  4A64               	infsnz	main@s,f,c
  3095  00F0C4  2A65               	incf	main@s+1,f,c
  3096                           
  3097                           ;main.c: 360: }
  3098                           ;main.c: 362: }
  3099  00F0C6  EFC4  F072         	goto	l3907
  3100  00F0CA                     l4317:
  3101                           
  3102                           ;main.c: 363: else if(standby == 3){
  3103  00F0CA  0E03               	movlw	3
  3104  00F0CC  185A               	xorwf	main@standby,w,c
  3105  00F0CE  105B               	iorwf	main@standby+1,w,c
  3106  00F0D0  A4D8               	btfss	status,2,c
  3107  00F0D2  D1B3               	goto	l4439
  3108                           
  3109                           ;main.c: 365: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3110  00F0D4  0E01               	movlw	1
  3111  00F0D6  ECF1  F06A         	call	_lcdInst
  3112  00F0DA  0E34               	movlw	52
  3113  00F0DC  6E35               	movwf	??_main& (0+255),c
  3114  00F0DE  0EF2               	movlw	242
  3115  00F0E0                     u4917:
  3116  00F0E0  2EE8               	decfsz	wreg,f,c
  3117  00F0E2  D7FE               	bra	u4917
  3118  00F0E4  2E35               	decfsz	??_main& (0+255),f,c
  3119  00F0E6  D7FC               	bra	u4917
  3120                           
  3121                           ;main.c: 366: printf("soup can test");
  3122  00F0E8  0E0C               	movlw	low STR_24
  3123  00F0EA  6E17               	movwf	printf@f,c
  3124  00F0EC  0EFF               	movlw	high STR_24
  3125  00F0EE  6E18               	movwf	printf@f+1,c
  3126  00F0F0  EC71  F070         	call	_printf	;wreg free
  3127                           
  3128                           ;main.c: 367: lcdInst(0b11000000);;
  3129  00F0F4  0EC0               	movlw	192
  3130  00F0F6  ECF1  F06A         	call	_lcdInst
  3131                           
  3132                           ;main.c: 368: printf("%d  %d", S1mode, soupSort);
  3133  00F0FA  0EF8               	movlw	low STR_25
  3134  00F0FC  6E17               	movwf	printf@f,c
  3135  00F0FE  0EFF               	movlw	high STR_25
  3136  00F100  6E18               	movwf	printf@f+1,c
  3137  00F102  C06A  F019         	movff	main@S1mode,?_printf+2
  3138  00F106  C06B  F01A         	movff	main@S1mode+1,?_printf+3
  3139  00F10A  C060  F01B         	movff	main@soupSort,?_printf+4
  3140  00F10E  C061  F01C         	movff	main@soupSort+1,?_printf+5
  3141  00F112  EC71  F070         	call	_printf	;wreg free
  3142                           
  3143                           ;main.c: 370: if(soupLoad){
  3144  00F116  5054               	movf	main@soupLoad,w,c
  3145  00F118  1055               	iorwf	main@soupLoad+1,w,c
  3146  00F11A  B4D8               	btfsc	status,2,c
  3147  00F11C  D060               	goto	l4339
  3148                           
  3149                           ;main.c: 371: prevSoupLoad = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  3150  00F11E  C072  F035         	movff	_time+2,??_main
  3151  00F122  0E0F               	movlw	15
  3152  00F124  1635               	andwf	??_main,f,c
  3153  00F126  5035               	movf	??_main,w,c
  3154  00F128  6E01               	movwf	___wmul@multiplier,c
  3155  00F12A  6A02               	clrf	___wmul@multiplier+1,c
  3156  00F12C  0E0E               	movlw	14
  3157  00F12E  6E04               	movwf	___wmul@multiplicand+1,c
  3158  00F130  0E10               	movlw	16
  3159  00F132  6E03               	movwf	___wmul@multiplicand,c
  3160  00F134  EC4C  F06B         	call	___wmul	;wreg free
  3161  00F138  C070  F036         	movff	_time,??_main+1
  3162  00F13C  3A36               	swapf	??_main+1,f,c
  3163  00F13E  0E0F               	movlw	15
  3164  00F140  1636               	andwf	??_main+1,f,c
  3165  00F142  0E0F               	movlw	15
  3166  00F144  1636               	andwf	??_main+1,f,c
  3167  00F146  5036               	movf	??_main+1,w,c
  3168  00F148  0D0A               	mullw	10
  3169  00F14A  5070               	movf	_time,w,c
  3170  00F14C  0B0F               	andlw	15
  3171  00F14E  6E37               	movwf	(??_main+2)& (0+255),c
  3172  00F150  6A38               	clrf	(??_main+3)& (0+255),c
  3173  00F152  50F3               	movf	prodl,w,c
  3174  00F154  2637               	addwf	??_main+2,f,c
  3175  00F156  50F4               	movf	prodh,w,c
  3176  00F158  2238               	addwfc	??_main+3,f,c
  3177  00F15A  C071  F039         	movff	_time+1,??_main+4
  3178  00F15E  0E0F               	movlw	15
  3179  00F160  1639               	andwf	??_main+4,f,c
  3180  00F162  5039               	movf	??_main+4,w,c
  3181  00F164  0D3C               	mullw	60
  3182  00F166  50F3               	movf	prodl,w,c
  3183  00F168  2637               	addwf	??_main+2,f,c
  3184  00F16A  50F4               	movf	prodh,w,c
  3185  00F16C  2238               	addwfc	??_main+3,f,c
  3186  00F16E  C071  F03A         	movff	_time+1,??_main+5
  3187  00F172  3A3A               	swapf	??_main+5,f,c
  3188  00F174  0E0F               	movlw	15
  3189  00F176  163A               	andwf	??_main+5,f,c
  3190  00F178  0E0F               	movlw	15
  3191  00F17A  163A               	andwf	??_main+5,f,c
  3192  00F17C  503A               	movf	??_main+5,w,c
  3193  00F17E  0D0A               	mullw	10
  3194  00F180  50F3               	movf	prodl,w,c
  3195  00F182  2637               	addwf	??_main+2,f,c
  3196  00F184  50F4               	movf	prodh,w,c
  3197  00F186  2238               	addwfc	??_main+3,f,c
  3198  00F188  5001               	movf	?___wmul,w,c
  3199  00F18A  2637               	addwf	??_main+2,f,c
  3200  00F18C  5002               	movf	?___wmul+1,w,c
  3201  00F18E  2238               	addwfc	??_main+3,f,c
  3202  00F190  C072  F03B         	movff	_time+2,??_main+6
  3203  00F194  3A3B               	swapf	??_main+6,f,c
  3204  00F196  0E0F               	movlw	15
  3205  00F198  163B               	andwf	??_main+6,f,c
  3206  00F19A  0E0F               	movlw	15
  3207  00F19C  163B               	andwf	??_main+6,f,c
  3208  00F19E  503B               	movf	??_main+6,w,c
  3209  00F1A0  0D0A               	mullw	10
  3210  00F1A2  50F3               	movf	prodl,w,c
  3211  00F1A4  2437               	addwf	??_main+2,w,c
  3212  00F1A6  6E4E               	movwf	main@prevSoupLoad,c
  3213  00F1A8  50F4               	movf	prodh,w,c
  3214  00F1AA  2038               	addwfc	??_main+3,w,c
  3215  00F1AC  6E4F               	movwf	main@prevSoupLoad+1,c
  3216                           
  3217                           ;main.c: 372: if (!soupSort){
  3218  00F1AE  5060               	movf	main@soupSort,w,c
  3219  00F1B0  1061               	iorwf	main@soupSort+1,w,c
  3220  00F1B2  A4D8               	btfss	status,2,c
  3221  00F1B4  D014               	goto	l4339
  3222                           
  3223                           ;main.c: 373: soupSort = 1;
  3224  00F1B6  0E00               	movlw	0
  3225  00F1B8  6E61               	movwf	main@soupSort+1,c
  3226  00F1BA  0E01               	movlw	1
  3227  00F1BC  6E60               	movwf	main@soupSort,c
  3228                           
  3229                           ;main.c: 375: S1steps = 0;
  3230  00F1BE  0E00               	movlw	0
  3231  00F1C0  6E6D               	movwf	main@S1steps+1,c
  3232  00F1C2  0E00               	movlw	0
  3233  00F1C4  6E6C               	movwf	main@S1steps,c
  3234                           
  3235                           ;main.c: 376: _delay((unsigned long)((150)*(32000000/4000.0)));
  3236  00F1C6  0E07               	movlw	7
  3237  00F1C8  6E36               	movwf	(??_main+1)& (0+255),c
  3238  00F1CA  0E17               	movlw	23
  3239  00F1CC  6E35               	movwf	??_main& (0+255),c
  3240  00F1CE  0E6A               	movlw	106
  3241  00F1D0                     u4927:
  3242  00F1D0  2EE8               	decfsz	wreg,f,c
  3243  00F1D2  D7FE               	bra	u4927
  3244  00F1D4  2E35               	decfsz	??_main& (0+255),f,c
  3245  00F1D6  D7FC               	bra	u4927
  3246  00F1D8  2E36               	decfsz	(??_main+1)& (0+255),f,c
  3247  00F1DA  D7FA               	bra	u4927
  3248  00F1DC  D000               	nop2	
  3249  00F1DE                     l4339:
  3250                           
  3251                           ;main.c: 377: }
  3252                           ;main.c: 378: }
  3253                           ;main.c: 380: if (soupSort){
  3254  00F1DE  5060               	movf	main@soupSort,w,c
  3255  00F1E0  1061               	iorwf	main@soupSort+1,w,c
  3256  00F1E2  B4D8               	btfsc	status,2,c
  3257  00F1E4  D11E               	goto	l4435
  3258                           
  3259                           ;main.c: 382: S1steps ++;
  3260  00F1E6  4A6C               	infsnz	main@S1steps,f,c
  3261  00F1E8  2A6D               	incf	main@S1steps+1,f,c
  3262                           
  3263                           ;main.c: 384: if (S1steps < 20){
  3264  00F1EA  BE6D               	btfsc	main@S1steps+1,7,c
  3265  00F1EC  D006               	goto	l4345
  3266  00F1EE  506D               	movf	main@S1steps+1,w,c
  3267  00F1F0  E13A               	bnz	l4365
  3268  00F1F2  0E14               	movlw	20
  3269  00F1F4  5C6C               	subwf	main@S1steps,w,c
  3270  00F1F6  B0D8               	btfsc	status,0,c
  3271  00F1F8  D036               	goto	l4365
  3272  00F1FA                     l4345:
  3273                           
  3274                           ;main.c: 385: S1mode = 3;
  3275  00F1FA  0E00               	movlw	0
  3276  00F1FC  6E6B               	movwf	main@S1mode+1,c
  3277  00F1FE  0E03               	movlw	3
  3278  00F200  6E6A               	movwf	main@S1mode,c
  3279                           
  3280                           ;main.c: 386: updateS1(S1mode);
  3281  00F202  C06A  F032         	movff	main@S1mode,updateS1@mode
  3282  00F206  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  3283  00F20A  EC84  F06F         	call	_updateS1	;wreg free
  3284                           
  3285                           ;main.c: 389: readADC(4);
  3286  00F20E  0E04               	movlw	4
  3287  00F210  EC3A  F06B         	call	_readADC
  3288                           
  3289                           ;main.c: 390: if(ADRESL<=0x1){labelState = 1;}
  3290  00F214  0E02               	movlw	2
  3291  00F216  60C3               	cpfslt	4035,c	;volatile
  3292  00F218  D004               	goto	l4355
  3293  00F21A  0E00               	movlw	0
  3294  00F21C  6E5F               	movwf	main@labelState+1,c
  3295  00F21E  0E01               	movlw	1
  3296  00F220  6E5E               	movwf	main@labelState,c
  3297  00F222                     l4355:
  3298                           
  3299                           ;main.c: 391: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3300  00F222  0E01               	movlw	1
  3301  00F224  ECF1  F06A         	call	_lcdInst
  3302  00F228  0E34               	movlw	52
  3303  00F22A  6E35               	movwf	??_main& (0+255),c
  3304  00F22C  0EF2               	movlw	242
  3305  00F22E                     u4937:
  3306  00F22E  2EE8               	decfsz	wreg,f,c
  3307  00F230  D7FE               	bra	u4937
  3308  00F232  2E35               	decfsz	??_main& (0+255),f,c
  3309  00F234  D7FC               	bra	u4937
  3310                           
  3311                           ;main.c: 392: printf("value: %x", ADRESL);
  3312  00F236  0ECD               	movlw	low STR_26
  3313  00F238  6E17               	movwf	printf@f,c
  3314  00F23A  0EFF               	movlw	high STR_26
  3315  00F23C  6E18               	movwf	printf@f+1,c
  3316  00F23E  CFC3 F019          	movff	4035,?_printf+2	;volatile
  3317  00F242  6A1A               	clrf	?_printf+3,c
  3318  00F244  EC71  F070         	call	_printf	;wreg free
  3319                           
  3320                           ;main.c: 393: lcdInst(0b11000000);;
  3321  00F248  0EC0               	movlw	192
  3322  00F24A  ECF1  F06A         	call	_lcdInst
  3323                           
  3324                           ;main.c: 394: printf("testing %d", S1steps);
  3325  00F24E  0EAC               	movlw	low STR_27
  3326  00F250  6E17               	movwf	printf@f,c
  3327  00F252  0EFF               	movlw	high STR_27
  3328  00F254  6E18               	movwf	printf@f+1,c
  3329  00F256  C06C  F019         	movff	main@S1steps,?_printf+2
  3330  00F25A  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  3331  00F25E  EC71  F070         	call	_printf	;wreg free
  3332                           
  3333                           ;main.c: 395: }
  3334  00F262  EFC4  F072         	goto	l3907
  3335  00F266                     l4365:
  3336                           
  3337                           ;main.c: 396: else if (labelState == 1){
  3338  00F266  045E               	decf	main@labelState,w,c
  3339  00F268  105F               	iorwf	main@labelState+1,w,c
  3340  00F26A  A4D8               	btfss	status,2,c
  3341  00F26C  D04F               	goto	l4393
  3342                           
  3343                           ;main.c: 403: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3344  00F26E  0E01               	movlw	1
  3345  00F270  ECF1  F06A         	call	_lcdInst
  3346  00F274  0E34               	movlw	52
  3347  00F276  6E35               	movwf	??_main& (0+255),c
  3348  00F278  0EF2               	movlw	242
  3349  00F27A                     u4947:
  3350  00F27A  2EE8               	decfsz	wreg,f,c
  3351  00F27C  D7FE               	bra	u4947
  3352  00F27E  2E35               	decfsz	??_main& (0+255),f,c
  3353  00F280  D7FC               	bra	u4947
  3354                           
  3355                           ;main.c: 404: printf("no label");
  3356  00F282  0ED7               	movlw	low STR_28
  3357  00F284  6E17               	movwf	printf@f,c
  3358  00F286  0EFF               	movlw	high STR_28
  3359  00F288  6E18               	movwf	printf@f+1,c
  3360  00F28A  EC71  F070         	call	_printf	;wreg free
  3361                           
  3362                           ;main.c: 405: lcdInst(0b11000000);;
  3363  00F28E  0EC0               	movlw	192
  3364  00F290  ECF1  F06A         	call	_lcdInst
  3365                           
  3366                           ;main.c: 406: if(S1steps < (20+30)){
  3367  00F294  BE6D               	btfsc	main@S1steps+1,7,c
  3368  00F296  D006               	goto	l4377
  3369  00F298  506D               	movf	main@S1steps+1,w,c
  3370  00F29A  E11A               	bnz	l4383
  3371  00F29C  0E32               	movlw	50
  3372  00F29E  5C6C               	subwf	main@S1steps,w,c
  3373  00F2A0  B0D8               	btfsc	status,0,c
  3374  00F2A2  D016               	goto	l4383
  3375  00F2A4                     l4377:
  3376                           
  3377                           ;main.c: 407: S1mode = 1;
  3378  00F2A4  0E00               	movlw	0
  3379  00F2A6  6E6B               	movwf	main@S1mode+1,c
  3380  00F2A8  0E01               	movlw	1
  3381  00F2AA  6E6A               	movwf	main@S1mode,c
  3382                           
  3383                           ;main.c: 408: updateS1(S1mode);
  3384  00F2AC  C06A  F032         	movff	main@S1mode,updateS1@mode
  3385  00F2B0  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  3386  00F2B4  EC84  F06F         	call	_updateS1	;wreg free
  3387                           
  3388                           ;main.c: 409: printf("sorting %d", S1steps);
  3389  00F2B8  0EA1               	movlw	low STR_29
  3390  00F2BA  6E17               	movwf	printf@f,c
  3391  00F2BC  0EFF               	movlw	high STR_29
  3392  00F2BE  6E18               	movwf	printf@f+1,c
  3393  00F2C0  C06C  F019         	movff	main@S1steps,?_printf+2
  3394  00F2C4  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  3395  00F2C8  EC71  F070         	call	_printf	;wreg free
  3396                           
  3397                           ;main.c: 410: }
  3398  00F2CC  EFC4  F072         	goto	l3907
  3399  00F2D0                     l4383:
  3400                           
  3401                           ;main.c: 411: else if(S1steps < (20+30+29)){
  3402  00F2D0  BE6D               	btfsc	main@S1steps+1,7,c
  3403  00F2D2  D006               	goto	l4385
  3404  00F2D4  506D               	movf	main@S1steps+1,w,c
  3405  00F2D6  E16D               	bnz	l4419
  3406  00F2D8  0E4F               	movlw	79
  3407  00F2DA  5C6C               	subwf	main@S1steps,w,c
  3408  00F2DC  B0D8               	btfsc	status,0,c
  3409  00F2DE  D069               	goto	l4419
  3410  00F2E0                     l4385:
  3411                           
  3412                           ;main.c: 413: S1mode = 2;
  3413  00F2E0  0E00               	movlw	0
  3414  00F2E2  6E6B               	movwf	main@S1mode+1,c
  3415  00F2E4  0E02               	movlw	2
  3416  00F2E6  6E6A               	movwf	main@S1mode,c
  3417                           
  3418                           ;main.c: 414: updateS1(S1mode);
  3419  00F2E8  C06A  F032         	movff	main@S1mode,updateS1@mode
  3420  00F2EC  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  3421  00F2F0  EC84  F06F         	call	_updateS1	;wreg free
  3422                           
  3423                           ;main.c: 415: printf("returning %d", S1steps);
  3424  00F2F4  0E34               	movlw	low STR_30
  3425  00F2F6  6E17               	movwf	printf@f,c
  3426  00F2F8  0EFF               	movlw	high STR_30
  3427  00F2FA  6E18               	movwf	printf@f+1,c
  3428  00F2FC  C06C  F019         	movff	main@S1steps,?_printf+2
  3429  00F300  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  3430  00F304  EC71  F070         	call	_printf	;wreg free
  3431                           
  3432                           ;main.c: 416: }
  3433  00F308  EFC4  F072         	goto	l3907
  3434  00F30C                     l4393:
  3435                           
  3436                           ;main.c: 419: else if(labelState == 0){
  3437  00F30C  505E               	movf	main@labelState,w,c
  3438  00F30E  105F               	iorwf	main@labelState+1,w,c
  3439  00F310  A4D8               	btfss	status,2,c
  3440  00F312  D055               	goto	l4421
  3441                           
  3442                           ;main.c: 420: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3443  00F314  0E01               	movlw	1
  3444  00F316  ECF1  F06A         	call	_lcdInst
  3445  00F31A  0E34               	movlw	52
  3446  00F31C  6E35               	movwf	??_main& (0+255),c
  3447  00F31E  0EF2               	movlw	242
  3448  00F320                     u4957:
  3449  00F320  2EE8               	decfsz	wreg,f,c
  3450  00F322  D7FE               	bra	u4957
  3451  00F324  2E35               	decfsz	??_main& (0+255),f,c
  3452  00F326  D7FC               	bra	u4957
  3453                           
  3454                           ;main.c: 421: printf("label");
  3455  00F328  0EF8               	movlw	low (STR_18+8)
  3456  00F32A  6E17               	movwf	printf@f,c
  3457  00F32C  0EFE               	movlw	high (STR_18+8)
  3458  00F32E  6E18               	movwf	printf@f+1,c
  3459  00F330  EC71  F070         	call	_printf	;wreg free
  3460                           
  3461                           ;main.c: 422: lcdInst(0b11000000);;
  3462  00F334  0EC0               	movlw	192
  3463  00F336  ECF1  F06A         	call	_lcdInst
  3464                           
  3465                           ;main.c: 423: if(S1steps < (20+26)){
  3466  00F33A  BE6D               	btfsc	main@S1steps+1,7,c
  3467  00F33C  D006               	goto	l4405
  3468  00F33E  506D               	movf	main@S1steps+1,w,c
  3469  00F340  E11A               	bnz	l4411
  3470  00F342  0E2E               	movlw	46
  3471  00F344  5C6C               	subwf	main@S1steps,w,c
  3472  00F346  B0D8               	btfsc	status,0,c
  3473  00F348  D016               	goto	l4411
  3474  00F34A                     l4405:
  3475                           
  3476                           ;main.c: 425: S1mode = 2;
  3477  00F34A  0E00               	movlw	0
  3478  00F34C  6E6B               	movwf	main@S1mode+1,c
  3479  00F34E  0E02               	movlw	2
  3480  00F350  6E6A               	movwf	main@S1mode,c
  3481                           
  3482                           ;main.c: 426: updateS1(S1mode);
  3483  00F352  C06A  F032         	movff	main@S1mode,updateS1@mode
  3484  00F356  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  3485  00F35A  EC84  F06F         	call	_updateS1	;wreg free
  3486                           
  3487                           ;main.c: 427: printf("sorting %d", S1steps);
  3488  00F35E  0EA1               	movlw	low STR_29
  3489  00F360  6E17               	movwf	printf@f,c
  3490  00F362  0EFF               	movlw	high STR_29
  3491  00F364  6E18               	movwf	printf@f+1,c
  3492  00F366  C06C  F019         	movff	main@S1steps,?_printf+2
  3493  00F36A  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  3494  00F36E  EC71  F070         	call	_printf	;wreg free
  3495                           
  3496                           ;main.c: 428: }
  3497  00F372  EFC4  F072         	goto	l3907
  3498  00F376                     l4411:
  3499                           
  3500                           ;main.c: 429: else if(S1steps < (20+26+26)){
  3501  00F376  BE6D               	btfsc	main@S1steps+1,7,c
  3502  00F378  D006               	goto	l4413
  3503  00F37A  506D               	movf	main@S1steps+1,w,c
  3504  00F37C  E11A               	bnz	l4419
  3505  00F37E  0E48               	movlw	72
  3506  00F380  5C6C               	subwf	main@S1steps,w,c
  3507  00F382  B0D8               	btfsc	status,0,c
  3508  00F384  D016               	goto	l4419
  3509  00F386                     l4413:
  3510                           
  3511                           ;main.c: 431: S1mode = 1;
  3512  00F386  0E00               	movlw	0
  3513  00F388  6E6B               	movwf	main@S1mode+1,c
  3514  00F38A  0E01               	movlw	1
  3515  00F38C  6E6A               	movwf	main@S1mode,c
  3516                           
  3517                           ;main.c: 432: updateS1(S1mode);
  3518  00F38E  C06A  F032         	movff	main@S1mode,updateS1@mode
  3519  00F392  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  3520  00F396  EC84  F06F         	call	_updateS1	;wreg free
  3521                           
  3522                           ;main.c: 433: printf("returning %d", S1steps);
  3523  00F39A  0E34               	movlw	low STR_30
  3524  00F39C  6E17               	movwf	printf@f,c
  3525  00F39E  0EFF               	movlw	high STR_30
  3526  00F3A0  6E18               	movwf	printf@f+1,c
  3527  00F3A2  C06C  F019         	movff	main@S1steps,?_printf+2
  3528  00F3A6  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  3529  00F3AA  EC71  F070         	call	_printf	;wreg free
  3530                           
  3531                           ;main.c: 434: }
  3532  00F3AE  EFC4  F072         	goto	l3907
  3533  00F3B2                     l4419:
  3534                           
  3535                           ;main.c: 435: else{labelState = 100;}
  3536  00F3B2  0E00               	movlw	0
  3537  00F3B4  6E5F               	movwf	main@labelState+1,c
  3538  00F3B6  0E64               	movlw	100
  3539  00F3B8  6E5E               	movwf	main@labelState,c
  3540                           
  3541                           ;main.c: 436: }
  3542  00F3BA  EFC4  F072         	goto	l3907
  3543  00F3BE                     l4421:
  3544                           
  3545                           ;main.c: 437: else{
  3546                           ;main.c: 438: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3547  00F3BE  0E01               	movlw	1
  3548  00F3C0  ECF1  F06A         	call	_lcdInst
  3549  00F3C4  0E34               	movlw	52
  3550  00F3C6  6E35               	movwf	??_main& (0+255),c
  3551  00F3C8  0EF2               	movlw	242
  3552  00F3CA                     u4967:
  3553  00F3CA  2EE8               	decfsz	wreg,f,c
  3554  00F3CC  D7FE               	bra	u4967
  3555  00F3CE  2E35               	decfsz	??_main& (0+255),f,c
  3556  00F3D0  D7FC               	bra	u4967
  3557                           
  3558                           ;main.c: 439: printf("finished %d", S1steps);
  3559  00F3D2  0E7D               	movlw	low STR_34
  3560  00F3D4  6E17               	movwf	printf@f,c
  3561  00F3D6  0EFF               	movlw	high STR_34
  3562  00F3D8  6E18               	movwf	printf@f+1,c
  3563  00F3DA  C06C  F019         	movff	main@S1steps,?_printf+2
  3564  00F3DE  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  3565  00F3E2  EC71  F070         	call	_printf	;wreg free
  3566                           
  3567                           ;main.c: 441: S1steps = 0;
  3568  00F3E6  0E00               	movlw	0
  3569  00F3E8  6E6D               	movwf	main@S1steps+1,c
  3570  00F3EA  0E00               	movlw	0
  3571  00F3EC  6E6C               	movwf	main@S1steps,c
  3572                           
  3573                           ;main.c: 442: labelState = 0;
  3574  00F3EE  0E00               	movlw	0
  3575  00F3F0  6E5F               	movwf	main@labelState+1,c
  3576  00F3F2  0E00               	movlw	0
  3577  00F3F4  6E5E               	movwf	main@labelState,c
  3578                           
  3579                           ;main.c: 443: if (timePassed(prevSoupLoad) > 2) {soupSort = 0;}
  3580  00F3F6  C04E  F007         	movff	main@prevSoupLoad,timePassed@start
  3581  00F3FA  C04F  F008         	movff	main@prevSoupLoad+1,timePassed@start+1
  3582  00F3FE  EC5F  F06D         	call	_timePassed	;wreg free
  3583  00F402  BE08               	btfsc	?_timePassed+1,7,c
  3584  00F404  EFC4  F072         	goto	l3907
  3585  00F408  5008               	movf	?_timePassed+1,w,c
  3586  00F40A  E105               	bnz	u4150
  3587  00F40C  0E03               	movlw	3
  3588  00F40E  5C07               	subwf	?_timePassed,w,c
  3589  00F410  A0D8               	btfss	status,0,c
  3590  00F412  EFC4  F072         	goto	l3907
  3591  00F416                     u4150:
  3592  00F416                     l4433:
  3593  00F416  0E00               	movlw	0
  3594  00F418  6E61               	movwf	main@soupSort+1,c
  3595  00F41A  0E00               	movlw	0
  3596  00F41C  6E60               	movwf	main@soupSort,c
  3597                           
  3598                           ;main.c: 444: }
  3599                           ;main.c: 445: }
  3600  00F41E  EFC4  F072         	goto	l3907
  3601  00F422                     l4435:
  3602                           
  3603                           ;main.c: 446: else{
  3604                           ;main.c: 448: S1mode = 3;
  3605  00F422  0E00               	movlw	0
  3606  00F424  6E6B               	movwf	main@S1mode+1,c
  3607  00F426  0E03               	movlw	3
  3608  00F428  6E6A               	movwf	main@S1mode,c
  3609                           
  3610                           ;main.c: 449: updateS1(S1mode);
  3611  00F42A  C06A  F032         	movff	main@S1mode,updateS1@mode
  3612  00F42E  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  3613  00F432  EC84  F06F         	call	_updateS1	;wreg free
  3614                           
  3615                           ;main.c: 450: }
  3616                           ;main.c: 452: }
  3617  00F436  EFC4  F072         	goto	l3907
  3618  00F43A                     l4439:
  3619                           
  3620                           ;main.c: 453: else if(standby == 4){
  3621  00F43A  0E04               	movlw	4
  3622  00F43C  185A               	xorwf	main@standby,w,c
  3623  00F43E  105B               	iorwf	main@standby+1,w,c
  3624  00F440  A4D8               	btfss	status,2,c
  3625  00F442  D187               	goto	l4565
  3626                           
  3627                           ;main.c: 455: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3628  00F444  0E01               	movlw	1
  3629  00F446  ECF1  F06A         	call	_lcdInst
  3630  00F44A  0E34               	movlw	52
  3631  00F44C  6E35               	movwf	??_main& (0+255),c
  3632  00F44E  0EF2               	movlw	242
  3633  00F450                     u4977:
  3634  00F450  2EE8               	decfsz	wreg,f,c
  3635  00F452  D7FE               	bra	u4977
  3636  00F454  2E35               	decfsz	??_main& (0+255),f,c
  3637  00F456  D7FC               	bra	u4977
  3638                           
  3639                           ;main.c: 456: printf("soda can test");
  3640  00F458  0EFE               	movlw	low STR_35
  3641  00F45A  6E17               	movwf	printf@f,c
  3642  00F45C  0EFE               	movlw	high STR_35
  3643  00F45E  6E18               	movwf	printf@f+1,c
  3644  00F460  EC71  F070         	call	_printf	;wreg free
  3645                           
  3646                           ;main.c: 459: readADC(0);
  3647  00F464  0E00               	movlw	0
  3648  00F466  EC3A  F06B         	call	_readADC
  3649                           
  3650                           ;main.c: 460: if(ADRES >= 0x3b0){
  3651  00F46A  0EB0               	movlw	176
  3652  00F46C  5CC3               	subwf	4035,w,c	;volatile
  3653  00F46E  0E03               	movlw	3
  3654  00F470  58C4               	subwfb	4036,w,c	;volatile
  3655  00F472  A0D8               	btfss	status,0,c
  3656  00F474  D06E               	goto	l4465
  3657                           
  3658                           ;main.c: 461: prevSodaLoad = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  3659  00F476  C072  F035         	movff	_time+2,??_main
  3660  00F47A  0E0F               	movlw	15
  3661  00F47C  1635               	andwf	??_main,f,c
  3662  00F47E  5035               	movf	??_main,w,c
  3663  00F480  6E01               	movwf	___wmul@multiplier,c
  3664  00F482  6A02               	clrf	___wmul@multiplier+1,c
  3665  00F484  0E0E               	movlw	14
  3666  00F486  6E04               	movwf	___wmul@multiplicand+1,c
  3667  00F488  0E10               	movlw	16
  3668  00F48A  6E03               	movwf	___wmul@multiplicand,c
  3669  00F48C  EC4C  F06B         	call	___wmul	;wreg free
  3670  00F490  C070  F036         	movff	_time,??_main+1
  3671  00F494  3A36               	swapf	??_main+1,f,c
  3672  00F496  0E0F               	movlw	15
  3673  00F498  1636               	andwf	??_main+1,f,c
  3674  00F49A  0E0F               	movlw	15
  3675  00F49C  1636               	andwf	??_main+1,f,c
  3676  00F49E  5036               	movf	??_main+1,w,c
  3677  00F4A0  0D0A               	mullw	10
  3678  00F4A2  5070               	movf	_time,w,c
  3679  00F4A4  0B0F               	andlw	15
  3680  00F4A6  6E37               	movwf	(??_main+2)& (0+255),c
  3681  00F4A8  6A38               	clrf	(??_main+3)& (0+255),c
  3682  00F4AA  50F3               	movf	prodl,w,c
  3683  00F4AC  2637               	addwf	??_main+2,f,c
  3684  00F4AE  50F4               	movf	prodh,w,c
  3685  00F4B0  2238               	addwfc	??_main+3,f,c
  3686  00F4B2  C071  F039         	movff	_time+1,??_main+4
  3687  00F4B6  0E0F               	movlw	15
  3688  00F4B8  1639               	andwf	??_main+4,f,c
  3689  00F4BA  5039               	movf	??_main+4,w,c
  3690  00F4BC  0D3C               	mullw	60
  3691  00F4BE  50F3               	movf	prodl,w,c
  3692  00F4C0  2637               	addwf	??_main+2,f,c
  3693  00F4C2  50F4               	movf	prodh,w,c
  3694  00F4C4  2238               	addwfc	??_main+3,f,c
  3695  00F4C6  C071  F03A         	movff	_time+1,??_main+5
  3696  00F4CA  3A3A               	swapf	??_main+5,f,c
  3697  00F4CC  0E0F               	movlw	15
  3698  00F4CE  163A               	andwf	??_main+5,f,c
  3699  00F4D0  0E0F               	movlw	15
  3700  00F4D2  163A               	andwf	??_main+5,f,c
  3701  00F4D4  503A               	movf	??_main+5,w,c
  3702  00F4D6  0D0A               	mullw	10
  3703  00F4D8  50F3               	movf	prodl,w,c
  3704  00F4DA  2637               	addwf	??_main+2,f,c
  3705  00F4DC  50F4               	movf	prodh,w,c
  3706  00F4DE  2238               	addwfc	??_main+3,f,c
  3707  00F4E0  5001               	movf	?___wmul,w,c
  3708  00F4E2  2637               	addwf	??_main+2,f,c
  3709  00F4E4  5002               	movf	?___wmul+1,w,c
  3710  00F4E6  2238               	addwfc	??_main+3,f,c
  3711  00F4E8  C072  F03B         	movff	_time+2,??_main+6
  3712  00F4EC  3A3B               	swapf	??_main+6,f,c
  3713  00F4EE  0E0F               	movlw	15
  3714  00F4F0  163B               	andwf	??_main+6,f,c
  3715  00F4F2  0E0F               	movlw	15
  3716  00F4F4  163B               	andwf	??_main+6,f,c
  3717  00F4F6  503B               	movf	??_main+6,w,c
  3718  00F4F8  0D0A               	mullw	10
  3719  00F4FA  50F3               	movf	prodl,w,c
  3720  00F4FC  2437               	addwf	??_main+2,w,c
  3721  00F4FE  6E56               	movwf	main@prevSodaLoad,c
  3722  00F500  50F4               	movf	prodh,w,c
  3723  00F502  2038               	addwfc	??_main+3,w,c
  3724  00F504  6E57               	movwf	main@prevSodaLoad+1,c
  3725                           
  3726                           ;main.c: 462: if (!sodaSort && (t3== 1 || t3==8)){
  3727  00F506  5062               	movf	main@sodaSort,w,c
  3728  00F508  1063               	iorwf	main@sodaSort+1,w,c
  3729  00F50A  A4D8               	btfss	status,2,c
  3730  00F50C  D011               	goto	l4461
  3731  00F50E  047D               	decf	_t3,w,c
  3732  00F510  107E               	iorwf	_t3+1,w,c
  3733  00F512  B4D8               	btfsc	status,2,c
  3734  00F514  D005               	goto	l4459
  3735  00F516  0E08               	movlw	8
  3736  00F518  187D               	xorwf	_t3,w,c
  3737  00F51A  107E               	iorwf	_t3+1,w,c
  3738  00F51C  A4D8               	btfss	status,2,c
  3739  00F51E  D008               	goto	l4461
  3740  00F520                     l4459:
  3741                           
  3742                           ;main.c: 463: sodaSort = 1;
  3743  00F520  0E00               	movlw	0
  3744  00F522  6E63               	movwf	main@sodaSort+1,c
  3745  00F524  0E01               	movlw	1
  3746  00F526  6E62               	movwf	main@sodaSort,c
  3747                           
  3748                           ;main.c: 466: S3steps = 0;
  3749  00F528  0E00               	movlw	0
  3750  00F52A  6E69               	movwf	main@S3steps+1,c
  3751  00F52C  0E00               	movlw	0
  3752  00F52E  6E68               	movwf	main@S3steps,c
  3753  00F530                     l4461:
  3754                           
  3755                           ;main.c: 468: }
  3756                           ;main.c: 469: if(timePassed(startTime) < 1){sodaSort = 0;}
  3757  00F530  C058  F007         	movff	main@startTime,timePassed@start
  3758  00F534  C059  F008         	movff	main@startTime+1,timePassed@start+1
  3759  00F538  EC5F  F06D         	call	_timePassed	;wreg free
  3760  00F53C  BE08               	btfsc	?_timePassed+1,7,c
  3761  00F53E  D005               	goto	l4463
  3762  00F540  5008               	movf	?_timePassed+1,w,c
  3763  00F542  E107               	bnz	l4465
  3764  00F544  0407               	decf	?_timePassed,w,c
  3765  00F546  B0D8               	btfsc	status,0,c
  3766  00F548  D004               	goto	l4465
  3767  00F54A                     l4463:
  3768  00F54A  0E00               	movlw	0
  3769  00F54C  6E63               	movwf	main@sodaSort+1,c
  3770  00F54E  0E00               	movlw	0
  3771  00F550  6E62               	movwf	main@sodaSort,c
  3772  00F552                     l4465:
  3773                           
  3774                           ;main.c: 470: }
  3775                           ;main.c: 472: lcdInst(0b11000000);;
  3776  00F552  0EC0               	movlw	192
  3777  00F554  ECF1  F06A         	call	_lcdInst
  3778                           
  3779                           ;main.c: 473: printf("%d %x %d %x", sodaSort, ADRES, prevSodaLoad, sodaThresh);
  3780  00F558  0E95               	movlw	low STR_36
  3781  00F55A  6E17               	movwf	printf@f,c
  3782  00F55C  0EFF               	movlw	high STR_36
  3783  00F55E  6E18               	movwf	printf@f+1,c
  3784  00F560  C062  F019         	movff	main@sodaSort,?_printf+2
  3785  00F564  C063  F01A         	movff	main@sodaSort+1,?_printf+3
  3786  00F568  CFC3 F01B          	movff	4035,?_printf+4	;volatile
  3787  00F56C  CFC4 F01C          	movff	4036,?_printf+5	;volatile
  3788  00F570  C056  F01D         	movff	main@prevSodaLoad,?_printf+6
  3789  00F574  C057  F01E         	movff	main@prevSodaLoad+1,?_printf+7
  3790  00F578  C04C  F01F         	movff	main@sodaThresh,?_printf+8
  3791  00F57C  C04D  F020         	movff	main@sodaThresh+1,?_printf+9
  3792  00F580  EC71  F070         	call	_printf	;wreg free
  3793                           
  3794                           ;main.c: 475: if (sodaSort){
  3795  00F584  5062               	movf	main@sodaSort,w,c
  3796  00F586  1063               	iorwf	main@sodaSort+1,w,c
  3797  00F588  B4D8               	btfsc	status,2,c
  3798  00F58A  D0D8               	goto	l4559
  3799                           
  3800                           ;main.c: 478: S3steps ++;
  3801  00F58C  4A68               	infsnz	main@S3steps,f,c
  3802  00F58E  2A69               	incf	main@S3steps+1,f,c
  3803                           
  3804                           ;main.c: 480: if(S3steps < 24){
  3805  00F590  BE69               	btfsc	main@S3steps+1,7,c
  3806  00F592  D006               	goto	l4475
  3807  00F594  5069               	movf	main@S3steps+1,w,c
  3808  00F596  E10F               	bnz	l4481
  3809  00F598  0E18               	movlw	24
  3810  00F59A  5C68               	subwf	main@S3steps,w,c
  3811  00F59C  B0D8               	btfsc	status,0,c
  3812  00F59E  D00B               	goto	l4481
  3813  00F5A0                     l4475:
  3814                           
  3815                           ;main.c: 481: S3mode = 3;
  3816  00F5A0  0E00               	movlw	0
  3817  00F5A2  6E6F               	movwf	main@S3mode+1,c
  3818  00F5A4  0E03               	movlw	3
  3819  00F5A6  6E6E               	movwf	main@S3mode,c
  3820                           
  3821                           ;main.c: 482: updateS3(S3mode);
  3822  00F5A8  C06E  F001         	movff	main@S3mode,updateS3@mode
  3823  00F5AC  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  3824  00F5B0  ECCC  F06E         	call	_updateS3	;wreg free
  3825  00F5B4  D3F9               	goto	l4801
  3826  00F5B6                     l4481:
  3827                           
  3828                           ;main.c: 485: else if (S3steps < (24+22)){
  3829  00F5B6  BE69               	btfsc	main@S3steps+1,7,c
  3830  00F5B8  D006               	goto	l4483
  3831  00F5BA  5069               	movf	main@S3steps+1,w,c
  3832  00F5BC  E10F               	bnz	l4489
  3833  00F5BE  0E2E               	movlw	46
  3834  00F5C0  5C68               	subwf	main@S3steps,w,c
  3835  00F5C2  B0D8               	btfsc	status,0,c
  3836  00F5C4  D00B               	goto	l4489
  3837  00F5C6                     l4483:
  3838                           
  3839                           ;main.c: 486: S3mode = 1;
  3840  00F5C6  0E00               	movlw	0
  3841  00F5C8  6E6F               	movwf	main@S3mode+1,c
  3842  00F5CA  0E01               	movlw	1
  3843  00F5CC  6E6E               	movwf	main@S3mode,c
  3844                           
  3845                           ;main.c: 487: updateS3(S3mode);
  3846  00F5CE  C06E  F001         	movff	main@S3mode,updateS3@mode
  3847  00F5D2  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  3848  00F5D6  ECCC  F06E         	call	_updateS3	;wreg free
  3849  00F5DA  D3E6               	goto	l4801
  3850  00F5DC                     l4489:
  3851                           
  3852                           ;main.c: 493: else if (S3steps < (24+22+8)){
  3853  00F5DC  BE69               	btfsc	main@S3steps+1,7,c
  3854  00F5DE  D006               	goto	l4491
  3855  00F5E0  5069               	movf	main@S3steps+1,w,c
  3856  00F5E2  E114               	bnz	l4495
  3857  00F5E4  0E36               	movlw	54
  3858  00F5E6  5C68               	subwf	main@S3steps,w,c
  3859  00F5E8  B0D8               	btfsc	status,0,c
  3860  00F5EA  D010               	goto	l4495
  3861  00F5EC                     l4491:
  3862                           
  3863                           ;main.c: 494: S3mode = 4;
  3864  00F5EC  0E00               	movlw	0
  3865  00F5EE  6E6F               	movwf	main@S3mode+1,c
  3866  00F5F0  0E04               	movlw	4
  3867  00F5F2  6E6E               	movwf	main@S3mode,c
  3868                           
  3869                           ;main.c: 496: S2mode = 1;
  3870  00F5F4  0E00               	movlw	0
  3871  00F5F6  6E67               	movwf	main@S2mode+1,c
  3872  00F5F8  0E01               	movlw	1
  3873  00F5FA  6E66               	movwf	main@S2mode,c
  3874                           
  3875                           ;main.c: 497: updateS2(S2mode);
  3876  00F5FC  C066  F001         	movff	main@S2mode,updateS2@mode
  3877  00F600  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  3878  00F604  EC14  F06E         	call	_updateS2	;wreg free
  3879                           
  3880                           ;main.c: 500: }
  3881  00F608  EFC4  F072         	goto	l3907
  3882  00F60C                     l4495:
  3883                           
  3884                           ;main.c: 501: else if (S3steps < (24+22+8+3)){
  3885  00F60C  BE69               	btfsc	main@S3steps+1,7,c
  3886  00F60E  D006               	goto	l4497
  3887  00F610  5069               	movf	main@S3steps+1,w,c
  3888  00F612  E110               	bnz	l4505
  3889  00F614  0E39               	movlw	57
  3890  00F616  5C68               	subwf	main@S3steps,w,c
  3891  00F618  B0D8               	btfsc	status,0,c
  3892  00F61A  D00C               	goto	l4505
  3893  00F61C                     l4497:
  3894                           
  3895                           ;main.c: 502: S2mode = 4;
  3896  00F61C  0E00               	movlw	0
  3897  00F61E  6E67               	movwf	main@S2mode+1,c
  3898  00F620  0E04               	movlw	4
  3899  00F622  6E66               	movwf	main@S2mode,c
  3900                           
  3901                           ;main.c: 503: S3mode = 4;
  3902  00F624  0E00               	movlw	0
  3903  00F626  6E6F               	movwf	main@S3mode+1,c
  3904  00F628  0E04               	movlw	4
  3905  00F62A  6E6E               	movwf	main@S3mode,c
  3906                           
  3907                           ;main.c: 504: readADC(3);
  3908  00F62C  0E03               	movlw	3
  3909  00F62E  EC3A  F06B         	call	_readADC
  3910  00F632  D31E               	goto	L11
  3911  00F634                     l4505:
  3912                           
  3913                           ;main.c: 511: else if (S3steps < (24+22+8+3+8)){
  3914  00F634  BE69               	btfsc	main@S3steps+1,7,c
  3915  00F636  D006               	goto	l4507
  3916  00F638  5069               	movf	main@S3steps+1,w,c
  3917  00F63A  E10F               	bnz	l4513
  3918  00F63C  0E41               	movlw	65
  3919  00F63E  5C68               	subwf	main@S3steps,w,c
  3920  00F640  B0D8               	btfsc	status,0,c
  3921  00F642  D00B               	goto	l4513
  3922  00F644                     l4507:
  3923                           
  3924                           ;main.c: 512: S2mode = 2;
  3925  00F644  0E00               	movlw	0
  3926  00F646  6E67               	movwf	main@S2mode+1,c
  3927  00F648  0E02               	movlw	2
  3928  00F64A  6E66               	movwf	main@S2mode,c
  3929                           
  3930                           ;main.c: 513: updateS2(S2mode);
  3931  00F64C  C066  F001         	movff	main@S2mode,updateS2@mode
  3932  00F650  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  3933  00F654  EC14  F06E         	call	_updateS2	;wreg free
  3934  00F658  D325               	goto	l4749
  3935  00F65A                     l4513:
  3936                           
  3937                           ;main.c: 519: else if (tabState == 1){
  3938  00F65A  045C               	decf	main@tabState,w,c
  3939  00F65C  105D               	iorwf	main@tabState+1,w,c
  3940  00F65E  A4D8               	btfss	status,2,c
  3941  00F660  D029               	goto	l4533
  3942                           
  3943                           ;main.c: 524: if(S3steps < (24+22+8+3+8+9)){
  3944  00F662  BE69               	btfsc	main@S3steps+1,7,c
  3945  00F664  D006               	goto	l4517
  3946  00F666  5069               	movf	main@S3steps+1,w,c
  3947  00F668  E10F               	bnz	l4523
  3948  00F66A  0E4A               	movlw	74
  3949  00F66C  5C68               	subwf	main@S3steps,w,c
  3950  00F66E  B0D8               	btfsc	status,0,c
  3951  00F670  D00B               	goto	l4523
  3952  00F672                     l4517:
  3953                           
  3954                           ;main.c: 525: S3mode = 1;
  3955  00F672  0E00               	movlw	0
  3956  00F674  6E6F               	movwf	main@S3mode+1,c
  3957  00F676  0E01               	movlw	1
  3958  00F678  6E6E               	movwf	main@S3mode,c
  3959                           
  3960                           ;main.c: 526: updateS3(S3mode);
  3961  00F67A  C06E  F001         	movff	main@S3mode,updateS3@mode
  3962  00F67E  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  3963  00F682  ECCC  F06E         	call	_updateS3	;wreg free
  3964  00F686  D390               	goto	l4801
  3965  00F688                     l4523:
  3966                           
  3967                           ;main.c: 530: else if(S3steps < (24+22+8+3+8+7+(9+22))){
  3968  00F688  BE69               	btfsc	main@S3steps+1,7,c
  3969  00F68A  D006               	goto	l4525
  3970  00F68C  5069               	movf	main@S3steps+1,w,c
  3971  00F68E  E13C               	bnz	l4551
  3972  00F690  0E67               	movlw	103
  3973  00F692  5C68               	subwf	main@S3steps,w,c
  3974  00F694  B0D8               	btfsc	status,0,c
  3975  00F696  D360               	goto	l4789
  3976  00F698                     l4525:
  3977                           
  3978                           ;main.c: 531: S3mode = 2;
  3979  00F698  0E00               	movlw	0
  3980  00F69A  6E6F               	movwf	main@S3mode+1,c
  3981  00F69C  0E02               	movlw	2
  3982  00F69E  6E6E               	movwf	main@S3mode,c
  3983                           
  3984                           ;main.c: 532: updateS3(S3mode);
  3985  00F6A0  C06E  F001         	movff	main@S3mode,updateS3@mode
  3986  00F6A4  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  3987  00F6A8  ECCC  F06E         	call	_updateS3	;wreg free
  3988  00F6AC  D37D               	goto	l4801
  3989  00F6AE                     L4:
  3990  00F6AE  6E5C               	movwf	main@tabState,c
  3991                           
  3992                           ;main.c: 537: }
  3993  00F6B0  EFC4  F072         	goto	l3907
  3994  00F6B4                     l4533:
  3995                           
  3996                           ;main.c: 538: else if(tabState == 0){
  3997  00F6B4  505C               	movf	main@tabState,w,c
  3998  00F6B6  105D               	iorwf	main@tabState+1,w,c
  3999  00F6B8  A4D8               	btfss	status,2,c
  4000  00F6BA  D027               	goto	l4553
  4001                           
  4002                           ;main.c: 542: if(S3steps < (24+22+8+3+8+(22+29))){
  4003  00F6BC  BE69               	btfsc	main@S3steps+1,7,c
  4004  00F6BE  D006               	goto	l4537
  4005  00F6C0  5069               	movf	main@S3steps+1,w,c
  4006  00F6C2  E10F               	bnz	l4543
  4007  00F6C4  0E74               	movlw	116
  4008  00F6C6  5C68               	subwf	main@S3steps,w,c
  4009  00F6C8  B0D8               	btfsc	status,0,c
  4010  00F6CA  D00B               	goto	l4543
  4011  00F6CC                     l4537:
  4012                           
  4013                           ;main.c: 543: S3mode = 2;
  4014  00F6CC  0E00               	movlw	0
  4015  00F6CE  6E6F               	movwf	main@S3mode+1,c
  4016  00F6D0  0E02               	movlw	2
  4017  00F6D2  6E6E               	movwf	main@S3mode,c
  4018                           
  4019                           ;main.c: 544: updateS3(S3mode);
  4020  00F6D4  C06E  F001         	movff	main@S3mode,updateS3@mode
  4021  00F6D8  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4022  00F6DC  ECCC  F06E         	call	_updateS3	;wreg free
  4023  00F6E0  D363               	goto	l4801
  4024  00F6E2                     l4543:
  4025                           
  4026                           ;main.c: 548: else if(S3steps < (24+22+8+3+8+(22+29)+28)){
  4027  00F6E2  BE69               	btfsc	main@S3steps+1,7,c
  4028  00F6E4  D006               	goto	l4545
  4029  00F6E6  5069               	movf	main@S3steps+1,w,c
  4030  00F6E8  E10F               	bnz	l4551
  4031  00F6EA  0E90               	movlw	144
  4032  00F6EC  5C68               	subwf	main@S3steps,w,c
  4033  00F6EE  B0D8               	btfsc	status,0,c
  4034  00F6F0  D333               	goto	l4789
  4035  00F6F2                     l4545:
  4036                           
  4037                           ;main.c: 549: S3mode = 1;
  4038  00F6F2  0E00               	movlw	0
  4039  00F6F4  6E6F               	movwf	main@S3mode+1,c
  4040  00F6F6  0E01               	movlw	1
  4041  00F6F8  6E6E               	movwf	main@S3mode,c
  4042                           
  4043                           ;main.c: 550: updateS3(S3mode);
  4044  00F6FA  C06E  F001         	movff	main@S3mode,updateS3@mode
  4045  00F6FE  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4046  00F702  ECCC  F06E         	call	_updateS3	;wreg free
  4047  00F706  D350               	goto	l4801
  4048  00F708                     l4551:
  4049  00F708  D327               	goto	l4789
  4050  00F70A                     l4553:
  4051                           
  4052                           ;main.c: 556: else{
  4053                           ;main.c: 560: S3steps = 0;
  4054  00F70A  0E00               	movlw	0
  4055  00F70C  6E69               	movwf	main@S3steps+1,c
  4056  00F70E  0E00               	movlw	0
  4057  00F710  6E68               	movwf	main@S3steps,c
  4058                           
  4059                           ;main.c: 561: tabState = 0;
  4060  00F712  0E00               	movlw	0
  4061  00F714  6E5D               	movwf	main@tabState+1,c
  4062  00F716  0E00               	movlw	0
  4063  00F718  6E5C               	movwf	main@tabState,c
  4064                           
  4065                           ;main.c: 562: if (timePassed(prevSodaLoad) > 2) {sodaSort = 0;}
  4066  00F71A  C056  F007         	movff	main@prevSodaLoad,timePassed@start
  4067  00F71E  C057  F008         	movff	main@prevSodaLoad+1,timePassed@start+1
  4068  00F722  EC5F  F06D         	call	_timePassed	;wreg free
  4069  00F726  BE08               	btfsc	?_timePassed+1,7,c
  4070  00F728  EFC4  F072         	goto	l3907
  4071  00F72C  5008               	movf	?_timePassed+1,w,c
  4072  00F72E  E105               	bnz	u4350
  4073  00F730  0E03               	movlw	3
  4074  00F732  5C07               	subwf	?_timePassed,w,c
  4075  00F734  A0D8               	btfss	status,0,c
  4076  00F736  EFC4  F072         	goto	l3907
  4077  00F73A                     u4350:
  4078  00F73A  D326               	goto	u4660
  4079  00F73C                     l4559:
  4080                           
  4081                           ;main.c: 565: else{
  4082                           ;main.c: 567: S3mode = 3;
  4083  00F73C  0E00               	movlw	0
  4084  00F73E  6E6F               	movwf	main@S3mode+1,c
  4085  00F740  0E03               	movlw	3
  4086  00F742  6E6E               	movwf	main@S3mode,c
  4087                           
  4088                           ;main.c: 568: updateS3(S3mode);
  4089  00F744  C06E  F001         	movff	main@S3mode,updateS3@mode
  4090  00F748  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4091  00F74C  ECCC  F06E         	call	_updateS3	;wreg free
  4092  00F750  D32B               	goto	l4801
  4093  00F752                     l4565:
  4094                           
  4095                           ;main.c: 575: else{
  4096                           ;main.c: 578: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4097  00F752  0E01               	movlw	1
  4098  00F754  ECF1  F06A         	call	_lcdInst
  4099  00F758  0E34               	movlw	52
  4100  00F75A  6E35               	movwf	??_main& (0+255),c
  4101  00F75C  0EF2               	movlw	242
  4102  00F75E                     u4987:
  4103  00F75E  2EE8               	decfsz	wreg,f,c
  4104  00F760  D7FE               	bra	u4987
  4105  00F762  2E35               	decfsz	??_main& (0+255),f,c
  4106  00F764  D7FC               	bra	u4987
  4107                           
  4108                           ;main.c: 579: printf("soup can test");
  4109  00F766  0E0C               	movlw	low STR_24
  4110  00F768  6E17               	movwf	printf@f,c
  4111  00F76A  0EFF               	movlw	high STR_24
  4112  00F76C  6E18               	movwf	printf@f+1,c
  4113  00F76E  EC71  F070         	call	_printf	;wreg free
  4114                           
  4115                           ;main.c: 580: lcdInst(0b11000000);;
  4116  00F772  0EC0               	movlw	192
  4117  00F774  ECF1  F06A         	call	_lcdInst
  4118                           
  4119                           ;main.c: 581: printf("%d  %d", S1mode, soupSort);
  4120  00F778  0EF8               	movlw	low STR_25
  4121  00F77A  6E17               	movwf	printf@f,c
  4122  00F77C  0EFF               	movlw	high STR_25
  4123  00F77E  6E18               	movwf	printf@f+1,c
  4124  00F780  C06A  F019         	movff	main@S1mode,?_printf+2
  4125  00F784  C06B  F01A         	movff	main@S1mode+1,?_printf+3
  4126  00F788  C060  F01B         	movff	main@soupSort,?_printf+4
  4127  00F78C  C061  F01C         	movff	main@soupSort+1,?_printf+5
  4128  00F790  EC71  F070         	call	_printf	;wreg free
  4129                           
  4130                           ;main.c: 583: if(soupLoad){
  4131  00F794  5054               	movf	main@soupLoad,w,c
  4132  00F796  1055               	iorwf	main@soupLoad+1,w,c
  4133  00F798  B4D8               	btfsc	status,2,c
  4134  00F79A  D060               	goto	l4585
  4135                           
  4136                           ;main.c: 584: prevSoupLoad = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  4137  00F79C  C072  F035         	movff	_time+2,??_main
  4138  00F7A0  0E0F               	movlw	15
  4139  00F7A2  1635               	andwf	??_main,f,c
  4140  00F7A4  5035               	movf	??_main,w,c
  4141  00F7A6  6E01               	movwf	___wmul@multiplier,c
  4142  00F7A8  6A02               	clrf	___wmul@multiplier+1,c
  4143  00F7AA  0E0E               	movlw	14
  4144  00F7AC  6E04               	movwf	___wmul@multiplicand+1,c
  4145  00F7AE  0E10               	movlw	16
  4146  00F7B0  6E03               	movwf	___wmul@multiplicand,c
  4147  00F7B2  EC4C  F06B         	call	___wmul	;wreg free
  4148  00F7B6  C070  F036         	movff	_time,??_main+1
  4149  00F7BA  3A36               	swapf	??_main+1,f,c
  4150  00F7BC  0E0F               	movlw	15
  4151  00F7BE  1636               	andwf	??_main+1,f,c
  4152  00F7C0  0E0F               	movlw	15
  4153  00F7C2  1636               	andwf	??_main+1,f,c
  4154  00F7C4  5036               	movf	??_main+1,w,c
  4155  00F7C6  0D0A               	mullw	10
  4156  00F7C8  5070               	movf	_time,w,c
  4157  00F7CA  0B0F               	andlw	15
  4158  00F7CC  6E37               	movwf	(??_main+2)& (0+255),c
  4159  00F7CE  6A38               	clrf	(??_main+3)& (0+255),c
  4160  00F7D0  50F3               	movf	prodl,w,c
  4161  00F7D2  2637               	addwf	??_main+2,f,c
  4162  00F7D4  50F4               	movf	prodh,w,c
  4163  00F7D6  2238               	addwfc	??_main+3,f,c
  4164  00F7D8  C071  F039         	movff	_time+1,??_main+4
  4165  00F7DC  0E0F               	movlw	15
  4166  00F7DE  1639               	andwf	??_main+4,f,c
  4167  00F7E0  5039               	movf	??_main+4,w,c
  4168  00F7E2  0D3C               	mullw	60
  4169  00F7E4  50F3               	movf	prodl,w,c
  4170  00F7E6  2637               	addwf	??_main+2,f,c
  4171  00F7E8  50F4               	movf	prodh,w,c
  4172  00F7EA  2238               	addwfc	??_main+3,f,c
  4173  00F7EC  C071  F03A         	movff	_time+1,??_main+5
  4174  00F7F0  3A3A               	swapf	??_main+5,f,c
  4175  00F7F2  0E0F               	movlw	15
  4176  00F7F4  163A               	andwf	??_main+5,f,c
  4177  00F7F6  0E0F               	movlw	15
  4178  00F7F8  163A               	andwf	??_main+5,f,c
  4179  00F7FA  503A               	movf	??_main+5,w,c
  4180  00F7FC  0D0A               	mullw	10
  4181  00F7FE  50F3               	movf	prodl,w,c
  4182  00F800  2637               	addwf	??_main+2,f,c
  4183  00F802  50F4               	movf	prodh,w,c
  4184  00F804  2238               	addwfc	??_main+3,f,c
  4185  00F806  5001               	movf	?___wmul,w,c
  4186  00F808  2637               	addwf	??_main+2,f,c
  4187  00F80A  5002               	movf	?___wmul+1,w,c
  4188  00F80C  2238               	addwfc	??_main+3,f,c
  4189  00F80E  C072  F03B         	movff	_time+2,??_main+6
  4190  00F812  3A3B               	swapf	??_main+6,f,c
  4191  00F814  0E0F               	movlw	15
  4192  00F816  163B               	andwf	??_main+6,f,c
  4193  00F818  0E0F               	movlw	15
  4194  00F81A  163B               	andwf	??_main+6,f,c
  4195  00F81C  503B               	movf	??_main+6,w,c
  4196  00F81E  0D0A               	mullw	10
  4197  00F820  50F3               	movf	prodl,w,c
  4198  00F822  2437               	addwf	??_main+2,w,c
  4199  00F824  6E4E               	movwf	main@prevSoupLoad,c
  4200  00F826  50F4               	movf	prodh,w,c
  4201  00F828  2038               	addwfc	??_main+3,w,c
  4202  00F82A  6E4F               	movwf	main@prevSoupLoad+1,c
  4203                           
  4204                           ;main.c: 585: if (!soupSort){
  4205  00F82C  5060               	movf	main@soupSort,w,c
  4206  00F82E  1061               	iorwf	main@soupSort+1,w,c
  4207  00F830  A4D8               	btfss	status,2,c
  4208  00F832  D014               	goto	l4585
  4209                           
  4210                           ;main.c: 586: soupSort = 1;
  4211  00F834  0E00               	movlw	0
  4212  00F836  6E61               	movwf	main@soupSort+1,c
  4213  00F838  0E01               	movlw	1
  4214  00F83A  6E60               	movwf	main@soupSort,c
  4215                           
  4216                           ;main.c: 588: S1steps = 0;
  4217  00F83C  0E00               	movlw	0
  4218  00F83E  6E6D               	movwf	main@S1steps+1,c
  4219  00F840  0E00               	movlw	0
  4220  00F842  6E6C               	movwf	main@S1steps,c
  4221                           
  4222                           ;main.c: 589: _delay((unsigned long)((150)*(32000000/4000.0)));
  4223  00F844  0E07               	movlw	7
  4224  00F846  6E36               	movwf	(??_main+1)& (0+255),c
  4225  00F848  0E17               	movlw	23
  4226  00F84A  6E35               	movwf	??_main& (0+255),c
  4227  00F84C  0E6A               	movlw	106
  4228  00F84E                     u4997:
  4229  00F84E  2EE8               	decfsz	wreg,f,c
  4230  00F850  D7FE               	bra	u4997
  4231  00F852  2E35               	decfsz	??_main& (0+255),f,c
  4232  00F854  D7FC               	bra	u4997
  4233  00F856  2E36               	decfsz	(??_main+1)& (0+255),f,c
  4234  00F858  D7FA               	bra	u4997
  4235  00F85A  D000               	nop2	
  4236  00F85C                     l4585:
  4237                           
  4238                           ;main.c: 590: }
  4239                           ;main.c: 591: }
  4240                           ;main.c: 593: if (soupSort){
  4241  00F85C  5060               	movf	main@soupSort,w,c
  4242  00F85E  1061               	iorwf	main@soupSort+1,w,c
  4243  00F860  B4D8               	btfsc	status,2,c
  4244  00F862  D115               	goto	l4681
  4245                           
  4246                           ;main.c: 595: S1steps ++;
  4247  00F864  4A6C               	infsnz	main@S1steps,f,c
  4248  00F866  2A6D               	incf	main@S1steps+1,f,c
  4249                           
  4250                           ;main.c: 597: if (S1steps < 20){
  4251  00F868  BE6D               	btfsc	main@S1steps+1,7,c
  4252  00F86A  D006               	goto	l4591
  4253  00F86C  506D               	movf	main@S1steps+1,w,c
  4254  00F86E  E139               	bnz	l4611
  4255  00F870  0E14               	movlw	20
  4256  00F872  5C6C               	subwf	main@S1steps,w,c
  4257  00F874  B0D8               	btfsc	status,0,c
  4258  00F876  D035               	goto	l4611
  4259  00F878                     l4591:
  4260                           
  4261                           ;main.c: 598: S1mode = 3;
  4262  00F878  0E00               	movlw	0
  4263  00F87A  6E6B               	movwf	main@S1mode+1,c
  4264  00F87C  0E03               	movlw	3
  4265  00F87E  6E6A               	movwf	main@S1mode,c
  4266                           
  4267                           ;main.c: 599: updateS1(S1mode);
  4268  00F880  C06A  F032         	movff	main@S1mode,updateS1@mode
  4269  00F884  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  4270  00F888  EC84  F06F         	call	_updateS1	;wreg free
  4271                           
  4272                           ;main.c: 602: readADC(4);
  4273  00F88C  0E04               	movlw	4
  4274  00F88E  EC3A  F06B         	call	_readADC
  4275                           
  4276                           ;main.c: 603: if(ADRESL<=0x1){labelState = 1;}
  4277  00F892  0E02               	movlw	2
  4278  00F894  60C3               	cpfslt	4035,c	;volatile
  4279  00F896  D004               	goto	l4601
  4280  00F898  0E00               	movlw	0
  4281  00F89A  6E5F               	movwf	main@labelState+1,c
  4282  00F89C  0E01               	movlw	1
  4283  00F89E  6E5E               	movwf	main@labelState,c
  4284  00F8A0                     l4601:
  4285                           
  4286                           ;main.c: 604: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4287  00F8A0  0E01               	movlw	1
  4288  00F8A2  ECF1  F06A         	call	_lcdInst
  4289  00F8A6  0E34               	movlw	52
  4290  00F8A8  6E35               	movwf	??_main& (0+255),c
  4291  00F8AA  0EF2               	movlw	242
  4292  00F8AC                     u5007:
  4293  00F8AC  2EE8               	decfsz	wreg,f,c
  4294  00F8AE  D7FE               	bra	u5007
  4295  00F8B0  2E35               	decfsz	??_main& (0+255),f,c
  4296  00F8B2  D7FC               	bra	u5007
  4297                           
  4298                           ;main.c: 605: printf("value: %x", ADRESL);
  4299  00F8B4  0ECD               	movlw	low STR_26
  4300  00F8B6  6E17               	movwf	printf@f,c
  4301  00F8B8  0EFF               	movlw	high STR_26
  4302  00F8BA  6E18               	movwf	printf@f+1,c
  4303  00F8BC  CFC3 F019          	movff	4035,?_printf+2	;volatile
  4304  00F8C0  6A1A               	clrf	?_printf+3,c
  4305  00F8C2  EC71  F070         	call	_printf	;wreg free
  4306                           
  4307                           ;main.c: 606: lcdInst(0b11000000);;
  4308  00F8C6  0EC0               	movlw	192
  4309  00F8C8  ECF1  F06A         	call	_lcdInst
  4310                           
  4311                           ;main.c: 607: printf("testing %d", S1steps);
  4312  00F8CC  0EAC               	movlw	low STR_27
  4313  00F8CE  6E17               	movwf	printf@f,c
  4314  00F8D0  0EFF               	movlw	high STR_27
  4315  00F8D2  6E18               	movwf	printf@f+1,c
  4316  00F8D4  C06C  F019         	movff	main@S1steps,?_printf+2
  4317  00F8D8  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  4318  00F8DC  EC71  F070         	call	_printf	;wreg free
  4319                           
  4320                           ;main.c: 608: }
  4321  00F8E0  D0E0               	goto	l4685
  4322  00F8E2                     l4611:
  4323                           
  4324                           ;main.c: 609: else if (labelState == 1){
  4325  00F8E2  045E               	decf	main@labelState,w,c
  4326  00F8E4  105F               	iorwf	main@labelState+1,w,c
  4327  00F8E6  A4D8               	btfss	status,2,c
  4328  00F8E8  D04D               	goto	l4639
  4329                           
  4330                           ;main.c: 616: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4331  00F8EA  0E01               	movlw	1
  4332  00F8EC  ECF1  F06A         	call	_lcdInst
  4333  00F8F0  0E34               	movlw	52
  4334  00F8F2  6E35               	movwf	??_main& (0+255),c
  4335  00F8F4  0EF2               	movlw	242
  4336  00F8F6                     u5017:
  4337  00F8F6  2EE8               	decfsz	wreg,f,c
  4338  00F8F8  D7FE               	bra	u5017
  4339  00F8FA  2E35               	decfsz	??_main& (0+255),f,c
  4340  00F8FC  D7FC               	bra	u5017
  4341                           
  4342                           ;main.c: 617: printf("no label");
  4343  00F8FE  0ED7               	movlw	low STR_28
  4344  00F900  6E17               	movwf	printf@f,c
  4345  00F902  0EFF               	movlw	high STR_28
  4346  00F904  6E18               	movwf	printf@f+1,c
  4347  00F906  EC71  F070         	call	_printf	;wreg free
  4348                           
  4349                           ;main.c: 618: lcdInst(0b11000000);;
  4350  00F90A  0EC0               	movlw	192
  4351  00F90C  ECF1  F06A         	call	_lcdInst
  4352                           
  4353                           ;main.c: 619: if(S1steps < (20+30)){
  4354  00F910  BE6D               	btfsc	main@S1steps+1,7,c
  4355  00F912  D006               	goto	l4623
  4356  00F914  506D               	movf	main@S1steps+1,w,c
  4357  00F916  E119               	bnz	l4629
  4358  00F918  0E32               	movlw	50
  4359  00F91A  5C6C               	subwf	main@S1steps,w,c
  4360  00F91C  B0D8               	btfsc	status,0,c
  4361  00F91E  D015               	goto	l4629
  4362  00F920                     l4623:
  4363                           
  4364                           ;main.c: 620: S1mode = 1;
  4365  00F920  0E00               	movlw	0
  4366  00F922  6E6B               	movwf	main@S1mode+1,c
  4367  00F924  0E01               	movlw	1
  4368  00F926  6E6A               	movwf	main@S1mode,c
  4369                           
  4370                           ;main.c: 621: updateS1(S1mode);
  4371  00F928  C06A  F032         	movff	main@S1mode,updateS1@mode
  4372  00F92C  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  4373  00F930  EC84  F06F         	call	_updateS1	;wreg free
  4374                           
  4375                           ;main.c: 622: printf("sorting %d", S1steps);
  4376  00F934  0EA1               	movlw	low STR_29
  4377  00F936  6E17               	movwf	printf@f,c
  4378  00F938  0EFF               	movlw	high STR_29
  4379  00F93A  6E18               	movwf	printf@f+1,c
  4380  00F93C  C06C  F019         	movff	main@S1steps,?_printf+2
  4381  00F940  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  4382  00F944  EC71  F070         	call	_printf	;wreg free
  4383                           
  4384                           ;main.c: 623: }
  4385  00F948  D0AC               	goto	l4685
  4386  00F94A                     l4629:
  4387                           
  4388                           ;main.c: 624: else if(S1steps < (20+30+29)){
  4389  00F94A  BE6D               	btfsc	main@S1steps+1,7,c
  4390  00F94C  D006               	goto	l4631
  4391  00F94E  506D               	movf	main@S1steps+1,w,c
  4392  00F950  E16A               	bnz	l4665
  4393  00F952  0E4F               	movlw	79
  4394  00F954  5C6C               	subwf	main@S1steps,w,c
  4395  00F956  B0D8               	btfsc	status,0,c
  4396  00F958  D066               	goto	l4665
  4397  00F95A                     l4631:
  4398                           
  4399                           ;main.c: 626: S1mode = 2;
  4400  00F95A  0E00               	movlw	0
  4401  00F95C  6E6B               	movwf	main@S1mode+1,c
  4402  00F95E  0E02               	movlw	2
  4403  00F960  6E6A               	movwf	main@S1mode,c
  4404                           
  4405                           ;main.c: 627: updateS1(S1mode);
  4406  00F962  C06A  F032         	movff	main@S1mode,updateS1@mode
  4407  00F966  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  4408  00F96A  EC84  F06F         	call	_updateS1	;wreg free
  4409                           
  4410                           ;main.c: 628: printf("returning %d", S1steps);
  4411  00F96E  0E34               	movlw	low STR_30
  4412  00F970  6E17               	movwf	printf@f,c
  4413  00F972  0EFF               	movlw	high STR_30
  4414  00F974  6E18               	movwf	printf@f+1,c
  4415  00F976  C06C  F019         	movff	main@S1steps,?_printf+2
  4416  00F97A  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  4417  00F97E  EC71  F070         	call	_printf	;wreg free
  4418                           
  4419                           ;main.c: 629: }
  4420  00F982  D08F               	goto	l4685
  4421  00F984                     l4639:
  4422                           
  4423                           ;main.c: 632: else if(labelState == 0){
  4424  00F984  505E               	movf	main@labelState,w,c
  4425  00F986  105F               	iorwf	main@labelState+1,w,c
  4426  00F988  A4D8               	btfss	status,2,c
  4427  00F98A  D052               	goto	l4667
  4428                           
  4429                           ;main.c: 633: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4430  00F98C  0E01               	movlw	1
  4431  00F98E  ECF1  F06A         	call	_lcdInst
  4432  00F992  0E34               	movlw	52
  4433  00F994  6E35               	movwf	??_main& (0+255),c
  4434  00F996  0EF2               	movlw	242
  4435  00F998                     u5027:
  4436  00F998  2EE8               	decfsz	wreg,f,c
  4437  00F99A  D7FE               	bra	u5027
  4438  00F99C  2E35               	decfsz	??_main& (0+255),f,c
  4439  00F99E  D7FC               	bra	u5027
  4440                           
  4441                           ;main.c: 634: printf("label");
  4442  00F9A0  0EF8               	movlw	low (STR_18+8)
  4443  00F9A2  6E17               	movwf	printf@f,c
  4444  00F9A4  0EFE               	movlw	high (STR_18+8)
  4445  00F9A6  6E18               	movwf	printf@f+1,c
  4446  00F9A8  EC71  F070         	call	_printf	;wreg free
  4447                           
  4448                           ;main.c: 635: lcdInst(0b11000000);;
  4449  00F9AC  0EC0               	movlw	192
  4450  00F9AE  ECF1  F06A         	call	_lcdInst
  4451                           
  4452                           ;main.c: 636: if(S1steps < (20+26)){
  4453  00F9B2  BE6D               	btfsc	main@S1steps+1,7,c
  4454  00F9B4  D006               	goto	l4651
  4455  00F9B6  506D               	movf	main@S1steps+1,w,c
  4456  00F9B8  E119               	bnz	l4657
  4457  00F9BA  0E2E               	movlw	46
  4458  00F9BC  5C6C               	subwf	main@S1steps,w,c
  4459  00F9BE  B0D8               	btfsc	status,0,c
  4460  00F9C0  D015               	goto	l4657
  4461  00F9C2                     l4651:
  4462                           
  4463                           ;main.c: 638: S1mode = 2;
  4464  00F9C2  0E00               	movlw	0
  4465  00F9C4  6E6B               	movwf	main@S1mode+1,c
  4466  00F9C6  0E02               	movlw	2
  4467  00F9C8  6E6A               	movwf	main@S1mode,c
  4468                           
  4469                           ;main.c: 639: updateS1(S1mode);
  4470  00F9CA  C06A  F032         	movff	main@S1mode,updateS1@mode
  4471  00F9CE  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  4472  00F9D2  EC84  F06F         	call	_updateS1	;wreg free
  4473                           
  4474                           ;main.c: 640: printf("sorting %d", S1steps);
  4475  00F9D6  0EA1               	movlw	low STR_29
  4476  00F9D8  6E17               	movwf	printf@f,c
  4477  00F9DA  0EFF               	movlw	high STR_29
  4478  00F9DC  6E18               	movwf	printf@f+1,c
  4479  00F9DE  C06C  F019         	movff	main@S1steps,?_printf+2
  4480  00F9E2  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  4481  00F9E6  EC71  F070         	call	_printf	;wreg free
  4482                           
  4483                           ;main.c: 641: }
  4484  00F9EA  D05B               	goto	l4685
  4485  00F9EC                     l4657:
  4486                           
  4487                           ;main.c: 642: else if(S1steps < (20+26+26)){
  4488  00F9EC  BE6D               	btfsc	main@S1steps+1,7,c
  4489  00F9EE  D006               	goto	l4659
  4490  00F9F0  506D               	movf	main@S1steps+1,w,c
  4491  00F9F2  E119               	bnz	l4665
  4492  00F9F4  0E48               	movlw	72
  4493  00F9F6  5C6C               	subwf	main@S1steps,w,c
  4494  00F9F8  B0D8               	btfsc	status,0,c
  4495  00F9FA  D015               	goto	l4665
  4496  00F9FC                     l4659:
  4497                           
  4498                           ;main.c: 644: S1mode = 1;
  4499  00F9FC  0E00               	movlw	0
  4500  00F9FE  6E6B               	movwf	main@S1mode+1,c
  4501  00FA00  0E01               	movlw	1
  4502  00FA02  6E6A               	movwf	main@S1mode,c
  4503                           
  4504                           ;main.c: 645: updateS1(S1mode);
  4505  00FA04  C06A  F032         	movff	main@S1mode,updateS1@mode
  4506  00FA08  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  4507  00FA0C  EC84  F06F         	call	_updateS1	;wreg free
  4508                           
  4509                           ;main.c: 646: printf("returning %d", S1steps);
  4510  00FA10  0E34               	movlw	low STR_30
  4511  00FA12  6E17               	movwf	printf@f,c
  4512  00FA14  0EFF               	movlw	high STR_30
  4513  00FA16  6E18               	movwf	printf@f+1,c
  4514  00FA18  C06C  F019         	movff	main@S1steps,?_printf+2
  4515  00FA1C  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  4516  00FA20  EC71  F070         	call	_printf	;wreg free
  4517                           
  4518                           ;main.c: 647: }
  4519  00FA24  D03E               	goto	l4685
  4520  00FA26                     l4665:
  4521                           
  4522                           ;main.c: 648: else{labelState = 100;}
  4523  00FA26  0E00               	movlw	0
  4524  00FA28  6E5F               	movwf	main@labelState+1,c
  4525  00FA2A  0E64               	movlw	100
  4526  00FA2C  6E5E               	movwf	main@labelState,c
  4527                           
  4528                           ;main.c: 649: }
  4529  00FA2E  D039               	goto	l4685
  4530  00FA30                     l4667:
  4531                           
  4532                           ;main.c: 650: else{
  4533                           ;main.c: 651: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4534  00FA30  0E01               	movlw	1
  4535  00FA32  ECF1  F06A         	call	_lcdInst
  4536  00FA36  0E34               	movlw	52
  4537  00FA38  6E35               	movwf	??_main& (0+255),c
  4538  00FA3A  0EF2               	movlw	242
  4539  00FA3C                     u5037:
  4540  00FA3C  2EE8               	decfsz	wreg,f,c
  4541  00FA3E  D7FE               	bra	u5037
  4542  00FA40  2E35               	decfsz	??_main& (0+255),f,c
  4543  00FA42  D7FC               	bra	u5037
  4544                           
  4545                           ;main.c: 652: printf("finished %d", S1steps);
  4546  00FA44  0E7D               	movlw	low STR_34
  4547  00FA46  6E17               	movwf	printf@f,c
  4548  00FA48  0EFF               	movlw	high STR_34
  4549  00FA4A  6E18               	movwf	printf@f+1,c
  4550  00FA4C  C06C  F019         	movff	main@S1steps,?_printf+2
  4551  00FA50  C06D  F01A         	movff	main@S1steps+1,?_printf+3
  4552  00FA54  EC71  F070         	call	_printf	;wreg free
  4553                           
  4554                           ;main.c: 654: S1steps = 0;
  4555  00FA58  0E00               	movlw	0
  4556  00FA5A  6E6D               	movwf	main@S1steps+1,c
  4557  00FA5C  0E00               	movlw	0
  4558  00FA5E  6E6C               	movwf	main@S1steps,c
  4559                           
  4560                           ;main.c: 655: labelState = 0;
  4561  00FA60  0E00               	movlw	0
  4562  00FA62  6E5F               	movwf	main@labelState+1,c
  4563  00FA64  0E00               	movlw	0
  4564  00FA66  6E5E               	movwf	main@labelState,c
  4565                           
  4566                           ;main.c: 656: if (timePassed(prevSoupLoad) > 2) {soupSort = 0;}
  4567  00FA68  C04E  F007         	movff	main@prevSoupLoad,timePassed@start
  4568  00FA6C  C04F  F008         	movff	main@prevSoupLoad+1,timePassed@start+1
  4569  00FA70  EC5F  F06D         	call	_timePassed	;wreg free
  4570  00FA74  BE08               	btfsc	?_timePassed+1,7,c
  4571  00FA76  D015               	goto	l4685
  4572  00FA78  5008               	movf	?_timePassed+1,w,c
  4573  00FA7A  E104               	bnz	u4470
  4574  00FA7C  0E03               	movlw	3
  4575  00FA7E  5C07               	subwf	?_timePassed,w,c
  4576  00FA80  A0D8               	btfss	status,0,c
  4577  00FA82  D00F               	goto	l4685
  4578  00FA84                     u4470:
  4579  00FA84  0E00               	movlw	0
  4580  00FA86  6E61               	movwf	main@soupSort+1,c
  4581  00FA88  0E00               	movlw	0
  4582  00FA8A  6E60               	movwf	main@soupSort,c
  4583                           
  4584                           ;main.c: 657: }
  4585                           ;main.c: 658: }
  4586  00FA8C  D00A               	goto	l4685
  4587  00FA8E                     l4681:
  4588                           
  4589                           ;main.c: 659: else{
  4590                           ;main.c: 661: S1mode = 3;
  4591  00FA8E  0E00               	movlw	0
  4592  00FA90  6E6B               	movwf	main@S1mode+1,c
  4593  00FA92  0E03               	movlw	3
  4594  00FA94  6E6A               	movwf	main@S1mode,c
  4595                           
  4596                           ;main.c: 662: updateS1(S1mode);
  4597  00FA96  C06A  F032         	movff	main@S1mode,updateS1@mode
  4598  00FA9A  C06B  F033         	movff	main@S1mode+1,updateS1@mode+1
  4599  00FA9E  EC84  F06F         	call	_updateS1	;wreg free
  4600  00FAA2                     l4685:
  4601                           
  4602                           ;main.c: 663: }
  4603                           ;main.c: 667: readADC(0);
  4604  00FAA2  0E00               	movlw	0
  4605  00FAA4  EC3A  F06B         	call	_readADC
  4606                           
  4607                           ;main.c: 668: if(ADRES >= 0x3b5){
  4608  00FAA8  0EB5               	movlw	181
  4609  00FAAA  5CC3               	subwf	4035,w,c	;volatile
  4610  00FAAC  0E03               	movlw	3
  4611  00FAAE  58C4               	subwfb	4036,w,c	;volatile
  4612  00FAB0  A0D8               	btfss	status,0,c
  4613  00FAB2  D06E               	goto	l4703
  4614                           
  4615                           ;main.c: 669: prevSodaLoad = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  4616  00FAB4  C072  F035         	movff	_time+2,??_main
  4617  00FAB8  0E0F               	movlw	15
  4618  00FABA  1635               	andwf	??_main,f,c
  4619  00FABC  5035               	movf	??_main,w,c
  4620  00FABE  6E01               	movwf	___wmul@multiplier,c
  4621  00FAC0  6A02               	clrf	___wmul@multiplier+1,c
  4622  00FAC2  0E0E               	movlw	14
  4623  00FAC4  6E04               	movwf	___wmul@multiplicand+1,c
  4624  00FAC6  0E10               	movlw	16
  4625  00FAC8  6E03               	movwf	___wmul@multiplicand,c
  4626  00FACA  EC4C  F06B         	call	___wmul	;wreg free
  4627  00FACE  C070  F036         	movff	_time,??_main+1
  4628  00FAD2  3A36               	swapf	??_main+1,f,c
  4629  00FAD4  0E0F               	movlw	15
  4630  00FAD6  1636               	andwf	??_main+1,f,c
  4631  00FAD8  0E0F               	movlw	15
  4632  00FADA  1636               	andwf	??_main+1,f,c
  4633  00FADC  5036               	movf	??_main+1,w,c
  4634  00FADE  0D0A               	mullw	10
  4635  00FAE0  5070               	movf	_time,w,c
  4636  00FAE2  0B0F               	andlw	15
  4637  00FAE4  6E37               	movwf	(??_main+2)& (0+255),c
  4638  00FAE6  6A38               	clrf	(??_main+3)& (0+255),c
  4639  00FAE8  50F3               	movf	prodl,w,c
  4640  00FAEA  2637               	addwf	??_main+2,f,c
  4641  00FAEC  50F4               	movf	prodh,w,c
  4642  00FAEE  2238               	addwfc	??_main+3,f,c
  4643  00FAF0  C071  F039         	movff	_time+1,??_main+4
  4644  00FAF4  0E0F               	movlw	15
  4645  00FAF6  1639               	andwf	??_main+4,f,c
  4646  00FAF8  5039               	movf	??_main+4,w,c
  4647  00FAFA  0D3C               	mullw	60
  4648  00FAFC  50F3               	movf	prodl,w,c
  4649  00FAFE  2637               	addwf	??_main+2,f,c
  4650  00FB00  50F4               	movf	prodh,w,c
  4651  00FB02  2238               	addwfc	??_main+3,f,c
  4652  00FB04  C071  F03A         	movff	_time+1,??_main+5
  4653  00FB08  3A3A               	swapf	??_main+5,f,c
  4654  00FB0A  0E0F               	movlw	15
  4655  00FB0C  163A               	andwf	??_main+5,f,c
  4656  00FB0E  0E0F               	movlw	15
  4657  00FB10  163A               	andwf	??_main+5,f,c
  4658  00FB12  503A               	movf	??_main+5,w,c
  4659  00FB14  0D0A               	mullw	10
  4660  00FB16  50F3               	movf	prodl,w,c
  4661  00FB18  2637               	addwf	??_main+2,f,c
  4662  00FB1A  50F4               	movf	prodh,w,c
  4663  00FB1C  2238               	addwfc	??_main+3,f,c
  4664  00FB1E  5001               	movf	?___wmul,w,c
  4665  00FB20  2637               	addwf	??_main+2,f,c
  4666  00FB22  5002               	movf	?___wmul+1,w,c
  4667  00FB24  2238               	addwfc	??_main+3,f,c
  4668  00FB26  C072  F03B         	movff	_time+2,??_main+6
  4669  00FB2A  3A3B               	swapf	??_main+6,f,c
  4670  00FB2C  0E0F               	movlw	15
  4671  00FB2E  163B               	andwf	??_main+6,f,c
  4672  00FB30  0E0F               	movlw	15
  4673  00FB32  163B               	andwf	??_main+6,f,c
  4674  00FB34  503B               	movf	??_main+6,w,c
  4675  00FB36  0D0A               	mullw	10
  4676  00FB38  50F3               	movf	prodl,w,c
  4677  00FB3A  2437               	addwf	??_main+2,w,c
  4678  00FB3C  6E56               	movwf	main@prevSodaLoad,c
  4679  00FB3E  50F4               	movf	prodh,w,c
  4680  00FB40  2038               	addwfc	??_main+3,w,c
  4681  00FB42  6E57               	movwf	main@prevSodaLoad+1,c
  4682                           
  4683                           ;main.c: 670: if (!sodaSort && (t3== 1 || t3==8)){
  4684  00FB44  5062               	movf	main@sodaSort,w,c
  4685  00FB46  1063               	iorwf	main@sodaSort+1,w,c
  4686  00FB48  A4D8               	btfss	status,2,c
  4687  00FB4A  D011               	goto	l4699
  4688  00FB4C  047D               	decf	_t3,w,c
  4689  00FB4E  107E               	iorwf	_t3+1,w,c
  4690  00FB50  B4D8               	btfsc	status,2,c
  4691  00FB52  D005               	goto	l4697
  4692  00FB54  0E08               	movlw	8
  4693  00FB56  187D               	xorwf	_t3,w,c
  4694  00FB58  107E               	iorwf	_t3+1,w,c
  4695  00FB5A  A4D8               	btfss	status,2,c
  4696  00FB5C  D008               	goto	l4699
  4697  00FB5E                     l4697:
  4698                           
  4699                           ;main.c: 671: sodaSort = 1;
  4700  00FB5E  0E00               	movlw	0
  4701  00FB60  6E63               	movwf	main@sodaSort+1,c
  4702  00FB62  0E01               	movlw	1
  4703  00FB64  6E62               	movwf	main@sodaSort,c
  4704                           
  4705                           ;main.c: 674: S3steps = 0;
  4706  00FB66  0E00               	movlw	0
  4707  00FB68  6E69               	movwf	main@S3steps+1,c
  4708  00FB6A  0E00               	movlw	0
  4709  00FB6C  6E68               	movwf	main@S3steps,c
  4710  00FB6E                     l4699:
  4711                           
  4712                           ;main.c: 676: }
  4713                           ;main.c: 677: if(timePassed(startTime) < 1){sodaSort = 0;}
  4714  00FB6E  C058  F007         	movff	main@startTime,timePassed@start
  4715  00FB72  C059  F008         	movff	main@startTime+1,timePassed@start+1
  4716  00FB76  EC5F  F06D         	call	_timePassed	;wreg free
  4717  00FB7A  BE08               	btfsc	?_timePassed+1,7,c
  4718  00FB7C  D005               	goto	l4701
  4719  00FB7E  5008               	movf	?_timePassed+1,w,c
  4720  00FB80  E107               	bnz	l4703
  4721  00FB82  0407               	decf	?_timePassed,w,c
  4722  00FB84  B0D8               	btfsc	status,0,c
  4723  00FB86  D004               	goto	l4703
  4724  00FB88                     l4701:
  4725  00FB88  0E00               	movlw	0
  4726  00FB8A  6E63               	movwf	main@sodaSort+1,c
  4727  00FB8C  0E00               	movlw	0
  4728  00FB8E  6E62               	movwf	main@sodaSort,c
  4729  00FB90                     l4703:
  4730                           
  4731                           ;main.c: 678: }
  4732                           ;main.c: 680: lcdInst(0b11000000);;
  4733  00FB90  0EC0               	movlw	192
  4734  00FB92  ECF1  F06A         	call	_lcdInst
  4735                           
  4736                           ;main.c: 681: printf("%d %x %d %x", sodaSort, ADRES, prevSodaLoad, sodaThresh);
  4737  00FB96  0E95               	movlw	low STR_36
  4738  00FB98  6E17               	movwf	printf@f,c
  4739  00FB9A  0EFF               	movlw	high STR_36
  4740  00FB9C  6E18               	movwf	printf@f+1,c
  4741  00FB9E  C062  F019         	movff	main@sodaSort,?_printf+2
  4742  00FBA2  C063  F01A         	movff	main@sodaSort+1,?_printf+3
  4743  00FBA6  CFC3 F01B          	movff	4035,?_printf+4	;volatile
  4744  00FBAA  CFC4 F01C          	movff	4036,?_printf+5	;volatile
  4745  00FBAE  C056  F01D         	movff	main@prevSodaLoad,?_printf+6
  4746  00FBB2  C057  F01E         	movff	main@prevSodaLoad+1,?_printf+7
  4747  00FBB6  C04C  F01F         	movff	main@sodaThresh,?_printf+8
  4748  00FBBA  C04D  F020         	movff	main@sodaThresh+1,?_printf+9
  4749  00FBBE  EC71  F070         	call	_printf	;wreg free
  4750                           
  4751                           ;main.c: 683: if (sodaSort){
  4752  00FBC2  5062               	movf	main@sodaSort,w,c
  4753  00FBC4  1063               	iorwf	main@sodaSort+1,w,c
  4754  00FBC6  B4D8               	btfsc	status,2,c
  4755  00FBC8  D0E5               	goto	l4797
  4756                           
  4757                           ;main.c: 686: S3steps ++;
  4758  00FBCA  4A68               	infsnz	main@S3steps,f,c
  4759  00FBCC  2A69               	incf	main@S3steps+1,f,c
  4760                           
  4761                           ;main.c: 688: if(S3steps < 24){
  4762  00FBCE  BE69               	btfsc	main@S3steps+1,7,c
  4763  00FBD0  D006               	goto	l4713
  4764  00FBD2  5069               	movf	main@S3steps+1,w,c
  4765  00FBD4  E10F               	bnz	l4719
  4766  00FBD6  0E18               	movlw	24
  4767  00FBD8  5C68               	subwf	main@S3steps,w,c
  4768  00FBDA  B0D8               	btfsc	status,0,c
  4769  00FBDC  D00B               	goto	l4719
  4770  00FBDE                     l4713:
  4771                           
  4772                           ;main.c: 689: S3mode = 3;
  4773  00FBDE  0E00               	movlw	0
  4774  00FBE0  6E6F               	movwf	main@S3mode+1,c
  4775  00FBE2  0E03               	movlw	3
  4776  00FBE4  6E6E               	movwf	main@S3mode,c
  4777                           
  4778                           ;main.c: 690: updateS3(S3mode);
  4779  00FBE6  C06E  F001         	movff	main@S3mode,updateS3@mode
  4780  00FBEA  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4781  00FBEE  ECCC  F06E         	call	_updateS3	;wreg free
  4782  00FBF2  D0DA               	goto	l4801
  4783  00FBF4                     l4719:
  4784                           
  4785                           ;main.c: 693: else if (S3steps < (24+20)){
  4786  00FBF4  BE69               	btfsc	main@S3steps+1,7,c
  4787  00FBF6  D006               	goto	l4721
  4788  00FBF8  5069               	movf	main@S3steps+1,w,c
  4789  00FBFA  E10F               	bnz	l4727
  4790  00FBFC  0E2C               	movlw	44
  4791  00FBFE  5C68               	subwf	main@S3steps,w,c
  4792  00FC00  B0D8               	btfsc	status,0,c
  4793  00FC02  D00B               	goto	l4727
  4794  00FC04                     l4721:
  4795                           
  4796                           ;main.c: 694: S3mode = 1;
  4797  00FC04  0E00               	movlw	0
  4798  00FC06  6E6F               	movwf	main@S3mode+1,c
  4799  00FC08  0E01               	movlw	1
  4800  00FC0A  6E6E               	movwf	main@S3mode,c
  4801                           
  4802                           ;main.c: 695: updateS3(S3mode);
  4803  00FC0C  C06E  F001         	movff	main@S3mode,updateS3@mode
  4804  00FC10  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4805  00FC14  ECCC  F06E         	call	_updateS3	;wreg free
  4806  00FC18  D0C7               	goto	l4801
  4807  00FC1A                     l4727:
  4808                           
  4809                           ;main.c: 701: else if (S3steps < (24+20+8)){
  4810  00FC1A  BE69               	btfsc	main@S3steps+1,7,c
  4811  00FC1C  D006               	goto	l4729
  4812  00FC1E  5069               	movf	main@S3steps+1,w,c
  4813  00FC20  E114               	bnz	l4733
  4814  00FC22  0E34               	movlw	52
  4815  00FC24  5C68               	subwf	main@S3steps,w,c
  4816  00FC26  B0D8               	btfsc	status,0,c
  4817  00FC28  D010               	goto	l4733
  4818  00FC2A                     l4729:
  4819                           
  4820                           ;main.c: 702: S3mode = 4;
  4821  00FC2A  0E00               	movlw	0
  4822  00FC2C  6E6F               	movwf	main@S3mode+1,c
  4823  00FC2E  0E04               	movlw	4
  4824  00FC30  6E6E               	movwf	main@S3mode,c
  4825                           
  4826                           ;main.c: 704: S2mode = 1;
  4827  00FC32  0E00               	movlw	0
  4828  00FC34  6E67               	movwf	main@S2mode+1,c
  4829  00FC36  0E01               	movlw	1
  4830  00FC38  6E66               	movwf	main@S2mode,c
  4831                           
  4832                           ;main.c: 705: updateS2(S2mode);
  4833  00FC3A  C066  F001         	movff	main@S2mode,updateS2@mode
  4834  00FC3E  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  4835  00FC42  EC14  F06E         	call	_updateS2	;wreg free
  4836                           
  4837                           ;main.c: 708: }
  4838  00FC46  EFC4  F072         	goto	l3907
  4839  00FC4A                     l4733:
  4840                           
  4841                           ;main.c: 709: else if (S3steps < (24+20+8+6)){
  4842  00FC4A  BE69               	btfsc	main@S3steps+1,7,c
  4843  00FC4C  D006               	goto	l4735
  4844  00FC4E  5069               	movf	main@S3steps+1,w,c
  4845  00FC50  E117               	bnz	l4743
  4846  00FC52  0E3A               	movlw	58
  4847  00FC54  5C68               	subwf	main@S3steps,w,c
  4848  00FC56  B0D8               	btfsc	status,0,c
  4849  00FC58  D013               	goto	l4743
  4850  00FC5A                     l4735:
  4851                           
  4852                           ;main.c: 710: S2mode = 4;
  4853  00FC5A  0E00               	movlw	0
  4854  00FC5C  6E67               	movwf	main@S2mode+1,c
  4855  00FC5E  0E04               	movlw	4
  4856  00FC60  6E66               	movwf	main@S2mode,c
  4857                           
  4858                           ;main.c: 711: S3mode = 4;
  4859  00FC62  0E00               	movlw	0
  4860  00FC64  6E6F               	movwf	main@S3mode+1,c
  4861  00FC66  0E04               	movlw	4
  4862  00FC68  6E6E               	movwf	main@S3mode,c
  4863                           
  4864                           ;main.c: 712: readADC(3);
  4865  00FC6A  0E03               	movlw	3
  4866  00FC6C  EC3A  F06B         	call	_readADC
  4867  00FC70                     L11:
  4868                           
  4869                           ;main.c: 713: if(ADRESH==0){tabState = 1;}
  4870  00FC70  50C4               	movf	4036,w,c	;volatile
  4871  00FC72  A4D8               	btfss	status,2,c
  4872  00FC74  EFC4  F072         	goto	l3907
  4873  00FC78  0E00               	movlw	0
  4874  00FC7A  6E5D               	movwf	main@tabState+1,c
  4875  00FC7C  0E01               	movlw	1
  4876  00FC7E  D517               	goto	L4
  4877  00FC80                     l4743:
  4878                           
  4879                           ;main.c: 719: else if (S3steps < (24+20+8+6+8)){
  4880  00FC80  BE69               	btfsc	main@S3steps+1,7,c
  4881  00FC82  D006               	goto	l4745
  4882  00FC84  5069               	movf	main@S3steps+1,w,c
  4883  00FC86  E114               	bnz	l4751
  4884  00FC88  0E42               	movlw	66
  4885  00FC8A  5C68               	subwf	main@S3steps,w,c
  4886  00FC8C  B0D8               	btfsc	status,0,c
  4887  00FC8E  D010               	goto	l4751
  4888  00FC90                     l4745:
  4889                           
  4890                           ;main.c: 720: S2mode = 2;
  4891  00FC90  0E00               	movlw	0
  4892  00FC92  6E67               	movwf	main@S2mode+1,c
  4893  00FC94  0E02               	movlw	2
  4894  00FC96  6E66               	movwf	main@S2mode,c
  4895                           
  4896                           ;main.c: 721: updateS2(S2mode);
  4897  00FC98  C066  F001         	movff	main@S2mode,updateS2@mode
  4898  00FC9C  C067  F002         	movff	main@S2mode+1,updateS2@mode+1
  4899  00FCA0  EC14  F06E         	call	_updateS2	;wreg free
  4900  00FCA4                     l4749:
  4901                           
  4902                           ;main.c: 722: S3mode = 4;
  4903  00FCA4  0E00               	movlw	0
  4904  00FCA6  6E6F               	movwf	main@S3mode+1,c
  4905  00FCA8  0E04               	movlw	4
  4906  00FCAA  6E6E               	movwf	main@S3mode,c
  4907                           
  4908                           ;main.c: 726: }
  4909  00FCAC  EFC4  F072         	goto	l3907
  4910  00FCB0                     l4751:
  4911                           
  4912                           ;main.c: 727: else if (tabState == 1){
  4913  00FCB0  045C               	decf	main@tabState,w,c
  4914  00FCB2  105D               	iorwf	main@tabState+1,w,c
  4915  00FCB4  A4D8               	btfss	status,2,c
  4916  00FCB6  D026               	goto	l4771
  4917                           
  4918                           ;main.c: 732: if(S3steps < (24+20+8+6+8+9)){
  4919  00FCB8  BE69               	btfsc	main@S3steps+1,7,c
  4920  00FCBA  D006               	goto	l4755
  4921  00FCBC  5069               	movf	main@S3steps+1,w,c
  4922  00FCBE  E10F               	bnz	l4761
  4923  00FCC0  0E4B               	movlw	75
  4924  00FCC2  5C68               	subwf	main@S3steps,w,c
  4925  00FCC4  B0D8               	btfsc	status,0,c
  4926  00FCC6  D00B               	goto	l4761
  4927  00FCC8                     l4755:
  4928                           
  4929                           ;main.c: 733: S3mode = 1;
  4930  00FCC8  0E00               	movlw	0
  4931  00FCCA  6E6F               	movwf	main@S3mode+1,c
  4932  00FCCC  0E01               	movlw	1
  4933  00FCCE  6E6E               	movwf	main@S3mode,c
  4934                           
  4935                           ;main.c: 734: updateS3(S3mode);
  4936  00FCD0  C06E  F001         	movff	main@S3mode,updateS3@mode
  4937  00FCD4  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4938  00FCD8  ECCC  F06E         	call	_updateS3	;wreg free
  4939  00FCDC  D065               	goto	l4801
  4940  00FCDE                     l4761:
  4941                           
  4942                           ;main.c: 738: else if(S3steps < (24+20+8+6+8+7+(9+22)-2)){
  4943  00FCDE  BE69               	btfsc	main@S3steps+1,7,c
  4944  00FCE0  D006               	goto	l4763
  4945  00FCE2  5069               	movf	main@S3steps+1,w,c
  4946  00FCE4  E139               	bnz	l4789
  4947  00FCE6  0E66               	movlw	102
  4948  00FCE8  5C68               	subwf	main@S3steps,w,c
  4949  00FCEA  B0D8               	btfsc	status,0,c
  4950  00FCEC  D035               	goto	l4789
  4951  00FCEE                     l4763:
  4952                           
  4953                           ;main.c: 739: S3mode = 2;
  4954  00FCEE  0E00               	movlw	0
  4955  00FCF0  6E6F               	movwf	main@S3mode+1,c
  4956  00FCF2  0E02               	movlw	2
  4957  00FCF4  6E6E               	movwf	main@S3mode,c
  4958                           
  4959                           ;main.c: 740: updateS3(S3mode);
  4960  00FCF6  C06E  F001         	movff	main@S3mode,updateS3@mode
  4961  00FCFA  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4962  00FCFE  ECCC  F06E         	call	_updateS3	;wreg free
  4963  00FD02  D052               	goto	l4801
  4964  00FD04                     l4771:
  4965                           
  4966                           ;main.c: 746: else if(tabState == 0){
  4967  00FD04  505C               	movf	main@tabState,w,c
  4968  00FD06  105D               	iorwf	main@tabState+1,w,c
  4969  00FD08  A4D8               	btfss	status,2,c
  4970  00FD0A  D02A               	goto	l4791
  4971                           
  4972                           ;main.c: 750: if(S3steps < (24+20+8+6+8+(22+29))){
  4973  00FD0C  BE69               	btfsc	main@S3steps+1,7,c
  4974  00FD0E  D006               	goto	l4775
  4975  00FD10  5069               	movf	main@S3steps+1,w,c
  4976  00FD12  E10F               	bnz	l4781
  4977  00FD14  0E75               	movlw	117
  4978  00FD16  5C68               	subwf	main@S3steps,w,c
  4979  00FD18  B0D8               	btfsc	status,0,c
  4980  00FD1A  D00B               	goto	l4781
  4981  00FD1C                     l4775:
  4982                           
  4983                           ;main.c: 751: S3mode = 2;
  4984  00FD1C  0E00               	movlw	0
  4985  00FD1E  6E6F               	movwf	main@S3mode+1,c
  4986  00FD20  0E02               	movlw	2
  4987  00FD22  6E6E               	movwf	main@S3mode,c
  4988                           
  4989                           ;main.c: 752: updateS3(S3mode);
  4990  00FD24  C06E  F001         	movff	main@S3mode,updateS3@mode
  4991  00FD28  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  4992  00FD2C  ECCC  F06E         	call	_updateS3	;wreg free
  4993  00FD30  D03B               	goto	l4801
  4994  00FD32                     l4781:
  4995                           
  4996                           ;main.c: 756: else if(S3steps < (24+20+8+6+8+(22+29)+29)){
  4997  00FD32  BE69               	btfsc	main@S3steps+1,7,c
  4998  00FD34  D006               	goto	l4783
  4999  00FD36  5069               	movf	main@S3steps+1,w,c
  5000  00FD38  E10F               	bnz	l4789
  5001  00FD3A  0E92               	movlw	146
  5002  00FD3C  5C68               	subwf	main@S3steps,w,c
  5003  00FD3E  B0D8               	btfsc	status,0,c
  5004  00FD40  D00B               	goto	l4789
  5005  00FD42                     l4783:
  5006                           
  5007                           ;main.c: 757: S3mode = 1;
  5008  00FD42  0E00               	movlw	0
  5009  00FD44  6E6F               	movwf	main@S3mode+1,c
  5010  00FD46  0E01               	movlw	1
  5011  00FD48  6E6E               	movwf	main@S3mode,c
  5012                           
  5013                           ;main.c: 758: updateS3(S3mode);
  5014  00FD4A  C06E  F001         	movff	main@S3mode,updateS3@mode
  5015  00FD4E  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  5016  00FD52  ECCC  F06E         	call	_updateS3	;wreg free
  5017  00FD56  D028               	goto	l4801
  5018  00FD58                     l4789:
  5019                           
  5020                           ;main.c: 762: else{tabState = 100;}
  5021  00FD58  0E00               	movlw	0
  5022  00FD5A  6E5D               	movwf	main@tabState+1,c
  5023  00FD5C  0E64               	movlw	100
  5024  00FD5E  D4A7               	goto	L4
  5025  00FD60                     l4791:
  5026                           
  5027                           ;main.c: 764: else{
  5028                           ;main.c: 768: S3steps = 0;
  5029  00FD60  0E00               	movlw	0
  5030  00FD62  6E69               	movwf	main@S3steps+1,c
  5031  00FD64  0E00               	movlw	0
  5032  00FD66  6E68               	movwf	main@S3steps,c
  5033                           
  5034                           ;main.c: 769: tabState = 0;
  5035  00FD68  0E00               	movlw	0
  5036  00FD6A  6E5D               	movwf	main@tabState+1,c
  5037  00FD6C  0E00               	movlw	0
  5038  00FD6E  6E5C               	movwf	main@tabState,c
  5039                           
  5040                           ;main.c: 770: if (timePassed(prevSodaLoad) > 2) {sodaSort = 0;}
  5041  00FD70  C056  F007         	movff	main@prevSodaLoad,timePassed@start
  5042  00FD74  C057  F008         	movff	main@prevSodaLoad+1,timePassed@start+1
  5043  00FD78  EC5F  F06D         	call	_timePassed	;wreg free
  5044  00FD7C  BE08               	btfsc	?_timePassed+1,7,c
  5045  00FD7E  EFC4  F072         	goto	l3907
  5046  00FD82  5008               	movf	?_timePassed+1,w,c
  5047  00FD84  E101               	bnz	u4660
  5048  00FD86  D4D4               	goto	L5
  5049  00FD88                     u4660:
  5050  00FD88  0E00               	movlw	0
  5051  00FD8A  6E63               	movwf	main@sodaSort+1,c
  5052  00FD8C  0E00               	movlw	0
  5053  00FD8E  6E62               	movwf	main@sodaSort,c
  5054                           
  5055                           ;main.c: 771: }
  5056                           ;main.c: 772: }
  5057  00FD90  EFC4  F072         	goto	l3907
  5058  00FD94                     l4797:
  5059                           
  5060                           ;main.c: 773: else{
  5061                           ;main.c: 774: S3mode = 3;
  5062  00FD94  0E00               	movlw	0
  5063  00FD96  6E6F               	movwf	main@S3mode+1,c
  5064  00FD98  0E03               	movlw	3
  5065  00FD9A  6E6E               	movwf	main@S3mode,c
  5066                           
  5067                           ;main.c: 775: updateS3(S3mode);
  5068  00FD9C  C06E  F001         	movff	main@S3mode,updateS3@mode
  5069  00FDA0  C06F  F002         	movff	main@S3mode+1,updateS3@mode+1
  5070  00FDA4  ECCC  F06E         	call	_updateS3	;wreg free
  5071  00FDA8                     l4801:
  5072                           
  5073                           ;main.c: 776: S2mode = 4;
  5074  00FDA8  0E00               	movlw	0
  5075  00FDAA  6E67               	movwf	main@S2mode+1,c
  5076  00FDAC  0E04               	movlw	4
  5077  00FDAE  6E66               	movwf	main@S2mode,c
  5078  00FDB0  EFC4  F072         	goto	l3907
  5079  00FDB4                     __end_of_main:
  5080                           	opt stack 0
  5081                           tblptru	equ	0xFF8
  5082                           prodh	equ	0xFF4
  5083                           prodl	equ	0xFF3
  5084                           postinc0	equ	0xFEE
  5085                           wreg	equ	0xFE8
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _updateTime *****************
  5089 ;; Defined at:
  5090 ;;		line 89 in file "I2C.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  j               1    3[COMRAM] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:        1 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    2
  5111 ;; This function calls:
  5112 ;;		_I2C_Master_Read
  5113 ;;		_I2C_Master_Start
  5114 ;;		_I2C_Master_Stop
  5115 ;;		_I2C_Master_Write
  5116 ;; This function is called by:
  5117 ;;		_main
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text1
  5122  00D95E                     __ptext1:
  5123                           	opt stack 0
  5124  00D95E                     _updateTime:
  5125                           	opt stack 28
  5126                           
  5127                           ;I2C.c: 91: I2C_Master_Start();
  5128                           
  5129                           ;incstack = 0
  5130  00D95E  ECDA  F06A         	call	_I2C_Master_Start	;wreg free
  5131                           
  5132                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  5133  00D962  0E00               	movlw	0
  5134  00D964  6E03               	movwf	I2C_Master_Write@d+1,c
  5135  00D966  0ED0               	movlw	208
  5136  00D968  6E02               	movwf	I2C_Master_Write@d,c
  5137  00D96A  ECEC  F06A         	call	_I2C_Master_Write	;wreg free
  5138                           
  5139                           ;I2C.c: 93: I2C_Master_Write(0x00);
  5140  00D96E  0E00               	movlw	0
  5141  00D970  6E03               	movwf	I2C_Master_Write@d+1,c
  5142  00D972  0E00               	movlw	0
  5143  00D974  6E02               	movwf	I2C_Master_Write@d,c
  5144  00D976  ECEC  F06A         	call	_I2C_Master_Write	;wreg free
  5145                           
  5146                           ;I2C.c: 94: I2C_Master_Stop();
  5147  00D97A  ECDE  F06A         	call	_I2C_Master_Stop	;wreg free
  5148                           
  5149                           ;I2C.c: 97: I2C_Master_Start();
  5150  00D97E  ECDA  F06A         	call	_I2C_Master_Start	;wreg free
  5151                           
  5152                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  5153  00D982  0E00               	movlw	0
  5154  00D984  6E03               	movwf	I2C_Master_Write@d+1,c
  5155  00D986  0ED1               	movlw	209
  5156  00D988  6E02               	movwf	I2C_Master_Write@d,c
  5157  00D98A  ECEC  F06A         	call	_I2C_Master_Write	;wreg free
  5158                           
  5159                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  5160  00D98E  0E00               	movlw	0
  5161  00D990  6E04               	movwf	updateTime@j,c
  5162  00D992                     l3567:
  5163  00D992  0E05               	movlw	5
  5164  00D994  6404               	cpfsgt	updateTime@j,c
  5165  00D996  D001               	goto	l3571
  5166  00D998  D00E               	goto	l3577
  5167  00D99A                     l3571:
  5168                           
  5169                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  5170  00D99A  5004               	movf	updateTime@j,w,c
  5171  00D99C  0D01               	mullw	1
  5172  00D99E  0E70               	movlw	low _time
  5173  00D9A0  24F3               	addwf	prodl,w,c
  5174  00D9A2  6ED9               	movwf	fsr2l,c
  5175  00D9A4  0E00               	movlw	high _time
  5176  00D9A6  20F4               	addwfc	prodh,w,c
  5177  00D9A8  6EDA               	movwf	fsr2h,c
  5178  00D9AA  0E01               	movlw	1
  5179  00D9AC  EC5F  F06B         	call	_I2C_Master_Read
  5180  00D9B0  6EDF               	movwf	indf2,c
  5181  00D9B2  2A04               	incf	updateTime@j,f,c
  5182  00D9B4  D7EE               	goto	l3567
  5183  00D9B6                     l3577:
  5184                           
  5185                           ;I2C.c: 101: }
  5186                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  5187  00D9B6  0E00               	movlw	0
  5188  00D9B8  EC5F  F06B         	call	_I2C_Master_Read
  5189  00D9BC  6E76               	movwf	_time+6,c
  5190                           
  5191                           ;I2C.c: 103: I2C_Master_Stop();
  5192  00D9BE  ECDE  F06A         	call	_I2C_Master_Stop	;wreg free
  5193  00D9C2  0012               	return		;funcret
  5194  00D9C4                     __end_of_updateTime:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           indf2	equ	0xFDF
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function _I2C_Master_Write *****************
  5207 ;; Defined at:
  5208 ;;		line 54 in file "I2C.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  d               2    1[COMRAM] unsigned int 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5222 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;Total ram usage:        2 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    1
  5229 ;; This function calls:
  5230 ;;		_I2C_Master_Wait
  5231 ;; This function is called by:
  5232 ;;		_updateTime
  5233 ;;		_set_time
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text2
  5238  00D5D8                     __ptext2:
  5239                           	opt stack 0
  5240  00D5D8                     _I2C_Master_Write:
  5241                           	opt stack 28
  5242                           
  5243                           ;I2C.c: 56: I2C_Master_Wait();
  5244                           
  5245                           ;incstack = 0
  5246  00D5D8  ECFD  F06A         	call	_I2C_Master_Wait	;wreg free
  5247                           
  5248                           ;I2C.c: 57: SSPBUF = d;
  5249  00D5DC  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5250  00D5E0  0012               	return		;funcret
  5251  00D5E2                     __end_of_I2C_Master_Write:
  5252                           	opt stack 0
  5253                           tblptru	equ	0xFF8
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           indf2	equ	0xFDF
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function _I2C_Master_Stop *****************
  5264 ;; Defined at:
  5265 ;;		line 48 in file "I2C.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    1
  5286 ;; This function calls:
  5287 ;;		_I2C_Master_Wait
  5288 ;; This function is called by:
  5289 ;;		_updateTime
  5290 ;;		_set_time
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text3
  5295  00D5BC                     __ptext3:
  5296                           	opt stack 0
  5297  00D5BC                     _I2C_Master_Stop:
  5298                           	opt stack 28
  5299                           
  5300                           ;I2C.c: 50: I2C_Master_Wait();
  5301                           
  5302                           ;incstack = 0
  5303  00D5BC  ECFD  F06A         	call	_I2C_Master_Wait	;wreg free
  5304                           
  5305                           ;I2C.c: 51: PEN = 1;
  5306  00D5C0  84C5               	bsf	4037,2,c	;volatile
  5307  00D5C2  0012               	return		;funcret
  5308  00D5C4                     __end_of_I2C_Master_Stop:
  5309                           	opt stack 0
  5310                           tblptru	equ	0xFF8
  5311                           prodh	equ	0xFF4
  5312                           prodl	equ	0xFF3
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           indf2	equ	0xFDF
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _I2C_Master_Start *****************
  5321 ;; Defined at:
  5322 ;;		line 36 in file "I2C.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:        0 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    1
  5343 ;; This function calls:
  5344 ;;		_I2C_Master_Wait
  5345 ;; This function is called by:
  5346 ;;		_updateTime
  5347 ;;		_set_time
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text4
  5352  00D5B4                     __ptext4:
  5353                           	opt stack 0
  5354  00D5B4                     _I2C_Master_Start:
  5355                           	opt stack 28
  5356                           
  5357                           ;I2C.c: 38: I2C_Master_Wait();
  5358                           
  5359                           ;incstack = 0
  5360  00D5B4  ECFD  F06A         	call	_I2C_Master_Wait	;wreg free
  5361                           
  5362                           ;I2C.c: 39: SEN = 1;
  5363  00D5B8  80C5               	bsf	4037,0,c	;volatile
  5364  00D5BA  0012               	return		;funcret
  5365  00D5BC                     __end_of_I2C_Master_Start:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           postinc0	equ	0xFEE
  5371                           wreg	equ	0xFE8
  5372                           indf2	equ	0xFDF
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _I2C_Master_Read *****************
  5378 ;; Defined at:
  5379 ;;		line 60 in file "I2C.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  a               1    wreg     unsigned char 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  a               1    1[COMRAM] unsigned char 
  5384 ;;  temp            1    2[COMRAM] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      unsigned char 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;Total ram usage:        2 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    1
  5401 ;; This function calls:
  5402 ;;		_I2C_Master_Wait
  5403 ;; This function is called by:
  5404 ;;		_updateTime
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text5
  5409  00D6BE                     __ptext5:
  5410                           	opt stack 0
  5411  00D6BE                     _I2C_Master_Read:
  5412                           	opt stack 28
  5413                           
  5414                           ;incstack = 0
  5415                           ;I2C_Master_Read@a stored from wreg
  5416  00D6BE  6E02               	movwf	I2C_Master_Read@a,c
  5417                           
  5418                           ;I2C.c: 62: unsigned char temp;
  5419                           ;I2C.c: 63: I2C_Master_Wait();
  5420  00D6C0  ECFD  F06A         	call	_I2C_Master_Wait	;wreg free
  5421                           
  5422                           ;I2C.c: 64: RCEN = 1;
  5423  00D6C4  86C5               	bsf	4037,3,c	;volatile
  5424                           
  5425                           ;I2C.c: 65: I2C_Master_Wait();
  5426  00D6C6  ECFD  F06A         	call	_I2C_Master_Wait	;wreg free
  5427                           
  5428                           ;I2C.c: 66: temp = SSPBUF;
  5429  00D6CA  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  5430                           
  5431                           ;I2C.c: 67: I2C_Master_Wait();
  5432  00D6CE  ECFD  F06A         	call	_I2C_Master_Wait	;wreg free
  5433                           
  5434                           ;I2C.c: 68: ACKDT = (a)?0:1;
  5435  00D6D2  5002               	movf	I2C_Master_Read@a,w,c
  5436  00D6D4  A4D8               	btfss	status,2,c
  5437  00D6D6  D002               	goto	u2960
  5438  00D6D8  8AC5               	bsf	4037,5,c	;volatile
  5439  00D6DA  D001               	goto	l3527
  5440  00D6DC                     u2960:
  5441  00D6DC  9AC5               	bcf	4037,5,c	;volatile
  5442  00D6DE                     l3527:
  5443                           
  5444                           ;I2C.c: 69: ACKEN = 1;
  5445  00D6DE  88C5               	bsf	4037,4,c	;volatile
  5446                           
  5447                           ;I2C.c: 70: return temp;
  5448  00D6E0  5003               	movf	I2C_Master_Read@temp,w,c
  5449  00D6E2  0012               	return	
  5450  00D6E4                     __end_of_I2C_Master_Read:
  5451                           	opt stack 0
  5452                           tblptru	equ	0xFF8
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           indf2	equ	0xFDF
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _I2C_Master_Wait *****************
  5463 ;; Defined at:
  5464 ;;		line 31 in file "I2C.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;Total ram usage:        1 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; This function calls:
  5485 ;;		Nothing
  5486 ;; This function is called by:
  5487 ;;		_I2C_Master_Start
  5488 ;;		_I2C_Master_Stop
  5489 ;;		_I2C_Master_Write
  5490 ;;		_I2C_Master_Read
  5491 ;;		_I2C_Master_RepeatedStart
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text6
  5496  00D5FA                     __ptext6:
  5497                           	opt stack 0
  5498  00D5FA                     _I2C_Master_Wait:
  5499                           	opt stack 28
  5500  00D5FA                     l370:
  5501  00D5FA  B4C7               	btfsc	4039,2,c	;volatile
  5502  00D5FC  D7FE               	goto	l370
  5503  00D5FE  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  5504  00D602  0E1F               	movlw	31
  5505  00D604  1601               	andwf	??_I2C_Master_Wait,f,c
  5506  00D606  B4D8               	btfsc	status,2,c
  5507  00D608  0012               	return	
  5508  00D60A  D7F7               	goto	l370
  5509  00D60C                     __end_of_I2C_Master_Wait:
  5510                           	opt stack 0
  5511                           tblptru	equ	0xFF8
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           postinc0	equ	0xFEE
  5515                           wreg	equ	0xFE8
  5516                           indf2	equ	0xFDF
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8
  5520                           
  5521 ;; *************** function _updateS3 *****************
  5522 ;; Defined at:
  5523 ;;		line 149 in file "motors.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  mode            2    0[COMRAM] int 
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;		None
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg, status,2, status,0
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;Total ram usage:        3 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_main
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text7
  5551  00DD98                     __ptext7:
  5552                           	opt stack 0
  5553  00DD98                     _updateS3:
  5554                           	opt stack 30
  5555                           
  5556                           ;motors.c: 150: _delay((unsigned long)((5)*(32000000/4000.0)));
  5557                           
  5558                           ;incstack = 0
  5559  00DD98  0E34               	movlw	52
  5560  00DD9A  6E03               	movwf	??_updateS3& (0+255),c
  5561  00DD9C  0EF2               	movlw	242
  5562  00DD9E                     u5047:
  5563  00DD9E  2EE8               	decfsz	wreg,f,c
  5564  00DDA0  D7FE               	bra	u5047
  5565  00DDA2  2E03               	decfsz	??_updateS3& (0+255),f,c
  5566  00DDA4  D7FC               	bra	u5047
  5567                           
  5568                           ;motors.c: 152: if(mode == 0){
  5569  00DDA6  5001               	movf	updateS3@mode,w,c
  5570  00DDA8  1002               	iorwf	updateS3@mode+1,w,c
  5571  00DDAA  A4D8               	btfss	status,2,c
  5572  00DDAC  D005               	goto	l3733
  5573                           
  5574                           ;motors.c: 153: LATCbits.LATC7 = 0;
  5575  00DDAE  9E8B               	bcf	3979,7,c	;volatile
  5576                           
  5577                           ;motors.c: 154: LATCbits.LATC6 = 0;
  5578  00DDB0  9C8B               	bcf	3979,6,c	;volatile
  5579                           
  5580                           ;motors.c: 155: LATCbits.LATC0 = 0;
  5581  00DDB2  908B               	bcf	3979,0,c	;volatile
  5582                           
  5583                           ;motors.c: 156: LATCbits.LATC5 = 0;
  5584  00DDB4  9A8B               	bcf	3979,5,c	;volatile
  5585                           
  5586                           ;motors.c: 157: }
  5587  00DDB6  0012               	return	
  5588  00DDB8                     l3733:
  5589                           
  5590                           ;motors.c: 158: else if(mode == 4){
  5591  00DDB8  0E04               	movlw	4
  5592  00DDBA  1801               	xorwf	updateS3@mode,w,c
  5593  00DDBC  1002               	iorwf	updateS3@mode+1,w,c
  5594  00DDBE  A4D8               	btfss	status,2,c
  5595  00DDC0  D005               	goto	l3737
  5596                           
  5597                           ;motors.c: 159: LATCbits.LATC7 = 1;
  5598  00DDC2  8E8B               	bsf	3979,7,c	;volatile
  5599                           
  5600                           ;motors.c: 160: LATCbits.LATC6 = 0;
  5601  00DDC4  9C8B               	bcf	3979,6,c	;volatile
  5602                           
  5603                           ;motors.c: 161: LATCbits.LATC0 = 0;
  5604  00DDC6  908B               	bcf	3979,0,c	;volatile
  5605                           
  5606                           ;motors.c: 162: LATCbits.LATC5 = 0;
  5607  00DDC8  9A8B               	bcf	3979,5,c	;volatile
  5608                           
  5609                           ;motors.c: 163: }
  5610  00DDCA  0012               	return	
  5611  00DDCC                     l3737:
  5612                           
  5613                           ;motors.c: 164: else if(mode == 3){
  5614  00DDCC  0E03               	movlw	3
  5615  00DDCE  1801               	xorwf	updateS3@mode,w,c
  5616  00DDD0  1002               	iorwf	updateS3@mode+1,w,c
  5617  00DDD2  A4D8               	btfss	status,2,c
  5618  00DDD4  D042               	goto	l3761
  5619                           
  5620                           ;motors.c: 165: t3++;
  5621  00DDD6  4A7D               	infsnz	_t3,f,c
  5622  00DDD8  2A7E               	incf	_t3+1,f,c
  5623                           
  5624                           ;motors.c: 166: if (t3>8) {t3=1;}
  5625  00DDDA  BE7E               	btfsc	_t3+1,7,c
  5626  00DDDC  D00A               	goto	l3745
  5627  00DDDE  507E               	movf	_t3+1,w,c
  5628  00DDE0  E104               	bnz	u3440
  5629  00DDE2  0E09               	movlw	9
  5630  00DDE4  5C7D               	subwf	_t3,w,c
  5631  00DDE6  A0D8               	btfss	status,0,c
  5632  00DDE8  D004               	goto	l3745
  5633  00DDEA                     u3440:
  5634  00DDEA  0E00               	movlw	0
  5635  00DDEC  6E7E               	movwf	_t3+1,c
  5636  00DDEE  0E01               	movlw	1
  5637  00DDF0  6E7D               	movwf	_t3,c
  5638  00DDF2                     l3745:
  5639                           
  5640                           ;motors.c: 167: if (t3 == 1 || t3==8){LATCbits.LATC7 = 1;}
  5641  00DDF2  047D               	decf	_t3,w,c
  5642  00DDF4  107E               	iorwf	_t3+1,w,c
  5643  00DDF6  B4D8               	btfsc	status,2,c
  5644  00DDF8  D005               	goto	l543
  5645  00DDFA  0E08               	movlw	8
  5646  00DDFC  187D               	xorwf	_t3,w,c
  5647  00DDFE  107E               	iorwf	_t3+1,w,c
  5648  00DE00  A4D8               	btfss	status,2,c
  5649  00DE02  D002               	goto	l541
  5650  00DE04                     l543:
  5651  00DE04  8E8B               	bsf	3979,7,c	;volatile
  5652  00DE06  D001               	goto	l3749
  5653  00DE08                     l541:
  5654                           
  5655                           ;motors.c: 168: else{LATCbits.LATC7 = 0;}
  5656  00DE08  9E8B               	bcf	3979,7,c	;volatile
  5657  00DE0A                     l3749:
  5658                           
  5659                           ;motors.c: 169: if (t3 == 2 || t3==7){LATCbits.LATC6 = 1;}
  5660  00DE0A  0E02               	movlw	2
  5661  00DE0C  187D               	xorwf	_t3,w,c
  5662  00DE0E  107E               	iorwf	_t3+1,w,c
  5663  00DE10  B4D8               	btfsc	status,2,c
  5664  00DE12  D005               	goto	l547
  5665  00DE14  0E07               	movlw	7
  5666  00DE16  187D               	xorwf	_t3,w,c
  5667  00DE18  107E               	iorwf	_t3+1,w,c
  5668  00DE1A  A4D8               	btfss	status,2,c
  5669  00DE1C  D002               	goto	l545
  5670  00DE1E                     l547:
  5671  00DE1E  8C8B               	bsf	3979,6,c	;volatile
  5672  00DE20  D001               	goto	l3753
  5673  00DE22                     l545:
  5674                           
  5675                           ;motors.c: 170: else{LATCbits.LATC6 = 0;}
  5676  00DE22  9C8B               	bcf	3979,6,c	;volatile
  5677  00DE24                     l3753:
  5678                           
  5679                           ;motors.c: 171: if (t3 == 3 || t3==6){LATCbits.LATC0 = 1;}
  5680  00DE24  0E03               	movlw	3
  5681  00DE26  187D               	xorwf	_t3,w,c
  5682  00DE28  107E               	iorwf	_t3+1,w,c
  5683  00DE2A  B4D8               	btfsc	status,2,c
  5684  00DE2C  D005               	goto	l551
  5685  00DE2E  0E06               	movlw	6
  5686  00DE30  187D               	xorwf	_t3,w,c
  5687  00DE32  107E               	iorwf	_t3+1,w,c
  5688  00DE34  A4D8               	btfss	status,2,c
  5689  00DE36  D002               	goto	l549
  5690  00DE38                     l551:
  5691  00DE38  808B               	bsf	3979,0,c	;volatile
  5692  00DE3A  D001               	goto	l3757
  5693  00DE3C                     l549:
  5694                           
  5695                           ;motors.c: 172: else{LATCbits.LATC0 = 0;}
  5696  00DE3C  908B               	bcf	3979,0,c	;volatile
  5697  00DE3E                     l3757:
  5698                           
  5699                           ;motors.c: 173: if (t3 == 4 || t3==5){LATCbits.LATC5 = 1;}
  5700  00DE3E  0E04               	movlw	4
  5701  00DE40  187D               	xorwf	_t3,w,c
  5702  00DE42  107E               	iorwf	_t3+1,w,c
  5703  00DE44  B4D8               	btfsc	status,2,c
  5704  00DE46  D005               	goto	l555
  5705  00DE48  0E05               	movlw	5
  5706  00DE4A  187D               	xorwf	_t3,w,c
  5707  00DE4C  107E               	iorwf	_t3+1,w,c
  5708  00DE4E  A4D8               	btfss	status,2,c
  5709  00DE50  D002               	goto	l553
  5710  00DE52                     l555:
  5711  00DE52  8A8B               	bsf	3979,5,c	;volatile
  5712  00DE54  0012               	return	
  5713  00DE56                     l553:
  5714                           
  5715                           ;motors.c: 174: else{LATCbits.LATC5 = 0;}
  5716  00DE56  9A8B               	bcf	3979,5,c	;volatile
  5717                           
  5718                           ;motors.c: 175: }
  5719  00DE58  0012               	return	
  5720  00DE5A                     l3761:
  5721                           
  5722                           ;motors.c: 176: else{
  5723                           ;motors.c: 177: if(mode == 1){
  5724  00DE5A  0401               	decf	updateS3@mode,w,c
  5725  00DE5C  1002               	iorwf	updateS3@mode+1,w,c
  5726  00DE5E  A4D8               	btfss	status,2,c
  5727  00DE60  D013               	goto	l3769
  5728                           
  5729                           ;motors.c: 178: s3 ++;
  5730  00DE62  0100               	movlb	0	; () banked
  5731  00DE64  4B84               	infsnz	_s3& (0+255),f,b
  5732  00DE66  2B85               	incf	(_s3+1)& (0+255),f,b
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;motors.c: 179: if (s3>4) {s3=1;}
  5736  00DE68  0100               	movlb	0	; () banked
  5737  00DE6A  BF85               	btfsc	(_s3+1)& (0+255),7,b
  5738  00DE6C  D025               	goto	l3777
  5739  00DE6E  0100               	movlb	0	; () banked
  5740  00DE70  5185               	movf	(_s3+1)& (0+255),w,b
  5741  00DE72  E105               	bnz	u3540
  5742  00DE74  0E05               	movlw	5
  5743  00DE76  0100               	movlb	0	; () banked
  5744  00DE78  5D84               	subwf	_s3& (0+255),w,b
  5745  00DE7A  A0D8               	btfss	status,0,c
  5746  00DE7C  D01D               	goto	l3777
  5747  00DE7E                     u3540:
  5748                           
  5749                           ; BSR set to: 0
  5750  00DE7E  0E00               	movlw	0
  5751  00DE80  0100               	movlb	0	; () banked
  5752  00DE82  6F85               	movwf	(_s3+1)& (0+255),b
  5753  00DE84  0E01               	movlw	1
  5754  00DE86  D017               	goto	L6
  5755  00DE88                     l3769:
  5756                           
  5757                           ;motors.c: 181: else if(mode == 2){
  5758  00DE88  0E02               	movlw	2
  5759  00DE8A  1801               	xorwf	updateS3@mode,w,c
  5760  00DE8C  1002               	iorwf	updateS3@mode+1,w,c
  5761  00DE8E  A4D8               	btfss	status,2,c
  5762  00DE90  D013               	goto	l3777
  5763                           
  5764                           ;motors.c: 182: s3 --;
  5765  00DE92  0100               	movlb	0	; () banked
  5766  00DE94  0784               	decf	_s3& (0+255),f,b
  5767  00DE96  A0D8               	btfss	status,0,c
  5768  00DE98  0785               	decf	(_s3+1)& (0+255),f,b
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;motors.c: 183: if (s3<1) {s3=4;}
  5772  00DE9A  0100               	movlb	0	; () banked
  5773  00DE9C  BF85               	btfsc	(_s3+1)& (0+255),7,b
  5774  00DE9E  D007               	goto	l3775
  5775  00DEA0  0100               	movlb	0	; () banked
  5776  00DEA2  5185               	movf	(_s3+1)& (0+255),w,b
  5777  00DEA4  E109               	bnz	l3777
  5778  00DEA6  0100               	movlb	0	; () banked
  5779  00DEA8  0584               	decf	_s3& (0+255),w,b
  5780  00DEAA  B0D8               	btfsc	status,0,c
  5781  00DEAC  D005               	goto	l3777
  5782  00DEAE                     l3775:
  5783                           
  5784                           ; BSR set to: 0
  5785  00DEAE  0E00               	movlw	0
  5786  00DEB0  0100               	movlb	0	; () banked
  5787  00DEB2  6F85               	movwf	(_s3+1)& (0+255),b
  5788  00DEB4  0E04               	movlw	4
  5789  00DEB6                     L6:
  5790  00DEB6  6F84               	movwf	_s3& (0+255),b
  5791  00DEB8                     l3777:
  5792                           
  5793                           ;motors.c: 184: }
  5794                           ;motors.c: 185: if (s3 == 1){LATCbits.LATC7 = 1;}
  5795  00DEB8  0100               	movlb	0	; () banked
  5796  00DEBA  0584               	decf	_s3& (0+255),w,b
  5797  00DEBC  0100               	movlb	0	; () banked
  5798  00DEBE  1185               	iorwf	(_s3+1)& (0+255),w,b
  5799  00DEC0  A4D8               	btfss	status,2,c
  5800  00DEC2  D002               	goto	l563
  5801                           
  5802                           ; BSR set to: 0
  5803  00DEC4  8E8B               	bsf	3979,7,c	;volatile
  5804  00DEC6  D001               	goto	l3781
  5805  00DEC8                     l563:
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;motors.c: 186: else{LATCbits.LATC7 = 0;}
  5809  00DEC8  9E8B               	bcf	3979,7,c	;volatile
  5810  00DECA                     l3781:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;motors.c: 187: if (s3 == 2){LATCbits.LATC6 = 1;}
  5814  00DECA  0E02               	movlw	2
  5815  00DECC  0100               	movlb	0	; () banked
  5816  00DECE  1984               	xorwf	_s3& (0+255),w,b
  5817  00DED0  0100               	movlb	0	; () banked
  5818  00DED2  1185               	iorwf	(_s3+1)& (0+255),w,b
  5819  00DED4  A4D8               	btfss	status,2,c
  5820  00DED6  D002               	goto	l565
  5821                           
  5822                           ; BSR set to: 0
  5823  00DED8  8C8B               	bsf	3979,6,c	;volatile
  5824  00DEDA  D001               	goto	l3785
  5825  00DEDC                     l565:
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;motors.c: 188: else{LATCbits.LATC6 = 0;}
  5829  00DEDC  9C8B               	bcf	3979,6,c	;volatile
  5830  00DEDE                     l3785:
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;motors.c: 189: if (s3 == 3){LATCbits.LATC0 = 1;}
  5834  00DEDE  0E03               	movlw	3
  5835  00DEE0  0100               	movlb	0	; () banked
  5836  00DEE2  1984               	xorwf	_s3& (0+255),w,b
  5837  00DEE4  0100               	movlb	0	; () banked
  5838  00DEE6  1185               	iorwf	(_s3+1)& (0+255),w,b
  5839  00DEE8  A4D8               	btfss	status,2,c
  5840  00DEEA  D002               	goto	l567
  5841                           
  5842                           ; BSR set to: 0
  5843  00DEEC  808B               	bsf	3979,0,c	;volatile
  5844  00DEEE  D001               	goto	l3789
  5845  00DEF0                     l567:
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;motors.c: 190: else{LATCbits.LATC0 = 0;}
  5849  00DEF0  908B               	bcf	3979,0,c	;volatile
  5850  00DEF2                     l3789:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;motors.c: 191: if (s3 == 4){LATCbits.LATC5 = 1;}
  5854  00DEF2  0E04               	movlw	4
  5855  00DEF4  0100               	movlb	0	; () banked
  5856  00DEF6  1984               	xorwf	_s3& (0+255),w,b
  5857  00DEF8  0100               	movlb	0	; () banked
  5858  00DEFA  1185               	iorwf	(_s3+1)& (0+255),w,b
  5859  00DEFC  A4D8               	btfss	status,2,c
  5860  00DEFE  D002               	goto	l569
  5861                           
  5862                           ; BSR set to: 0
  5863  00DF00  8A8B               	bsf	3979,5,c	;volatile
  5864  00DF02  0012               	return	
  5865  00DF04                     l569:
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;motors.c: 192: else{LATCbits.LATC5 = 0;}
  5869  00DF04  9A8B               	bcf	3979,5,c	;volatile
  5870                           
  5871                           ; BSR set to: 0
  5872                           
  5873                           ; BSR set to: 0
  5874                           
  5875                           ; BSR set to: 0
  5876  00DF06  0012               	return	
  5877  00DF08                     __end_of_updateS3:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           postinc0	equ	0xFEE
  5883                           wreg	equ	0xFE8
  5884                           indf2	equ	0xFDF
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function _updateS2 *****************
  5890 ;; Defined at:
  5891 ;;		line 102 in file "motors.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  mode            2    0[COMRAM] int 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;		None
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      void 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;Total ram usage:        3 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text8
  5919  00DC28                     __ptext8:
  5920                           	opt stack 0
  5921  00DC28                     _updateS2:
  5922                           	opt stack 30
  5923                           
  5924                           ;motors.c: 103: _delay((unsigned long)((5)*(32000000/4000.0)));
  5925                           
  5926                           ;incstack = 0
  5927  00DC28  0E34               	movlw	52
  5928  00DC2A  6E03               	movwf	??_updateS2& (0+255),c
  5929  00DC2C  0EF2               	movlw	242
  5930  00DC2E                     u5057:
  5931  00DC2E  2EE8               	decfsz	wreg,f,c
  5932  00DC30  D7FE               	bra	u5057
  5933  00DC32  2E03               	decfsz	??_updateS2& (0+255),f,c
  5934  00DC34  D7FC               	bra	u5057
  5935                           
  5936                           ;motors.c: 105: if(mode == 0){
  5937  00DC36  5001               	movf	updateS2@mode,w,c
  5938  00DC38  1002               	iorwf	updateS2@mode+1,w,c
  5939  00DC3A  A4D8               	btfss	status,2,c
  5940  00DC3C  D005               	goto	l3667
  5941                           
  5942                           ;motors.c: 106: LATEbits.LATE2 = 0;
  5943  00DC3E  948D               	bcf	3981,2,c	;volatile
  5944                           
  5945                           ;motors.c: 107: LATEbits.LATE1 = 0;
  5946  00DC40  928D               	bcf	3981,1,c	;volatile
  5947                           
  5948                           ;motors.c: 108: LATAbits.LATA4 = 0;
  5949  00DC42  9889               	bcf	3977,4,c	;volatile
  5950                           
  5951                           ;motors.c: 109: LATDbits.LATD0 = 0;
  5952  00DC44  908C               	bcf	3980,0,c	;volatile
  5953                           
  5954                           ;motors.c: 110: }
  5955  00DC46  0012               	return	
  5956  00DC48                     l3667:
  5957                           
  5958                           ;motors.c: 111: else if(mode == 4){
  5959  00DC48  0E04               	movlw	4
  5960  00DC4A  1801               	xorwf	updateS2@mode,w,c
  5961  00DC4C  1002               	iorwf	updateS2@mode+1,w,c
  5962  00DC4E  A4D8               	btfss	status,2,c
  5963  00DC50  D005               	goto	l3671
  5964                           
  5965                           ;motors.c: 112: LATEbits.LATE2 = 1;
  5966  00DC52  848D               	bsf	3981,2,c	;volatile
  5967                           
  5968                           ;motors.c: 113: LATEbits.LATE1 = 0;
  5969  00DC54  928D               	bcf	3981,1,c	;volatile
  5970                           
  5971                           ;motors.c: 114: LATAbits.LATA4 = 0;
  5972  00DC56  9889               	bcf	3977,4,c	;volatile
  5973                           
  5974                           ;motors.c: 115: LATDbits.LATD0 = 0;
  5975  00DC58  908C               	bcf	3980,0,c	;volatile
  5976                           
  5977                           ;motors.c: 116: }
  5978  00DC5A  0012               	return	
  5979  00DC5C                     l3671:
  5980                           
  5981                           ;motors.c: 117: else if(mode == 3){
  5982  00DC5C  0E03               	movlw	3
  5983  00DC5E  1801               	xorwf	updateS2@mode,w,c
  5984  00DC60  1002               	iorwf	updateS2@mode+1,w,c
  5985  00DC62  A4D8               	btfss	status,2,c
  5986  00DC64  D042               	goto	l3695
  5987                           
  5988                           ;motors.c: 118: t2++;
  5989  00DC66  4A77               	infsnz	_t2,f,c
  5990  00DC68  2A78               	incf	_t2+1,f,c
  5991                           
  5992                           ;motors.c: 119: if (t2>8) {t2=1;}
  5993  00DC6A  BE78               	btfsc	_t2+1,7,c
  5994  00DC6C  D00A               	goto	l3679
  5995  00DC6E  5078               	movf	_t2+1,w,c
  5996  00DC70  E104               	bnz	u3240
  5997  00DC72  0E09               	movlw	9
  5998  00DC74  5C77               	subwf	_t2,w,c
  5999  00DC76  A0D8               	btfss	status,0,c
  6000  00DC78  D004               	goto	l3679
  6001  00DC7A                     u3240:
  6002  00DC7A  0E00               	movlw	0
  6003  00DC7C  6E78               	movwf	_t2+1,c
  6004  00DC7E  0E01               	movlw	1
  6005  00DC80  6E77               	movwf	_t2,c
  6006  00DC82                     l3679:
  6007                           
  6008                           ;motors.c: 120: if (t2 == 1 || t2==8){LATEbits.LATE2 = 1;}
  6009  00DC82  0477               	decf	_t2,w,c
  6010  00DC84  1078               	iorwf	_t2+1,w,c
  6011  00DC86  B4D8               	btfsc	status,2,c
  6012  00DC88  D005               	goto	l504
  6013  00DC8A  0E08               	movlw	8
  6014  00DC8C  1877               	xorwf	_t2,w,c
  6015  00DC8E  1078               	iorwf	_t2+1,w,c
  6016  00DC90  A4D8               	btfss	status,2,c
  6017  00DC92  D002               	goto	l502
  6018  00DC94                     l504:
  6019  00DC94  848D               	bsf	3981,2,c	;volatile
  6020  00DC96  D001               	goto	l3683
  6021  00DC98                     l502:
  6022                           
  6023                           ;motors.c: 121: else{LATEbits.LATE2 = 0;}
  6024  00DC98  948D               	bcf	3981,2,c	;volatile
  6025  00DC9A                     l3683:
  6026                           
  6027                           ;motors.c: 122: if (t2 == 2 || t2==7){LATEbits.LATE1 = 1;}
  6028  00DC9A  0E02               	movlw	2
  6029  00DC9C  1877               	xorwf	_t2,w,c
  6030  00DC9E  1078               	iorwf	_t2+1,w,c
  6031  00DCA0  B4D8               	btfsc	status,2,c
  6032  00DCA2  D005               	goto	l508
  6033  00DCA4  0E07               	movlw	7
  6034  00DCA6  1877               	xorwf	_t2,w,c
  6035  00DCA8  1078               	iorwf	_t2+1,w,c
  6036  00DCAA  A4D8               	btfss	status,2,c
  6037  00DCAC  D002               	goto	l506
  6038  00DCAE                     l508:
  6039  00DCAE  828D               	bsf	3981,1,c	;volatile
  6040  00DCB0  D001               	goto	l3687
  6041  00DCB2                     l506:
  6042                           
  6043                           ;motors.c: 123: else{LATEbits.LATE1 = 0;}
  6044  00DCB2  928D               	bcf	3981,1,c	;volatile
  6045  00DCB4                     l3687:
  6046                           
  6047                           ;motors.c: 124: if (t2 == 3 || t2==6){LATAbits.LATA4 = 1;}
  6048  00DCB4  0E03               	movlw	3
  6049  00DCB6  1877               	xorwf	_t2,w,c
  6050  00DCB8  1078               	iorwf	_t2+1,w,c
  6051  00DCBA  B4D8               	btfsc	status,2,c
  6052  00DCBC  D005               	goto	l512
  6053  00DCBE  0E06               	movlw	6
  6054  00DCC0  1877               	xorwf	_t2,w,c
  6055  00DCC2  1078               	iorwf	_t2+1,w,c
  6056  00DCC4  A4D8               	btfss	status,2,c
  6057  00DCC6  D002               	goto	l510
  6058  00DCC8                     l512:
  6059  00DCC8  8889               	bsf	3977,4,c	;volatile
  6060  00DCCA  D001               	goto	l3691
  6061  00DCCC                     l510:
  6062                           
  6063                           ;motors.c: 125: else{LATAbits.LATA4 = 0;}
  6064  00DCCC  9889               	bcf	3977,4,c	;volatile
  6065  00DCCE                     l3691:
  6066                           
  6067                           ;motors.c: 126: if (t2 == 4 || t2==5){LATDbits.LATD0 = 1;}
  6068  00DCCE  0E04               	movlw	4
  6069  00DCD0  1877               	xorwf	_t2,w,c
  6070  00DCD2  1078               	iorwf	_t2+1,w,c
  6071  00DCD4  B4D8               	btfsc	status,2,c
  6072  00DCD6  D005               	goto	l516
  6073  00DCD8  0E05               	movlw	5
  6074  00DCDA  1877               	xorwf	_t2,w,c
  6075  00DCDC  1078               	iorwf	_t2+1,w,c
  6076  00DCDE  A4D8               	btfss	status,2,c
  6077  00DCE0  D002               	goto	l514
  6078  00DCE2                     l516:
  6079  00DCE2  808C               	bsf	3980,0,c	;volatile
  6080  00DCE4  0012               	return	
  6081  00DCE6                     l514:
  6082                           
  6083                           ;motors.c: 127: else{LATDbits.LATD0 = 0;}
  6084  00DCE6  908C               	bcf	3980,0,c	;volatile
  6085                           
  6086                           ;motors.c: 128: }
  6087  00DCE8  0012               	return	
  6088  00DCEA                     l3695:
  6089                           
  6090                           ;motors.c: 129: else{
  6091                           ;motors.c: 130: if(mode == 1){
  6092  00DCEA  0401               	decf	updateS2@mode,w,c
  6093  00DCEC  1002               	iorwf	updateS2@mode+1,w,c
  6094  00DCEE  A4D8               	btfss	status,2,c
  6095  00DCF0  D013               	goto	l3703
  6096                           
  6097                           ;motors.c: 131: s2 ++;
  6098  00DCF2  0100               	movlb	0	; () banked
  6099  00DCF4  4B86               	infsnz	_s2& (0+255),f,b
  6100  00DCF6  2B87               	incf	(_s2+1)& (0+255),f,b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;motors.c: 132: if (s2>4) {s2=1;}
  6104  00DCF8  0100               	movlb	0	; () banked
  6105  00DCFA  BF87               	btfsc	(_s2+1)& (0+255),7,b
  6106  00DCFC  D025               	goto	l3711
  6107  00DCFE  0100               	movlb	0	; () banked
  6108  00DD00  5187               	movf	(_s2+1)& (0+255),w,b
  6109  00DD02  E105               	bnz	u3340
  6110  00DD04  0E05               	movlw	5
  6111  00DD06  0100               	movlb	0	; () banked
  6112  00DD08  5D86               	subwf	_s2& (0+255),w,b
  6113  00DD0A  A0D8               	btfss	status,0,c
  6114  00DD0C  D01D               	goto	l3711
  6115  00DD0E                     u3340:
  6116                           
  6117                           ; BSR set to: 0
  6118  00DD0E  0E00               	movlw	0
  6119  00DD10  0100               	movlb	0	; () banked
  6120  00DD12  6F87               	movwf	(_s2+1)& (0+255),b
  6121  00DD14  0E01               	movlw	1
  6122  00DD16  D017               	goto	L7
  6123  00DD18                     l3703:
  6124                           
  6125                           ;motors.c: 134: else if(mode == 2){
  6126  00DD18  0E02               	movlw	2
  6127  00DD1A  1801               	xorwf	updateS2@mode,w,c
  6128  00DD1C  1002               	iorwf	updateS2@mode+1,w,c
  6129  00DD1E  A4D8               	btfss	status,2,c
  6130  00DD20  D013               	goto	l3711
  6131                           
  6132                           ;motors.c: 135: s2 --;
  6133  00DD22  0100               	movlb	0	; () banked
  6134  00DD24  0786               	decf	_s2& (0+255),f,b
  6135  00DD26  A0D8               	btfss	status,0,c
  6136  00DD28  0787               	decf	(_s2+1)& (0+255),f,b
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;motors.c: 136: if (s2<1) {s2=4;}
  6140  00DD2A  0100               	movlb	0	; () banked
  6141  00DD2C  BF87               	btfsc	(_s2+1)& (0+255),7,b
  6142  00DD2E  D007               	goto	l3709
  6143  00DD30  0100               	movlb	0	; () banked
  6144  00DD32  5187               	movf	(_s2+1)& (0+255),w,b
  6145  00DD34  E109               	bnz	l3711
  6146  00DD36  0100               	movlb	0	; () banked
  6147  00DD38  0586               	decf	_s2& (0+255),w,b
  6148  00DD3A  B0D8               	btfsc	status,0,c
  6149  00DD3C  D005               	goto	l3711
  6150  00DD3E                     l3709:
  6151                           
  6152                           ; BSR set to: 0
  6153  00DD3E  0E00               	movlw	0
  6154  00DD40  0100               	movlb	0	; () banked
  6155  00DD42  6F87               	movwf	(_s2+1)& (0+255),b
  6156  00DD44  0E04               	movlw	4
  6157  00DD46                     L7:
  6158  00DD46  6F86               	movwf	_s2& (0+255),b
  6159  00DD48                     l3711:
  6160                           
  6161                           ;motors.c: 137: }
  6162                           ;motors.c: 138: if (s2 == 1){LATEbits.LATE2 = 1;}
  6163  00DD48  0100               	movlb	0	; () banked
  6164  00DD4A  0586               	decf	_s2& (0+255),w,b
  6165  00DD4C  0100               	movlb	0	; () banked
  6166  00DD4E  1187               	iorwf	(_s2+1)& (0+255),w,b
  6167  00DD50  A4D8               	btfss	status,2,c
  6168  00DD52  D002               	goto	l524
  6169                           
  6170                           ; BSR set to: 0
  6171  00DD54  848D               	bsf	3981,2,c	;volatile
  6172  00DD56  D001               	goto	l3715
  6173  00DD58                     l524:
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;motors.c: 139: else{LATEbits.LATE2 = 0;}
  6177  00DD58  948D               	bcf	3981,2,c	;volatile
  6178  00DD5A                     l3715:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;motors.c: 140: if (s2 == 2){LATEbits.LATE1 = 1;}
  6182  00DD5A  0E02               	movlw	2
  6183  00DD5C  0100               	movlb	0	; () banked
  6184  00DD5E  1986               	xorwf	_s2& (0+255),w,b
  6185  00DD60  0100               	movlb	0	; () banked
  6186  00DD62  1187               	iorwf	(_s2+1)& (0+255),w,b
  6187  00DD64  A4D8               	btfss	status,2,c
  6188  00DD66  D002               	goto	l526
  6189                           
  6190                           ; BSR set to: 0
  6191  00DD68  828D               	bsf	3981,1,c	;volatile
  6192  00DD6A  D001               	goto	l3719
  6193  00DD6C                     l526:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;motors.c: 141: else{LATEbits.LATE1 = 0;}
  6197  00DD6C  928D               	bcf	3981,1,c	;volatile
  6198  00DD6E                     l3719:
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;motors.c: 142: if (s2 == 3){LATAbits.LATA4 = 1;}
  6202  00DD6E  0E03               	movlw	3
  6203  00DD70  0100               	movlb	0	; () banked
  6204  00DD72  1986               	xorwf	_s2& (0+255),w,b
  6205  00DD74  0100               	movlb	0	; () banked
  6206  00DD76  1187               	iorwf	(_s2+1)& (0+255),w,b
  6207  00DD78  A4D8               	btfss	status,2,c
  6208  00DD7A  D002               	goto	l528
  6209                           
  6210                           ; BSR set to: 0
  6211  00DD7C  8889               	bsf	3977,4,c	;volatile
  6212  00DD7E  D001               	goto	l3723
  6213  00DD80                     l528:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;motors.c: 143: else{LATAbits.LATA4 = 0;}
  6217  00DD80  9889               	bcf	3977,4,c	;volatile
  6218  00DD82                     l3723:
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;motors.c: 144: if (s2 == 4){LATDbits.LATD0 = 1;}
  6222  00DD82  0E04               	movlw	4
  6223  00DD84  0100               	movlb	0	; () banked
  6224  00DD86  1986               	xorwf	_s2& (0+255),w,b
  6225  00DD88  0100               	movlb	0	; () banked
  6226  00DD8A  1187               	iorwf	(_s2+1)& (0+255),w,b
  6227  00DD8C  A4D8               	btfss	status,2,c
  6228  00DD8E  D002               	goto	l530
  6229                           
  6230                           ; BSR set to: 0
  6231  00DD90  808C               	bsf	3980,0,c	;volatile
  6232  00DD92  0012               	return	
  6233  00DD94                     l530:
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;motors.c: 145: else{LATDbits.LATD0 = 0;}
  6237  00DD94  908C               	bcf	3980,0,c	;volatile
  6238                           
  6239                           ; BSR set to: 0
  6240                           
  6241                           ; BSR set to: 0
  6242                           
  6243                           ; BSR set to: 0
  6244  00DD96  0012               	return	
  6245  00DD98                     __end_of_updateS2:
  6246                           	opt stack 0
  6247                           tblptru	equ	0xFF8
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           indf2	equ	0xFDF
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _updateS1 *****************
  6258 ;; Defined at:
  6259 ;;		line 55 in file "motors.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  mode            2   49[COMRAM] int 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;		None
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:        3 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    3
  6280 ;; This function calls:
  6281 ;;		_printf
  6282 ;; This function is called by:
  6283 ;;		_main
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text9
  6288  00DF08                     __ptext9:
  6289                           	opt stack 0
  6290  00DF08                     _updateS1:
  6291                           	opt stack 27
  6292                           
  6293                           ;motors.c: 56: _delay((unsigned long)((5)*(32000000/4000.0)));
  6294                           
  6295                           ;incstack = 0
  6296  00DF08  0E34               	movlw	52
  6297  00DF0A  6E34               	movwf	??_updateS1& (0+255),c
  6298  00DF0C  0EF2               	movlw	242
  6299  00DF0E                     u5067:
  6300  00DF0E  2EE8               	decfsz	wreg,f,c
  6301  00DF10  D7FE               	bra	u5067
  6302  00DF12  2E34               	decfsz	??_updateS1& (0+255),f,c
  6303  00DF14  D7FC               	bra	u5067
  6304                           
  6305                           ;motors.c: 58: if(mode == 0){
  6306  00DF16  5032               	movf	updateS1@mode,w,c
  6307  00DF18  1033               	iorwf	updateS1@mode+1,w,c
  6308  00DF1A  A4D8               	btfss	status,2,c
  6309  00DF1C  D005               	goto	l3585
  6310                           
  6311                           ;motors.c: 59: LATDbits.LATD1 = 0;
  6312  00DF1E  928C               	bcf	3980,1,c	;volatile
  6313                           
  6314                           ;motors.c: 60: LATBbits.LATB3 = 0;
  6315  00DF20  968A               	bcf	3978,3,c	;volatile
  6316                           
  6317                           ;motors.c: 61: LATBbits.LATB2 = 0;
  6318  00DF22  948A               	bcf	3978,2,c	;volatile
  6319                           
  6320                           ;motors.c: 62: LATBbits.LATB0 = 0;
  6321  00DF24  908A               	bcf	3978,0,c	;volatile
  6322                           
  6323                           ;motors.c: 63: }
  6324  00DF26  0012               	return	
  6325  00DF28                     l3585:
  6326                           
  6327                           ;motors.c: 64: else if(mode == 3){
  6328  00DF28  0E03               	movlw	3
  6329  00DF2A  1832               	xorwf	updateS1@mode,w,c
  6330  00DF2C  1033               	iorwf	updateS1@mode+1,w,c
  6331  00DF2E  A4D8               	btfss	status,2,c
  6332  00DF30  D061               	goto	l3619
  6333                           
  6334                           ;motors.c: 65: t++;
  6335  00DF32  4A79               	infsnz	_t,f,c
  6336  00DF34  2A7A               	incf	_t+1,f,c
  6337                           
  6338                           ;motors.c: 66: if (t>8) {t=1;}
  6339  00DF36  BE7A               	btfsc	_t+1,7,c
  6340  00DF38  D00A               	goto	l3593
  6341  00DF3A  507A               	movf	_t+1,w,c
  6342  00DF3C  E104               	bnz	u3040
  6343  00DF3E  0E09               	movlw	9
  6344  00DF40  5C79               	subwf	_t,w,c
  6345  00DF42  A0D8               	btfss	status,0,c
  6346  00DF44  D004               	goto	l3593
  6347  00DF46                     u3040:
  6348  00DF46  0E00               	movlw	0
  6349  00DF48  6E7A               	movwf	_t+1,c
  6350  00DF4A  0E01               	movlw	1
  6351  00DF4C  6E79               	movwf	_t,c
  6352  00DF4E                     l3593:
  6353                           
  6354                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  6355  00DF4E  0E34               	movlw	52
  6356  00DF50  6E34               	movwf	??_updateS1& (0+255),c
  6357  00DF52  0EF2               	movlw	242
  6358  00DF54                     u5077:
  6359  00DF54  2EE8               	decfsz	wreg,f,c
  6360  00DF56  D7FE               	bra	u5077
  6361  00DF58  2E34               	decfsz	??_updateS1& (0+255),f,c
  6362  00DF5A  D7FC               	bra	u5077
  6363                           
  6364                           ;motors.c: 68: if (t == 1 || t==8){LATDbits.LATD1 = 1; printf("1");}
  6365  00DF5C  0479               	decf	_t,w,c
  6366  00DF5E  107A               	iorwf	_t+1,w,c
  6367  00DF60  B4D8               	btfsc	status,2,c
  6368  00DF62  D005               	goto	l465
  6369  00DF64  0E08               	movlw	8
  6370  00DF66  1879               	xorwf	_t,w,c
  6371  00DF68  107A               	iorwf	_t+1,w,c
  6372  00DF6A  A4D8               	btfss	status,2,c
  6373  00DF6C  D008               	goto	l463
  6374  00DF6E                     l465:
  6375  00DF6E  828C               	bsf	3980,1,c	;volatile
  6376  00DF70  0E25               	movlw	low (STR_10+11)
  6377  00DF72  6E17               	movwf	printf@f,c
  6378  00DF74  0EFF               	movlw	high (STR_10+11)
  6379  00DF76  6E18               	movwf	printf@f+1,c
  6380  00DF78  EC71  F070         	call	_printf	;wreg free
  6381  00DF7C  D001               	goto	l3601
  6382  00DF7E                     l463:
  6383                           
  6384                           ;motors.c: 69: else{LATDbits.LATD1 = 0;}
  6385  00DF7E  928C               	bcf	3980,1,c	;volatile
  6386  00DF80                     l3601:
  6387                           
  6388                           ;motors.c: 70: if (t == 2 || t==7){LATBbits.LATB3 = 1; printf("2");}
  6389  00DF80  0E02               	movlw	2
  6390  00DF82  1879               	xorwf	_t,w,c
  6391  00DF84  107A               	iorwf	_t+1,w,c
  6392  00DF86  B4D8               	btfsc	status,2,c
  6393  00DF88  D005               	goto	l469
  6394  00DF8A  0E07               	movlw	7
  6395  00DF8C  1879               	xorwf	_t,w,c
  6396  00DF8E  107A               	iorwf	_t+1,w,c
  6397  00DF90  A4D8               	btfss	status,2,c
  6398  00DF92  D008               	goto	l467
  6399  00DF94                     l469:
  6400  00DF94  868A               	bsf	3978,3,c	;volatile
  6401  00DF96  0E32               	movlw	low (STR_9+11)
  6402  00DF98  6E17               	movwf	printf@f,c
  6403  00DF9A  0EFF               	movlw	high (STR_9+11)
  6404  00DF9C  6E18               	movwf	printf@f+1,c
  6405  00DF9E  EC71  F070         	call	_printf	;wreg free
  6406  00DFA2  D001               	goto	l3607
  6407  00DFA4                     l467:
  6408                           
  6409                           ;motors.c: 71: else{LATBbits.LATB3 = 0;}
  6410  00DFA4  968A               	bcf	3978,3,c	;volatile
  6411  00DFA6                     l3607:
  6412                           
  6413                           ;motors.c: 72: if (t == 3 || t==6){LATBbits.LATB2 = 1; printf("3");}
  6414  00DFA6  0E03               	movlw	3
  6415  00DFA8  1879               	xorwf	_t,w,c
  6416  00DFAA  107A               	iorwf	_t+1,w,c
  6417  00DFAC  B4D8               	btfsc	status,2,c
  6418  00DFAE  D005               	goto	l473
  6419  00DFB0  0E06               	movlw	6
  6420  00DFB2  1879               	xorwf	_t,w,c
  6421  00DFB4  107A               	iorwf	_t+1,w,c
  6422  00DFB6  A4D8               	btfss	status,2,c
  6423  00DFB8  D008               	goto	l471
  6424  00DFBA                     l473:
  6425  00DFBA  848A               	bsf	3978,2,c	;volatile
  6426  00DFBC  0E63               	movlw	low (STR_16+10)
  6427  00DFBE  6E17               	movwf	printf@f,c
  6428  00DFC0  0EFF               	movlw	high (STR_16+10)
  6429  00DFC2  6E18               	movwf	printf@f+1,c
  6430  00DFC4  EC71  F070         	call	_printf	;wreg free
  6431  00DFC8  D001               	goto	l3613
  6432  00DFCA                     l471:
  6433                           
  6434                           ;motors.c: 73: else{LATBbits.LATB2 = 0;}
  6435  00DFCA  948A               	bcf	3978,2,c	;volatile
  6436  00DFCC                     l3613:
  6437                           
  6438                           ;motors.c: 74: if (t == 4 || t==5){LATBbits.LATB0 = 1; printf("4");}
  6439  00DFCC  0E04               	movlw	4
  6440  00DFCE  1879               	xorwf	_t,w,c
  6441  00DFD0  107A               	iorwf	_t+1,w,c
  6442  00DFD2  B4D8               	btfsc	status,2,c
  6443  00DFD4  D005               	goto	l477
  6444  00DFD6  0E05               	movlw	5
  6445  00DFD8  1879               	xorwf	_t,w,c
  6446  00DFDA  107A               	iorwf	_t+1,w,c
  6447  00DFDC  A4D8               	btfss	status,2,c
  6448  00DFDE  D008               	goto	l475
  6449  00DFE0                     l477:
  6450  00DFE0  808A               	bsf	3978,0,c	;volatile
  6451  00DFE2  0EC3               	movlw	low (STR_66+13)
  6452  00DFE4  6E17               	movwf	printf@f,c
  6453  00DFE6  0EFE               	movlw	high (STR_66+13)
  6454  00DFE8  6E18               	movwf	printf@f+1,c
  6455  00DFEA  EC71  F070         	call	_printf	;wreg free
  6456  00DFEE  0012               	return	
  6457  00DFF0                     l475:
  6458                           
  6459                           ;motors.c: 75: else{LATBbits.LATB0 = 0;}
  6460  00DFF0  908A               	bcf	3978,0,c	;volatile
  6461                           
  6462                           ;motors.c: 76: }
  6463  00DFF2  0012               	return	
  6464  00DFF4                     l3619:
  6465                           
  6466                           ;motors.c: 77: else{
  6467                           ;motors.c: 78: _delay((unsigned long)((10)*(32000000/4000.0)));
  6468  00DFF4  0E68               	movlw	104
  6469  00DFF6  6E34               	movwf	??_updateS1& (0+255),c
  6470  00DFF8  0EE4               	movlw	228
  6471  00DFFA                     u5087:
  6472  00DFFA  2EE8               	decfsz	wreg,f,c
  6473  00DFFC  D7FE               	bra	u5087
  6474  00DFFE  2E34               	decfsz	??_updateS1& (0+255),f,c
  6475  00E000  D7FC               	bra	u5087
  6476  00E002  D000               	nop2	
  6477                           
  6478                           ;motors.c: 80: if(mode == 1){
  6479  00E004  0432               	decf	updateS1@mode,w,c
  6480  00E006  1033               	iorwf	updateS1@mode+1,w,c
  6481  00E008  A4D8               	btfss	status,2,c
  6482  00E00A  D013               	goto	l3629
  6483                           
  6484                           ;motors.c: 81: s1 ++;
  6485  00E00C  0100               	movlb	0	; () banked
  6486  00E00E  4B88               	infsnz	_s1& (0+255),f,b
  6487  00E010  2B89               	incf	(_s1+1)& (0+255),f,b
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;motors.c: 82: if (s1>4) {s1=1;}
  6491  00E012  0100               	movlb	0	; () banked
  6492  00E014  BF89               	btfsc	(_s1+1)& (0+255),7,b
  6493  00E016  D025               	goto	l3637
  6494  00E018  0100               	movlb	0	; () banked
  6495  00E01A  5189               	movf	(_s1+1)& (0+255),w,b
  6496  00E01C  E105               	bnz	u3140
  6497  00E01E  0E05               	movlw	5
  6498  00E020  0100               	movlb	0	; () banked
  6499  00E022  5D88               	subwf	_s1& (0+255),w,b
  6500  00E024  A0D8               	btfss	status,0,c
  6501  00E026  D01D               	goto	l3637
  6502  00E028                     u3140:
  6503                           
  6504                           ; BSR set to: 0
  6505  00E028  0E00               	movlw	0
  6506  00E02A  0100               	movlb	0	; () banked
  6507  00E02C  6F89               	movwf	(_s1+1)& (0+255),b
  6508  00E02E  0E01               	movlw	1
  6509  00E030  D017               	goto	L8
  6510  00E032                     l3629:
  6511                           
  6512                           ;motors.c: 85: else if(mode == 2){
  6513  00E032  0E02               	movlw	2
  6514  00E034  1832               	xorwf	updateS1@mode,w,c
  6515  00E036  1033               	iorwf	updateS1@mode+1,w,c
  6516  00E038  A4D8               	btfss	status,2,c
  6517  00E03A  D013               	goto	l3637
  6518                           
  6519                           ;motors.c: 86: s1 --;
  6520  00E03C  0100               	movlb	0	; () banked
  6521  00E03E  0788               	decf	_s1& (0+255),f,b
  6522  00E040  A0D8               	btfss	status,0,c
  6523  00E042  0789               	decf	(_s1+1)& (0+255),f,b
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;motors.c: 87: if (s1<1) {s1=4;}
  6527  00E044  0100               	movlb	0	; () banked
  6528  00E046  BF89               	btfsc	(_s1+1)& (0+255),7,b
  6529  00E048  D007               	goto	l3635
  6530  00E04A  0100               	movlb	0	; () banked
  6531  00E04C  5189               	movf	(_s1+1)& (0+255),w,b
  6532  00E04E  E109               	bnz	l3637
  6533  00E050  0100               	movlb	0	; () banked
  6534  00E052  0588               	decf	_s1& (0+255),w,b
  6535  00E054  B0D8               	btfsc	status,0,c
  6536  00E056  D005               	goto	l3637
  6537  00E058                     l3635:
  6538                           
  6539                           ; BSR set to: 0
  6540  00E058  0E00               	movlw	0
  6541  00E05A  0100               	movlb	0	; () banked
  6542  00E05C  6F89               	movwf	(_s1+1)& (0+255),b
  6543  00E05E  0E04               	movlw	4
  6544  00E060                     L8:
  6545  00E060  6F88               	movwf	_s1& (0+255),b
  6546  00E062                     l3637:
  6547                           
  6548                           ;motors.c: 88: }
  6549                           ;motors.c: 90: if (s1 == 1){LATDbits.LATD1 = 1; printf("1");}
  6550  00E062  0100               	movlb	0	; () banked
  6551  00E064  0588               	decf	_s1& (0+255),w,b
  6552  00E066  0100               	movlb	0	; () banked
  6553  00E068  1189               	iorwf	(_s1+1)& (0+255),w,b
  6554  00E06A  A4D8               	btfss	status,2,c
  6555  00E06C  D008               	goto	l485
  6556                           
  6557                           ; BSR set to: 0
  6558  00E06E  828C               	bsf	3980,1,c	;volatile
  6559                           
  6560                           ; BSR set to: 0
  6561  00E070  0E25               	movlw	low (STR_10+11)
  6562  00E072  6E17               	movwf	printf@f,c
  6563  00E074  0EFF               	movlw	high (STR_10+11)
  6564  00E076  6E18               	movwf	printf@f+1,c
  6565  00E078  EC71  F070         	call	_printf	;wreg free
  6566  00E07C  D001               	goto	l3643
  6567  00E07E                     l485:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;motors.c: 91: else{LATDbits.LATD1 = 0;}
  6571  00E07E  928C               	bcf	3980,1,c	;volatile
  6572  00E080                     l3643:
  6573                           
  6574                           ;motors.c: 92: if (s1 == 2){LATBbits.LATB3 = 1; printf("2");}
  6575  00E080  0E02               	movlw	2
  6576  00E082  0100               	movlb	0	; () banked
  6577  00E084  1988               	xorwf	_s1& (0+255),w,b
  6578  00E086  0100               	movlb	0	; () banked
  6579  00E088  1189               	iorwf	(_s1+1)& (0+255),w,b
  6580  00E08A  A4D8               	btfss	status,2,c
  6581  00E08C  D008               	goto	l487
  6582                           
  6583                           ; BSR set to: 0
  6584  00E08E  868A               	bsf	3978,3,c	;volatile
  6585                           
  6586                           ; BSR set to: 0
  6587  00E090  0E32               	movlw	low (STR_9+11)
  6588  00E092  6E17               	movwf	printf@f,c
  6589  00E094  0EFF               	movlw	high (STR_9+11)
  6590  00E096  6E18               	movwf	printf@f+1,c
  6591  00E098  EC71  F070         	call	_printf	;wreg free
  6592  00E09C  D001               	goto	l3649
  6593  00E09E                     l487:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;motors.c: 93: else{LATBbits.LATB3 = 0;}
  6597  00E09E  968A               	bcf	3978,3,c	;volatile
  6598  00E0A0                     l3649:
  6599                           
  6600                           ;motors.c: 94: if (s1 == 3){LATBbits.LATB2 = 1; printf("3");}
  6601  00E0A0  0E03               	movlw	3
  6602  00E0A2  0100               	movlb	0	; () banked
  6603  00E0A4  1988               	xorwf	_s1& (0+255),w,b
  6604  00E0A6  0100               	movlb	0	; () banked
  6605  00E0A8  1189               	iorwf	(_s1+1)& (0+255),w,b
  6606  00E0AA  A4D8               	btfss	status,2,c
  6607  00E0AC  D008               	goto	l489
  6608                           
  6609                           ; BSR set to: 0
  6610  00E0AE  848A               	bsf	3978,2,c	;volatile
  6611                           
  6612                           ; BSR set to: 0
  6613  00E0B0  0E63               	movlw	low (STR_16+10)
  6614  00E0B2  6E17               	movwf	printf@f,c
  6615  00E0B4  0EFF               	movlw	high (STR_16+10)
  6616  00E0B6  6E18               	movwf	printf@f+1,c
  6617  00E0B8  EC71  F070         	call	_printf	;wreg free
  6618  00E0BC  D001               	goto	l3655
  6619  00E0BE                     l489:
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;motors.c: 95: else{LATBbits.LATB2 = 0;}
  6623  00E0BE  948A               	bcf	3978,2,c	;volatile
  6624  00E0C0                     l3655:
  6625                           
  6626                           ;motors.c: 96: if (s1 == 4){LATBbits.LATB0 = 1; printf("4");}
  6627  00E0C0  0E04               	movlw	4
  6628  00E0C2  0100               	movlb	0	; () banked
  6629  00E0C4  1988               	xorwf	_s1& (0+255),w,b
  6630  00E0C6  0100               	movlb	0	; () banked
  6631  00E0C8  1189               	iorwf	(_s1+1)& (0+255),w,b
  6632  00E0CA  A4D8               	btfss	status,2,c
  6633  00E0CC  D008               	goto	l491
  6634                           
  6635                           ; BSR set to: 0
  6636  00E0CE  808A               	bsf	3978,0,c	;volatile
  6637                           
  6638                           ; BSR set to: 0
  6639  00E0D0  0EC3               	movlw	low (STR_66+13)
  6640  00E0D2  6E17               	movwf	printf@f,c
  6641  00E0D4  0EFE               	movlw	high (STR_66+13)
  6642  00E0D6  6E18               	movwf	printf@f+1,c
  6643  00E0D8  EC71  F070         	call	_printf	;wreg free
  6644  00E0DC  0012               	return	
  6645  00E0DE                     l491:
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;motors.c: 97: else{LATBbits.LATB0 = 0;}
  6649  00E0DE  908A               	bcf	3978,0,c	;volatile
  6650                           
  6651                           ; BSR set to: 0
  6652                           
  6653                           ; BSR set to: 0
  6654  00E0E0  0012               	return	
  6655  00E0E2                     __end_of_updateS1:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           indf2	equ	0xFDF
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function _timePassed *****************
  6668 ;; Defined at:
  6669 ;;		line 19 in file "logic.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  start           2    6[COMRAM] int 
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  2    6[COMRAM] int 
  6676 ;; Registers used:
  6677 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6683 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;Total ram usage:       11 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    1
  6690 ;; This function calls:
  6691 ;;		___wmul
  6692 ;; This function is called by:
  6693 ;;		_main
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text10
  6698  00DABE                     __ptext10:
  6699                           	opt stack 0
  6700  00DABE                     _timePassed:
  6701                           	opt stack 29
  6702                           
  6703                           ;logic.c: 21: else{return ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10) - st
      +                          art;}
  6704                           
  6705                           ;logic.c: 20: if(((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) + ((
      +                          time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10) >= 86400){ret
      +                          urn ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) + ((time[1] & 0xF
  6706                           
  6707                           ;incstack = 0
  6708  00DABE  C007  F009         	movff	timePassed@start,??_timePassed
  6709  00DAC2  C008  F00A         	movff	timePassed@start+1,??_timePassed+1
  6710  00DAC6  1E09               	comf	??_timePassed,f,c
  6711  00DAC8  1E0A               	comf	??_timePassed+1,f,c
  6712  00DACA  4A09               	infsnz	??_timePassed,f,c
  6713  00DACC  2A0A               	incf	??_timePassed+1,f,c
  6714  00DACE  C072  F00B         	movff	_time+2,??_timePassed+2
  6715  00DAD2  0E0F               	movlw	15
  6716  00DAD4  160B               	andwf	??_timePassed+2,f,c
  6717  00DAD6  500B               	movf	??_timePassed+2,w,c
  6718  00DAD8  6E01               	movwf	___wmul@multiplier,c
  6719  00DADA  6A02               	clrf	___wmul@multiplier+1,c
  6720  00DADC  0E0E               	movlw	14
  6721  00DADE  6E04               	movwf	___wmul@multiplicand+1,c
  6722  00DAE0  0E10               	movlw	16
  6723  00DAE2  6E03               	movwf	___wmul@multiplicand,c
  6724  00DAE4  EC4C  F06B         	call	___wmul	;wreg free
  6725  00DAE8  C070  F00C         	movff	_time,??_timePassed+3
  6726  00DAEC  3A0C               	swapf	??_timePassed+3,f,c
  6727  00DAEE  0E0F               	movlw	15
  6728  00DAF0  160C               	andwf	??_timePassed+3,f,c
  6729  00DAF2  0E0F               	movlw	15
  6730  00DAF4  160C               	andwf	??_timePassed+3,f,c
  6731  00DAF6  500C               	movf	??_timePassed+3,w,c
  6732  00DAF8  0D0A               	mullw	10
  6733  00DAFA  5070               	movf	_time,w,c
  6734  00DAFC  0B0F               	andlw	15
  6735  00DAFE  6E0D               	movwf	(??_timePassed+4)& (0+255),c
  6736  00DB00  6A0E               	clrf	(??_timePassed+5)& (0+255),c
  6737  00DB02  50F3               	movf	prodl,w,c
  6738  00DB04  260D               	addwf	??_timePassed+4,f,c
  6739  00DB06  50F4               	movf	prodh,w,c
  6740  00DB08  220E               	addwfc	??_timePassed+5,f,c
  6741  00DB0A  C071  F00F         	movff	_time+1,??_timePassed+6
  6742  00DB0E  0E0F               	movlw	15
  6743  00DB10  160F               	andwf	??_timePassed+6,f,c
  6744  00DB12  500F               	movf	??_timePassed+6,w,c
  6745  00DB14  0D3C               	mullw	60
  6746  00DB16  50F3               	movf	prodl,w,c
  6747  00DB18  260D               	addwf	??_timePassed+4,f,c
  6748  00DB1A  50F4               	movf	prodh,w,c
  6749  00DB1C  220E               	addwfc	??_timePassed+5,f,c
  6750  00DB1E  C071  F010         	movff	_time+1,??_timePassed+7
  6751  00DB22  3A10               	swapf	??_timePassed+7,f,c
  6752  00DB24  0E0F               	movlw	15
  6753  00DB26  1610               	andwf	??_timePassed+7,f,c
  6754  00DB28  0E0F               	movlw	15
  6755  00DB2A  1610               	andwf	??_timePassed+7,f,c
  6756  00DB2C  5010               	movf	??_timePassed+7,w,c
  6757  00DB2E  0D0A               	mullw	10
  6758  00DB30  50F3               	movf	prodl,w,c
  6759  00DB32  260D               	addwf	??_timePassed+4,f,c
  6760  00DB34  50F4               	movf	prodh,w,c
  6761  00DB36  220E               	addwfc	??_timePassed+5,f,c
  6762  00DB38  5001               	movf	?___wmul,w,c
  6763  00DB3A  260D               	addwf	??_timePassed+4,f,c
  6764  00DB3C  5002               	movf	?___wmul+1,w,c
  6765  00DB3E  220E               	addwfc	??_timePassed+5,f,c
  6766  00DB40  C072  F011         	movff	_time+2,??_timePassed+8
  6767  00DB44  3A11               	swapf	??_timePassed+8,f,c
  6768  00DB46  0E0F               	movlw	15
  6769  00DB48  1611               	andwf	??_timePassed+8,f,c
  6770  00DB4A  0E0F               	movlw	15
  6771  00DB4C  1611               	andwf	??_timePassed+8,f,c
  6772  00DB4E  5011               	movf	??_timePassed+8,w,c
  6773  00DB50  0D0A               	mullw	10
  6774  00DB52  50F3               	movf	prodl,w,c
  6775  00DB54  260D               	addwf	??_timePassed+4,f,c
  6776  00DB56  50F4               	movf	prodh,w,c
  6777  00DB58  220E               	addwfc	??_timePassed+5,f,c
  6778  00DB5A  5009               	movf	??_timePassed,w,c
  6779  00DB5C  240D               	addwf	??_timePassed+4,w,c
  6780  00DB5E  6E07               	movwf	?_timePassed,c
  6781  00DB60  500A               	movf	??_timePassed+1,w,c
  6782  00DB62  200E               	addwfc	??_timePassed+5,w,c
  6783  00DB64  6E08               	movwf	?_timePassed+1,c
  6784  00DB66  0012               	return	
  6785  00DB68                     __end_of_timePassed:
  6786                           	opt stack 0
  6787                           tblptru	equ	0xFF8
  6788                           prodh	equ	0xFF4
  6789                           prodl	equ	0xFF3
  6790                           postinc0	equ	0xFEE
  6791                           wreg	equ	0xFE8
  6792                           indf2	equ	0xFDF
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function _readADC *****************
  6798 ;; Defined at:
  6799 ;;		line 24 in file "logic.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  channel         1    wreg     unsigned char 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  channel         1    1[COMRAM] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  1    wreg      void 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;Total ram usage:        2 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_main
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text11
  6827  00D674                     __ptext11:
  6828                           	opt stack 0
  6829  00D674                     _readADC:
  6830                           	opt stack 30
  6831                           
  6832                           ;incstack = 0
  6833                           ;readADC@channel stored from wreg
  6834  00D674  6E02               	movwf	readADC@channel,c
  6835                           
  6836                           ;logic.c: 26: ADCON0 = ((channel <<2));
  6837  00D676  4402               	rlncf	readADC@channel,w,c
  6838  00D678  46E8               	rlncf	wreg,f,c
  6839  00D67A  0BFC               	andlw	252
  6840  00D67C  6EC2               	movwf	4034,c	;volatile
  6841                           
  6842                           ;logic.c: 27: ADCON0bits.ADON = 1;
  6843  00D67E  80C2               	bsf	4034,0,c	;volatile
  6844                           
  6845                           ;logic.c: 28: ADCON0bits.GO = 1;
  6846  00D680  82C2               	bsf	4034,1,c	;volatile
  6847                           
  6848                           ;logic.c: 29: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  6849  00D682  D007               	goto	l3801
  6850  00D684                     l3799:
  6851  00D684  0E34               	movlw	52
  6852  00D686  6E01               	movwf	??_readADC& (0+255),c
  6853  00D688  0EF2               	movlw	242
  6854  00D68A                     u5097:
  6855  00D68A  2EE8               	decfsz	wreg,f,c
  6856  00D68C  D7FE               	bra	u5097
  6857  00D68E  2E01               	decfsz	??_readADC& (0+255),f,c
  6858  00D690  D7FC               	bra	u5097
  6859  00D692                     l3801:
  6860  00D692  A2C2               	btfss	4034,1,c	;volatile
  6861  00D694  0012               	return	
  6862  00D696  D7F6               	goto	l3799
  6863  00D698                     __end_of_readADC:
  6864                           	opt stack 0
  6865                           tblptru	equ	0xFF8
  6866                           prodh	equ	0xFF4
  6867                           prodl	equ	0xFF3
  6868                           postinc0	equ	0xFEE
  6869                           wreg	equ	0xFE8
  6870                           indf2	equ	0xFDF
  6871                           fsr2h	equ	0xFDA
  6872                           fsr2l	equ	0xFD9
  6873                           status	equ	0xFD8
  6874                           
  6875 ;; *************** function _keyinterrupt *****************
  6876 ;; Defined at:
  6877 ;;		line 24 in file "interface.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;		None
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;		None
  6882 ;; Return value:  Size  Location     Type
  6883 ;;                  1    wreg      void 
  6884 ;; Registers used:
  6885 ;;		wreg, status,2, status,0
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;Total ram usage:        0 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_main
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text12
  6905  00D620                     __ptext12:
  6906                           	opt stack 0
  6907  00D620                     _keyinterrupt:
  6908                           	opt stack 30
  6909                           
  6910                           ;interface.c: 25: if(PORTBbits.RB1 == 1){
  6911                           
  6912                           ;incstack = 0
  6913  00D620  A281               	btfss	3969,1,c	;volatile
  6914  00D622  D006               	goto	l730
  6915                           
  6916                           ;interface.c: 26: keypress = (PORTB & 0xF0)>>4;
  6917  00D624  3881               	swapf	3969,w,c	;volatile
  6918  00D626  0B0F               	andlw	15
  6919  00D628  0B0F               	andlw	15
  6920  00D62A  6E7F               	movwf	_keypress,c	;volatile
  6921  00D62C                     l731:
  6922  00D62C  B281               	btfsc	3969,1,c	;volatile
  6923  00D62E  D7FE               	goto	l731
  6924  00D630                     l730:
  6925                           
  6926                           ;interface.c: 32: }
  6927                           ;interface.c: 38: }
  6928                           ;interface.c: 39: __nop();
  6929  00D630  F000               	nop	
  6930  00D632  0012               	return		;funcret
  6931  00D634                     __end_of_keyinterrupt:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           postinc0	equ	0xFEE
  6937                           wreg	equ	0xFE8
  6938                           indf2	equ	0xFDF
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _initialize *****************
  6944 ;; Defined at:
  6945 ;;		line 21 in file "main.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, status,0, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    3
  6966 ;; This function calls:
  6967 ;;		_I2C_Master_Init
  6968 ;;		_initLCD
  6969 ;; This function is called by:
  6970 ;;		_main
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text13
  6975  00D9C4                     __ptext13:
  6976                           	opt stack 0
  6977  00D9C4                     _initialize:
  6978                           	opt stack 27
  6979                           
  6980                           ;main.c: 23: OSCCON = 0xF0;
  6981                           
  6982                           ;incstack = 0
  6983  00D9C4  0EF0               	movlw	240
  6984  00D9C6  6ED3               	movwf	4051,c	;volatile
  6985                           
  6986                           ;main.c: 24: OSCTUNEbits.PLLEN = 1;
  6987  00D9C8  8C9B               	bsf	3995,6,c	;volatile
  6988                           
  6989                           ;main.c: 26: TRISA = 0b11101111;
  6990  00D9CA  0EEF               	movlw	239
  6991  00D9CC  6E92               	movwf	3986,c	;volatile
  6992                           
  6993                           ;main.c: 27: TRISB = 0b11110010;
  6994  00D9CE  0EF2               	movlw	242
  6995  00D9D0  6E93               	movwf	3987,c	;volatile
  6996                           
  6997                           ;main.c: 28: TRISC = 0b00000000;
  6998  00D9D2  0E00               	movlw	0
  6999  00D9D4  6E94               	movwf	3988,c	;volatile
  7000                           
  7001                           ;main.c: 30: TRISD = 0x00;
  7002  00D9D6  0E00               	movlw	0
  7003  00D9D8  6E95               	movwf	3989,c	;volatile
  7004                           
  7005                           ;main.c: 31: TRISE = 0b00000001;
  7006  00D9DA  0E01               	movlw	1
  7007  00D9DC  6E96               	movwf	3990,c	;volatile
  7008                           
  7009                           ;main.c: 33: PR2 = 0xff;
  7010  00D9DE  68CB               	setf	4043,c	;volatile
  7011                           
  7012                           ;main.c: 34: CCP1CON = 0b00001100;
  7013  00D9E0  0E0C               	movlw	12
  7014  00D9E2  6EBD               	movwf	4029,c	;volatile
  7015                           
  7016                           ;main.c: 35: CCPR1L = 0x00;
  7017  00D9E4  0E00               	movlw	0
  7018  00D9E6  6EBE               	movwf	4030,c	;volatile
  7019                           
  7020                           ;main.c: 36: CCP2CON = 0b00001100;
  7021  00D9E8  0E0C               	movlw	12
  7022  00D9EA  6EBA               	movwf	4026,c	;volatile
  7023                           
  7024                           ;main.c: 37: CCPR2L = 0x00;
  7025  00D9EC  0E00               	movlw	0
  7026  00D9EE  6EBB               	movwf	4027,c	;volatile
  7027                           
  7028                           ;main.c: 38: T2CON = 0b00000101;
  7029  00D9F0  0E05               	movlw	5
  7030  00D9F2  6ECA               	movwf	4042,c	;volatile
  7031                           
  7032                           ;main.c: 40: LATA = 0x00;
  7033  00D9F4  0E00               	movlw	0
  7034  00D9F6  6E89               	movwf	3977,c	;volatile
  7035                           
  7036                           ;main.c: 41: LATB = 0x00;
  7037  00D9F8  0E00               	movlw	0
  7038  00D9FA  6E8A               	movwf	3978,c	;volatile
  7039                           
  7040                           ;main.c: 42: LATC = 0x00;
  7041  00D9FC  0E00               	movlw	0
  7042  00D9FE  6E8B               	movwf	3979,c	;volatile
  7043                           
  7044                           ;main.c: 43: LATD = 0x00;
  7045  00DA00  0E00               	movlw	0
  7046  00DA02  6E8C               	movwf	3980,c	;volatile
  7047                           
  7048                           ;main.c: 44: LATE = 0x00;
  7049  00DA04  0E00               	movlw	0
  7050  00DA06  6E8D               	movwf	3981,c	;volatile
  7051                           
  7052                           ;main.c: 46: initLCD();
  7053  00DA08  EC86  F06B         	call	_initLCD	;wreg free
  7054                           
  7055                           ;main.c: 48: I2C_Master_Init(10000);
  7056  00DA0C  0E10               	movlw	16
  7057  00DA0E  6E0E               	movwf	I2C_Master_Init@c,c
  7058  00DA10  0E27               	movlw	39
  7059  00DA12  6E0F               	movwf	I2C_Master_Init@c+1,c
  7060  00DA14  0E00               	movlw	0
  7061  00DA16  6E10               	movwf	I2C_Master_Init@c+2,c
  7062  00DA18  0E00               	movlw	0
  7063  00DA1A  6E11               	movwf	I2C_Master_Init@c+3,c
  7064  00DA1C  EC1E  F06C         	call	_I2C_Master_Init	;wreg free
  7065                           
  7066                           ;main.c: 51: nRBPU = 0;
  7067  00DA20  9EF1               	bcf	intcon2,7,c	;volatile
  7068                           
  7069                           ;main.c: 52: ADCON0 = 00000001;
  7070  00DA22  0E01               	movlw	1
  7071  00DA24  6EC2               	movwf	4034,c	;volatile
  7072                           
  7073                           ;main.c: 53: ADCON1 = 0b00001001;
  7074  00DA26  0E09               	movlw	9
  7075  00DA28  6EC1               	movwf	4033,c	;volatile
  7076                           
  7077                           ;main.c: 54: ADCON2 = 0b10001010;
  7078  00DA2A  0E8A               	movlw	138
  7079  00DA2C  6EC0               	movwf	4032,c	;volatile
  7080                           
  7081                           ;main.c: 55: CVRCON = 0x00;
  7082  00DA2E  0E00               	movlw	0
  7083  00DA30  6EB5               	movwf	4021,c	;volatile
  7084                           
  7085                           ;main.c: 56: CMCONbits.CIS = 0;
  7086  00DA32  96B4               	bcf	4020,3,c	;volatile
  7087                           
  7088                           ;main.c: 57: ADFM = 1;
  7089  00DA34  8EC0               	bsf	4032,7,c	;volatile
  7090                           
  7091                           ;main.c: 59: T0CON = 0b11011000;
  7092  00DA36  0ED8               	movlw	216
  7093  00DA38  6ED5               	movwf	4053,c	;volatile
  7094  00DA3A  0012               	return		;funcret
  7095  00DA3C                     __end_of_initialize:
  7096                           	opt stack 0
  7097                           tblptru	equ	0xFF8
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon2	equ	0xFF1
  7101                           postinc0	equ	0xFEE
  7102                           wreg	equ	0xFE8
  7103                           indf2	equ	0xFDF
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function _initLCD *****************
  7109 ;; Defined at:
  7110 ;;		line 11 in file "lcd.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;Total ram usage:        1 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    2
  7131 ;; This function calls:
  7132 ;;		_lcdInst
  7133 ;; This function is called by:
  7134 ;;		_initialize
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text14
  7139  00D70C                     __ptext14:
  7140                           	opt stack 0
  7141  00D70C                     _initLCD:
  7142                           	opt stack 27
  7143                           
  7144                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  7145                           
  7146                           ;incstack = 0
  7147  00D70C  0E9C               	movlw	156
  7148  00D70E  6E04               	movwf	??_initLCD& (0+255),c
  7149  00D710  0ED7               	movlw	215
  7150  00D712                     u5107:
  7151  00D712  2EE8               	decfsz	wreg,f,c
  7152  00D714  D7FE               	bra	u5107
  7153  00D716  2E04               	decfsz	??_initLCD& (0+255),f,c
  7154  00D718  D7FC               	bra	u5107
  7155  00D71A  F000               	nop	
  7156                           
  7157                           ;lcd.c: 13: lcdInst(0b00110011);
  7158  00D71C  0E33               	movlw	51
  7159  00D71E  ECF1  F06A         	call	_lcdInst
  7160                           
  7161                           ;lcd.c: 14: lcdInst(0b00110010);
  7162  00D722  0E32               	movlw	50
  7163  00D724  ECF1  F06A         	call	_lcdInst
  7164                           
  7165                           ;lcd.c: 15: lcdInst(0b00101000);
  7166  00D728  0E28               	movlw	40
  7167  00D72A  ECF1  F06A         	call	_lcdInst
  7168                           
  7169                           ;lcd.c: 16: lcdInst(0b00001111);
  7170  00D72E  0E0F               	movlw	15
  7171  00D730  ECF1  F06A         	call	_lcdInst
  7172                           
  7173                           ;lcd.c: 17: lcdInst(0b00000110);
  7174  00D734  0E06               	movlw	6
  7175  00D736  ECF1  F06A         	call	_lcdInst
  7176                           
  7177                           ;lcd.c: 18: lcdInst(0b00000001);
  7178  00D73A  0E01               	movlw	1
  7179  00D73C  ECF1  F06A         	call	_lcdInst
  7180                           
  7181                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  7182  00D740  0E9C               	movlw	156
  7183  00D742  6E04               	movwf	??_initLCD& (0+255),c
  7184  00D744  0ED7               	movlw	215
  7185  00D746                     u5117:
  7186  00D746  2EE8               	decfsz	wreg,f,c
  7187  00D748  D7FE               	bra	u5117
  7188  00D74A  2E04               	decfsz	??_initLCD& (0+255),f,c
  7189  00D74C  D7FC               	bra	u5117
  7190  00D74E  F000               	nop	
  7191  00D750  0012               	return		;funcret
  7192  00D752                     __end_of_initLCD:
  7193                           	opt stack 0
  7194                           tblptru	equ	0xFF8
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon2	equ	0xFF1
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf2	equ	0xFDF
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _I2C_Master_Init *****************
  7206 ;; Defined at:
  7207 ;;		line 20 in file "I2C.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  c               4   13[COMRAM] const unsigned long 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;		None
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      void 
  7214 ;; Registers used:
  7215 ;;		wreg, status,2, status,0, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;Total ram usage:        8 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    1
  7228 ;; This function calls:
  7229 ;;		___lldiv
  7230 ;; This function is called by:
  7231 ;;		_initialize
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text15
  7236  00D83C                     __ptext15:
  7237                           	opt stack 0
  7238  00D83C                     _I2C_Master_Init:
  7239                           	opt stack 28
  7240                           
  7241                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  7242                           
  7243                           ;incstack = 0
  7244  00D83C  0E00               	movlw	0
  7245  00D83E  6EC7               	movwf	4039,c	;volatile
  7246                           
  7247                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  7248  00D840  0E28               	movlw	40
  7249  00D842  6EC6               	movwf	4038,c	;volatile
  7250                           
  7251                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  7252  00D844  0E00               	movlw	0
  7253  00D846  6EC5               	movwf	4037,c	;volatile
  7254                           
  7255                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  7256  00D848  0E00               	movlw	0
  7257  00D84A  6E01               	movwf	___lldiv@dividend,c
  7258  00D84C  0E48               	movlw	72
  7259  00D84E  6E02               	movwf	___lldiv@dividend+1,c
  7260  00D850  0EE8               	movlw	232
  7261  00D852  6E03               	movwf	___lldiv@dividend+2,c
  7262  00D854  0E01               	movlw	1
  7263  00D856  6E04               	movwf	___lldiv@dividend+3,c
  7264  00D858  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7265  00D85C  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7266  00D860  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7267  00D864  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7268  00D868  0E02               	movlw	2
  7269  00D86A                     u2685:
  7270  00D86A  90D8               	bcf	status,0,c
  7271  00D86C  3612               	rlcf	??_I2C_Master_Init,f,c
  7272  00D86E  3613               	rlcf	??_I2C_Master_Init+1,f,c
  7273  00D870  3614               	rlcf	??_I2C_Master_Init+2,f,c
  7274  00D872  3615               	rlcf	??_I2C_Master_Init+3,f,c
  7275  00D874  2EE8               	decfsz	wreg,f,c
  7276  00D876  D7F9               	goto	u2685
  7277  00D878  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  7278  00D87C  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7279  00D880  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7280  00D884  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7281  00D888  EC1E  F06D         	call	___lldiv	;wreg free
  7282  00D88C  0401               	decf	?___lldiv,w,c
  7283  00D88E  6EC8               	movwf	4040,c	;volatile
  7284                           
  7285                           ;I2C.c: 27: TRISC3 = 1;
  7286  00D890  8694               	bsf	3988,3,c	;volatile
  7287                           
  7288                           ;I2C.c: 28: TRISC4 = 1;
  7289  00D892  8894               	bsf	3988,4,c	;volatile
  7290  00D894  0012               	return		;funcret
  7291  00D896                     __end_of_I2C_Master_Init:
  7292                           	opt stack 0
  7293                           tblptru	equ	0xFF8
  7294                           prodh	equ	0xFF4
  7295                           prodl	equ	0xFF3
  7296                           intcon2	equ	0xFF1
  7297                           postinc0	equ	0xFEE
  7298                           wreg	equ	0xFE8
  7299                           indf2	equ	0xFDF
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _homescreen *****************
  7305 ;; Defined at:
  7306 ;;		line 3 in file "interface.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;		None
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;		None
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      void 
  7313 ;; Registers used:
  7314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:        0 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    3
  7327 ;; This function calls:
  7328 ;;		_lcdInst
  7329 ;;		_printf
  7330 ;; This function is called by:
  7331 ;;		_main
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text16
  7336  00D896                     __ptext16:
  7337                           	opt stack 0
  7338  00D896                     _homescreen:
  7339                           	opt stack 27
  7340                           
  7341                           ;interface.c: 4: lcdInst(0b10000000);;
  7342                           
  7343                           ;incstack = 0
  7344  00D896  0E80               	movlw	128
  7345  00D898  ECF1  F06A         	call	_lcdInst
  7346                           
  7347                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  7348  00D89C  0E26               	movlw	low STR_57
  7349  00D89E  6E17               	movwf	printf@f,c
  7350  00D8A0  0EFE               	movlw	high STR_57
  7351  00D8A2  6E18               	movwf	printf@f+1,c
  7352  00D8A4  C076  F019         	movff	_time+6,?_printf+2
  7353  00D8A8  6A1A               	clrf	?_printf+3,c
  7354  00D8AA  C075  F01B         	movff	_time+5,?_printf+4
  7355  00D8AE  6A1C               	clrf	?_printf+5,c
  7356  00D8B0  C074  F01D         	movff	_time+4,?_printf+6
  7357  00D8B4  6A1E               	clrf	?_printf+7,c
  7358  00D8B6  EC71  F070         	call	_printf	;wreg free
  7359                           
  7360                           ;interface.c: 6: printf("3:Start");
  7361  00D8BA  0EE8               	movlw	low STR_58
  7362  00D8BC  6E17               	movwf	printf@f,c
  7363  00D8BE  0EFF               	movlw	high STR_58
  7364  00D8C0  6E18               	movwf	printf@f+1,c
  7365  00D8C2  EC71  F070         	call	_printf	;wreg free
  7366                           
  7367                           ;interface.c: 7: lcdInst(0b11000000);;
  7368  00D8C6  0EC0               	movlw	192
  7369  00D8C8  ECF1  F06A         	call	_lcdInst
  7370                           
  7371                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  7372  00D8CC  0EC5               	movlw	low STR_59
  7373  00D8CE  6E17               	movwf	printf@f,c
  7374  00D8D0  0EFE               	movlw	high STR_59
  7375  00D8D2  6E18               	movwf	printf@f+1,c
  7376  00D8D4  C072  F019         	movff	_time+2,?_printf+2
  7377  00D8D8  6A1A               	clrf	?_printf+3,c
  7378  00D8DA  C071  F01B         	movff	_time+1,?_printf+4
  7379  00D8DE  6A1C               	clrf	?_printf+5,c
  7380  00D8E0  C070  F01D         	movff	_time,?_printf+6
  7381  00D8E4  6A1E               	clrf	?_printf+7,c
  7382  00D8E6  EC71  F070         	call	_printf	;wreg free
  7383                           
  7384                           ;interface.c: 9: printf(" 2:Logs");
  7385  00D8EA  0EE0               	movlw	low STR_60
  7386  00D8EC  6E17               	movwf	printf@f,c
  7387  00D8EE  0EFF               	movlw	high STR_60
  7388  00D8F0  6E18               	movwf	printf@f+1,c
  7389  00D8F2  EC71  F070         	call	_printf	;wreg free
  7390  00D8F6  0012               	return		;funcret
  7391  00D8F8                     __end_of_homescreen:
  7392                           	opt stack 0
  7393                           tblptru	equ	0xFF8
  7394                           prodh	equ	0xFF4
  7395                           prodl	equ	0xFF3
  7396                           intcon2	equ	0xFF1
  7397                           postinc0	equ	0xFEE
  7398                           wreg	equ	0xFE8
  7399                           indf2	equ	0xFDF
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404 ;; *************** function _displayLogs *****************
  7405 ;; Defined at:
  7406 ;;		line 43 in file "interface.c"
  7407 ;; Parameters:    Size  Location     Type
  7408 ;;		None
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 0/0
  7417 ;;		On exit  : 0/0
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;Total ram usage:        1 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    3
  7427 ;; This function calls:
  7428 ;;		_eepromRead
  7429 ;;		_keycheck
  7430 ;;		_lcdInst
  7431 ;;		_printf
  7432 ;; This function is called by:
  7433 ;;		_main
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text17
  7438  00DB68                     __ptext17:
  7439                           	opt stack 0
  7440  00DB68                     _displayLogs:
  7441                           	opt stack 27
  7442                           
  7443                           ;interface.c: 44: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  7444                           
  7445                           ;incstack = 0
  7446  00DB68  0E01               	movlw	1
  7447  00DB6A  ECF1  F06A         	call	_lcdInst
  7448  00DB6E  0E34               	movlw	52
  7449  00DB70  6E32               	movwf	??_displayLogs& (0+255),c
  7450  00DB72  0EF2               	movlw	242
  7451  00DB74                     u5127:
  7452  00DB74  2EE8               	decfsz	wreg,f,c
  7453  00DB76  D7FE               	bra	u5127
  7454  00DB78  2E32               	decfsz	??_displayLogs& (0+255),f,c
  7455  00DB7A  D7FC               	bra	u5127
  7456                           
  7457                           ;interface.c: 45: printf("Run#1    A:Next");
  7458  00DB7C  0E46               	movlw	low STR_61
  7459  00DB7E  6E17               	movwf	printf@f,c
  7460  00DB80  0EFE               	movlw	high STR_61
  7461  00DB82  6E18               	movwf	printf@f+1,c
  7462  00DB84  EC71  F070         	call	_printf	;wreg free
  7463                           
  7464                           ;interface.c: 46: lcdInst(0b11000000);;
  7465  00DB88  0EC0               	movlw	192
  7466  00DB8A  ECF1  F06A         	call	_lcdInst
  7467                           
  7468                           ;interface.c: 47: printf("# of cans: %d", eepromRead(10));
  7469  00DB8E  0ED4               	movlw	low STR_62
  7470  00DB90  6E17               	movwf	printf@f,c
  7471  00DB92  0EFE               	movlw	high STR_62
  7472  00DB94  6E18               	movwf	printf@f+1,c
  7473  00DB96  0E0A               	movlw	10
  7474  00DB98  EC72  F06B         	call	_eepromRead
  7475  00DB9C  6E19               	movwf	?_printf+2,c
  7476  00DB9E  6A1A               	clrf	?_printf+3,c
  7477  00DBA0  BE19               	btfsc	?_printf+2,7,c
  7478  00DBA2  061A               	decf	?_printf+3,f,c
  7479  00DBA4  EC71  F070         	call	_printf	;wreg free
  7480                           
  7481                           ;interface.c: 48: keycheck();
  7482  00DBA8  EC06  F06B         	call	_keycheck	;wreg free
  7483                           
  7484                           ;interface.c: 49: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  7485  00DBAC  0E01               	movlw	1
  7486  00DBAE  ECF1  F06A         	call	_lcdInst
  7487  00DBB2  0E34               	movlw	52
  7488  00DBB4  6E32               	movwf	??_displayLogs& (0+255),c
  7489  00DBB6  0EF2               	movlw	242
  7490  00DBB8                     u5137:
  7491  00DBB8  2EE8               	decfsz	wreg,f,c
  7492  00DBBA  D7FE               	bra	u5137
  7493  00DBBC  2E32               	decfsz	??_displayLogs& (0+255),f,c
  7494  00DBBE  D7FC               	bra	u5137
  7495                           
  7496                           ;interface.c: 50: printf("Run#1    A:Next");
  7497  00DBC0  0E46               	movlw	low STR_61
  7498  00DBC2  6E17               	movwf	printf@f,c
  7499  00DBC4  0EFE               	movlw	high STR_61
  7500  00DBC6  6E18               	movwf	printf@f+1,c
  7501  00DBC8  EC71  F070         	call	_printf	;wreg free
  7502                           
  7503                           ;interface.c: 51: lcdInst(0b11000000);;
  7504  00DBCC  0EC0               	movlw	192
  7505  00DBCE  ECF1  F06A         	call	_lcdInst
  7506                           
  7507                           ;interface.c: 52: printf("# soda cans: %d", eepromRead(20));
  7508  00DBD2  0E36               	movlw	low STR_64
  7509  00DBD4  6E17               	movwf	printf@f,c
  7510  00DBD6  0EFE               	movlw	high STR_64
  7511  00DBD8  6E18               	movwf	printf@f+1,c
  7512  00DBDA  0E14               	movlw	20
  7513  00DBDC  EC72  F06B         	call	_eepromRead
  7514  00DBE0  6E19               	movwf	?_printf+2,c
  7515  00DBE2  6A1A               	clrf	?_printf+3,c
  7516  00DBE4  BE19               	btfsc	?_printf+2,7,c
  7517  00DBE6  061A               	decf	?_printf+3,f,c
  7518  00DBE8  EC71  F070         	call	_printf	;wreg free
  7519                           
  7520                           ;interface.c: 53: keycheck();
  7521  00DBEC  EC06  F06B         	call	_keycheck	;wreg free
  7522                           
  7523                           ;interface.c: 54: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  7524  00DBF0  0E01               	movlw	1
  7525  00DBF2  ECF1  F06A         	call	_lcdInst
  7526  00DBF6  0E34               	movlw	52
  7527  00DBF8  6E32               	movwf	??_displayLogs& (0+255),c
  7528  00DBFA  0EF2               	movlw	242
  7529  00DBFC                     u5147:
  7530  00DBFC  2EE8               	decfsz	wreg,f,c
  7531  00DBFE  D7FE               	bra	u5147
  7532  00DC00  2E32               	decfsz	??_displayLogs& (0+255),f,c
  7533  00DC02  D7FC               	bra	u5147
  7534                           
  7535                           ;interface.c: 55: printf("Run#1    A:Next");
  7536  00DC04  0E46               	movlw	low STR_61
  7537  00DC06  6E17               	movwf	printf@f,c
  7538  00DC08  0EFE               	movlw	high STR_61
  7539  00DC0A  6E18               	movwf	printf@f+1,c
  7540  00DC0C  EC71  F070         	call	_printf	;wreg free
  7541                           
  7542                           ;interface.c: 56: lcdInst(0b11000000);;
  7543  00DC10  0EC0               	movlw	192
  7544  00DC12  ECF1  F06A         	call	_lcdInst
  7545                           
  7546                           ;interface.c: 57: printf("# soup cans: 4");
  7547  00DC16  0EB6               	movlw	low STR_66
  7548  00DC18  6E17               	movwf	printf@f,c
  7549  00DC1A  0EFE               	movlw	high STR_66
  7550  00DC1C  6E18               	movwf	printf@f+1,c
  7551  00DC1E  EC71  F070         	call	_printf	;wreg free
  7552                           
  7553                           ;interface.c: 58: keycheck();
  7554  00DC22  EC06  F06B         	call	_keycheck	;wreg free
  7555  00DC26  0012               	return		;funcret
  7556  00DC28                     __end_of_displayLogs:
  7557                           	opt stack 0
  7558                           tblptru	equ	0xFF8
  7559                           prodh	equ	0xFF4
  7560                           prodl	equ	0xFF3
  7561                           intcon2	equ	0xFF1
  7562                           postinc0	equ	0xFEE
  7563                           wreg	equ	0xFE8
  7564                           indf2	equ	0xFDF
  7565                           fsr2h	equ	0xFDA
  7566                           fsr2l	equ	0xFD9
  7567                           status	equ	0xFD8
  7568                           
  7569 ;; *************** function _printf *****************
  7570 ;; Defined at:
  7571 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  f               2   22[COMRAM] PTR const unsigned char 
  7574 ;;		 -> STR_66(15), STR_65(16), STR_64(16), STR_63(16), 
  7575 ;;		 -> STR_62(14), STR_61(16), STR_60(8), STR_59(15), 
  7576 ;;		 -> STR_58(8), STR_57(16), STR_56(2), STR_55(2), 
  7577 ;;		 -> STR_54(2), STR_53(2), STR_52(2), STR_51(2), 
  7578 ;;		 -> STR_50(2), STR_49(2), STR_48(12), STR_47(12), 
  7579 ;;		 -> STR_46(13), STR_45(11), STR_44(6), STR_43(13), 
  7580 ;;		 -> STR_42(11), STR_41(9), STR_40(11), STR_39(10), 
  7581 ;;		 -> STR_38(7), STR_37(14), STR_36(12), STR_35(14), 
  7582 ;;		 -> STR_34(12), STR_33(13), STR_32(11), STR_31(6), 
  7583 ;;		 -> STR_30(13), STR_29(11), STR_28(9), STR_27(11), 
  7584 ;;		 -> STR_26(10), STR_25(7), STR_24(14), STR_23(11), 
  7585 ;;		 -> STR_22(14), STR_21(8), STR_20(12), STR_19(8), 
  7586 ;;		 -> STR_18(14), STR_17(3), STR_16(12), STR_15(3), 
  7587 ;;		 -> STR_14(12), STR_13(3), STR_12(12), STR_11(11), 
  7588 ;;		 -> STR_10(13), STR_9(13), STR_8(16), STR_7(16), 
  7589 ;;		 -> STR_6(16), STR_5(16), STR_4(12), STR_3(12), 
  7590 ;;		 -> STR_2(16), STR_1(16), 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  idx             1   36[COMRAM] unsigned char 
  7593 ;;  val             4   41[COMRAM] unsigned long 
  7594 ;;  tmpval          4    0        struct .
  7595 ;;  cp              3    0        PTR const unsigned char 
  7596 ;;  width           2   45[COMRAM] int 
  7597 ;;  ap              2   39[COMRAM] PTR void [1]
  7598 ;;		 -> ?_printf(2), 
  7599 ;;  prec            2   37[COMRAM] int 
  7600 ;;  len             2    0        unsigned int 
  7601 ;;  c               1   48[COMRAM] char 
  7602 ;;  flag            1   47[COMRAM] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  2   22[COMRAM] int 
  7605 ;; Registers used:
  7606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:       27 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    2
  7619 ;; This function calls:
  7620 ;;		___lldiv
  7621 ;;		___llmod
  7622 ;;		___wmul
  7623 ;;		_isdigit
  7624 ;;		_putch
  7625 ;; This function is called by:
  7626 ;;		_main
  7627 ;;		_updateS1
  7628 ;;		_homescreen
  7629 ;;		_displayLogs
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text18
  7634  00E0E2                     __ptext18:
  7635                           	opt stack 0
  7636  00E0E2                     _printf:
  7637                           	opt stack 27
  7638                           
  7639                           ;doprnt.c: 466: va_list ap;
  7640                           ;doprnt.c: 499: signed char c;
  7641                           ;doprnt.c: 501: int width;
  7642                           ;doprnt.c: 504: int prec;
  7643                           ;doprnt.c: 508: unsigned char flag;
  7644                           ;doprnt.c: 523: union {
  7645                           ;doprnt.c: 524: unsigned long vd;
  7646                           ;doprnt.c: 525: double integ;
  7647                           ;doprnt.c: 526: } tmpval;
  7648                           ;doprnt.c: 528: unsigned long val;
  7649                           ;doprnt.c: 529: unsigned len;
  7650                           ;doprnt.c: 530: const char * cp;
  7651                           ;doprnt.c: 533: *ap = __va_start();
  7652                           
  7653                           ;incstack = 0
  7654  00E0E2  0E19               	movlw	low (?_printf+2)
  7655  00E0E4  6E28               	movwf	printf@ap,c
  7656  00E0E6  0E00               	movlw	high (?_printf+2)
  7657  00E0E8  6E29               	movwf	printf@ap+1,c
  7658                           
  7659                           ;doprnt.c: 536: while(c = *f++) {
  7660  00E0EA  D1F7               	goto	l3501
  7661  00E0EC                     l3359:
  7662                           
  7663                           ;doprnt.c: 538: if(c != '%')
  7664  00E0EC  0E25               	movlw	37
  7665  00E0EE  1831               	xorwf	printf@c,w,c
  7666  00E0F0  B4D8               	btfsc	status,2,c
  7667  00E0F2  D004               	goto	l3363
  7668                           
  7669                           ;doprnt.c: 540: {
  7670                           ;doprnt.c: 541: (putch(c) );
  7671  00E0F4  5031               	movf	printf@c,w,c
  7672  00E0F6  ECF7  F06A         	call	_putch
  7673                           
  7674                           ;doprnt.c: 542: continue;
  7675  00E0FA  D1EF               	goto	l3501
  7676  00E0FC                     l3363:
  7677                           
  7678                           ;doprnt.c: 543: }
  7679                           ;doprnt.c: 546: width = 0;
  7680  00E0FC  0E00               	movlw	0
  7681  00E0FE  6E2F               	movwf	printf@width+1,c
  7682  00E100  0E00               	movlw	0
  7683  00E102  6E2E               	movwf	printf@width,c
  7684                           
  7685                           ;doprnt.c: 548: flag = 0;
  7686  00E104  0E00               	movlw	0
  7687  00E106  6E30               	movwf	printf@flag,c
  7688                           
  7689                           ;doprnt.c: 551: switch(*f) {
  7690                           
  7691                           ;doprnt.c: 550: for(;;) {
  7692  00E108  D003               	goto	l3369
  7693  00E10A                     l3365:
  7694                           
  7695                           ;doprnt.c: 580: flag |= 0x04;
  7696  00E10A  8430               	bsf	printf@flag,2,c
  7697                           
  7698                           ;doprnt.c: 581: f++;
  7699  00E10C  4A17               	infsnz	printf@f,f,c
  7700  00E10E  2A18               	incf	printf@f+1,f,c
  7701  00E110                     l3369:
  7702  00E110  C017  FFF6         	movff	printf@f,tblptrl
  7703  00E114  C018  FFF7         	movff	printf@f+1,tblptrh
  7704  00E118                     	if	0	;tblptru may be non-zero
  7705  00E118                     	endif
  7706  00E118                     	if	0	;tblptru may be non-zero
  7707  00E118                     	endif
  7708  00E118  0008               	tblrd		*
  7709  00E11A  50F5               	movf	tablat,w,c
  7710                           
  7711                           ; Switch size 1, requested type "space"
  7712                           ; Number of cases is 1, Range of values is 48 to 48
  7713                           ; switch strategies available:
  7714                           ; Name         Instructions Cycles
  7715                           ; simple_byte            4     3 (average)
  7716                           ;	Chosen strategy is simple_byte
  7717  00E11C  0A30               	xorlw	48	; case 48
  7718  00E11E  B4D8               	btfsc	status,2,c
  7719  00E120  D7F4               	goto	l3365
  7720                           
  7721                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7722                           
  7723                           ;doprnt.c: 586: }
  7724                           
  7725                           ;doprnt.c: 585: break;
  7726  00E122  C017  FFF6         	movff	printf@f,tblptrl
  7727  00E126  C018  FFF7         	movff	printf@f+1,tblptrh
  7728  00E12A                     	if	0	;tblptru may be non-zero
  7729  00E12A                     	endif
  7730  00E12A                     	if	0	;tblptru may be non-zero
  7731  00E12A                     	endif
  7732  00E12A  0008               	tblrd		*
  7733  00E12C  50F5               	movf	tablat,w,c
  7734  00E12E  EC1A  F06B         	call	_isdigit
  7735  00E132  A0D8               	btfss	status,0,c
  7736  00E134  D03A               	goto	l3391
  7737                           
  7738                           ;doprnt.c: 598: width = 0;
  7739  00E136  0E00               	movlw	0
  7740  00E138  6E2F               	movwf	printf@width+1,c
  7741  00E13A  0E00               	movlw	0
  7742  00E13C  6E2E               	movwf	printf@width,c
  7743  00E13E                     l3375:
  7744                           
  7745                           ;doprnt.c: 600: width *= 10;
  7746  00E13E  C02E  F001         	movff	printf@width,___wmul@multiplier
  7747  00E142  C02F  F002         	movff	printf@width+1,___wmul@multiplier+1
  7748  00E146  0E00               	movlw	0
  7749  00E148  6E04               	movwf	___wmul@multiplicand+1,c
  7750  00E14A  0E0A               	movlw	10
  7751  00E14C  6E03               	movwf	___wmul@multiplicand,c
  7752  00E14E  EC4C  F06B         	call	___wmul	;wreg free
  7753  00E152  C001  F02E         	movff	?___wmul,printf@width
  7754  00E156  C002  F02F         	movff	?___wmul+1,printf@width+1
  7755                           
  7756                           ;doprnt.c: 601: width += *f++ - '0';
  7757  00E15A  0ED0               	movlw	208
  7758  00E15C  6E21               	movwf	??_printf& (0+255),c
  7759  00E15E  0EFF               	movlw	255
  7760  00E160  6E22               	movwf	(??_printf+1)& (0+255),c
  7761  00E162  C017  FFF6         	movff	printf@f,tblptrl
  7762  00E166  C018  FFF7         	movff	printf@f+1,tblptrh
  7763  00E16A                     	if	0	;tblptru may be non-zero
  7764  00E16A                     	endif
  7765  00E16A                     	if	0	;tblptru may be non-zero
  7766  00E16A                     	endif
  7767  00E16A  0008               	tblrd		*
  7768  00E16C  50F5               	movf	tablat,w,c
  7769  00E16E  6E23               	movwf	(??_printf+2)& (0+255),c
  7770  00E170  6A24               	clrf	(??_printf+3)& (0+255),c
  7771  00E172  5021               	movf	??_printf,w,c
  7772  00E174  2623               	addwf	??_printf+2,f,c
  7773  00E176  5022               	movf	??_printf+1,w,c
  7774  00E178  2224               	addwfc	??_printf+3,f,c
  7775  00E17A  5023               	movf	??_printf+2,w,c
  7776  00E17C  262E               	addwf	printf@width,f,c
  7777  00E17E  5024               	movf	??_printf+3,w,c
  7778  00E180  222F               	addwfc	printf@width+1,f,c
  7779  00E182  4A17               	infsnz	printf@f,f,c
  7780  00E184  2A18               	incf	printf@f+1,f,c
  7781                           
  7782                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7783  00E186  C017  FFF6         	movff	printf@f,tblptrl
  7784  00E18A  C018  FFF7         	movff	printf@f+1,tblptrh
  7785  00E18E                     	if	0	;tblptru may be non-zero
  7786  00E18E                     	endif
  7787  00E18E                     	if	0	;tblptru may be non-zero
  7788  00E18E                     	endif
  7789  00E18E  0008               	tblrd		*
  7790  00E190  50F5               	movf	tablat,w,c
  7791  00E192  EC1A  F06B         	call	_isdigit
  7792  00E196  A0D8               	btfss	status,0,c
  7793  00E198  D008               	goto	l3391
  7794  00E19A  D7D1               	goto	l3375
  7795  00E19C                     l3383:
  7796                           
  7797                           ;doprnt.c: 643: flag |= 0x10;
  7798  00E19C  8830               	bsf	printf@flag,4,c
  7799                           
  7800                           ;doprnt.c: 644: goto loop;
  7801  00E19E  D005               	goto	l3391
  7802  00E1A0                     l3385:
  7803                           
  7804                           ;doprnt.c: 721: flag |= 0x80;
  7805  00E1A0  8E30               	bsf	printf@flag,7,c
  7806                           
  7807                           ;doprnt.c: 723: break;
  7808  00E1A2  D020               	goto	l3393
  7809  00E1A4                     l3387:
  7810                           
  7811                           ;doprnt.c: 818: flag |= 0xC0;
  7812  00E1A4  0EC0               	movlw	192
  7813  00E1A6  1230               	iorwf	printf@flag,f,c
  7814                           
  7815                           ;doprnt.c: 822: }
  7816                           
  7817                           ;doprnt.c: 819: break;
  7818  00E1A8  D01D               	goto	l3393
  7819  00E1AA                     l3391:
  7820  00E1AA  C017  FFF6         	movff	printf@f,tblptrl
  7821  00E1AE  C018  FFF7         	movff	printf@f+1,tblptrh
  7822  00E1B2  4A17               	infsnz	printf@f,f,c
  7823  00E1B4  2A18               	incf	printf@f+1,f,c
  7824  00E1B6                     	if	0	;tblptru may be non-zero
  7825  00E1B6                     	endif
  7826  00E1B6                     	if	0	;tblptru may be non-zero
  7827  00E1B6                     	endif
  7828  00E1B6  0008               	tblrd		*
  7829  00E1B8  CFF5 F031          	movff	tablat,printf@c
  7830  00E1BC  5031               	movf	printf@c,w,c
  7831                           
  7832                           ; Switch size 1, requested type "space"
  7833                           ; Number of cases is 6, Range of values is 0 to 120
  7834                           ; switch strategies available:
  7835                           ; Name         Instructions Cycles
  7836                           ; simple_byte           19    10 (average)
  7837                           ;	Chosen strategy is simple_byte
  7838  00E1BE  0A00               	xorlw	0	; case 0
  7839  00E1C0  B4D8               	btfsc	status,2,c
  7840  00E1C2  0012               	return	
  7841  00E1C4  0A64               	xorlw	100	; case 100
  7842  00E1C6  B4D8               	btfsc	status,2,c
  7843  00E1C8  D00D               	goto	l3393
  7844  00E1CA  0A0D               	xorlw	13	; case 105
  7845  00E1CC  B4D8               	btfsc	status,2,c
  7846  00E1CE  D00A               	goto	l3393
  7847  00E1D0  0A05               	xorlw	5	; case 108
  7848  00E1D2  B4D8               	btfsc	status,2,c
  7849  00E1D4  D7E3               	goto	l3383
  7850  00E1D6  0A19               	xorlw	25	; case 117
  7851  00E1D8  B4D8               	btfsc	status,2,c
  7852  00E1DA  D7E4               	goto	l3387
  7853  00E1DC  0A0D               	xorlw	13	; case 120
  7854  00E1DE  B4D8               	btfsc	status,2,c
  7855  00E1E0  D7DF               	goto	l3385
  7856  00E1E2  D17B               	goto	l3501
  7857  00E1E4                     l3393:
  7858                           
  7859                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  7860  00E1E4  C030  F021         	movff	printf@flag,??_printf
  7861  00E1E8  0EC0               	movlw	192
  7862  00E1EA  1621               	andwf	??_printf,f,c
  7863  00E1EC  A4D8               	btfss	status,2,c
  7864  00E1EE  D02E               	goto	l818
  7865                           
  7866                           ;doprnt.c: 1253: {
  7867                           ;doprnt.c: 1255: if(flag & 0x10)
  7868  00E1F0  A830               	btfss	printf@flag,4,c
  7869  00E1F2  D00E               	goto	l3401
  7870                           
  7871                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7872  00E1F4  C028  FFD9         	movff	printf@ap,fsr2l
  7873  00E1F8  C029  FFDA         	movff	printf@ap+1,fsr2h
  7874  00E1FC  CFDE F02A          	movff	postinc2,printf@val
  7875  00E200  CFDE F02B          	movff	postinc2,printf@val+1
  7876  00E204  CFDE F02C          	movff	postinc2,printf@val+2
  7877  00E208  CFDE F02D          	movff	postinc2,printf@val+3
  7878  00E20C  0E04               	movlw	4
  7879  00E20E  D00E               	goto	L9
  7880  00E210                     l3401:
  7881                           
  7882                           ;doprnt.c: 1257: else
  7883                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7884  00E210  C028  FFD9         	movff	printf@ap,fsr2l
  7885  00E214  C029  FFDA         	movff	printf@ap+1,fsr2h
  7886  00E218  CFDE F02A          	movff	postinc2,printf@val
  7887  00E21C  CFDD F02B          	movff	postdec2,printf@val+1
  7888  00E220  0E00               	movlw	0
  7889  00E222  BE2B               	btfsc	printf@val+1,7,c
  7890  00E224  0EFF               	movlw	-1
  7891  00E226  6E2C               	movwf	printf@val+2,c
  7892  00E228  6E2D               	movwf	printf@val+3,c
  7893  00E22A  0E02               	movlw	2
  7894  00E22C                     L9:
  7895  00E22C  2628               	addwf	printf@ap,f,c
  7896  00E22E  0E00               	movlw	0
  7897  00E230  2229               	addwfc	printf@ap+1,f,c
  7898                           
  7899                           ;doprnt.c: 1261: if((long)val < 0) {
  7900  00E232  AE2D               	btfss	printf@val+3,7,c
  7901  00E234  D06A               	goto	l3449
  7902                           
  7903                           ;doprnt.c: 1262: flag |= 0x03;
  7904  00E236  0E03               	movlw	3
  7905  00E238  1230               	iorwf	printf@flag,f,c
  7906                           
  7907                           ;doprnt.c: 1263: val = -val;
  7908  00E23A  1E2D               	comf	printf@val+3,f,c
  7909  00E23C  1E2C               	comf	printf@val+2,f,c
  7910  00E23E  1E2B               	comf	printf@val+1,f,c
  7911  00E240  6C2A               	negf	printf@val,c
  7912  00E242  0E00               	movlw	0
  7913  00E244  222B               	addwfc	printf@val+1,f,c
  7914  00E246  222C               	addwfc	printf@val+2,f,c
  7915  00E248  222D               	addwfc	printf@val+3,f,c
  7916                           
  7917                           ;doprnt.c: 1264: }
  7918                           ;doprnt.c: 1266: }
  7919  00E24A  D05F               	goto	l3449
  7920  00E24C                     l818:
  7921                           
  7922                           ;doprnt.c: 1268: else
  7923                           ;doprnt.c: 1273: {
  7924                           ;doprnt.c: 1281: if(flag & 0x10)
  7925  00E24C  A830               	btfss	printf@flag,4,c
  7926  00E24E  D00E               	goto	l3415
  7927                           
  7928                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7929  00E250  C028  FFD9         	movff	printf@ap,fsr2l
  7930  00E254  C029  FFDA         	movff	printf@ap+1,fsr2h
  7931  00E258  CFDE F02A          	movff	postinc2,printf@val
  7932  00E25C  CFDE F02B          	movff	postinc2,printf@val+1
  7933  00E260  CFDE F02C          	movff	postinc2,printf@val+2
  7934  00E264  CFDE F02D          	movff	postinc2,printf@val+3
  7935  00E268  0E04               	movlw	4
  7936  00E26A  D00F               	goto	L10
  7937  00E26C                     l3415:
  7938                           
  7939                           ;doprnt.c: 1283: else
  7940                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7941  00E26C  C028  FFD9         	movff	printf@ap,fsr2l
  7942  00E270  C029  FFDA         	movff	printf@ap+1,fsr2h
  7943  00E274  CFDE F021          	movff	postinc2,??_printf
  7944  00E278  CFDD F022          	movff	postdec2,??_printf+1
  7945  00E27C  C021  F02A         	movff	??_printf,printf@val
  7946  00E280  C022  F02B         	movff	??_printf+1,printf@val+1
  7947  00E284  6A2C               	clrf	printf@val+2,c
  7948  00E286  6A2D               	clrf	printf@val+3,c
  7949  00E288  0E02               	movlw	2
  7950  00E28A                     L10:
  7951  00E28A  2628               	addwf	printf@ap,f,c
  7952  00E28C  0E00               	movlw	0
  7953  00E28E  2229               	addwfc	printf@ap+1,f,c
  7954                           
  7955                           ;doprnt.c: 1287: }
  7956                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7957  00E290  D03C               	goto	l3449
  7958  00E292                     l3419:
  7959                           
  7960                           ;doprnt.c: 1302: case 0xC0:
  7961                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7962  00E292  0E01               	movlw	1
  7963  00E294  6E31               	movwf	printf@c,c
  7964  00E296                     l3421:
  7965  00E296  0E0A               	movlw	10
  7966  00E298  1831               	xorwf	printf@c,w,c
  7967  00E29A  B4D8               	btfsc	status,2,c
  7968  00E29C  D041               	goto	l3451
  7969                           
  7970                           ;doprnt.c: 1306: if(val < dpowers[c])
  7971  00E29E  5031               	movf	printf@c,w,c
  7972  00E2A0  0D04               	mullw	4
  7973  00E2A2  0EB5               	movlw	low _dpowers
  7974  00E2A4  24F3               	addwf	prodl,w,c
  7975  00E2A6  6EF6               	movwf	tblptrl,c
  7976  00E2A8  0EFD               	movlw	high _dpowers
  7977  00E2AA  20F4               	addwfc	prodh,w,c
  7978  00E2AC  6EF7               	movwf	tblptrh,c
  7979  00E2AE                     	if	0	;There are less than 3 active tblptr bytes
  7980  00E2AE                     	endif
  7981  00E2AE  0009               	tblrd		*+
  7982  00E2B0  50F5               	movf	tablat,w,c
  7983  00E2B2  5C2A               	subwf	printf@val,w,c
  7984  00E2B4  0009               	tblrd		*+
  7985  00E2B6  50F5               	movf	tablat,w,c
  7986  00E2B8  582B               	subwfb	printf@val+1,w,c
  7987  00E2BA  0009               	tblrd		*+
  7988  00E2BC  50F5               	movf	tablat,w,c
  7989  00E2BE  582C               	subwfb	printf@val+2,w,c
  7990  00E2C0  0009               	tblrd		*+
  7991  00E2C2  50F5               	movf	tablat,w,c
  7992  00E2C4  582D               	subwfb	printf@val+3,w,c
  7993  00E2C6  A0D8               	btfss	status,0,c
  7994  00E2C8  D02B               	goto	l3451
  7995                           
  7996                           ;doprnt.c: 1307: break;
  7997  00E2CA  2A31               	incf	printf@c,f,c
  7998  00E2CC  D7E4               	goto	l3421
  7999  00E2CE                     l3433:
  8000                           
  8001                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8002  00E2CE  0E01               	movlw	1
  8003  00E2D0  6E31               	movwf	printf@c,c
  8004  00E2D2                     l3435:
  8005  00E2D2  0E08               	movlw	8
  8006  00E2D4  1831               	xorwf	printf@c,w,c
  8007  00E2D6  B4D8               	btfsc	status,2,c
  8008  00E2D8  D023               	goto	l3451
  8009                           
  8010                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8011  00E2DA  5031               	movf	printf@c,w,c
  8012  00E2DC  0D04               	mullw	4
  8013  00E2DE  0EDD               	movlw	low _hexpowers
  8014  00E2E0  24F3               	addwf	prodl,w,c
  8015  00E2E2  6EF6               	movwf	tblptrl,c
  8016  00E2E4  0EFD               	movlw	high _hexpowers
  8017  00E2E6  20F4               	addwfc	prodh,w,c
  8018  00E2E8  6EF7               	movwf	tblptrh,c
  8019  00E2EA                     	if	0	;There are less than 3 active tblptr bytes
  8020  00E2EA                     	endif
  8021  00E2EA  0009               	tblrd		*+
  8022  00E2EC  50F5               	movf	tablat,w,c
  8023  00E2EE  5C2A               	subwf	printf@val,w,c
  8024  00E2F0  0009               	tblrd		*+
  8025  00E2F2  50F5               	movf	tablat,w,c
  8026  00E2F4  582B               	subwfb	printf@val+1,w,c
  8027  00E2F6  0009               	tblrd		*+
  8028  00E2F8  50F5               	movf	tablat,w,c
  8029  00E2FA  582C               	subwfb	printf@val+2,w,c
  8030  00E2FC  0009               	tblrd		*+
  8031  00E2FE  50F5               	movf	tablat,w,c
  8032  00E300  582D               	subwfb	printf@val+3,w,c
  8033  00E302  A0D8               	btfss	status,0,c
  8034  00E304  D00D               	goto	l3451
  8035                           
  8036                           ;doprnt.c: 1318: break;
  8037  00E306  2A31               	incf	printf@c,f,c
  8038  00E308  D7E4               	goto	l3435
  8039  00E30A                     l3449:
  8040  00E30A  5030               	movf	printf@flag,w,c
  8041  00E30C  0BC0               	andlw	192
  8042                           
  8043                           ; Switch size 1, requested type "space"
  8044                           ; Number of cases is 3, Range of values is 0 to 192
  8045                           ; switch strategies available:
  8046                           ; Name         Instructions Cycles
  8047                           ; simple_byte           10     6 (average)
  8048                           ;	Chosen strategy is simple_byte
  8049  00E30E  0A00               	xorlw	0	; case 0
  8050  00E310  B4D8               	btfsc	status,2,c
  8051  00E312  D7BF               	goto	l3419
  8052  00E314  0A80               	xorlw	128	; case 128
  8053  00E316  B4D8               	btfsc	status,2,c
  8054  00E318  D7DA               	goto	l3433
  8055  00E31A  0A40               	xorlw	64	; case 192
  8056  00E31C  B4D8               	btfsc	status,2,c
  8057  00E31E  D7B9               	goto	l3419
  8058  00E320                     l3451:
  8059                           
  8060                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8061  00E320  502E               	movf	printf@width,w,c
  8062  00E322  102F               	iorwf	printf@width+1,w,c
  8063  00E324  B4D8               	btfsc	status,2,c
  8064  00E326  D009               	goto	l3457
  8065  00E328  C030  F021         	movff	printf@flag,??_printf
  8066  00E32C  0E03               	movlw	3
  8067  00E32E  1621               	andwf	??_printf,f,c
  8068  00E330  B4D8               	btfsc	status,2,c
  8069  00E332  D003               	goto	l3457
  8070                           
  8071                           ;doprnt.c: 1346: width--;
  8072  00E334  062E               	decf	printf@width,f,c
  8073  00E336  A0D8               	btfss	status,0,c
  8074  00E338  062F               	decf	printf@width+1,f,c
  8075  00E33A                     l3457:
  8076                           
  8077                           ;doprnt.c: 1381: if(width > c)
  8078  00E33A  0E80               	movlw	128
  8079  00E33C  BE31               	btfsc	printf@c,7,c
  8080  00E33E  0E7F               	movlw	127
  8081  00E340  6E21               	movwf	??_printf& (0+255),c
  8082  00E342  502E               	movf	printf@width,w,c
  8083  00E344  5C31               	subwf	printf@c,w,c
  8084  00E346  502F               	movf	printf@width+1,w,c
  8085  00E348  0A80               	xorlw	128
  8086  00E34A  5821               	subwfb	??_printf& (0+255),w,c
  8087  00E34C  B0D8               	btfsc	status,0,c
  8088  00E34E  D007               	goto	l3461
  8089                           
  8090                           ;doprnt.c: 1382: width -= c;
  8091  00E350  5031               	movf	printf@c,w,c
  8092  00E352  5E2E               	subwf	printf@width,f,c
  8093  00E354  0E00               	movlw	0
  8094  00E356  BE31               	btfsc	printf@c,7,c
  8095  00E358  0EFF               	movlw	255
  8096  00E35A  5A2F               	subwfb	printf@width+1,f,c
  8097  00E35C  D004               	goto	l3463
  8098  00E35E                     l3461:
  8099                           
  8100                           ;doprnt.c: 1383: else
  8101                           ;doprnt.c: 1384: width = 0;
  8102  00E35E  0E00               	movlw	0
  8103  00E360  6E2F               	movwf	printf@width+1,c
  8104  00E362  0E00               	movlw	0
  8105  00E364  6E2E               	movwf	printf@width,c
  8106  00E366                     l3463:
  8107                           
  8108                           ;doprnt.c: 1387: if(flag & 0x04) {
  8109  00E366  A430               	btfss	printf@flag,2,c
  8110  00E368  D014               	goto	l3475
  8111                           
  8112                           ;doprnt.c: 1392: if(flag & 0x03)
  8113  00E36A  C030  F021         	movff	printf@flag,??_printf
  8114  00E36E  0E03               	movlw	3
  8115  00E370  1621               	andwf	??_printf,f,c
  8116  00E372  B4D8               	btfsc	status,2,c
  8117  00E374  D003               	goto	l3469
  8118                           
  8119                           ;doprnt.c: 1393: (putch('-') );
  8120  00E376  0E2D               	movlw	45
  8121  00E378  ECF7  F06A         	call	_putch
  8122  00E37C                     l3469:
  8123                           
  8124                           ;doprnt.c: 1415: if(width)
  8125  00E37C  502E               	movf	printf@width,w,c
  8126  00E37E  102F               	iorwf	printf@width+1,w,c
  8127  00E380  B4D8               	btfsc	status,2,c
  8128  00E382  D01E               	goto	l3485
  8129                           
  8130                           ;doprnt.c: 1417: (putch('0') );
  8131                           
  8132                           ;doprnt.c: 1416: do
  8133  00E384  0E30               	movlw	48
  8134  00E386  ECF7  F06A         	call	_putch
  8135                           
  8136                           ;doprnt.c: 1418: while(--width);
  8137  00E38A  062E               	decf	printf@width,f,c
  8138  00E38C  A0D8               	btfss	status,0,c
  8139  00E38E  062F               	decf	printf@width+1,f,c
  8140  00E390  D7F5               	goto	l3469
  8141  00E392                     l3475:
  8142                           
  8143                           ;doprnt.c: 1422: {
  8144                           ;doprnt.c: 1424: if(width
  8145                           ;doprnt.c: 1428: )
  8146  00E392  502E               	movf	printf@width,w,c
  8147  00E394  102F               	iorwf	printf@width+1,w,c
  8148  00E396  B4D8               	btfsc	status,2,c
  8149  00E398  D00A               	goto	l3481
  8150  00E39A                     l3477:
  8151                           
  8152                           ;doprnt.c: 1430: (putch(' ') );
  8153  00E39A  0E20               	movlw	32
  8154  00E39C  ECF7  F06A         	call	_putch
  8155                           
  8156                           ;doprnt.c: 1431: while(--width);
  8157  00E3A0  062E               	decf	printf@width,f,c
  8158  00E3A2  A0D8               	btfss	status,0,c
  8159  00E3A4  062F               	decf	printf@width+1,f,c
  8160  00E3A6  502E               	movf	printf@width,w,c
  8161  00E3A8  102F               	iorwf	printf@width+1,w,c
  8162  00E3AA  A4D8               	btfss	status,2,c
  8163  00E3AC  D7F6               	goto	l3477
  8164  00E3AE                     l3481:
  8165                           
  8166                           ;doprnt.c: 1438: if(flag & 0x03)
  8167  00E3AE  C030  F021         	movff	printf@flag,??_printf
  8168  00E3B2  0E03               	movlw	3
  8169  00E3B4  1621               	andwf	??_printf,f,c
  8170  00E3B6  B4D8               	btfsc	status,2,c
  8171  00E3B8  D003               	goto	l3485
  8172                           
  8173                           ;doprnt.c: 1439: (putch('-') );
  8174  00E3BA  0E2D               	movlw	45
  8175  00E3BC  ECF7  F06A         	call	_putch
  8176  00E3C0                     l3485:
  8177                           
  8178                           ;doprnt.c: 1469: }
  8179                           ;doprnt.c: 1472: prec = c;
  8180  00E3C0  5031               	movf	printf@c,w,c
  8181  00E3C2  6E26               	movwf	printf@prec,c
  8182  00E3C4  6A27               	clrf	printf@prec+1,c
  8183  00E3C6  BE26               	btfsc	printf@prec,7,c
  8184  00E3C8  0627               	decf	printf@prec+1,f,c
  8185                           
  8186                           ;doprnt.c: 1474: while(prec--) {
  8187  00E3CA  D07F               	goto	l3499
  8188  00E3CC                     l3487:
  8189                           
  8190                           ;doprnt.c: 1486: case 0xC0:
  8191                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8192  00E3CC  C026  F021         	movff	printf@prec,??_printf
  8193  00E3D0  C027  F022         	movff	printf@prec+1,??_printf+1
  8194  00E3D4  90D8               	bcf	status,0,c
  8195  00E3D6  3621               	rlcf	??_printf,f,c
  8196  00E3D8  3622               	rlcf	??_printf+1,f,c
  8197  00E3DA  90D8               	bcf	status,0,c
  8198  00E3DC  3621               	rlcf	??_printf,f,c
  8199  00E3DE  3622               	rlcf	??_printf+1,f,c
  8200  00E3E0  0EB5               	movlw	low _dpowers
  8201  00E3E2  2421               	addwf	??_printf,w,c
  8202  00E3E4  6EF6               	movwf	tblptrl,c
  8203  00E3E6  0EFD               	movlw	high _dpowers
  8204  00E3E8  2022               	addwfc	??_printf+1,w,c
  8205  00E3EA  6EF7               	movwf	tblptrh,c
  8206  00E3EC                     	if	0	;There are less than 3 active tblptr bytes
  8207  00E3EC                     	endif
  8208  00E3EC  0009               	tblrd		*+
  8209  00E3EE  CFF5 F005          	movff	tablat,___lldiv@divisor
  8210  00E3F2  0009               	tblrd		*+
  8211  00E3F4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8212  00E3F8  0009               	tblrd		*+
  8213  00E3FA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8214  00E3FE  000A               	tblrd		*-
  8215  00E400  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8216  00E404  C02A  F001         	movff	printf@val,___lldiv@dividend
  8217  00E408  C02B  F002         	movff	printf@val+1,___lldiv@dividend+1
  8218  00E40C  C02C  F003         	movff	printf@val+2,___lldiv@dividend+2
  8219  00E410  C02D  F004         	movff	printf@val+3,___lldiv@dividend+3
  8220  00E414  EC1E  F06D         	call	___lldiv	;wreg free
  8221  00E418  C001  F00E         	movff	?___lldiv,___llmod@dividend
  8222  00E41C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  8223  00E420  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  8224  00E424  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  8225  00E428  0E0A               	movlw	10
  8226  00E42A  6E12               	movwf	___llmod@divisor,c
  8227  00E42C  0E00               	movlw	0
  8228  00E42E  6E13               	movwf	___llmod@divisor+1,c
  8229  00E430  0E00               	movlw	0
  8230  00E432  6E14               	movwf	___llmod@divisor+2,c
  8231  00E434  0E00               	movlw	0
  8232  00E436  6E15               	movwf	___llmod@divisor+3,c
  8233  00E438  EC7C  F06C         	call	___llmod	;wreg free
  8234  00E43C  500E               	movf	?___llmod,w,c
  8235  00E43E  0F30               	addlw	48
  8236  00E440  6E31               	movwf	printf@c,c
  8237                           
  8238                           ;doprnt.c: 1491: break;
  8239  00E442  D040               	goto	l3497
  8240  00E444                     l3489:
  8241                           
  8242                           ;doprnt.c: 1499: {
  8243                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8244  00E444  C02A  F001         	movff	printf@val,___lldiv@dividend
  8245  00E448  C02B  F002         	movff	printf@val+1,___lldiv@dividend+1
  8246  00E44C  C02C  F003         	movff	printf@val+2,___lldiv@dividend+2
  8247  00E450  C02D  F004         	movff	printf@val+3,___lldiv@dividend+3
  8248  00E454  C026  F021         	movff	printf@prec,??_printf
  8249  00E458  C027  F022         	movff	printf@prec+1,??_printf+1
  8250  00E45C  90D8               	bcf	status,0,c
  8251  00E45E  3621               	rlcf	??_printf,f,c
  8252  00E460  3622               	rlcf	??_printf+1,f,c
  8253  00E462  90D8               	bcf	status,0,c
  8254  00E464  3621               	rlcf	??_printf,f,c
  8255  00E466  3622               	rlcf	??_printf+1,f,c
  8256  00E468  0EDD               	movlw	low _hexpowers
  8257  00E46A  2421               	addwf	??_printf,w,c
  8258  00E46C  6EF6               	movwf	tblptrl,c
  8259  00E46E  0EFD               	movlw	high _hexpowers
  8260  00E470  2022               	addwfc	??_printf+1,w,c
  8261  00E472  6EF7               	movwf	tblptrh,c
  8262  00E474                     	if	0	;There are less than 3 active tblptr bytes
  8263  00E474                     	endif
  8264  00E474  0009               	tblrd		*+
  8265  00E476  CFF5 F005          	movff	tablat,___lldiv@divisor
  8266  00E47A  0009               	tblrd		*+
  8267  00E47C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8268  00E480  0009               	tblrd		*+
  8269  00E482  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8270  00E486  000A               	tblrd		*-
  8271  00E488  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8272  00E48C  EC1E  F06D         	call	___lldiv	;wreg free
  8273  00E490  5001               	movf	?___lldiv,w,c
  8274  00E492  0B0F               	andlw	15
  8275  00E494  6E25               	movwf	printf@idx,c
  8276                           
  8277                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8278  00E496  5025               	movf	printf@idx,w,c
  8279  00E498  0D01               	mullw	1
  8280  00E49A  0E15               	movlw	low STR_67
  8281  00E49C  24F3               	addwf	prodl,w,c
  8282  00E49E  6EF6               	movwf	tblptrl,c
  8283  00E4A0  0EFE               	movlw	high STR_67
  8284  00E4A2  20F4               	addwfc	prodh,w,c
  8285  00E4A4  6EF7               	movwf	tblptrh,c
  8286  00E4A6                     	if	0	;There are less than 3 active tblptr bytes
  8287  00E4A6                     	endif
  8288  00E4A6  0008               	tblrd		*
  8289  00E4A8  CFF5 F031          	movff	tablat,printf@c
  8290                           
  8291                           ;doprnt.c: 1523: }
  8292                           
  8293                           ;doprnt.c: 1508: }
  8294                           ;doprnt.c: 1510: break;
  8295  00E4AC  D00B               	goto	l3497
  8296  00E4AE                     l3495:
  8297  00E4AE  5030               	movf	printf@flag,w,c
  8298  00E4B0  0BC0               	andlw	192
  8299                           
  8300                           ; Switch size 1, requested type "space"
  8301                           ; Number of cases is 3, Range of values is 0 to 192
  8302                           ; switch strategies available:
  8303                           ; Name         Instructions Cycles
  8304                           ; simple_byte           10     6 (average)
  8305                           ;	Chosen strategy is simple_byte
  8306  00E4B2  0A00               	xorlw	0	; case 0
  8307  00E4B4  B4D8               	btfsc	status,2,c
  8308  00E4B6  D78A               	goto	l3487
  8309  00E4B8  0A80               	xorlw	128	; case 128
  8310  00E4BA  B4D8               	btfsc	status,2,c
  8311  00E4BC  D7C3               	goto	l3489
  8312  00E4BE  0A40               	xorlw	64	; case 192
  8313  00E4C0  B4D8               	btfsc	status,2,c
  8314  00E4C2  D784               	goto	l3487
  8315  00E4C4                     l3497:
  8316                           
  8317                           ;doprnt.c: 1524: (putch(c) );
  8318  00E4C4  5031               	movf	printf@c,w,c
  8319  00E4C6  ECF7  F06A         	call	_putch
  8320  00E4CA                     l3499:
  8321  00E4CA  0626               	decf	printf@prec,f,c
  8322  00E4CC  A0D8               	btfss	status,0,c
  8323  00E4CE  0627               	decf	printf@prec+1,f,c
  8324  00E4D0  2826               	incf	printf@prec,w,c
  8325  00E4D2  E1ED               	bnz	l3495
  8326  00E4D4  2827               	incf	printf@prec+1,w,c
  8327  00E4D6  A4D8               	btfss	status,2,c
  8328  00E4D8  D7EA               	goto	l3495
  8329  00E4DA                     l3501:
  8330  00E4DA  C017  FFF6         	movff	printf@f,tblptrl
  8331  00E4DE  C018  FFF7         	movff	printf@f+1,tblptrh
  8332  00E4E2  4A17               	infsnz	printf@f,f,c
  8333  00E4E4  2A18               	incf	printf@f+1,f,c
  8334  00E4E6                     	if	0	;tblptru may be non-zero
  8335  00E4E6                     	endif
  8336  00E4E6                     	if	0	;tblptru may be non-zero
  8337  00E4E6                     	endif
  8338  00E4E6  0008               	tblrd		*
  8339  00E4E8  CFF5 F031          	movff	tablat,printf@c
  8340  00E4EC  5031               	movf	printf@c,w,c
  8341  00E4EE  B4D8               	btfsc	status,2,c
  8342  00E4F0  0012               	return	
  8343  00E4F2  D5FC               	goto	l3359
  8344  00E4F4                     __end_of_printf:
  8345                           	opt stack 0
  8346                           tblptru	equ	0xFF8
  8347                           tblptrh	equ	0xFF7
  8348                           tblptrl	equ	0xFF6
  8349                           tablat	equ	0xFF5
  8350                           prodh	equ	0xFF4
  8351                           prodl	equ	0xFF3
  8352                           intcon2	equ	0xFF1
  8353                           postinc0	equ	0xFEE
  8354                           wreg	equ	0xFE8
  8355                           indf2	equ	0xFDF
  8356                           postinc2	equ	0xFDE
  8357                           postdec2	equ	0xFDD
  8358                           fsr2h	equ	0xFDA
  8359                           fsr2l	equ	0xFD9
  8360                           status	equ	0xFD8
  8361                           
  8362 ;; *************** function _putch *****************
  8363 ;; Defined at:
  8364 ;;		line 27 in file "lcd.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  data            1    wreg     unsigned char 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  data            1    2[COMRAM] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;                  1    wreg      void 
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;Total ram usage:        1 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    1
  8385 ;; This function calls:
  8386 ;;		_lcdNibble
  8387 ;; This function is called by:
  8388 ;;		_printf
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           	psect	text19
  8393  00D5EE                     __ptext19:
  8394                           	opt stack 0
  8395  00D5EE                     _putch:
  8396                           	opt stack 27
  8397                           
  8398                           ;incstack = 0
  8399                           ;putch@data stored from wreg
  8400  00D5EE  6E03               	movwf	putch@data,c
  8401                           
  8402                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  8403  00D5F0  848C               	bsf	3980,2,c	;volatile
  8404                           
  8405                           ;lcd.c: 29: lcdNibble(data);
  8406  00D5F2  5003               	movf	putch@data,w,c
  8407  00D5F4  ECF3  F06B         	call	_lcdNibble
  8408  00D5F8  0012               	return		;funcret
  8409  00D5FA                     __end_of_putch:
  8410                           	opt stack 0
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           intcon2	equ	0xFF1
  8418                           postinc0	equ	0xFEE
  8419                           wreg	equ	0xFE8
  8420                           indf2	equ	0xFDF
  8421                           postinc2	equ	0xFDE
  8422                           postdec2	equ	0xFDD
  8423                           fsr2h	equ	0xFDA
  8424                           fsr2l	equ	0xFD9
  8425                           status	equ	0xFD8
  8426                           
  8427 ;; *************** function _isdigit *****************
  8428 ;; Defined at:
  8429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;  c               1    wreg     unsigned char 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  c               1    2[COMRAM] unsigned char 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;		None               void
  8436 ;; Registers used:
  8437 ;;		wreg, status,2, status,0
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;Total ram usage:        3 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_printf
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text20
  8457  00D634                     __ptext20:
  8458                           	opt stack 0
  8459  00D634                     _isdigit:
  8460                           	opt stack 28
  8461                           
  8462                           ;incstack = 0
  8463                           ;isdigit@c stored from wreg
  8464  00D634  6E03               	movwf	isdigit@c,c
  8465  00D636  0E00               	movlw	0
  8466  00D638  6E02               	movwf	_isdigit$1330,c
  8467  00D63A  0E3A               	movlw	58
  8468  00D63C  6003               	cpfslt	isdigit@c,c
  8469  00D63E  D005               	goto	l3287
  8470  00D640  0E2F               	movlw	47
  8471  00D642  6403               	cpfsgt	isdigit@c,c
  8472  00D644  D002               	goto	l3287
  8473  00D646  0E01               	movlw	1
  8474  00D648  6E02               	movwf	_isdigit$1330,c
  8475  00D64A                     l3287:
  8476  00D64A  C002  F001         	movff	_isdigit$1330,??_isdigit
  8477  00D64E  3001               	rrcf	??_isdigit,w,c
  8478  00D650  0012               	return	
  8479  00D652                     __end_of_isdigit:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon2	equ	0xFF1
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           indf2	equ	0xFDF
  8491                           postinc2	equ	0xFDE
  8492                           postdec2	equ	0xFDD
  8493                           fsr2h	equ	0xFDA
  8494                           fsr2l	equ	0xFD9
  8495                           status	equ	0xFD8
  8496                           
  8497 ;; *************** function ___wmul *****************
  8498 ;; Defined at:
  8499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  multiplier      2    0[COMRAM] unsigned int 
  8502 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  product         2    4[COMRAM] unsigned int 
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  2    0[COMRAM] unsigned int 
  8507 ;; Registers used:
  8508 ;;		wreg, status,2, status,0, prodl, prodh
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;Total ram usage:        6 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_main
  8524 ;;		_timePassed
  8525 ;;		_printf
  8526 ;;		_backlogTest
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text21
  8531  00D698                     __ptext21:
  8532                           	opt stack 0
  8533  00D698                     ___wmul:
  8534                           	opt stack 28
  8535                           
  8536                           ;incstack = 0
  8537  00D698  5001               	movf	___wmul@multiplier,w,c
  8538  00D69A  0203               	mulwf	___wmul@multiplicand,c
  8539  00D69C  CFF3 F005          	movff	prodl,___wmul@product
  8540  00D6A0  CFF4 F006          	movff	prodh,___wmul@product+1
  8541  00D6A4  5001               	movf	___wmul@multiplier,w,c
  8542  00D6A6  0204               	mulwf	___wmul@multiplicand+1,c
  8543  00D6A8  50F3               	movf	prodl,w,c
  8544  00D6AA  2606               	addwf	___wmul@product+1,f,c
  8545  00D6AC  5002               	movf	___wmul@multiplier+1,w,c
  8546  00D6AE  0203               	mulwf	___wmul@multiplicand,c
  8547  00D6B0  50F3               	movf	prodl,w,c
  8548  00D6B2  2606               	addwf	___wmul@product+1,f,c
  8549  00D6B4  C005  F001         	movff	___wmul@product,?___wmul
  8550  00D6B8  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8551  00D6BC  0012               	return	
  8552  00D6BE                     __end_of___wmul:
  8553                           	opt stack 0
  8554                           tblptru	equ	0xFF8
  8555                           tblptrh	equ	0xFF7
  8556                           tblptrl	equ	0xFF6
  8557                           tablat	equ	0xFF5
  8558                           prodh	equ	0xFF4
  8559                           prodl	equ	0xFF3
  8560                           intcon2	equ	0xFF1
  8561                           postinc0	equ	0xFEE
  8562                           wreg	equ	0xFE8
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           postdec2	equ	0xFDD
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function ___llmod *****************
  8571 ;; Defined at:
  8572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  dividend        4   13[COMRAM] unsigned long 
  8575 ;;  divisor         4   17[COMRAM] unsigned long 
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;  counter         1   21[COMRAM] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  4   13[COMRAM] unsigned long 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:        9 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_main
  8597 ;;		_printf
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text22
  8602  00D8F8                     __ptext22:
  8603                           	opt stack 0
  8604  00D8F8                     ___llmod:
  8605                           	opt stack 28
  8606                           
  8607                           ;incstack = 0
  8608  00D8F8  5012               	movf	___llmod@divisor,w,c
  8609  00D8FA  1013               	iorwf	___llmod@divisor+1,w,c
  8610  00D8FC  1014               	iorwf	___llmod@divisor+2,w,c
  8611  00D8FE  1015               	iorwf	___llmod@divisor+3,w,c
  8612  00D900  B4D8               	btfsc	status,2,c
  8613  00D902  D024               	goto	l1223
  8614  00D904  0E01               	movlw	1
  8615  00D906  6E16               	movwf	___llmod@counter,c
  8616  00D908  D006               	goto	l3325
  8617  00D90A                     l3323:
  8618  00D90A  90D8               	bcf	status,0,c
  8619  00D90C  3612               	rlcf	___llmod@divisor,f,c
  8620  00D90E  3613               	rlcf	___llmod@divisor+1,f,c
  8621  00D910  3614               	rlcf	___llmod@divisor+2,f,c
  8622  00D912  3615               	rlcf	___llmod@divisor+3,f,c
  8623  00D914  2A16               	incf	___llmod@counter,f,c
  8624  00D916                     l3325:
  8625  00D916  AE15               	btfss	___llmod@divisor+3,7,c
  8626  00D918  D7F8               	goto	l3323
  8627  00D91A                     l3327:
  8628  00D91A  5012               	movf	___llmod@divisor,w,c
  8629  00D91C  5C0E               	subwf	___llmod@dividend,w,c
  8630  00D91E  5013               	movf	___llmod@divisor+1,w,c
  8631  00D920  580F               	subwfb	___llmod@dividend+1,w,c
  8632  00D922  5014               	movf	___llmod@divisor+2,w,c
  8633  00D924  5810               	subwfb	___llmod@dividend+2,w,c
  8634  00D926  5015               	movf	___llmod@divisor+3,w,c
  8635  00D928  5811               	subwfb	___llmod@dividend+3,w,c
  8636  00D92A  A0D8               	btfss	status,0,c
  8637  00D92C  D008               	goto	l3331
  8638  00D92E  5012               	movf	___llmod@divisor,w,c
  8639  00D930  5E0E               	subwf	___llmod@dividend,f,c
  8640  00D932  5013               	movf	___llmod@divisor+1,w,c
  8641  00D934  5A0F               	subwfb	___llmod@dividend+1,f,c
  8642  00D936  5014               	movf	___llmod@divisor+2,w,c
  8643  00D938  5A10               	subwfb	___llmod@dividend+2,f,c
  8644  00D93A  5015               	movf	___llmod@divisor+3,w,c
  8645  00D93C  5A11               	subwfb	___llmod@dividend+3,f,c
  8646  00D93E                     l3331:
  8647  00D93E  90D8               	bcf	status,0,c
  8648  00D940  3215               	rrcf	___llmod@divisor+3,f,c
  8649  00D942  3214               	rrcf	___llmod@divisor+2,f,c
  8650  00D944  3213               	rrcf	___llmod@divisor+1,f,c
  8651  00D946  3212               	rrcf	___llmod@divisor,f,c
  8652  00D948  2E16               	decfsz	___llmod@counter,f,c
  8653  00D94A  D7E7               	goto	l3327
  8654  00D94C                     l1223:
  8655  00D94C  C00E  F00E         	movff	___llmod@dividend,?___llmod
  8656  00D950  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  8657  00D954  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  8658  00D958  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  8659  00D95C  0012               	return		;funcret
  8660  00D95E                     __end_of___llmod:
  8661                           	opt stack 0
  8662                           tblptru	equ	0xFF8
  8663                           tblptrh	equ	0xFF7
  8664                           tblptrl	equ	0xFF6
  8665                           tablat	equ	0xFF5
  8666                           prodh	equ	0xFF4
  8667                           prodl	equ	0xFF3
  8668                           intcon2	equ	0xFF1
  8669                           postinc0	equ	0xFEE
  8670                           wreg	equ	0xFE8
  8671                           indf2	equ	0xFDF
  8672                           postinc2	equ	0xFDE
  8673                           postdec2	equ	0xFDD
  8674                           fsr2h	equ	0xFDA
  8675                           fsr2l	equ	0xFD9
  8676                           status	equ	0xFD8
  8677                           
  8678 ;; *************** function ___lldiv *****************
  8679 ;; Defined at:
  8680 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;  dividend        4    0[COMRAM] unsigned long 
  8683 ;;  divisor         4    4[COMRAM] unsigned long 
  8684 ;; Auto vars:     Size  Location     Type
  8685 ;;  quotient        4    8[COMRAM] unsigned long 
  8686 ;;  counter         1   12[COMRAM] unsigned char 
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  4    0[COMRAM] unsigned long 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8696 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8699 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;Total ram usage:       13 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; This function calls:
  8703 ;;		Nothing
  8704 ;; This function is called by:
  8705 ;;		_I2C_Master_Init
  8706 ;;		_printf
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text23
  8711  00DA3C                     __ptext23:
  8712                           	opt stack 0
  8713  00DA3C                     ___lldiv:
  8714                           	opt stack 28
  8715                           
  8716                           ;incstack = 0
  8717  00DA3C  0E00               	movlw	0
  8718  00DA3E  6E09               	movwf	___lldiv@quotient,c
  8719  00DA40  0E00               	movlw	0
  8720  00DA42  6E0A               	movwf	___lldiv@quotient+1,c
  8721  00DA44  0E00               	movlw	0
  8722  00DA46  6E0B               	movwf	___lldiv@quotient+2,c
  8723  00DA48  0E00               	movlw	0
  8724  00DA4A  6E0C               	movwf	___lldiv@quotient+3,c
  8725  00DA4C  5005               	movf	___lldiv@divisor,w,c
  8726  00DA4E  1006               	iorwf	___lldiv@divisor+1,w,c
  8727  00DA50  1007               	iorwf	___lldiv@divisor+2,w,c
  8728  00DA52  1008               	iorwf	___lldiv@divisor+3,w,c
  8729  00DA54  B4D8               	btfsc	status,2,c
  8730  00DA56  D02A               	goto	l1213
  8731  00DA58  0E01               	movlw	1
  8732  00DA5A  6E0D               	movwf	___lldiv@counter,c
  8733  00DA5C  D006               	goto	l3305
  8734  00DA5E                     l3303:
  8735  00DA5E  90D8               	bcf	status,0,c
  8736  00DA60  3605               	rlcf	___lldiv@divisor,f,c
  8737  00DA62  3606               	rlcf	___lldiv@divisor+1,f,c
  8738  00DA64  3607               	rlcf	___lldiv@divisor+2,f,c
  8739  00DA66  3608               	rlcf	___lldiv@divisor+3,f,c
  8740  00DA68  2A0D               	incf	___lldiv@counter,f,c
  8741  00DA6A                     l3305:
  8742  00DA6A  AE08               	btfss	___lldiv@divisor+3,7,c
  8743  00DA6C  D7F8               	goto	l3303
  8744  00DA6E                     l3307:
  8745  00DA6E  90D8               	bcf	status,0,c
  8746  00DA70  3609               	rlcf	___lldiv@quotient,f,c
  8747  00DA72  360A               	rlcf	___lldiv@quotient+1,f,c
  8748  00DA74  360B               	rlcf	___lldiv@quotient+2,f,c
  8749  00DA76  360C               	rlcf	___lldiv@quotient+3,f,c
  8750  00DA78  5005               	movf	___lldiv@divisor,w,c
  8751  00DA7A  5C01               	subwf	___lldiv@dividend,w,c
  8752  00DA7C  5006               	movf	___lldiv@divisor+1,w,c
  8753  00DA7E  5802               	subwfb	___lldiv@dividend+1,w,c
  8754  00DA80  5007               	movf	___lldiv@divisor+2,w,c
  8755  00DA82  5803               	subwfb	___lldiv@dividend+2,w,c
  8756  00DA84  5008               	movf	___lldiv@divisor+3,w,c
  8757  00DA86  5804               	subwfb	___lldiv@dividend+3,w,c
  8758  00DA88  A0D8               	btfss	status,0,c
  8759  00DA8A  D009               	goto	l3315
  8760  00DA8C  5005               	movf	___lldiv@divisor,w,c
  8761  00DA8E  5E01               	subwf	___lldiv@dividend,f,c
  8762  00DA90  5006               	movf	___lldiv@divisor+1,w,c
  8763  00DA92  5A02               	subwfb	___lldiv@dividend+1,f,c
  8764  00DA94  5007               	movf	___lldiv@divisor+2,w,c
  8765  00DA96  5A03               	subwfb	___lldiv@dividend+2,f,c
  8766  00DA98  5008               	movf	___lldiv@divisor+3,w,c
  8767  00DA9A  5A04               	subwfb	___lldiv@dividend+3,f,c
  8768  00DA9C  8009               	bsf	___lldiv@quotient,0,c
  8769  00DA9E                     l3315:
  8770  00DA9E  90D8               	bcf	status,0,c
  8771  00DAA0  3208               	rrcf	___lldiv@divisor+3,f,c
  8772  00DAA2  3207               	rrcf	___lldiv@divisor+2,f,c
  8773  00DAA4  3206               	rrcf	___lldiv@divisor+1,f,c
  8774  00DAA6  3205               	rrcf	___lldiv@divisor,f,c
  8775  00DAA8  2E0D               	decfsz	___lldiv@counter,f,c
  8776  00DAAA  D7E1               	goto	l3307
  8777  00DAAC                     l1213:
  8778  00DAAC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  8779  00DAB0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  8780  00DAB4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  8781  00DAB8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  8782  00DABC  0012               	return		;funcret
  8783  00DABE                     __end_of___lldiv:
  8784                           	opt stack 0
  8785                           tblptru	equ	0xFF8
  8786                           tblptrh	equ	0xFF7
  8787                           tblptrl	equ	0xFF6
  8788                           tablat	equ	0xFF5
  8789                           prodh	equ	0xFF4
  8790                           prodl	equ	0xFF3
  8791                           intcon2	equ	0xFF1
  8792                           postinc0	equ	0xFEE
  8793                           wreg	equ	0xFE8
  8794                           indf2	equ	0xFDF
  8795                           postinc2	equ	0xFDE
  8796                           postdec2	equ	0xFDD
  8797                           fsr2h	equ	0xFDA
  8798                           fsr2l	equ	0xFD9
  8799                           status	equ	0xFD8
  8800                           
  8801 ;; *************** function _lcdInst *****************
  8802 ;; Defined at:
  8803 ;;		line 22 in file "lcd.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  data            1    wreg     unsigned char 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  data            1    2[COMRAM] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      void 
  8810 ;; Registers used:
  8811 ;;		wreg, status,2, status,0, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;Total ram usage:        1 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    1
  8824 ;; This function calls:
  8825 ;;		_lcdNibble
  8826 ;; This function is called by:
  8827 ;;		_main
  8828 ;;		_initLCD
  8829 ;;		_homescreen
  8830 ;;		_displayLogs
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           	psect	text24
  8835  00D5E2                     __ptext24:
  8836                           	opt stack 0
  8837  00D5E2                     _lcdInst:
  8838                           	opt stack 29
  8839                           
  8840                           ;incstack = 0
  8841                           ;lcdInst@data stored from wreg
  8842  00D5E2  6E03               	movwf	lcdInst@data,c
  8843                           
  8844                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  8845  00D5E4  948C               	bcf	3980,2,c	;volatile
  8846                           
  8847                           ;lcd.c: 24: lcdNibble(data);
  8848  00D5E6  5003               	movf	lcdInst@data,w,c
  8849  00D5E8  ECF3  F06B         	call	_lcdNibble
  8850  00D5EC  0012               	return		;funcret
  8851  00D5EE                     __end_of_lcdInst:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon2	equ	0xFF1
  8860                           postinc0	equ	0xFEE
  8861                           wreg	equ	0xFE8
  8862                           indf2	equ	0xFDF
  8863                           postinc2	equ	0xFDE
  8864                           postdec2	equ	0xFDD
  8865                           fsr2h	equ	0xFDA
  8866                           fsr2l	equ	0xFD9
  8867                           status	equ	0xFD8
  8868                           
  8869 ;; *************** function _lcdNibble *****************
  8870 ;; Defined at:
  8871 ;;		line 32 in file "lcd.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;  data            1    wreg     unsigned char 
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;  data            1    1[COMRAM] unsigned char 
  8876 ;;  temp            1    0[COMRAM] unsigned char 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		wreg, status,2, status,0
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;Total ram usage:        2 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; This function calls:
  8893 ;;		Nothing
  8894 ;; This function is called by:
  8895 ;;		_lcdInst
  8896 ;;		_putch
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           	psect	text25
  8901  00D7E6                     __ptext25:
  8902                           	opt stack 0
  8903  00D7E6                     _lcdNibble:
  8904                           	opt stack 27
  8905                           
  8906                           ;incstack = 0
  8907                           ;lcdNibble@data stored from wreg
  8908  00D7E6  6E02               	movwf	lcdNibble@data,c
  8909                           
  8910                           ;lcd.c: 34: char temp = data & 0xF0;
  8911  00D7E8  5002               	movf	lcdNibble@data,w,c
  8912  00D7EA  0BF0               	andlw	240
  8913  00D7EC  6E01               	movwf	lcdNibble@temp,c
  8914                           
  8915                           ;lcd.c: 35: LATD = LATD & 0x0F;
  8916  00D7EE  508C               	movf	3980,w,c	;volatile
  8917  00D7F0  0B0F               	andlw	15
  8918  00D7F2  6E8C               	movwf	3980,c	;volatile
  8919                           
  8920                           ;lcd.c: 36: LATD = temp | LATD;
  8921  00D7F4  5001               	movf	lcdNibble@temp,w,c
  8922  00D7F6  108C               	iorwf	3980,w,c	;volatile
  8923  00D7F8  6E8C               	movwf	3980,c	;volatile
  8924                           
  8925                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  8926  00D7FA  968C               	bcf	3980,3,c	;volatile
  8927                           
  8928                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8929  00D7FC  0E42               	movlw	66
  8930  00D7FE                     u5157:
  8931  00D7FE  2EE8               	decfsz	wreg,f,c
  8932  00D800  D7FE               	bra	u5157
  8933  00D802  D000               	nop2	
  8934                           
  8935                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  8936  00D804  868C               	bsf	3980,3,c	;volatile
  8937                           
  8938                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8939  00D806  0E42               	movlw	66
  8940  00D808                     u5167:
  8941  00D808  2EE8               	decfsz	wreg,f,c
  8942  00D80A  D7FE               	bra	u5167
  8943  00D80C  D000               	nop2	
  8944                           
  8945                           ;lcd.c: 43: data = data << 4;
  8946  00D80E  3802               	swapf	lcdNibble@data,w,c
  8947  00D810  0BF0               	andlw	240
  8948  00D812  6E02               	movwf	lcdNibble@data,c
  8949                           
  8950                           ;lcd.c: 45: temp = data & 0xF0;
  8951  00D814  5002               	movf	lcdNibble@data,w,c
  8952  00D816  0BF0               	andlw	240
  8953  00D818  6E01               	movwf	lcdNibble@temp,c
  8954                           
  8955                           ;lcd.c: 46: LATD = LATD & 0x0F;
  8956  00D81A  508C               	movf	3980,w,c	;volatile
  8957  00D81C  0B0F               	andlw	15
  8958  00D81E  6E8C               	movwf	3980,c	;volatile
  8959                           
  8960                           ;lcd.c: 47: LATD = temp | LATD;
  8961  00D820  5001               	movf	lcdNibble@temp,w,c
  8962  00D822  108C               	iorwf	3980,w,c	;volatile
  8963  00D824  6E8C               	movwf	3980,c	;volatile
  8964                           
  8965                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  8966  00D826  968C               	bcf	3980,3,c	;volatile
  8967                           
  8968                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8969  00D828  0E42               	movlw	66
  8970  00D82A                     u5177:
  8971  00D82A  2EE8               	decfsz	wreg,f,c
  8972  00D82C  D7FE               	bra	u5177
  8973  00D82E  D000               	nop2	
  8974                           
  8975                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  8976  00D830  868C               	bsf	3980,3,c	;volatile
  8977                           
  8978                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8979  00D832  0E42               	movlw	66
  8980  00D834                     u5187:
  8981  00D834  2EE8               	decfsz	wreg,f,c
  8982  00D836  D7FE               	bra	u5187
  8983  00D838  D000               	nop2	
  8984  00D83A  0012               	return		;funcret
  8985  00D83C                     __end_of_lcdNibble:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon2	equ	0xFF1
  8994                           postinc0	equ	0xFEE
  8995                           wreg	equ	0xFE8
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function _keycheck *****************
  9004 ;; Defined at:
  9005 ;;		line 12 in file "interface.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  1    wreg      void 
  9012 ;; Registers used:
  9013 ;;		wreg, status,2, status,0
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;Total ram usage:        0 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; This function calls:
  9026 ;;		Nothing
  9027 ;; This function is called by:
  9028 ;;		_main
  9029 ;;		_displayLogs
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text26
  9034  00D60C                     __ptext26:
  9035                           	opt stack 0
  9036  00D60C                     _keycheck:
  9037                           	opt stack 30
  9038  00D60C                     l721:
  9039  00D60C  A281               	btfss	3969,1,c	;volatile
  9040  00D60E  D7FE               	goto	l721
  9041                           
  9042                           ;interface.c: 16: }
  9043                           ;interface.c: 17: keypress = (PORTB & 0xF0)>>4;
  9044  00D610  3881               	swapf	3969,w,c	;volatile
  9045  00D612  0B0F               	andlw	15
  9046  00D614  0B0F               	andlw	15
  9047  00D616  6E7F               	movwf	_keypress,c	;volatile
  9048  00D618                     l724:
  9049  00D618  B281               	btfsc	3969,1,c	;volatile
  9050  00D61A  D7FE               	goto	l724
  9051                           
  9052                           ;interface.c: 20: }
  9053                           ;interface.c: 21: __nop();
  9054  00D61C  F000               	nop	
  9055                           
  9056                           ;interface.c: 22: return;
  9057  00D61E  0012               	return		;funcret
  9058  00D620                     __end_of_keycheck:
  9059                           	opt stack 0
  9060                           tblptru	equ	0xFF8
  9061                           tblptrh	equ	0xFF7
  9062                           tblptrl	equ	0xFF6
  9063                           tablat	equ	0xFF5
  9064                           prodh	equ	0xFF4
  9065                           prodl	equ	0xFF3
  9066                           intcon2	equ	0xFF1
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function _eepromRead *****************
  9077 ;; Defined at:
  9078 ;;		line 61 in file "interface.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  address         1    wreg     char 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  address         1    2[COMRAM] char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      char 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;Total ram usage:        3 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; This function calls:
  9099 ;;		Nothing
  9100 ;; This function is called by:
  9101 ;;		_displayLogs
  9102 ;;		_updateEEPROM
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           	psect	text27
  9107  00D6E4                     __ptext27:
  9108                           	opt stack 0
  9109  00D6E4                     _eepromRead:
  9110                           	opt stack 29
  9111                           
  9112                           ;incstack = 0
  9113                           ;eepromRead@address stored from wreg
  9114  00D6E4  6E03               	movwf	eepromRead@address,c
  9115                           
  9116                           ;interface.c: 63: EEADRH = (signed char)(address >> 8);
  9117  00D6E6  C003  F001         	movff	eepromRead@address,??_eepromRead
  9118  00D6EA  0E08               	movlw	8
  9119  00D6EC  6E02               	movwf	(??_eepromRead+1)& (0+255),c
  9120  00D6EE                     u2985:
  9121  00D6EE  3401               	rlcf	??_eepromRead,w,c
  9122  00D6F0  3201               	rrcf	??_eepromRead,f,c
  9123  00D6F2  2E02               	decfsz	(??_eepromRead+1)& (0+255),f,c
  9124  00D6F4  D7FC               	goto	u2985
  9125  00D6F6  5001               	movf	??_eepromRead,w,c
  9126  00D6F8  6EAA               	movwf	4010,c	;volatile
  9127                           
  9128                           ;interface.c: 64: EEADR = (signed char)address;
  9129  00D6FA  C003  FFA9         	movff	eepromRead@address,4009	;volatile
  9130                           
  9131                           ;interface.c: 66: EECON1bits.EEPGD = 0;
  9132  00D6FE  9EA6               	bcf	4006,7,c	;volatile
  9133                           
  9134                           ;interface.c: 67: EECON1bits.CFGS = 0;
  9135  00D700  9CA6               	bcf	4006,6,c	;volatile
  9136                           
  9137                           ;interface.c: 68: EECON1bits.RD = 1;
  9138  00D702  80A6               	bsf	4006,0,c	;volatile
  9139  00D704                     l740:
  9140  00D704  B0A6               	btfsc	4006,0,c	;volatile
  9141  00D706  D7FE               	goto	l740
  9142                           
  9143                           ;interface.c: 74: return EEDATA;
  9144  00D708  50A8               	movf	4008,w,c	;volatile
  9145  00D70A  0012               	return	
  9146  00D70C                     __end_of_eepromRead:
  9147                           	opt stack 0
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           prodh	equ	0xFF4
  9153                           prodl	equ	0xFF3
  9154                           intcon2	equ	0xFF1
  9155                           postinc0	equ	0xFEE
  9156                           wreg	equ	0xFE8
  9157                           indf2	equ	0xFDF
  9158                           postinc2	equ	0xFDE
  9159                           postdec2	equ	0xFDD
  9160                           fsr2h	equ	0xFDA
  9161                           fsr2l	equ	0xFD9
  9162                           status	equ	0xFD8
  9163                           
  9164 ;; *************** function _PWM2off *****************
  9165 ;; Defined at:
  9166 ;;		line 48 in file "motors.c"
  9167 ;; Parameters:    Size  Location     Type
  9168 ;;		None
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      void 
  9173 ;; Registers used:
  9174 ;;		wreg, status,2
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;Total ram usage:        0 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; This function calls:
  9187 ;;		Nothing
  9188 ;; This function is called by:
  9189 ;;		_main
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           	psect	text28
  9194  00D5CE                     __ptext28:
  9195                           	opt stack 0
  9196  00D5CE                     _PWM2off:
  9197                           	opt stack 30
  9198                           
  9199                           ;motors.c: 49: CCP2CONbits.DC2B0 = 0;
  9200                           
  9201                           ;incstack = 0
  9202  00D5CE  98BA               	bcf	4026,4,c	;volatile
  9203                           
  9204                           ;motors.c: 50: CCP2CONbits.DC2B1 = 0;
  9205  00D5D0  9ABA               	bcf	4026,5,c	;volatile
  9206                           
  9207                           ;motors.c: 52: CCPR2L = 0;
  9208  00D5D2  0E00               	movlw	0
  9209  00D5D4  6EBB               	movwf	4027,c	;volatile
  9210  00D5D6  0012               	return		;funcret
  9211  00D5D8                     __end_of_PWM2off:
  9212                           	opt stack 0
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           intcon2	equ	0xFF1
  9220                           postinc0	equ	0xFEE
  9221                           wreg	equ	0xFE8
  9222                           indf2	equ	0xFDF
  9223                           postinc2	equ	0xFDE
  9224                           postdec2	equ	0xFDD
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _PWM2 *****************
  9230 ;; Defined at:
  9231 ;;		line 34 in file "motors.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  duty            2    0[COMRAM] int 
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      void 
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;Total ram usage:        4 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_main
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text29
  9259  00D79C                     __ptext29:
  9260                           	opt stack 0
  9261  00D79C                     _PWM2:
  9262                           	opt stack 30
  9263                           
  9264                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  9265                           
  9266                           ;incstack = 0
  9267  00D79C  C001  F003         	movff	PWM2@duty,??_PWM2
  9268  00D7A0  0E01               	movlw	1
  9269  00D7A2  1603               	andwf	??_PWM2,f,c
  9270  00D7A4  3A03               	swapf	??_PWM2,f,c
  9271  00D7A6  50BA               	movf	4026,w,c	;volatile
  9272  00D7A8  1803               	xorwf	??_PWM2,w,c
  9273  00D7AA  0BEF               	andlw	-17
  9274  00D7AC  1803               	xorwf	??_PWM2,w,c
  9275  00D7AE  6EBA               	movwf	4026,c	;volatile
  9276                           
  9277                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9278  00D7B0  3402               	rlcf	PWM2@duty+1,w,c
  9279  00D7B2  3002               	rrcf	PWM2@duty+1,w,c
  9280  00D7B4  6E04               	movwf	(??_PWM2+1)& (0+255),c
  9281  00D7B6  3001               	rrcf	PWM2@duty,w,c
  9282  00D7B8  6E03               	movwf	??_PWM2& (0+255),c
  9283  00D7BA  0E01               	movlw	1
  9284  00D7BC  1603               	andwf	??_PWM2,f,c
  9285  00D7BE  3A03               	swapf	??_PWM2,f,c
  9286  00D7C0  4603               	rlncf	??_PWM2,f,c
  9287  00D7C2  50BA               	movf	4026,w,c	;volatile
  9288  00D7C4  1803               	xorwf	??_PWM2,w,c
  9289  00D7C6  0BDF               	andlw	-33
  9290  00D7C8  1803               	xorwf	??_PWM2,w,c
  9291  00D7CA  6EBA               	movwf	4026,c	;volatile
  9292                           
  9293                           ;motors.c: 44: CCPR2L = (duty >> 2);
  9294  00D7CC  C001  F003         	movff	PWM2@duty,??_PWM2
  9295  00D7D0  C002  F004         	movff	PWM2@duty+1,??_PWM2+1
  9296  00D7D4  3404               	rlcf	??_PWM2+1,w,c
  9297  00D7D6  3204               	rrcf	??_PWM2+1,f,c
  9298  00D7D8  3203               	rrcf	??_PWM2,f,c
  9299  00D7DA  3404               	rlcf	??_PWM2+1,w,c
  9300  00D7DC  3204               	rrcf	??_PWM2+1,f,c
  9301  00D7DE  3203               	rrcf	??_PWM2,f,c
  9302  00D7E0  5003               	movf	??_PWM2,w,c
  9303  00D7E2  6EBB               	movwf	4027,c	;volatile
  9304  00D7E4  0012               	return		;funcret
  9305  00D7E6                     __end_of_PWM2:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon2	equ	0xFF1
  9314                           postinc0	equ	0xFEE
  9315                           wreg	equ	0xFE8
  9316                           indf2	equ	0xFDF
  9317                           postinc2	equ	0xFDE
  9318                           postdec2	equ	0xFDD
  9319                           fsr2h	equ	0xFDA
  9320                           fsr2l	equ	0xFD9
  9321                           status	equ	0xFD8
  9322                           
  9323 ;; *************** function _PWM1off *****************
  9324 ;; Defined at:
  9325 ;;		line 28 in file "motors.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_main
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           	psect	text30
  9353  00D5C4                     __ptext30:
  9354                           	opt stack 0
  9355  00D5C4                     _PWM1off:
  9356                           	opt stack 30
  9357                           
  9358                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  9359                           
  9360                           ;incstack = 0
  9361  00D5C4  98BD               	bcf	4029,4,c	;volatile
  9362                           
  9363                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  9364  00D5C6  9ABD               	bcf	4029,5,c	;volatile
  9365                           
  9366                           ;motors.c: 31: CCPR1L = 0;
  9367  00D5C8  0E00               	movlw	0
  9368  00D5CA  6EBE               	movwf	4030,c	;volatile
  9369  00D5CC  0012               	return		;funcret
  9370  00D5CE                     __end_of_PWM1off:
  9371                           	opt stack 0
  9372                           tblptru	equ	0xFF8
  9373                           tblptrh	equ	0xFF7
  9374                           tblptrl	equ	0xFF6
  9375                           tablat	equ	0xFF5
  9376                           prodh	equ	0xFF4
  9377                           prodl	equ	0xFF3
  9378                           intcon2	equ	0xFF1
  9379                           postinc0	equ	0xFEE
  9380                           wreg	equ	0xFE8
  9381                           indf2	equ	0xFDF
  9382                           postinc2	equ	0xFDE
  9383                           postdec2	equ	0xFDD
  9384                           fsr2h	equ	0xFDA
  9385                           fsr2l	equ	0xFD9
  9386                           status	equ	0xFD8
  9387                           
  9388 ;; *************** function _PWM1 *****************
  9389 ;; Defined at:
  9390 ;;		line 14 in file "motors.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;  duty            2    0[COMRAM] int 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;		None
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  1    wreg      void 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2, status,0
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9404 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;Total ram usage:        4 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; This function calls:
  9411 ;;		Nothing
  9412 ;; This function is called by:
  9413 ;;		_main
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           	psect	text31
  9418  00D752                     __ptext31:
  9419                           	opt stack 0
  9420  00D752                     _PWM1:
  9421                           	opt stack 30
  9422                           
  9423                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  9424                           
  9425                           ;incstack = 0
  9426  00D752  C001  F003         	movff	PWM1@duty,??_PWM1
  9427  00D756  0E01               	movlw	1
  9428  00D758  1603               	andwf	??_PWM1,f,c
  9429  00D75A  3A03               	swapf	??_PWM1,f,c
  9430  00D75C  50BD               	movf	4029,w,c	;volatile
  9431  00D75E  1803               	xorwf	??_PWM1,w,c
  9432  00D760  0BEF               	andlw	-17
  9433  00D762  1803               	xorwf	??_PWM1,w,c
  9434  00D764  6EBD               	movwf	4029,c	;volatile
  9435                           
  9436                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  9437  00D766  3402               	rlcf	PWM1@duty+1,w,c
  9438  00D768  3002               	rrcf	PWM1@duty+1,w,c
  9439  00D76A  6E04               	movwf	(??_PWM1+1)& (0+255),c
  9440  00D76C  3001               	rrcf	PWM1@duty,w,c
  9441  00D76E  6E03               	movwf	??_PWM1& (0+255),c
  9442  00D770  0E01               	movlw	1
  9443  00D772  1603               	andwf	??_PWM1,f,c
  9444  00D774  3A03               	swapf	??_PWM1,f,c
  9445  00D776  4603               	rlncf	??_PWM1,f,c
  9446  00D778  50BD               	movf	4029,w,c	;volatile
  9447  00D77A  1803               	xorwf	??_PWM1,w,c
  9448  00D77C  0BDF               	andlw	-33
  9449  00D77E  1803               	xorwf	??_PWM1,w,c
  9450  00D780  6EBD               	movwf	4029,c	;volatile
  9451                           
  9452                           ;motors.c: 24: CCPR1L = (duty >> 2);
  9453  00D782  C001  F003         	movff	PWM1@duty,??_PWM1
  9454  00D786  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  9455  00D78A  3404               	rlcf	??_PWM1+1,w,c
  9456  00D78C  3204               	rrcf	??_PWM1+1,f,c
  9457  00D78E  3203               	rrcf	??_PWM1,f,c
  9458  00D790  3404               	rlcf	??_PWM1+1,w,c
  9459  00D792  3204               	rrcf	??_PWM1+1,f,c
  9460  00D794  3203               	rrcf	??_PWM1,f,c
  9461  00D796  5003               	movf	??_PWM1,w,c
  9462  00D798  6EBE               	movwf	4030,c	;volatile
  9463  00D79A  0012               	return		;funcret
  9464  00D79C                     __end_of_PWM1:
  9465                           	opt stack 0
  9466                           tblptru	equ	0xFF8
  9467                           tblptrh	equ	0xFF7
  9468                           tblptrl	equ	0xFF6
  9469                           tablat	equ	0xFF5
  9470                           prodh	equ	0xFF4
  9471                           prodl	equ	0xFF3
  9472                           intcon2	equ	0xFF1
  9473                           postinc0	equ	0xFEE
  9474                           wreg	equ	0xFE8
  9475                           indf2	equ	0xFDF
  9476                           postinc2	equ	0xFDE
  9477                           postdec2	equ	0xFDD
  9478                           fsr2h	equ	0xFDA
  9479                           fsr2l	equ	0xFD9
  9480                           status	equ	0xFD8
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon2	equ	0xFF1
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497                           	psect	rparam
  9498  0000                     tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon2	equ	0xFF1
  9505                           postinc0	equ	0xFEE
  9506                           wreg	equ	0xFE8
  9507                           indf2	equ	0xFDF
  9508                           postinc2	equ	0xFDE
  9509                           postdec2	equ	0xFDD
  9510                           fsr2h	equ	0xFDA
  9511                           fsr2l	equ	0xFD9
  9512                           status	equ	0xFD8


Data Sizes:
    Strings     490
    Constant    96
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    111     127
    BANK0           128      0      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_66(CODE[15]), STR_65(CODE[16]), STR_64(CODE[16]), STR_63(CODE[16]), 
		 -> STR_62(CODE[14]), STR_61(CODE[16]), STR_60(CODE[8]), STR_59(CODE[15]), 
		 -> STR_58(CODE[8]), STR_57(CODE[16]), STR_56(CODE[2]), STR_55(CODE[2]), 
		 -> STR_54(CODE[2]), STR_53(CODE[2]), STR_52(CODE[2]), STR_51(CODE[2]), 
		 -> STR_50(CODE[2]), STR_49(CODE[2]), STR_48(CODE[12]), STR_47(CODE[12]), 
		 -> STR_46(CODE[13]), STR_45(CODE[11]), STR_44(CODE[6]), STR_43(CODE[13]), 
		 -> STR_42(CODE[11]), STR_41(CODE[9]), STR_40(CODE[11]), STR_39(CODE[10]), 
		 -> STR_38(CODE[7]), STR_37(CODE[14]), STR_36(CODE[12]), STR_35(CODE[14]), 
		 -> STR_34(CODE[12]), STR_33(CODE[13]), STR_32(CODE[11]), STR_31(CODE[6]), 
		 -> STR_30(CODE[13]), STR_29(CODE[11]), STR_28(CODE[9]), STR_27(CODE[11]), 
		 -> STR_26(CODE[10]), STR_25(CODE[7]), STR_24(CODE[14]), STR_23(CODE[11]), 
		 -> STR_22(CODE[14]), STR_21(CODE[8]), STR_20(CODE[12]), STR_19(CODE[8]), 
		 -> STR_18(CODE[14]), STR_17(CODE[3]), STR_16(CODE[12]), STR_15(CODE[3]), 
		 -> STR_14(CODE[12]), STR_13(CODE[3]), STR_12(CODE[12]), STR_11(CODE[11]), 
		 -> STR_10(CODE[13]), STR_9(CODE[13]), STR_8(CODE[16]), STR_7(CODE[16]), 
		 -> STR_6(CODE[16]), STR_5(CODE[16]), STR_4(CODE[12]), STR_3(CODE[12]), 
		 -> STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_updateS1
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _updateS1->_printf
    _timePassed->___wmul
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->___llmod
    _putch->_lcdNibble
    ___llmod->___lldiv
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                61    61      0   46897
                                             52 COMRAM    59    59      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                            ___llmod
                             ___wmul
                        _displayLogs
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _timePassed
                           _updateS1
                           _updateS2
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2    1262
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS2                                             3     1      2     750
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2    9542
                                             49 COMRAM     3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (1) _timePassed                                          11     9      2    2443
                                              6 COMRAM    11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     767
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     632
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    8565
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    8609
                                             49 COMRAM     1     1      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              36    26     10    8430
                                             22 COMRAM    27    17     10
                            ___lldiv
                            ___llmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1951
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     415
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 4     2      2     258
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     130
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   ___llmod
     ___lldiv (ARG)
   ___wmul
   _displayLogs
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
     _timePassed (ARG)
       ___wmul
   _readADC
   _timePassed
     ___wmul
   _updateS1
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _updateS2
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       A       5        7.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6F      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      89      34        0.0%
DATA                 0      0      89       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 29 04:42:10 2017

                        _s 007B                          _t 0079               ?_displayLogs 0001  
                       _s1 0088                         _s2 0086                         _s3 0084  
                       _t2 0077                         _t3 007D        ___wmul@multiplicand 0003  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l140 F0BA  
                      l151 EB0C                        l160 EB68                        l153 EB1A  
                      l162 EB76                        l171 EBD2                        l147 EAF0  
                      l164 EB84                        l181 EE52                        l173 EBE0  
                      l149 EAFE                        l510 DCCC                        l502 DC98  
                      l190 EF9A                        l158 EB5A                        l175 EBEE  
                      l512 DCC8                        l504 DC94                        l184 EEBE  
                      l193 F00A                        l169 EBC4                        l530 DD94  
                      l514 DCE6                        l506 DCB2                        l370 D5FA  
                      l187 EF2A                        l524 DD58                        l516 DCE2  
                      l508 DCAE                        l541 DE08                        l526 DD6C  
                      l471 DFCA                        l463 DF7E                        l551 DE38  
                      l543 DE04                        l528 DD80                        l721 D60C  
                      l473 DFBA                        l465 DF6E                        l553 DE56  
                      l545 DE22                        l730 D630                        l731 D62C  
                      l491 E0DE                        l475 DFF0                        l467 DFA4  
                      l563 DEC8                        l555 DE52                        l547 DE1E  
                      l740 D704                        l724 D618                        l485 E07E  
                      l477 DFE0                        l469 DF94                        l565 DEDC  
                      l549 DE3C                        l487 E09E                        l567 DEF0  
                      l489 E0BE                        l569 DF04                        l818 E24C  
             __CFG_CPB$OFF 000000                        _PR2 000FCB                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1213 DAAC                       l1223 D94C                       l4011 E96E  
                     l3303 DA5E                       l3305 DA6A                       l3401 E210  
                     l4113 EB78                       l4105 EB5C                       l3315 DA9E  
                     l3307 DA6E                       l3331 D93E                       l3323 D90A  
                     l4051 EA62                       l4019 E992                       l3325 D916  
                     l3421 E296                       l3501 E4DA                       l4213 EE5E  
                     l4141 EBE2                       l4133 EBC6                       l4109 EB6A  
                     l4117 EB86                       l3327 D91A                       l3415 E26C  
                     l4311 F0AC                       l4127 EBB4                       l4071 EAE0  
                     l4063 EABA                       l4039 EA0A                       l3433 E2CE  
                     l3601 DF80                       l4233 EECA                       l4137 EBD4  
                     l4145 EBF0                       l4081 EB00                       l3435 E2D2  
                     l3451 E320                       l3419 E292                       l3363 E0FC  
                     l4411 F376                       l3461 E35E                       l3365 E10A  
                     l3613 DFCC                       l4413 F386                       l4405 F34A  
                     l4421 F3BE                       l4309 F0A8                       l4253 EF36  
                     l4173 ECF6                       l4085 EB0E                       l4077 EAF2  
                     l4317 F0CA                       l3287 D64A                       l3463 E366  
                     l3383 E19C                       l3375 E13E                       l3391 E1AA  
                     l3359 E0EC                       l3607 DFA6                       l3711 DD48  
                     l3703 DD18                       l3527 D6DE                       l3481 E3AE  
                     l3457 E33A                       l3449 E30A                       l3385 E1A0  
                     l3393 E1E4                       l3369 E110                       l3801 D692  
                     l4601 F8A0                       l4513 F65A                       l4505 F634  
                     l4433 F416                       l4345 F1FA                       l4273 EFA6  
                     l4193 EDF2                       l4089 EB1C                       l3475 E392  
                     l3387 E1A4                       l3643 E080                       l3635 E058  
                     l3619 DFF4                       l3723 DD82                       l3715 DD5A  
                     l3571 D99A                       l4611 F8E2                       l4523 F688  
                     l4507 F644                       l4419 F3B2                       l4355 F222  
                     l4435 F422                       l4339 F1DE                       l4099 EB4A  
                     l3477 E39A                       l3485 E3C0                       l3469 E37C  
                     l3637 E062                       l3629 E032                       l3709 DD3E  
                     l3733 DDB8                       l4701 FB88                       l4525 F698  
                     l4517 F672                       l4533 F6B4                       l4461 F530  
                     l4365 F266                       l4293 F026                       l4189 EDE6  
                     l3487 E3CC                       l3495 E4AE                       l3655 E0C0  
                     l3719 DD6E                       l3671 DC5C                       l3567 D992  
                     l4703 FB90                       l4631 F95A                       l4623 F920  
                     l4551 F708                       l4543 F6E2                       l4463 F54A  
                     l4383 F2D0                       l4439 F43A                       l3489 E444  
                     l3497 E4C4                       l3649 E0A0                       l3593 DF4E  
                     l3585 DF28                       l3753 DE24                       l3745 DDF2  
                     l3761 DE5A                       l3737 DDCC                       l3577 D9B6  
                     l4801 FDA8                       l4721 FC04                       l4713 FBDE  
                     l4545 F6F2                       l4537 F6CC                       l4553 F70A  
                     l4481 F5B6                       l4465 F552                       l4385 F2E0  
                     l4377 F2A4                       l4393 F30C                       l3921 E5CA  
                     l3499 E4CA                       l3691 DCCE                       l3683 DC9A  
                     l3667 DC48                       l4651 F9C2                       l4491 F5EC  
                     l4483 F5C6                       l4475 F5A0                       l4459 F520  
                     l3907 E588                       l3781 DECA                       l3757 DE3E  
                     l3749 DE0A                       l4733 FC4A                       l4629 F94A  
                     l4565 F752                       l3687 DCB4                       l3679 DC82  
                     l3695 DCEA                       l3775 DEAE                       l4751 FCB0  
                     l4735 FC5A                       l4743 FC80                       l4727 FC1A  
                     l4719 FBF4                       l4639 F984                       l4591 F878  
                     l4495 F60C                       l4559 F73C                       l3785 DEDE  
                     l3777 DEB8                       l3769 DE88                       l4761 FCDE  
                     l4745 FC90                       l4729 FC2A                       l4665 FA26  
                     l4657 F9EC                       l4681 FA8E                       l4585 F85C  
                     l4497 F61C                       l4489 F5DC                       l4763 FCEE  
                     l4755 FCC8                       l4771 FD04                       l4659 F9FC  
                     l4667 FA30                       l3789 DEF2                       l4781 FD32  
                     l4749 FCA4                       l4685 FAA2                       l3981 E7D0  
                     l3799 D684                       l4783 FD42                       l4775 FD1C  
                     l4791 FD60                       l4697 FB5E                       l3985 E7EA  
                     l3969 E7A0                       l3977 E7C4                       _ADFM 007E07  
                     l4699 FB6E                       l3995 E812                       l4789 FD58  
                     l4797 FD94                       STR_1 FE56                       STR_2 FE76  
                     STR_3 FF89                       STR_4 FF65                       STR_5 FE66  
                     STR_6 FE86                       STR_7 FE96                       STR_8 FEA6  
                     STR_9 FF27                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       u3040 DF46                       _LATD 000F8C  
                     _LATE 000F8D                       u3140 E028                       u3240 DC7A  
                     u3340 DD0E                       u4150 F416                       u5007 F8AC  
                     u3440 DDEA                       u5017 F8F6                       u5107 D712  
                     u5027 F998                       u3540 DE7E                       u5117 D746  
                     u5037 FA3C                       u4350 F73A                       u5127 DB74  
                     u5047 DD9E                       u5137 DBB8                       u5057 DC2E  
                     u3730 E96C                       u5147 DBFC                       u5067 DF0E  
                     u3740 E990                       u5157 D7FE                       u2685 D86A  
                     u5077 DF54                       u4470 FA84                       u3670 E79E  
                     u5167 D808                       u5087 DFFA                       u2960 D6DC  
                     u3680 E7C2                       u5177 D82A                       u5097 D68A  
                     u5187 D834                       u4707 E57E                       u4660 FD88  
                     _RCEN 007E2B                       u4717 E602                       u4807 EE00  
                     u4727 E9A8                       u2985 D6EE                       u4817 EE1A  
                     u4737 EACA                       u4907 F072                       u4827 EE6C  
                     u4747 EB34                       u4917 F0E0                       u4837 EE86  
                     u4757 EB9E                       u4927 F1D0                       u4847 EED8  
                     u4767 EC04                       u4937 F22E                       u4857 EEF2  
                     u4777 EC38                       u4947 F27A                       u4867 EF44  
                     u4787 ED08                       u4957 F320                       u4877 EF5E  
                     u4797 ED22                       u4967 F3CA                       u4887 EFB4  
                     u4977 F450                       u4897 EFCE                       u4987 F75E  
                     u4997 F84E                       _PWM1 D752                       _PWM2 D79C  
                     _RSEN 007E29            __end_of_PWM1off D5CE            __end_of_PWM2off D5D8  
                     _main E4F4                       _curr 0080                       _keys FDFD  
                     _time 0070                       _prev 0082                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                main@standby 005A  
                     prodh 000FF4               main@canCheck 0040                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ?_PWM1 0001                      ?_PWM2 0001  
         ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D                      _ADRES 000FC3                      _EEADR 000FA9  
                    STR_10 FF1A                      STR_11 FFC2                      STR_20 FF71  
                    STR_12 FF41                      STR_13 FFF5                      STR_21 FFF0  
                    STR_14 FF4D                      STR_30 FF34                      STR_22 FEE2  
                    STR_31 FEF8                      STR_15 FFF5                      STR_23 FFB7  
                    STR_32 FFA1                      STR_40 FFAC                      STR_16 FF59  
                    STR_24 FF0C                      STR_33 FF34                      STR_41 FFD7  
                    STR_17 FFF5                      STR_25 FFF8                      STR_50 FF32  
                    STR_42 FFA1                      STR_26 FFCD                      STR_34 FF7D  
                    STR_18 FEF0                      STR_51 FF63                      STR_43 FF34  
                    STR_19 FFF0                      STR_27 FFAC                      STR_35 FEFE  
                    STR_52 FEC3                      STR_44 FEF8                      STR_60 FFE0  
                    STR_28 FFD7                      STR_36 FF95                      STR_53 FF25  
                    STR_45 FFA1                      STR_37 FF0C                      STR_29 FFA1  
                    STR_61 FE46                      STR_54 FF32                      STR_38 FFF8  
                    STR_46 FF34                      STR_62 FED4                      STR_55 FF63  
                    STR_47 FF7D                      STR_63 FE46                      STR_39 FFCD  
                    STR_56 FEC3                      STR_48 FF95                      STR_64 FE36  
                    STR_49 FF25                      STR_65 FE46                      STR_57 FE26  
                    STR_58 FFE8                      STR_66 FEB6                      STR_59 FEC5  
                    STR_67 FE15            __end_of___lldiv DABE                      _T0CON 000FD5  
          __end_of___llmod D95E                      _T2CON 000FCA               updateS1@mode 0032  
             updateS2@mode 0001               updateS3@mode 0001                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96               main@tabState 005C  
            __CFG_PWRT$OFF 000000            timePassed@start 0007              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst D5EE             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC D698            __end_of_initLCD D752  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers FDDD               main@sodaLoad 003E  
          __end_of_isdigit D652               main@sodaSort 0062                      _putch D5EE  
                    main@c 0050                      main@s 0064                      tablat 000FF5  
                    status 000FD8               main@soupLoad 0054               main@soupSort 0060  
           __CFG_PBADEN$ON 000000               __end_of_PWM1 D79C               __end_of_PWM2 D7E6  
          __initialization D652               __end_of_main FDB4               __end_of_keys FE0E  
                   ??_PWM1 0003                     ??_PWM2 0003                     ??_main 0035  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002  
       ??_I2C_Master_Start 0002                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0004                     _ADCON2 000FC0                  ??_PWM1off 0001  
                ??_PWM2off 0001           ___llmod@dividend 000E                     _ADRESH 000FC4  
                   _EEADRH 000FAA                     _ADRESL 000FC3                     _EEDATA 000FA8  
                   _CCPR1L 000FBE                     _CCPR2L 000FBB                     _EECON2 000FA7  
                   ?_putch 0001                     _CVRCON 000FB5                     _OSCCON 000FD3  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000                     ___wmul D698  
           __CFG_STVREN$ON 000000                  ??___lldiv 0009                  ??___llmod 0016  
         __end_of_keycheck D620                     clear_0 D658                     clear_1 D664  
         __end_of_currtime FE15              main@sodaState 0044                  ??_lcdInst 0003  
                   _printf E0E2       __size_of_displayLogs 00C0                     main@dc 0046  
                ??_readADC 0001                  ??_initLCD 0004                  ??_isdigit 0001  
             __mediumconst FDB4                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8              ?_keyinterrupt 0001           __end_of_updateS1 E0E2  
         __end_of_updateS2 DD98           __end_of_updateS3 DF08              main@startTime 0058  
               __accesstop 0080    __end_of__initialization D66A              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch D5FA         __size_of_lcdNibble 0056  
        eepromRead@address 0003             ??_keyinterrupt 0001                    ??_putch 0003  
               __pbssBANK0 0080             main@labelState 005E                    ?___wmul 0001  
                  _CCP1CON 000FBD                    _CCP2CON 000FBA                    ?_printf 0017  
               _eepromRead D6E4                    _PWM1off D5C4                    _PWM2off D5CE  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                ?_keycheck 0001          __end_of_lcdNibble D83C                    __Hparam 0000  
                  __Lparam 0000                  ?_updateS1 0032                  ?_updateS2 0001  
                ?_updateS3 0001                    ___lldiv DA3C            __size_of___wmul 0026  
                  ___llmod D8F8                  _CMCONbits 000FB4                 _homescreen D896  
                  __pcinit D652                    __ramtop 1000                 _initialize D9C4  
                  _lcdInst D5E2                    __ptext0 E4F4                    __ptext1 D95E  
                  __ptext2 D5D8                    __ptext3 D5BC                    __ptext4 D5B4  
                  __ptext5 D6BE                    __ptext6 D5FA                    __ptext7 DD98  
                  __ptext8 DC28                    __ptext9 DF08            __size_of_printf 0412  
                  _readADC D674                    _initLCD D70C          __end_of_hexpowers FDFD  
                  _dpowers FDB5                    _isdigit D634             main@sodaThresh 004C  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008       end_of_initialization D66A                 ??_keycheck 0001  
            __Lmediumconst FDB4  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0005            ___lldiv@counter 000D       __end_of_keyinterrupt D634  
               _timePassed DABE                    printf@c 0031                    printf@f 0017  
         I2C_Master_Init@c 000E           I2C_Master_Read@a 0002                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 ??_updateS1 0034  
               ??_updateS2 0003                 ??_updateS3 0003                  _PORTBbits 000F81  
              ?_eepromRead 0001                 main@S1mode 006A                 main@S2mode 0066  
               main@S3mode 006E                 _updateTime D95E                _CCP1CONbits 000FBD  
              printf@width 002E                _CCP2CONbits 000FBA              ??_displayLogs 0032  
              ?_homescreen 0001             __end_of___wmul D6BE                ?_initialize 0001  
           __end_of_printf E4F4        start_initialization D652                updateTime@j 0004  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002            ___llmod@divisor 0012           __CFG_OSC$INTIO67 000000  
          ___llmod@counter 0016        __size_of_eepromRead 0028                ?_timePassed 0007  
                 ??___wmul 0005           __CFG_LPT1OSC$OFF 000000                   ??_printf 0021  
      __end_of_displayLogs DC28                __pbssCOMRAM 0070                ?_updateTime 0001  
             _isdigit$1330 0002                   ?_PWM1off 0001                   ?_PWM2off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0014        __size_of_initialize 0078  
         _I2C_Master_Start D5B4           _I2C_Master_Write D5D8          __size_of_keycheck 0014  
                _main$1702 004A          __CFG_CCP2MX$PORTC 000000              __pmediumconst FDB4  
                _lcdNibble D7E6                   ?___lldiv 0001                   PWM1@duty 0001  
                 ?___llmod 000E                   PWM2@duty 0001          __size_of_updateS1 01DA  
        __size_of_updateS2 0170          __size_of_updateS3 0170                   ?_lcdInst 0001  
                 ?_readADC 0001                   ?_initLCD 0001                   ?_isdigit 0001  
             _keyinterrupt D620                  _hexpowers FDDD        __size_of_timePassed 00AA  
           __size_of_putch 000C             ___wmul@product 0005                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                   _PIR2bits 000FA1           __CFG_WDTPS$32768 000000  
      __size_of_updateTime 0066                 ?_lcdNibble 0001                _displayLogs DB68  
               _ADCON0bits 000FC2          ___wmul@multiplier 0001              lcdNibble@data 0002  
             ??_eepromRead 0001                 printf@flag 0030              lcdNibble@temp 0001  
               printf@prec 0026           main@prevSodaLoad 0056           main@prevSodaTime 0048  
      I2C_Master_Read@temp 0003           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
         main@prevSoupLoad 004E           main@prevSoupTime 0042                 _EECON1bits 000FA6  
                 __Hrparam 0000                   __Lrparam 0000         __end_of_eepromRead D70C  
       __CFG_BOREN$SBORDIS 000000               ??_homescreen 0032           __size_of___lldiv 0082  
         __size_of___llmod 0066             readADC@channel 0002               ??_initialize 0016  
         __size_of_lcdInst 000C            _I2C_Master_Init D83C           __size_of_readADC 0024  
          _I2C_Master_Read D6BE           __size_of_initLCD 0046            _I2C_Master_Wait D5FA  
          _I2C_Master_Stop D5BC           __size_of_isdigit 001E                   __ptext10 DABE  
                 __ptext11 D674                   __ptext20 D634                   __ptext12 D620  
                 __ptext21 D698                   __ptext13 D9C4                   __ptext30 D5C4  
                 __ptext22 D8F8                   __ptext14 D70C                   __ptext31 D752  
                 __ptext23 DA3C                   __ptext15 D83C                   __ptext24 D5E2  
                 __ptext16 D896                   __ptext25 D7E6                   __ptext17 DB68  
                 __ptext26 D60C                   __ptext18 E0E2                   __ptext27 D6E4  
                 __ptext19 D5EE                   __ptext28 D5CE                   __ptext29 D79C  
            __size_of_PWM1 004A              __size_of_PWM2 004A         __end_of_homescreen D8F8  
                 _keycheck D60C              __size_of_main 18C0                   _currtime FE0E  
                 _keypress 007F         __end_of_initialize DA3C               ??_timePassed 0009  
              ??_lcdNibble 0001                   _updateS1 DF08                   _updateS2 DC28  
                 _updateS3 DD98                  printf@idx 0025                  printf@val 002A  
          main@prevUnblock 003C                  putch@data 0003   __end_of_I2C_Master_Start D5BC  
              _OSCTUNEbits 000F9B   __end_of_I2C_Master_Write D5E2               ??_updateTime 0004  
                 isdigit@c 0003         __end_of_timePassed DB68           ___lldiv@dividend 0001  
                 printf@ap 0028         __end_of_updateTime D9C4    __end_of_I2C_Master_Init D896  
  __end_of_I2C_Master_Read D6E4    __end_of_I2C_Master_Wait D60C    __end_of_I2C_Master_Stop D5C4  
              lcdInst@data 0003           ___lldiv@quotient 0009          I2C_Master_Write@d 0002  
              main@S1steps 006C                main@S3steps 0068  
