

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 12 02:09:08 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.41
    60                           ; Generated 25/01/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4620 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	mediumconst
    95  00FE12                     __pmediumconst:
    96                           	opt stack 0
    97  00FE12  00                 	db	0
    98  00FE13                     _keys:
    99                           	opt stack 0
   100  00FE13  31                 	db	49
   101  00FE14  32                 	db	50
   102  00FE15  33                 	db	51
   103  00FE16  41                 	db	65
   104  00FE17  34                 	db	52
   105  00FE18  35                 	db	53
   106  00FE19  36                 	db	54
   107  00FE1A  42                 	db	66
   108  00FE1B  37                 	db	55
   109  00FE1C  38                 	db	56
   110  00FE1D  39                 	db	57
   111  00FE1E  43                 	db	67
   112  00FE1F  2A                 	db	42
   113  00FE20  30                 	db	48
   114  00FE21  23                 	db	35
   115  00FE22  44                 	db	68
   116  00FE23  00                 	db	0
   117  00FE24                     __end_of_keys:
   118                           	opt stack 0
   119  00FE24                     _dpowers:
   120                           	opt stack 0
   121  00FE24  0001               	dw	1
   122  00FE26  000A               	dw	10
   123  00FE28  0064               	dw	100
   124  00FE2A  03E8               	dw	1000
   125  00FE2C  2710               	dw	10000
   126  00FE2E                     __end_of_dpowers:
   127                           	opt stack 0
   128  00FE2E                     _hexpowers:
   129                           	opt stack 0
   130  00FE2E  0001               	dw	1
   131  00FE30  0010               	dw	16
   132  00FE32  0100               	dw	256
   133  00FE34  1000               	dw	4096
   134  00FE36                     __end_of_hexpowers:
   135                           	opt stack 0
   136  00FE36                     _currtime:
   137                           	opt stack 0
   138  00FE36  30                 	db	48
   139  00FE37  03                 	db	3
   140  00FE38  01                 	db	1
   141  00FE39  04                 	db	4
   142  00FE3A  12                 	db	18
   143  00FE3B  04                 	db	4
   144  00FE3C  17                 	db	23
   145  00FE3D                     __end_of_currtime:
   146                           	opt stack 0
   147  0000                     _ADRES	set	4035
   148  0000                     _TMR1L	set	4046
   149  0000                     _TMR1H	set	4047
   150  0000                     _T1CON	set	4045
   151  0000                     _TMR3L	set	4018
   152  0000                     _TMR3H	set	4019
   153  0000                     _T3CON	set	4017
   154  0000                     _ADCON0bits	set	4034
   155  0000                     _ADCON0	set	4034
   156  0000                     _PIR2bits	set	4001
   157  0000                     _EECON2	set	4007
   158  0000                     _EEDATA	set	4008
   159  0000                     _EECON1bits	set	4006
   160  0000                     _EEADR	set	4009
   161  0000                     _EEADRH	set	4010
   162  0000                     _PORTB	set	3969
   163  0000                     _PORTBbits	set	3969
   164  0000                     _CCP2CONbits	set	4026
   165  0000                     _CCP1CONbits	set	4029
   166  0000                     _SSPBUF	set	4041
   167  0000                     _SSPADD	set	4040
   168  0000                     _SSPCON2	set	4037
   169  0000                     _SSPCON1	set	4038
   170  0000                     _SSPSTAT	set	4039
   171  0000                     _ADRESH	set	4036
   172  0000                     _LATAbits	set	3977
   173  0000                     _LATEbits	set	3981
   174  0000                     _LATCbits	set	3979
   175  0000                     _LATBbits	set	3978
   176  0000                     _LATDbits	set	3980
   177  0000                     _T0CONbits	set	4053
   178  0000                     _CMCONbits	set	4020
   179  0000                     _CVRCON	set	4021
   180  0000                     _ADCON2	set	4032
   181  0000                     _ADCON1	set	4033
   182  0000                     _LATE	set	3981
   183  0000                     _LATD	set	3980
   184  0000                     _LATC	set	3979
   185  0000                     _LATB	set	3978
   186  0000                     _LATA	set	3977
   187  0000                     _T2CON	set	4042
   188  0000                     _CCPR2L	set	4027
   189  0000                     _CCP2CON	set	4026
   190  0000                     _CCPR1L	set	4030
   191  0000                     _CCP1CON	set	4029
   192  0000                     _PR2	set	4043
   193  0000                     _TRISE	set	3990
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISC	set	3988
   196  0000                     _TRISB	set	3987
   197  0000                     _TRISA	set	3986
   198  0000                     _OSCTUNEbits	set	3995
   199  0000                     _OSCCON	set	4051
   200  0000                     _TMR0L	set	4054
   201  0000                     _TMR0H	set	4055
   202  0000                     _T0CON	set	4053
   203  0000                     _INTCONbits	set	4082
   204  0000                     _TMR3ON	set	32136
   205  0000                     _ACKEN	set	32300
   206  0000                     _ACKDT	set	32301
   207  0000                     _RCEN	set	32299
   208  0000                     _PEN	set	32298
   209  0000                     _RSEN	set	32297
   210  0000                     _SEN	set	32296
   211  0000                     _TRISC4	set	31908
   212  0000                     _TRISC3	set	31907
   213  0000                     _PEIE	set	32662
   214  0000                     _TMR1IE	set	31976
   215  0000                     _TMR0IE	set	32661
   216  0000                     _ADFM	set	32263
   217  0000                     _nRBPU	set	32655
   218  0000                     _TMR1ON	set	32360
   219  0000                     _TMR1IF	set	31984
   220  0000                     _TMR0ON	set	32431
   221  0000                     _TMR0IF	set	32658
   222  00FE3D                     STR_43:
   223  00FE3D  53                 	db	83	;'S'
   224  00FE3E  74                 	db	116	;'t'
   225  00FE3F  61                 	db	97	;'a'
   226  00FE40  72                 	db	114	;'r'
   227  00FE41  74                 	db	116	;'t'
   228  00FE42  3A                 	db	58	;':'
   229  00FE43  20                 	db	32
   230  00FE44  25                 	db	37
   231  00FE45  30                 	db	48	;'0'
   232  00FE46  32                 	db	50	;'2'
   233  00FE47  78                 	db	120	;'x'
   234  00FE48  3A                 	db	58	;':'
   235  00FE49  25                 	db	37
   236  00FE4A  30                 	db	48	;'0'
   237  00FE4B  32                 	db	50	;'2'
   238  00FE4C  78                 	db	120	;'x'
   239  00FE4D  3A                 	db	58	;':'
   240  00FE4E  25                 	db	37
   241  00FE4F  30                 	db	48	;'0'
   242  00FE50  32                 	db	50	;'2'
   243  00FE51  78                 	db	120	;'x'
   244  00FE52  00                 	db	0
   245  00FE53                     STR_41:
   246  00FE53  44                 	db	68	;'D'
   247  00FE54  61                 	db	97	;'a'
   248  00FE55  74                 	db	116	;'t'
   249  00FE56  65                 	db	101	;'e'
   250  00FE57  3A                 	db	58	;':'
   251  00FE58  20                 	db	32
   252  00FE59  25                 	db	37
   253  00FE5A  30                 	db	48	;'0'
   254  00FE5B  32                 	db	50	;'2'
   255  00FE5C  78                 	db	120	;'x'
   256  00FE5D  2F                 	db	47
   257  00FE5E  25                 	db	37
   258  00FE5F  30                 	db	48	;'0'
   259  00FE60  32                 	db	50	;'2'
   260  00FE61  78                 	db	120	;'x'
   261  00FE62  2F                 	db	47
   262  00FE63  25                 	db	37
   263  00FE64  30                 	db	48	;'0'
   264  00FE65  32                 	db	50	;'2'
   265  00FE66  78                 	db	120	;'x'
   266  00FE67  00                 	db	0
   267  00FE68                     STR_52:
   268  00FE68  30                 	db	48	;'0'
   269  00FE69  31                 	db	49	;'1'
   270  00FE6A  32                 	db	50	;'2'
   271  00FE6B  33                 	db	51	;'3'
   272  00FE6C  34                 	db	52	;'4'
   273  00FE6D  35                 	db	53	;'5'
   274  00FE6E  36                 	db	54	;'6'
   275  00FE6F  37                 	db	55	;'7'
   276  00FE70  38                 	db	56	;'8'
   277  00FE71  39                 	db	57	;'9'
   278  00FE72  61                 	db	97	;'a'
   279  00FE73  62                 	db	98	;'b'
   280  00FE74  63                 	db	99	;'c'
   281  00FE75  64                 	db	100	;'d'
   282  00FE76  65                 	db	101	;'e'
   283  00FE77  66                 	db	102	;'f'
   284  00FE78  00                 	db	0
   285  00FE79                     STR_47:
   286  00FE79  53                 	db	83	;'S'
   287  00FE7A  6F                 	db	111	;'o'
   288  00FE7B  64                 	db	100	;'d'
   289  00FE7C  61                 	db	97	;'a'
   290  00FE7D  20                 	db	32
   291  00FE7E  77                 	db	119	;'w'
   292  00FE7F  2F                 	db	47
   293  00FE80  6F                 	db	111	;'o'
   294  00FE81  20                 	db	32
   295  00FE82  74                 	db	116	;'t'
   296  00FE83  61                 	db	97	;'a'
   297  00FE84  62                 	db	98	;'b'
   298  00FE85  3A                 	db	58	;':'
   299  00FE86  20                 	db	32
   300  00FE87  25                 	db	37
   301  00FE88  64                 	db	100	;'d'
   302  00FE89  00                 	db	0
   303  00FE8A                     STR_51:
   304  00FE8A  53                 	db	83	;'S'
   305  00FE8B  6F                 	db	111	;'o'
   306  00FE8C  75                 	db	117	;'u'
   307  00FE8D  70                 	db	112	;'p'
   308  00FE8E  20                 	db	32
   309  00FE8F  77                 	db	119	;'w'
   310  00FE90  2F                 	db	47
   311  00FE91  6F                 	db	111	;'o'
   312  00FE92  20                 	db	32
   313  00FE93  6C                 	db	108	;'l'
   314  00FE94  62                 	db	98	;'b'
   315  00FE95  6C                 	db	108	;'l'
   316  00FE96  3A                 	db	58	;':'
   317  00FE97  20                 	db	32
   318  00FE98  25                 	db	37
   319  00FE99  64                 	db	100	;'d'
   320  00FE9A  00                 	db	0
   321  00FE9B                     STR_38:
   322  00FE9B  52                 	db	82	;'R'
   323  00FE9C  75                 	db	117	;'u'
   324  00FE9D  6E                 	db	110	;'n'
   325  00FE9E  23                 	db	35
   326  00FE9F  25                 	db	37
   327  00FEA0  64                 	db	100	;'d'
   328  00FEA1  20                 	db	32
   329  00FEA2  20                 	db	32
   330  00FEA3  20                 	db	32
   331  00FEA4  20                 	db	32
   332  00FEA5  41                 	db	65	;'A'
   333  00FEA6  3A                 	db	58	;':'
   334  00FEA7  4E                 	db	78	;'N'
   335  00FEA8  65                 	db	101	;'e'
   336  00FEA9  78                 	db	120	;'x'
   337  00FEAA  74                 	db	116	;'t'
   338  00FEAB  00                 	db	0
   339  00FEAC                     STR_4:
   340  00FEAC  74                 	db	116	;'t'
   341  00FEAD  65                 	db	101	;'e'
   342  00FEAE  73                 	db	115	;'s'
   343  00FEAF  74                 	db	116	;'t'
   344  00FEB0  69                 	db	105	;'i'
   345  00FEB1  6E                 	db	110	;'n'
   346  00FEB2  67                 	db	103	;'g'
   347  00FEB3  20                 	db	32
   348  00FEB4  50                 	db	80	;'P'
   349  00FEB5  57                 	db	87	;'W'
   350  00FEB6  4D                 	db	77	;'M'
   351  00FEB7  32                 	db	50	;'2'
   352  00FEB8  20                 	db	32
   353  00FEB9  43                 	db	67	;'C'
   354  00FEBA  43                 	db	67	;'C'
   355  00FEBB  57                 	db	87	;'W'
   356  00FEBC  00                 	db	0
   357  00FEBD                     STR_33:
   358  00FEBD  56                 	db	86	;'V'
   359  00FEBE  69                 	db	105	;'i'
   360  00FEBF  65                 	db	101	;'e'
   361  00FEC0  77                 	db	119	;'w'
   362  00FEC1  20                 	db	32
   363  00FEC2  4C                 	db	76	;'L'
   364  00FEC3  6F                 	db	111	;'o'
   365  00FEC4  67                 	db	103	;'g'
   366  00FEC5  73                 	db	115	;'s'
   367  00FEC6  3F                 	db	63	;'?'
   368  00FEC7  20                 	db	32
   369  00FEC8  42                 	db	66	;'B'
   370  00FEC9  3A                 	db	58	;':'
   371  00FECA  59                 	db	89	;'Y'
   372  00FECB  65                 	db	101	;'e'
   373  00FECC  73                 	db	115	;'s'
   374  00FECD  00                 	db	0
   375  00FECE                     STR_34:
   376  00FECE  25                 	db	37
   377  00FECF  30                 	db	48	;'0'
   378  00FED0  32                 	db	50	;'2'
   379  00FED1  78                 	db	120	;'x'
   380  00FED2  2F                 	db	47
   381  00FED3  25                 	db	37
   382  00FED4  30                 	db	48	;'0'
   383  00FED5  32                 	db	50	;'2'
   384  00FED6  78                 	db	120	;'x'
   385  00FED7  2F                 	db	47
   386  00FED8  25                 	db	37
   387  00FED9  30                 	db	48	;'0'
   388  00FEDA  32                 	db	50	;'2'
   389  00FEDB  78                 	db	120	;'x'
   390  00FEDC  20                 	db	32
   391  00FEDD  00                 	db	0
   392  00FEDE                     STR_45:
   393  00FEDE  53                 	db	83	;'S'
   394  00FEDF  6F                 	db	111	;'o'
   395  00FEE0  64                 	db	100	;'d'
   396  00FEE1  61                 	db	97	;'a'
   397  00FEE2  20                 	db	32
   398  00FEE3  77                 	db	119	;'w'
   399  00FEE4  2F                 	db	47
   400  00FEE5  20                 	db	32
   401  00FEE6  74                 	db	116	;'t'
   402  00FEE7  61                 	db	97	;'a'
   403  00FEE8  62                 	db	98	;'b'
   404  00FEE9  3A                 	db	58	;':'
   405  00FEEA  20                 	db	32
   406  00FEEB  25                 	db	37
   407  00FEEC  64                 	db	100	;'d'
   408  00FEED  00                 	db	0
   409  00FEEE                     STR_49:
   410  00FEEE  53                 	db	83	;'S'
   411  00FEEF  6F                 	db	111	;'o'
   412  00FEF0  75                 	db	117	;'u'
   413  00FEF1  70                 	db	112	;'p'
   414  00FEF2  20                 	db	32
   415  00FEF3  77                 	db	119	;'w'
   416  00FEF4  2F                 	db	47
   417  00FEF5  20                 	db	32
   418  00FEF6  6C                 	db	108	;'l'
   419  00FEF7  62                 	db	98	;'b'
   420  00FEF8  6C                 	db	108	;'l'
   421  00FEF9  3A                 	db	58	;':'
   422  00FEFA  20                 	db	32
   423  00FEFB  25                 	db	37
   424  00FEFC  64                 	db	100	;'d'
   425  00FEFD  00                 	db	0
   426  00FEFE                     STR_1:
   427  00FEFE  53                 	db	83	;'S'
   428  00FEFF  6F                 	db	111	;'o'
   429  00FF00  72                 	db	114	;'r'
   430  00FF01  74                 	db	116	;'t'
   431  00FF02  69                 	db	105	;'i'
   432  00FF03  6E                 	db	110	;'n'
   433  00FF04  67                 	db	103	;'g'
   434  00FF05  20                 	db	32
   435  00FF06  63                 	db	99	;'c'
   436  00FF07  61                 	db	97	;'a'
   437  00FF08  6E                 	db	110	;'n'
   438  00FF09  73                 	db	115	;'s'
   439  00FF0A  2E                 	db	46
   440  00FF0B  2E                 	db	46
   441  00FF0C  2E                 	db	46
   442  00FF0D  00                 	db	0
   443  00FF0E                     STR_3:
   444  00FF0E  74                 	db	116	;'t'
   445  00FF0F  65                 	db	101	;'e'
   446  00FF10  73                 	db	115	;'s'
   447  00FF11  74                 	db	116	;'t'
   448  00FF12  69                 	db	105	;'i'
   449  00FF13  6E                 	db	110	;'n'
   450  00FF14  67                 	db	103	;'g'
   451  00FF15  20                 	db	32
   452  00FF16  50                 	db	80	;'P'
   453  00FF17  57                 	db	87	;'W'
   454  00FF18  4D                 	db	77	;'M'
   455  00FF19  32                 	db	50	;'2'
   456  00FF1A  20                 	db	32
   457  00FF1B  43                 	db	67	;'C'
   458  00FF1C  57                 	db	87	;'W'
   459  00FF1D  00                 	db	0
   460  00FF1E                     STR_7:
   461  00FF1E  74                 	db	116	;'t'
   462  00FF1F  65                 	db	101	;'e'
   463  00FF20  73                 	db	115	;'s'
   464  00FF21  74                 	db	116	;'t'
   465  00FF22  69                 	db	105	;'i'
   466  00FF23  6E                 	db	110	;'n'
   467  00FF24  67                 	db	103	;'g'
   468  00FF25  20                 	db	32
   469  00FF26  53                 	db	83	;'S'
   470  00FF27  20                 	db	32
   471  00FF28  73                 	db	115	;'s'
   472  00FF29  68                 	db	104	;'h'
   473  00FF2A  61                 	db	97	;'a'
   474  00FF2B  6B                 	db	107	;'k'
   475  00FF2C  65                 	db	101	;'e'
   476  00FF2D  00                 	db	0
   477  00FF2E                     STR_32:
   478  00FF2E  53                 	db	83	;'S'
   479  00FF2F  6F                 	db	111	;'o'
   480  00FF30  72                 	db	114	;'r'
   481  00FF31  74                 	db	116	;'t'
   482  00FF32  20                 	db	32
   483  00FF33  64                 	db	100	;'d'
   484  00FF34  6F                 	db	111	;'o'
   485  00FF35  6E                 	db	110	;'n'
   486  00FF36  65                 	db	101	;'e'
   487  00FF37  21                 	db	33
   488  00FF38  20                 	db	32
   489  00FF39  41                 	db	65	;'A'
   490  00FF3A  3A                 	db	58	;':'
   491  00FF3B  4E                 	db	78	;'N'
   492  00FF3C  6F                 	db	111	;'o'
   493  00FF3D  00                 	db	0
   494  00FF3E                     STR_2:
   495  00FF3E  41                 	db	65	;'A'
   496  00FF3F  6E                 	db	110	;'n'
   497  00FF40  79                 	db	121	;'y'
   498  00FF41  20                 	db	32
   499  00FF42  6B                 	db	107	;'k'
   500  00FF43  65                 	db	101	;'e'
   501  00FF44  79                 	db	121	;'y'
   502  00FF45  20                 	db	32
   503  00FF46  74                 	db	116	;'t'
   504  00FF47  6F                 	db	111	;'o'
   505  00FF48  20                 	db	32
   506  00FF49  73                 	db	115	;'s'
   507  00FF4A  74                 	db	116	;'t'
   508  00FF4B  6F                 	db	111	;'o'
   509  00FF4C  70                 	db	112	;'p'
   510  00FF4D  00                 	db	0
   511  00FF4E                     STR_8:
   512  00FF4E  74                 	db	116	;'t'
   513  00FF4F  65                 	db	101	;'e'
   514  00FF50  73                 	db	115	;'s'
   515  00FF51  74                 	db	116	;'t'
   516  00FF52  69                 	db	105	;'i'
   517  00FF53  6E                 	db	110	;'n'
   518  00FF54  67                 	db	103	;'g'
   519  00FF55  20                 	db	32
   520  00FF56  53                 	db	83	;'S'
   521  00FF57  31                 	db	49	;'1'
   522  00FF58  20                 	db	32
   523  00FF59  70                 	db	112	;'p'
   524  00FF5A  69                 	db	105	;'i'
   525  00FF5B  6E                 	db	110	;'n'
   526  00FF5C  73                 	db	115	;'s'
   527  00FF5D  00                 	db	0
   528  00FF5E                     STR_10:
   529  00FF5E  74                 	db	116	;'t'
   530  00FF5F  65                 	db	101	;'e'
   531  00FF60  73                 	db	115	;'s'
   532  00FF61  74                 	db	116	;'t'
   533  00FF62  69                 	db	105	;'i'
   534  00FF63  6E                 	db	110	;'n'
   535  00FF64  67                 	db	103	;'g'
   536  00FF65  20                 	db	32
   537  00FF66  53                 	db	83	;'S'
   538  00FF67  32                 	db	50	;'2'
   539  00FF68  20                 	db	32
   540  00FF69  70                 	db	112	;'p'
   541  00FF6A  69                 	db	105	;'i'
   542  00FF6B  6E                 	db	110	;'n'
   543  00FF6C  73                 	db	115	;'s'
   544  00FF6D  00                 	db	0
   545  00FF6E                     STR_11:
   546  00FF6E  74                 	db	116	;'t'
   547  00FF6F  65                 	db	101	;'e'
   548  00FF70  73                 	db	115	;'s'
   549  00FF71  74                 	db	116	;'t'
   550  00FF72  69                 	db	105	;'i'
   551  00FF73  6E                 	db	110	;'n'
   552  00FF74  67                 	db	103	;'g'
   553  00FF75  20                 	db	32
   554  00FF76  53                 	db	83	;'S'
   555  00FF77  33                 	db	51	;'3'
   556  00FF78  20                 	db	32
   557  00FF79  70                 	db	112	;'p'
   558  00FF7A  69                 	db	105	;'i'
   559  00FF7B  6E                 	db	110	;'n'
   560  00FF7C  73                 	db	115	;'s'
   561  00FF7D  00                 	db	0
   562  00FF7E                     STR_13:
   563  00FF7E  74                 	db	116	;'t'
   564  00FF7F  65                 	db	101	;'e'
   565  00FF80  73                 	db	115	;'s'
   566  00FF81  74                 	db	116	;'t'
   567  00FF82  69                 	db	105	;'i'
   568  00FF83  6E                 	db	110	;'n'
   569  00FF84  67                 	db	103	;'g'
   570  00FF85  20                 	db	32
   571  00FF86  50                 	db	80	;'P'
   572  00FF87  57                 	db	87	;'W'
   573  00FF88  4D                 	db	77	;'M'
   574  00FF89  31                 	db	49	;'1'
   575  00FF8A  00                 	db	0
   576  00FF8B                     STR_39:
   577  00FF8B  52                 	db	82	;'R'
   578  00FF8C  75                 	db	117	;'u'
   579  00FF8D  6E                 	db	110	;'n'
   580  00FF8E  74                 	db	116	;'t'
   581  00FF8F  69                 	db	105	;'i'
   582  00FF90  6D                 	db	109	;'m'
   583  00FF91  65                 	db	101	;'e'
   584  00FF92  3A                 	db	58	;':'
   585  00FF93  20                 	db	32
   586  00FF94  25                 	db	37
   587  00FF95  64                 	db	100	;'d'
   588  00FF96  00                 	db	0
   589  00FF97                     STR_6:
   590  00FF97  74                 	db	116	;'t'
   591  00FF98  65                 	db	101	;'e'
   592  00FF99  73                 	db	115	;'s'
   593  00FF9A  74                 	db	116	;'t'
   594  00FF9B  69                 	db	105	;'i'
   595  00FF9C  6E                 	db	110	;'n'
   596  00FF9D  67                 	db	103	;'g'
   597  00FF9E  20                 	db	32
   598  00FF9F  53                 	db	83	;'S'
   599  00FFA0  20                 	db	32
   600  00FFA1  62                 	db	98	;'b'
   601  00FFA2  00                 	db	0
   602  00FFA3                     STR_19:
   603  00FFA3  6C                 	db	108	;'l'
   604  00FFA4  61                 	db	97	;'a'
   605  00FFA5  62                 	db	98	;'b'
   606  00FFA6  65                 	db	101	;'e'
   607  00FFA7  6C                 	db	108	;'l'
   608  00FFA8  20                 	db	32
   609  00FFA9  20                 	db	32
   610  00FFAA  20                 	db	32
   611  00FFAB  74                 	db	116	;'t'
   612  00FFAC  61                 	db	97	;'a'
   613  00FFAD  62                 	db	98	;'b'
   614  00FFAE  00                 	db	0
   615  00FFAF                     STR_28:
   616  00FFAF  73                 	db	115	;'s'
   617  00FFB0  6F                 	db	111	;'o'
   618  00FFB1  64                 	db	100	;'d'
   619  00FFB2  61                 	db	97	;'a'
   620  00FFB3  3A                 	db	58	;':'
   621  00FFB4  20                 	db	32
   622  00FFB5  25                 	db	37
   623  00FFB6  78                 	db	120	;'x'
   624  00FFB7  20                 	db	32
   625  00FFB8  25                 	db	37
   626  00FFB9  64                 	db	100	;'d'
   627  00FFBA  00                 	db	0
   628  00FFBB                     STR_22:
   629  00FFBB  73                 	db	115	;'s'
   630  00FFBC  6F                 	db	111	;'o'
   631  00FFBD  75                 	db	117	;'u'
   632  00FFBE  70                 	db	112	;'p'
   633  00FFBF  3A                 	db	58	;':'
   634  00FFC0  20                 	db	32
   635  00FFC1  25                 	db	37
   636  00FFC2  78                 	db	120	;'x'
   637  00FFC3  20                 	db	32
   638  00FFC4  25                 	db	37
   639  00FFC5  64                 	db	100	;'d'
   640  00FFC6  00                 	db	0
   641  00FFC7                     STR_5:
   642  00FFC7  74                 	db	116	;'t'
   643  00FFC8  65                 	db	101	;'e'
   644  00FFC9  73                 	db	115	;'s'
   645  00FFCA  74                 	db	116	;'t'
   646  00FFCB  69                 	db	105	;'i'
   647  00FFCC  6E                 	db	110	;'n'
   648  00FFCD  67                 	db	103	;'g'
   649  00FFCE  20                 	db	32
   650  00FFCF  53                 	db	83	;'S'
   651  00FFD0  20                 	db	32
   652  00FFD1  66                 	db	102	;'f'
   653  00FFD2  00                 	db	0
   654  00FFD3                     STR_14:
   655  00FFD3  74                 	db	116	;'t'
   656  00FFD4  65                 	db	101	;'e'
   657  00FFD5  73                 	db	115	;'s'
   658  00FFD6  74                 	db	116	;'t'
   659  00FFD7  69                 	db	105	;'i'
   660  00FFD8  6E                 	db	110	;'n'
   661  00FFD9  67                 	db	103	;'g'
   662  00FFDA  20                 	db	32
   663  00FFDB  49                 	db	73	;'I'
   664  00FFDC  52                 	db	82	;'R'
   665  00FFDD  00                 	db	0
   666  00FFDE                     STR_20:
   667  00FFDE  25                 	db	37
   668  00FFDF  78                 	db	120	;'x'
   669  00FFE0  20                 	db	32
   670  00FFE1  20                 	db	32
   671  00FFE2  20                 	db	32
   672  00FFE3  20                 	db	32
   673  00FFE4  20                 	db	32
   674  00FFE5  20                 	db	32
   675  00FFE6  00                 	db	0
   676  00FFE7                     STR_37:
   677  00FFE7  20                 	db	32
   678  00FFE8  41                 	db	65	;'A'
   679  00FFE9  3A                 	db	58	;':'
   680  00FFEA  4C                 	db	76	;'L'
   681  00FFEB  6F                 	db	111	;'o'
   682  00FFEC  67                 	db	103	;'g'
   683  00FFED  73                 	db	115	;'s'
   684  00FFEE  00                 	db	0
   685  00FFEF                     STR_35:
   686  00FFEF  33                 	db	51	;'3'
   687  00FFF0  3A                 	db	58	;':'
   688  00FFF1  53                 	db	83	;'S'
   689  00FFF2  74                 	db	116	;'t'
   690  00FFF3  61                 	db	97	;'a'
   691  00FFF4  72                 	db	114	;'r'
   692  00FFF5  74                 	db	116	;'t'
   693  00FFF6  00                 	db	0
   694  00FFF7                     STR_15:
   695  00FFF7  25                 	db	37
   696  00FFF8  78                 	db	120	;'x'
   697  00FFF9  20                 	db	32
   698  00FFFA  00                 	db	0
   699  00FFFB                     STR_23:
   700  00FFFB  20                 	db	32
   701  00FFFC  25                 	db	37
   702  00FFFD  78                 	db	120	;'x'
   703  00FFFE  00                 	db	0
   704  0000                     
   705                           ; #config settings
   706  00FFFF  00                 	db	0	; dummy byte at the end
   707  0000                     
   708                           	psect	cinit
   709  002B28                     __pcinit:
   710                           	opt stack 0
   711  002B28                     start_initialization:
   712                           	opt stack 0
   713  002B28                     __initialization:
   714                           	opt stack 0
   715                           
   716                           ; Clear objects allocated to BANK0 (20 bytes)
   717  002B28  EE00  F0AF         	lfsr	0,__pbssBANK0
   718  002B2C  0E14               	movlw	20
   719  002B2E                     clear_0:
   720  002B2E  6AEE               	clrf	postinc0,c
   721  002B30  06E8               	decf	wreg,f,c
   722  002B32  E1FD               	bnz	clear_0
   723                           
   724                           ; Clear objects allocated to COMRAM (34 bytes)
   725  002B34  EE00  F03D         	lfsr	0,__pbssCOMRAM
   726  002B38  0E22               	movlw	34
   727  002B3A                     clear_1:
   728  002B3A  6AEE               	clrf	postinc0,c
   729  002B3C  06E8               	decf	wreg,f,c
   730  002B3E  E1FD               	bnz	clear_1
   731  002B40                     end_of_initialization:
   732                           	opt stack 0
   733  002B40                     __end_of__initialization:
   734                           	opt stack 0
   735  002B40  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   736  002B42  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   737  002B44  0E00               	movlw	low (__Lmediumconst shr (0+16))
   738  002B46  6EF8               	movwf	tblptru,c
   739  002B48  0100               	movlb	0
   740  002B4A  EF09  F000         	goto	_main	;jump to C main() function
   741                           tblptru	equ	0xFF8
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           
   745                           	psect	bssCOMRAM
   746  00003D                     __pbssCOMRAM:
   747                           	opt stack 0
   748  00003D                     _curr:
   749                           	opt stack 0
   750  00003D                     	ds	2
   751  00003F                     _prev:
   752                           	opt stack 0
   753  00003F                     	ds	2
   754  000041                     _t3:
   755                           	opt stack 0
   756  000041                     	ds	2
   757  000043                     _t2:
   758                           	opt stack 0
   759  000043                     	ds	2
   760  000045                     _t:
   761                           	opt stack 0
   762  000045                     	ds	2
   763  000047                     _s:
   764                           	opt stack 0
   765  000047                     	ds	2
   766  000049                     _s2:
   767                           	opt stack 0
   768  000049                     	ds	2
   769  00004B                     _sodaI:
   770                           	opt stack 0
   771  00004B                     	ds	2
   772  00004D                     _soupI:
   773                           	opt stack 0
   774  00004D                     	ds	2
   775  00004F                     _soupAlign:
   776                           	opt stack 0
   777  00004F                     	ds	2
   778  000051                     _sodaAlign:
   779                           	opt stack 0
   780  000051                     	ds	2
   781  000053                     _tabState:
   782                           	opt stack 0
   783  000053                     	ds	2
   784  000055                     _sodaSteps:
   785                           	opt stack 0
   786  000055                     	ds	2
   787  000057                     _soupSteps:
   788                           	opt stack 0
   789  000057                     	ds	2
   790  000059                     _S3mode:
   791                           	opt stack 0
   792  000059                     	ds	2
   793  00005B                     _S2mode:
   794                           	opt stack 0
   795  00005B                     	ds	2
   796  00005D                     _S1mode:
   797                           	opt stack 0
   798  00005D                     	ds	2
   799                           tblptru	equ	0xFF8
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           
   803                           	psect	bssBANK0
   804  0000AF                     __pbssBANK0:
   805                           	opt stack 0
   806  0000AF                     _time:
   807                           	opt stack 0
   808  0000AF                     	ds	7
   809  0000B6                     _sodaCnt:
   810                           	opt stack 0
   811  0000B6                     	ds	2
   812  0000B8                     _soupCnt:
   813                           	opt stack 0
   814  0000B8                     	ds	2
   815  0000BA                     _labelState:
   816                           	opt stack 0
   817  0000BA                     	ds	2
   818  0000BC                     _seconds:
   819                           	opt stack 0
   820  0000BC                     	ds	2
   821  0000BE                     _s3:
   822                           	opt stack 0
   823  0000BE                     	ds	2
   824  0000C0                     _s1:
   825                           	opt stack 0
   826  0000C0                     	ds	2
   827  0000C2                     _keypress:
   828                           	opt stack 0
   829  0000C2                     	ds	1
   830                           tblptru	equ	0xFF8
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           
   834                           	psect	cstackBANK0
   835  000080                     __pcstackBANK0:
   836                           	opt stack 0
   837  000080                     ??_addRun:
   838  000080                     printf@idx:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x0
   842  000080                     	ds	1
   843  000081                     printf@ap:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x1
   847  000081                     	ds	2
   848  000083                     printf@prec:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x3
   852  000083                     	ds	1
   853  000084                     printf@val:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x4
   857  000084                     	ds	2
   858  000086                     printf@flag:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x6
   862  000086                     	ds	1
   863  000087                     printf@width:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x7
   867  000087                     	ds	2
   868  000089                     printf@c:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x9
   872  000089                     	ds	1
   873  00008A                     ??_displayLog:
   874                           
   875                           ; 1 bytes @ 0xA
   876  00008A                     	ds	3
   877  00008D                     displayLog@i:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0xD
   881  00008D                     	ds	2
   882  00008F                     displayLog@currRun:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0xF
   886  00008F                     	ds	2
   887  000091                     ??_main:
   888                           
   889                           ; 1 bytes @ 0x11
   890  000091                     	ds	2
   891  000093                     main@soupLoad:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x13
   895  000093                     	ds	2
   896  000095                     main@sodaLoad:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x15
   900  000095                     	ds	2
   901  000097                     main@s:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x17
   905  000097                     	ds	2
   906  000099                     main@prevSoupLoad:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x19
   910  000099                     	ds	2
   911  00009B                     main@prevSodaLoad:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0x1B
   915  00009B                     	ds	2
   916  00009D                     main@soupL:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x1D
   920  00009D                     	ds	2
   921  00009F                     main@soupNL:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x1F
   925  00009F                     	ds	2
   926  0000A1                     main@sodaT:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x21
   930  0000A1                     	ds	2
   931  0000A3                     main@sodaNT:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x23
   935  0000A3                     	ds	2
   936  0000A5                     main@soupSort:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x25
   940  0000A5                     	ds	2
   941  0000A7                     main@sodaSort:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x27
   945  0000A7                     	ds	2
   946  0000A9                     main@prevSodaIR:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x29
   950  0000A9                     	ds	2
   951  0000AB                     main@prevSoupIR:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x2B
   955  0000AB                     	ds	2
   956  0000AD                     main@standby:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x2D
   960  0000AD                     	ds	2
   961                           tblptru	equ	0xFF8
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           
   965                           	psect	cstackCOMRAM
   966  000001                     __pcstackCOMRAM:
   967                           	opt stack 0
   968  000001                     ?i2___wmul:
   969                           	opt stack 0
   970  000001                     updateS2@mode:
   971                           	opt stack 0
   972  000001                     i2updateS1@mode:
   973                           	opt stack 0
   974  000001                     i2updateS3@mode:
   975                           	opt stack 0
   976  000001                     i2___wmul@multiplier:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x0
   980  000001                     	ds	2
   981  000003                     ??_updateS2:
   982  000003                     ??i2_updateS1:
   983  000003                     ??i2_updateS3:
   984  000003                     i2___wmul@multiplicand:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x2
   988  000003                     	ds	2
   989  000005                     i2___wmul@product:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x4
   993  000005                     	ds	2
   994  000007                     ?___awdiv:
   995                           	opt stack 0
   996  000007                     ___awdiv@dividend:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x6
  1000  000007                     	ds	2
  1001  000009                     ___awdiv@divisor:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x8
  1005  000009                     	ds	2
  1006  00000B                     ___awdiv@counter:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0xA
  1010  00000B                     	ds	1
  1011  00000C                     ___awdiv@sign:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0xB
  1015  00000C                     	ds	1
  1016  00000D                     ___awdiv@quotient:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0xC
  1020  00000D                     	ds	2
  1021  00000F                     ??_handler:
  1022                           
  1023                           ; 1 bytes @ 0xE
  1024  00000F                     	ds	16
  1025  00001F                     _handler$1823:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x1E
  1029  00001F                     	ds	2
  1030  000021                     ??_readADC:
  1031  000021                     ??_isdigit:
  1032  000021                     ??_I2C_Master_Wait:
  1033  000021                     ??_eepromRead:
  1034  000021                     ?___wmul:
  1035                           	opt stack 0
  1036  000021                     ?___awmod:
  1037                           	opt stack 0
  1038  000021                     ?___lwdiv:
  1039                           	opt stack 0
  1040  000021                     ?___lldiv:
  1041                           	opt stack 0
  1042  000021                     lcdNibble@temp:
  1043                           	opt stack 0
  1044  000021                     eepromWrite@data:
  1045                           	opt stack 0
  1046  000021                     PWM1@duty:
  1047                           	opt stack 0
  1048  000021                     PWM2@duty:
  1049                           	opt stack 0
  1050  000021                     updateS1@mode:
  1051                           	opt stack 0
  1052  000021                     updateS3@mode:
  1053                           	opt stack 0
  1054  000021                     ___wmul@multiplier:
  1055                           	opt stack 0
  1056  000021                     ___awmod@dividend:
  1057                           	opt stack 0
  1058  000021                     ___lwdiv@dividend:
  1059                           	opt stack 0
  1060  000021                     ___lldiv@dividend:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x20
  1064  000021                     	ds	1
  1065  000022                     ??_eepromWrite:
  1066  000022                     lcdNibble@data:
  1067                           	opt stack 0
  1068  000022                     I2C_Master_Read@a:
  1069                           	opt stack 0
  1070  000022                     readADC@channel:
  1071                           	opt stack 0
  1072  000022                     _isdigit$1453:
  1073                           	opt stack 0
  1074  000022                     I2C_Master_Write@d:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x21
  1078  000022                     	ds	1
  1079  000023                     ??_updateS1:
  1080  000023                     ??_updateS3:
  1081  000023                     ??_PWM1:
  1082  000023                     lcdInst@data:
  1083                           	opt stack 0
  1084  000023                     putch@data:
  1085                           	opt stack 0
  1086  000023                     I2C_Master_Read@temp:
  1087                           	opt stack 0
  1088  000023                     eepromRead@address:
  1089                           	opt stack 0
  1090  000023                     isdigit@c:
  1091                           	opt stack 0
  1092  000023                     PWM2@dir:
  1093                           	opt stack 0
  1094  000023                     ___wmul@multiplicand:
  1095                           	opt stack 0
  1096  000023                     ___awmod@divisor:
  1097                           	opt stack 0
  1098  000023                     ___lwdiv@divisor:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x22
  1102  000023                     	ds	1
  1103  000024                     ??_initLCD:
  1104  000024                     updateTime@j:
  1105                           	opt stack 0
  1106  000024                     eepromWrite@address:
  1107                           	opt stack 0
  1108  000024                     calibrateWheels@prev:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x23
  1112  000024                     	ds	1
  1113  000025                     ??_PWM2:
  1114  000025                     ___awmod@counter:
  1115                           	opt stack 0
  1116  000025                     ___lwdiv@counter:
  1117                           	opt stack 0
  1118  000025                     addRun@dur:
  1119                           	opt stack 0
  1120  000025                     ___wmul@product:
  1121                           	opt stack 0
  1122  000025                     ___lldiv@divisor:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x24
  1126  000025                     	ds	1
  1127  000026                     ___awmod@sign:
  1128                           	opt stack 0
  1129  000026                     calibrateWheels@i:
  1130                           	opt stack 0
  1131  000026                     ___lwdiv@quotient:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x25
  1135  000026                     	ds	1
  1136  000027                     addRun@year:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x26
  1140  000027                     	ds	1
  1141  000028                     ?___lwmod:
  1142                           	opt stack 0
  1143  000028                     ___lwmod@dividend:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x27
  1147  000028                     	ds	1
  1148  000029                     addRun@month:
  1149                           	opt stack 0
  1150  000029                     ___lldiv@quotient:
  1151                           	opt stack 0
  1152                           
  1153                           ; 4 bytes @ 0x28
  1154  000029                     	ds	1
  1155  00002A                     ___lwmod@divisor:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x29
  1159  00002A                     	ds	1
  1160  00002B                     addRun@date:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x2A
  1164  00002B                     	ds	1
  1165  00002C                     ___lwmod@counter:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x2B
  1169  00002C                     	ds	1
  1170  00002D                     ?_printf:
  1171                           	opt stack 0
  1172  00002D                     ___lldiv@counter:
  1173                           	opt stack 0
  1174  00002D                     addRun@hours:
  1175                           	opt stack 0
  1176  00002D                     printf@f:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x2C
  1180  00002D                     	ds	1
  1181  00002E                     I2C_Master_Init@c:
  1182                           	opt stack 0
  1183                           
  1184                           ; 4 bytes @ 0x2D
  1185  00002E                     	ds	1
  1186  00002F                     addRun@mins:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x2E
  1190  00002F                     	ds	2
  1191  000031                     addRun@secs:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x30
  1195  000031                     	ds	1
  1196  000032                     ??_I2C_Master_Init:
  1197                           
  1198                           ; 1 bytes @ 0x31
  1199  000032                     	ds	1
  1200  000033                     addRun@sodaT:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x32
  1204  000033                     	ds	2
  1205  000035                     ??_printf:
  1206  000035                     addRun@sodaNT:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x34
  1210  000035                     	ds	1
  1211  000036                     
  1212                           ; 1 bytes @ 0x35
  1213  000036                     	ds	1
  1214  000037                     addRun@soupL:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x36
  1218  000037                     	ds	2
  1219  000039                     addRun@soupNL:
  1220                           	opt stack 0
  1221  000039                     displayLog@run:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x38
  1225  000039                     	ds	2
  1226  00003B                     addRun@currRun:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x3A
  1230  00003B                     	ds	2
  1231                           tblptru	equ	0xFF8
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           
  1235 ;;
  1236 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1237 ;;
  1238 ;; *************** function _main *****************
  1239 ;; Defined at:
  1240 ;;		line 118 in file "main.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;  standby         2   45[BANK0 ] int 
  1245 ;;  prevSoupIR      2   43[BANK0 ] int 
  1246 ;;  prevSodaIR      2   41[BANK0 ] int 
  1247 ;;  sodaSort        2   39[BANK0 ] int 
  1248 ;;  soupSort        2   37[BANK0 ] int 
  1249 ;;  sodaNT          2   35[BANK0 ] int 
  1250 ;;  sodaT           2   33[BANK0 ] int 
  1251 ;;  soupNL          2   31[BANK0 ] int 
  1252 ;;  soupL           2   29[BANK0 ] int 
  1253 ;;  prevSodaLoad    2   27[BANK0 ] int 
  1254 ;;  prevSoupLoad    2   25[BANK0 ] int 
  1255 ;;  s               2   23[BANK0 ] int 
  1256 ;;  sodaLoad        2   21[BANK0 ] int 
  1257 ;;  soupLoad        2   19[BANK0 ] int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2  186[None  ] int 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;Total ram usage:       30 bytes
  1272 ;; Hardware stack levels required when called:    6
  1273 ;; This function calls:
  1274 ;;		_PWM1
  1275 ;;		_PWM1off
  1276 ;;		_PWM2
  1277 ;;		_PWM2off
  1278 ;;		___awmod
  1279 ;;		_addRun
  1280 ;;		_calibrateWheels
  1281 ;;		_displayLog
  1282 ;;		_homescreen
  1283 ;;		_initialize
  1284 ;;		_keycheck
  1285 ;;		_keyinterrupt
  1286 ;;		_lcdInst
  1287 ;;		_printf
  1288 ;;		_readADC
  1289 ;;		_startTMR1
  1290 ;;		_updateS1
  1291 ;;		_updateS3
  1292 ;;		_updateTime
  1293 ;; This function is called by:
  1294 ;;		Startup code after reset
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text0
  1299  000012                     __ptext0:
  1300                           	opt stack 0
  1301  000012                     _main:
  1302                           	opt stack 25
  1303                           
  1304                           ;main.c: 119: LATA = 0;
  1305                           
  1306                           ;incstack = 0
  1307  000012  0E00               	movlw	0
  1308  000014  6E89               	movwf	3977,c	;volatile
  1309                           
  1310                           ;main.c: 121: initialize();
  1311  000016  EC65  F013         	call	_initialize	;wreg free
  1312                           
  1313                           ;main.c: 122: int standby = 1;
  1314  00001A  0E00               	movlw	0
  1315  00001C  0100               	movlb	0	; () banked
  1316  00001E  6FAE               	movwf	(main@standby+1)& (0+255),b
  1317  000020  0E01               	movlw	1
  1318  000022  6FAD               	movwf	main@standby& (0+255),b
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 123: int s = 0;
  1322  000024  0E00               	movlw	0
  1323  000026  0100               	movlb	0	; () banked
  1324  000028  6F98               	movwf	(main@s+1)& (0+255),b
  1325  00002A  0E00               	movlw	0
  1326  00002C  6F97               	movwf	main@s& (0+255),b
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 124: int prevSodaIR;
  1330                           ;main.c: 125: int prevSoupIR;
  1331                           ;main.c: 127: int soupLoad = 1;
  1332  00002E  0E00               	movlw	0
  1333  000030  0100               	movlb	0	; () banked
  1334  000032  6F94               	movwf	(main@soupLoad+1)& (0+255),b
  1335  000034  0E01               	movlw	1
  1336  000036  6F93               	movwf	main@soupLoad& (0+255),b
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 128: int sodaLoad = 1;
  1340  000038  0E00               	movlw	0
  1341  00003A  0100               	movlb	0	; () banked
  1342  00003C  6F96               	movwf	(main@sodaLoad+1)& (0+255),b
  1343  00003E  0E01               	movlw	1
  1344  000040  6F95               	movwf	main@sodaLoad& (0+255),b
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 131: int soupSort;
  1348                           ;main.c: 132: int prevSoupLoad;
  1349                           ;main.c: 133: int sodaSort;
  1350                           ;main.c: 134: int prevSodaLoad;
  1351                           ;main.c: 136: int soupL;
  1352                           ;main.c: 137: int soupNL ;
  1353                           ;main.c: 138: int sodaT;
  1354                           ;main.c: 139: int sodaNT;
  1355                           ;main.c: 141: T0CON = 0b00010111;
  1356  000042  0E17               	movlw	23
  1357  000044  6ED5               	movwf	4053,c	;volatile
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 142: TMR0H = 0b10000101;
  1361  000046  0E85               	movlw	133
  1362  000048  6ED7               	movwf	4055,c	;volatile
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 143: TMR0L = 0b10101110;
  1366  00004A  0EAE               	movlw	174
  1367  00004C  6ED6               	movwf	4054,c	;volatile
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;main.c: 144: T0CONbits.TMR0ON = 1;
  1371  00004E  8ED5               	bsf	4053,7,c	;volatile
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 145: startTMR1();
  1375  000050  EC20  F016         	call	_startTMR1	;wreg free
  1376                           
  1377                           ;main.c: 148: _delay((unsigned long)((10)*(32000000/4000.0)));
  1378  000054  0E68               	movlw	104
  1379  000056  0100               	movlb	0	; () banked
  1380  000058  6F91               	movwf	??_main& (0+255),b
  1381  00005A  0EE4               	movlw	228
  1382  00005C                     u7797:
  1383  00005C  2EE8               	decfsz	wreg,f,c
  1384  00005E  D7FE               	bra	u7797
  1385  000060  2F91               	decfsz	??_main& (0+255),f,b
  1386  000062  D7FC               	bra	u7797
  1387  000064  F000               	nop	
  1388  000066                     l5651:
  1389                           
  1390                           ;main.c: 151: if (standby == 1){
  1391  000066  0100               	movlb	0	; () banked
  1392  000068  05AD               	decf	main@standby& (0+255),w,b
  1393  00006A  0100               	movlb	0	; () banked
  1394  00006C  11AE               	iorwf	(main@standby+1)& (0+255),w,b
  1395  00006E  A4D8               	btfss	status,2,c
  1396  000070  D0F2               	goto	l5713
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 152: keypress = (0);
  1400  000072  0E00               	movlw	0
  1401  000074  0100               	movlb	0	; () banked
  1402  000076  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1403                           
  1404                           ;main.c: 153: while(keypress == (0)){
  1405  000078  D006               	goto	l5661
  1406  00007A                     l5655:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;main.c: 154: updateTime();
  1410  00007A  EC15  F014         	call	_updateTime	;wreg free
  1411                           
  1412                           ;main.c: 155: homescreen();
  1413  00007E  EC49  F014         	call	_homescreen	;wreg free
  1414                           
  1415                           ;main.c: 156: keyinterrupt();
  1416  000082  EC01  F016         	call	_keyinterrupt	;wreg free
  1417  000086                     l5661:
  1418  000086  0100               	movlb	0	; () banked
  1419  000088  51C2               	movf	_keypress& (0+255),w,b	;volatile
  1420  00008A  B4D8               	btfsc	status,2,c
  1421  00008C  D7F6               	goto	l5655
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 157: }
  1425                           ;main.c: 159: if(keypress == 2){
  1426                           
  1427                           ; BSR set to: 0
  1428  00008E  0E02               	movlw	2
  1429  000090  0100               	movlb	0	; () banked
  1430  000092  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1431  000094  A4D8               	btfss	status,2,c
  1432  000096  D0B1               	goto	l5705
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;main.c: 161: standby = 0;
  1436  000098  0E00               	movlw	0
  1437  00009A  0100               	movlb	0	; () banked
  1438  00009C  6FAE               	movwf	(main@standby+1)& (0+255),b
  1439  00009E  0E00               	movlw	0
  1440  0000A0  6FAD               	movwf	main@standby& (0+255),b
  1441                           
  1442                           ;main.c: 162: seconds = 0;
  1443  0000A2  0E00               	movlw	0
  1444  0000A4  0100               	movlb	0	; () banked
  1445  0000A6  6FBD               	movwf	(_seconds+1)& (0+255),b
  1446  0000A8  0E00               	movlw	0
  1447  0000AA  6FBC               	movwf	_seconds& (0+255),b
  1448                           
  1449                           ;main.c: 163: labelState = 0;
  1450  0000AC  0E00               	movlw	0
  1451  0000AE  0100               	movlb	0	; () banked
  1452  0000B0  6FBB               	movwf	(_labelState+1)& (0+255),b
  1453  0000B2  0E00               	movlw	0
  1454  0000B4  6FBA               	movwf	_labelState& (0+255),b
  1455                           
  1456                           ;main.c: 164: soupSort = 0;
  1457  0000B6  0E00               	movlw	0
  1458  0000B8  0100               	movlb	0	; () banked
  1459  0000BA  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  1460  0000BC  0E00               	movlw	0
  1461  0000BE  6FA5               	movwf	main@soupSort& (0+255),b
  1462                           
  1463                           ;main.c: 165: tabState = 0;
  1464  0000C0  0E00               	movlw	0
  1465  0000C2  6E54               	movwf	_tabState+1,c
  1466  0000C4  0E00               	movlw	0
  1467  0000C6  6E53               	movwf	_tabState,c
  1468                           
  1469                           ;main.c: 166: sodaSort = 0;
  1470  0000C8  0E00               	movlw	0
  1471  0000CA  0100               	movlb	0	; () banked
  1472  0000CC  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  1473  0000CE  0E00               	movlw	0
  1474  0000D0  6FA7               	movwf	main@sodaSort& (0+255),b
  1475                           
  1476                           ;main.c: 167: soupSteps = 0;
  1477  0000D2  0E00               	movlw	0
  1478  0000D4  6E58               	movwf	_soupSteps+1,c
  1479  0000D6  0E00               	movlw	0
  1480  0000D8  6E57               	movwf	_soupSteps,c
  1481                           
  1482                           ;main.c: 168: sodaSteps = 0;
  1483  0000DA  0E00               	movlw	0
  1484  0000DC  6E56               	movwf	_sodaSteps+1,c
  1485  0000DE  0E00               	movlw	0
  1486  0000E0  6E55               	movwf	_sodaSteps,c
  1487                           
  1488                           ;main.c: 169: soupL = 0;
  1489  0000E2  0E00               	movlw	0
  1490  0000E4  0100               	movlb	0	; () banked
  1491  0000E6  6F9E               	movwf	(main@soupL+1)& (0+255),b
  1492  0000E8  0E00               	movlw	0
  1493  0000EA  6F9D               	movwf	main@soupL& (0+255),b
  1494                           
  1495                           ;main.c: 170: soupNL = 0;
  1496  0000EC  0E00               	movlw	0
  1497  0000EE  0100               	movlb	0	; () banked
  1498  0000F0  6FA0               	movwf	(main@soupNL+1)& (0+255),b
  1499  0000F2  0E00               	movlw	0
  1500  0000F4  6F9F               	movwf	main@soupNL& (0+255),b
  1501                           
  1502                           ;main.c: 171: sodaT = 0;
  1503  0000F6  0E00               	movlw	0
  1504  0000F8  0100               	movlb	0	; () banked
  1505  0000FA  6FA2               	movwf	(main@sodaT+1)& (0+255),b
  1506  0000FC  0E00               	movlw	0
  1507  0000FE  6FA1               	movwf	main@sodaT& (0+255),b
  1508                           
  1509                           ;main.c: 172: sodaNT = 0;
  1510  000100  0E00               	movlw	0
  1511  000102  0100               	movlb	0	; () banked
  1512  000104  6FA4               	movwf	(main@sodaNT+1)& (0+255),b
  1513  000106  0E00               	movlw	0
  1514  000108  6FA3               	movwf	main@sodaNT& (0+255),b
  1515                           
  1516                           ;main.c: 173: prevSoupIR = 0;
  1517  00010A  0E00               	movlw	0
  1518  00010C  0100               	movlb	0	; () banked
  1519  00010E  6FAC               	movwf	(main@prevSoupIR+1)& (0+255),b
  1520  000110  0E00               	movlw	0
  1521  000112  6FAB               	movwf	main@prevSoupIR& (0+255),b
  1522                           
  1523                           ;main.c: 174: prevSodaIR = 0;
  1524  000114  0E00               	movlw	0
  1525  000116  0100               	movlb	0	; () banked
  1526  000118  6FAA               	movwf	(main@prevSodaIR+1)& (0+255),b
  1527  00011A  0E00               	movlw	0
  1528  00011C  6FA9               	movwf	main@prevSodaIR& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;main.c: 176: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1532  00011E  0E01               	movlw	1
  1533  000120  EC36  F016         	call	_lcdInst
  1534  000124  0E34               	movlw	52
  1535  000126  0100               	movlb	0	; () banked
  1536  000128  6F91               	movwf	??_main& (0+255),b
  1537  00012A  0EF1               	movlw	241
  1538  00012C                     u7807:
  1539  00012C  2EE8               	decfsz	wreg,f,c
  1540  00012E  D7FE               	bra	u7807
  1541  000130  2F91               	decfsz	??_main& (0+255),f,b
  1542  000132  D7FC               	bra	u7807
  1543  000134  D000               	nop2	
  1544                           
  1545                           ;main.c: 177: printf("Sorting cans...");
  1546  000136  0EFE               	movlw	low STR_1
  1547  000138  6E2D               	movwf	printf@f,c
  1548  00013A  0EFE               	movlw	high STR_1
  1549  00013C  6E2E               	movwf	printf@f+1,c
  1550  00013E  EC7C  F007         	call	_printf	;wreg free
  1551                           
  1552                           ;main.c: 178: lcdInst(0b11000000);;
  1553  000142  0EC0               	movlw	192
  1554  000144  EC36  F016         	call	_lcdInst
  1555                           
  1556                           ;main.c: 179: printf("Any key to stop");
  1557  000148  0E3E               	movlw	low STR_2
  1558  00014A  6E2D               	movwf	printf@f,c
  1559  00014C  0EFF               	movlw	high STR_2
  1560  00014E  6E2E               	movwf	printf@f+1,c
  1561  000150  EC7C  F007         	call	_printf	;wreg free
  1562                           
  1563                           ;main.c: 181: while(soupSteps < 12){
  1564  000154  D004               	goto	l5679
  1565  000156                     l5677:
  1566                           
  1567                           ;main.c: 182: S2mode = 2;
  1568  000156  0E00               	movlw	0
  1569  000158  6E5C               	movwf	_S2mode+1,c
  1570  00015A  0E02               	movlw	2
  1571  00015C  6E5B               	movwf	_S2mode,c
  1572  00015E                     l5679:
  1573  00015E  BE58               	btfsc	_soupSteps+1,7,c
  1574  000160  D7FA               	goto	l5677
  1575  000162  5058               	movf	_soupSteps+1,w,c
  1576  000164  E104               	bnz	l5681
  1577  000166  0E0C               	movlw	12
  1578  000168  5C57               	subwf	_soupSteps,w,c
  1579  00016A  A0D8               	btfss	status,0,c
  1580  00016C  D7F4               	goto	l5677
  1581  00016E                     l5681:
  1582                           
  1583                           ;main.c: 183: }
  1584                           ;main.c: 184: S2mode = 4;
  1585  00016E  0E00               	movlw	0
  1586  000170  6E5C               	movwf	_S2mode+1,c
  1587  000172  0E04               	movlw	4
  1588  000174  6E5B               	movwf	_S2mode,c
  1589                           
  1590                           ;main.c: 185: calibrateWheels();
  1591  000176  ECC7  F010         	call	_calibrateWheels	;wreg free
  1592                           
  1593                           ;main.c: 186: if(s1 == 2 || s1 == 3){S1mode = 3;}
  1594  00017A  0E02               	movlw	2
  1595  00017C  0100               	movlb	0	; () banked
  1596  00017E  19C0               	xorwf	_s1& (0+255),w,b
  1597  000180  0100               	movlb	0	; () banked
  1598  000182  11C1               	iorwf	(_s1+1)& (0+255),w,b
  1599  000184  B4D8               	btfsc	status,2,c
  1600  000186  D007               	goto	l5689
  1601                           
  1602                           ; BSR set to: 0
  1603  000188  0E03               	movlw	3
  1604  00018A  0100               	movlb	0	; () banked
  1605  00018C  19C0               	xorwf	_s1& (0+255),w,b
  1606  00018E  0100               	movlb	0	; () banked
  1607  000190  11C1               	iorwf	(_s1+1)& (0+255),w,b
  1608  000192  A4D8               	btfss	status,2,c
  1609  000194  D004               	goto	l5691
  1610  000196                     l5689:
  1611                           
  1612                           ; BSR set to: 0
  1613  000196  0E00               	movlw	0
  1614  000198  6E5E               	movwf	_S1mode+1,c
  1615  00019A  0E03               	movlw	3
  1616  00019C  D003               	goto	L1
  1617  00019E                     l5691:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 187: else{S1mode = 5;}
  1621  00019E  0E00               	movlw	0
  1622  0001A0  6E5E               	movwf	_S1mode+1,c
  1623  0001A2  0E05               	movlw	5
  1624  0001A4                     L1:
  1625  0001A4  6E5D               	movwf	_S1mode,c
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 188: if(s3 == 2 || s3 == 3){S3mode = 3;}
  1629                           
  1630                           ; BSR set to: 0
  1631  0001A6  0E02               	movlw	2
  1632  0001A8  0100               	movlb	0	; () banked
  1633  0001AA  19BE               	xorwf	_s3& (0+255),w,b
  1634  0001AC  0100               	movlb	0	; () banked
  1635  0001AE  11BF               	iorwf	(_s3+1)& (0+255),w,b
  1636  0001B0  B4D8               	btfsc	status,2,c
  1637  0001B2  D007               	goto	l5697
  1638                           
  1639                           ; BSR set to: 0
  1640  0001B4  0E03               	movlw	3
  1641  0001B6  0100               	movlb	0	; () banked
  1642  0001B8  19BE               	xorwf	_s3& (0+255),w,b
  1643  0001BA  0100               	movlb	0	; () banked
  1644  0001BC  11BF               	iorwf	(_s3+1)& (0+255),w,b
  1645  0001BE  A4D8               	btfss	status,2,c
  1646  0001C0  D004               	goto	l5699
  1647  0001C2                     l5697:
  1648                           
  1649                           ; BSR set to: 0
  1650  0001C2  0E00               	movlw	0
  1651  0001C4  6E5A               	movwf	_S3mode+1,c
  1652  0001C6  0E03               	movlw	3
  1653  0001C8  D003               	goto	L2
  1654  0001CA                     l5699:
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 189: else{S3mode = 5;}
  1658  0001CA  0E00               	movlw	0
  1659  0001CC  6E5A               	movwf	_S3mode+1,c
  1660  0001CE  0E05               	movlw	5
  1661  0001D0                     L2:
  1662  0001D0  6E59               	movwf	_S3mode,c
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 190: PWM2(800, 1);
  1666                           
  1667                           ; BSR set to: 0
  1668  0001D2  0E03               	movlw	3
  1669  0001D4  6E22               	movwf	PWM2@duty+1,c
  1670  0001D6  0E20               	movlw	32
  1671  0001D8  6E21               	movwf	PWM2@duty,c
  1672  0001DA  0E00               	movlw	0
  1673  0001DC  6E24               	movwf	PWM2@dir+1,c
  1674  0001DE  0E01               	movlw	1
  1675  0001E0  6E23               	movwf	PWM2@dir,c
  1676  0001E2  ECA1  F013         	call	_PWM2	;wreg free
  1677                           
  1678                           ;main.c: 191: PWM1(400);
  1679  0001E6  0E01               	movlw	1
  1680  0001E8  6E22               	movwf	PWM1@duty+1,c
  1681  0001EA  0E90               	movlw	144
  1682  0001EC  6E21               	movwf	PWM1@duty,c
  1683  0001EE  ECFB  F014         	call	_PWM1	;wreg free
  1684                           
  1685                           ;main.c: 193: keypress = (0);
  1686  0001F2  0E00               	movlw	0
  1687  0001F4  0100               	movlb	0	; () banked
  1688  0001F6  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1689                           
  1690                           ;main.c: 195: }
  1691  0001F8  D736               	goto	l5651
  1692  0001FA                     l5705:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;main.c: 196: else if(keypress == 3){
  1696  0001FA  0E03               	movlw	3
  1697  0001FC  0100               	movlb	0	; () banked
  1698  0001FE  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1699  000200  A4D8               	btfss	status,2,c
  1700  000202  D019               	goto	l5709
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 197: displayLog(1);
  1704  000204  0E00               	movlw	0
  1705  000206  6E3A               	movwf	displayLog@run+1,c
  1706  000208  0E01               	movlw	1
  1707  00020A  6E39               	movwf	displayLog@run,c
  1708  00020C  EC40  F009         	call	_displayLog	;wreg free
  1709                           
  1710                           ;main.c: 198: displayLog(2);
  1711  000210  0E00               	movlw	0
  1712  000212  6E3A               	movwf	displayLog@run+1,c
  1713  000214  0E02               	movlw	2
  1714  000216  6E39               	movwf	displayLog@run,c
  1715  000218  EC40  F009         	call	_displayLog	;wreg free
  1716                           
  1717                           ;main.c: 199: displayLog(3);
  1718  00021C  0E00               	movlw	0
  1719  00021E  6E3A               	movwf	displayLog@run+1,c
  1720  000220  0E03               	movlw	3
  1721  000222  6E39               	movwf	displayLog@run,c
  1722  000224  EC40  F009         	call	_displayLog	;wreg free
  1723                           
  1724                           ;main.c: 200: displayLog(4);
  1725  000228  0E00               	movlw	0
  1726  00022A  6E3A               	movwf	displayLog@run+1,c
  1727  00022C  0E04               	movlw	4
  1728  00022E  6E39               	movwf	displayLog@run,c
  1729  000230  EC40  F009         	call	_displayLog	;wreg free
  1730                           
  1731                           ;main.c: 201: }
  1732  000234  D718               	goto	l5651
  1733  000236                     l5709:
  1734                           
  1735                           ;main.c: 202: else if(keypress == 15 ) {
  1736  000236  0E0F               	movlw	15
  1737  000238  0100               	movlb	0	; () banked
  1738  00023A  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1739  00023C  A4D8               	btfss	status,2,c
  1740  00023E  D713               	goto	l5651
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 203: standby = 2;
  1744  000240  0E00               	movlw	0
  1745  000242  0100               	movlb	0	; () banked
  1746  000244  6FAE               	movwf	(main@standby+1)& (0+255),b
  1747  000246  0E02               	movlw	2
  1748  000248  6FAD               	movwf	main@standby& (0+255),b
  1749                           
  1750                           ;main.c: 204: s = 1;
  1751  00024A  0E00               	movlw	0
  1752  00024C  0100               	movlb	0	; () banked
  1753  00024E  6F98               	movwf	(main@s+1)& (0+255),b
  1754  000250  0E01               	movlw	1
  1755  000252  6F97               	movwf	main@s& (0+255),b
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 205: }
  1759                           ;main.c: 207: }
  1760                           
  1761                           ; BSR set to: 0
  1762                           
  1763                           ; BSR set to: 0
  1764  000254  D708               	goto	l5651
  1765  000256                     l5713:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 208: else if(standby == 2){
  1769  000256  0E02               	movlw	2
  1770  000258  0100               	movlb	0	; () banked
  1771  00025A  19AD               	xorwf	main@standby& (0+255),w,b
  1772  00025C  0100               	movlb	0	; () banked
  1773  00025E  11AE               	iorwf	(main@standby+1)& (0+255),w,b
  1774  000260  A4D8               	btfss	status,2,c
  1775  000262  D25B               	goto	l5951
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;main.c: 211: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1779  000264  0E01               	movlw	1
  1780  000266  EC36  F016         	call	_lcdInst
  1781  00026A  0E34               	movlw	52
  1782  00026C  0100               	movlb	0	; () banked
  1783  00026E  6F91               	movwf	??_main& (0+255),b
  1784  000270  0EF1               	movlw	241
  1785  000272                     u7817:
  1786  000272  2EE8               	decfsz	wreg,f,c
  1787  000274  D7FE               	bra	u7817
  1788  000276  2F91               	decfsz	??_main& (0+255),f,b
  1789  000278  D7FC               	bra	u7817
  1790  00027A  D000               	nop2	
  1791                           
  1792                           ;main.c: 212: printf("testing PWM2 CW");
  1793  00027C  0E0E               	movlw	low STR_3
  1794  00027E  6E2D               	movwf	printf@f,c
  1795  000280  0EFF               	movlw	high STR_3
  1796  000282  6E2E               	movwf	printf@f+1,c
  1797  000284  EC7C  F007         	call	_printf	;wreg free
  1798                           
  1799                           ;main.c: 213: PWM2(800, 1);
  1800  000288  0E03               	movlw	3
  1801  00028A  6E22               	movwf	PWM2@duty+1,c
  1802  00028C  0E20               	movlw	32
  1803  00028E  6E21               	movwf	PWM2@duty,c
  1804  000290  0E00               	movlw	0
  1805  000292  6E24               	movwf	PWM2@dir+1,c
  1806  000294  0E01               	movlw	1
  1807  000296  6E23               	movwf	PWM2@dir,c
  1808  000298  ECA1  F013         	call	_PWM2	;wreg free
  1809                           
  1810                           ;main.c: 214: keycheck();
  1811  00029C  EC0C  F016         	call	_keycheck	;wreg free
  1812                           
  1813                           ;main.c: 216: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1814  0002A0  0E01               	movlw	1
  1815  0002A2  EC36  F016         	call	_lcdInst
  1816  0002A6  0E34               	movlw	52
  1817  0002A8  0100               	movlb	0	; () banked
  1818  0002AA  6F91               	movwf	??_main& (0+255),b
  1819  0002AC  0EF1               	movlw	241
  1820  0002AE                     u7827:
  1821  0002AE  2EE8               	decfsz	wreg,f,c
  1822  0002B0  D7FE               	bra	u7827
  1823  0002B2  2F91               	decfsz	??_main& (0+255),f,b
  1824  0002B4  D7FC               	bra	u7827
  1825  0002B6  D000               	nop2	
  1826                           
  1827                           ;main.c: 217: printf("testing PWM2 CCW");
  1828  0002B8  0EAC               	movlw	low STR_4
  1829  0002BA  6E2D               	movwf	printf@f,c
  1830  0002BC  0EFE               	movlw	high STR_4
  1831  0002BE  6E2E               	movwf	printf@f+1,c
  1832  0002C0  EC7C  F007         	call	_printf	;wreg free
  1833                           
  1834                           ;main.c: 218: PWM2(800, 2);
  1835  0002C4  0E03               	movlw	3
  1836  0002C6  6E22               	movwf	PWM2@duty+1,c
  1837  0002C8  0E20               	movlw	32
  1838  0002CA  6E21               	movwf	PWM2@duty,c
  1839  0002CC  0E00               	movlw	0
  1840  0002CE  6E24               	movwf	PWM2@dir+1,c
  1841  0002D0  0E02               	movlw	2
  1842  0002D2  6E23               	movwf	PWM2@dir,c
  1843  0002D4  ECA1  F013         	call	_PWM2	;wreg free
  1844                           
  1845                           ;main.c: 219: keycheck();
  1846  0002D8  EC0C  F016         	call	_keycheck	;wreg free
  1847                           
  1848                           ;main.c: 221: PWM2off();
  1849  0002DC  EC41  F016         	call	_PWM2off	;wreg free
  1850                           
  1851                           ;main.c: 223: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1852  0002E0  0E01               	movlw	1
  1853  0002E2  EC36  F016         	call	_lcdInst
  1854  0002E6  0E34               	movlw	52
  1855  0002E8  0100               	movlb	0	; () banked
  1856  0002EA  6F91               	movwf	??_main& (0+255),b
  1857  0002EC  0EF1               	movlw	241
  1858  0002EE                     u7837:
  1859  0002EE  2EE8               	decfsz	wreg,f,c
  1860  0002F0  D7FE               	bra	u7837
  1861  0002F2  2F91               	decfsz	??_main& (0+255),f,b
  1862  0002F4  D7FC               	bra	u7837
  1863  0002F6  D000               	nop2	
  1864                           
  1865                           ;main.c: 224: printf("testing S f");
  1866  0002F8  0EC7               	movlw	low STR_5
  1867  0002FA  6E2D               	movwf	printf@f,c
  1868  0002FC  0EFF               	movlw	high STR_5
  1869  0002FE  6E2E               	movwf	printf@f+1,c
  1870  000300  EC7C  F007         	call	_printf	;wreg free
  1871                           
  1872                           ;main.c: 225: S1mode = 1;
  1873  000304  0E00               	movlw	0
  1874  000306  6E5E               	movwf	_S1mode+1,c
  1875  000308  0E01               	movlw	1
  1876  00030A  6E5D               	movwf	_S1mode,c
  1877                           
  1878                           ;main.c: 226: S2mode = 1;
  1879  00030C  0E00               	movlw	0
  1880  00030E  6E5C               	movwf	_S2mode+1,c
  1881  000310  0E01               	movlw	1
  1882  000312  6E5B               	movwf	_S2mode,c
  1883                           
  1884                           ;main.c: 227: S3mode = 1;
  1885  000314  0E00               	movlw	0
  1886  000316  6E5A               	movwf	_S3mode+1,c
  1887  000318  0E01               	movlw	1
  1888  00031A  6E59               	movwf	_S3mode,c
  1889                           
  1890                           ;main.c: 228: keycheck();
  1891  00031C  EC0C  F016         	call	_keycheck	;wreg free
  1892                           
  1893                           ;main.c: 230: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1894  000320  0E01               	movlw	1
  1895  000322  EC36  F016         	call	_lcdInst
  1896  000326  0E34               	movlw	52
  1897  000328  0100               	movlb	0	; () banked
  1898  00032A  6F91               	movwf	??_main& (0+255),b
  1899  00032C  0EF1               	movlw	241
  1900  00032E                     u7847:
  1901  00032E  2EE8               	decfsz	wreg,f,c
  1902  000330  D7FE               	bra	u7847
  1903  000332  2F91               	decfsz	??_main& (0+255),f,b
  1904  000334  D7FC               	bra	u7847
  1905  000336  D000               	nop2	
  1906                           
  1907                           ;main.c: 231: printf("testing S b");
  1908  000338  0E97               	movlw	low STR_6
  1909  00033A  6E2D               	movwf	printf@f,c
  1910  00033C  0EFF               	movlw	high STR_6
  1911  00033E  6E2E               	movwf	printf@f+1,c
  1912  000340  EC7C  F007         	call	_printf	;wreg free
  1913                           
  1914                           ;main.c: 232: S1mode = 2;
  1915  000344  0E00               	movlw	0
  1916  000346  6E5E               	movwf	_S1mode+1,c
  1917  000348  0E02               	movlw	2
  1918  00034A  6E5D               	movwf	_S1mode,c
  1919                           
  1920                           ;main.c: 233: S2mode = 2;
  1921  00034C  0E00               	movlw	0
  1922  00034E  6E5C               	movwf	_S2mode+1,c
  1923  000350  0E02               	movlw	2
  1924  000352  6E5B               	movwf	_S2mode,c
  1925                           
  1926                           ;main.c: 234: S3mode = 2;
  1927  000354  0E00               	movlw	0
  1928  000356  6E5A               	movwf	_S3mode+1,c
  1929  000358  0E02               	movlw	2
  1930  00035A  6E59               	movwf	_S3mode,c
  1931                           
  1932                           ;main.c: 235: keycheck();
  1933  00035C  EC0C  F016         	call	_keycheck	;wreg free
  1934                           
  1935                           ;main.c: 237: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1936  000360  0E01               	movlw	1
  1937  000362  EC36  F016         	call	_lcdInst
  1938  000366  0E34               	movlw	52
  1939  000368  0100               	movlb	0	; () banked
  1940  00036A  6F91               	movwf	??_main& (0+255),b
  1941  00036C  0EF1               	movlw	241
  1942  00036E                     u7857:
  1943  00036E  2EE8               	decfsz	wreg,f,c
  1944  000370  D7FE               	bra	u7857
  1945  000372  2F91               	decfsz	??_main& (0+255),f,b
  1946  000374  D7FC               	bra	u7857
  1947  000376  D000               	nop2	
  1948                           
  1949                           ;main.c: 238: printf("testing S shake");
  1950  000378  0E1E               	movlw	low STR_7
  1951  00037A  6E2D               	movwf	printf@f,c
  1952  00037C  0EFF               	movlw	high STR_7
  1953  00037E  6E2E               	movwf	printf@f+1,c
  1954  000380  EC7C  F007         	call	_printf	;wreg free
  1955                           
  1956                           ;main.c: 239: S1mode = 3;
  1957  000384  0E00               	movlw	0
  1958  000386  6E5E               	movwf	_S1mode+1,c
  1959  000388  0E03               	movlw	3
  1960  00038A  6E5D               	movwf	_S1mode,c
  1961                           
  1962                           ;main.c: 240: S2mode = 3;
  1963  00038C  0E00               	movlw	0
  1964  00038E  6E5C               	movwf	_S2mode+1,c
  1965  000390  0E03               	movlw	3
  1966  000392  6E5B               	movwf	_S2mode,c
  1967                           
  1968                           ;main.c: 241: S3mode = 3;
  1969  000394  0E00               	movlw	0
  1970  000396  6E5A               	movwf	_S3mode+1,c
  1971  000398  0E03               	movlw	3
  1972  00039A  6E59               	movwf	_S3mode,c
  1973                           
  1974                           ;main.c: 242: keycheck();
  1975  00039C  EC0C  F016         	call	_keycheck	;wreg free
  1976                           
  1977                           ;main.c: 244: S1mode = 4;
  1978  0003A0  0E00               	movlw	0
  1979  0003A2  6E5E               	movwf	_S1mode+1,c
  1980  0003A4  0E04               	movlw	4
  1981  0003A6  6E5D               	movwf	_S1mode,c
  1982                           
  1983                           ;main.c: 245: S2mode = 4;
  1984  0003A8  0E00               	movlw	0
  1985  0003AA  6E5C               	movwf	_S2mode+1,c
  1986  0003AC  0E04               	movlw	4
  1987  0003AE  6E5B               	movwf	_S2mode,c
  1988                           
  1989                           ;main.c: 246: S3mode = 4;
  1990  0003B0  0E00               	movlw	0
  1991  0003B2  6E5A               	movwf	_S3mode+1,c
  1992  0003B4  0E04               	movlw	4
  1993  0003B6  6E59               	movwf	_S3mode,c
  1994                           
  1995                           ;main.c: 248: keypress = (0);
  1996  0003B8  0E00               	movlw	0
  1997  0003BA  0100               	movlb	0	; () banked
  1998  0003BC  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;main.c: 249: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2002  0003BE  0E01               	movlw	1
  2003  0003C0  EC36  F016         	call	_lcdInst
  2004  0003C4  0E34               	movlw	52
  2005  0003C6  0100               	movlb	0	; () banked
  2006  0003C8  6F91               	movwf	??_main& (0+255),b
  2007  0003CA  0EF1               	movlw	241
  2008  0003CC                     u7867:
  2009  0003CC  2EE8               	decfsz	wreg,f,c
  2010  0003CE  D7FE               	bra	u7867
  2011  0003D0  2F91               	decfsz	??_main& (0+255),f,b
  2012  0003D2  D7FC               	bra	u7867
  2013  0003D4  D000               	nop2	
  2014                           
  2015                           ;main.c: 250: printf("testing S1 pins");
  2016  0003D6  0E4E               	movlw	low STR_8
  2017  0003D8  6E2D               	movwf	printf@f,c
  2018  0003DA  0EFF               	movlw	high STR_8
  2019  0003DC  6E2E               	movwf	printf@f+1,c
  2020  0003DE  EC7C  F007         	call	_printf	;wreg free
  2021                           
  2022                           ;main.c: 251: while(keypress!=3){
  2023  0003E2  D032               	goto	l5813
  2024  0003E4                     l5791:
  2025                           
  2026                           ;main.c: 253: keyinterrupt();
  2027  0003E4  EC01  F016         	call	_keyinterrupt	;wreg free
  2028                           
  2029                           ;main.c: 255: if (keypress == 2){LATDbits.LATD1 = 1;}
  2030  0003E8  0E02               	movlw	2
  2031  0003EA  0100               	movlb	0	; () banked
  2032  0003EC  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2033  0003EE  A4D8               	btfss	status,2,c
  2034  0003F0  D002               	goto	l212
  2035                           
  2036                           ; BSR set to: 0
  2037  0003F2  828C               	bsf	3980,1,c	;volatile
  2038  0003F4  D001               	goto	l5797
  2039  0003F6                     l212:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 256: else{LATDbits.LATD1 = 0;}
  2043  0003F6  928C               	bcf	3980,1,c	;volatile
  2044  0003F8                     l5797:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 257: if (keypress == 6){LATBbits.LATB3 = 1;}
  2048  0003F8  0E06               	movlw	6
  2049  0003FA  0100               	movlb	0	; () banked
  2050  0003FC  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2051  0003FE  A4D8               	btfss	status,2,c
  2052  000400  D002               	goto	l214
  2053                           
  2054                           ; BSR set to: 0
  2055  000402  868A               	bsf	3978,3,c	;volatile
  2056  000404  D001               	goto	l5801
  2057  000406                     l214:
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 258: else{LATBbits.LATB3 = 0;}
  2061  000406  968A               	bcf	3978,3,c	;volatile
  2062  000408                     l5801:
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;main.c: 259: if (keypress == 10){LATBbits.LATB2 = 1;}
  2066  000408  0E0A               	movlw	10
  2067  00040A  0100               	movlb	0	; () banked
  2068  00040C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2069  00040E  A4D8               	btfss	status,2,c
  2070  000410  D002               	goto	l216
  2071                           
  2072                           ; BSR set to: 0
  2073  000412  848A               	bsf	3978,2,c	;volatile
  2074  000414  D001               	goto	l5805
  2075  000416                     l216:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 260: else{LATBbits.LATB2 = 0;}
  2079  000416  948A               	bcf	3978,2,c	;volatile
  2080  000418                     l5805:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;main.c: 261: if (keypress == 14){LATBbits.LATB0 = 1;}
  2084  000418  0E0E               	movlw	14
  2085  00041A  0100               	movlb	0	; () banked
  2086  00041C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2087  00041E  A4D8               	btfss	status,2,c
  2088  000420  D002               	goto	l218
  2089                           
  2090                           ; BSR set to: 0
  2091  000422  808A               	bsf	3978,0,c	;volatile
  2092  000424  D001               	goto	l5809
  2093  000426                     l218:
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;main.c: 262: else{LATBbits.LATB0 = 0;}
  2097  000426  908A               	bcf	3978,0,c	;volatile
  2098  000428                     l5809:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;main.c: 264: readADC(1);
  2102  000428  0E01               	movlw	1
  2103  00042A  ECE0  F015         	call	_readADC
  2104                           
  2105                           ;main.c: 265: lcdInst(0b11000000);;
  2106  00042E  0EC0               	movlw	192
  2107  000430  EC36  F016         	call	_lcdInst
  2108                           
  2109                           ;main.c: 266: printf("%x", ADRES);
  2110  000434  0EFC               	movlw	low (STR_23+1)
  2111  000436  6E2D               	movwf	printf@f,c
  2112  000438  0EFF               	movlw	high (STR_23+1)
  2113  00043A  6E2E               	movwf	printf@f+1,c
  2114  00043C  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2115  000440  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2116  000444  EC7C  F007         	call	_printf	;wreg free
  2117  000448                     l5813:
  2118  000448  0E03               	movlw	3
  2119  00044A  0100               	movlb	0	; () banked
  2120  00044C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2121  00044E  A4D8               	btfss	status,2,c
  2122  000450  D7C9               	goto	l5791
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;main.c: 267: }
  2126                           ;main.c: 269: keypress = (0);
  2127                           
  2128                           ; BSR set to: 0
  2129  000452  0E00               	movlw	0
  2130  000454  0100               	movlb	0	; () banked
  2131  000456  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;main.c: 270: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2135  000458  0E01               	movlw	1
  2136  00045A  EC36  F016         	call	_lcdInst
  2137  00045E  0E34               	movlw	52
  2138  000460  0100               	movlb	0	; () banked
  2139  000462  6F91               	movwf	??_main& (0+255),b
  2140  000464  0EF1               	movlw	241
  2141  000466                     u7877:
  2142  000466  2EE8               	decfsz	wreg,f,c
  2143  000468  D7FE               	bra	u7877
  2144  00046A  2F91               	decfsz	??_main& (0+255),f,b
  2145  00046C  D7FC               	bra	u7877
  2146  00046E  D000               	nop2	
  2147                           
  2148                           ;main.c: 271: printf("testing S2 pins");
  2149  000470  0E5E               	movlw	low STR_10
  2150  000472  6E2D               	movwf	printf@f,c
  2151  000474  0EFF               	movlw	high STR_10
  2152  000476  6E2E               	movwf	printf@f+1,c
  2153  000478  EC7C  F007         	call	_printf	;wreg free
  2154                           
  2155                           ;main.c: 272: while(keypress!=3){
  2156  00047C  D022               	goto	l5841
  2157  00047E                     l5823:
  2158                           
  2159                           ;main.c: 274: keyinterrupt();
  2160  00047E  EC01  F016         	call	_keyinterrupt	;wreg free
  2161                           
  2162                           ;main.c: 276: if (keypress == 2){LATCbits.LATC7 = 1;}
  2163  000482  0E02               	movlw	2
  2164  000484  0100               	movlb	0	; () banked
  2165  000486  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2166  000488  A4D8               	btfss	status,2,c
  2167  00048A  D002               	goto	l223
  2168                           
  2169                           ; BSR set to: 0
  2170  00048C  8E8B               	bsf	3979,7,c	;volatile
  2171  00048E  D001               	goto	l5829
  2172  000490                     l223:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;main.c: 277: else{LATCbits.LATC7 = 0;}
  2176  000490  9E8B               	bcf	3979,7,c	;volatile
  2177  000492                     l5829:
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;main.c: 278: if (keypress == 6){LATCbits.LATC6 = 1;}
  2181  000492  0E06               	movlw	6
  2182  000494  0100               	movlb	0	; () banked
  2183  000496  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2184  000498  A4D8               	btfss	status,2,c
  2185  00049A  D002               	goto	l225
  2186                           
  2187                           ; BSR set to: 0
  2188  00049C  8C8B               	bsf	3979,6,c	;volatile
  2189  00049E  D001               	goto	l5833
  2190  0004A0                     l225:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 279: else{LATCbits.LATC6 = 0;}
  2194  0004A0  9C8B               	bcf	3979,6,c	;volatile
  2195  0004A2                     l5833:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;main.c: 280: if (keypress == 10){LATCbits.LATC0 = 1;}
  2199  0004A2  0E0A               	movlw	10
  2200  0004A4  0100               	movlb	0	; () banked
  2201  0004A6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2202  0004A8  A4D8               	btfss	status,2,c
  2203  0004AA  D002               	goto	l227
  2204                           
  2205                           ; BSR set to: 0
  2206  0004AC  808B               	bsf	3979,0,c	;volatile
  2207  0004AE  D001               	goto	l5837
  2208  0004B0                     l227:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;main.c: 281: else{LATCbits.LATC0 = 0;}
  2212  0004B0  908B               	bcf	3979,0,c	;volatile
  2213  0004B2                     l5837:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;main.c: 282: if (keypress == 14){LATCbits.LATC5 = 1;}
  2217  0004B2  0E0E               	movlw	14
  2218  0004B4  0100               	movlb	0	; () banked
  2219  0004B6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2220  0004B8  A4D8               	btfss	status,2,c
  2221  0004BA  D002               	goto	l229
  2222                           
  2223                           ; BSR set to: 0
  2224  0004BC  8A8B               	bsf	3979,5,c	;volatile
  2225  0004BE  D001               	goto	l5841
  2226  0004C0                     l229:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;main.c: 283: else{LATCbits.LATC5 = 0;}
  2230  0004C0  9A8B               	bcf	3979,5,c	;volatile
  2231  0004C2                     l5841:
  2232  0004C2  0E03               	movlw	3
  2233  0004C4  0100               	movlb	0	; () banked
  2234  0004C6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2235  0004C8  A4D8               	btfss	status,2,c
  2236  0004CA  D7D9               	goto	l5823
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;main.c: 284: }
  2240                           ;main.c: 286: keypress = (0);
  2241                           
  2242                           ; BSR set to: 0
  2243  0004CC  0E00               	movlw	0
  2244  0004CE  0100               	movlb	0	; () banked
  2245  0004D0  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;main.c: 287: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2249  0004D2  0E01               	movlw	1
  2250  0004D4  EC36  F016         	call	_lcdInst
  2251  0004D8  0E34               	movlw	52
  2252  0004DA  0100               	movlb	0	; () banked
  2253  0004DC  6F91               	movwf	??_main& (0+255),b
  2254  0004DE  0EF1               	movlw	241
  2255  0004E0                     u7887:
  2256  0004E0  2EE8               	decfsz	wreg,f,c
  2257  0004E2  D7FE               	bra	u7887
  2258  0004E4  2F91               	decfsz	??_main& (0+255),f,b
  2259  0004E6  D7FC               	bra	u7887
  2260  0004E8  D000               	nop2	
  2261                           
  2262                           ;main.c: 288: printf("testing S3 pins");
  2263  0004EA  0E6E               	movlw	low STR_11
  2264  0004EC  6E2D               	movwf	printf@f,c
  2265  0004EE  0EFF               	movlw	high STR_11
  2266  0004F0  6E2E               	movwf	printf@f+1,c
  2267  0004F2  EC7C  F007         	call	_printf	;wreg free
  2268                           
  2269                           ;main.c: 289: while(keypress!=3){
  2270  0004F6  D032               	goto	l5873
  2271  0004F8                     l5851:
  2272                           
  2273                           ;main.c: 291: keyinterrupt();
  2274  0004F8  EC01  F016         	call	_keyinterrupt	;wreg free
  2275                           
  2276                           ;main.c: 293: if (keypress == 2){LATEbits.LATE2 = 1;}
  2277  0004FC  0E02               	movlw	2
  2278  0004FE  0100               	movlb	0	; () banked
  2279  000500  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2280  000502  A4D8               	btfss	status,2,c
  2281  000504  D002               	goto	l234
  2282                           
  2283                           ; BSR set to: 0
  2284  000506  848D               	bsf	3981,2,c	;volatile
  2285  000508  D001               	goto	l5857
  2286  00050A                     l234:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;main.c: 294: else{LATEbits.LATE2 = 0;}
  2290  00050A  948D               	bcf	3981,2,c	;volatile
  2291  00050C                     l5857:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 295: if (keypress == 6){LATEbits.LATE1 = 1;}
  2295  00050C  0E06               	movlw	6
  2296  00050E  0100               	movlb	0	; () banked
  2297  000510  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2298  000512  A4D8               	btfss	status,2,c
  2299  000514  D002               	goto	l236
  2300                           
  2301                           ; BSR set to: 0
  2302  000516  828D               	bsf	3981,1,c	;volatile
  2303  000518  D001               	goto	l5861
  2304  00051A                     l236:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 296: else{LATEbits.LATE1 = 0;}
  2308  00051A  928D               	bcf	3981,1,c	;volatile
  2309  00051C                     l5861:
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;main.c: 297: if (keypress == 10){LATAbits.LATA4 = 1;}
  2313  00051C  0E0A               	movlw	10
  2314  00051E  0100               	movlb	0	; () banked
  2315  000520  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2316  000522  A4D8               	btfss	status,2,c
  2317  000524  D002               	goto	l238
  2318                           
  2319                           ; BSR set to: 0
  2320  000526  8889               	bsf	3977,4,c	;volatile
  2321  000528  D001               	goto	l5865
  2322  00052A                     l238:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;main.c: 298: else{LATAbits.LATA4 = 0;}
  2326  00052A  9889               	bcf	3977,4,c	;volatile
  2327  00052C                     l5865:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;main.c: 299: if (keypress == 14){LATDbits.LATD0 = 1;}
  2331  00052C  0E0E               	movlw	14
  2332  00052E  0100               	movlb	0	; () banked
  2333  000530  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2334  000532  A4D8               	btfss	status,2,c
  2335  000534  D002               	goto	l240
  2336                           
  2337                           ; BSR set to: 0
  2338  000536  808C               	bsf	3980,0,c	;volatile
  2339  000538  D001               	goto	l5869
  2340  00053A                     l240:
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 300: else{LATDbits.LATD0 = 0;}
  2344  00053A  908C               	bcf	3980,0,c	;volatile
  2345  00053C                     l5869:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 302: readADC(5);
  2349  00053C  0E05               	movlw	5
  2350  00053E  ECE0  F015         	call	_readADC
  2351                           
  2352                           ;main.c: 303: lcdInst(0b11000000);;
  2353  000542  0EC0               	movlw	192
  2354  000544  EC36  F016         	call	_lcdInst
  2355                           
  2356                           ;main.c: 304: printf("%x", ADRES);
  2357  000548  0EFC               	movlw	low (STR_23+1)
  2358  00054A  6E2D               	movwf	printf@f,c
  2359  00054C  0EFF               	movlw	high (STR_23+1)
  2360  00054E  6E2E               	movwf	printf@f+1,c
  2361  000550  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2362  000554  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2363  000558  EC7C  F007         	call	_printf	;wreg free
  2364  00055C                     l5873:
  2365  00055C  0E03               	movlw	3
  2366  00055E  0100               	movlb	0	; () banked
  2367  000560  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2368  000562  A4D8               	btfss	status,2,c
  2369  000564  D7C9               	goto	l5851
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;main.c: 305: }
  2373                           ;main.c: 307: S1mode = 0;
  2374                           
  2375                           ; BSR set to: 0
  2376  000566  0E00               	movlw	0
  2377  000568  6E5E               	movwf	_S1mode+1,c
  2378  00056A  0E00               	movlw	0
  2379  00056C  6E5D               	movwf	_S1mode,c
  2380                           
  2381                           ;main.c: 308: S2mode = 0;
  2382  00056E  0E00               	movlw	0
  2383  000570  6E5C               	movwf	_S2mode+1,c
  2384  000572  0E00               	movlw	0
  2385  000574  6E5B               	movwf	_S2mode,c
  2386                           
  2387                           ;main.c: 309: S3mode = 0;
  2388  000576  0E00               	movlw	0
  2389  000578  6E5A               	movwf	_S3mode+1,c
  2390  00057A  0E00               	movlw	0
  2391  00057C  6E59               	movwf	_S3mode,c
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;main.c: 311: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2395  00057E  0E01               	movlw	1
  2396  000580  EC36  F016         	call	_lcdInst
  2397  000584  0E34               	movlw	52
  2398  000586  0100               	movlb	0	; () banked
  2399  000588  6F91               	movwf	??_main& (0+255),b
  2400  00058A  0EF1               	movlw	241
  2401  00058C                     u7897:
  2402  00058C  2EE8               	decfsz	wreg,f,c
  2403  00058E  D7FE               	bra	u7897
  2404  000590  2F91               	decfsz	??_main& (0+255),f,b
  2405  000592  D7FC               	bra	u7897
  2406  000594  D000               	nop2	
  2407                           
  2408                           ;main.c: 312: printf("testing PWM1");
  2409  000596  0E7E               	movlw	low STR_13
  2410  000598  6E2D               	movwf	printf@f,c
  2411  00059A  0EFF               	movlw	high STR_13
  2412  00059C  6E2E               	movwf	printf@f+1,c
  2413  00059E  EC7C  F007         	call	_printf	;wreg free
  2414                           
  2415                           ;main.c: 313: PWM1(400);
  2416  0005A2  0E01               	movlw	1
  2417  0005A4  6E22               	movwf	PWM1@duty+1,c
  2418  0005A6  0E90               	movlw	144
  2419  0005A8  6E21               	movwf	PWM1@duty,c
  2420  0005AA  ECFB  F014         	call	_PWM1	;wreg free
  2421                           
  2422                           ;main.c: 314: keycheck();
  2423  0005AE  EC0C  F016         	call	_keycheck	;wreg free
  2424                           
  2425                           ;main.c: 315: PWM1off();
  2426  0005B2  EC46  F016         	call	_PWM1off	;wreg free
  2427                           
  2428                           ;main.c: 317: keypress = (0);
  2429  0005B6  0E00               	movlw	0
  2430  0005B8  0100               	movlb	0	; () banked
  2431  0005BA  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2432                           
  2433                           ;main.c: 318: while(keypress==(0)){
  2434  0005BC  D05B               	goto	l5921
  2435  0005BE                     l5891:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 319: keypress = (0);
  2439  0005BE  0E00               	movlw	0
  2440  0005C0  0100               	movlb	0	; () banked
  2441  0005C2  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;main.c: 321: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2445  0005C4  0E01               	movlw	1
  2446  0005C6  EC36  F016         	call	_lcdInst
  2447  0005CA  0E34               	movlw	52
  2448  0005CC  0100               	movlb	0	; () banked
  2449  0005CE  6F91               	movwf	??_main& (0+255),b
  2450  0005D0  0EF1               	movlw	241
  2451  0005D2                     u7907:
  2452  0005D2  2EE8               	decfsz	wreg,f,c
  2453  0005D4  D7FE               	bra	u7907
  2454  0005D6  2F91               	decfsz	??_main& (0+255),f,b
  2455  0005D8  D7FC               	bra	u7907
  2456  0005DA  D000               	nop2	
  2457                           
  2458                           ;main.c: 322: printf("testing IR");
  2459  0005DC  0ED3               	movlw	low STR_14
  2460  0005DE  6E2D               	movwf	printf@f,c
  2461  0005E0  0EFF               	movlw	high STR_14
  2462  0005E2  6E2E               	movwf	printf@f+1,c
  2463  0005E4  EC7C  F007         	call	_printf	;wreg free
  2464                           
  2465                           ;main.c: 323: lcdInst(0b11000000);;
  2466  0005E8  0EC0               	movlw	192
  2467  0005EA  EC36  F016         	call	_lcdInst
  2468                           
  2469                           ;main.c: 324: readADC(1);
  2470  0005EE  0E01               	movlw	1
  2471  0005F0  ECE0  F015         	call	_readADC
  2472                           
  2473                           ;main.c: 325: printf("%x ", ADRES);
  2474  0005F4  0EF7               	movlw	low STR_15
  2475  0005F6  6E2D               	movwf	printf@f,c
  2476  0005F8  0EFF               	movlw	high STR_15
  2477  0005FA  6E2E               	movwf	printf@f+1,c
  2478  0005FC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2479  000600  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2480  000604  EC7C  F007         	call	_printf	;wreg free
  2481                           
  2482                           ;main.c: 326: readADC(0);
  2483  000608  0E00               	movlw	0
  2484  00060A  ECE0  F015         	call	_readADC
  2485                           
  2486                           ;main.c: 327: printf("%x ", ADRES);
  2487  00060E  0EF7               	movlw	low STR_15
  2488  000610  6E2D               	movwf	printf@f,c
  2489  000612  0EFF               	movlw	high STR_15
  2490  000614  6E2E               	movwf	printf@f+1,c
  2491  000616  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2492  00061A  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2493  00061E  EC7C  F007         	call	_printf	;wreg free
  2494                           
  2495                           ;main.c: 328: readADC(2);
  2496  000622  0E02               	movlw	2
  2497  000624  ECE0  F015         	call	_readADC
  2498                           
  2499                           ;main.c: 329: printf("%x ", ADRES);
  2500  000628  0EF7               	movlw	low STR_15
  2501  00062A  6E2D               	movwf	printf@f,c
  2502  00062C  0EFF               	movlw	high STR_15
  2503  00062E  6E2E               	movwf	printf@f+1,c
  2504  000630  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2505  000634  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2506  000638  EC7C  F007         	call	_printf	;wreg free
  2507                           
  2508                           ;main.c: 330: readADC(5);
  2509  00063C  0E05               	movlw	5
  2510  00063E  ECE0  F015         	call	_readADC
  2511                           
  2512                           ;main.c: 331: printf("%x ", ADRES);
  2513  000642  0EF7               	movlw	low STR_15
  2514  000644  6E2D               	movwf	printf@f,c
  2515  000646  0EFF               	movlw	high STR_15
  2516  000648  6E2E               	movwf	printf@f+1,c
  2517  00064A  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2518  00064E  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2519  000652  EC7C  F007         	call	_printf	;wreg free
  2520                           
  2521                           ;main.c: 332: keyinterrupt();
  2522  000656  EC01  F016         	call	_keyinterrupt	;wreg free
  2523                           
  2524                           ;main.c: 333: _delay((unsigned long)((100)*(32000000/4000.0)));
  2525  00065A  0E05               	movlw	5
  2526  00065C  0100               	movlb	0	; () banked
  2527  00065E  6F92               	movwf	(??_main+1)& (0+255),b
  2528  000660  0E0F               	movlw	15
  2529  000662  0100               	movlb	0	; () banked
  2530  000664  6F91               	movwf	??_main& (0+255),b
  2531  000666  0EF1               	movlw	241
  2532  000668                     u7917:
  2533  000668  2EE8               	decfsz	wreg,f,c
  2534  00066A  D7FE               	bra	u7917
  2535  00066C  2F91               	decfsz	??_main& (0+255),f,b
  2536  00066E  D7FC               	bra	u7917
  2537  000670  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2538  000672  D7FA               	bra	u7917
  2539  000674                     l5921:
  2540  000674  0100               	movlb	0	; () banked
  2541  000676  51C2               	movf	_keypress& (0+255),w,b	;volatile
  2542  000678  B4D8               	btfsc	status,2,c
  2543  00067A  D7A1               	goto	l5891
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;main.c: 334: }
  2547                           ;main.c: 336: keypress = (0);
  2548                           
  2549                           ; BSR set to: 0
  2550  00067C  0E00               	movlw	0
  2551  00067E  0100               	movlb	0	; () banked
  2552  000680  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2553                           
  2554                           ;main.c: 337: while(keypress==(0)){
  2555  000682  D041               	goto	l5947
  2556  000684                     l5925:
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 338: keypress = (0);
  2560  000684  0E00               	movlw	0
  2561  000686  0100               	movlb	0	; () banked
  2562  000688  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 339: _delay((unsigned long)((50)*(32000000/4000.0)));
  2566  00068A  0E03               	movlw	3
  2567  00068C  0100               	movlb	0	; () banked
  2568  00068E  6F92               	movwf	(??_main+1)& (0+255),b
  2569  000690  0E08               	movlw	8
  2570  000692  0100               	movlb	0	; () banked
  2571  000694  6F91               	movwf	??_main& (0+255),b
  2572  000696  0E77               	movlw	119
  2573  000698                     u7927:
  2574  000698  2EE8               	decfsz	wreg,f,c
  2575  00069A  D7FE               	bra	u7927
  2576  00069C  2F91               	decfsz	??_main& (0+255),f,b
  2577  00069E  D7FC               	bra	u7927
  2578  0006A0  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2579  0006A2  D7FA               	bra	u7927
  2580                           
  2581                           ;main.c: 340: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2582  0006A4  0E01               	movlw	1
  2583  0006A6  EC36  F016         	call	_lcdInst
  2584  0006AA  0E34               	movlw	52
  2585  0006AC  0100               	movlb	0	; () banked
  2586  0006AE  6F91               	movwf	??_main& (0+255),b
  2587  0006B0  0EF1               	movlw	241
  2588  0006B2                     u7937:
  2589  0006B2  2EE8               	decfsz	wreg,f,c
  2590  0006B4  D7FE               	bra	u7937
  2591  0006B6  2F91               	decfsz	??_main& (0+255),f,b
  2592  0006B8  D7FC               	bra	u7937
  2593  0006BA  D000               	nop2	
  2594                           
  2595                           ;main.c: 341: printf("label   tab");
  2596  0006BC  0EA3               	movlw	low STR_19
  2597  0006BE  6E2D               	movwf	printf@f,c
  2598  0006C0  0EFF               	movlw	high STR_19
  2599  0006C2  6E2E               	movwf	printf@f+1,c
  2600  0006C4  EC7C  F007         	call	_printf	;wreg free
  2601                           
  2602                           ;main.c: 342: lcdInst(0b11000000);;
  2603  0006C8  0EC0               	movlw	192
  2604  0006CA  EC36  F016         	call	_lcdInst
  2605                           
  2606                           ;main.c: 343: readADC(4);
  2607  0006CE  0E04               	movlw	4
  2608  0006D0  ECE0  F015         	call	_readADC
  2609                           
  2610                           ;main.c: 344: printf("%x      ", ADRES);
  2611  0006D4  0EDE               	movlw	low STR_20
  2612  0006D6  6E2D               	movwf	printf@f,c
  2613  0006D8  0EFF               	movlw	high STR_20
  2614  0006DA  6E2E               	movwf	printf@f+1,c
  2615  0006DC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2616  0006E0  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2617  0006E4  EC7C  F007         	call	_printf	;wreg free
  2618                           
  2619                           ;main.c: 345: readADC(3);
  2620  0006E8  0E03               	movlw	3
  2621  0006EA  ECE0  F015         	call	_readADC
  2622                           
  2623                           ;main.c: 346: printf("%x      ", ADRES);
  2624  0006EE  0EDE               	movlw	low STR_20
  2625  0006F0  6E2D               	movwf	printf@f,c
  2626  0006F2  0EFF               	movlw	high STR_20
  2627  0006F4  6E2E               	movwf	printf@f+1,c
  2628  0006F6  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2629  0006FA  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2630  0006FE  EC7C  F007         	call	_printf	;wreg free
  2631                           
  2632                           ;main.c: 347: keyinterrupt();
  2633  000702  EC01  F016         	call	_keyinterrupt	;wreg free
  2634  000706                     l5947:
  2635  000706  0100               	movlb	0	; () banked
  2636  000708  51C2               	movf	_keypress& (0+255),w,b	;volatile
  2637  00070A  B4D8               	btfsc	status,2,c
  2638  00070C  D7BB               	goto	l5925
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 348: }
  2642                           ;main.c: 350: standby = 1;
  2643                           
  2644                           ; BSR set to: 0
  2645  00070E  0E00               	movlw	0
  2646  000710  0100               	movlb	0	; () banked
  2647  000712  6FAE               	movwf	(main@standby+1)& (0+255),b
  2648  000714  0E01               	movlw	1
  2649  000716  6FAD               	movwf	main@standby& (0+255),b
  2650                           
  2651                           ;main.c: 356: }
  2652  000718  D4A6               	goto	l5651
  2653  00071A                     l5951:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;main.c: 359: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2657  00071A  0E01               	movlw	1
  2658  00071C  EC36  F016         	call	_lcdInst
  2659  000720  0E34               	movlw	52
  2660  000722  0100               	movlb	0	; () banked
  2661  000724  6F91               	movwf	??_main& (0+255),b
  2662  000726  0EF1               	movlw	241
  2663  000728                     u7947:
  2664  000728  2EE8               	decfsz	wreg,f,c
  2665  00072A  D7FE               	bra	u7947
  2666  00072C  2F91               	decfsz	??_main& (0+255),f,b
  2667  00072E  D7FC               	bra	u7947
  2668  000730  D000               	nop2	
  2669                           
  2670                           ;main.c: 361: readADC(2);
  2671  000732  0E02               	movlw	2
  2672  000734  ECE0  F015         	call	_readADC
  2673                           
  2674                           ;main.c: 362: if(ADRES <= 0x130){
  2675  000738  0E31               	movlw	49
  2676  00073A  5CC3               	subwf	4035,w,c	;volatile
  2677  00073C  0E01               	movlw	1
  2678  00073E  58C4               	subwfb	4036,w,c	;volatile
  2679  000740  B0D8               	btfsc	status,0,c
  2680  000742  D026               	goto	l5969
  2681                           
  2682                           ;main.c: 363: prevSoupLoad = seconds;
  2683  000744  C0BC  F099         	movff	_seconds,main@prevSoupLoad
  2684  000748  C0BD  F09A         	movff	_seconds+1,main@prevSoupLoad+1
  2685                           
  2686                           ;main.c: 364: soupCnt = 1;
  2687  00074C  0E00               	movlw	0
  2688  00074E  0100               	movlb	0	; () banked
  2689  000750  6FB9               	movwf	(_soupCnt+1)& (0+255),b
  2690  000752  0E01               	movlw	1
  2691  000754  6FB8               	movwf	_soupCnt& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 365: if (!soupSort){
  2695  000756  0100               	movlb	0	; () banked
  2696  000758  51A5               	movf	main@soupSort& (0+255),w,b
  2697  00075A  0100               	movlb	0	; () banked
  2698  00075C  11A6               	iorwf	(main@soupSort+1)& (0+255),w,b
  2699  00075E  A4D8               	btfss	status,2,c
  2700  000760  D017               	goto	l5969
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;main.c: 366: soupSort = 1;
  2704  000762  0E00               	movlw	0
  2705  000764  0100               	movlb	0	; () banked
  2706  000766  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  2707  000768  0E01               	movlw	1
  2708  00076A  6FA5               	movwf	main@soupSort& (0+255),b
  2709                           
  2710                           ;main.c: 367: soupSteps = 0;
  2711  00076C  0E00               	movlw	0
  2712  00076E  6E58               	movwf	_soupSteps+1,c
  2713  000770  0E00               	movlw	0
  2714  000772  6E57               	movwf	_soupSteps,c
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;main.c: 368: _delay((unsigned long)((150)*(32000000/4000.0)));
  2718  000774  0E07               	movlw	7
  2719  000776  0100               	movlb	0	; () banked
  2720  000778  6F92               	movwf	(??_main+1)& (0+255),b
  2721  00077A  0E17               	movlw	23
  2722  00077C  0100               	movlb	0	; () banked
  2723  00077E  6F91               	movwf	??_main& (0+255),b
  2724  000780  0E6A               	movlw	106
  2725  000782                     u7957:
  2726  000782  2EE8               	decfsz	wreg,f,c
  2727  000784  D7FE               	bra	u7957
  2728  000786  2F91               	decfsz	??_main& (0+255),f,b
  2729  000788  D7FC               	bra	u7957
  2730  00078A  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2731  00078C  D7FA               	bra	u7957
  2732  00078E  F000               	nop	
  2733  000790                     l5969:
  2734                           
  2735                           ;main.c: 369: }
  2736                           ;main.c: 370: }
  2737                           ;main.c: 372: printf("soup: %x %d", ADRES, soupSteps);
  2738  000790  0EBB               	movlw	low STR_22
  2739  000792  6E2D               	movwf	printf@f,c
  2740  000794  0EFF               	movlw	high STR_22
  2741  000796  6E2E               	movwf	printf@f+1,c
  2742  000798  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2743  00079C  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2744  0007A0  C057  F031         	movff	_soupSteps,?_printf+4
  2745  0007A4  C058  F032         	movff	_soupSteps+1,?_printf+5
  2746  0007A8  EC7C  F007         	call	_printf	;wreg free
  2747                           
  2748                           ;main.c: 374: if (soupSort){
  2749  0007AC  0100               	movlb	0	; () banked
  2750  0007AE  51A5               	movf	main@soupSort& (0+255),w,b
  2751  0007B0  0100               	movlb	0	; () banked
  2752  0007B2  11A6               	iorwf	(main@soupSort+1)& (0+255),w,b
  2753  0007B4  B4D8               	btfsc	status,2,c
  2754  0007B6  D120               	goto	l6065
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;main.c: 375: if (soupSteps < 80){
  2758  0007B8  BE58               	btfsc	_soupSteps+1,7,c
  2759  0007BA  D006               	goto	l5975
  2760  0007BC  5058               	movf	_soupSteps+1,w,c
  2761  0007BE  E11B               	bnz	l5983
  2762  0007C0  0E50               	movlw	80
  2763  0007C2  5C57               	subwf	_soupSteps,w,c
  2764  0007C4  B0D8               	btfsc	status,0,c
  2765  0007C6  D017               	goto	l5983
  2766  0007C8                     l5975:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 376: readADC(4);
  2770  0007C8  0E04               	movlw	4
  2771  0007CA  ECE0  F015         	call	_readADC
  2772                           
  2773                           ;main.c: 377: if(ADRES<0x200){labelState = 1;}
  2774  0007CE  0E02               	movlw	2
  2775  0007D0  5CC4               	subwf	4036,w,c	;volatile
  2776  0007D2  B0D8               	btfsc	status,0,c
  2777  0007D4  D005               	goto	l5981
  2778  0007D6  0E00               	movlw	0
  2779  0007D8  0100               	movlb	0	; () banked
  2780  0007DA  6FBB               	movwf	(_labelState+1)& (0+255),b
  2781  0007DC  0E01               	movlw	1
  2782  0007DE  6FBA               	movwf	_labelState& (0+255),b
  2783  0007E0                     l5981:
  2784                           
  2785                           ;main.c: 378: printf(" %x",ADRES);
  2786  0007E0  0EFB               	movlw	low STR_23
  2787  0007E2  6E2D               	movwf	printf@f,c
  2788  0007E4  0EFF               	movlw	high STR_23
  2789  0007E6  6E2E               	movwf	printf@f+1,c
  2790  0007E8  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2791  0007EC  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2792  0007F0  EC7C  F007         	call	_printf	;wreg free
  2793                           
  2794                           ;main.c: 379: }
  2795  0007F4  D101               	goto	l6065
  2796  0007F6                     l5983:
  2797                           
  2798                           ;main.c: 380: else if (labelState == 1){
  2799  0007F6  0100               	movlb	0	; () banked
  2800  0007F8  05BA               	decf	_labelState& (0+255),w,b
  2801  0007FA  0100               	movlb	0	; () banked
  2802  0007FC  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2803  0007FE  A4D8               	btfss	status,2,c
  2804  000800  D051               	goto	l6011
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;main.c: 381: if(soupSteps < (80+70)){
  2808  000802  BE58               	btfsc	_soupSteps+1,7,c
  2809  000804  D006               	goto	l5987
  2810  000806  5058               	movf	_soupSteps+1,w,c
  2811  000808  E108               	bnz	l5989
  2812  00080A  0E96               	movlw	150
  2813  00080C  5C57               	subwf	_soupSteps,w,c
  2814  00080E  B0D8               	btfsc	status,0,c
  2815  000810  D004               	goto	l5989
  2816  000812                     l5987:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 382: S1mode = 1;
  2820  000812  0E00               	movlw	0
  2821  000814  6E5E               	movwf	_S1mode+1,c
  2822  000816  0E01               	movlw	1
  2823  000818  D056               	goto	L3
  2824  00081A                     l5989:
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 385: else if(soupSteps < (80+70+55)){
  2828  00081A  BE58               	btfsc	_soupSteps+1,7,c
  2829  00081C  D006               	goto	l5991
  2830  00081E  5058               	movf	_soupSteps+1,w,c
  2831  000820  E10C               	bnz	l5993
  2832  000822  0ECD               	movlw	205
  2833  000824  5C57               	subwf	_soupSteps,w,c
  2834  000826  B0D8               	btfsc	status,0,c
  2835  000828  D008               	goto	l5993
  2836  00082A                     l5991:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;main.c: 386: S1mode = 2;
  2840  00082A  0E00               	movlw	0
  2841  00082C  6E5E               	movwf	_S1mode+1,c
  2842  00082E  0E02               	movlw	2
  2843  000830  6E5D               	movwf	_S1mode,c
  2844                           
  2845                           ;main.c: 387: soupAlign = 2;
  2846  000832  0E00               	movlw	0
  2847  000834  6E50               	movwf	_soupAlign+1,c
  2848  000836  0E02               	movlw	2
  2849  000838  D05C               	goto	L4
  2850  00083A                     l5993:
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;main.c: 390: else{
  2854                           ;main.c: 391: S1mode = 4;
  2855  00083A  0E00               	movlw	0
  2856  00083C  6E5E               	movwf	_S1mode+1,c
  2857  00083E  0E04               	movlw	4
  2858  000840  6E5D               	movwf	_S1mode,c
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;main.c: 392: printf(" %d", soupAlign);
  2862  000842  0EEA               	movlw	low (STR_45+12)
  2863  000844  6E2D               	movwf	printf@f,c
  2864  000846  0EFE               	movlw	high (STR_45+12)
  2865  000848  6E2E               	movwf	printf@f+1,c
  2866  00084A  C04F  F02F         	movff	_soupAlign,?_printf+2
  2867  00084E  C050  F030         	movff	_soupAlign+1,?_printf+3
  2868  000852  EC7C  F007         	call	_printf	;wreg free
  2869                           
  2870                           ;main.c: 393: updateS1(soupAlign);
  2871  000856  C04F  F021         	movff	_soupAlign,updateS1@mode
  2872  00085A  C050  F022         	movff	_soupAlign+1,updateS1@mode+1
  2873  00085E  ECFE  F00A         	call	_updateS1	;wreg free
  2874                           
  2875                           ;main.c: 394: readADC(1);
  2876  000862  0E01               	movlw	1
  2877  000864  ECE0  F015         	call	_readADC
  2878                           
  2879                           ;main.c: 395: printf(" %x", ADRES);
  2880  000868  0EFB               	movlw	low STR_23
  2881  00086A  6E2D               	movwf	printf@f,c
  2882  00086C  0EFF               	movlw	high STR_23
  2883  00086E  6E2E               	movwf	printf@f+1,c
  2884  000870  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2885  000874  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2886  000878  EC7C  F007         	call	_printf	;wreg free
  2887                           
  2888                           ;main.c: 396: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  2889  00087C  0100               	movlb	0	; () banked
  2890  00087E  51AB               	movf	main@prevSoupIR& (0+255),w,b
  2891  000880  5CC3               	subwf	4035,w,c	;volatile
  2892  000882  0100               	movlb	0	; () banked
  2893  000884  51AC               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2894  000886  58C4               	subwfb	4036,w,c	;volatile
  2895  000888  B0D8               	btfsc	status,0,c
  2896  00088A  D06D               	goto	l6037
  2897                           
  2898                           ; BSR set to: 0
  2899  00088C  0EAB               	movlw	171
  2900  00088E  5CC3               	subwf	4035,w,c	;volatile
  2901  000890  0E03               	movlw	3
  2902  000892  58C4               	subwfb	4036,w,c	;volatile
  2903  000894  A0D8               	btfss	status,0,c
  2904  000896  D067               	goto	l6037
  2905                           
  2906                           ; BSR set to: 0
  2907  000898  0E00               	movlw	0
  2908  00089A  0100               	movlb	0	; () banked
  2909  00089C  6FBB               	movwf	(_labelState+1)& (0+255),b
  2910  00089E  0E65               	movlw	101
  2911  0008A0  6FBA               	movwf	_labelState& (0+255),b
  2912  0008A2  D061               	goto	l6037
  2913  0008A4                     l6011:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;main.c: 401: else if(labelState == 0){
  2917  0008A4  0100               	movlb	0	; () banked
  2918  0008A6  51BA               	movf	_labelState& (0+255),w,b
  2919  0008A8  0100               	movlb	0	; () banked
  2920  0008AA  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2921  0008AC  A4D8               	btfss	status,2,c
  2922  0008AE  D060               	goto	l6039
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 402: if(soupSteps < (80+70)){
  2926  0008B0  BE58               	btfsc	_soupSteps+1,7,c
  2927  0008B2  D006               	goto	l6015
  2928  0008B4  5058               	movf	_soupSteps+1,w,c
  2929  0008B6  E10E               	bnz	l6017
  2930  0008B8  0E96               	movlw	150
  2931  0008BA  5C57               	subwf	_soupSteps,w,c
  2932  0008BC  B0D8               	btfsc	status,0,c
  2933  0008BE  D00A               	goto	l6017
  2934  0008C0                     l6015:
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;main.c: 403: S1mode = 2;
  2938  0008C0  0E00               	movlw	0
  2939  0008C2  6E5E               	movwf	_S1mode+1,c
  2940  0008C4  0E02               	movlw	2
  2941  0008C6                     L3:
  2942  0008C6  6E5D               	movwf	_S1mode,c
  2943                           
  2944                           ;main.c: 404: soupCnt = 0;
  2945  0008C8  0E00               	movlw	0
  2946  0008CA  0100               	movlb	0	; () banked
  2947  0008CC  6FB9               	movwf	(_soupCnt+1)& (0+255),b
  2948  0008CE  0E00               	movlw	0
  2949  0008D0  6FB8               	movwf	_soupCnt& (0+255),b
  2950                           
  2951                           ;main.c: 405: }
  2952  0008D2  D092               	goto	l6065
  2953  0008D4                     l6017:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;main.c: 406: else if(soupSteps < (80+70+58)){
  2957  0008D4  BE58               	btfsc	_soupSteps+1,7,c
  2958  0008D6  D006               	goto	l6019
  2959  0008D8  5058               	movf	_soupSteps+1,w,c
  2960  0008DA  E111               	bnz	l6021
  2961  0008DC  0ED0               	movlw	208
  2962  0008DE  5C57               	subwf	_soupSteps,w,c
  2963  0008E0  B0D8               	btfsc	status,0,c
  2964  0008E2  D00D               	goto	l6021
  2965  0008E4                     l6019:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 407: S1mode = 1;
  2969  0008E4  0E00               	movlw	0
  2970  0008E6  6E5E               	movwf	_S1mode+1,c
  2971  0008E8  0E01               	movlw	1
  2972  0008EA  6E5D               	movwf	_S1mode,c
  2973                           
  2974                           ;main.c: 408: soupAlign = 1;
  2975  0008EC  0E00               	movlw	0
  2976  0008EE  6E50               	movwf	_soupAlign+1,c
  2977  0008F0  0E01               	movlw	1
  2978  0008F2                     L4:
  2979  0008F2  6E4F               	movwf	_soupAlign,c
  2980                           
  2981                           ;main.c: 409: soupI = 1;
  2982  0008F4  0E00               	movlw	0
  2983  0008F6  6E4E               	movwf	_soupI+1,c
  2984  0008F8  0E01               	movlw	1
  2985  0008FA  6E4D               	movwf	_soupI,c
  2986                           
  2987                           ;main.c: 410: }
  2988  0008FC  D07D               	goto	l6065
  2989  0008FE                     l6021:
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;main.c: 411: else{
  2993                           ;main.c: 412: S1mode = 4;
  2994  0008FE  0E00               	movlw	0
  2995  000900  6E5E               	movwf	_S1mode+1,c
  2996  000902  0E04               	movlw	4
  2997  000904  6E5D               	movwf	_S1mode,c
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 413: printf(" %d", soupAlign);
  3001  000906  0EEA               	movlw	low (STR_45+12)
  3002  000908  6E2D               	movwf	printf@f,c
  3003  00090A  0EFE               	movlw	high (STR_45+12)
  3004  00090C  6E2E               	movwf	printf@f+1,c
  3005  00090E  C04F  F02F         	movff	_soupAlign,?_printf+2
  3006  000912  C050  F030         	movff	_soupAlign+1,?_printf+3
  3007  000916  EC7C  F007         	call	_printf	;wreg free
  3008                           
  3009                           ;main.c: 414: updateS1(soupAlign);
  3010  00091A  C04F  F021         	movff	_soupAlign,updateS1@mode
  3011  00091E  C050  F022         	movff	_soupAlign+1,updateS1@mode+1
  3012  000922  ECFE  F00A         	call	_updateS1	;wreg free
  3013                           
  3014                           ;main.c: 415: readADC(1);
  3015  000926  0E01               	movlw	1
  3016  000928  ECE0  F015         	call	_readADC
  3017                           
  3018                           ;main.c: 416: printf(" %x", ADRES);
  3019  00092C  0EFB               	movlw	low STR_23
  3020  00092E  6E2D               	movwf	printf@f,c
  3021  000930  0EFF               	movlw	high STR_23
  3022  000932  6E2E               	movwf	printf@f+1,c
  3023  000934  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  3024  000938  CFC4 F030          	movff	4036,?_printf+3	;volatile
  3025  00093C  EC7C  F007         	call	_printf	;wreg free
  3026                           
  3027                           ;main.c: 417: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  3028  000940  0100               	movlb	0	; () banked
  3029  000942  51AB               	movf	main@prevSoupIR& (0+255),w,b
  3030  000944  5CC3               	subwf	4035,w,c	;volatile
  3031  000946  0100               	movlb	0	; () banked
  3032  000948  51AC               	movf	(main@prevSoupIR+1)& (0+255),w,b
  3033  00094A  58C4               	subwfb	4036,w,c	;volatile
  3034  00094C  B0D8               	btfsc	status,0,c
  3035  00094E  D00B               	goto	l6037
  3036                           
  3037                           ; BSR set to: 0
  3038  000950  0EAB               	movlw	171
  3039  000952  5CC3               	subwf	4035,w,c	;volatile
  3040  000954  0E03               	movlw	3
  3041  000956  58C4               	subwfb	4036,w,c	;volatile
  3042  000958  A0D8               	btfss	status,0,c
  3043  00095A  D005               	goto	l6037
  3044                           
  3045                           ; BSR set to: 0
  3046  00095C  0E00               	movlw	0
  3047  00095E  0100               	movlb	0	; () banked
  3048  000960  6FBB               	movwf	(_labelState+1)& (0+255),b
  3049  000962  0E64               	movlw	100
  3050  000964  D79D               	goto	L12
  3051  000966                     l6037:
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;main.c: 418: prevSoupIR = ADRES;
  3055  000966  CFC3 F0AB          	movff	4035,main@prevSoupIR	;volatile
  3056  00096A  CFC4 F0AC          	movff	4036,main@prevSoupIR+1	;volatile
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;main.c: 419: }
  3060                           ;main.c: 420: }
  3061                           
  3062                           ; BSR set to: 0
  3063  00096E  D044               	goto	l6065
  3064  000970                     l6039:
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;main.c: 421: else{
  3068                           ;main.c: 422: if(labelState == 101){soupNL++;}
  3069  000970  0E65               	movlw	101
  3070  000972  0100               	movlb	0	; () banked
  3071  000974  19BA               	xorwf	_labelState& (0+255),w,b
  3072  000976  0100               	movlb	0	; () banked
  3073  000978  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  3074  00097A  A4D8               	btfss	status,2,c
  3075  00097C  D004               	goto	l6043
  3076                           
  3077                           ; BSR set to: 0
  3078  00097E  0100               	movlb	0	; () banked
  3079  000980  4B9F               	infsnz	main@soupNL& (0+255),f,b
  3080  000982  2BA0               	incf	(main@soupNL+1)& (0+255),f,b
  3081  000984  D00A               	goto	l6047
  3082  000986                     l6043:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 423: else if(labelState == 100){soupL++;}
  3086  000986  0E64               	movlw	100
  3087  000988  0100               	movlb	0	; () banked
  3088  00098A  19BA               	xorwf	_labelState& (0+255),w,b
  3089  00098C  0100               	movlb	0	; () banked
  3090  00098E  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  3091  000990  A4D8               	btfss	status,2,c
  3092  000992  D003               	goto	l6047
  3093                           
  3094                           ; BSR set to: 0
  3095  000994  0100               	movlb	0	; () banked
  3096  000996  4B9D               	infsnz	main@soupL& (0+255),f,b
  3097  000998  2B9E               	incf	(main@soupL+1)& (0+255),f,b
  3098  00099A                     l6047:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 424: soupSteps = 0;
  3102  00099A  0E00               	movlw	0
  3103  00099C  6E58               	movwf	_soupSteps+1,c
  3104  00099E  0E00               	movlw	0
  3105  0009A0  6E57               	movwf	_soupSteps,c
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;main.c: 425: prevSoupIR = 0;
  3109  0009A2  0E00               	movlw	0
  3110  0009A4  0100               	movlb	0	; () banked
  3111  0009A6  6FAC               	movwf	(main@prevSoupIR+1)& (0+255),b
  3112  0009A8  0E00               	movlw	0
  3113  0009AA  6FAB               	movwf	main@prevSoupIR& (0+255),b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 426: labelState = 0;
  3117  0009AC  0E00               	movlw	0
  3118  0009AE  0100               	movlb	0	; () banked
  3119  0009B0  6FBB               	movwf	(_labelState+1)& (0+255),b
  3120  0009B2  0E00               	movlw	0
  3121  0009B4  6FBA               	movwf	_labelState& (0+255),b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 427: if (soupCnt == 0) {soupSort = 0;}
  3125  0009B6  0100               	movlb	0	; () banked
  3126  0009B8  51B8               	movf	_soupCnt& (0+255),w,b
  3127  0009BA  0100               	movlb	0	; () banked
  3128  0009BC  11B9               	iorwf	(_soupCnt+1)& (0+255),w,b
  3129  0009BE  A4D8               	btfss	status,2,c
  3130  0009C0  D005               	goto	l6057
  3131                           
  3132                           ; BSR set to: 0
  3133  0009C2  0E00               	movlw	0
  3134  0009C4  0100               	movlb	0	; () banked
  3135  0009C6  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  3136  0009C8  0E00               	movlw	0
  3137  0009CA  6FA5               	movwf	main@soupSort& (0+255),b
  3138  0009CC                     l6057:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 429: if(s1 == 2 || s1 == 3){S1mode = 3;}
  3142  0009CC  0E02               	movlw	2
  3143  0009CE  0100               	movlb	0	; () banked
  3144  0009D0  19C0               	xorwf	_s1& (0+255),w,b
  3145  0009D2  0100               	movlb	0	; () banked
  3146  0009D4  11C1               	iorwf	(_s1+1)& (0+255),w,b
  3147  0009D6  B4D8               	btfsc	status,2,c
  3148  0009D8  D007               	goto	l6061
  3149                           
  3150                           ; BSR set to: 0
  3151  0009DA  0E03               	movlw	3
  3152  0009DC  0100               	movlb	0	; () banked
  3153  0009DE  19C0               	xorwf	_s1& (0+255),w,b
  3154  0009E0  0100               	movlb	0	; () banked
  3155  0009E2  11C1               	iorwf	(_s1+1)& (0+255),w,b
  3156  0009E4  A4D8               	btfss	status,2,c
  3157  0009E6  D004               	goto	l6063
  3158  0009E8                     l6061:
  3159                           
  3160                           ; BSR set to: 0
  3161  0009E8  0E00               	movlw	0
  3162  0009EA  6E5E               	movwf	_S1mode+1,c
  3163  0009EC  0E03               	movlw	3
  3164  0009EE  D003               	goto	L5
  3165  0009F0                     l6063:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;main.c: 430: else{S1mode = 5;}
  3169  0009F0  0E00               	movlw	0
  3170  0009F2  6E5E               	movwf	_S1mode+1,c
  3171  0009F4  0E05               	movlw	5
  3172  0009F6                     L5:
  3173  0009F6  6E5D               	movwf	_S1mode,c
  3174  0009F8                     l6065:
  3175                           
  3176                           ;main.c: 431: }
  3177                           ;main.c: 432: }
  3178                           ;main.c: 436: lcdInst(0b11000000);;
  3179  0009F8  0EC0               	movlw	192
  3180  0009FA  EC36  F016         	call	_lcdInst
  3181                           
  3182                           ;main.c: 438: readADC(0);
  3183  0009FE  0E00               	movlw	0
  3184  000A00  ECE0  F015         	call	_readADC
  3185                           
  3186                           ;main.c: 439: if(ADRES <= 0x130){
  3187  000A04  0E31               	movlw	49
  3188  000A06  5CC3               	subwf	4035,w,c	;volatile
  3189  000A08  0E01               	movlw	1
  3190  000A0A  58C4               	subwfb	4036,w,c	;volatile
  3191  000A0C  B0D8               	btfsc	status,0,c
  3192  000A0E  D026               	goto	l6081
  3193                           
  3194                           ;main.c: 440: prevSodaLoad = seconds;
  3195  000A10  C0BC  F09B         	movff	_seconds,main@prevSodaLoad
  3196  000A14  C0BD  F09C         	movff	_seconds+1,main@prevSodaLoad+1
  3197                           
  3198                           ;main.c: 441: sodaCnt = 1;
  3199  000A18  0E00               	movlw	0
  3200  000A1A  0100               	movlb	0	; () banked
  3201  000A1C  6FB7               	movwf	(_sodaCnt+1)& (0+255),b
  3202  000A1E  0E01               	movlw	1
  3203  000A20  6FB6               	movwf	_sodaCnt& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 442: if (!sodaSort){
  3207  000A22  0100               	movlb	0	; () banked
  3208  000A24  51A7               	movf	main@sodaSort& (0+255),w,b
  3209  000A26  0100               	movlb	0	; () banked
  3210  000A28  11A8               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3211  000A2A  A4D8               	btfss	status,2,c
  3212  000A2C  D017               	goto	l6081
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;main.c: 443: sodaSort = 1;
  3216  000A2E  0E00               	movlw	0
  3217  000A30  0100               	movlb	0	; () banked
  3218  000A32  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  3219  000A34  0E01               	movlw	1
  3220  000A36  6FA7               	movwf	main@sodaSort& (0+255),b
  3221                           
  3222                           ;main.c: 444: sodaSteps = 0;
  3223  000A38  0E00               	movlw	0
  3224  000A3A  6E56               	movwf	_sodaSteps+1,c
  3225  000A3C  0E00               	movlw	0
  3226  000A3E  6E55               	movwf	_sodaSteps,c
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;main.c: 445: _delay((unsigned long)((150)*(32000000/4000.0)));
  3230  000A40  0E07               	movlw	7
  3231  000A42  0100               	movlb	0	; () banked
  3232  000A44  6F92               	movwf	(??_main+1)& (0+255),b
  3233  000A46  0E17               	movlw	23
  3234  000A48  0100               	movlb	0	; () banked
  3235  000A4A  6F91               	movwf	??_main& (0+255),b
  3236  000A4C  0E6A               	movlw	106
  3237  000A4E                     u7967:
  3238  000A4E  2EE8               	decfsz	wreg,f,c
  3239  000A50  D7FE               	bra	u7967
  3240  000A52  2F91               	decfsz	??_main& (0+255),f,b
  3241  000A54  D7FC               	bra	u7967
  3242  000A56  2F92               	decfsz	(??_main+1)& (0+255),f,b
  3243  000A58  D7FA               	bra	u7967
  3244  000A5A  F000               	nop	
  3245  000A5C                     l6081:
  3246                           
  3247                           ;main.c: 446: }
  3248                           ;main.c: 447: }
  3249                           ;main.c: 449: printf("soda: %x %d", ADRES, sodaSteps);
  3250  000A5C  0EAF               	movlw	low STR_28
  3251  000A5E  6E2D               	movwf	printf@f,c
  3252  000A60  0EFF               	movlw	high STR_28
  3253  000A62  6E2E               	movwf	printf@f+1,c
  3254  000A64  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  3255  000A68  CFC4 F030          	movff	4036,?_printf+3	;volatile
  3256  000A6C  C055  F031         	movff	_sodaSteps,?_printf+4
  3257  000A70  C056  F032         	movff	_sodaSteps+1,?_printf+5
  3258  000A74  EC7C  F007         	call	_printf	;wreg free
  3259                           
  3260                           ;main.c: 451: if (sodaSort){
  3261  000A78  0100               	movlb	0	; () banked
  3262  000A7A  51A7               	movf	main@sodaSort& (0+255),w,b
  3263  000A7C  0100               	movlb	0	; () banked
  3264  000A7E  11A8               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3265  000A80  B4D8               	btfsc	status,2,c
  3266  000A82  D157               	goto	l6191
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 452: if(sodaSteps < 48){
  3270  000A84  BE56               	btfsc	_sodaSteps+1,7,c
  3271  000A86  D006               	goto	l6087
  3272  000A88  5056               	movf	_sodaSteps+1,w,c
  3273  000A8A  E108               	bnz	l6089
  3274  000A8C  0E30               	movlw	48
  3275  000A8E  5C55               	subwf	_sodaSteps,w,c
  3276  000A90  B0D8               	btfsc	status,0,c
  3277  000A92  D004               	goto	l6089
  3278  000A94                     l6087:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;main.c: 454: S2mode = 4;
  3282  000A94  0E00               	movlw	0
  3283  000A96  6E5C               	movwf	_S2mode+1,c
  3284  000A98  0E04               	movlw	4
  3285  000A9A  D04F               	goto	L8
  3286  000A9C                     l6089:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 456: else if (sodaSteps < (48+43)){
  3290  000A9C  BE56               	btfsc	_sodaSteps+1,7,c
  3291  000A9E  D006               	goto	l6091
  3292  000AA0  5056               	movf	_sodaSteps+1,w,c
  3293  000AA2  E108               	bnz	l6093
  3294  000AA4  0E5B               	movlw	91
  3295  000AA6  5C55               	subwf	_sodaSteps,w,c
  3296  000AA8  B0D8               	btfsc	status,0,c
  3297  000AAA  D004               	goto	l6093
  3298  000AAC                     l6091:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 457: S3mode = 1;
  3302  000AAC  0E00               	movlw	0
  3303  000AAE  6E5A               	movwf	_S3mode+1,c
  3304  000AB0  0E01               	movlw	1
  3305  000AB2  D13E               	goto	L11
  3306  000AB4                     l6093:
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;main.c: 460: else if (sodaSteps < (48+43+10)){
  3310  000AB4  BE56               	btfsc	_sodaSteps+1,7,c
  3311  000AB6  D006               	goto	l6095
  3312  000AB8  5056               	movf	_sodaSteps+1,w,c
  3313  000ABA  E10C               	bnz	l6097
  3314  000ABC  0E65               	movlw	101
  3315  000ABE  5C55               	subwf	_sodaSteps,w,c
  3316  000AC0  B0D8               	btfsc	status,0,c
  3317  000AC2  D008               	goto	l6097
  3318  000AC4                     l6095:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 461: S3mode = 4;
  3322  000AC4  0E00               	movlw	0
  3323  000AC6  6E5A               	movwf	_S3mode+1,c
  3324  000AC8  0E04               	movlw	4
  3325  000ACA  6E59               	movwf	_S3mode,c
  3326                           
  3327                           ;main.c: 462: S2mode = 1;
  3328  000ACC  0E00               	movlw	0
  3329  000ACE  6E5C               	movwf	_S2mode+1,c
  3330  000AD0  0E01               	movlw	1
  3331  000AD2  D033               	goto	L8
  3332  000AD4                     l6097:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;main.c: 464: else if (sodaSteps < (48+43+10+15)){
  3336  000AD4  BE56               	btfsc	_sodaSteps+1,7,c
  3337  000AD6  D006               	goto	l6099
  3338  000AD8  5056               	movf	_sodaSteps+1,w,c
  3339  000ADA  E120               	bnz	l6109
  3340  000ADC  0E74               	movlw	116
  3341  000ADE  5C55               	subwf	_sodaSteps,w,c
  3342  000AE0  B0D8               	btfsc	status,0,c
  3343  000AE2  D01C               	goto	l6109
  3344  000AE4                     l6099:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 465: S3mode = 4;
  3348  000AE4  0E00               	movlw	0
  3349  000AE6  6E5A               	movwf	_S3mode+1,c
  3350  000AE8  0E04               	movlw	4
  3351  000AEA  6E59               	movwf	_S3mode,c
  3352                           
  3353                           ;main.c: 466: S2mode = 0;
  3354  000AEC  0E00               	movlw	0
  3355  000AEE  6E5C               	movwf	_S2mode+1,c
  3356  000AF0  0E00               	movlw	0
  3357  000AF2  6E5B               	movwf	_S2mode,c
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 467: readADC(3);
  3361  000AF4  0E03               	movlw	3
  3362  000AF6  ECE0  F015         	call	_readADC
  3363                           
  3364                           ;main.c: 468: if(ADRESH<=1){tabState = 1;}
  3365  000AFA  0E02               	movlw	2
  3366  000AFC  60C4               	cpfslt	4036,c	;volatile
  3367  000AFE  D004               	goto	l6107
  3368  000B00  0E00               	movlw	0
  3369  000B02  6E54               	movwf	_tabState+1,c
  3370  000B04  0E01               	movlw	1
  3371  000B06  6E53               	movwf	_tabState,c
  3372  000B08                     l6107:
  3373                           
  3374                           ;main.c: 469: printf(" %x",ADRESH);
  3375  000B08  0EFB               	movlw	low STR_23
  3376  000B0A  6E2D               	movwf	printf@f,c
  3377  000B0C  0EFF               	movlw	high STR_23
  3378  000B0E  6E2E               	movwf	printf@f+1,c
  3379  000B10  CFC4 F02F          	movff	4036,?_printf+2	;volatile
  3380  000B14  6A30               	clrf	?_printf+3,c
  3381  000B16  EC7C  F007         	call	_printf	;wreg free
  3382                           
  3383                           ;main.c: 470: }
  3384  000B1A  D10B               	goto	l6191
  3385  000B1C                     l6109:
  3386                           
  3387                           ;main.c: 471: else if (sodaSteps < (48+43+10+15+14)){
  3388  000B1C  BE56               	btfsc	_sodaSteps+1,7,c
  3389  000B1E  D006               	goto	l6111
  3390  000B20  5056               	movf	_sodaSteps+1,w,c
  3391  000B22  E10D               	bnz	l6113
  3392  000B24  0E82               	movlw	130
  3393  000B26  5C55               	subwf	_sodaSteps,w,c
  3394  000B28  B0D8               	btfsc	status,0,c
  3395  000B2A  D009               	goto	l6113
  3396  000B2C                     l6111:
  3397                           
  3398                           ;main.c: 472: S3mode = 4;
  3399  000B2C  0E00               	movlw	0
  3400  000B2E  6E5A               	movwf	_S3mode+1,c
  3401  000B30  0E04               	movlw	4
  3402  000B32  6E59               	movwf	_S3mode,c
  3403                           
  3404                           ;main.c: 473: S2mode = 2;
  3405  000B34  0E00               	movlw	0
  3406  000B36  6E5C               	movwf	_S2mode+1,c
  3407  000B38  0E02               	movlw	2
  3408  000B3A                     L8:
  3409  000B3A  6E5B               	movwf	_S2mode,c
  3410                           
  3411                           ;main.c: 474: }
  3412  000B3C  D0FA               	goto	l6191
  3413  000B3E                     l6113:
  3414                           
  3415                           ;main.c: 475: else if (tabState == 1){
  3416  000B3E  0453               	decf	_tabState,w,c
  3417  000B40  1054               	iorwf	_tabState+1,w,c
  3418  000B42  A4D8               	btfss	status,2,c
  3419  000B44  D052               	goto	l6139
  3420                           
  3421                           ;main.c: 476: if(sodaSteps < (48+43+10+15+14+30)){
  3422  000B46  BE56               	btfsc	_sodaSteps+1,7,c
  3423  000B48  D006               	goto	l6117
  3424  000B4A  5056               	movf	_sodaSteps+1,w,c
  3425  000B4C  E108               	bnz	l6119
  3426  000B4E  0EA0               	movlw	160
  3427  000B50  5C55               	subwf	_sodaSteps,w,c
  3428  000B52  B0D8               	btfsc	status,0,c
  3429  000B54  D004               	goto	l6119
  3430  000B56                     l6117:
  3431                           
  3432                           ;main.c: 477: S3mode = 1;
  3433  000B56  0E00               	movlw	0
  3434  000B58  6E5A               	movwf	_S3mode+1,c
  3435  000B5A  0E01               	movlw	1
  3436  000B5C  D055               	goto	L9
  3437  000B5E                     l6119:
  3438                           
  3439                           ;main.c: 481: else if(sodaSteps < (48+43+10+15+14+30+50)){
  3440  000B5E  BE56               	btfsc	_sodaSteps+1,7,c
  3441  000B60  D006               	goto	l6121
  3442  000B62  5056               	movf	_sodaSteps+1,w,c
  3443  000B64  E110               	bnz	l6123
  3444  000B66  0ED2               	movlw	210
  3445  000B68  5C55               	subwf	_sodaSteps,w,c
  3446  000B6A  B0D8               	btfsc	status,0,c
  3447  000B6C  D00C               	goto	l6123
  3448  000B6E                     l6121:
  3449                           
  3450                           ;main.c: 482: S3mode = 2;
  3451  000B6E  0E00               	movlw	0
  3452  000B70  6E5A               	movwf	_S3mode+1,c
  3453  000B72  0E02               	movlw	2
  3454  000B74  6E59               	movwf	_S3mode,c
  3455                           
  3456                           ;main.c: 483: S2mode = 4;
  3457  000B76  0E00               	movlw	0
  3458  000B78  6E5C               	movwf	_S2mode+1,c
  3459  000B7A  0E04               	movlw	4
  3460  000B7C  6E5B               	movwf	_S2mode,c
  3461                           
  3462                           ;main.c: 484: sodaAlign = 2;
  3463  000B7E  0E00               	movlw	0
  3464  000B80  6E52               	movwf	_sodaAlign+1,c
  3465  000B82  0E02               	movlw	2
  3466  000B84  D05F               	goto	L10
  3467  000B86                     l6123:
  3468                           
  3469                           ;main.c: 487: else {
  3470                           ;main.c: 488: S2mode = 4;
  3471  000B86  0E00               	movlw	0
  3472  000B88  6E5C               	movwf	_S2mode+1,c
  3473  000B8A  0E04               	movlw	4
  3474  000B8C  6E5B               	movwf	_S2mode,c
  3475                           
  3476                           ;main.c: 489: S3mode = 4;
  3477  000B8E  0E00               	movlw	0
  3478  000B90  6E5A               	movwf	_S3mode+1,c
  3479  000B92  0E04               	movlw	4
  3480  000B94  6E59               	movwf	_S3mode,c
  3481                           
  3482                           ;main.c: 490: updateS3(sodaAlign);
  3483  000B96  C051  F021         	movff	_sodaAlign,updateS3@mode
  3484  000B9A  C052  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3485  000B9E  ECD3  F00E         	call	_updateS3	;wreg free
  3486                           
  3487                           ;main.c: 491: readADC(5);
  3488  000BA2  0E05               	movlw	5
  3489  000BA4  ECE0  F015         	call	_readADC
  3490                           
  3491                           ;main.c: 492: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3492  000BA8  0100               	movlb	0	; () banked
  3493  000BAA  51A9               	movf	main@prevSodaIR& (0+255),w,b
  3494  000BAC  5CC3               	subwf	4035,w,c	;volatile
  3495  000BAE  0100               	movlb	0	; () banked
  3496  000BB0  51AA               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3497  000BB2  58C4               	subwfb	4036,w,c	;volatile
  3498  000BB4  B0D8               	btfsc	status,0,c
  3499  000BB6  D00A               	goto	l6135
  3500                           
  3501                           ; BSR set to: 0
  3502  000BB8  0EAB               	movlw	171
  3503  000BBA  5CC3               	subwf	4035,w,c	;volatile
  3504  000BBC  0E03               	movlw	3
  3505  000BBE  58C4               	subwfb	4036,w,c	;volatile
  3506  000BC0  A0D8               	btfss	status,0,c
  3507  000BC2  D004               	goto	l6135
  3508                           
  3509                           ; BSR set to: 0
  3510  000BC4  0E00               	movlw	0
  3511  000BC6  6E54               	movwf	_tabState+1,c
  3512  000BC8  0E65               	movlw	101
  3513  000BCA  6E53               	movwf	_tabState,c
  3514  000BCC                     l6135:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;main.c: 493: prevSodaIR = ADRES;
  3518  000BCC  CFC3 F0A9          	movff	4035,main@prevSodaIR	;volatile
  3519  000BD0  CFC4 F0AA          	movff	4036,main@prevSodaIR+1	;volatile
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;main.c: 494: printf(" %x", ADRES);
  3523  000BD4  0EFB               	movlw	low STR_23
  3524  000BD6  6E2D               	movwf	printf@f,c
  3525  000BD8  0EFF               	movlw	high STR_23
  3526  000BDA  6E2E               	movwf	printf@f+1,c
  3527  000BDC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  3528  000BE0  CFC4 F030          	movff	4036,?_printf+3	;volatile
  3529  000BE4  EC7C  F007         	call	_printf	;wreg free
  3530                           
  3531                           ;main.c: 495: }
  3532                           ;main.c: 496: }
  3533  000BE8  D0A4               	goto	l6191
  3534  000BEA                     l6139:
  3535                           
  3536                           ;main.c: 497: else if(tabState == 0){
  3537  000BEA  5053               	movf	_tabState,w,c
  3538  000BEC  1054               	iorwf	_tabState+1,w,c
  3539  000BEE  A4D8               	btfss	status,2,c
  3540  000BF0  D061               	goto	l6165
  3541                           
  3542                           ;main.c: 498: if(sodaSteps < (48+43+10+15+14+(43+75))){
  3543  000BF2  BE56               	btfsc	_sodaSteps+1,7,c
  3544  000BF4  D006               	goto	l6143
  3545  000BF6  5056               	movf	_sodaSteps+1,w,c
  3546  000BF8  E112               	bnz	l6145
  3547  000BFA  0EF8               	movlw	248
  3548  000BFC  5C55               	subwf	_sodaSteps,w,c
  3549  000BFE  B0D8               	btfsc	status,0,c
  3550  000C00  D00E               	goto	l6145
  3551  000C02                     l6143:
  3552                           
  3553                           ;main.c: 499: S3mode = 2;
  3554  000C02  0E00               	movlw	0
  3555  000C04  6E5A               	movwf	_S3mode+1,c
  3556  000C06  0E02               	movlw	2
  3557  000C08                     L9:
  3558  000C08  6E59               	movwf	_S3mode,c
  3559                           
  3560                           ;main.c: 500: S2mode = 4;
  3561  000C0A  0E00               	movlw	0
  3562  000C0C  6E5C               	movwf	_S2mode+1,c
  3563  000C0E  0E04               	movlw	4
  3564  000C10  6E5B               	movwf	_S2mode,c
  3565                           
  3566                           ;main.c: 501: sodaCnt = 0;
  3567  000C12  0E00               	movlw	0
  3568  000C14  0100               	movlb	0	; () banked
  3569  000C16  6FB7               	movwf	(_sodaCnt+1)& (0+255),b
  3570  000C18  0E00               	movlw	0
  3571  000C1A  6FB6               	movwf	_sodaCnt& (0+255),b
  3572                           
  3573                           ;main.c: 502: }
  3574  000C1C  D08A               	goto	l6191
  3575  000C1E                     l6145:
  3576                           
  3577                           ;main.c: 503: else if(sodaSteps < (48+43+10+15+14+(43+75)+65)){
  3578  000C1E  BE56               	btfsc	_sodaSteps+1,7,c
  3579  000C20  D006               	goto	l6147
  3580  000C22  0E39               	movlw	57
  3581  000C24  5C55               	subwf	_sodaSteps,w,c
  3582  000C26  0E01               	movlw	1
  3583  000C28  5856               	subwfb	_sodaSteps+1,w,c
  3584  000C2A  B0D8               	btfsc	status,0,c
  3585  000C2C  D011               	goto	l6149
  3586  000C2E                     l6147:
  3587                           
  3588                           ;main.c: 504: S3mode = 1;
  3589  000C2E  0E00               	movlw	0
  3590  000C30  6E5A               	movwf	_S3mode+1,c
  3591  000C32  0E01               	movlw	1
  3592  000C34  6E59               	movwf	_S3mode,c
  3593                           
  3594                           ;main.c: 505: S2mode = 4;
  3595  000C36  0E00               	movlw	0
  3596  000C38  6E5C               	movwf	_S2mode+1,c
  3597  000C3A  0E04               	movlw	4
  3598  000C3C  6E5B               	movwf	_S2mode,c
  3599                           
  3600                           ;main.c: 506: sodaAlign = 1;
  3601  000C3E  0E00               	movlw	0
  3602  000C40  6E52               	movwf	_sodaAlign+1,c
  3603  000C42  0E01               	movlw	1
  3604  000C44                     L10:
  3605  000C44  6E51               	movwf	_sodaAlign,c
  3606                           
  3607                           ;main.c: 507: sodaI = 1;
  3608  000C46  0E00               	movlw	0
  3609  000C48  6E4C               	movwf	_sodaI+1,c
  3610  000C4A  0E01               	movlw	1
  3611  000C4C  6E4B               	movwf	_sodaI,c
  3612                           
  3613                           ;main.c: 508: }
  3614  000C4E  D071               	goto	l6191
  3615  000C50                     l6149:
  3616                           
  3617                           ;main.c: 509: else {
  3618                           ;main.c: 510: S3mode = 4;
  3619  000C50  0E00               	movlw	0
  3620  000C52  6E5A               	movwf	_S3mode+1,c
  3621  000C54  0E04               	movlw	4
  3622  000C56  6E59               	movwf	_S3mode,c
  3623                           
  3624                           ;main.c: 511: S2mode = 4;
  3625  000C58  0E00               	movlw	0
  3626  000C5A  6E5C               	movwf	_S2mode+1,c
  3627  000C5C  0E04               	movlw	4
  3628  000C5E  6E5B               	movwf	_S2mode,c
  3629                           
  3630                           ;main.c: 512: updateS3(sodaAlign);
  3631  000C60  C051  F021         	movff	_sodaAlign,updateS3@mode
  3632  000C64  C052  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3633  000C68  ECD3  F00E         	call	_updateS3	;wreg free
  3634                           
  3635                           ;main.c: 513: readADC(5);
  3636  000C6C  0E05               	movlw	5
  3637  000C6E  ECE0  F015         	call	_readADC
  3638                           
  3639                           ;main.c: 514: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  3640  000C72  0100               	movlb	0	; () banked
  3641  000C74  51A9               	movf	main@prevSodaIR& (0+255),w,b
  3642  000C76  5CC3               	subwf	4035,w,c	;volatile
  3643  000C78  0100               	movlb	0	; () banked
  3644  000C7A  51AA               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3645  000C7C  58C4               	subwfb	4036,w,c	;volatile
  3646  000C7E  B0D8               	btfsc	status,0,c
  3647  000C80  D00A               	goto	l6161
  3648                           
  3649                           ; BSR set to: 0
  3650  000C82  0EAB               	movlw	171
  3651  000C84  5CC3               	subwf	4035,w,c	;volatile
  3652  000C86  0E03               	movlw	3
  3653  000C88  58C4               	subwfb	4036,w,c	;volatile
  3654  000C8A  A0D8               	btfss	status,0,c
  3655  000C8C  D004               	goto	l6161
  3656                           
  3657                           ; BSR set to: 0
  3658  000C8E  0E00               	movlw	0
  3659  000C90  6E54               	movwf	_tabState+1,c
  3660  000C92  0E64               	movlw	100
  3661  000C94  6E53               	movwf	_tabState,c
  3662  000C96                     l6161:
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 515: prevSodaIR = ADRES;
  3666  000C96  CFC3 F0A9          	movff	4035,main@prevSodaIR	;volatile
  3667  000C9A  CFC4 F0AA          	movff	4036,main@prevSodaIR+1	;volatile
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;main.c: 516: printf(" %x", ADRES);
  3671  000C9E  0EFB               	movlw	low STR_23
  3672  000CA0  6E2D               	movwf	printf@f,c
  3673  000CA2  0EFF               	movlw	high STR_23
  3674  000CA4  6E2E               	movwf	printf@f+1,c
  3675  000CA6  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  3676  000CAA  CFC4 F030          	movff	4036,?_printf+3	;volatile
  3677  000CAE  EC7C  F007         	call	_printf	;wreg free
  3678                           
  3679                           ;main.c: 517: }
  3680                           ;main.c: 518: }
  3681  000CB2  D03F               	goto	l6191
  3682  000CB4                     l6165:
  3683                           
  3684                           ;main.c: 519: else{
  3685                           ;main.c: 520: if(tabState==101){sodaT++;}
  3686  000CB4  0E65               	movlw	101
  3687  000CB6  1853               	xorwf	_tabState,w,c
  3688  000CB8  1054               	iorwf	_tabState+1,w,c
  3689  000CBA  A4D8               	btfss	status,2,c
  3690  000CBC  D004               	goto	l6169
  3691  000CBE  0100               	movlb	0	; () banked
  3692  000CC0  4BA1               	infsnz	main@sodaT& (0+255),f,b
  3693  000CC2  2BA2               	incf	(main@sodaT+1)& (0+255),f,b
  3694  000CC4  D008               	goto	l6173
  3695  000CC6                     l6169:
  3696                           
  3697                           ;main.c: 521: else if(tabState==100){sodaNT++;}
  3698  000CC6  0E64               	movlw	100
  3699  000CC8  1853               	xorwf	_tabState,w,c
  3700  000CCA  1054               	iorwf	_tabState+1,w,c
  3701  000CCC  A4D8               	btfss	status,2,c
  3702  000CCE  D003               	goto	l6173
  3703  000CD0  0100               	movlb	0	; () banked
  3704  000CD2  4BA3               	infsnz	main@sodaNT& (0+255),f,b
  3705  000CD4  2BA4               	incf	(main@sodaNT+1)& (0+255),f,b
  3706  000CD6                     l6173:
  3707                           
  3708                           ;main.c: 522: sodaSteps = 0;
  3709  000CD6  0E00               	movlw	0
  3710  000CD8  6E56               	movwf	_sodaSteps+1,c
  3711  000CDA  0E00               	movlw	0
  3712  000CDC  6E55               	movwf	_sodaSteps,c
  3713                           
  3714                           ;main.c: 523: tabState = 0;
  3715  000CDE  0E00               	movlw	0
  3716  000CE0  6E54               	movwf	_tabState+1,c
  3717  000CE2  0E00               	movlw	0
  3718  000CE4  6E53               	movwf	_tabState,c
  3719                           
  3720                           ;main.c: 524: prevSodaIR = 0;
  3721  000CE6  0E00               	movlw	0
  3722  000CE8  0100               	movlb	0	; () banked
  3723  000CEA  6FAA               	movwf	(main@prevSodaIR+1)& (0+255),b
  3724  000CEC  0E00               	movlw	0
  3725  000CEE  6FA9               	movwf	main@prevSodaIR& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;main.c: 525: if (sodaCnt == 0) {sodaSort = 0;}
  3729  000CF0  0100               	movlb	0	; () banked
  3730  000CF2  51B6               	movf	_sodaCnt& (0+255),w,b
  3731  000CF4  0100               	movlb	0	; () banked
  3732  000CF6  11B7               	iorwf	(_sodaCnt+1)& (0+255),w,b
  3733  000CF8  A4D8               	btfss	status,2,c
  3734  000CFA  D005               	goto	l6183
  3735                           
  3736                           ; BSR set to: 0
  3737  000CFC  0E00               	movlw	0
  3738  000CFE  0100               	movlb	0	; () banked
  3739  000D00  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  3740  000D02  0E00               	movlw	0
  3741  000D04  6FA7               	movwf	main@sodaSort& (0+255),b
  3742  000D06                     l6183:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;main.c: 527: if(s3 == 2 || s3 == 3){S3mode = 3;}
  3746  000D06  0E02               	movlw	2
  3747  000D08  0100               	movlb	0	; () banked
  3748  000D0A  19BE               	xorwf	_s3& (0+255),w,b
  3749  000D0C  0100               	movlb	0	; () banked
  3750  000D0E  11BF               	iorwf	(_s3+1)& (0+255),w,b
  3751  000D10  B4D8               	btfsc	status,2,c
  3752  000D12  D007               	goto	l6187
  3753                           
  3754                           ; BSR set to: 0
  3755  000D14  0E03               	movlw	3
  3756  000D16  0100               	movlb	0	; () banked
  3757  000D18  19BE               	xorwf	_s3& (0+255),w,b
  3758  000D1A  0100               	movlb	0	; () banked
  3759  000D1C  11BF               	iorwf	(_s3+1)& (0+255),w,b
  3760  000D1E  A4D8               	btfss	status,2,c
  3761  000D20  D004               	goto	l6189
  3762  000D22                     l6187:
  3763                           
  3764                           ; BSR set to: 0
  3765  000D22  0E00               	movlw	0
  3766  000D24  6E5A               	movwf	_S3mode+1,c
  3767  000D26  0E03               	movlw	3
  3768  000D28  D003               	goto	L11
  3769  000D2A                     l6189:
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;main.c: 528: else{S3mode = 5;}
  3773  000D2A  0E00               	movlw	0
  3774  000D2C  6E5A               	movwf	_S3mode+1,c
  3775  000D2E  0E05               	movlw	5
  3776  000D30                     L11:
  3777  000D30  6E59               	movwf	_S3mode,c
  3778  000D32                     l6191:
  3779                           
  3780                           ;main.c: 529: }
  3781                           ;main.c: 530: }
  3782                           ;main.c: 533: if(seconds%6==4){PWM2(800,2);}
  3783  000D32  C0BC  F021         	movff	_seconds,___awmod@dividend
  3784  000D36  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3785  000D3A  0E00               	movlw	0
  3786  000D3C  6E24               	movwf	___awmod@divisor+1,c
  3787  000D3E  0E06               	movlw	6
  3788  000D40  6E23               	movwf	___awmod@divisor,c
  3789  000D42  ECDD  F013         	call	___awmod	;wreg free
  3790  000D46  0E04               	movlw	4
  3791  000D48  1821               	xorwf	?___awmod,w,c
  3792  000D4A  1022               	iorwf	?___awmod+1,w,c
  3793  000D4C  A4D8               	btfss	status,2,c
  3794  000D4E  D00B               	goto	l6195
  3795  000D50  0E03               	movlw	3
  3796  000D52  6E22               	movwf	PWM2@duty+1,c
  3797  000D54  0E20               	movlw	32
  3798  000D56  6E21               	movwf	PWM2@duty,c
  3799  000D58  0E00               	movlw	0
  3800  000D5A  6E24               	movwf	PWM2@dir+1,c
  3801  000D5C  0E02               	movlw	2
  3802  000D5E  6E23               	movwf	PWM2@dir,c
  3803  000D60  ECA1  F013         	call	_PWM2	;wreg free
  3804  000D64  D018               	goto	l316
  3805  000D66                     l6195:
  3806                           
  3807                           ;main.c: 534: else if(seconds%6 == 0){PWM2(800, 1);}
  3808  000D66  C0BC  F021         	movff	_seconds,___awmod@dividend
  3809  000D6A  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3810  000D6E  0E00               	movlw	0
  3811  000D70  6E24               	movwf	___awmod@divisor+1,c
  3812  000D72  0E06               	movlw	6
  3813  000D74  6E23               	movwf	___awmod@divisor,c
  3814  000D76  ECDD  F013         	call	___awmod	;wreg free
  3815  000D7A  5021               	movf	?___awmod,w,c
  3816  000D7C  1022               	iorwf	?___awmod+1,w,c
  3817  000D7E  A4D8               	btfss	status,2,c
  3818  000D80  D00A               	goto	l316
  3819  000D82  0E03               	movlw	3
  3820  000D84  6E22               	movwf	PWM2@duty+1,c
  3821  000D86  0E20               	movlw	32
  3822  000D88  6E21               	movwf	PWM2@duty,c
  3823  000D8A  0E00               	movlw	0
  3824  000D8C  6E24               	movwf	PWM2@dir+1,c
  3825  000D8E  0E01               	movlw	1
  3826  000D90  6E23               	movwf	PWM2@dir,c
  3827  000D92  ECA1  F013         	call	_PWM2	;wreg free
  3828  000D96                     l316:
  3829                           
  3830                           ;main.c: 536: keyinterrupt();
  3831  000D96  EC01  F016         	call	_keyinterrupt	;wreg free
  3832                           
  3833                           ;main.c: 537: }while(keypress==(0) &&
  3834                           ;main.c: 538: ((seconds -prevSoupLoad) < 10 || (seconds-prevSodaLoad) < 10)
  3835                           ;main.c: 539: && seconds < 180);
  3836  000D9A  0100               	movlb	0	; () banked
  3837  000D9C  51C2               	movf	_keypress& (0+255),w,b	;volatile
  3838  000D9E  A4D8               	btfss	status,2,c
  3839  000DA0  D043               	goto	l6207
  3840                           
  3841                           ; BSR set to: 0
  3842  000DA2  C099  F091         	movff	main@prevSoupLoad,??_main
  3843  000DA6  C09A  F092         	movff	main@prevSoupLoad+1,??_main+1
  3844  000DAA  0100               	movlb	0	; () banked
  3845  000DAC  1F91               	comf	??_main& (0+255),f,b
  3846  000DAE  1F92               	comf	(??_main+1)& (0+255),f,b
  3847  000DB0  4B91               	infsnz	??_main& (0+255),f,b
  3848  000DB2  2B92               	incf	(??_main+1)& (0+255),f,b
  3849  000DB4  0100               	movlb	0	; () banked
  3850  000DB6  51BC               	movf	_seconds& (0+255),w,b
  3851  000DB8  0100               	movlb	0	; () banked
  3852  000DBA  2791               	addwf	??_main& (0+255),f,b
  3853  000DBC  0100               	movlb	0	; () banked
  3854  000DBE  51BD               	movf	(_seconds+1)& (0+255),w,b
  3855  000DC0  0100               	movlb	0	; () banked
  3856  000DC2  2392               	addwfc	(??_main+1)& (0+255),f,b
  3857  000DC4  0100               	movlb	0	; () banked
  3858  000DC6  BF92               	btfsc	(??_main+1)& (0+255),7,b
  3859  000DC8  D024               	goto	l6205
  3860  000DCA  0100               	movlb	0	; () banked
  3861  000DCC  5192               	movf	(??_main+1)& (0+255),w,b
  3862  000DCE  E105               	bnz	u7750
  3863  000DD0  0E0A               	movlw	10
  3864  000DD2  0100               	movlb	0	; () banked
  3865  000DD4  5D91               	subwf	??_main& (0+255),w,b
  3866  000DD6  A0D8               	btfss	status,0,c
  3867  000DD8  D01C               	goto	l6205
  3868  000DDA                     u7750:
  3869                           
  3870                           ; BSR set to: 0
  3871  000DDA  C09B  F091         	movff	main@prevSodaLoad,??_main
  3872  000DDE  C09C  F092         	movff	main@prevSodaLoad+1,??_main+1
  3873  000DE2  0100               	movlb	0	; () banked
  3874  000DE4  1F91               	comf	??_main& (0+255),f,b
  3875  000DE6  1F92               	comf	(??_main+1)& (0+255),f,b
  3876  000DE8  4B91               	infsnz	??_main& (0+255),f,b
  3877  000DEA  2B92               	incf	(??_main+1)& (0+255),f,b
  3878  000DEC  0100               	movlb	0	; () banked
  3879  000DEE  51BC               	movf	_seconds& (0+255),w,b
  3880  000DF0  0100               	movlb	0	; () banked
  3881  000DF2  2791               	addwf	??_main& (0+255),f,b
  3882  000DF4  0100               	movlb	0	; () banked
  3883  000DF6  51BD               	movf	(_seconds+1)& (0+255),w,b
  3884  000DF8  0100               	movlb	0	; () banked
  3885  000DFA  2392               	addwfc	(??_main+1)& (0+255),f,b
  3886  000DFC  0100               	movlb	0	; () banked
  3887  000DFE  BF92               	btfsc	(??_main+1)& (0+255),7,b
  3888  000E00  D008               	goto	l6205
  3889  000E02  0100               	movlb	0	; () banked
  3890  000E04  5192               	movf	(??_main+1)& (0+255),w,b
  3891  000E06  E110               	bnz	l6207
  3892  000E08  0E0A               	movlw	10
  3893  000E0A  0100               	movlb	0	; () banked
  3894  000E0C  5D91               	subwf	??_main& (0+255),w,b
  3895  000E0E  B0D8               	btfsc	status,0,c
  3896  000E10  D00B               	goto	l6207
  3897  000E12                     l6205:
  3898                           
  3899                           ; BSR set to: 0
  3900  000E12  0100               	movlb	0	; () banked
  3901  000E14  BFBD               	btfsc	(_seconds+1)& (0+255),7,b
  3902  000E16  D481               	goto	l5951
  3903  000E18  0100               	movlb	0	; () banked
  3904  000E1A  51BD               	movf	(_seconds+1)& (0+255),w,b
  3905  000E1C  E105               	bnz	l6207
  3906  000E1E  0EB4               	movlw	180
  3907  000E20  0100               	movlb	0	; () banked
  3908  000E22  5DBC               	subwf	_seconds& (0+255),w,b
  3909  000E24  A0D8               	btfss	status,0,c
  3910  000E26  D479               	goto	l5951
  3911  000E28                     l6207:
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;main.c: 541: standby = 1;
  3915  000E28  0E00               	movlw	0
  3916  000E2A  0100               	movlb	0	; () banked
  3917  000E2C  6FAE               	movwf	(main@standby+1)& (0+255),b
  3918  000E2E  0E01               	movlw	1
  3919  000E30  6FAD               	movwf	main@standby& (0+255),b
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;main.c: 542: PWM2off();
  3923  000E32  EC41  F016         	call	_PWM2off	;wreg free
  3924                           
  3925                           ;main.c: 543: PWM1off();
  3926  000E36  EC46  F016         	call	_PWM1off	;wreg free
  3927                           
  3928                           ;main.c: 544: S1mode = 0;
  3929  000E3A  0E00               	movlw	0
  3930  000E3C  6E5E               	movwf	_S1mode+1,c
  3931  000E3E  0E00               	movlw	0
  3932  000E40  6E5D               	movwf	_S1mode,c
  3933                           
  3934                           ;main.c: 545: S2mode = 0;
  3935  000E42  0E00               	movlw	0
  3936  000E44  6E5C               	movwf	_S2mode+1,c
  3937  000E46  0E00               	movlw	0
  3938  000E48  6E5B               	movwf	_S2mode,c
  3939                           
  3940                           ;main.c: 546: S3mode = 0;
  3941  000E4A  0E00               	movlw	0
  3942  000E4C  6E5A               	movwf	_S3mode+1,c
  3943  000E4E  0E00               	movlw	0
  3944  000E50  6E59               	movwf	_S3mode,c
  3945                           
  3946                           ;main.c: 549: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  3947  000E52  C0BC  F025         	movff	_seconds,addRun@dur
  3948  000E56  C0BD  F026         	movff	_seconds+1,addRun@dur+1
  3949  000E5A  C0B5  F027         	movff	_time+6,addRun@year
  3950  000E5E  6A28               	clrf	addRun@year+1,c
  3951  000E60  C0B4  F029         	movff	_time+5,addRun@month
  3952  000E64  6A2A               	clrf	addRun@month+1,c
  3953  000E66  C0B3  F02B         	movff	_time+4,addRun@date
  3954  000E6A  6A2C               	clrf	addRun@date+1,c
  3955  000E6C  C0B1  F02D         	movff	_time+2,addRun@hours
  3956  000E70  6A2E               	clrf	addRun@hours+1,c
  3957  000E72  C0B0  F02F         	movff	_time+1,addRun@mins
  3958  000E76  6A30               	clrf	addRun@mins+1,c
  3959  000E78  C0AF  F031         	movff	_time,addRun@secs
  3960  000E7C  6A32               	clrf	addRun@secs+1,c
  3961  000E7E  C0A1  F033         	movff	main@sodaT,addRun@sodaT
  3962  000E82  C0A2  F034         	movff	main@sodaT+1,addRun@sodaT+1
  3963  000E86  C0A3  F035         	movff	main@sodaNT,addRun@sodaNT
  3964  000E8A  C0A4  F036         	movff	main@sodaNT+1,addRun@sodaNT+1
  3965  000E8E  C09D  F037         	movff	main@soupL,addRun@soupL
  3966  000E92  C09E  F038         	movff	main@soupL+1,addRun@soupL+1
  3967  000E96  C09F  F039         	movff	main@soupNL,addRun@soupNL
  3968  000E9A  C0A0  F03A         	movff	main@soupNL+1,addRun@soupNL+1
  3969  000E9E  EC8B  F011         	call	_addRun	;wreg free
  3970                           
  3971                           ;main.c: 551: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3972  000EA2  0E01               	movlw	1
  3973  000EA4  EC36  F016         	call	_lcdInst
  3974  000EA8  0E34               	movlw	52
  3975  000EAA  0100               	movlb	0	; () banked
  3976  000EAC  6F91               	movwf	??_main& (0+255),b
  3977  000EAE  0EF1               	movlw	241
  3978  000EB0                     u7977:
  3979  000EB0  2EE8               	decfsz	wreg,f,c
  3980  000EB2  D7FE               	bra	u7977
  3981  000EB4  2F91               	decfsz	??_main& (0+255),f,b
  3982  000EB6  D7FC               	bra	u7977
  3983  000EB8  D000               	nop2	
  3984                           
  3985                           ;main.c: 552: printf("Sort done! A:No");
  3986  000EBA  0E2E               	movlw	low STR_32
  3987  000EBC  6E2D               	movwf	printf@f,c
  3988  000EBE  0EFF               	movlw	high STR_32
  3989  000EC0  6E2E               	movwf	printf@f+1,c
  3990  000EC2  EC7C  F007         	call	_printf	;wreg free
  3991                           
  3992                           ;main.c: 553: lcdInst(0b11000000);;
  3993  000EC6  0EC0               	movlw	192
  3994  000EC8  EC36  F016         	call	_lcdInst
  3995                           
  3996                           ;main.c: 554: printf("View Logs? B:Yes");
  3997  000ECC  0EBD               	movlw	low STR_33
  3998  000ECE  6E2D               	movwf	printf@f,c
  3999  000ED0  0EFE               	movlw	high STR_33
  4000  000ED2  6E2E               	movwf	printf@f+1,c
  4001  000ED4  EC7C  F007         	call	_printf	;wreg free
  4002                           
  4003                           ;main.c: 555: keycheck();
  4004  000ED8  EC0C  F016         	call	_keycheck	;wreg free
  4005                           
  4006                           ;main.c: 556: if(keypress == 7){
  4007  000EDC  0E07               	movlw	7
  4008  000EDE  0100               	movlb	0	; () banked
  4009  000EE0  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  4010  000EE2  A4D8               	btfss	status,2,c
  4011  000EE4  EF33  F000         	goto	l5651
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;main.c: 557: displayLog(1);
  4015  000EE8  0E00               	movlw	0
  4016  000EEA  6E3A               	movwf	displayLog@run+1,c
  4017  000EEC  0E01               	movlw	1
  4018  000EEE  6E39               	movwf	displayLog@run,c
  4019  000EF0  EC40  F009         	call	_displayLog	;wreg free
  4020  000EF4  EF33  F000         	goto	l5651
  4021  000EF8                     __end_of_main:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function _updateTime *****************
  4029 ;; Defined at:
  4030 ;;		line 89 in file "I2C.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  j               1   35[COMRAM] unsigned char 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;Total ram usage:        1 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    4
  4051 ;; This function calls:
  4052 ;;		_I2C_Master_Read
  4053 ;;		_I2C_Master_Start
  4054 ;;		_I2C_Master_Stop
  4055 ;;		_I2C_Master_Write
  4056 ;; This function is called by:
  4057 ;;		_main
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text1
  4062  00282A                     __ptext1:
  4063                           	opt stack 0
  4064  00282A                     _updateTime:
  4065                           	opt stack 26
  4066                           
  4067                           ;I2C.c: 91: I2C_Master_Start();
  4068                           
  4069                           ;incstack = 0
  4070  00282A  EC4F  F016         	call	_I2C_Master_Start	;wreg free
  4071                           
  4072                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  4073  00282E  0E00               	movlw	0
  4074  002830  6E23               	movwf	I2C_Master_Write@d+1,c
  4075  002832  0ED0               	movlw	208
  4076  002834  6E22               	movwf	I2C_Master_Write@d,c
  4077  002836  EC3C  F016         	call	_I2C_Master_Write	;wreg free
  4078                           
  4079                           ;I2C.c: 93: I2C_Master_Write(0x00);
  4080  00283A  0E00               	movlw	0
  4081  00283C  6E23               	movwf	I2C_Master_Write@d+1,c
  4082  00283E  0E00               	movlw	0
  4083  002840  6E22               	movwf	I2C_Master_Write@d,c
  4084  002842  EC3C  F016         	call	_I2C_Master_Write	;wreg free
  4085                           
  4086                           ;I2C.c: 94: I2C_Master_Stop();
  4087  002846  EC4B  F016         	call	_I2C_Master_Stop	;wreg free
  4088                           
  4089                           ;I2C.c: 97: I2C_Master_Start();
  4090  00284A  EC4F  F016         	call	_I2C_Master_Start	;wreg free
  4091                           
  4092                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  4093  00284E  0E00               	movlw	0
  4094  002850  6E23               	movwf	I2C_Master_Write@d+1,c
  4095  002852  0ED1               	movlw	209
  4096  002854  6E22               	movwf	I2C_Master_Write@d,c
  4097  002856  EC3C  F016         	call	_I2C_Master_Write	;wreg free
  4098                           
  4099                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  4100  00285A  0E00               	movlw	0
  4101  00285C  6E24               	movwf	updateTime@j,c
  4102  00285E                     l4001:
  4103  00285E  0E05               	movlw	5
  4104  002860  6424               	cpfsgt	updateTime@j,c
  4105  002862  D001               	goto	l4005
  4106  002864  D00E               	goto	l4011
  4107  002866                     l4005:
  4108                           
  4109                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  4110  002866  5024               	movf	updateTime@j,w,c
  4111  002868  0D01               	mullw	1
  4112  00286A  0EAF               	movlw	low _time
  4113  00286C  24F3               	addwf	prodl,w,c
  4114  00286E  6ED9               	movwf	fsr2l,c
  4115  002870  0E00               	movlw	high _time
  4116  002872  20F4               	addwfc	prodh,w,c
  4117  002874  6EDA               	movwf	fsr2h,c
  4118  002876  0E01               	movlw	1
  4119  002878  ECA7  F015         	call	_I2C_Master_Read
  4120  00287C  6EDF               	movwf	indf2,c
  4121  00287E  2A24               	incf	updateTime@j,f,c
  4122  002880  D7EE               	goto	l4001
  4123  002882                     l4011:
  4124                           
  4125                           ;I2C.c: 101: }
  4126                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  4127  002882  0E00               	movlw	0
  4128  002884  ECA7  F015         	call	_I2C_Master_Read
  4129  002888  0100               	movlb	0	; () banked
  4130  00288A  6FB5               	movwf	(_time+6)& (0+255),b
  4131                           
  4132                           ;I2C.c: 103: I2C_Master_Stop();
  4133  00288C  EC4B  F016         	call	_I2C_Master_Stop	;wreg free
  4134  002890  0012               	return		;funcret
  4135  002892                     __end_of_updateTime:
  4136                           	opt stack 0
  4137                           tblptru	equ	0xFF8
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           indf2	equ	0xFDF
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _I2C_Master_Write *****************
  4148 ;; Defined at:
  4149 ;;		line 54 in file "I2C.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  d               2   33[COMRAM] unsigned int 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;Total ram usage:        2 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    3
  4170 ;; This function calls:
  4171 ;;		_I2C_Master_Wait
  4172 ;; This function is called by:
  4173 ;;		_updateTime
  4174 ;;		_set_time
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text2
  4179  002C78                     __ptext2:
  4180                           	opt stack 0
  4181  002C78                     _I2C_Master_Write:
  4182                           	opt stack 26
  4183                           
  4184                           ;I2C.c: 56: I2C_Master_Wait();
  4185                           
  4186                           ;incstack = 0
  4187  002C78  EC17  F016         	call	_I2C_Master_Wait	;wreg free
  4188                           
  4189                           ;I2C.c: 57: SSPBUF = d;
  4190  002C7C  C022  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4191  002C80  0012               	return		;funcret
  4192  002C82                     __end_of_I2C_Master_Write:
  4193                           	opt stack 0
  4194                           tblptru	equ	0xFF8
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           indf2	equ	0xFDF
  4200                           fsr2h	equ	0xFDA
  4201                           fsr2l	equ	0xFD9
  4202                           status	equ	0xFD8
  4203                           
  4204 ;; *************** function _I2C_Master_Stop *****************
  4205 ;; Defined at:
  4206 ;;		line 48 in file "I2C.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		wreg, status,2, status,0, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:        0 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    3
  4227 ;; This function calls:
  4228 ;;		_I2C_Master_Wait
  4229 ;; This function is called by:
  4230 ;;		_updateTime
  4231 ;;		_set_time
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text3
  4236  002C96                     __ptext3:
  4237                           	opt stack 0
  4238  002C96                     _I2C_Master_Stop:
  4239                           	opt stack 26
  4240                           
  4241                           ;I2C.c: 50: I2C_Master_Wait();
  4242                           
  4243                           ;incstack = 0
  4244  002C96  EC17  F016         	call	_I2C_Master_Wait	;wreg free
  4245                           
  4246                           ;I2C.c: 51: PEN = 1;
  4247  002C9A  84C5               	bsf	4037,2,c	;volatile
  4248  002C9C  0012               	return		;funcret
  4249  002C9E                     __end_of_I2C_Master_Stop:
  4250                           	opt stack 0
  4251                           tblptru	equ	0xFF8
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           indf2	equ	0xFDF
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _I2C_Master_Start *****************
  4262 ;; Defined at:
  4263 ;;		line 36 in file "I2C.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;Total ram usage:        0 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    3
  4284 ;; This function calls:
  4285 ;;		_I2C_Master_Wait
  4286 ;; This function is called by:
  4287 ;;		_updateTime
  4288 ;;		_set_time
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text4
  4293  002C9E                     __ptext4:
  4294                           	opt stack 0
  4295  002C9E                     _I2C_Master_Start:
  4296                           	opt stack 26
  4297                           
  4298                           ;I2C.c: 38: I2C_Master_Wait();
  4299                           
  4300                           ;incstack = 0
  4301  002C9E  EC17  F016         	call	_I2C_Master_Wait	;wreg free
  4302                           
  4303                           ;I2C.c: 39: SEN = 1;
  4304  002CA2  80C5               	bsf	4037,0,c	;volatile
  4305  002CA4  0012               	return		;funcret
  4306  002CA6                     __end_of_I2C_Master_Start:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           indf2	equ	0xFDF
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8
  4317                           
  4318 ;; *************** function _I2C_Master_Read *****************
  4319 ;; Defined at:
  4320 ;;		line 60 in file "I2C.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  a               1    wreg     unsigned char 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  a               1   33[COMRAM] unsigned char 
  4325 ;;  temp            1   34[COMRAM] unsigned char 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      unsigned char 
  4328 ;; Registers used:
  4329 ;;		wreg, status,2, status,0, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;Total ram usage:        2 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    3
  4342 ;; This function calls:
  4343 ;;		_I2C_Master_Wait
  4344 ;; This function is called by:
  4345 ;;		_updateTime
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text5
  4350  002B4E                     __ptext5:
  4351                           	opt stack 0
  4352  002B4E                     _I2C_Master_Read:
  4353                           	opt stack 26
  4354                           
  4355                           ;incstack = 0
  4356                           ;I2C_Master_Read@a stored from wreg
  4357  002B4E  6E22               	movwf	I2C_Master_Read@a,c
  4358                           
  4359                           ;I2C.c: 62: unsigned char temp;
  4360                           ;I2C.c: 63: I2C_Master_Wait();
  4361  002B50  EC17  F016         	call	_I2C_Master_Wait	;wreg free
  4362                           
  4363                           ;I2C.c: 64: RCEN = 1;
  4364  002B54  86C5               	bsf	4037,3,c	;volatile
  4365                           
  4366                           ;I2C.c: 65: I2C_Master_Wait();
  4367  002B56  EC17  F016         	call	_I2C_Master_Wait	;wreg free
  4368                           
  4369                           ;I2C.c: 66: temp = SSPBUF;
  4370  002B5A  CFC9 F023          	movff	4041,I2C_Master_Read@temp	;volatile
  4371                           
  4372                           ;I2C.c: 67: I2C_Master_Wait();
  4373  002B5E  EC17  F016         	call	_I2C_Master_Wait	;wreg free
  4374                           
  4375                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4376  002B62  5022               	movf	I2C_Master_Read@a,w,c
  4377  002B64  A4D8               	btfss	status,2,c
  4378  002B66  D002               	goto	u4420
  4379  002B68  8AC5               	bsf	4037,5,c	;volatile
  4380  002B6A  D001               	goto	l3869
  4381  002B6C                     u4420:
  4382  002B6C  9AC5               	bcf	4037,5,c	;volatile
  4383  002B6E                     l3869:
  4384                           
  4385                           ;I2C.c: 69: ACKEN = 1;
  4386  002B6E  88C5               	bsf	4037,4,c	;volatile
  4387                           
  4388                           ;I2C.c: 70: return temp;
  4389  002B70  5023               	movf	I2C_Master_Read@temp,w,c
  4390  002B72  0012               	return	
  4391  002B74                     __end_of_I2C_Master_Read:
  4392                           	opt stack 0
  4393                           tblptru	equ	0xFF8
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           indf2	equ	0xFDF
  4399                           fsr2h	equ	0xFDA
  4400                           fsr2l	equ	0xFD9
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _I2C_Master_Wait *****************
  4404 ;; Defined at:
  4405 ;;		line 31 in file "I2C.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;		None
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, status,2, status,0
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;Total ram usage:        1 bytes
  4424 ;; Hardware stack levels used:    1
  4425 ;; Hardware stack levels required when called:    2
  4426 ;; This function calls:
  4427 ;;		Nothing
  4428 ;; This function is called by:
  4429 ;;		_I2C_Master_Start
  4430 ;;		_I2C_Master_Stop
  4431 ;;		_I2C_Master_Write
  4432 ;;		_I2C_Master_Read
  4433 ;;		_I2C_Master_RepeatedStart
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text6
  4438  002C2E                     __ptext6:
  4439                           	opt stack 0
  4440  002C2E                     _I2C_Master_Wait:
  4441                           	opt stack 26
  4442  002C2E                     l386:
  4443  002C2E  B4C7               	btfsc	4039,2,c	;volatile
  4444  002C30  D7FE               	goto	l386
  4445  002C32  CFC5 F021          	movff	4037,??_I2C_Master_Wait	;volatile
  4446  002C36  0E1F               	movlw	31
  4447  002C38  1621               	andwf	??_I2C_Master_Wait,f,c
  4448  002C3A  B4D8               	btfsc	status,2,c
  4449  002C3C  0012               	return	
  4450  002C3E  D7F7               	goto	l386
  4451  002C40                     __end_of_I2C_Master_Wait:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           postinc0	equ	0xFEE
  4457                           wreg	equ	0xFE8
  4458                           indf2	equ	0xFDF
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _keyinterrupt *****************
  4464 ;; Defined at:
  4465 ;;		line 19 in file "interface.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      void 
  4472 ;; Registers used:
  4473 ;;		wreg, status,2, status,0
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;Total ram usage:        0 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    2
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_main
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text7
  4494  002C02                     __ptext7:
  4495                           	opt stack 0
  4496  002C02                     _keyinterrupt:
  4497                           	opt stack 28
  4498                           
  4499                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  4500                           
  4501                           ;incstack = 0
  4502  002C02  A281               	btfss	3969,1,c	;volatile
  4503  002C04  D007               	goto	l684
  4504                           
  4505                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  4506  002C06  3881               	swapf	3969,w,c	;volatile
  4507  002C08  0B0F               	andlw	15
  4508  002C0A  0B0F               	andlw	15
  4509  002C0C  0100               	movlb	0	; () banked
  4510  002C0E  6FC2               	movwf	_keypress& (0+255),b	;volatile
  4511  002C10                     l685:
  4512  002C10  B281               	btfsc	3969,1,c	;volatile
  4513  002C12  D7FE               	goto	l685
  4514  002C14                     l684:
  4515                           
  4516                           ;interface.c: 23: }
  4517                           ;interface.c: 24: __nop();
  4518  002C14  F000               	nop	
  4519  002C16  0012               	return		;funcret
  4520  002C18                     __end_of_keyinterrupt:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           postinc0	equ	0xFEE
  4526                           wreg	equ	0xFE8
  4527                           indf2	equ	0xFDF
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function _initialize *****************
  4533 ;; Defined at:
  4534 ;;		line 72 in file "main.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;Total ram usage:        0 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    5
  4555 ;; This function calls:
  4556 ;;		_I2C_Master_Init
  4557 ;;		_initLCD
  4558 ;; This function is called by:
  4559 ;;		_main
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text8
  4564  0026CA                     __ptext8:
  4565                           	opt stack 0
  4566  0026CA                     _initialize:
  4567                           	opt stack 25
  4568                           
  4569                           ;main.c: 74: OSCCON = 0xF0;
  4570                           
  4571                           ;incstack = 0
  4572  0026CA  0EF0               	movlw	240
  4573  0026CC  6ED3               	movwf	4051,c	;volatile
  4574                           
  4575                           ;main.c: 75: OSCTUNEbits.PLLEN = 1;
  4576  0026CE  8C9B               	bsf	3995,6,c	;volatile
  4577                           
  4578                           ;main.c: 77: TRISA = 0b00101111;
  4579  0026D0  0E2F               	movlw	47
  4580  0026D2  6E92               	movwf	3986,c	;volatile
  4581                           
  4582                           ;main.c: 78: TRISB = 0b11110010;
  4583  0026D4  0EF2               	movlw	242
  4584  0026D6  6E93               	movwf	3987,c	;volatile
  4585                           
  4586                           ;main.c: 79: TRISC = 0b00000000;
  4587  0026D8  0E00               	movlw	0
  4588  0026DA  6E94               	movwf	3988,c	;volatile
  4589                           
  4590                           ;main.c: 81: TRISD = 0x00;
  4591  0026DC  0E00               	movlw	0
  4592  0026DE  6E95               	movwf	3989,c	;volatile
  4593                           
  4594                           ;main.c: 82: TRISE = 0b00000001;
  4595  0026E0  0E01               	movlw	1
  4596  0026E2  6E96               	movwf	3990,c	;volatile
  4597                           
  4598                           ;main.c: 84: PR2 = 0xff;
  4599  0026E4  68CB               	setf	4043,c	;volatile
  4600                           
  4601                           ;main.c: 85: CCP1CON = 0b00001100;
  4602  0026E6  0E0C               	movlw	12
  4603  0026E8  6EBD               	movwf	4029,c	;volatile
  4604                           
  4605                           ;main.c: 86: CCPR1L = 0x00;
  4606  0026EA  0E00               	movlw	0
  4607  0026EC  6EBE               	movwf	4030,c	;volatile
  4608                           
  4609                           ;main.c: 87: CCP2CON = 0b00001100;
  4610  0026EE  0E0C               	movlw	12
  4611  0026F0  6EBA               	movwf	4026,c	;volatile
  4612                           
  4613                           ;main.c: 88: CCPR2L = 0x00;
  4614  0026F2  0E00               	movlw	0
  4615  0026F4  6EBB               	movwf	4027,c	;volatile
  4616                           
  4617                           ;main.c: 89: T2CON = 0b00000101;
  4618  0026F6  0E05               	movlw	5
  4619  0026F8  6ECA               	movwf	4042,c	;volatile
  4620                           
  4621                           ;main.c: 91: LATA = 0x00;
  4622  0026FA  0E00               	movlw	0
  4623  0026FC  6E89               	movwf	3977,c	;volatile
  4624                           
  4625                           ;main.c: 92: LATB = 0x00;
  4626  0026FE  0E00               	movlw	0
  4627  002700  6E8A               	movwf	3978,c	;volatile
  4628                           
  4629                           ;main.c: 93: LATC = 0x00;
  4630  002702  0E00               	movlw	0
  4631  002704  6E8B               	movwf	3979,c	;volatile
  4632                           
  4633                           ;main.c: 94: LATD = 0x00;
  4634  002706  0E00               	movlw	0
  4635  002708  6E8C               	movwf	3980,c	;volatile
  4636                           
  4637                           ;main.c: 95: LATE = 0x00;
  4638  00270A  0E00               	movlw	0
  4639  00270C  6E8D               	movwf	3981,c	;volatile
  4640                           
  4641                           ;main.c: 97: initLCD();
  4642  00270E  EC20  F015         	call	_initLCD	;wreg free
  4643                           
  4644                           ;main.c: 99: I2C_Master_Init(32000);
  4645  002712  0E00               	movlw	0
  4646  002714  6E2E               	movwf	I2C_Master_Init@c,c
  4647  002716  0E7D               	movlw	125
  4648  002718  6E2F               	movwf	I2C_Master_Init@c+1,c
  4649  00271A  0E00               	movlw	0
  4650  00271C  6E30               	movwf	I2C_Master_Init@c+2,c
  4651  00271E  0E00               	movlw	0
  4652  002720  6E31               	movwf	I2C_Master_Init@c+3,c
  4653  002722  EC7A  F014         	call	_I2C_Master_Init	;wreg free
  4654                           
  4655                           ;main.c: 102: nRBPU = 0;
  4656  002726  9EF1               	bcf	intcon2,7,c	;volatile
  4657                           
  4658                           ;main.c: 104: ADCON1 = 0b00001001;
  4659  002728  0E09               	movlw	9
  4660  00272A  6EC1               	movwf	4033,c	;volatile
  4661                           
  4662                           ;main.c: 105: ADCON2 = 0b10001001;
  4663  00272C  0E89               	movlw	137
  4664  00272E  6EC0               	movwf	4032,c	;volatile
  4665                           
  4666                           ;main.c: 106: CVRCON = 0x00;
  4667  002730  0E00               	movlw	0
  4668  002732  6EB5               	movwf	4021,c	;volatile
  4669                           
  4670                           ;main.c: 107: CMCONbits.CIS = 0;
  4671  002734  96B4               	bcf	4020,3,c	;volatile
  4672                           
  4673                           ;main.c: 108: ADFM = 1;
  4674  002736  8EC0               	bsf	4032,7,c	;volatile
  4675                           
  4676                           ;main.c: 110: TMR0IE = 1;
  4677  002738  8AF2               	bsf	intcon,5,c	;volatile
  4678                           
  4679                           ;main.c: 111: TMR1IE = 1;
  4680  00273A  809D               	bsf	3997,0,c	;volatile
  4681                           
  4682                           ;main.c: 113: PEIE = 1;
  4683  00273C  8CF2               	bsf	intcon,6,c	;volatile
  4684                           
  4685                           ;main.c: 115: (INTCONbits.GIE = 1);
  4686  00273E  8EF2               	bsf	intcon,7,c	;volatile
  4687  002740  0012               	return		;funcret
  4688  002742                     __end_of_initialize:
  4689                           	opt stack 0
  4690                           tblptru	equ	0xFF8
  4691                           prodh	equ	0xFF4
  4692                           prodl	equ	0xFF3
  4693                           intcon	equ	0xFF2
  4694                           intcon2	equ	0xFF1
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           indf2	equ	0xFDF
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _initLCD *****************
  4703 ;; Defined at:
  4704 ;;		line 11 in file "lcd.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2, status,0, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;Total ram usage:        1 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    4
  4725 ;; This function calls:
  4726 ;;		_lcdInst
  4727 ;; This function is called by:
  4728 ;;		_initialize
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text9
  4733  002A40                     __ptext9:
  4734                           	opt stack 0
  4735  002A40                     _initLCD:
  4736                           	opt stack 25
  4737                           
  4738                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  4739                           
  4740                           ;incstack = 0
  4741  002A40  0E9C               	movlw	156
  4742  002A42  6E24               	movwf	??_initLCD& (0+255),c
  4743  002A44  0ED7               	movlw	215
  4744  002A46                     u7987:
  4745  002A46  2EE8               	decfsz	wreg,f,c
  4746  002A48  D7FE               	bra	u7987
  4747  002A4A  2E24               	decfsz	??_initLCD& (0+255),f,c
  4748  002A4C  D7FC               	bra	u7987
  4749  002A4E  F000               	nop	
  4750                           
  4751                           ;lcd.c: 13: lcdInst(0b00110011);
  4752  002A50  0E33               	movlw	51
  4753  002A52  EC36  F016         	call	_lcdInst
  4754                           
  4755                           ;lcd.c: 14: lcdInst(0b00110010);
  4756  002A56  0E32               	movlw	50
  4757  002A58  EC36  F016         	call	_lcdInst
  4758                           
  4759                           ;lcd.c: 15: lcdInst(0b00101000);
  4760  002A5C  0E28               	movlw	40
  4761  002A5E  EC36  F016         	call	_lcdInst
  4762                           
  4763                           ;lcd.c: 16: lcdInst(0b00001111);
  4764  002A62  0E0F               	movlw	15
  4765  002A64  EC36  F016         	call	_lcdInst
  4766                           
  4767                           ;lcd.c: 17: lcdInst(0b00000110);
  4768  002A68  0E06               	movlw	6
  4769  002A6A  EC36  F016         	call	_lcdInst
  4770                           
  4771                           ;lcd.c: 18: lcdInst(0b00000001);
  4772  002A6E  0E01               	movlw	1
  4773  002A70  EC36  F016         	call	_lcdInst
  4774                           
  4775                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  4776  002A74  0E9C               	movlw	156
  4777  002A76  6E24               	movwf	??_initLCD& (0+255),c
  4778  002A78  0ED7               	movlw	215
  4779  002A7A                     u7997:
  4780  002A7A  2EE8               	decfsz	wreg,f,c
  4781  002A7C  D7FE               	bra	u7997
  4782  002A7E  2E24               	decfsz	??_initLCD& (0+255),f,c
  4783  002A80  D7FC               	bra	u7997
  4784  002A82  F000               	nop	
  4785  002A84  0012               	return		;funcret
  4786  002A86                     __end_of_initLCD:
  4787                           	opt stack 0
  4788                           tblptru	equ	0xFF8
  4789                           prodh	equ	0xFF4
  4790                           prodl	equ	0xFF3
  4791                           intcon	equ	0xFF2
  4792                           intcon2	equ	0xFF1
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           indf2	equ	0xFDF
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _I2C_Master_Init *****************
  4801 ;; Defined at:
  4802 ;;		line 20 in file "I2C.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  c               4   45[COMRAM] const unsigned long 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;Total ram usage:        8 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    3
  4823 ;; This function calls:
  4824 ;;		___lldiv
  4825 ;; This function is called by:
  4826 ;;		_initialize
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text10
  4831  0028F4                     __ptext10:
  4832                           	opt stack 0
  4833  0028F4                     _I2C_Master_Init:
  4834                           	opt stack 26
  4835                           
  4836                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  4837                           
  4838                           ;incstack = 0
  4839  0028F4  0E00               	movlw	0
  4840  0028F6  6EC7               	movwf	4039,c	;volatile
  4841                           
  4842                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  4843  0028F8  0E28               	movlw	40
  4844  0028FA  6EC6               	movwf	4038,c	;volatile
  4845                           
  4846                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  4847  0028FC  0E00               	movlw	0
  4848  0028FE  6EC5               	movwf	4037,c	;volatile
  4849                           
  4850                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  4851  002900  0E00               	movlw	0
  4852  002902  6E21               	movwf	___lldiv@dividend,c
  4853  002904  0E48               	movlw	72
  4854  002906  6E22               	movwf	___lldiv@dividend+1,c
  4855  002908  0EE8               	movlw	232
  4856  00290A  6E23               	movwf	___lldiv@dividend+2,c
  4857  00290C  0E01               	movlw	1
  4858  00290E  6E24               	movwf	___lldiv@dividend+3,c
  4859  002910  C02E  F032         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4860  002914  C02F  F033         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4861  002918  C030  F034         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4862  00291C  C031  F035         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4863  002920  0E02               	movlw	2
  4864  002922                     u4155:
  4865  002922  90D8               	bcf	status,0,c
  4866  002924  3632               	rlcf	??_I2C_Master_Init,f,c
  4867  002926  3633               	rlcf	??_I2C_Master_Init+1,f,c
  4868  002928  3634               	rlcf	??_I2C_Master_Init+2,f,c
  4869  00292A  3635               	rlcf	??_I2C_Master_Init+3,f,c
  4870  00292C  2EE8               	decfsz	wreg,f,c
  4871  00292E  D7F9               	goto	u4155
  4872  002930  C032  F025         	movff	??_I2C_Master_Init,___lldiv@divisor
  4873  002934  C033  F026         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4874  002938  C034  F027         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4875  00293C  C035  F028         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4876  002940  EC24  F013         	call	___lldiv	;wreg free
  4877  002944  0421               	decf	?___lldiv,w,c
  4878  002946  6EC8               	movwf	4040,c	;volatile
  4879                           
  4880                           ;I2C.c: 27: TRISC3 = 1;
  4881  002948  8694               	bsf	3988,3,c	;volatile
  4882                           
  4883                           ;I2C.c: 28: TRISC4 = 1;
  4884  00294A  8894               	bsf	3988,4,c	;volatile
  4885  00294C  0012               	return		;funcret
  4886  00294E                     __end_of_I2C_Master_Init:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           indf2	equ	0xFDF
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function ___lldiv *****************
  4901 ;; Defined at:
  4902 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  dividend        4   32[COMRAM] unsigned long 
  4905 ;;  divisor         4   36[COMRAM] unsigned long 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  quotient        4   40[COMRAM] unsigned long 
  4908 ;;  counter         1   44[COMRAM] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  4   32[COMRAM] unsigned long 
  4911 ;; Registers used:
  4912 ;;		wreg, status,2, status,0
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4918 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;Total ram usage:       13 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    2
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_I2C_Master_Init
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text11
  4933  002648                     __ptext11:
  4934                           	opt stack 0
  4935  002648                     ___lldiv:
  4936                           	opt stack 26
  4937                           
  4938                           ;incstack = 0
  4939  002648  0E00               	movlw	0
  4940  00264A  6E29               	movwf	___lldiv@quotient,c
  4941  00264C  0E00               	movlw	0
  4942  00264E  6E2A               	movwf	___lldiv@quotient+1,c
  4943  002650  0E00               	movlw	0
  4944  002652  6E2B               	movwf	___lldiv@quotient+2,c
  4945  002654  0E00               	movlw	0
  4946  002656  6E2C               	movwf	___lldiv@quotient+3,c
  4947  002658  5025               	movf	___lldiv@divisor,w,c
  4948  00265A  1026               	iorwf	___lldiv@divisor+1,w,c
  4949  00265C  1027               	iorwf	___lldiv@divisor+2,w,c
  4950  00265E  1028               	iorwf	___lldiv@divisor+3,w,c
  4951  002660  B4D8               	btfsc	status,2,c
  4952  002662  D02A               	goto	l1209
  4953  002664  0E01               	movlw	1
  4954  002666  6E2D               	movwf	___lldiv@counter,c
  4955  002668  D006               	goto	l3413
  4956  00266A                     l3411:
  4957  00266A  90D8               	bcf	status,0,c
  4958  00266C  3625               	rlcf	___lldiv@divisor,f,c
  4959  00266E  3626               	rlcf	___lldiv@divisor+1,f,c
  4960  002670  3627               	rlcf	___lldiv@divisor+2,f,c
  4961  002672  3628               	rlcf	___lldiv@divisor+3,f,c
  4962  002674  2A2D               	incf	___lldiv@counter,f,c
  4963  002676                     l3413:
  4964  002676  AE28               	btfss	___lldiv@divisor+3,7,c
  4965  002678  D7F8               	goto	l3411
  4966  00267A                     l3415:
  4967  00267A  90D8               	bcf	status,0,c
  4968  00267C  3629               	rlcf	___lldiv@quotient,f,c
  4969  00267E  362A               	rlcf	___lldiv@quotient+1,f,c
  4970  002680  362B               	rlcf	___lldiv@quotient+2,f,c
  4971  002682  362C               	rlcf	___lldiv@quotient+3,f,c
  4972  002684  5025               	movf	___lldiv@divisor,w,c
  4973  002686  5C21               	subwf	___lldiv@dividend,w,c
  4974  002688  5026               	movf	___lldiv@divisor+1,w,c
  4975  00268A  5822               	subwfb	___lldiv@dividend+1,w,c
  4976  00268C  5027               	movf	___lldiv@divisor+2,w,c
  4977  00268E  5823               	subwfb	___lldiv@dividend+2,w,c
  4978  002690  5028               	movf	___lldiv@divisor+3,w,c
  4979  002692  5824               	subwfb	___lldiv@dividend+3,w,c
  4980  002694  A0D8               	btfss	status,0,c
  4981  002696  D009               	goto	l3423
  4982  002698  5025               	movf	___lldiv@divisor,w,c
  4983  00269A  5E21               	subwf	___lldiv@dividend,f,c
  4984  00269C  5026               	movf	___lldiv@divisor+1,w,c
  4985  00269E  5A22               	subwfb	___lldiv@dividend+1,f,c
  4986  0026A0  5027               	movf	___lldiv@divisor+2,w,c
  4987  0026A2  5A23               	subwfb	___lldiv@dividend+2,f,c
  4988  0026A4  5028               	movf	___lldiv@divisor+3,w,c
  4989  0026A6  5A24               	subwfb	___lldiv@dividend+3,f,c
  4990  0026A8  8029               	bsf	___lldiv@quotient,0,c
  4991  0026AA                     l3423:
  4992  0026AA  90D8               	bcf	status,0,c
  4993  0026AC  3228               	rrcf	___lldiv@divisor+3,f,c
  4994  0026AE  3227               	rrcf	___lldiv@divisor+2,f,c
  4995  0026B0  3226               	rrcf	___lldiv@divisor+1,f,c
  4996  0026B2  3225               	rrcf	___lldiv@divisor,f,c
  4997  0026B4  2E2D               	decfsz	___lldiv@counter,f,c
  4998  0026B6  D7E1               	goto	l3415
  4999  0026B8                     l1209:
  5000  0026B8  C029  F021         	movff	___lldiv@quotient,?___lldiv
  5001  0026BC  C02A  F022         	movff	___lldiv@quotient+1,?___lldiv+1
  5002  0026C0  C02B  F023         	movff	___lldiv@quotient+2,?___lldiv+2
  5003  0026C4  C02C  F024         	movff	___lldiv@quotient+3,?___lldiv+3
  5004  0026C8  0012               	return		;funcret
  5005  0026CA                     __end_of___lldiv:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           intcon2	equ	0xFF1
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           indf2	equ	0xFDF
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function _homescreen *****************
  5020 ;; Defined at:
  5021 ;;		line 3 in file "interface.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;		None
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;		None
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;Total ram usage:        0 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    5
  5042 ;; This function calls:
  5043 ;;		_lcdInst
  5044 ;;		_printf
  5045 ;; This function is called by:
  5046 ;;		_main
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text12
  5051  002892                     __ptext12:
  5052                           	opt stack 0
  5053  002892                     _homescreen:
  5054                           	opt stack 25
  5055                           
  5056                           ;interface.c: 4: lcdInst(0b10000000);;
  5057                           
  5058                           ;incstack = 0
  5059  002892  0E80               	movlw	128
  5060  002894  EC36  F016         	call	_lcdInst
  5061                           
  5062                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  5063  002898  0ECE               	movlw	low STR_34
  5064  00289A  6E2D               	movwf	printf@f,c
  5065  00289C  0EFE               	movlw	high STR_34
  5066  00289E  6E2E               	movwf	printf@f+1,c
  5067  0028A0  C0B5  F02F         	movff	_time+6,?_printf+2
  5068  0028A4  6A30               	clrf	?_printf+3,c
  5069  0028A6  C0B4  F031         	movff	_time+5,?_printf+4
  5070  0028AA  6A32               	clrf	?_printf+5,c
  5071  0028AC  C0B3  F033         	movff	_time+4,?_printf+6
  5072  0028B0  6A34               	clrf	?_printf+7,c
  5073  0028B2  EC7C  F007         	call	_printf	;wreg free
  5074                           
  5075                           ;interface.c: 6: printf("3:Start");
  5076  0028B6  0EEF               	movlw	low STR_35
  5077  0028B8  6E2D               	movwf	printf@f,c
  5078  0028BA  0EFF               	movlw	high STR_35
  5079  0028BC  6E2E               	movwf	printf@f+1,c
  5080  0028BE  EC7C  F007         	call	_printf	;wreg free
  5081                           
  5082                           ;interface.c: 7: lcdInst(0b11000000);;
  5083  0028C2  0EC0               	movlw	192
  5084  0028C4  EC36  F016         	call	_lcdInst
  5085                           
  5086                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5087  0028C8  0E44               	movlw	low (STR_43+7)
  5088  0028CA  6E2D               	movwf	printf@f,c
  5089  0028CC  0EFE               	movlw	high (STR_43+7)
  5090  0028CE  6E2E               	movwf	printf@f+1,c
  5091  0028D0  C0B1  F02F         	movff	_time+2,?_printf+2
  5092  0028D4  6A30               	clrf	?_printf+3,c
  5093  0028D6  C0B0  F031         	movff	_time+1,?_printf+4
  5094  0028DA  6A32               	clrf	?_printf+5,c
  5095  0028DC  C0AF  F033         	movff	_time,?_printf+6
  5096  0028E0  6A34               	clrf	?_printf+7,c
  5097  0028E2  EC7C  F007         	call	_printf	;wreg free
  5098                           
  5099                           ;interface.c: 9: printf(" A:Logs");
  5100  0028E6  0EE7               	movlw	low STR_37
  5101  0028E8  6E2D               	movwf	printf@f,c
  5102  0028EA  0EFF               	movlw	high STR_37
  5103  0028EC  6E2E               	movwf	printf@f+1,c
  5104  0028EE  EC7C  F007         	call	_printf	;wreg free
  5105  0028F2  0012               	return		;funcret
  5106  0028F4                     __end_of_homescreen:
  5107                           	opt stack 0
  5108                           tblptru	equ	0xFF8
  5109                           prodh	equ	0xFF4
  5110                           prodl	equ	0xFF3
  5111                           intcon	equ	0xFF2
  5112                           intcon2	equ	0xFF1
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           indf2	equ	0xFDF
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function _displayLog *****************
  5121 ;; Defined at:
  5122 ;;		line 87 in file "interface.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  run             2   56[COMRAM] int 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  currRun         2   15[BANK0 ] int 
  5127 ;;  i               2   13[BANK0 ] int 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;Total ram usage:        9 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    5
  5144 ;; This function calls:
  5145 ;;		_eepromRead
  5146 ;;		_keycheck
  5147 ;;		_lcdInst
  5148 ;;		_printf
  5149 ;; This function is called by:
  5150 ;;		_main
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text13
  5155  001280                     __ptext13:
  5156                           	opt stack 0
  5157  001280                     _displayLog:
  5158                           	opt stack 25
  5159                           
  5160                           ;interface.c: 88: int currRun = eepromRead(0);
  5161                           
  5162                           ;incstack = 0
  5163  001280  0E00               	movlw	0
  5164  001282  EC80  F015         	call	_eepromRead
  5165  001286  0100               	movlb	0	; () banked
  5166  001288  6F8F               	movwf	displayLog@currRun& (0+255),b
  5167  00128A  6B90               	clrf	(displayLog@currRun+1)& (0+255),b
  5168  00128C  BF8F               	btfsc	displayLog@currRun& (0+255),7,b
  5169  00128E  0790               	decf	(displayLog@currRun+1)& (0+255),f,b
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;interface.c: 89: int i;
  5173                           ;interface.c: 90: for (i=1;i<(run);i++){
  5174  001290  0E00               	movlw	0
  5175  001292  0100               	movlb	0	; () banked
  5176  001294  6F8E               	movwf	(displayLog@i+1)& (0+255),b
  5177  001296  0E01               	movlw	1
  5178  001298  6F8D               	movwf	displayLog@i& (0+255),b
  5179  00129A  D016               	goto	l5521
  5180  00129C                     l5513:
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;interface.c: 91: currRun++;
  5184  00129C  0100               	movlb	0	; () banked
  5185  00129E  4B8F               	infsnz	displayLog@currRun& (0+255),f,b
  5186  0012A0  2B90               	incf	(displayLog@currRun+1)& (0+255),f,b
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  5190  0012A2  0100               	movlb	0	; () banked
  5191  0012A4  BF90               	btfsc	(displayLog@currRun+1)& (0+255),7,b
  5192  0012A6  D00D               	goto	l5519
  5193  0012A8  0100               	movlb	0	; () banked
  5194  0012AA  5190               	movf	(displayLog@currRun+1)& (0+255),w,b
  5195  0012AC  E105               	bnz	u6970
  5196  0012AE  0E05               	movlw	5
  5197  0012B0  0100               	movlb	0	; () banked
  5198  0012B2  5D8F               	subwf	displayLog@currRun& (0+255),w,b
  5199  0012B4  A0D8               	btfss	status,0,c
  5200  0012B6  D005               	goto	l5519
  5201  0012B8                     u6970:
  5202                           
  5203                           ; BSR set to: 0
  5204  0012B8  0E00               	movlw	0
  5205  0012BA  0100               	movlb	0	; () banked
  5206  0012BC  6F90               	movwf	(displayLog@currRun+1)& (0+255),b
  5207  0012BE  0E01               	movlw	1
  5208  0012C0  6F8F               	movwf	displayLog@currRun& (0+255),b
  5209  0012C2                     l5519:
  5210                           
  5211                           ; BSR set to: 0
  5212  0012C2  0100               	movlb	0	; () banked
  5213  0012C4  4B8D               	infsnz	displayLog@i& (0+255),f,b
  5214  0012C6  2B8E               	incf	(displayLog@i+1)& (0+255),f,b
  5215  0012C8                     l5521:
  5216                           
  5217                           ; BSR set to: 0
  5218  0012C8  5039               	movf	displayLog@run,w,c
  5219  0012CA  0100               	movlb	0	; () banked
  5220  0012CC  5D8D               	subwf	displayLog@i& (0+255),w,b
  5221  0012CE  0100               	movlb	0	; () banked
  5222  0012D0  518E               	movf	(displayLog@i+1)& (0+255),w,b
  5223  0012D2  0A80               	xorlw	128
  5224  0012D4  0100               	movlb	0	; () banked
  5225  0012D6  6F8A               	movwf	??_displayLog& (0+255),b
  5226  0012D8  503A               	movf	displayLog@run+1,w,c
  5227  0012DA  0A80               	xorlw	128
  5228  0012DC  0100               	movlb	0	; () banked
  5229  0012DE  598A               	subwfb	??_displayLog& (0+255),w,b
  5230  0012E0  A0D8               	btfss	status,0,c
  5231  0012E2  D7DC               	goto	l5513
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;interface.c: 93: }
  5235                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5236                           
  5237                           ; BSR set to: 0
  5238  0012E4  0E01               	movlw	1
  5239  0012E6  EC36  F016         	call	_lcdInst
  5240  0012EA  0E34               	movlw	52
  5241  0012EC  0100               	movlb	0	; () banked
  5242  0012EE  6F8A               	movwf	??_displayLog& (0+255),b
  5243  0012F0  0EF1               	movlw	241
  5244  0012F2                     u8007:
  5245  0012F2  2EE8               	decfsz	wreg,f,c
  5246  0012F4  D7FE               	bra	u8007
  5247  0012F6  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5248  0012F8  D7FC               	bra	u8007
  5249  0012FA  D000               	nop2	
  5250                           
  5251                           ;interface.c: 96: printf("Run#%d    A:Next", run);
  5252  0012FC  0E9B               	movlw	low STR_38
  5253  0012FE  6E2D               	movwf	printf@f,c
  5254  001300  0EFE               	movlw	high STR_38
  5255  001302  6E2E               	movwf	printf@f+1,c
  5256  001304  C039  F02F         	movff	displayLog@run,?_printf+2
  5257  001308  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5258  00130C  EC7C  F007         	call	_printf	;wreg free
  5259                           
  5260                           ;interface.c: 97: lcdInst(0b11000000);;
  5261  001310  0EC0               	movlw	192
  5262  001312  EC36  F016         	call	_lcdInst
  5263                           
  5264                           ;interface.c: 98: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  5265  001316  0E8B               	movlw	low STR_39
  5266  001318  6E2D               	movwf	printf@f,c
  5267  00131A  0EFF               	movlw	high STR_39
  5268  00131C  6E2E               	movwf	printf@f+1,c
  5269  00131E  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5270  001322  0100               	movlb	0	; () banked
  5271  001324  3B8A               	swapf	??_displayLog& (0+255),f,b
  5272  001326  0EF0               	movlw	240
  5273  001328  178A               	andwf	??_displayLog& (0+255),f,b
  5274  00132A  0100               	movlb	0	; () banked
  5275  00132C  298A               	incf	??_displayLog& (0+255),w,b
  5276  00132E  EC80  F015         	call	_eepromRead
  5277  001332  6E2F               	movwf	?_printf+2,c
  5278  001334  6A30               	clrf	?_printf+3,c
  5279  001336  BE2F               	btfsc	?_printf+2,7,c
  5280  001338  0630               	decf	?_printf+3,f,c
  5281  00133A  EC7C  F007         	call	_printf	;wreg free
  5282                           
  5283                           ;interface.c: 99: keycheck();
  5284  00133E  EC0C  F016         	call	_keycheck	;wreg free
  5285                           
  5286                           ;interface.c: 100: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5287  001342  0E01               	movlw	1
  5288  001344  EC36  F016         	call	_lcdInst
  5289  001348  0E34               	movlw	52
  5290  00134A  0100               	movlb	0	; () banked
  5291  00134C  6F8A               	movwf	??_displayLog& (0+255),b
  5292  00134E  0EF1               	movlw	241
  5293  001350                     u8017:
  5294  001350  2EE8               	decfsz	wreg,f,c
  5295  001352  D7FE               	bra	u8017
  5296  001354  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5297  001356  D7FC               	bra	u8017
  5298  001358  D000               	nop2	
  5299                           
  5300                           ;interface.c: 101: printf("Run#%d    A:Next", run);
  5301  00135A  0E9B               	movlw	low STR_38
  5302  00135C  6E2D               	movwf	printf@f,c
  5303  00135E  0EFE               	movlw	high STR_38
  5304  001360  6E2E               	movwf	printf@f+1,c
  5305  001362  C039  F02F         	movff	displayLog@run,?_printf+2
  5306  001366  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5307  00136A  EC7C  F007         	call	_printf	;wreg free
  5308                           
  5309                           ;interface.c: 102: lcdInst(0b11000000);;
  5310  00136E  0EC0               	movlw	192
  5311  001370  EC36  F016         	call	_lcdInst
  5312                           
  5313                           ;interface.c: 103: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  5314  001374  0E53               	movlw	low STR_41
  5315  001376  6E2D               	movwf	printf@f,c
  5316  001378  0EFE               	movlw	high STR_41
  5317  00137A  6E2E               	movwf	printf@f+1,c
  5318  00137C  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5319  001380  0100               	movlb	0	; () banked
  5320  001382  3B8A               	swapf	??_displayLog& (0+255),f,b
  5321  001384  0EF0               	movlw	240
  5322  001386  178A               	andwf	??_displayLog& (0+255),f,b
  5323  001388  0100               	movlb	0	; () banked
  5324  00138A  518A               	movf	??_displayLog& (0+255),w,b
  5325  00138C  0F02               	addlw	2
  5326  00138E  EC80  F015         	call	_eepromRead
  5327  001392  6E2F               	movwf	?_printf+2,c
  5328  001394  6A30               	clrf	?_printf+3,c
  5329  001396  BE2F               	btfsc	?_printf+2,7,c
  5330  001398  0630               	decf	?_printf+3,f,c
  5331  00139A  C08F  F08B         	movff	displayLog@currRun,??_displayLog+1
  5332  00139E  0100               	movlb	0	; () banked
  5333  0013A0  3B8B               	swapf	(??_displayLog+1)& (0+255),f,b
  5334  0013A2  0EF0               	movlw	240
  5335  0013A4  178B               	andwf	(??_displayLog+1)& (0+255),f,b
  5336  0013A6  0100               	movlb	0	; () banked
  5337  0013A8  518B               	movf	(??_displayLog+1)& (0+255),w,b
  5338  0013AA  0F03               	addlw	3
  5339  0013AC  EC80  F015         	call	_eepromRead
  5340  0013B0  6E31               	movwf	?_printf+4,c
  5341  0013B2  6A32               	clrf	?_printf+5,c
  5342  0013B4  BE31               	btfsc	?_printf+4,7,c
  5343  0013B6  0632               	decf	?_printf+5,f,c
  5344  0013B8  C08F  F08C         	movff	displayLog@currRun,??_displayLog+2
  5345  0013BC  0100               	movlb	0	; () banked
  5346  0013BE  3B8C               	swapf	(??_displayLog+2)& (0+255),f,b
  5347  0013C0  0EF0               	movlw	240
  5348  0013C2  178C               	andwf	(??_displayLog+2)& (0+255),f,b
  5349  0013C4  0100               	movlb	0	; () banked
  5350  0013C6  518C               	movf	(??_displayLog+2)& (0+255),w,b
  5351  0013C8  0F04               	addlw	4
  5352  0013CA  EC80  F015         	call	_eepromRead
  5353  0013CE  6E33               	movwf	?_printf+6,c
  5354  0013D0  6A34               	clrf	?_printf+7,c
  5355  0013D2  BE33               	btfsc	?_printf+6,7,c
  5356  0013D4  0634               	decf	?_printf+7,f,c
  5357  0013D6  EC7C  F007         	call	_printf	;wreg free
  5358                           
  5359                           ;interface.c: 104: keycheck();
  5360  0013DA  EC0C  F016         	call	_keycheck	;wreg free
  5361                           
  5362                           ;interface.c: 105: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5363  0013DE  0E01               	movlw	1
  5364  0013E0  EC36  F016         	call	_lcdInst
  5365  0013E4  0E34               	movlw	52
  5366  0013E6  0100               	movlb	0	; () banked
  5367  0013E8  6F8A               	movwf	??_displayLog& (0+255),b
  5368  0013EA  0EF1               	movlw	241
  5369  0013EC                     u8027:
  5370  0013EC  2EE8               	decfsz	wreg,f,c
  5371  0013EE  D7FE               	bra	u8027
  5372  0013F0  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5373  0013F2  D7FC               	bra	u8027
  5374  0013F4  D000               	nop2	
  5375                           
  5376                           ;interface.c: 106: printf("Run#%d    A:Next", run);
  5377  0013F6  0E9B               	movlw	low STR_38
  5378  0013F8  6E2D               	movwf	printf@f,c
  5379  0013FA  0EFE               	movlw	high STR_38
  5380  0013FC  6E2E               	movwf	printf@f+1,c
  5381  0013FE  C039  F02F         	movff	displayLog@run,?_printf+2
  5382  001402  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5383  001406  EC7C  F007         	call	_printf	;wreg free
  5384                           
  5385                           ;interface.c: 107: lcdInst(0b11000000);;
  5386  00140A  0EC0               	movlw	192
  5387  00140C  EC36  F016         	call	_lcdInst
  5388                           
  5389                           ;interface.c: 108: printf("Start: %02x:%02x:%02x", eepromRead(currRun*0x10 + 5), eepromR
      +                          ead(currRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  5390  001410  0E3D               	movlw	low STR_43
  5391  001412  6E2D               	movwf	printf@f,c
  5392  001414  0EFE               	movlw	high STR_43
  5393  001416  6E2E               	movwf	printf@f+1,c
  5394  001418  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5395  00141C  0100               	movlb	0	; () banked
  5396  00141E  3B8A               	swapf	??_displayLog& (0+255),f,b
  5397  001420  0EF0               	movlw	240
  5398  001422  178A               	andwf	??_displayLog& (0+255),f,b
  5399  001424  0100               	movlb	0	; () banked
  5400  001426  518A               	movf	??_displayLog& (0+255),w,b
  5401  001428  0F05               	addlw	5
  5402  00142A  EC80  F015         	call	_eepromRead
  5403  00142E  6E2F               	movwf	?_printf+2,c
  5404  001430  6A30               	clrf	?_printf+3,c
  5405  001432  BE2F               	btfsc	?_printf+2,7,c
  5406  001434  0630               	decf	?_printf+3,f,c
  5407  001436  C08F  F08B         	movff	displayLog@currRun,??_displayLog+1
  5408  00143A  0100               	movlb	0	; () banked
  5409  00143C  3B8B               	swapf	(??_displayLog+1)& (0+255),f,b
  5410  00143E  0EF0               	movlw	240
  5411  001440  178B               	andwf	(??_displayLog+1)& (0+255),f,b
  5412  001442  0100               	movlb	0	; () banked
  5413  001444  518B               	movf	(??_displayLog+1)& (0+255),w,b
  5414  001446  0F06               	addlw	6
  5415  001448  EC80  F015         	call	_eepromRead
  5416  00144C  6E31               	movwf	?_printf+4,c
  5417  00144E  6A32               	clrf	?_printf+5,c
  5418  001450  BE31               	btfsc	?_printf+4,7,c
  5419  001452  0632               	decf	?_printf+5,f,c
  5420  001454  C08F  F08C         	movff	displayLog@currRun,??_displayLog+2
  5421  001458  0100               	movlb	0	; () banked
  5422  00145A  3B8C               	swapf	(??_displayLog+2)& (0+255),f,b
  5423  00145C  0EF0               	movlw	240
  5424  00145E  178C               	andwf	(??_displayLog+2)& (0+255),f,b
  5425  001460  0100               	movlb	0	; () banked
  5426  001462  518C               	movf	(??_displayLog+2)& (0+255),w,b
  5427  001464  0F07               	addlw	7
  5428  001466  EC80  F015         	call	_eepromRead
  5429  00146A  6E33               	movwf	?_printf+6,c
  5430  00146C  6A34               	clrf	?_printf+7,c
  5431  00146E  BE33               	btfsc	?_printf+6,7,c
  5432  001470  0634               	decf	?_printf+7,f,c
  5433  001472  EC7C  F007         	call	_printf	;wreg free
  5434                           
  5435                           ;interface.c: 109: keycheck();
  5436  001476  EC0C  F016         	call	_keycheck	;wreg free
  5437                           
  5438                           ;interface.c: 110: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5439  00147A  0E01               	movlw	1
  5440  00147C  EC36  F016         	call	_lcdInst
  5441  001480  0E34               	movlw	52
  5442  001482  0100               	movlb	0	; () banked
  5443  001484  6F8A               	movwf	??_displayLog& (0+255),b
  5444  001486  0EF1               	movlw	241
  5445  001488                     u8037:
  5446  001488  2EE8               	decfsz	wreg,f,c
  5447  00148A  D7FE               	bra	u8037
  5448  00148C  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5449  00148E  D7FC               	bra	u8037
  5450  001490  D000               	nop2	
  5451                           
  5452                           ;interface.c: 111: printf("Run#%d    A:Next", run);
  5453  001492  0E9B               	movlw	low STR_38
  5454  001494  6E2D               	movwf	printf@f,c
  5455  001496  0EFE               	movlw	high STR_38
  5456  001498  6E2E               	movwf	printf@f+1,c
  5457  00149A  C039  F02F         	movff	displayLog@run,?_printf+2
  5458  00149E  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5459  0014A2  EC7C  F007         	call	_printf	;wreg free
  5460                           
  5461                           ;interface.c: 112: lcdInst(0b11000000);;
  5462  0014A6  0EC0               	movlw	192
  5463  0014A8  EC36  F016         	call	_lcdInst
  5464                           
  5465                           ;interface.c: 113: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  5466  0014AC  0EDE               	movlw	low STR_45
  5467  0014AE  6E2D               	movwf	printf@f,c
  5468  0014B0  0EFE               	movlw	high STR_45
  5469  0014B2  6E2E               	movwf	printf@f+1,c
  5470  0014B4  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5471  0014B8  0100               	movlb	0	; () banked
  5472  0014BA  3B8A               	swapf	??_displayLog& (0+255),f,b
  5473  0014BC  0EF0               	movlw	240
  5474  0014BE  178A               	andwf	??_displayLog& (0+255),f,b
  5475  0014C0  0100               	movlb	0	; () banked
  5476  0014C2  518A               	movf	??_displayLog& (0+255),w,b
  5477  0014C4  0F08               	addlw	8
  5478  0014C6  EC80  F015         	call	_eepromRead
  5479  0014CA  6E2F               	movwf	?_printf+2,c
  5480  0014CC  6A30               	clrf	?_printf+3,c
  5481  0014CE  BE2F               	btfsc	?_printf+2,7,c
  5482  0014D0  0630               	decf	?_printf+3,f,c
  5483  0014D2  EC7C  F007         	call	_printf	;wreg free
  5484                           
  5485                           ;interface.c: 114: keycheck();
  5486  0014D6  EC0C  F016         	call	_keycheck	;wreg free
  5487                           
  5488                           ;interface.c: 115: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5489  0014DA  0E01               	movlw	1
  5490  0014DC  EC36  F016         	call	_lcdInst
  5491  0014E0  0E34               	movlw	52
  5492  0014E2  0100               	movlb	0	; () banked
  5493  0014E4  6F8A               	movwf	??_displayLog& (0+255),b
  5494  0014E6  0EF1               	movlw	241
  5495  0014E8                     u8047:
  5496  0014E8  2EE8               	decfsz	wreg,f,c
  5497  0014EA  D7FE               	bra	u8047
  5498  0014EC  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5499  0014EE  D7FC               	bra	u8047
  5500  0014F0  D000               	nop2	
  5501                           
  5502                           ;interface.c: 116: printf("Run#%d    A:Next", run);
  5503  0014F2  0E9B               	movlw	low STR_38
  5504  0014F4  6E2D               	movwf	printf@f,c
  5505  0014F6  0EFE               	movlw	high STR_38
  5506  0014F8  6E2E               	movwf	printf@f+1,c
  5507  0014FA  C039  F02F         	movff	displayLog@run,?_printf+2
  5508  0014FE  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5509  001502  EC7C  F007         	call	_printf	;wreg free
  5510                           
  5511                           ;interface.c: 117: lcdInst(0b11000000);;
  5512  001506  0EC0               	movlw	192
  5513  001508  EC36  F016         	call	_lcdInst
  5514                           
  5515                           ;interface.c: 118: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  5516  00150C  0E79               	movlw	low STR_47
  5517  00150E  6E2D               	movwf	printf@f,c
  5518  001510  0EFE               	movlw	high STR_47
  5519  001512  6E2E               	movwf	printf@f+1,c
  5520  001514  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5521  001518  0100               	movlb	0	; () banked
  5522  00151A  3B8A               	swapf	??_displayLog& (0+255),f,b
  5523  00151C  0EF0               	movlw	240
  5524  00151E  178A               	andwf	??_displayLog& (0+255),f,b
  5525  001520  0100               	movlb	0	; () banked
  5526  001522  518A               	movf	??_displayLog& (0+255),w,b
  5527  001524  0F09               	addlw	9
  5528  001526  EC80  F015         	call	_eepromRead
  5529  00152A  6E2F               	movwf	?_printf+2,c
  5530  00152C  6A30               	clrf	?_printf+3,c
  5531  00152E  BE2F               	btfsc	?_printf+2,7,c
  5532  001530  0630               	decf	?_printf+3,f,c
  5533  001532  EC7C  F007         	call	_printf	;wreg free
  5534                           
  5535                           ;interface.c: 119: keycheck();
  5536  001536  EC0C  F016         	call	_keycheck	;wreg free
  5537                           
  5538                           ;interface.c: 120: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5539  00153A  0E01               	movlw	1
  5540  00153C  EC36  F016         	call	_lcdInst
  5541  001540  0E34               	movlw	52
  5542  001542  0100               	movlb	0	; () banked
  5543  001544  6F8A               	movwf	??_displayLog& (0+255),b
  5544  001546  0EF1               	movlw	241
  5545  001548                     u8057:
  5546  001548  2EE8               	decfsz	wreg,f,c
  5547  00154A  D7FE               	bra	u8057
  5548  00154C  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5549  00154E  D7FC               	bra	u8057
  5550  001550  D000               	nop2	
  5551                           
  5552                           ;interface.c: 121: printf("Run#%d    A:Next", run);
  5553  001552  0E9B               	movlw	low STR_38
  5554  001554  6E2D               	movwf	printf@f,c
  5555  001556  0EFE               	movlw	high STR_38
  5556  001558  6E2E               	movwf	printf@f+1,c
  5557  00155A  C039  F02F         	movff	displayLog@run,?_printf+2
  5558  00155E  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5559  001562  EC7C  F007         	call	_printf	;wreg free
  5560                           
  5561                           ;interface.c: 122: lcdInst(0b11000000);;
  5562  001566  0EC0               	movlw	192
  5563  001568  EC36  F016         	call	_lcdInst
  5564                           
  5565                           ;interface.c: 123: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  5566  00156C  0EEE               	movlw	low STR_49
  5567  00156E  6E2D               	movwf	printf@f,c
  5568  001570  0EFE               	movlw	high STR_49
  5569  001572  6E2E               	movwf	printf@f+1,c
  5570  001574  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5571  001578  0100               	movlb	0	; () banked
  5572  00157A  3B8A               	swapf	??_displayLog& (0+255),f,b
  5573  00157C  0EF0               	movlw	240
  5574  00157E  178A               	andwf	??_displayLog& (0+255),f,b
  5575  001580  0100               	movlb	0	; () banked
  5576  001582  518A               	movf	??_displayLog& (0+255),w,b
  5577  001584  0F0A               	addlw	10
  5578  001586  EC80  F015         	call	_eepromRead
  5579  00158A  6E2F               	movwf	?_printf+2,c
  5580  00158C  6A30               	clrf	?_printf+3,c
  5581  00158E  BE2F               	btfsc	?_printf+2,7,c
  5582  001590  0630               	decf	?_printf+3,f,c
  5583  001592  EC7C  F007         	call	_printf	;wreg free
  5584                           
  5585                           ;interface.c: 124: keycheck();
  5586  001596  EC0C  F016         	call	_keycheck	;wreg free
  5587                           
  5588                           ;interface.c: 125: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5589  00159A  0E01               	movlw	1
  5590  00159C  EC36  F016         	call	_lcdInst
  5591  0015A0  0E34               	movlw	52
  5592  0015A2  0100               	movlb	0	; () banked
  5593  0015A4  6F8A               	movwf	??_displayLog& (0+255),b
  5594  0015A6  0EF1               	movlw	241
  5595  0015A8                     u8067:
  5596  0015A8  2EE8               	decfsz	wreg,f,c
  5597  0015AA  D7FE               	bra	u8067
  5598  0015AC  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5599  0015AE  D7FC               	bra	u8067
  5600  0015B0  D000               	nop2	
  5601                           
  5602                           ;interface.c: 126: printf("Run#%d    A:Next", run);
  5603  0015B2  0E9B               	movlw	low STR_38
  5604  0015B4  6E2D               	movwf	printf@f,c
  5605  0015B6  0EFE               	movlw	high STR_38
  5606  0015B8  6E2E               	movwf	printf@f+1,c
  5607  0015BA  C039  F02F         	movff	displayLog@run,?_printf+2
  5608  0015BE  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5609  0015C2  EC7C  F007         	call	_printf	;wreg free
  5610                           
  5611                           ;interface.c: 127: lcdInst(0b11000000);;
  5612  0015C6  0EC0               	movlw	192
  5613  0015C8  EC36  F016         	call	_lcdInst
  5614                           
  5615                           ;interface.c: 128: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  5616  0015CC  0E8A               	movlw	low STR_51
  5617  0015CE  6E2D               	movwf	printf@f,c
  5618  0015D0  0EFE               	movlw	high STR_51
  5619  0015D2  6E2E               	movwf	printf@f+1,c
  5620  0015D4  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5621  0015D8  0100               	movlb	0	; () banked
  5622  0015DA  3B8A               	swapf	??_displayLog& (0+255),f,b
  5623  0015DC  0EF0               	movlw	240
  5624  0015DE  178A               	andwf	??_displayLog& (0+255),f,b
  5625  0015E0  0100               	movlb	0	; () banked
  5626  0015E2  518A               	movf	??_displayLog& (0+255),w,b
  5627  0015E4  0F0B               	addlw	11
  5628  0015E6  EC80  F015         	call	_eepromRead
  5629  0015EA  6E2F               	movwf	?_printf+2,c
  5630  0015EC  6A30               	clrf	?_printf+3,c
  5631  0015EE  BE2F               	btfsc	?_printf+2,7,c
  5632  0015F0  0630               	decf	?_printf+3,f,c
  5633  0015F2  EC7C  F007         	call	_printf	;wreg free
  5634                           
  5635                           ;interface.c: 129: keycheck();
  5636  0015F6  EC0C  F016         	call	_keycheck	;wreg free
  5637  0015FA  0012               	return		;funcret
  5638  0015FC                     __end_of_displayLog:
  5639                           	opt stack 0
  5640                           tblptru	equ	0xFF8
  5641                           prodh	equ	0xFF4
  5642                           prodl	equ	0xFF3
  5643                           intcon	equ	0xFF2
  5644                           intcon2	equ	0xFF1
  5645                           postinc0	equ	0xFEE
  5646                           wreg	equ	0xFE8
  5647                           indf2	equ	0xFDF
  5648                           fsr2h	equ	0xFDA
  5649                           fsr2l	equ	0xFD9
  5650                           status	equ	0xFD8
  5651                           
  5652 ;; *************** function _printf *****************
  5653 ;; Defined at:
  5654 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  f               2   44[COMRAM] PTR const unsigned char 
  5657 ;;		 -> STR_51(17), STR_50(17), STR_49(16), STR_48(17), 
  5658 ;;		 -> STR_47(17), STR_46(17), STR_45(16), STR_44(17), 
  5659 ;;		 -> STR_43(22), STR_42(17), STR_41(21), STR_40(17), 
  5660 ;;		 -> STR_39(12), STR_38(17), STR_37(8), STR_36(15), 
  5661 ;;		 -> STR_35(8), STR_34(16), STR_33(17), STR_32(16), 
  5662 ;;		 -> STR_31(4), STR_30(4), STR_29(4), STR_28(12), 
  5663 ;;		 -> STR_27(4), STR_26(4), STR_25(4), STR_24(4), 
  5664 ;;		 -> STR_23(4), STR_22(12), STR_21(9), STR_20(9), 
  5665 ;;		 -> STR_19(12), STR_18(4), STR_17(4), STR_16(4), 
  5666 ;;		 -> STR_15(4), STR_14(11), STR_13(13), STR_12(3), 
  5667 ;;		 -> STR_11(16), STR_10(16), STR_9(3), STR_8(16), 
  5668 ;;		 -> STR_7(16), STR_6(12), STR_5(12), STR_4(17), 
  5669 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  idx             1    0[BANK0 ] unsigned char 
  5672 ;;  tmpval          4    0        struct .
  5673 ;;  cp              3    0        PTR const unsigned char 
  5674 ;;  width           2    7[BANK0 ] int 
  5675 ;;  val             2    4[BANK0 ] unsigned int 
  5676 ;;  ap              2    1[BANK0 ] PTR void [1]
  5677 ;;		 -> ?_printf(2), 
  5678 ;;  len             2    0        unsigned int 
  5679 ;;  c               1    9[BANK0 ] char 
  5680 ;;  flag            1    6[BANK0 ] unsigned char 
  5681 ;;  prec            1    3[BANK0 ] char 
  5682 ;; Return value:  Size  Location     Type
  5683 ;;                  2   44[COMRAM] int 
  5684 ;; Registers used:
  5685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5691 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;Total ram usage:       22 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; Hardware stack levels required when called:    4
  5698 ;; This function calls:
  5699 ;;		___lwdiv
  5700 ;;		___lwmod
  5701 ;;		___wmul
  5702 ;;		_isdigit
  5703 ;;		_putch
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;;		_homescreen
  5707 ;;		_displayLog
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text14
  5712  000EF8                     __ptext14:
  5713                           	opt stack 0
  5714  000EF8                     _printf:
  5715                           	opt stack 26
  5716                           
  5717                           ;doprnt.c: 466: va_list ap;
  5718                           ;doprnt.c: 499: signed char c;
  5719                           ;doprnt.c: 501: int width;
  5720                           ;doprnt.c: 506: signed char prec;
  5721                           ;doprnt.c: 508: unsigned char flag;
  5722                           ;doprnt.c: 523: union {
  5723                           ;doprnt.c: 524: unsigned long vd;
  5724                           ;doprnt.c: 525: double integ;
  5725                           ;doprnt.c: 526: } tmpval;
  5726                           ;doprnt.c: 528: unsigned int val;
  5727                           ;doprnt.c: 529: unsigned len;
  5728                           ;doprnt.c: 530: const char * cp;
  5729                           ;doprnt.c: 533: *ap = __va_start();
  5730                           
  5731                           ;incstack = 0
  5732  000EF8  0E2F               	movlw	low (?_printf+2)
  5733  000EFA  0100               	movlb	0	; () banked
  5734  000EFC  6F81               	movwf	printf@ap& (0+255),b
  5735  000EFE  0E00               	movlw	high (?_printf+2)
  5736  000F00  0100               	movlb	0	; () banked
  5737  000F02  6F82               	movwf	(printf@ap+1)& (0+255),b
  5738                           
  5739                           ;doprnt.c: 536: while(c = *f++) {
  5740  000F04  D1AF               	goto	l5455
  5741  000F06                     l5329:
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;doprnt.c: 538: if(c != '%')
  5745  000F06  0E25               	movlw	37
  5746  000F08  0100               	movlb	0	; () banked
  5747  000F0A  1989               	xorwf	printf@c& (0+255),w,b
  5748  000F0C  B4D8               	btfsc	status,2,c
  5749  000F0E  D005               	goto	l5333
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;doprnt.c: 540: {
  5753                           ;doprnt.c: 541: (putch(c) );
  5754  000F10  0100               	movlb	0	; () banked
  5755  000F12  5189               	movf	printf@c& (0+255),w,b
  5756  000F14  EC30  F016         	call	_putch
  5757                           
  5758                           ;doprnt.c: 542: continue;
  5759  000F18  D1A5               	goto	l5455
  5760  000F1A                     l5333:
  5761                           
  5762                           ;doprnt.c: 543: }
  5763                           ;doprnt.c: 546: width = 0;
  5764  000F1A  0E00               	movlw	0
  5765  000F1C  0100               	movlb	0	; () banked
  5766  000F1E  6F88               	movwf	(printf@width+1)& (0+255),b
  5767  000F20  0E00               	movlw	0
  5768  000F22  6F87               	movwf	printf@width& (0+255),b
  5769                           
  5770                           ;doprnt.c: 548: flag = 0;
  5771  000F24  0E00               	movlw	0
  5772  000F26  0100               	movlb	0	; () banked
  5773  000F28  6F86               	movwf	printf@flag& (0+255),b
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;doprnt.c: 551: switch(*f) {
  5777                           
  5778                           ;doprnt.c: 550: for(;;) {
  5779  000F2A  D004               	goto	l5339
  5780  000F2C                     l5335:
  5781                           
  5782                           ;doprnt.c: 580: flag |= 0x04;
  5783  000F2C  0100               	movlb	0	; () banked
  5784  000F2E  8586               	bsf	printf@flag& (0+255),2,b
  5785                           
  5786                           ;doprnt.c: 581: f++;
  5787  000F30  4A2D               	infsnz	printf@f,f,c
  5788  000F32  2A2E               	incf	printf@f+1,f,c
  5789  000F34                     l5339:
  5790  000F34  C02D  FFF6         	movff	printf@f,tblptrl
  5791  000F38  C02E  FFF7         	movff	printf@f+1,tblptrh
  5792  000F3C                     	if	0	;tblptru may be non-zero
  5793  000F3C                     	endif
  5794  000F3C                     	if	0	;tblptru may be non-zero
  5795  000F3C                     	endif
  5796  000F3C  0008               	tblrd		*
  5797  000F3E  50F5               	movf	tablat,w,c
  5798                           
  5799                           ; Switch size 1, requested type "space"
  5800                           ; Number of cases is 1, Range of values is 48 to 48
  5801                           ; switch strategies available:
  5802                           ; Name         Instructions Cycles
  5803                           ; simple_byte            4     3 (average)
  5804                           ;	Chosen strategy is simple_byte
  5805  000F40  0A30               	xorlw	48	; case 48
  5806  000F42  B4D8               	btfsc	status,2,c
  5807  000F44  D7F3               	goto	l5335
  5808                           
  5809                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5810                           
  5811                           ;doprnt.c: 586: }
  5812                           
  5813                           ;doprnt.c: 585: break;
  5814  000F46  C02D  FFF6         	movff	printf@f,tblptrl
  5815  000F4A  C02E  FFF7         	movff	printf@f+1,tblptrh
  5816  000F4E                     	if	0	;tblptru may be non-zero
  5817  000F4E                     	endif
  5818  000F4E                     	if	0	;tblptru may be non-zero
  5819  000F4E                     	endif
  5820  000F4E  0008               	tblrd		*
  5821  000F50  50F5               	movf	tablat,w,c
  5822  000F52  ECF2  F015         	call	_isdigit
  5823  000F56  A0D8               	btfss	status,0,c
  5824  000F58  D039               	goto	l5357
  5825                           
  5826                           ;doprnt.c: 598: width = 0;
  5827  000F5A  0E00               	movlw	0
  5828  000F5C  0100               	movlb	0	; () banked
  5829  000F5E  6F88               	movwf	(printf@width+1)& (0+255),b
  5830  000F60  0E00               	movlw	0
  5831  000F62  6F87               	movwf	printf@width& (0+255),b
  5832  000F64                     l5345:
  5833                           
  5834                           ;doprnt.c: 600: width *= 10;
  5835  000F64  C087  F021         	movff	printf@width,___wmul@multiplier
  5836  000F68  C088  F022         	movff	printf@width+1,___wmul@multiplier+1
  5837  000F6C  0E00               	movlw	0
  5838  000F6E  6E24               	movwf	___wmul@multiplicand+1,c
  5839  000F70  0E0A               	movlw	10
  5840  000F72  6E23               	movwf	___wmul@multiplicand,c
  5841  000F74  ECBA  F015         	call	___wmul	;wreg free
  5842  000F78  C021  F087         	movff	?___wmul,printf@width
  5843  000F7C  C022  F088         	movff	?___wmul+1,printf@width+1
  5844                           
  5845                           ;doprnt.c: 601: width += *f++ - '0';
  5846  000F80  0ED0               	movlw	208
  5847  000F82  6E35               	movwf	??_printf& (0+255),c
  5848  000F84  0EFF               	movlw	255
  5849  000F86  6E36               	movwf	(??_printf+1)& (0+255),c
  5850  000F88  C02D  FFF6         	movff	printf@f,tblptrl
  5851  000F8C  C02E  FFF7         	movff	printf@f+1,tblptrh
  5852  000F90                     	if	0	;tblptru may be non-zero
  5853  000F90                     	endif
  5854  000F90                     	if	0	;tblptru may be non-zero
  5855  000F90                     	endif
  5856  000F90  0008               	tblrd		*
  5857  000F92  50F5               	movf	tablat,w,c
  5858  000F94  6E37               	movwf	(??_printf+2)& (0+255),c
  5859  000F96  6A38               	clrf	(??_printf+3)& (0+255),c
  5860  000F98  5035               	movf	??_printf,w,c
  5861  000F9A  2637               	addwf	??_printf+2,f,c
  5862  000F9C  5036               	movf	??_printf+1,w,c
  5863  000F9E  2238               	addwfc	??_printf+3,f,c
  5864  000FA0  5037               	movf	??_printf+2,w,c
  5865  000FA2  0100               	movlb	0	; () banked
  5866  000FA4  2787               	addwf	printf@width& (0+255),f,b
  5867  000FA6  5038               	movf	??_printf+3,w,c
  5868  000FA8  0100               	movlb	0	; () banked
  5869  000FAA  2388               	addwfc	(printf@width+1)& (0+255),f,b
  5870                           
  5871                           ; BSR set to: 0
  5872  000FAC  4A2D               	infsnz	printf@f,f,c
  5873  000FAE  2A2E               	incf	printf@f+1,f,c
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5877  000FB0  C02D  FFF6         	movff	printf@f,tblptrl
  5878  000FB4  C02E  FFF7         	movff	printf@f+1,tblptrh
  5879  000FB8                     	if	0	;tblptru may be non-zero
  5880  000FB8                     	endif
  5881  000FB8                     	if	0	;tblptru may be non-zero
  5882  000FB8                     	endif
  5883  000FB8  0008               	tblrd		*
  5884  000FBA  50F5               	movf	tablat,w,c
  5885  000FBC  ECF2  F015         	call	_isdigit
  5886  000FC0  A0D8               	btfss	status,0,c
  5887  000FC2  D004               	goto	l5357
  5888  000FC4  D7CF               	goto	l5345
  5889  000FC6                     l5353:
  5890                           
  5891                           ;doprnt.c: 721: flag |= 0x80;
  5892  000FC6  0100               	movlb	0	; () banked
  5893  000FC8  8F86               	bsf	printf@flag& (0+255),7,b
  5894                           
  5895                           ;doprnt.c: 723: break;
  5896  000FCA  D018               	goto	l817
  5897  000FCC                     l5357:
  5898  000FCC  C02D  FFF6         	movff	printf@f,tblptrl
  5899  000FD0  C02E  FFF7         	movff	printf@f+1,tblptrh
  5900  000FD4  4A2D               	infsnz	printf@f,f,c
  5901  000FD6  2A2E               	incf	printf@f+1,f,c
  5902  000FD8                     	if	0	;tblptru may be non-zero
  5903  000FD8                     	endif
  5904  000FD8                     	if	0	;tblptru may be non-zero
  5905  000FD8                     	endif
  5906  000FD8  0008               	tblrd		*
  5907  000FDA  CFF5 F089          	movff	tablat,printf@c
  5908  000FDE  0100               	movlb	0	; () banked
  5909  000FE0  5189               	movf	printf@c& (0+255),w,b
  5910                           
  5911                           ; Switch size 1, requested type "space"
  5912                           ; Number of cases is 4, Range of values is 0 to 120
  5913                           ; switch strategies available:
  5914                           ; Name         Instructions Cycles
  5915                           ; simple_byte           13     7 (average)
  5916                           ;	Chosen strategy is simple_byte
  5917  000FE2  0A00               	xorlw	0	; case 0
  5918  000FE4  B4D8               	btfsc	status,2,c
  5919  000FE6  0012               	return	
  5920  000FE8  0A64               	xorlw	100	; case 100
  5921  000FEA  B4D8               	btfsc	status,2,c
  5922  000FEC  D007               	goto	l817
  5923  000FEE  0A0D               	xorlw	13	; case 105
  5924  000FF0  B4D8               	btfsc	status,2,c
  5925  000FF2  D004               	goto	l817
  5926  000FF4  0A11               	xorlw	17	; case 120
  5927  000FF6  B4D8               	btfsc	status,2,c
  5928  000FF8  D7E6               	goto	l5353
  5929  000FFA  D134               	goto	l5455
  5930  000FFC                     l817:
  5931                           
  5932                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5933  000FFC  0100               	movlb	0	; () banked
  5934  000FFE  BF86               	btfsc	printf@flag& (0+255),7,b
  5935  001000  D019               	goto	l5369
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;doprnt.c: 1253: {
  5939                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5940  001002  C081  FFD9         	movff	printf@ap,fsr2l
  5941  001006  C082  FFDA         	movff	printf@ap+1,fsr2h
  5942  00100A  CFDE F084          	movff	postinc2,printf@val
  5943  00100E  CFDD F085          	movff	postdec2,printf@val+1
  5944                           
  5945                           ; BSR set to: 0
  5946  001012  0E02               	movlw	2
  5947  001014  0100               	movlb	0	; () banked
  5948  001016  2781               	addwf	printf@ap& (0+255),f,b
  5949  001018  0E00               	movlw	0
  5950  00101A  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;doprnt.c: 1261: if((int)val < 0) {
  5954  00101C  0100               	movlb	0	; () banked
  5955  00101E  AF85               	btfss	(printf@val+1)& (0+255),7,b
  5956  001020  D053               	goto	l5403
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;doprnt.c: 1262: flag |= 0x03;
  5960  001022  0E03               	movlw	3
  5961  001024  0100               	movlb	0	; () banked
  5962  001026  1386               	iorwf	printf@flag& (0+255),f,b
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;doprnt.c: 1263: val = -val;
  5966  001028  0100               	movlb	0	; () banked
  5967  00102A  6D84               	negf	printf@val& (0+255),b
  5968  00102C  1F85               	comf	(printf@val+1)& (0+255),f,b
  5969  00102E  B0D8               	btfsc	status,0,c
  5970  001030  2B85               	incf	(printf@val+1)& (0+255),f,b
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;doprnt.c: 1264: }
  5974                           ;doprnt.c: 1266: }
  5975  001032  D04A               	goto	l5403
  5976  001034                     l5369:
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;doprnt.c: 1268: else
  5980                           ;doprnt.c: 1273: {
  5981                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5982  001034  C081  FFD9         	movff	printf@ap,fsr2l
  5983  001038  C082  FFDA         	movff	printf@ap+1,fsr2h
  5984  00103C  CFDE F084          	movff	postinc2,printf@val
  5985  001040  CFDD F085          	movff	postdec2,printf@val+1
  5986                           
  5987                           ; BSR set to: 0
  5988  001044  0E02               	movlw	2
  5989  001046  0100               	movlb	0	; () banked
  5990  001048  2781               	addwf	printf@ap& (0+255),f,b
  5991  00104A  0E00               	movlw	0
  5992  00104C  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;doprnt.c: 1287: }
  5996                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5997  00104E  D03C               	goto	l5403
  5998  001050                     l5373:
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6002  001050  0E01               	movlw	1
  6003  001052  0100               	movlb	0	; () banked
  6004  001054  6F89               	movwf	printf@c& (0+255),b
  6005  001056                     l5375:
  6006                           
  6007                           ; BSR set to: 0
  6008  001056  0E05               	movlw	5
  6009  001058  0100               	movlb	0	; () banked
  6010  00105A  1989               	xorwf	printf@c& (0+255),w,b
  6011  00105C  B4D8               	btfsc	status,2,c
  6012  00105E  D03D               	goto	l5405
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;doprnt.c: 1306: if(val < dpowers[c])
  6016                           
  6017                           ; BSR set to: 0
  6018                           
  6019                           ; BSR set to: 0
  6020  001060  0100               	movlb	0	; () banked
  6021  001062  5189               	movf	printf@c& (0+255),w,b
  6022  001064  0D02               	mullw	2
  6023  001066  0E24               	movlw	low _dpowers
  6024  001068  24F3               	addwf	prodl,w,c
  6025  00106A  6EF6               	movwf	tblptrl,c
  6026  00106C  0EFE               	movlw	high _dpowers
  6027  00106E  20F4               	addwfc	prodh,w,c
  6028  001070  6EF7               	movwf	tblptrh,c
  6029  001072                     	if	0	;There are less than 3 active tblptr bytes
  6030  001072                     	endif
  6031  001072  0009               	tblrd		*+
  6032  001074  50F5               	movf	tablat,w,c
  6033  001076  0100               	movlb	0	; () banked
  6034  001078  5D84               	subwf	printf@val& (0+255),w,b
  6035  00107A  0009               	tblrd		*+
  6036  00107C  50F5               	movf	tablat,w,c
  6037  00107E  0100               	movlb	0	; () banked
  6038  001080  5985               	subwfb	(printf@val+1)& (0+255),w,b
  6039  001082  A0D8               	btfss	status,0,c
  6040  001084  D02A               	goto	l5405
  6041                           
  6042                           ; BSR set to: 0
  6043                           
  6044                           ; BSR set to: 0
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;doprnt.c: 1307: break;
  6048  001086  0100               	movlb	0	; () banked
  6049  001088  2B89               	incf	printf@c& (0+255),f,b
  6050  00108A  D7E5               	goto	l5375
  6051  00108C                     l5387:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6055  00108C  0E01               	movlw	1
  6056  00108E  0100               	movlb	0	; () banked
  6057  001090  6F89               	movwf	printf@c& (0+255),b
  6058  001092                     l5389:
  6059                           
  6060                           ; BSR set to: 0
  6061  001092  0E04               	movlw	4
  6062  001094  0100               	movlb	0	; () banked
  6063  001096  1989               	xorwf	printf@c& (0+255),w,b
  6064  001098  B4D8               	btfsc	status,2,c
  6065  00109A  D01F               	goto	l5405
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6069                           
  6070                           ; BSR set to: 0
  6071                           
  6072                           ; BSR set to: 0
  6073  00109C  0100               	movlb	0	; () banked
  6074  00109E  5189               	movf	printf@c& (0+255),w,b
  6075  0010A0  0D02               	mullw	2
  6076  0010A2  0E2E               	movlw	low _hexpowers
  6077  0010A4  24F3               	addwf	prodl,w,c
  6078  0010A6  6EF6               	movwf	tblptrl,c
  6079  0010A8  0EFE               	movlw	high _hexpowers
  6080  0010AA  20F4               	addwfc	prodh,w,c
  6081  0010AC  6EF7               	movwf	tblptrh,c
  6082  0010AE                     	if	0	;There are less than 3 active tblptr bytes
  6083  0010AE                     	endif
  6084  0010AE  0009               	tblrd		*+
  6085  0010B0  50F5               	movf	tablat,w,c
  6086  0010B2  0100               	movlb	0	; () banked
  6087  0010B4  5D84               	subwf	printf@val& (0+255),w,b
  6088  0010B6  0009               	tblrd		*+
  6089  0010B8  50F5               	movf	tablat,w,c
  6090  0010BA  0100               	movlb	0	; () banked
  6091  0010BC  5985               	subwfb	(printf@val+1)& (0+255),w,b
  6092  0010BE  A0D8               	btfss	status,0,c
  6093  0010C0  D00C               	goto	l5405
  6094                           
  6095                           ; BSR set to: 0
  6096                           
  6097                           ; BSR set to: 0
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;doprnt.c: 1318: break;
  6101  0010C2  0100               	movlb	0	; () banked
  6102  0010C4  2B89               	incf	printf@c& (0+255),f,b
  6103  0010C6  D7E5               	goto	l5389
  6104  0010C8                     l5403:
  6105                           
  6106                           ; BSR set to: 0
  6107  0010C8  0100               	movlb	0	; () banked
  6108  0010CA  5186               	movf	printf@flag& (0+255),w,b
  6109  0010CC  0B80               	andlw	128
  6110                           
  6111                           ; Switch size 1, requested type "space"
  6112                           ; Number of cases is 2, Range of values is 0 to 128
  6113                           ; switch strategies available:
  6114                           ; Name         Instructions Cycles
  6115                           ; simple_byte            7     4 (average)
  6116                           ;	Chosen strategy is simple_byte
  6117  0010CE  0A00               	xorlw	0	; case 0
  6118  0010D0  B4D8               	btfsc	status,2,c
  6119  0010D2  D7BE               	goto	l5373
  6120  0010D4  0A80               	xorlw	128	; case 128
  6121  0010D6  B4D8               	btfsc	status,2,c
  6122  0010D8  D7D9               	goto	l5387
  6123  0010DA                     l5405:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6127  0010DA  0100               	movlb	0	; () banked
  6128  0010DC  5187               	movf	printf@width& (0+255),w,b
  6129  0010DE  0100               	movlb	0	; () banked
  6130  0010E0  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6131  0010E2  B4D8               	btfsc	status,2,c
  6132  0010E4  D00A               	goto	l5411
  6133                           
  6134                           ; BSR set to: 0
  6135  0010E6  C086  F035         	movff	printf@flag,??_printf
  6136  0010EA  0E03               	movlw	3
  6137  0010EC  1635               	andwf	??_printf,f,c
  6138  0010EE  B4D8               	btfsc	status,2,c
  6139  0010F0  D004               	goto	l5411
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;doprnt.c: 1346: width--;
  6143  0010F2  0100               	movlb	0	; () banked
  6144  0010F4  0787               	decf	printf@width& (0+255),f,b
  6145  0010F6  A0D8               	btfss	status,0,c
  6146  0010F8  0788               	decf	(printf@width+1)& (0+255),f,b
  6147  0010FA                     l5411:
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;doprnt.c: 1381: if(width > c)
  6151  0010FA  0E80               	movlw	128
  6152  0010FC  0100               	movlb	0	; () banked
  6153  0010FE  BF89               	btfsc	printf@c& (0+255),7,b
  6154  001100  0E7F               	movlw	127
  6155  001102  6E35               	movwf	??_printf& (0+255),c
  6156  001104  0100               	movlb	0	; () banked
  6157  001106  5187               	movf	printf@width& (0+255),w,b
  6158  001108  0100               	movlb	0	; () banked
  6159  00110A  5D89               	subwf	printf@c& (0+255),w,b
  6160  00110C  0100               	movlb	0	; () banked
  6161  00110E  5188               	movf	(printf@width+1)& (0+255),w,b
  6162  001110  0A80               	xorlw	128
  6163  001112  5835               	subwfb	??_printf& (0+255),w,c
  6164  001114  B0D8               	btfsc	status,0,c
  6165  001116  D00B               	goto	l5415
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;doprnt.c: 1382: width -= c;
  6169  001118  0100               	movlb	0	; () banked
  6170  00111A  5189               	movf	printf@c& (0+255),w,b
  6171  00111C  0100               	movlb	0	; () banked
  6172  00111E  5F87               	subwf	printf@width& (0+255),f,b
  6173  001120  0E00               	movlw	0
  6174  001122  0100               	movlb	0	; () banked
  6175  001124  BF89               	btfsc	printf@c& (0+255),7,b
  6176  001126  0EFF               	movlw	255
  6177  001128  0100               	movlb	0	; () banked
  6178  00112A  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  6179  00112C  D005               	goto	l5417
  6180  00112E                     l5415:
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;doprnt.c: 1383: else
  6184                           ;doprnt.c: 1384: width = 0;
  6185  00112E  0E00               	movlw	0
  6186  001130  0100               	movlb	0	; () banked
  6187  001132  6F88               	movwf	(printf@width+1)& (0+255),b
  6188  001134  0E00               	movlw	0
  6189  001136  6F87               	movwf	printf@width& (0+255),b
  6190  001138                     l5417:
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;doprnt.c: 1387: if(flag & 0x04) {
  6194  001138  0100               	movlb	0	; () banked
  6195  00113A  A586               	btfss	printf@flag& (0+255),2,b
  6196  00113C  D017               	goto	l5429
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;doprnt.c: 1392: if(flag & 0x03)
  6200  00113E  C086  F035         	movff	printf@flag,??_printf
  6201  001142  0E03               	movlw	3
  6202  001144  1635               	andwf	??_printf,f,c
  6203  001146  B4D8               	btfsc	status,2,c
  6204  001148  D003               	goto	l5423
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;doprnt.c: 1393: (putch('-') );
  6208  00114A  0E2D               	movlw	45
  6209  00114C  EC30  F016         	call	_putch
  6210  001150                     l5423:
  6211                           
  6212                           ;doprnt.c: 1415: if(width)
  6213  001150  0100               	movlb	0	; () banked
  6214  001152  5187               	movf	printf@width& (0+255),w,b
  6215  001154  0100               	movlb	0	; () banked
  6216  001156  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6217  001158  B4D8               	btfsc	status,2,c
  6218  00115A  D024               	goto	l5439
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;doprnt.c: 1417: (putch('0') );
  6222                           
  6223                           ; BSR set to: 0
  6224                           
  6225                           ;doprnt.c: 1416: do
  6226  00115C  0E30               	movlw	48
  6227  00115E  EC30  F016         	call	_putch
  6228                           
  6229                           ;doprnt.c: 1418: while(--width);
  6230  001162  0100               	movlb	0	; () banked
  6231  001164  0787               	decf	printf@width& (0+255),f,b
  6232  001166  A0D8               	btfss	status,0,c
  6233  001168  0788               	decf	(printf@width+1)& (0+255),f,b
  6234  00116A  D7F2               	goto	l5423
  6235  00116C                     l5429:
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;doprnt.c: 1422: {
  6239                           ;doprnt.c: 1424: if(width
  6240                           ;doprnt.c: 1428: )
  6241  00116C  0100               	movlb	0	; () banked
  6242  00116E  5187               	movf	printf@width& (0+255),w,b
  6243  001170  0100               	movlb	0	; () banked
  6244  001172  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6245  001174  B4D8               	btfsc	status,2,c
  6246  001176  D00D               	goto	l5435
  6247  001178                     l5431:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;doprnt.c: 1430: (putch(' ') );
  6251  001178  0E20               	movlw	32
  6252  00117A  EC30  F016         	call	_putch
  6253                           
  6254                           ;doprnt.c: 1431: while(--width);
  6255  00117E  0100               	movlb	0	; () banked
  6256  001180  0787               	decf	printf@width& (0+255),f,b
  6257  001182  A0D8               	btfss	status,0,c
  6258  001184  0788               	decf	(printf@width+1)& (0+255),f,b
  6259  001186  0100               	movlb	0	; () banked
  6260  001188  5187               	movf	printf@width& (0+255),w,b
  6261  00118A  0100               	movlb	0	; () banked
  6262  00118C  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6263  00118E  A4D8               	btfss	status,2,c
  6264  001190  D7F3               	goto	l5431
  6265  001192                     l5435:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;doprnt.c: 1438: if(flag & 0x03)
  6269  001192  C086  F035         	movff	printf@flag,??_printf
  6270  001196  0E03               	movlw	3
  6271  001198  1635               	andwf	??_printf,f,c
  6272  00119A  B4D8               	btfsc	status,2,c
  6273  00119C  D003               	goto	l5439
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;doprnt.c: 1439: (putch('-') );
  6277  00119E  0E2D               	movlw	45
  6278  0011A0  EC30  F016         	call	_putch
  6279  0011A4                     l5439:
  6280                           
  6281                           ;doprnt.c: 1469: }
  6282                           ;doprnt.c: 1472: prec = c;
  6283  0011A4  C089  F083         	movff	printf@c,printf@prec
  6284                           
  6285                           ;doprnt.c: 1474: while(prec--) {
  6286  0011A8  D057               	goto	l5453
  6287  0011AA                     l5441:
  6288                           
  6289                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6290  0011AA  0100               	movlb	0	; () banked
  6291  0011AC  5183               	movf	printf@prec& (0+255),w,b
  6292  0011AE  0D02               	mullw	2
  6293  0011B0  0E24               	movlw	low _dpowers
  6294  0011B2  24F3               	addwf	prodl,w,c
  6295  0011B4  6EF6               	movwf	tblptrl,c
  6296  0011B6  0EFE               	movlw	high _dpowers
  6297  0011B8  20F4               	addwfc	prodh,w,c
  6298  0011BA  6EF7               	movwf	tblptrh,c
  6299  0011BC                     	if	0	;There are less than 3 active tblptr bytes
  6300  0011BC                     	endif
  6301  0011BC  0009               	tblrd		*+
  6302  0011BE  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6303  0011C2  000A               	tblrd		*-
  6304  0011C4  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6305  0011C8  C084  F021         	movff	printf@val,___lwdiv@dividend
  6306  0011CC  C085  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6307  0011D0  ECD2  F014         	call	___lwdiv	;wreg free
  6308  0011D4  C021  F028         	movff	?___lwdiv,___lwmod@dividend
  6309  0011D8  C022  F029         	movff	?___lwdiv+1,___lwmod@dividend+1
  6310  0011DC  0E00               	movlw	0
  6311  0011DE  6E2B               	movwf	___lwmod@divisor+1,c
  6312  0011E0  0E0A               	movlw	10
  6313  0011E2  6E2A               	movwf	___lwmod@divisor,c
  6314  0011E4  EC43  F015         	call	___lwmod	;wreg free
  6315  0011E8  5028               	movf	?___lwmod,w,c
  6316  0011EA  0F30               	addlw	48
  6317  0011EC  0100               	movlb	0	; () banked
  6318  0011EE  6F89               	movwf	printf@c& (0+255),b
  6319                           
  6320                           ;doprnt.c: 1491: break;
  6321  0011F0  D02F               	goto	l5451
  6322  0011F2                     l5443:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;doprnt.c: 1499: {
  6326                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6327  0011F2  C084  F021         	movff	printf@val,___lwdiv@dividend
  6328  0011F6  C085  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6329  0011FA  0100               	movlb	0	; () banked
  6330  0011FC  5183               	movf	printf@prec& (0+255),w,b
  6331  0011FE  0D02               	mullw	2
  6332  001200  0E2E               	movlw	low _hexpowers
  6333  001202  24F3               	addwf	prodl,w,c
  6334  001204  6EF6               	movwf	tblptrl,c
  6335  001206  0EFE               	movlw	high _hexpowers
  6336  001208  20F4               	addwfc	prodh,w,c
  6337  00120A  6EF7               	movwf	tblptrh,c
  6338  00120C                     	if	0	;There are less than 3 active tblptr bytes
  6339  00120C                     	endif
  6340  00120C  0009               	tblrd		*+
  6341  00120E  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6342  001212  000A               	tblrd		*-
  6343  001214  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6344  001218  ECD2  F014         	call	___lwdiv	;wreg free
  6345  00121C  5021               	movf	?___lwdiv,w,c
  6346  00121E  0B0F               	andlw	15
  6347  001220  0100               	movlb	0	; () banked
  6348  001222  6F80               	movwf	printf@idx& (0+255),b
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6352  001224  0100               	movlb	0	; () banked
  6353  001226  5180               	movf	printf@idx& (0+255),w,b
  6354  001228  0D01               	mullw	1
  6355  00122A  0E68               	movlw	low STR_52
  6356  00122C  24F3               	addwf	prodl,w,c
  6357  00122E  6EF6               	movwf	tblptrl,c
  6358  001230  0EFE               	movlw	high STR_52
  6359  001232  20F4               	addwfc	prodh,w,c
  6360  001234  6EF7               	movwf	tblptrh,c
  6361  001236                     	if	0	;There are less than 3 active tblptr bytes
  6362  001236                     	endif
  6363  001236  0008               	tblrd		*
  6364  001238  CFF5 F089          	movff	tablat,printf@c
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;doprnt.c: 1523: }
  6368                           
  6369                           ;doprnt.c: 1508: }
  6370                           ;doprnt.c: 1510: break;
  6371  00123C  D009               	goto	l5451
  6372  00123E                     l5449:
  6373  00123E  0100               	movlb	0	; () banked
  6374  001240  5186               	movf	printf@flag& (0+255),w,b
  6375  001242  0B80               	andlw	128
  6376                           
  6377                           ; Switch size 1, requested type "space"
  6378                           ; Number of cases is 2, Range of values is 0 to 128
  6379                           ; switch strategies available:
  6380                           ; Name         Instructions Cycles
  6381                           ; simple_byte            7     4 (average)
  6382                           ;	Chosen strategy is simple_byte
  6383  001244  0A00               	xorlw	0	; case 0
  6384  001246  B4D8               	btfsc	status,2,c
  6385  001248  D7B0               	goto	l5441
  6386  00124A  0A80               	xorlw	128	; case 128
  6387  00124C  B4D8               	btfsc	status,2,c
  6388  00124E  D7D1               	goto	l5443
  6389  001250                     l5451:
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;doprnt.c: 1524: (putch(c) );
  6393  001250  0100               	movlb	0	; () banked
  6394  001252  5189               	movf	printf@c& (0+255),w,b
  6395  001254  EC30  F016         	call	_putch
  6396  001258                     l5453:
  6397  001258  0100               	movlb	0	; () banked
  6398  00125A  0783               	decf	printf@prec& (0+255),f,b
  6399  00125C  0100               	movlb	0	; () banked
  6400  00125E  2983               	incf	printf@prec& (0+255),w,b
  6401  001260  A4D8               	btfss	status,2,c
  6402  001262  D7ED               	goto	l5449
  6403  001264                     l5455:
  6404  001264  C02D  FFF6         	movff	printf@f,tblptrl
  6405  001268  C02E  FFF7         	movff	printf@f+1,tblptrh
  6406  00126C  4A2D               	infsnz	printf@f,f,c
  6407  00126E  2A2E               	incf	printf@f+1,f,c
  6408  001270                     	if	0	;tblptru may be non-zero
  6409  001270                     	endif
  6410  001270                     	if	0	;tblptru may be non-zero
  6411  001270                     	endif
  6412  001270  0008               	tblrd		*
  6413  001272  CFF5 F089          	movff	tablat,printf@c
  6414  001276  0100               	movlb	0	; () banked
  6415  001278  5189               	movf	printf@c& (0+255),w,b
  6416  00127A  B4D8               	btfsc	status,2,c
  6417  00127C  0012               	return	
  6418  00127E  D643               	goto	l5329
  6419  001280                     __end_of_printf:
  6420                           	opt stack 0
  6421                           tblptru	equ	0xFF8
  6422                           tblptrh	equ	0xFF7
  6423                           tblptrl	equ	0xFF6
  6424                           tablat	equ	0xFF5
  6425                           prodh	equ	0xFF4
  6426                           prodl	equ	0xFF3
  6427                           intcon	equ	0xFF2
  6428                           intcon2	equ	0xFF1
  6429                           postinc0	equ	0xFEE
  6430                           wreg	equ	0xFE8
  6431                           indf2	equ	0xFDF
  6432                           postinc2	equ	0xFDE
  6433                           postdec2	equ	0xFDD
  6434                           fsr2h	equ	0xFDA
  6435                           fsr2l	equ	0xFD9
  6436                           status	equ	0xFD8
  6437                           
  6438 ;; *************** function _putch *****************
  6439 ;; Defined at:
  6440 ;;		line 27 in file "lcd.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  data            1    wreg     unsigned char 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  data            1   34[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;Total ram usage:        1 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    3
  6461 ;; This function calls:
  6462 ;;		_lcdNibble
  6463 ;; This function is called by:
  6464 ;;		_printf
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text15
  6469  002C60                     __ptext15:
  6470                           	opt stack 0
  6471  002C60                     _putch:
  6472                           	opt stack 26
  6473                           
  6474                           ;incstack = 0
  6475                           ;putch@data stored from wreg
  6476  002C60  6E23               	movwf	putch@data,c
  6477                           
  6478                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6479  002C62  848C               	bsf	3980,2,c	;volatile
  6480                           
  6481                           ;lcd.c: 29: lcdNibble(data);
  6482  002C64  5023               	movf	putch@data,w,c
  6483  002C66  ECA7  F014         	call	_lcdNibble
  6484  002C6A  0012               	return		;funcret
  6485  002C6C                     __end_of_putch:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodh	equ	0xFF4
  6492                           prodl	equ	0xFF3
  6493                           intcon	equ	0xFF2
  6494                           intcon2	equ	0xFF1
  6495                           postinc0	equ	0xFEE
  6496                           wreg	equ	0xFE8
  6497                           indf2	equ	0xFDF
  6498                           postinc2	equ	0xFDE
  6499                           postdec2	equ	0xFDD
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8
  6503                           
  6504 ;; *************** function _isdigit *****************
  6505 ;; Defined at:
  6506 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  c               1    wreg     unsigned char 
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  c               1   34[COMRAM] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;		None               void
  6513 ;; Registers used:
  6514 ;;		wreg, status,2, status,0
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;Total ram usage:        3 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    2
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_printf
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text16
  6535  002BE4                     __ptext16:
  6536                           	opt stack 0
  6537  002BE4                     _isdigit:
  6538                           	opt stack 27
  6539                           
  6540                           ;incstack = 0
  6541                           ;isdigit@c stored from wreg
  6542  002BE4  6E23               	movwf	isdigit@c,c
  6543  002BE6  0E00               	movlw	0
  6544  002BE8  6E22               	movwf	_isdigit$1453,c
  6545  002BEA  0E3A               	movlw	58
  6546  002BEC  6023               	cpfslt	isdigit@c,c
  6547  002BEE  D005               	goto	l5265
  6548  002BF0  0E2F               	movlw	47
  6549  002BF2  6423               	cpfsgt	isdigit@c,c
  6550  002BF4  D002               	goto	l5265
  6551  002BF6  0E01               	movlw	1
  6552  002BF8  6E22               	movwf	_isdigit$1453,c
  6553  002BFA                     l5265:
  6554  002BFA  C022  F021         	movff	_isdigit$1453,??_isdigit
  6555  002BFE  3021               	rrcf	??_isdigit,w,c
  6556  002C00  0012               	return	
  6557  002C02                     __end_of_isdigit:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           tblptrh	equ	0xFF7
  6561                           tblptrl	equ	0xFF6
  6562                           tablat	equ	0xFF5
  6563                           prodh	equ	0xFF4
  6564                           prodl	equ	0xFF3
  6565                           intcon	equ	0xFF2
  6566                           intcon2	equ	0xFF1
  6567                           postinc0	equ	0xFEE
  6568                           wreg	equ	0xFE8
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576 ;; *************** function ___wmul *****************
  6577 ;; Defined at:
  6578 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  multiplier      2   32[COMRAM] unsigned int 
  6581 ;;  multiplicand    2   34[COMRAM] unsigned int 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  product         2   36[COMRAM] unsigned int 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  2   32[COMRAM] unsigned int 
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0, prodl, prodh
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6593 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;Total ram usage:        6 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    2
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_printf
  6604 ;;		_timePassed
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text17
  6609  002B74                     __ptext17:
  6610                           	opt stack 0
  6611  002B74                     ___wmul:
  6612                           	opt stack 27
  6613                           
  6614                           ;incstack = 0
  6615  002B74  5021               	movf	___wmul@multiplier,w,c
  6616  002B76  0223               	mulwf	___wmul@multiplicand,c
  6617  002B78  CFF3 F025          	movff	prodl,___wmul@product
  6618  002B7C  CFF4 F026          	movff	prodh,___wmul@product+1
  6619  002B80  5021               	movf	___wmul@multiplier,w,c
  6620  002B82  0224               	mulwf	___wmul@multiplicand+1,c
  6621  002B84  50F3               	movf	prodl,w,c
  6622  002B86  2626               	addwf	___wmul@product+1,f,c
  6623  002B88  5022               	movf	___wmul@multiplier+1,w,c
  6624  002B8A  0223               	mulwf	___wmul@multiplicand,c
  6625  002B8C  50F3               	movf	prodl,w,c
  6626  002B8E  2626               	addwf	___wmul@product+1,f,c
  6627  002B90  C025  F021         	movff	___wmul@product,?___wmul
  6628  002B94  C026  F022         	movff	___wmul@product+1,?___wmul+1
  6629  002B98  0012               	return	
  6630  002B9A                     __end_of___wmul:
  6631                           	opt stack 0
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           intcon2	equ	0xFF1
  6640                           postinc0	equ	0xFEE
  6641                           wreg	equ	0xFE8
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function ___lwmod *****************
  6650 ;; Defined at:
  6651 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;  dividend        2   39[COMRAM] unsigned int 
  6654 ;;  divisor         2   41[COMRAM] unsigned int 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;  counter         1   43[COMRAM] unsigned char 
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  2   39[COMRAM] unsigned int 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;Total ram usage:        5 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    2
  6673 ;; This function calls:
  6674 ;;		Nothing
  6675 ;; This function is called by:
  6676 ;;		_printf
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text18
  6681  002A86                     __ptext18:
  6682                           	opt stack 0
  6683  002A86                     ___lwmod:
  6684                           	opt stack 27
  6685                           
  6686                           ;incstack = 0
  6687  002A86  502A               	movf	___lwmod@divisor,w,c
  6688  002A88  102B               	iorwf	___lwmod@divisor+1,w,c
  6689  002A8A  B4D8               	btfsc	status,2,c
  6690  002A8C  D018               	goto	l1272
  6691  002A8E  0E01               	movlw	1
  6692  002A90  6E2C               	movwf	___lwmod@counter,c
  6693  002A92  D004               	goto	l5303
  6694  002A94                     l5301:
  6695  002A94  90D8               	bcf	status,0,c
  6696  002A96  362A               	rlcf	___lwmod@divisor,f,c
  6697  002A98  362B               	rlcf	___lwmod@divisor+1,f,c
  6698  002A9A  2A2C               	incf	___lwmod@counter,f,c
  6699  002A9C                     l5303:
  6700  002A9C  AE2B               	btfss	___lwmod@divisor+1,7,c
  6701  002A9E  D7FA               	goto	l5301
  6702  002AA0                     l5305:
  6703  002AA0  502A               	movf	___lwmod@divisor,w,c
  6704  002AA2  5C28               	subwf	___lwmod@dividend,w,c
  6705  002AA4  502B               	movf	___lwmod@divisor+1,w,c
  6706  002AA6  5829               	subwfb	___lwmod@dividend+1,w,c
  6707  002AA8  A0D8               	btfss	status,0,c
  6708  002AAA  D004               	goto	l5309
  6709  002AAC  502A               	movf	___lwmod@divisor,w,c
  6710  002AAE  5E28               	subwf	___lwmod@dividend,f,c
  6711  002AB0  502B               	movf	___lwmod@divisor+1,w,c
  6712  002AB2  5A29               	subwfb	___lwmod@dividend+1,f,c
  6713  002AB4                     l5309:
  6714  002AB4  90D8               	bcf	status,0,c
  6715  002AB6  322B               	rrcf	___lwmod@divisor+1,f,c
  6716  002AB8  322A               	rrcf	___lwmod@divisor,f,c
  6717  002ABA  2E2C               	decfsz	___lwmod@counter,f,c
  6718  002ABC  D7F1               	goto	l5305
  6719  002ABE                     l1272:
  6720  002ABE  C028  F028         	movff	___lwmod@dividend,?___lwmod
  6721  002AC2  C029  F029         	movff	___lwmod@dividend+1,?___lwmod+1
  6722  002AC6  0012               	return		;funcret
  6723  002AC8                     __end_of___lwmod:
  6724                           	opt stack 0
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           intcon	equ	0xFF2
  6732                           intcon2	equ	0xFF1
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function ___lwdiv *****************
  6743 ;; Defined at:
  6744 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  dividend        2   32[COMRAM] unsigned int 
  6747 ;;  divisor         2   34[COMRAM] unsigned int 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  quotient        2   37[COMRAM] unsigned int 
  6750 ;;  counter         1   36[COMRAM] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  2   32[COMRAM] unsigned int 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:        7 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    2
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_printf
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text19
  6775  0029A4                     __ptext19:
  6776                           	opt stack 0
  6777  0029A4                     ___lwdiv:
  6778                           	opt stack 27
  6779                           
  6780                           ;incstack = 0
  6781  0029A4  0E00               	movlw	0
  6782  0029A6  6E27               	movwf	___lwdiv@quotient+1,c
  6783  0029A8  0E00               	movlw	0
  6784  0029AA  6E26               	movwf	___lwdiv@quotient,c
  6785  0029AC  5023               	movf	___lwdiv@divisor,w,c
  6786  0029AE  1024               	iorwf	___lwdiv@divisor+1,w,c
  6787  0029B0  B4D8               	btfsc	status,2,c
  6788  0029B2  D01C               	goto	l1262
  6789  0029B4  0E01               	movlw	1
  6790  0029B6  6E25               	movwf	___lwdiv@counter,c
  6791  0029B8  D004               	goto	l5283
  6792  0029BA                     l5281:
  6793  0029BA  90D8               	bcf	status,0,c
  6794  0029BC  3623               	rlcf	___lwdiv@divisor,f,c
  6795  0029BE  3624               	rlcf	___lwdiv@divisor+1,f,c
  6796  0029C0  2A25               	incf	___lwdiv@counter,f,c
  6797  0029C2                     l5283:
  6798  0029C2  AE24               	btfss	___lwdiv@divisor+1,7,c
  6799  0029C4  D7FA               	goto	l5281
  6800  0029C6                     l5285:
  6801  0029C6  90D8               	bcf	status,0,c
  6802  0029C8  3626               	rlcf	___lwdiv@quotient,f,c
  6803  0029CA  3627               	rlcf	___lwdiv@quotient+1,f,c
  6804  0029CC  5023               	movf	___lwdiv@divisor,w,c
  6805  0029CE  5C21               	subwf	___lwdiv@dividend,w,c
  6806  0029D0  5024               	movf	___lwdiv@divisor+1,w,c
  6807  0029D2  5822               	subwfb	___lwdiv@dividend+1,w,c
  6808  0029D4  A0D8               	btfss	status,0,c
  6809  0029D6  D005               	goto	l5293
  6810  0029D8  5023               	movf	___lwdiv@divisor,w,c
  6811  0029DA  5E21               	subwf	___lwdiv@dividend,f,c
  6812  0029DC  5024               	movf	___lwdiv@divisor+1,w,c
  6813  0029DE  5A22               	subwfb	___lwdiv@dividend+1,f,c
  6814  0029E0  8026               	bsf	___lwdiv@quotient,0,c
  6815  0029E2                     l5293:
  6816  0029E2  90D8               	bcf	status,0,c
  6817  0029E4  3224               	rrcf	___lwdiv@divisor+1,f,c
  6818  0029E6  3223               	rrcf	___lwdiv@divisor,f,c
  6819  0029E8  2E25               	decfsz	___lwdiv@counter,f,c
  6820  0029EA  D7ED               	goto	l5285
  6821  0029EC                     l1262:
  6822  0029EC  C026  F021         	movff	___lwdiv@quotient,?___lwdiv
  6823  0029F0  C027  F022         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6824  0029F4  0012               	return		;funcret
  6825  0029F6                     __end_of___lwdiv:
  6826                           	opt stack 0
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           intcon2	equ	0xFF1
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           postdec2	equ	0xFDD
  6840                           fsr2h	equ	0xFDA
  6841                           fsr2l	equ	0xFD9
  6842                           status	equ	0xFD8
  6843                           
  6844 ;; *************** function _lcdInst *****************
  6845 ;; Defined at:
  6846 ;;		line 22 in file "lcd.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  data            1    wreg     unsigned char 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;  data            1   34[COMRAM] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      void 
  6853 ;; Registers used:
  6854 ;;		wreg, status,2, status,0, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;Total ram usage:        1 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    3
  6867 ;; This function calls:
  6868 ;;		_lcdNibble
  6869 ;; This function is called by:
  6870 ;;		_main
  6871 ;;		_initLCD
  6872 ;;		_homescreen
  6873 ;;		_displayLog
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text20
  6878  002C6C                     __ptext20:
  6879                           	opt stack 0
  6880  002C6C                     _lcdInst:
  6881                           	opt stack 27
  6882                           
  6883                           ;incstack = 0
  6884                           ;lcdInst@data stored from wreg
  6885  002C6C  6E23               	movwf	lcdInst@data,c
  6886                           
  6887                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6888  002C6E  948C               	bcf	3980,2,c	;volatile
  6889                           
  6890                           ;lcd.c: 24: lcdNibble(data);
  6891  002C70  5023               	movf	lcdInst@data,w,c
  6892  002C72  ECA7  F014         	call	_lcdNibble
  6893  002C76  0012               	return		;funcret
  6894  002C78                     __end_of_lcdInst:
  6895                           	opt stack 0
  6896                           tblptru	equ	0xFF8
  6897                           tblptrh	equ	0xFF7
  6898                           tblptrl	equ	0xFF6
  6899                           tablat	equ	0xFF5
  6900                           prodh	equ	0xFF4
  6901                           prodl	equ	0xFF3
  6902                           intcon	equ	0xFF2
  6903                           intcon2	equ	0xFF1
  6904                           postinc0	equ	0xFEE
  6905                           wreg	equ	0xFE8
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _lcdNibble *****************
  6914 ;; Defined at:
  6915 ;;		line 32 in file "lcd.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  data            1    wreg     unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  data            1   33[COMRAM] unsigned char 
  6920 ;;  temp            1   32[COMRAM] unsigned char 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;Total ram usage:        2 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    2
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_lcdInst
  6941 ;;		_putch
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text21
  6946  00294E                     __ptext21:
  6947                           	opt stack 0
  6948  00294E                     _lcdNibble:
  6949                           	opt stack 26
  6950                           
  6951                           ;incstack = 0
  6952                           ;lcdNibble@data stored from wreg
  6953  00294E  6E22               	movwf	lcdNibble@data,c
  6954                           
  6955                           ;lcd.c: 34: char temp = data & 0xF0;
  6956  002950  5022               	movf	lcdNibble@data,w,c
  6957  002952  0BF0               	andlw	240
  6958  002954  6E21               	movwf	lcdNibble@temp,c
  6959                           
  6960                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6961  002956  508C               	movf	3980,w,c	;volatile
  6962  002958  0B0F               	andlw	15
  6963  00295A  6E8C               	movwf	3980,c	;volatile
  6964                           
  6965                           ;lcd.c: 36: LATD = temp | LATD;
  6966  00295C  5021               	movf	lcdNibble@temp,w,c
  6967  00295E  108C               	iorwf	3980,w,c	;volatile
  6968  002960  6E8C               	movwf	3980,c	;volatile
  6969                           
  6970                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6971  002962  968C               	bcf	3980,3,c	;volatile
  6972                           
  6973                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6974  002964  0E42               	movlw	66
  6975  002966                     u8077:
  6976  002966  2EE8               	decfsz	wreg,f,c
  6977  002968  D7FE               	bra	u8077
  6978  00296A  D000               	nop2	
  6979                           
  6980                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6981  00296C  868C               	bsf	3980,3,c	;volatile
  6982                           
  6983                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6984  00296E  0E42               	movlw	66
  6985  002970                     u8087:
  6986  002970  2EE8               	decfsz	wreg,f,c
  6987  002972  D7FE               	bra	u8087
  6988  002974  D000               	nop2	
  6989                           
  6990                           ;lcd.c: 43: data = data << 4;
  6991  002976  3822               	swapf	lcdNibble@data,w,c
  6992  002978  0BF0               	andlw	240
  6993  00297A  6E22               	movwf	lcdNibble@data,c
  6994                           
  6995                           ;lcd.c: 45: temp = data & 0xF0;
  6996  00297C  5022               	movf	lcdNibble@data,w,c
  6997  00297E  0BF0               	andlw	240
  6998  002980  6E21               	movwf	lcdNibble@temp,c
  6999                           
  7000                           ;lcd.c: 46: LATD = LATD & 0x0F;
  7001  002982  508C               	movf	3980,w,c	;volatile
  7002  002984  0B0F               	andlw	15
  7003  002986  6E8C               	movwf	3980,c	;volatile
  7004                           
  7005                           ;lcd.c: 47: LATD = temp | LATD;
  7006  002988  5021               	movf	lcdNibble@temp,w,c
  7007  00298A  108C               	iorwf	3980,w,c	;volatile
  7008  00298C  6E8C               	movwf	3980,c	;volatile
  7009                           
  7010                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  7011  00298E  968C               	bcf	3980,3,c	;volatile
  7012                           
  7013                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7014  002990  0E42               	movlw	66
  7015  002992                     u8097:
  7016  002992  2EE8               	decfsz	wreg,f,c
  7017  002994  D7FE               	bra	u8097
  7018  002996  D000               	nop2	
  7019                           
  7020                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  7021  002998  868C               	bsf	3980,3,c	;volatile
  7022                           
  7023                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7024  00299A  0E42               	movlw	66
  7025  00299C                     u8107:
  7026  00299C  2EE8               	decfsz	wreg,f,c
  7027  00299E  D7FE               	bra	u8107
  7028  0029A0  D000               	nop2	
  7029  0029A2  0012               	return		;funcret
  7030  0029A4                     __end_of_lcdNibble:
  7031                           	opt stack 0
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           intcon2	equ	0xFF1
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           indf2	equ	0xFDF
  7043                           postinc2	equ	0xFDE
  7044                           postdec2	equ	0xFDD
  7045                           fsr2h	equ	0xFDA
  7046                           fsr2l	equ	0xFD9
  7047                           status	equ	0xFD8
  7048                           
  7049 ;; *************** function _keycheck *****************
  7050 ;; Defined at:
  7051 ;;		line 12 in file "interface.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    2
  7072 ;; This function calls:
  7073 ;;		Nothing
  7074 ;; This function is called by:
  7075 ;;		_main
  7076 ;;		_displayLog
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text22
  7081  002C18                     __ptext22:
  7082                           	opt stack 0
  7083  002C18                     _keycheck:
  7084                           	opt stack 28
  7085  002C18                     l675:
  7086  002C18  A281               	btfss	3969,1,c	;volatile
  7087  002C1A  D7FE               	goto	l675
  7088                           
  7089                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  7090  002C1C  3881               	swapf	3969,w,c	;volatile
  7091  002C1E  0B0F               	andlw	15
  7092  002C20  0B0F               	andlw	15
  7093  002C22  0100               	movlb	0	; () banked
  7094  002C24  6FC2               	movwf	_keypress& (0+255),b	;volatile
  7095  002C26                     l678:
  7096  002C26  B281               	btfsc	3969,1,c	;volatile
  7097  002C28  D7FE               	goto	l678
  7098                           
  7099                           ;interface.c: 16: __nop();
  7100  002C2A  F000               	nop	
  7101                           
  7102                           ;interface.c: 17: return;
  7103  002C2C  0012               	return		;funcret
  7104  002C2E                     __end_of_keycheck:
  7105                           	opt stack 0
  7106                           tblptru	equ	0xFF8
  7107                           tblptrh	equ	0xFF7
  7108                           tblptrl	equ	0xFF6
  7109                           tablat	equ	0xFF5
  7110                           prodh	equ	0xFF4
  7111                           prodl	equ	0xFF3
  7112                           intcon	equ	0xFF2
  7113                           intcon2	equ	0xFF1
  7114                           postinc0	equ	0xFEE
  7115                           wreg	equ	0xFE8
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _calibrateWheels *****************
  7124 ;; Defined at:
  7125 ;;		line 31 in file "logic.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  i               2   37[COMRAM] int 
  7130 ;;  prev            2   35[COMRAM] int 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      void 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;Total ram usage:        4 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    3
  7147 ;; This function calls:
  7148 ;;		_readADC
  7149 ;;		_startTMR1
  7150 ;;		_updateS1
  7151 ;;		_updateS3
  7152 ;; This function is called by:
  7153 ;;		_main
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text23
  7158  00218E                     __ptext23:
  7159                           	opt stack 0
  7160  00218E                     _calibrateWheels:
  7161                           	opt stack 27
  7162                           
  7163                           ;logic.c: 32: TMR1ON = 0;
  7164                           
  7165                           ;incstack = 0
  7166  00218E  90CD               	bcf	4045,0,c	;volatile
  7167                           
  7168                           ;logic.c: 33: int i = 1;
  7169  002190  0E00               	movlw	0
  7170  002192  6E27               	movwf	calibrateWheels@i+1,c
  7171  002194  0E01               	movlw	1
  7172  002196  6E26               	movwf	calibrateWheels@i,c
  7173  002198                     l4031:
  7174                           
  7175                           ;logic.c: 36: if (i < 20){updateS1(1);}
  7176  002198  BE27               	btfsc	calibrateWheels@i+1,7,c
  7177  00219A  D006               	goto	l4033
  7178  00219C  5027               	movf	calibrateWheels@i+1,w,c
  7179  00219E  E10B               	bnz	l4035
  7180  0021A0  0E14               	movlw	20
  7181  0021A2  5C26               	subwf	calibrateWheels@i,w,c
  7182  0021A4  B0D8               	btfsc	status,0,c
  7183  0021A6  D007               	goto	l4035
  7184  0021A8                     l4033:
  7185  0021A8  0E00               	movlw	0
  7186  0021AA  6E22               	movwf	updateS1@mode+1,c
  7187  0021AC  0E01               	movlw	1
  7188  0021AE  6E21               	movwf	updateS1@mode,c
  7189  0021B0  ECFE  F00A         	call	_updateS1	;wreg free
  7190  0021B4  D031               	goto	l4049
  7191  0021B6                     l4035:
  7192                           
  7193                           ;logic.c: 37: else if(i<(20+40)){updateS1(2);}
  7194  0021B6  BE27               	btfsc	calibrateWheels@i+1,7,c
  7195  0021B8  D006               	goto	l4037
  7196  0021BA  5027               	movf	calibrateWheels@i+1,w,c
  7197  0021BC  E10B               	bnz	l4039
  7198  0021BE  0E3C               	movlw	60
  7199  0021C0  5C26               	subwf	calibrateWheels@i,w,c
  7200  0021C2  B0D8               	btfsc	status,0,c
  7201  0021C4  D007               	goto	l4039
  7202  0021C6                     l4037:
  7203  0021C6  0E00               	movlw	0
  7204  0021C8  6E22               	movwf	updateS1@mode+1,c
  7205  0021CA  0E02               	movlw	2
  7206  0021CC  6E21               	movwf	updateS1@mode,c
  7207  0021CE  ECFE  F00A         	call	_updateS1	;wreg free
  7208  0021D2  D022               	goto	l4049
  7209  0021D4                     l4039:
  7210                           
  7211                           ;logic.c: 38: else if(i<(20+40+80)){updateS1(1);}
  7212  0021D4  BE27               	btfsc	calibrateWheels@i+1,7,c
  7213  0021D6  D006               	goto	l4041
  7214  0021D8  5027               	movf	calibrateWheels@i+1,w,c
  7215  0021DA  E10B               	bnz	l4043
  7216  0021DC  0E8C               	movlw	140
  7217  0021DE  5C26               	subwf	calibrateWheels@i,w,c
  7218  0021E0  B0D8               	btfsc	status,0,c
  7219  0021E2  D007               	goto	l4043
  7220  0021E4                     l4041:
  7221  0021E4  0E00               	movlw	0
  7222  0021E6  6E22               	movwf	updateS1@mode+1,c
  7223  0021E8  0E01               	movlw	1
  7224  0021EA  6E21               	movwf	updateS1@mode,c
  7225  0021EC  ECFE  F00A         	call	_updateS1	;wreg free
  7226  0021F0  D013               	goto	l4049
  7227  0021F2                     l4043:
  7228                           
  7229                           ;logic.c: 39: else if(i<(20+40+80+100)){updateS1(2);}
  7230  0021F2  BE27               	btfsc	calibrateWheels@i+1,7,c
  7231  0021F4  D006               	goto	l4045
  7232  0021F6  5027               	movf	calibrateWheels@i+1,w,c
  7233  0021F8  E10B               	bnz	l4047
  7234  0021FA  0EF0               	movlw	240
  7235  0021FC  5C26               	subwf	calibrateWheels@i,w,c
  7236  0021FE  B0D8               	btfsc	status,0,c
  7237  002200  D007               	goto	l4047
  7238  002202                     l4045:
  7239  002202  0E00               	movlw	0
  7240  002204  6E22               	movwf	updateS1@mode+1,c
  7241  002206  0E02               	movlw	2
  7242  002208  6E21               	movwf	updateS1@mode,c
  7243  00220A  ECFE  F00A         	call	_updateS1	;wreg free
  7244  00220E  D004               	goto	l4049
  7245  002210                     l4047:
  7246                           
  7247                           ;logic.c: 40: else{i=1;}
  7248  002210  0E00               	movlw	0
  7249  002212  6E27               	movwf	calibrateWheels@i+1,c
  7250  002214  0E01               	movlw	1
  7251  002216  6E26               	movwf	calibrateWheels@i,c
  7252  002218                     l4049:
  7253                           
  7254                           ;logic.c: 42: i++;
  7255  002218  4A26               	infsnz	calibrateWheels@i,f,c
  7256  00221A  2A27               	incf	calibrateWheels@i+1,f,c
  7257                           
  7258                           ;logic.c: 43: if (i==1){prev = 0;}
  7259  00221C  0426               	decf	calibrateWheels@i,w,c
  7260  00221E  1027               	iorwf	calibrateWheels@i+1,w,c
  7261  002220  A4D8               	btfss	status,2,c
  7262  002222  D005               	goto	l770
  7263  002224  0E00               	movlw	0
  7264  002226  6E25               	movwf	calibrateWheels@prev+1,c
  7265  002228  0E00               	movlw	0
  7266  00222A  6E24               	movwf	calibrateWheels@prev,c
  7267  00222C  D004               	goto	l4055
  7268  00222E                     l770:
  7269                           
  7270                           ;logic.c: 44: else{prev = ADRES;}
  7271  00222E  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7272  002232  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7273  002236                     l4055:
  7274                           
  7275                           ;logic.c: 45: readADC(1);
  7276  002236  0E01               	movlw	1
  7277  002238  ECE0  F015         	call	_readADC
  7278                           
  7279                           ;logic.c: 46: }while(ADRES>prev || ADRES<0x3aa);
  7280  00223C  50C3               	movf	4035,w,c	;volatile
  7281  00223E  5C24               	subwf	calibrateWheels@prev,w,c
  7282  002240  50C4               	movf	4036,w,c	;volatile
  7283  002242  5825               	subwfb	calibrateWheels@prev+1,w,c
  7284  002244  A0D8               	btfss	status,0,c
  7285  002246  D7A8               	goto	l4031
  7286  002248  0EAA               	movlw	170
  7287  00224A  5CC3               	subwf	4035,w,c	;volatile
  7288  00224C  0E03               	movlw	3
  7289  00224E  58C4               	subwfb	4036,w,c	;volatile
  7290  002250  A0D8               	btfss	status,0,c
  7291  002252  D7A2               	goto	l4031
  7292  002254                     l4061:
  7293                           
  7294                           ;logic.c: 49: if (i < 20){updateS3(1);}
  7295  002254  BE27               	btfsc	calibrateWheels@i+1,7,c
  7296  002256  D006               	goto	l4063
  7297  002258  5027               	movf	calibrateWheels@i+1,w,c
  7298  00225A  E10B               	bnz	l4065
  7299  00225C  0E14               	movlw	20
  7300  00225E  5C26               	subwf	calibrateWheels@i,w,c
  7301  002260  B0D8               	btfsc	status,0,c
  7302  002262  D007               	goto	l4065
  7303  002264                     l4063:
  7304  002264  0E00               	movlw	0
  7305  002266  6E22               	movwf	updateS3@mode+1,c
  7306  002268  0E01               	movlw	1
  7307  00226A  6E21               	movwf	updateS3@mode,c
  7308  00226C  ECD3  F00E         	call	_updateS3	;wreg free
  7309  002270  D031               	goto	l4079
  7310  002272                     l4065:
  7311                           
  7312                           ;logic.c: 50: else if(i<(20+40)){updateS3(2);}
  7313  002272  BE27               	btfsc	calibrateWheels@i+1,7,c
  7314  002274  D006               	goto	l4067
  7315  002276  5027               	movf	calibrateWheels@i+1,w,c
  7316  002278  E10B               	bnz	l4069
  7317  00227A  0E3C               	movlw	60
  7318  00227C  5C26               	subwf	calibrateWheels@i,w,c
  7319  00227E  B0D8               	btfsc	status,0,c
  7320  002280  D007               	goto	l4069
  7321  002282                     l4067:
  7322  002282  0E00               	movlw	0
  7323  002284  6E22               	movwf	updateS3@mode+1,c
  7324  002286  0E02               	movlw	2
  7325  002288  6E21               	movwf	updateS3@mode,c
  7326  00228A  ECD3  F00E         	call	_updateS3	;wreg free
  7327  00228E  D022               	goto	l4079
  7328  002290                     l4069:
  7329                           
  7330                           ;logic.c: 51: else if(i<(20+40+80)){updateS3(1);}
  7331  002290  BE27               	btfsc	calibrateWheels@i+1,7,c
  7332  002292  D006               	goto	l4071
  7333  002294  5027               	movf	calibrateWheels@i+1,w,c
  7334  002296  E10B               	bnz	l4073
  7335  002298  0E8C               	movlw	140
  7336  00229A  5C26               	subwf	calibrateWheels@i,w,c
  7337  00229C  B0D8               	btfsc	status,0,c
  7338  00229E  D007               	goto	l4073
  7339  0022A0                     l4071:
  7340  0022A0  0E00               	movlw	0
  7341  0022A2  6E22               	movwf	updateS3@mode+1,c
  7342  0022A4  0E01               	movlw	1
  7343  0022A6  6E21               	movwf	updateS3@mode,c
  7344  0022A8  ECD3  F00E         	call	_updateS3	;wreg free
  7345  0022AC  D013               	goto	l4079
  7346  0022AE                     l4073:
  7347                           
  7348                           ;logic.c: 52: else if(i<(20+40+80+100)){updateS3(2);}
  7349  0022AE  BE27               	btfsc	calibrateWheels@i+1,7,c
  7350  0022B0  D006               	goto	l4075
  7351  0022B2  5027               	movf	calibrateWheels@i+1,w,c
  7352  0022B4  E10B               	bnz	l4077
  7353  0022B6  0EF0               	movlw	240
  7354  0022B8  5C26               	subwf	calibrateWheels@i,w,c
  7355  0022BA  B0D8               	btfsc	status,0,c
  7356  0022BC  D007               	goto	l4077
  7357  0022BE                     l4075:
  7358  0022BE  0E00               	movlw	0
  7359  0022C0  6E22               	movwf	updateS3@mode+1,c
  7360  0022C2  0E02               	movlw	2
  7361  0022C4  6E21               	movwf	updateS3@mode,c
  7362  0022C6  ECD3  F00E         	call	_updateS3	;wreg free
  7363  0022CA  D004               	goto	l4079
  7364  0022CC                     l4077:
  7365                           
  7366                           ;logic.c: 53: else{i=1;}
  7367  0022CC  0E00               	movlw	0
  7368  0022CE  6E27               	movwf	calibrateWheels@i+1,c
  7369  0022D0  0E01               	movlw	1
  7370  0022D2  6E26               	movwf	calibrateWheels@i,c
  7371  0022D4                     l4079:
  7372                           
  7373                           ;logic.c: 55: i++;
  7374  0022D4  4A26               	infsnz	calibrateWheels@i,f,c
  7375  0022D6  2A27               	incf	calibrateWheels@i+1,f,c
  7376                           
  7377                           ;logic.c: 56: if (i==1){prev = 0;}
  7378  0022D8  0426               	decf	calibrateWheels@i,w,c
  7379  0022DA  1027               	iorwf	calibrateWheels@i+1,w,c
  7380  0022DC  A4D8               	btfss	status,2,c
  7381  0022DE  D005               	goto	l782
  7382  0022E0  0E00               	movlw	0
  7383  0022E2  6E25               	movwf	calibrateWheels@prev+1,c
  7384  0022E4  0E00               	movlw	0
  7385  0022E6  6E24               	movwf	calibrateWheels@prev,c
  7386  0022E8  D004               	goto	l4085
  7387  0022EA                     l782:
  7388                           
  7389                           ;logic.c: 57: else{prev = ADRES;}
  7390  0022EA  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7391  0022EE  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7392  0022F2                     l4085:
  7393                           
  7394                           ;logic.c: 58: readADC(5);
  7395  0022F2  0E05               	movlw	5
  7396  0022F4  ECE0  F015         	call	_readADC
  7397                           
  7398                           ;logic.c: 59: }while(ADRES>prev || ADRES<0x3aa);
  7399  0022F8  50C3               	movf	4035,w,c	;volatile
  7400  0022FA  5C24               	subwf	calibrateWheels@prev,w,c
  7401  0022FC  50C4               	movf	4036,w,c	;volatile
  7402  0022FE  5825               	subwfb	calibrateWheels@prev+1,w,c
  7403  002300  A0D8               	btfss	status,0,c
  7404  002302  D7A8               	goto	l4061
  7405  002304  0EAA               	movlw	170
  7406  002306  5CC3               	subwf	4035,w,c	;volatile
  7407  002308  0E03               	movlw	3
  7408  00230A  58C4               	subwfb	4036,w,c	;volatile
  7409  00230C  A0D8               	btfss	status,0,c
  7410  00230E  D7A2               	goto	l4061
  7411                           
  7412                           ;logic.c: 60: startTMR1();
  7413  002310  EC20  F016         	call	_startTMR1	;wreg free
  7414  002314  0012               	return		;funcret
  7415  002316                     __end_of_calibrateWheels:
  7416                           	opt stack 0
  7417                           tblptru	equ	0xFF8
  7418                           tblptrh	equ	0xFF7
  7419                           tblptrl	equ	0xFF6
  7420                           tablat	equ	0xFF5
  7421                           prodh	equ	0xFF4
  7422                           prodl	equ	0xFF3
  7423                           intcon	equ	0xFF2
  7424                           intcon2	equ	0xFF1
  7425                           postinc0	equ	0xFEE
  7426                           wreg	equ	0xFE8
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434 ;; *************** function _updateS3 *****************
  7435 ;; Defined at:
  7436 ;;		line 182 in file "motors.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  mode            2   32[COMRAM] int 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        3 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    2
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_main
  7461 ;;		_calibrateWheels
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           	psect	text24
  7466  001DA6                     __ptext24:
  7467                           	opt stack 0
  7468  001DA6                     _updateS3:
  7469                           	opt stack 28
  7470                           
  7471                           ;motors.c: 183: _delay((unsigned long)((5)*(32000000/4000.0)));
  7472                           
  7473                           ;incstack = 0
  7474  001DA6  0E34               	movlw	52
  7475  001DA8  6E23               	movwf	??_updateS3& (0+255),c
  7476  001DAA  0EF2               	movlw	242
  7477  001DAC                     u8117:
  7478  001DAC  2EE8               	decfsz	wreg,f,c
  7479  001DAE  D7FE               	bra	u8117
  7480  001DB0  2E23               	decfsz	??_updateS3& (0+255),f,c
  7481  001DB2  D7FC               	bra	u8117
  7482                           
  7483                           ;motors.c: 185: if(mode == 0){
  7484  001DB4  5021               	movf	updateS3@mode,w,c
  7485  001DB6  1022               	iorwf	updateS3@mode+1,w,c
  7486  001DB8  A4D8               	btfss	status,2,c
  7487  001DBA  D005               	goto	l3595
  7488                           
  7489                           ;motors.c: 186: LATEbits.LATE2 = 0;
  7490  001DBC  948D               	bcf	3981,2,c	;volatile
  7491                           
  7492                           ;motors.c: 187: LATEbits.LATE1 = 0;
  7493  001DBE  928D               	bcf	3981,1,c	;volatile
  7494                           
  7495                           ;motors.c: 188: LATAbits.LATA4 = 0;
  7496  001DC0  9889               	bcf	3977,4,c	;volatile
  7497                           
  7498                           ;motors.c: 189: LATDbits.LATD0 = 0;
  7499  001DC2  908C               	bcf	3980,0,c	;volatile
  7500                           
  7501                           ;motors.c: 190: }
  7502  001DC4  0012               	return	
  7503  001DC6                     l3595:
  7504                           
  7505                           ;motors.c: 191: else if(mode == 4){
  7506  001DC6  0E04               	movlw	4
  7507  001DC8  1821               	xorwf	updateS3@mode,w,c
  7508  001DCA  1022               	iorwf	updateS3@mode+1,w,c
  7509  001DCC  B4D8               	btfsc	status,2,c
  7510  001DCE  0012               	return	
  7511                           
  7512                           ;motors.c: 194: else if(mode == 3){
  7513                           
  7514                           ;motors.c: 193: }
  7515  001DD0  0E03               	movlw	3
  7516  001DD2  1821               	xorwf	updateS3@mode,w,c
  7517  001DD4  1022               	iorwf	updateS3@mode+1,w,c
  7518  001DD6  A4D8               	btfss	status,2,c
  7519  001DD8  D042               	goto	l3623
  7520                           
  7521                           ;motors.c: 195: t3++;
  7522  001DDA  4A41               	infsnz	_t3,f,c
  7523  001DDC  2A42               	incf	_t3+1,f,c
  7524                           
  7525                           ;motors.c: 196: if (t3>8) {t3=1;}
  7526  001DDE  BE42               	btfsc	_t3+1,7,c
  7527  001DE0  D00A               	goto	l3607
  7528  001DE2  5042               	movf	_t3+1,w,c
  7529  001DE4  E104               	bnz	u3880
  7530  001DE6  0E09               	movlw	9
  7531  001DE8  5C41               	subwf	_t3,w,c
  7532  001DEA  A0D8               	btfss	status,0,c
  7533  001DEC  D004               	goto	l3607
  7534  001DEE                     u3880:
  7535  001DEE  0E00               	movlw	0
  7536  001DF0  6E42               	movwf	_t3+1,c
  7537  001DF2  0E01               	movlw	1
  7538  001DF4  6E41               	movwf	_t3,c
  7539  001DF6                     l3607:
  7540                           
  7541                           ;motors.c: 197: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  7542  001DF6  0441               	decf	_t3,w,c
  7543  001DF8  1042               	iorwf	_t3+1,w,c
  7544  001DFA  B4D8               	btfsc	status,2,c
  7545  001DFC  D005               	goto	l594
  7546  001DFE  0E08               	movlw	8
  7547  001E00  1841               	xorwf	_t3,w,c
  7548  001E02  1042               	iorwf	_t3+1,w,c
  7549  001E04  A4D8               	btfss	status,2,c
  7550  001E06  D002               	goto	l592
  7551  001E08                     l594:
  7552  001E08  848D               	bsf	3981,2,c	;volatile
  7553  001E0A  D001               	goto	l3611
  7554  001E0C                     l592:
  7555                           
  7556                           ;motors.c: 198: else{LATEbits.LATE2 = 0;}
  7557  001E0C  948D               	bcf	3981,2,c	;volatile
  7558  001E0E                     l3611:
  7559                           
  7560                           ;motors.c: 199: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  7561  001E0E  0E02               	movlw	2
  7562  001E10  1841               	xorwf	_t3,w,c
  7563  001E12  1042               	iorwf	_t3+1,w,c
  7564  001E14  B4D8               	btfsc	status,2,c
  7565  001E16  D005               	goto	l598
  7566  001E18  0E07               	movlw	7
  7567  001E1A  1841               	xorwf	_t3,w,c
  7568  001E1C  1042               	iorwf	_t3+1,w,c
  7569  001E1E  A4D8               	btfss	status,2,c
  7570  001E20  D002               	goto	l596
  7571  001E22                     l598:
  7572  001E22  828D               	bsf	3981,1,c	;volatile
  7573  001E24  D001               	goto	l3615
  7574  001E26                     l596:
  7575                           
  7576                           ;motors.c: 200: else{LATEbits.LATE1 = 0;}
  7577  001E26  928D               	bcf	3981,1,c	;volatile
  7578  001E28                     l3615:
  7579                           
  7580                           ;motors.c: 201: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  7581  001E28  0E03               	movlw	3
  7582  001E2A  1841               	xorwf	_t3,w,c
  7583  001E2C  1042               	iorwf	_t3+1,w,c
  7584  001E2E  B4D8               	btfsc	status,2,c
  7585  001E30  D005               	goto	l602
  7586  001E32  0E06               	movlw	6
  7587  001E34  1841               	xorwf	_t3,w,c
  7588  001E36  1042               	iorwf	_t3+1,w,c
  7589  001E38  A4D8               	btfss	status,2,c
  7590  001E3A  D002               	goto	l600
  7591  001E3C                     l602:
  7592  001E3C  8889               	bsf	3977,4,c	;volatile
  7593  001E3E  D001               	goto	l3619
  7594  001E40                     l600:
  7595                           
  7596                           ;motors.c: 202: else{LATAbits.LATA4 = 0;}
  7597  001E40  9889               	bcf	3977,4,c	;volatile
  7598  001E42                     l3619:
  7599                           
  7600                           ;motors.c: 203: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  7601  001E42  0E04               	movlw	4
  7602  001E44  1841               	xorwf	_t3,w,c
  7603  001E46  1042               	iorwf	_t3+1,w,c
  7604  001E48  B4D8               	btfsc	status,2,c
  7605  001E4A  D005               	goto	l606
  7606  001E4C  0E05               	movlw	5
  7607  001E4E  1841               	xorwf	_t3,w,c
  7608  001E50  1042               	iorwf	_t3+1,w,c
  7609  001E52  A4D8               	btfss	status,2,c
  7610  001E54  D002               	goto	l604
  7611  001E56                     l606:
  7612  001E56  808C               	bsf	3980,0,c	;volatile
  7613  001E58  0012               	return	
  7614  001E5A                     l604:
  7615                           
  7616                           ;motors.c: 204: else{LATDbits.LATD0 = 0;}
  7617  001E5A  908C               	bcf	3980,0,c	;volatile
  7618                           
  7619                           ;motors.c: 205: }
  7620  001E5C  0012               	return	
  7621  001E5E                     l3623:
  7622                           
  7623                           ;motors.c: 206: else if(mode == 5){
  7624  001E5E  0E05               	movlw	5
  7625  001E60  1821               	xorwf	updateS3@mode,w,c
  7626  001E62  1022               	iorwf	updateS3@mode+1,w,c
  7627  001E64  A4D8               	btfss	status,2,c
  7628  001E66  D042               	goto	l3647
  7629                           
  7630                           ;motors.c: 207: t3++;
  7631  001E68  4A41               	infsnz	_t3,f,c
  7632  001E6A  2A42               	incf	_t3+1,f,c
  7633                           
  7634                           ;motors.c: 208: if (t3>8) {t3=1;}
  7635  001E6C  BE42               	btfsc	_t3+1,7,c
  7636  001E6E  D00A               	goto	l3631
  7637  001E70  5042               	movf	_t3+1,w,c
  7638  001E72  E104               	bnz	u3980
  7639  001E74  0E09               	movlw	9
  7640  001E76  5C41               	subwf	_t3,w,c
  7641  001E78  A0D8               	btfss	status,0,c
  7642  001E7A  D004               	goto	l3631
  7643  001E7C                     u3980:
  7644  001E7C  0E00               	movlw	0
  7645  001E7E  6E42               	movwf	_t3+1,c
  7646  001E80  0E01               	movlw	1
  7647  001E82  6E41               	movwf	_t3,c
  7648  001E84                     l3631:
  7649                           
  7650                           ;motors.c: 209: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
  7651  001E84  0441               	decf	_t3,w,c
  7652  001E86  1042               	iorwf	_t3+1,w,c
  7653  001E88  B4D8               	btfsc	status,2,c
  7654  001E8A  D005               	goto	l613
  7655  001E8C  0E08               	movlw	8
  7656  001E8E  1841               	xorwf	_t3,w,c
  7657  001E90  1042               	iorwf	_t3+1,w,c
  7658  001E92  A4D8               	btfss	status,2,c
  7659  001E94  D002               	goto	l611
  7660  001E96                     l613:
  7661  001E96  8889               	bsf	3977,4,c	;volatile
  7662  001E98  D001               	goto	l3635
  7663  001E9A                     l611:
  7664                           
  7665                           ;motors.c: 210: else{LATAbits.LATA4 = 0;}
  7666  001E9A  9889               	bcf	3977,4,c	;volatile
  7667  001E9C                     l3635:
  7668                           
  7669                           ;motors.c: 211: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
  7670  001E9C  0E02               	movlw	2
  7671  001E9E  1841               	xorwf	_t3,w,c
  7672  001EA0  1042               	iorwf	_t3+1,w,c
  7673  001EA2  B4D8               	btfsc	status,2,c
  7674  001EA4  D005               	goto	l617
  7675  001EA6  0E07               	movlw	7
  7676  001EA8  1841               	xorwf	_t3,w,c
  7677  001EAA  1042               	iorwf	_t3+1,w,c
  7678  001EAC  A4D8               	btfss	status,2,c
  7679  001EAE  D002               	goto	l615
  7680  001EB0                     l617:
  7681  001EB0  808C               	bsf	3980,0,c	;volatile
  7682  001EB2  D001               	goto	l3639
  7683  001EB4                     l615:
  7684                           
  7685                           ;motors.c: 212: else{LATDbits.LATD0 = 0;}
  7686  001EB4  908C               	bcf	3980,0,c	;volatile
  7687  001EB6                     l3639:
  7688                           
  7689                           ;motors.c: 213: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
  7690  001EB6  0E03               	movlw	3
  7691  001EB8  1841               	xorwf	_t3,w,c
  7692  001EBA  1042               	iorwf	_t3+1,w,c
  7693  001EBC  B4D8               	btfsc	status,2,c
  7694  001EBE  D005               	goto	l621
  7695  001EC0  0E06               	movlw	6
  7696  001EC2  1841               	xorwf	_t3,w,c
  7697  001EC4  1042               	iorwf	_t3+1,w,c
  7698  001EC6  A4D8               	btfss	status,2,c
  7699  001EC8  D002               	goto	l619
  7700  001ECA                     l621:
  7701  001ECA  848D               	bsf	3981,2,c	;volatile
  7702  001ECC  D001               	goto	l3643
  7703  001ECE                     l619:
  7704                           
  7705                           ;motors.c: 214: else{LATEbits.LATE2 = 0;}
  7706  001ECE  948D               	bcf	3981,2,c	;volatile
  7707  001ED0                     l3643:
  7708                           
  7709                           ;motors.c: 215: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
  7710  001ED0  0E04               	movlw	4
  7711  001ED2  1841               	xorwf	_t3,w,c
  7712  001ED4  1042               	iorwf	_t3+1,w,c
  7713  001ED6  B4D8               	btfsc	status,2,c
  7714  001ED8  D005               	goto	l625
  7715  001EDA  0E05               	movlw	5
  7716  001EDC  1841               	xorwf	_t3,w,c
  7717  001EDE  1042               	iorwf	_t3+1,w,c
  7718  001EE0  A4D8               	btfss	status,2,c
  7719  001EE2  D002               	goto	l623
  7720  001EE4                     l625:
  7721  001EE4  828D               	bsf	3981,1,c	;volatile
  7722  001EE6  0012               	return	
  7723  001EE8                     l623:
  7724                           
  7725                           ;motors.c: 216: else{LATEbits.LATE1 = 0;}
  7726  001EE8  928D               	bcf	3981,1,c	;volatile
  7727                           
  7728                           ;motors.c: 217: }
  7729  001EEA  0012               	return	
  7730  001EEC                     l3647:
  7731                           
  7732                           ;motors.c: 218: else{
  7733                           ;motors.c: 219: if(mode == 1){
  7734  001EEC  0421               	decf	updateS3@mode,w,c
  7735  001EEE  1022               	iorwf	updateS3@mode+1,w,c
  7736  001EF0  A4D8               	btfss	status,2,c
  7737  001EF2  D013               	goto	l3655
  7738                           
  7739                           ;motors.c: 220: s3 ++;
  7740  001EF4  0100               	movlb	0	; () banked
  7741  001EF6  4BBE               	infsnz	_s3& (0+255),f,b
  7742  001EF8  2BBF               	incf	(_s3+1)& (0+255),f,b
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;motors.c: 221: if (s3>4) {s3=1;}
  7746  001EFA  0100               	movlb	0	; () banked
  7747  001EFC  BFBF               	btfsc	(_s3+1)& (0+255),7,b
  7748  001EFE  D025               	goto	l3663
  7749  001F00  0100               	movlb	0	; () banked
  7750  001F02  51BF               	movf	(_s3+1)& (0+255),w,b
  7751  001F04  E105               	bnz	u4080
  7752  001F06  0E05               	movlw	5
  7753  001F08  0100               	movlb	0	; () banked
  7754  001F0A  5DBE               	subwf	_s3& (0+255),w,b
  7755  001F0C  A0D8               	btfss	status,0,c
  7756  001F0E  D01D               	goto	l3663
  7757  001F10                     u4080:
  7758                           
  7759                           ; BSR set to: 0
  7760  001F10  0E00               	movlw	0
  7761  001F12  0100               	movlb	0	; () banked
  7762  001F14  6FBF               	movwf	(_s3+1)& (0+255),b
  7763  001F16  0E01               	movlw	1
  7764  001F18  D017               	goto	L13
  7765  001F1A                     l3655:
  7766                           
  7767                           ;motors.c: 223: else if(mode == 2){
  7768  001F1A  0E02               	movlw	2
  7769  001F1C  1821               	xorwf	updateS3@mode,w,c
  7770  001F1E  1022               	iorwf	updateS3@mode+1,w,c
  7771  001F20  A4D8               	btfss	status,2,c
  7772  001F22  D013               	goto	l3663
  7773                           
  7774                           ;motors.c: 224: s3 --;
  7775  001F24  0100               	movlb	0	; () banked
  7776  001F26  07BE               	decf	_s3& (0+255),f,b
  7777  001F28  A0D8               	btfss	status,0,c
  7778  001F2A  07BF               	decf	(_s3+1)& (0+255),f,b
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;motors.c: 225: if (s3<1) {s3=4;}
  7782  001F2C  0100               	movlb	0	; () banked
  7783  001F2E  BFBF               	btfsc	(_s3+1)& (0+255),7,b
  7784  001F30  D007               	goto	l3661
  7785  001F32  0100               	movlb	0	; () banked
  7786  001F34  51BF               	movf	(_s3+1)& (0+255),w,b
  7787  001F36  E109               	bnz	l3663
  7788  001F38  0100               	movlb	0	; () banked
  7789  001F3A  05BE               	decf	_s3& (0+255),w,b
  7790  001F3C  B0D8               	btfsc	status,0,c
  7791  001F3E  D005               	goto	l3663
  7792  001F40                     l3661:
  7793                           
  7794                           ; BSR set to: 0
  7795  001F40  0E00               	movlw	0
  7796  001F42  0100               	movlb	0	; () banked
  7797  001F44  6FBF               	movwf	(_s3+1)& (0+255),b
  7798  001F46  0E04               	movlw	4
  7799  001F48                     L13:
  7800  001F48  6FBE               	movwf	_s3& (0+255),b
  7801  001F4A                     l3663:
  7802                           
  7803                           ;motors.c: 226: }
  7804                           ;motors.c: 227: if (s3 == 1){LATEbits.LATE2 = 1;}
  7805  001F4A  0100               	movlb	0	; () banked
  7806  001F4C  05BE               	decf	_s3& (0+255),w,b
  7807  001F4E  0100               	movlb	0	; () banked
  7808  001F50  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7809  001F52  A4D8               	btfss	status,2,c
  7810  001F54  D002               	goto	l633
  7811                           
  7812                           ; BSR set to: 0
  7813  001F56  848D               	bsf	3981,2,c	;volatile
  7814  001F58  D001               	goto	l3667
  7815  001F5A                     l633:
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;motors.c: 228: else{LATEbits.LATE2 = 0;}
  7819  001F5A  948D               	bcf	3981,2,c	;volatile
  7820  001F5C                     l3667:
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;motors.c: 229: if (s3 == 2){LATEbits.LATE1 = 1;}
  7824  001F5C  0E02               	movlw	2
  7825  001F5E  0100               	movlb	0	; () banked
  7826  001F60  19BE               	xorwf	_s3& (0+255),w,b
  7827  001F62  0100               	movlb	0	; () banked
  7828  001F64  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7829  001F66  A4D8               	btfss	status,2,c
  7830  001F68  D002               	goto	l635
  7831                           
  7832                           ; BSR set to: 0
  7833  001F6A  828D               	bsf	3981,1,c	;volatile
  7834  001F6C  D001               	goto	l3671
  7835  001F6E                     l635:
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;motors.c: 230: else{LATEbits.LATE1 = 0;}
  7839  001F6E  928D               	bcf	3981,1,c	;volatile
  7840  001F70                     l3671:
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;motors.c: 231: if (s3 == 3){LATAbits.LATA4 = 1;}
  7844  001F70  0E03               	movlw	3
  7845  001F72  0100               	movlb	0	; () banked
  7846  001F74  19BE               	xorwf	_s3& (0+255),w,b
  7847  001F76  0100               	movlb	0	; () banked
  7848  001F78  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7849  001F7A  A4D8               	btfss	status,2,c
  7850  001F7C  D002               	goto	l637
  7851                           
  7852                           ; BSR set to: 0
  7853  001F7E  8889               	bsf	3977,4,c	;volatile
  7854  001F80  D001               	goto	l3675
  7855  001F82                     l637:
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;motors.c: 232: else{LATAbits.LATA4 = 0;}
  7859  001F82  9889               	bcf	3977,4,c	;volatile
  7860  001F84                     l3675:
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;motors.c: 233: if (s3 == 4){LATDbits.LATD0 = 1;}
  7864  001F84  0E04               	movlw	4
  7865  001F86  0100               	movlb	0	; () banked
  7866  001F88  19BE               	xorwf	_s3& (0+255),w,b
  7867  001F8A  0100               	movlb	0	; () banked
  7868  001F8C  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7869  001F8E  A4D8               	btfss	status,2,c
  7870  001F90  D002               	goto	l639
  7871                           
  7872                           ; BSR set to: 0
  7873  001F92  808C               	bsf	3980,0,c	;volatile
  7874  001F94  0012               	return	
  7875  001F96                     l639:
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;motors.c: 234: else{LATDbits.LATD0 = 0;}
  7879  001F96  908C               	bcf	3980,0,c	;volatile
  7880                           
  7881                           ; BSR set to: 0
  7882                           
  7883                           ; BSR set to: 0
  7884                           
  7885                           ; BSR set to: 0
  7886                           
  7887                           ; BSR set to: 0
  7888  001F98  0012               	return	
  7889  001F9A                     __end_of_updateS3:
  7890                           	opt stack 0
  7891                           tblptru	equ	0xFF8
  7892                           tblptrh	equ	0xFF7
  7893                           tblptrl	equ	0xFF6
  7894                           tablat	equ	0xFF5
  7895                           prodh	equ	0xFF4
  7896                           prodl	equ	0xFF3
  7897                           intcon	equ	0xFF2
  7898                           intcon2	equ	0xFF1
  7899                           postinc0	equ	0xFEE
  7900                           wreg	equ	0xFE8
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function _updateS1 *****************
  7909 ;; Defined at:
  7910 ;;		line 66 in file "motors.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  mode            2   32[COMRAM] int 
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;		None
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      void 
  7917 ;; Registers used:
  7918 ;;		wreg, status,2, status,0
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7924 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;Total ram usage:        3 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    2
  7931 ;; This function calls:
  7932 ;;		Nothing
  7933 ;; This function is called by:
  7934 ;;		_main
  7935 ;;		_calibrateWheels
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text25
  7940  0015FC                     __ptext25:
  7941                           	opt stack 0
  7942  0015FC                     _updateS1:
  7943                           	opt stack 28
  7944                           
  7945                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  7946                           
  7947                           ;incstack = 0
  7948  0015FC  0E34               	movlw	52
  7949  0015FE  6E23               	movwf	??_updateS1& (0+255),c
  7950  001600  0EF2               	movlw	242
  7951  001602                     u8127:
  7952  001602  2EE8               	decfsz	wreg,f,c
  7953  001604  D7FE               	bra	u8127
  7954  001606  2E23               	decfsz	??_updateS1& (0+255),f,c
  7955  001608  D7FC               	bra	u8127
  7956                           
  7957                           ;motors.c: 69: if(mode == 0){
  7958  00160A  5021               	movf	updateS1@mode,w,c
  7959  00160C  1022               	iorwf	updateS1@mode+1,w,c
  7960  00160E  A4D8               	btfss	status,2,c
  7961  001610  D005               	goto	l3471
  7962                           
  7963                           ;motors.c: 70: LATDbits.LATD1 = 0;
  7964  001612  928C               	bcf	3980,1,c	;volatile
  7965                           
  7966                           ;motors.c: 71: LATBbits.LATB3 = 0;
  7967  001614  968A               	bcf	3978,3,c	;volatile
  7968                           
  7969                           ;motors.c: 72: LATBbits.LATB2 = 0;
  7970  001616  948A               	bcf	3978,2,c	;volatile
  7971                           
  7972                           ;motors.c: 73: LATBbits.LATB0 = 0;
  7973  001618  908A               	bcf	3978,0,c	;volatile
  7974                           
  7975                           ;motors.c: 74: }
  7976  00161A  0012               	return	
  7977  00161C                     l3471:
  7978                           
  7979                           ;motors.c: 75: else if(mode == 3){
  7980  00161C  0E03               	movlw	3
  7981  00161E  1821               	xorwf	updateS1@mode,w,c
  7982  001620  1022               	iorwf	updateS1@mode+1,w,c
  7983  001622  A4D8               	btfss	status,2,c
  7984  001624  D049               	goto	l3497
  7985                           
  7986                           ;motors.c: 76: t++;
  7987  001626  4A45               	infsnz	_t,f,c
  7988  001628  2A46               	incf	_t+1,f,c
  7989                           
  7990                           ;motors.c: 77: if (t>8) {t=1;}
  7991  00162A  BE46               	btfsc	_t+1,7,c
  7992  00162C  D00A               	goto	l3479
  7993  00162E  5046               	movf	_t+1,w,c
  7994  001630  E104               	bnz	u3470
  7995  001632  0E09               	movlw	9
  7996  001634  5C45               	subwf	_t,w,c
  7997  001636  A0D8               	btfss	status,0,c
  7998  001638  D004               	goto	l3479
  7999  00163A                     u3470:
  8000  00163A  0E00               	movlw	0
  8001  00163C  6E46               	movwf	_t+1,c
  8002  00163E  0E01               	movlw	1
  8003  001640  6E45               	movwf	_t,c
  8004  001642                     l3479:
  8005                           
  8006                           ;motors.c: 78: _delay((unsigned long)((5)*(32000000/4000.0)));
  8007  001642  0E34               	movlw	52
  8008  001644  6E23               	movwf	??_updateS1& (0+255),c
  8009  001646  0EF2               	movlw	242
  8010  001648                     u8137:
  8011  001648  2EE8               	decfsz	wreg,f,c
  8012  00164A  D7FE               	bra	u8137
  8013  00164C  2E23               	decfsz	??_updateS1& (0+255),f,c
  8014  00164E  D7FC               	bra	u8137
  8015                           
  8016                           ;motors.c: 79: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  8017  001650  0445               	decf	_t,w,c
  8018  001652  1046               	iorwf	_t+1,w,c
  8019  001654  B4D8               	btfsc	status,2,c
  8020  001656  D005               	goto	l481
  8021  001658  0E08               	movlw	8
  8022  00165A  1845               	xorwf	_t,w,c
  8023  00165C  1046               	iorwf	_t+1,w,c
  8024  00165E  A4D8               	btfss	status,2,c
  8025  001660  D002               	goto	l479
  8026  001662                     l481:
  8027  001662  828C               	bsf	3980,1,c	;volatile
  8028  001664  D001               	goto	l3485
  8029  001666                     l479:
  8030                           
  8031                           ;motors.c: 80: else{LATDbits.LATD1 = 0;}
  8032  001666  928C               	bcf	3980,1,c	;volatile
  8033  001668                     l3485:
  8034                           
  8035                           ;motors.c: 81: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  8036  001668  0E02               	movlw	2
  8037  00166A  1845               	xorwf	_t,w,c
  8038  00166C  1046               	iorwf	_t+1,w,c
  8039  00166E  B4D8               	btfsc	status,2,c
  8040  001670  D005               	goto	l485
  8041  001672  0E07               	movlw	7
  8042  001674  1845               	xorwf	_t,w,c
  8043  001676  1046               	iorwf	_t+1,w,c
  8044  001678  A4D8               	btfss	status,2,c
  8045  00167A  D002               	goto	l483
  8046  00167C                     l485:
  8047  00167C  868A               	bsf	3978,3,c	;volatile
  8048  00167E  D001               	goto	l3489
  8049  001680                     l483:
  8050                           
  8051                           ;motors.c: 82: else{LATBbits.LATB3 = 0;}
  8052  001680  968A               	bcf	3978,3,c	;volatile
  8053  001682                     l3489:
  8054                           
  8055                           ;motors.c: 83: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  8056  001682  0E03               	movlw	3
  8057  001684  1845               	xorwf	_t,w,c
  8058  001686  1046               	iorwf	_t+1,w,c
  8059  001688  B4D8               	btfsc	status,2,c
  8060  00168A  D005               	goto	l489
  8061  00168C  0E06               	movlw	6
  8062  00168E  1845               	xorwf	_t,w,c
  8063  001690  1046               	iorwf	_t+1,w,c
  8064  001692  A4D8               	btfss	status,2,c
  8065  001694  D002               	goto	l487
  8066  001696                     l489:
  8067  001696  848A               	bsf	3978,2,c	;volatile
  8068  001698  D001               	goto	l3493
  8069  00169A                     l487:
  8070                           
  8071                           ;motors.c: 84: else{LATBbits.LATB2 = 0;}
  8072  00169A  948A               	bcf	3978,2,c	;volatile
  8073  00169C                     l3493:
  8074                           
  8075                           ;motors.c: 85: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  8076  00169C  0E04               	movlw	4
  8077  00169E  1845               	xorwf	_t,w,c
  8078  0016A0  1046               	iorwf	_t+1,w,c
  8079  0016A2  B4D8               	btfsc	status,2,c
  8080  0016A4  D005               	goto	l493
  8081  0016A6  0E05               	movlw	5
  8082  0016A8  1845               	xorwf	_t,w,c
  8083  0016AA  1046               	iorwf	_t+1,w,c
  8084  0016AC  A4D8               	btfss	status,2,c
  8085  0016AE  D002               	goto	l491
  8086  0016B0                     l493:
  8087  0016B0  808A               	bsf	3978,0,c	;volatile
  8088  0016B2  0012               	return	
  8089  0016B4                     l491:
  8090                           
  8091                           ;motors.c: 86: else{LATBbits.LATB0 = 0;}
  8092  0016B4  908A               	bcf	3978,0,c	;volatile
  8093                           
  8094                           ;motors.c: 87: }
  8095  0016B6  0012               	return	
  8096  0016B8                     l3497:
  8097                           
  8098                           ;motors.c: 88: else if(mode == 5){
  8099  0016B8  0E05               	movlw	5
  8100  0016BA  1821               	xorwf	updateS1@mode,w,c
  8101  0016BC  1022               	iorwf	updateS1@mode+1,w,c
  8102  0016BE  A4D8               	btfss	status,2,c
  8103  0016C0  D049               	goto	l3523
  8104                           
  8105                           ;motors.c: 89: t++;
  8106  0016C2  4A45               	infsnz	_t,f,c
  8107  0016C4  2A46               	incf	_t+1,f,c
  8108                           
  8109                           ;motors.c: 90: if (t>8) {t=1;}
  8110  0016C6  BE46               	btfsc	_t+1,7,c
  8111  0016C8  D00A               	goto	l3505
  8112  0016CA  5046               	movf	_t+1,w,c
  8113  0016CC  E104               	bnz	u3570
  8114  0016CE  0E09               	movlw	9
  8115  0016D0  5C45               	subwf	_t,w,c
  8116  0016D2  A0D8               	btfss	status,0,c
  8117  0016D4  D004               	goto	l3505
  8118  0016D6                     u3570:
  8119  0016D6  0E00               	movlw	0
  8120  0016D8  6E46               	movwf	_t+1,c
  8121  0016DA  0E01               	movlw	1
  8122  0016DC  6E45               	movwf	_t,c
  8123  0016DE                     l3505:
  8124                           
  8125                           ;motors.c: 91: _delay((unsigned long)((5)*(32000000/4000.0)));
  8126  0016DE  0E34               	movlw	52
  8127  0016E0  6E23               	movwf	??_updateS1& (0+255),c
  8128  0016E2  0EF2               	movlw	242
  8129  0016E4                     u8147:
  8130  0016E4  2EE8               	decfsz	wreg,f,c
  8131  0016E6  D7FE               	bra	u8147
  8132  0016E8  2E23               	decfsz	??_updateS1& (0+255),f,c
  8133  0016EA  D7FC               	bra	u8147
  8134                           
  8135                           ;motors.c: 92: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
  8136  0016EC  0445               	decf	_t,w,c
  8137  0016EE  1046               	iorwf	_t+1,w,c
  8138  0016F0  B4D8               	btfsc	status,2,c
  8139  0016F2  D005               	goto	l500
  8140  0016F4  0E08               	movlw	8
  8141  0016F6  1845               	xorwf	_t,w,c
  8142  0016F8  1046               	iorwf	_t+1,w,c
  8143  0016FA  A4D8               	btfss	status,2,c
  8144  0016FC  D002               	goto	l498
  8145  0016FE                     l500:
  8146  0016FE  848A               	bsf	3978,2,c	;volatile
  8147  001700  D001               	goto	l3511
  8148  001702                     l498:
  8149                           
  8150                           ;motors.c: 93: else{LATBbits.LATB2 = 0;}
  8151  001702  948A               	bcf	3978,2,c	;volatile
  8152  001704                     l3511:
  8153                           
  8154                           ;motors.c: 94: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
  8155  001704  0E02               	movlw	2
  8156  001706  1845               	xorwf	_t,w,c
  8157  001708  1046               	iorwf	_t+1,w,c
  8158  00170A  B4D8               	btfsc	status,2,c
  8159  00170C  D005               	goto	l504
  8160  00170E  0E07               	movlw	7
  8161  001710  1845               	xorwf	_t,w,c
  8162  001712  1046               	iorwf	_t+1,w,c
  8163  001714  A4D8               	btfss	status,2,c
  8164  001716  D002               	goto	l502
  8165  001718                     l504:
  8166  001718  808A               	bsf	3978,0,c	;volatile
  8167  00171A  D001               	goto	l3515
  8168  00171C                     l502:
  8169                           
  8170                           ;motors.c: 95: else{LATBbits.LATB0 = 0;}
  8171  00171C  908A               	bcf	3978,0,c	;volatile
  8172  00171E                     l3515:
  8173                           
  8174                           ;motors.c: 96: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
  8175  00171E  0E03               	movlw	3
  8176  001720  1845               	xorwf	_t,w,c
  8177  001722  1046               	iorwf	_t+1,w,c
  8178  001724  B4D8               	btfsc	status,2,c
  8179  001726  D005               	goto	l508
  8180  001728  0E06               	movlw	6
  8181  00172A  1845               	xorwf	_t,w,c
  8182  00172C  1046               	iorwf	_t+1,w,c
  8183  00172E  A4D8               	btfss	status,2,c
  8184  001730  D002               	goto	l506
  8185  001732                     l508:
  8186  001732  828C               	bsf	3980,1,c	;volatile
  8187  001734  D001               	goto	l3519
  8188  001736                     l506:
  8189                           
  8190                           ;motors.c: 97: else{LATDbits.LATD1 = 0;}
  8191  001736  928C               	bcf	3980,1,c	;volatile
  8192  001738                     l3519:
  8193                           
  8194                           ;motors.c: 98: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
  8195  001738  0E04               	movlw	4
  8196  00173A  1845               	xorwf	_t,w,c
  8197  00173C  1046               	iorwf	_t+1,w,c
  8198  00173E  B4D8               	btfsc	status,2,c
  8199  001740  D005               	goto	l512
  8200  001742  0E05               	movlw	5
  8201  001744  1845               	xorwf	_t,w,c
  8202  001746  1046               	iorwf	_t+1,w,c
  8203  001748  A4D8               	btfss	status,2,c
  8204  00174A  D002               	goto	l510
  8205  00174C                     l512:
  8206  00174C  868A               	bsf	3978,3,c	;volatile
  8207  00174E  0012               	return	
  8208  001750                     l510:
  8209                           
  8210                           ;motors.c: 99: else{LATBbits.LATB3 = 0;}
  8211  001750  968A               	bcf	3978,3,c	;volatile
  8212                           
  8213                           ;motors.c: 100: }
  8214  001752  0012               	return	
  8215  001754                     l3523:
  8216                           
  8217                           ;motors.c: 101: else if(mode == 4){
  8218  001754  0E04               	movlw	4
  8219  001756  1821               	xorwf	updateS1@mode,w,c
  8220  001758  1022               	iorwf	updateS1@mode+1,w,c
  8221  00175A  B4D8               	btfsc	status,2,c
  8222  00175C  0012               	return	
  8223                           
  8224                           ;motors.c: 104: else{
  8225                           ;motors.c: 105: _delay((unsigned long)((10)*(32000000/4000.0)));
  8226                           
  8227                           ;motors.c: 103: }
  8228  00175E  0E68               	movlw	104
  8229  001760  6E23               	movwf	??_updateS1& (0+255),c
  8230  001762  0EE4               	movlw	228
  8231  001764                     u8157:
  8232  001764  2EE8               	decfsz	wreg,f,c
  8233  001766  D7FE               	bra	u8157
  8234  001768  2E23               	decfsz	??_updateS1& (0+255),f,c
  8235  00176A  D7FC               	bra	u8157
  8236  00176C  D000               	nop2	
  8237                           
  8238                           ;motors.c: 107: if(mode == 1 || mode == 5){
  8239  00176E  0421               	decf	updateS1@mode,w,c
  8240  001770  1022               	iorwf	updateS1@mode+1,w,c
  8241  001772  B4D8               	btfsc	status,2,c
  8242  001774  D005               	goto	l3533
  8243  001776  0E05               	movlw	5
  8244  001778  1821               	xorwf	updateS1@mode,w,c
  8245  00177A  1022               	iorwf	updateS1@mode+1,w,c
  8246  00177C  A4D8               	btfss	status,2,c
  8247  00177E  D013               	goto	l3539
  8248  001780                     l3533:
  8249                           
  8250                           ;motors.c: 108: s1 ++;
  8251  001780  0100               	movlb	0	; () banked
  8252  001782  4BC0               	infsnz	_s1& (0+255),f,b
  8253  001784  2BC1               	incf	(_s1+1)& (0+255),f,b
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;motors.c: 109: if (s1>4) {s1=1;}
  8257  001786  0100               	movlb	0	; () banked
  8258  001788  BFC1               	btfsc	(_s1+1)& (0+255),7,b
  8259  00178A  D02A               	goto	l3549
  8260  00178C  0100               	movlb	0	; () banked
  8261  00178E  51C1               	movf	(_s1+1)& (0+255),w,b
  8262  001790  E105               	bnz	u3690
  8263  001792  0E05               	movlw	5
  8264  001794  0100               	movlb	0	; () banked
  8265  001796  5DC0               	subwf	_s1& (0+255),w,b
  8266  001798  A0D8               	btfss	status,0,c
  8267  00179A  D022               	goto	l3549
  8268  00179C                     u3690:
  8269                           
  8270                           ; BSR set to: 0
  8271  00179C  0E00               	movlw	0
  8272  00179E  0100               	movlb	0	; () banked
  8273  0017A0  6FC1               	movwf	(_s1+1)& (0+255),b
  8274  0017A2  0E01               	movlw	1
  8275  0017A4  D01C               	goto	L14
  8276  0017A6                     l3539:
  8277                           
  8278                           ;motors.c: 112: else if(mode == 2 || mode==6){
  8279  0017A6  0E02               	movlw	2
  8280  0017A8  1821               	xorwf	updateS1@mode,w,c
  8281  0017AA  1022               	iorwf	updateS1@mode+1,w,c
  8282  0017AC  B4D8               	btfsc	status,2,c
  8283  0017AE  D005               	goto	l3543
  8284  0017B0  0E06               	movlw	6
  8285  0017B2  1821               	xorwf	updateS1@mode,w,c
  8286  0017B4  1022               	iorwf	updateS1@mode+1,w,c
  8287  0017B6  A4D8               	btfss	status,2,c
  8288  0017B8  D013               	goto	l3549
  8289  0017BA                     l3543:
  8290                           
  8291                           ;motors.c: 113: s1 --;
  8292  0017BA  0100               	movlb	0	; () banked
  8293  0017BC  07C0               	decf	_s1& (0+255),f,b
  8294  0017BE  A0D8               	btfss	status,0,c
  8295  0017C0  07C1               	decf	(_s1+1)& (0+255),f,b
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;motors.c: 114: if (s1<1) {s1=4;}
  8299  0017C2  0100               	movlb	0	; () banked
  8300  0017C4  BFC1               	btfsc	(_s1+1)& (0+255),7,b
  8301  0017C6  D007               	goto	l3547
  8302  0017C8  0100               	movlb	0	; () banked
  8303  0017CA  51C1               	movf	(_s1+1)& (0+255),w,b
  8304  0017CC  E109               	bnz	l3549
  8305  0017CE  0100               	movlb	0	; () banked
  8306  0017D0  05C0               	decf	_s1& (0+255),w,b
  8307  0017D2  B0D8               	btfsc	status,0,c
  8308  0017D4  D005               	goto	l3549
  8309  0017D6                     l3547:
  8310                           
  8311                           ; BSR set to: 0
  8312  0017D6  0E00               	movlw	0
  8313  0017D8  0100               	movlb	0	; () banked
  8314  0017DA  6FC1               	movwf	(_s1+1)& (0+255),b
  8315  0017DC  0E04               	movlw	4
  8316  0017DE                     L14:
  8317  0017DE  6FC0               	movwf	_s1& (0+255),b
  8318  0017E0                     l3549:
  8319                           
  8320                           ;motors.c: 115: }
  8321                           ;motors.c: 117: if(mode == 1 || mode ==2){
  8322  0017E0  0421               	decf	updateS1@mode,w,c
  8323  0017E2  1022               	iorwf	updateS1@mode+1,w,c
  8324  0017E4  B4D8               	btfsc	status,2,c
  8325  0017E6  D005               	goto	l3553
  8326  0017E8  0E02               	movlw	2
  8327  0017EA  1821               	xorwf	updateS1@mode,w,c
  8328  0017EC  1022               	iorwf	updateS1@mode+1,w,c
  8329  0017EE  A4D8               	btfss	status,2,c
  8330  0017F0  D027               	goto	l3569
  8331  0017F2                     l3553:
  8332                           
  8333                           ;motors.c: 118: if (s1 == 1){LATDbits.LATD1 = 1;}
  8334  0017F2  0100               	movlb	0	; () banked
  8335  0017F4  05C0               	decf	_s1& (0+255),w,b
  8336  0017F6  0100               	movlb	0	; () banked
  8337  0017F8  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8338  0017FA  A4D8               	btfss	status,2,c
  8339  0017FC  D002               	goto	l529
  8340                           
  8341                           ; BSR set to: 0
  8342  0017FE  828C               	bsf	3980,1,c	;volatile
  8343  001800  D001               	goto	l3557
  8344  001802                     l529:
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;motors.c: 119: else{LATDbits.LATD1 = 0;}
  8348  001802  928C               	bcf	3980,1,c	;volatile
  8349  001804                     l3557:
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;motors.c: 120: if (s1 == 2){LATBbits.LATB3 = 1;}
  8353  001804  0E02               	movlw	2
  8354  001806  0100               	movlb	0	; () banked
  8355  001808  19C0               	xorwf	_s1& (0+255),w,b
  8356  00180A  0100               	movlb	0	; () banked
  8357  00180C  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8358  00180E  A4D8               	btfss	status,2,c
  8359  001810  D002               	goto	l531
  8360                           
  8361                           ; BSR set to: 0
  8362  001812  868A               	bsf	3978,3,c	;volatile
  8363  001814  D001               	goto	l3561
  8364  001816                     l531:
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;motors.c: 121: else{LATBbits.LATB3 = 0;}
  8368  001816  968A               	bcf	3978,3,c	;volatile
  8369  001818                     l3561:
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;motors.c: 122: if (s1 == 3){LATBbits.LATB2 = 1;}
  8373  001818  0E03               	movlw	3
  8374  00181A  0100               	movlb	0	; () banked
  8375  00181C  19C0               	xorwf	_s1& (0+255),w,b
  8376  00181E  0100               	movlb	0	; () banked
  8377  001820  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8378  001822  A4D8               	btfss	status,2,c
  8379  001824  D002               	goto	l533
  8380                           
  8381                           ; BSR set to: 0
  8382  001826  848A               	bsf	3978,2,c	;volatile
  8383  001828  D001               	goto	l3565
  8384  00182A                     l533:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;motors.c: 123: else{LATBbits.LATB2 = 0;}
  8388  00182A  948A               	bcf	3978,2,c	;volatile
  8389  00182C                     l3565:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;motors.c: 124: if (s1 == 4){LATBbits.LATB0 = 1;}
  8393  00182C  0E04               	movlw	4
  8394  00182E  0100               	movlb	0	; () banked
  8395  001830  19C0               	xorwf	_s1& (0+255),w,b
  8396  001832  0100               	movlb	0	; () banked
  8397  001834  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8398  001836  A4D8               	btfss	status,2,c
  8399  001838  D002               	goto	l535
  8400                           
  8401                           ; BSR set to: 0
  8402  00183A  808A               	bsf	3978,0,c	;volatile
  8403  00183C  D001               	goto	l3569
  8404  00183E                     l535:
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;motors.c: 125: else{LATBbits.LATB0 = 0;}
  8408  00183E  908A               	bcf	3978,0,c	;volatile
  8409  001840                     l3569:
  8410                           
  8411                           ;motors.c: 126: }
  8412                           ;motors.c: 127: if(mode == 5 || mode ==6){
  8413  001840  0E05               	movlw	5
  8414  001842  1821               	xorwf	updateS1@mode,w,c
  8415  001844  1022               	iorwf	updateS1@mode+1,w,c
  8416  001846  B4D8               	btfsc	status,2,c
  8417  001848  D005               	goto	l3573
  8418  00184A  0E06               	movlw	6
  8419  00184C  1821               	xorwf	updateS1@mode,w,c
  8420  00184E  1022               	iorwf	updateS1@mode+1,w,c
  8421  001850  A4D8               	btfss	status,2,c
  8422  001852  0012               	return	
  8423  001854                     l3573:
  8424                           
  8425                           ;motors.c: 128: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  8426  001854  0100               	movlb	0	; () banked
  8427  001856  05C0               	decf	_s1& (0+255),w,b
  8428  001858  0100               	movlb	0	; () banked
  8429  00185A  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8430  00185C  A4D8               	btfss	status,2,c
  8431  00185E  D004               	goto	l3577
  8432                           
  8433                           ; BSR set to: 0
  8434  001860  828C               	bsf	3980,1,c	;volatile
  8435  001862  868A               	bsf	3978,3,c	;volatile
  8436  001864  948A               	bcf	3978,2,c	;volatile
  8437  001866  908A               	bcf	3978,0,c	;volatile
  8438  001868                     l3577:
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;motors.c: 129: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  8442  001868  0E02               	movlw	2
  8443  00186A  0100               	movlb	0	; () banked
  8444  00186C  19C0               	xorwf	_s1& (0+255),w,b
  8445  00186E  0100               	movlb	0	; () banked
  8446  001870  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8447  001872  A4D8               	btfss	status,2,c
  8448  001874  D004               	goto	l3581
  8449                           
  8450                           ; BSR set to: 0
  8451  001876  928C               	bcf	3980,1,c	;volatile
  8452  001878  868A               	bsf	3978,3,c	;volatile
  8453  00187A  848A               	bsf	3978,2,c	;volatile
  8454  00187C  908A               	bcf	3978,0,c	;volatile
  8455  00187E                     l3581:
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;motors.c: 130: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  8459  00187E  0E03               	movlw	3
  8460  001880  0100               	movlb	0	; () banked
  8461  001882  19C0               	xorwf	_s1& (0+255),w,b
  8462  001884  0100               	movlb	0	; () banked
  8463  001886  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8464  001888  A4D8               	btfss	status,2,c
  8465  00188A  D004               	goto	l3585
  8466                           
  8467                           ; BSR set to: 0
  8468  00188C  928C               	bcf	3980,1,c	;volatile
  8469  00188E  968A               	bcf	3978,3,c	;volatile
  8470  001890  848A               	bsf	3978,2,c	;volatile
  8471  001892  808A               	bsf	3978,0,c	;volatile
  8472  001894                     l3585:
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;motors.c: 131: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  8476  001894  0E04               	movlw	4
  8477  001896  0100               	movlb	0	; () banked
  8478  001898  19C0               	xorwf	_s1& (0+255),w,b
  8479  00189A  0100               	movlb	0	; () banked
  8480  00189C  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8481  00189E  A4D8               	btfss	status,2,c
  8482  0018A0  0012               	return	
  8483                           
  8484                           ; BSR set to: 0
  8485  0018A2  828C               	bsf	3980,1,c	;volatile
  8486  0018A4  968A               	bcf	3978,3,c	;volatile
  8487  0018A6  948A               	bcf	3978,2,c	;volatile
  8488  0018A8  808A               	bsf	3978,0,c	;volatile
  8489                           
  8490                           ; BSR set to: 0
  8491                           
  8492                           ; BSR set to: 0
  8493                           
  8494                           ; BSR set to: 0
  8495                           
  8496                           ; BSR set to: 0
  8497                           
  8498                           ; BSR set to: 0
  8499  0018AA  0012               	return	
  8500  0018AC                     __end_of_updateS1:
  8501                           	opt stack 0
  8502                           tblptru	equ	0xFF8
  8503                           tblptrh	equ	0xFF7
  8504                           tblptrl	equ	0xFF6
  8505                           tablat	equ	0xFF5
  8506                           prodh	equ	0xFF4
  8507                           prodl	equ	0xFF3
  8508                           intcon	equ	0xFF2
  8509                           intcon2	equ	0xFF1
  8510                           postinc0	equ	0xFEE
  8511                           wreg	equ	0xFE8
  8512                           indf2	equ	0xFDF
  8513                           postinc2	equ	0xFDE
  8514                           postdec2	equ	0xFDD
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _startTMR1 *****************
  8520 ;; Defined at:
  8521 ;;		line 24 in file "logic.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  2   24[None  ] int 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;Total ram usage:        0 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    2
  8542 ;; This function calls:
  8543 ;;		Nothing
  8544 ;; This function is called by:
  8545 ;;		_main
  8546 ;;		_calibrateWheels
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text26
  8551  002C40                     __ptext26:
  8552                           	opt stack 0
  8553  002C40                     _startTMR1:
  8554                           	opt stack 28
  8555                           
  8556                           ;logic.c: 25: T1CON = 0b10110000;
  8557                           
  8558                           ;incstack = 0
  8559  002C40  0EB0               	movlw	176
  8560  002C42  6ECD               	movwf	4045,c	;volatile
  8561                           
  8562                           ;logic.c: 26: TMR1H = 0b11101001;
  8563  002C44  0EE9               	movlw	233
  8564  002C46  6ECF               	movwf	4047,c	;volatile
  8565                           
  8566                           ;logic.c: 27: TMR1L = 0b01011011;
  8567  002C48  0E5B               	movlw	91
  8568  002C4A  6ECE               	movwf	4046,c	;volatile
  8569                           
  8570                           ;logic.c: 28: TMR1ON = 1;
  8571  002C4C  80CD               	bsf	4045,0,c	;volatile
  8572  002C4E  0012               	return		;funcret
  8573  002C50                     __end_of_startTMR1:
  8574                           	opt stack 0
  8575                           tblptru	equ	0xFF8
  8576                           tblptrh	equ	0xFF7
  8577                           tblptrl	equ	0xFF6
  8578                           tablat	equ	0xFF5
  8579                           prodh	equ	0xFF4
  8580                           prodl	equ	0xFF3
  8581                           intcon	equ	0xFF2
  8582                           intcon2	equ	0xFF1
  8583                           postinc0	equ	0xFEE
  8584                           wreg	equ	0xFE8
  8585                           indf2	equ	0xFDF
  8586                           postinc2	equ	0xFDE
  8587                           postdec2	equ	0xFDD
  8588                           fsr2h	equ	0xFDA
  8589                           fsr2l	equ	0xFD9
  8590                           status	equ	0xFD8
  8591                           
  8592 ;; *************** function _readADC *****************
  8593 ;; Defined at:
  8594 ;;		line 9 in file "logic.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  channel         1    wreg     unsigned char 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  channel         1   33[COMRAM] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      void 
  8601 ;; Registers used:
  8602 ;;		wreg, status,2, status,0, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8612 ;;Total ram usage:        2 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    2
  8615 ;; This function calls:
  8616 ;;		Nothing
  8617 ;; This function is called by:
  8618 ;;		_main
  8619 ;;		_calibrateWheels
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           	psect	text27
  8624  002BC0                     __ptext27:
  8625                           	opt stack 0
  8626  002BC0                     _readADC:
  8627                           	opt stack 28
  8628                           
  8629                           ;incstack = 0
  8630                           ;readADC@channel stored from wreg
  8631  002BC0  6E22               	movwf	readADC@channel,c
  8632                           
  8633                           ;logic.c: 11: ADCON0 = ((channel <<2));
  8634  002BC2  4422               	rlncf	readADC@channel,w,c
  8635  002BC4  46E8               	rlncf	wreg,f,c
  8636  002BC6  0BFC               	andlw	252
  8637  002BC8  6EC2               	movwf	4034,c	;volatile
  8638                           
  8639                           ;logic.c: 12: ADCON0bits.ADON = 1;
  8640  002BCA  80C2               	bsf	4034,0,c	;volatile
  8641                           
  8642                           ;logic.c: 13: ADCON0bits.GO = 1;
  8643  002BCC  82C2               	bsf	4034,1,c	;volatile
  8644                           
  8645                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  8646  002BCE  D007               	goto	l3847
  8647  002BD0                     l3845:
  8648  002BD0  0E34               	movlw	52
  8649  002BD2  6E21               	movwf	??_readADC& (0+255),c
  8650  002BD4  0EF2               	movlw	242
  8651  002BD6                     u8167:
  8652  002BD6  2EE8               	decfsz	wreg,f,c
  8653  002BD8  D7FE               	bra	u8167
  8654  002BDA  2E21               	decfsz	??_readADC& (0+255),f,c
  8655  002BDC  D7FC               	bra	u8167
  8656  002BDE                     l3847:
  8657  002BDE  A2C2               	btfss	4034,1,c	;volatile
  8658  002BE0  0012               	return	
  8659  002BE2  D7F6               	goto	l3845
  8660  002BE4                     __end_of_readADC:
  8661                           	opt stack 0
  8662                           tblptru	equ	0xFF8
  8663                           tblptrh	equ	0xFF7
  8664                           tblptrl	equ	0xFF6
  8665                           tablat	equ	0xFF5
  8666                           prodh	equ	0xFF4
  8667                           prodl	equ	0xFF3
  8668                           intcon	equ	0xFF2
  8669                           intcon2	equ	0xFF1
  8670                           postinc0	equ	0xFEE
  8671                           wreg	equ	0xFE8
  8672                           indf2	equ	0xFDF
  8673                           postinc2	equ	0xFDE
  8674                           postdec2	equ	0xFDD
  8675                           fsr2h	equ	0xFDA
  8676                           fsr2l	equ	0xFD9
  8677                           status	equ	0xFD8
  8678                           
  8679 ;; *************** function _addRun *****************
  8680 ;; Defined at:
  8681 ;;		line 69 in file "interface.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;  dur             2   36[COMRAM] int 
  8684 ;;  year            2   38[COMRAM] int 
  8685 ;;  month           2   40[COMRAM] int 
  8686 ;;  date            2   42[COMRAM] int 
  8687 ;;  hours           2   44[COMRAM] int 
  8688 ;;  mins            2   46[COMRAM] int 
  8689 ;;  secs            2   48[COMRAM] int 
  8690 ;;  sodaT           2   50[COMRAM] int 
  8691 ;;  sodaNT          2   52[COMRAM] int 
  8692 ;;  soupL           2   54[COMRAM] int 
  8693 ;;  soupNL          2   56[COMRAM] int 
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  currRun         2   58[COMRAM] int 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  1    wreg      void 
  8698 ;; Registers used:
  8699 ;;		wreg, status,2, status,0, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8705 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Totals:        24       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;Total ram usage:       27 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    3
  8712 ;; This function calls:
  8713 ;;		_eepromRead
  8714 ;;		_eepromWrite
  8715 ;; This function is called by:
  8716 ;;		_main
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text28
  8721  002316                     __ptext28:
  8722                           	opt stack 0
  8723  002316                     _addRun:
  8724                           	opt stack 27
  8725                           
  8726                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  8727                           
  8728                           ;incstack = 0
  8729  002316  0EFF               	movlw	255
  8730  002318  0100               	movlb	0	; () banked
  8731  00231A  6F80               	movwf	??_addRun& (0+255),b
  8732  00231C  0EFF               	movlw	255
  8733  00231E  0100               	movlb	0	; () banked
  8734  002320  6F81               	movwf	(??_addRun+1)& (0+255),b
  8735  002322  0E00               	movlw	0
  8736  002324  EC80  F015         	call	_eepromRead
  8737  002328  0100               	movlb	0	; () banked
  8738  00232A  6F82               	movwf	(??_addRun+2)& (0+255),b
  8739  00232C  0100               	movlb	0	; () banked
  8740  00232E  5180               	movf	??_addRun& (0+255),w,b
  8741  002330  0100               	movlb	0	; () banked
  8742  002332  2582               	addwf	(??_addRun+2)& (0+255),w,b
  8743  002334  6E3B               	movwf	addRun@currRun,c
  8744  002336  0E00               	movlw	0
  8745  002338  0100               	movlb	0	; () banked
  8746  00233A  BF82               	btfsc	(??_addRun+2)& (0+255),7,b
  8747  00233C  0EFF               	movlw	255
  8748  00233E  0100               	movlb	0	; () banked
  8749  002340  2181               	addwfc	(??_addRun+1)& (0+255),w,b
  8750  002342  6E3C               	movwf	addRun@currRun+1,c
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  8754  002344  BE3C               	btfsc	addRun@currRun+1,7,c
  8755  002346  D005               	goto	l5601
  8756  002348  503C               	movf	addRun@currRun+1,w,c
  8757  00234A  E107               	bnz	l5603
  8758  00234C  043B               	decf	addRun@currRun,w,c
  8759  00234E  B0D8               	btfsc	status,0,c
  8760  002350  D004               	goto	l5603
  8761  002352                     l5601:
  8762                           
  8763                           ; BSR set to: 0
  8764  002352  0E00               	movlw	0
  8765  002354  6E3C               	movwf	addRun@currRun+1,c
  8766  002356  0E04               	movlw	4
  8767  002358  6E3B               	movwf	addRun@currRun,c
  8768  00235A                     l5603:
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;interface.c: 72: eepromWrite(0, currRun);
  8772  00235A  C03B  F021         	movff	addRun@currRun,eepromWrite@data
  8773  00235E  0E00               	movlw	0
  8774  002360  EC64  F015         	call	_eepromWrite
  8775                           
  8776                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  8777  002364  C025  F021         	movff	addRun@dur,eepromWrite@data
  8778  002368  C03B  F080         	movff	addRun@currRun,??_addRun
  8779  00236C  0100               	movlb	0	; () banked
  8780  00236E  3B80               	swapf	??_addRun& (0+255),f,b
  8781  002370  0EF0               	movlw	240
  8782  002372  1780               	andwf	??_addRun& (0+255),f,b
  8783  002374  0100               	movlb	0	; () banked
  8784  002376  2980               	incf	??_addRun& (0+255),w,b
  8785  002378  EC64  F015         	call	_eepromWrite
  8786                           
  8787                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  8788  00237C  C027  F021         	movff	addRun@year,eepromWrite@data
  8789  002380  C03B  F080         	movff	addRun@currRun,??_addRun
  8790  002384  0100               	movlb	0	; () banked
  8791  002386  3B80               	swapf	??_addRun& (0+255),f,b
  8792  002388  0EF0               	movlw	240
  8793  00238A  1780               	andwf	??_addRun& (0+255),f,b
  8794  00238C  0100               	movlb	0	; () banked
  8795  00238E  5180               	movf	??_addRun& (0+255),w,b
  8796  002390  0F02               	addlw	2
  8797  002392  EC64  F015         	call	_eepromWrite
  8798                           
  8799                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  8800  002396  C029  F021         	movff	addRun@month,eepromWrite@data
  8801  00239A  C03B  F080         	movff	addRun@currRun,??_addRun
  8802  00239E  0100               	movlb	0	; () banked
  8803  0023A0  3B80               	swapf	??_addRun& (0+255),f,b
  8804  0023A2  0EF0               	movlw	240
  8805  0023A4  1780               	andwf	??_addRun& (0+255),f,b
  8806  0023A6  0100               	movlb	0	; () banked
  8807  0023A8  5180               	movf	??_addRun& (0+255),w,b
  8808  0023AA  0F03               	addlw	3
  8809  0023AC  EC64  F015         	call	_eepromWrite
  8810                           
  8811                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8812  0023B0  C02B  F021         	movff	addRun@date,eepromWrite@data
  8813  0023B4  C03B  F080         	movff	addRun@currRun,??_addRun
  8814  0023B8  0100               	movlb	0	; () banked
  8815  0023BA  3B80               	swapf	??_addRun& (0+255),f,b
  8816  0023BC  0EF0               	movlw	240
  8817  0023BE  1780               	andwf	??_addRun& (0+255),f,b
  8818  0023C0  0100               	movlb	0	; () banked
  8819  0023C2  5180               	movf	??_addRun& (0+255),w,b
  8820  0023C4  0F04               	addlw	4
  8821  0023C6  EC64  F015         	call	_eepromWrite
  8822                           
  8823                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8824  0023CA  C02D  F021         	movff	addRun@hours,eepromWrite@data
  8825  0023CE  C03B  F080         	movff	addRun@currRun,??_addRun
  8826  0023D2  0100               	movlb	0	; () banked
  8827  0023D4  3B80               	swapf	??_addRun& (0+255),f,b
  8828  0023D6  0EF0               	movlw	240
  8829  0023D8  1780               	andwf	??_addRun& (0+255),f,b
  8830  0023DA  0100               	movlb	0	; () banked
  8831  0023DC  5180               	movf	??_addRun& (0+255),w,b
  8832  0023DE  0F05               	addlw	5
  8833  0023E0  EC64  F015         	call	_eepromWrite
  8834                           
  8835                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8836  0023E4  C02F  F021         	movff	addRun@mins,eepromWrite@data
  8837  0023E8  C03B  F080         	movff	addRun@currRun,??_addRun
  8838  0023EC  0100               	movlb	0	; () banked
  8839  0023EE  3B80               	swapf	??_addRun& (0+255),f,b
  8840  0023F0  0EF0               	movlw	240
  8841  0023F2  1780               	andwf	??_addRun& (0+255),f,b
  8842  0023F4  0100               	movlb	0	; () banked
  8843  0023F6  5180               	movf	??_addRun& (0+255),w,b
  8844  0023F8  0F06               	addlw	6
  8845  0023FA  EC64  F015         	call	_eepromWrite
  8846                           
  8847                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8848  0023FE  C031  F021         	movff	addRun@secs,eepromWrite@data
  8849  002402  C03B  F080         	movff	addRun@currRun,??_addRun
  8850  002406  0100               	movlb	0	; () banked
  8851  002408  3B80               	swapf	??_addRun& (0+255),f,b
  8852  00240A  0EF0               	movlw	240
  8853  00240C  1780               	andwf	??_addRun& (0+255),f,b
  8854  00240E  0100               	movlb	0	; () banked
  8855  002410  5180               	movf	??_addRun& (0+255),w,b
  8856  002412  0F07               	addlw	7
  8857  002414  EC64  F015         	call	_eepromWrite
  8858                           
  8859                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8860  002418  C033  F021         	movff	addRun@sodaT,eepromWrite@data
  8861  00241C  C03B  F080         	movff	addRun@currRun,??_addRun
  8862  002420  0100               	movlb	0	; () banked
  8863  002422  3B80               	swapf	??_addRun& (0+255),f,b
  8864  002424  0EF0               	movlw	240
  8865  002426  1780               	andwf	??_addRun& (0+255),f,b
  8866  002428  0100               	movlb	0	; () banked
  8867  00242A  5180               	movf	??_addRun& (0+255),w,b
  8868  00242C  0F08               	addlw	8
  8869  00242E  EC64  F015         	call	_eepromWrite
  8870                           
  8871                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8872  002432  C035  F021         	movff	addRun@sodaNT,eepromWrite@data
  8873  002436  C03B  F080         	movff	addRun@currRun,??_addRun
  8874  00243A  0100               	movlb	0	; () banked
  8875  00243C  3B80               	swapf	??_addRun& (0+255),f,b
  8876  00243E  0EF0               	movlw	240
  8877  002440  1780               	andwf	??_addRun& (0+255),f,b
  8878  002442  0100               	movlb	0	; () banked
  8879  002444  5180               	movf	??_addRun& (0+255),w,b
  8880  002446  0F09               	addlw	9
  8881  002448  EC64  F015         	call	_eepromWrite
  8882                           
  8883                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8884  00244C  C037  F021         	movff	addRun@soupL,eepromWrite@data
  8885  002450  C03B  F080         	movff	addRun@currRun,??_addRun
  8886  002454  0100               	movlb	0	; () banked
  8887  002456  3B80               	swapf	??_addRun& (0+255),f,b
  8888  002458  0EF0               	movlw	240
  8889  00245A  1780               	andwf	??_addRun& (0+255),f,b
  8890  00245C  0100               	movlb	0	; () banked
  8891  00245E  5180               	movf	??_addRun& (0+255),w,b
  8892  002460  0F0A               	addlw	10
  8893  002462  EC64  F015         	call	_eepromWrite
  8894                           
  8895                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8896  002466  C039  F021         	movff	addRun@soupNL,eepromWrite@data
  8897  00246A  C03B  F080         	movff	addRun@currRun,??_addRun
  8898  00246E  0100               	movlb	0	; () banked
  8899  002470  3B80               	swapf	??_addRun& (0+255),f,b
  8900  002472  0EF0               	movlw	240
  8901  002474  1780               	andwf	??_addRun& (0+255),f,b
  8902  002476  0100               	movlb	0	; () banked
  8903  002478  5180               	movf	??_addRun& (0+255),w,b
  8904  00247A  0F0B               	addlw	11
  8905  00247C  EC64  F015         	call	_eepromWrite
  8906  002480  0012               	return		;funcret
  8907  002482                     __end_of_addRun:
  8908                           	opt stack 0
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           intcon2	equ	0xFF1
  8917                           postinc0	equ	0xFEE
  8918                           wreg	equ	0xFE8
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           fsr2h	equ	0xFDA
  8923                           fsr2l	equ	0xFD9
  8924                           status	equ	0xFD8
  8925                           
  8926 ;; *************** function _eepromWrite *****************
  8927 ;; Defined at:
  8928 ;;		line 43 in file "interface.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  address         1    wreg     char 
  8931 ;;  data            1   32[COMRAM] char 
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  address         1   35[COMRAM] char 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  1    wreg      void 
  8936 ;; Registers used:
  8937 ;;		wreg, status,2, status,0
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8943 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;Total ram usage:        4 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    2
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_addRun
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text29
  8958  002AC8                     __ptext29:
  8959                           	opt stack 0
  8960  002AC8                     _eepromWrite:
  8961                           	opt stack 27
  8962                           
  8963                           ;incstack = 0
  8964                           ;eepromWrite@address stored from wreg
  8965  002AC8  6E24               	movwf	eepromWrite@address,c
  8966                           
  8967                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8968  002ACA  C024  F022         	movff	eepromWrite@address,??_eepromWrite
  8969  002ACE  0E08               	movlw	8
  8970  002AD0  6E23               	movwf	(??_eepromWrite+1)& (0+255),c
  8971  002AD2                     u4465:
  8972  002AD2  3422               	rlcf	??_eepromWrite,w,c
  8973  002AD4  3222               	rrcf	??_eepromWrite,f,c
  8974  002AD6  2E23               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8975  002AD8  D7FC               	goto	u4465
  8976  002ADA  5022               	movf	??_eepromWrite,w,c
  8977  002ADC  6EAA               	movwf	4010,c	;volatile
  8978                           
  8979                           ;interface.c: 46: EEADR = (signed char)address;
  8980  002ADE  C024  FFA9         	movff	eepromWrite@address,4009	;volatile
  8981                           
  8982                           ;interface.c: 48: EEDATA = data;
  8983  002AE2  C021  FFA8         	movff	eepromWrite@data,4008	;volatile
  8984                           
  8985                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8986  002AE6  9EA6               	bcf	4006,7,c	;volatile
  8987                           
  8988                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8989  002AE8  9CA6               	bcf	4006,6,c	;volatile
  8990                           
  8991                           ;interface.c: 51: EECON1bits.WREN = 1;
  8992  002AEA  84A6               	bsf	4006,2,c	;volatile
  8993                           
  8994                           ;interface.c: 55: EECON2 = 0x55;
  8995  002AEC  0E55               	movlw	85
  8996  002AEE  6EA7               	movwf	4007,c	;volatile
  8997                           
  8998                           ;interface.c: 56: EECON2 = 0xAA;
  8999  002AF0  0EAA               	movlw	170
  9000  002AF2  6EA7               	movwf	4007,c	;volatile
  9001                           
  9002                           ;interface.c: 57: EECON1bits.WR = 1;
  9003  002AF4  82A6               	bsf	4006,1,c	;volatile
  9004  002AF6                     l697:
  9005  002AF6  A8A1               	btfss	4001,4,c	;volatile
  9006  002AF8  D7FE               	goto	l697
  9007                           
  9008                           ;interface.c: 63: }
  9009                           ;interface.c: 65: PIR2bits.EEIF = 0;
  9010  002AFA  98A1               	bcf	4001,4,c	;volatile
  9011                           
  9012                           ;interface.c: 66: EECON1bits.WREN = 0;
  9013  002AFC  94A6               	bcf	4006,2,c	;volatile
  9014  002AFE  0012               	return		;funcret
  9015  002B00                     __end_of_eepromWrite:
  9016                           	opt stack 0
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           intcon	equ	0xFF2
  9024                           intcon2	equ	0xFF1
  9025                           postinc0	equ	0xFEE
  9026                           wreg	equ	0xFE8
  9027                           indf2	equ	0xFDF
  9028                           postinc2	equ	0xFDE
  9029                           postdec2	equ	0xFDD
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _eepromRead *****************
  9035 ;; Defined at:
  9036 ;;		line 27 in file "interface.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  address         1    wreg     char 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  address         1   34[COMRAM] char 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      char 
  9043 ;; Registers used:
  9044 ;;		wreg, status,2, status,0
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9052 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9053 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;Total ram usage:        3 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    2
  9057 ;; This function calls:
  9058 ;;		Nothing
  9059 ;; This function is called by:
  9060 ;;		_addRun
  9061 ;;		_displayLog
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text30
  9066  002B00                     __ptext30:
  9067                           	opt stack 0
  9068  002B00                     _eepromRead:
  9069                           	opt stack 27
  9070                           
  9071                           ;incstack = 0
  9072                           ;eepromRead@address stored from wreg
  9073  002B00  6E23               	movwf	eepromRead@address,c
  9074                           
  9075                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  9076  002B02  C023  F021         	movff	eepromRead@address,??_eepromRead
  9077  002B06  0E08               	movlw	8
  9078  002B08  6E22               	movwf	(??_eepromRead+1)& (0+255),c
  9079  002B0A                     u6955:
  9080  002B0A  3421               	rlcf	??_eepromRead,w,c
  9081  002B0C  3221               	rrcf	??_eepromRead,f,c
  9082  002B0E  2E22               	decfsz	(??_eepromRead+1)& (0+255),f,c
  9083  002B10  D7FC               	goto	u6955
  9084  002B12  5021               	movf	??_eepromRead,w,c
  9085  002B14  6EAA               	movwf	4010,c	;volatile
  9086                           
  9087                           ;interface.c: 30: EEADR = (signed char)address;
  9088  002B16  C023  FFA9         	movff	eepromRead@address,4009	;volatile
  9089                           
  9090                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  9091  002B1A  9EA6               	bcf	4006,7,c	;volatile
  9092                           
  9093                           ;interface.c: 33: EECON1bits.CFGS = 0;
  9094  002B1C  9CA6               	bcf	4006,6,c	;volatile
  9095                           
  9096                           ;interface.c: 34: EECON1bits.RD = 1;
  9097  002B1E  80A6               	bsf	4006,0,c	;volatile
  9098  002B20                     l691:
  9099  002B20  B0A6               	btfsc	4006,0,c	;volatile
  9100  002B22  D7FE               	goto	l691
  9101                           
  9102                           ;interface.c: 40: return EEDATA;
  9103  002B24  50A8               	movf	4008,w,c	;volatile
  9104  002B26  0012               	return	
  9105  002B28                     __end_of_eepromRead:
  9106                           	opt stack 0
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon	equ	0xFF2
  9114                           intcon2	equ	0xFF1
  9115                           postinc0	equ	0xFEE
  9116                           wreg	equ	0xFE8
  9117                           indf2	equ	0xFDF
  9118                           postinc2	equ	0xFDE
  9119                           postdec2	equ	0xFDD
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function ___awmod *****************
  9125 ;; Defined at:
  9126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;  dividend        2   32[COMRAM] int 
  9129 ;;  divisor         2   34[COMRAM] int 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  sign            1   37[COMRAM] unsigned char 
  9132 ;;  counter         1   36[COMRAM] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  2   32[COMRAM] int 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;Total ram usage:        6 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    2
  9149 ;; This function calls:
  9150 ;;		Nothing
  9151 ;; This function is called by:
  9152 ;;		_main
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text31
  9157  0027BA                     __ptext31:
  9158                           	opt stack 0
  9159  0027BA                     ___awmod:
  9160                           	opt stack 28
  9161                           
  9162                           ;incstack = 0
  9163  0027BA  0E00               	movlw	0
  9164  0027BC  6E26               	movwf	___awmod@sign,c
  9165  0027BE  AE22               	btfss	___awmod@dividend+1,7,c
  9166  0027C0  D006               	goto	l4285
  9167  0027C2  6C21               	negf	___awmod@dividend,c
  9168  0027C4  1E22               	comf	___awmod@dividend+1,f,c
  9169  0027C6  B0D8               	btfsc	status,0,c
  9170  0027C8  2A22               	incf	___awmod@dividend+1,f,c
  9171  0027CA  0E01               	movlw	1
  9172  0027CC  6E26               	movwf	___awmod@sign,c
  9173  0027CE                     l4285:
  9174  0027CE  AE24               	btfss	___awmod@divisor+1,7,c
  9175  0027D0  D004               	goto	l4289
  9176  0027D2  6C23               	negf	___awmod@divisor,c
  9177  0027D4  1E24               	comf	___awmod@divisor+1,f,c
  9178  0027D6  B0D8               	btfsc	status,0,c
  9179  0027D8  2A24               	incf	___awmod@divisor+1,f,c
  9180  0027DA                     l4289:
  9181  0027DA  5023               	movf	___awmod@divisor,w,c
  9182  0027DC  1024               	iorwf	___awmod@divisor+1,w,c
  9183  0027DE  B4D8               	btfsc	status,2,c
  9184  0027E0  D018               	goto	l4305
  9185  0027E2  0E01               	movlw	1
  9186  0027E4  6E25               	movwf	___awmod@counter,c
  9187  0027E6  D004               	goto	l4295
  9188  0027E8                     l4293:
  9189  0027E8  90D8               	bcf	status,0,c
  9190  0027EA  3623               	rlcf	___awmod@divisor,f,c
  9191  0027EC  3624               	rlcf	___awmod@divisor+1,f,c
  9192  0027EE  2A25               	incf	___awmod@counter,f,c
  9193  0027F0                     l4295:
  9194  0027F0  AE24               	btfss	___awmod@divisor+1,7,c
  9195  0027F2  D7FA               	goto	l4293
  9196  0027F4                     l4297:
  9197  0027F4  5023               	movf	___awmod@divisor,w,c
  9198  0027F6  5C21               	subwf	___awmod@dividend,w,c
  9199  0027F8  5024               	movf	___awmod@divisor+1,w,c
  9200  0027FA  5822               	subwfb	___awmod@dividend+1,w,c
  9201  0027FC  A0D8               	btfss	status,0,c
  9202  0027FE  D004               	goto	l4301
  9203  002800  5023               	movf	___awmod@divisor,w,c
  9204  002802  5E21               	subwf	___awmod@dividend,f,c
  9205  002804  5024               	movf	___awmod@divisor+1,w,c
  9206  002806  5A22               	subwfb	___awmod@dividend+1,f,c
  9207  002808                     l4301:
  9208  002808  90D8               	bcf	status,0,c
  9209  00280A  3224               	rrcf	___awmod@divisor+1,f,c
  9210  00280C  3223               	rrcf	___awmod@divisor,f,c
  9211  00280E  2E25               	decfsz	___awmod@counter,f,c
  9212  002810  D7F1               	goto	l4297
  9213  002812                     l4305:
  9214  002812  5026               	movf	___awmod@sign,w,c
  9215  002814  B4D8               	btfsc	status,2,c
  9216  002816  D004               	goto	l4309
  9217  002818  6C21               	negf	___awmod@dividend,c
  9218  00281A  1E22               	comf	___awmod@dividend+1,f,c
  9219  00281C  B0D8               	btfsc	status,0,c
  9220  00281E  2A22               	incf	___awmod@dividend+1,f,c
  9221  002820                     l4309:
  9222  002820  C021  F021         	movff	___awmod@dividend,?___awmod
  9223  002824  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  9224  002828  0012               	return	
  9225  00282A                     __end_of___awmod:
  9226                           	opt stack 0
  9227                           tblptru	equ	0xFF8
  9228                           tblptrh	equ	0xFF7
  9229                           tblptrl	equ	0xFF6
  9230                           tablat	equ	0xFF5
  9231                           prodh	equ	0xFF4
  9232                           prodl	equ	0xFF3
  9233                           intcon	equ	0xFF2
  9234                           intcon2	equ	0xFF1
  9235                           postinc0	equ	0xFEE
  9236                           wreg	equ	0xFE8
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           fsr2h	equ	0xFDA
  9241                           fsr2l	equ	0xFD9
  9242                           status	equ	0xFD8
  9243                           
  9244 ;; *************** function _PWM2off *****************
  9245 ;; Defined at:
  9246 ;;		line 60 in file "motors.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      void 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;Total ram usage:        0 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    2
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_main
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text32
  9275  002C82                     __ptext32:
  9276                           	opt stack 0
  9277  002C82                     _PWM2off:
  9278                           	opt stack 28
  9279                           
  9280                           ;motors.c: 61: CCP2CONbits.DC2B0 = 0;
  9281                           
  9282                           ;incstack = 0
  9283  002C82  98BA               	bcf	4026,4,c	;volatile
  9284                           
  9285                           ;motors.c: 62: CCP2CONbits.DC2B1 = 0;
  9286  002C84  9ABA               	bcf	4026,5,c	;volatile
  9287                           
  9288                           ;motors.c: 63: CCPR2L = 0;
  9289  002C86  0E00               	movlw	0
  9290  002C88  6EBB               	movwf	4027,c	;volatile
  9291  002C8A  0012               	return		;funcret
  9292  002C8C                     __end_of_PWM2off:
  9293                           	opt stack 0
  9294                           tblptru	equ	0xFF8
  9295                           tblptrh	equ	0xFF7
  9296                           tblptrl	equ	0xFF6
  9297                           tablat	equ	0xFF5
  9298                           prodh	equ	0xFF4
  9299                           prodl	equ	0xFF3
  9300                           intcon	equ	0xFF2
  9301                           intcon2	equ	0xFF1
  9302                           postinc0	equ	0xFEE
  9303                           wreg	equ	0xFE8
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function _PWM2 *****************
  9312 ;; Defined at:
  9313 ;;		line 34 in file "motors.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  duty            2   32[COMRAM] int 
  9316 ;;  dir             2   34[COMRAM] int 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;                  1    wreg      void 
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;Total ram usage:        6 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; Hardware stack levels required when called:    2
  9335 ;; This function calls:
  9336 ;;		Nothing
  9337 ;; This function is called by:
  9338 ;;		_main
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           	psect	text33
  9343  002742                     __ptext33:
  9344                           	opt stack 0
  9345  002742                     _PWM2:
  9346                           	opt stack 28
  9347                           
  9348                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  9349                           
  9350                           ;incstack = 0
  9351  002742  C021  F025         	movff	PWM2@duty,??_PWM2
  9352  002746  0E01               	movlw	1
  9353  002748  1625               	andwf	??_PWM2,f,c
  9354  00274A  3A25               	swapf	??_PWM2,f,c
  9355  00274C  50BA               	movf	4026,w,c	;volatile
  9356  00274E  1825               	xorwf	??_PWM2,w,c
  9357  002750  0BEF               	andlw	-17
  9358  002752  1825               	xorwf	??_PWM2,w,c
  9359  002754  6EBA               	movwf	4026,c	;volatile
  9360                           
  9361                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9362  002756  3422               	rlcf	PWM2@duty+1,w,c
  9363  002758  3022               	rrcf	PWM2@duty+1,w,c
  9364  00275A  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9365  00275C  3021               	rrcf	PWM2@duty,w,c
  9366  00275E  6E25               	movwf	??_PWM2& (0+255),c
  9367  002760  0E01               	movlw	1
  9368  002762  1625               	andwf	??_PWM2,f,c
  9369  002764  3A25               	swapf	??_PWM2,f,c
  9370  002766  4625               	rlncf	??_PWM2,f,c
  9371  002768  50BA               	movf	4026,w,c	;volatile
  9372  00276A  1825               	xorwf	??_PWM2,w,c
  9373  00276C  0BDF               	andlw	-33
  9374  00276E  1825               	xorwf	??_PWM2,w,c
  9375  002770  6EBA               	movwf	4026,c	;volatile
  9376                           
  9377                           ;motors.c: 44: CCPR2L = (duty >> 2);
  9378  002772  C021  F025         	movff	PWM2@duty,??_PWM2
  9379  002776  C022  F026         	movff	PWM2@duty+1,??_PWM2+1
  9380  00277A  3426               	rlcf	??_PWM2+1,w,c
  9381  00277C  3226               	rrcf	??_PWM2+1,f,c
  9382  00277E  3225               	rrcf	??_PWM2,f,c
  9383  002780  3426               	rlcf	??_PWM2+1,w,c
  9384  002782  3226               	rrcf	??_PWM2+1,f,c
  9385  002784  3225               	rrcf	??_PWM2,f,c
  9386  002786  5025               	movf	??_PWM2,w,c
  9387  002788  6EBB               	movwf	4027,c	;volatile
  9388                           
  9389                           ;motors.c: 46: LATAbits.LATA6 = 0;
  9390  00278A  9C89               	bcf	3977,6,c	;volatile
  9391                           
  9392                           ;motors.c: 47: LATAbits.LATA7 = 0;
  9393  00278C  9E89               	bcf	3977,7,c	;volatile
  9394                           
  9395                           ;motors.c: 48: _delay((unsigned long)((50)*(32000000/4000.0)));
  9396  00278E  0E03               	movlw	3
  9397  002790  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9398  002792  0E08               	movlw	8
  9399  002794  6E25               	movwf	??_PWM2& (0+255),c
  9400  002796  0E77               	movlw	119
  9401  002798                     u8177:
  9402  002798  2EE8               	decfsz	wreg,f,c
  9403  00279A  D7FE               	bra	u8177
  9404  00279C  2E25               	decfsz	??_PWM2& (0+255),f,c
  9405  00279E  D7FC               	bra	u8177
  9406  0027A0  2E26               	decfsz	(??_PWM2+1)& (0+255),f,c
  9407  0027A2  D7FA               	bra	u8177
  9408  0027A4  F000               	nop	
  9409                           
  9410                           ;motors.c: 49: if(dir==1){
  9411  0027A6  0423               	decf	PWM2@dir,w,c
  9412  0027A8  1024               	iorwf	PWM2@dir+1,w,c
  9413  0027AA  A4D8               	btfss	status,2,c
  9414  0027AC  D003               	goto	l467
  9415                           
  9416                           ;motors.c: 50: LATAbits.LATA6 = 1;
  9417  0027AE  8C89               	bsf	3977,6,c	;volatile
  9418                           
  9419                           ;motors.c: 51: LATAbits.LATA7 = 0;
  9420  0027B0  9E89               	bcf	3977,7,c	;volatile
  9421                           
  9422                           ;motors.c: 52: }
  9423  0027B2  0012               	return	
  9424  0027B4                     l467:
  9425                           
  9426                           ;motors.c: 53: else{
  9427                           ;motors.c: 54: LATAbits.LATA6 = 0;
  9428  0027B4  9C89               	bcf	3977,6,c	;volatile
  9429                           
  9430                           ;motors.c: 55: LATAbits.LATA7 = 1;
  9431  0027B6  8E89               	bsf	3977,7,c	;volatile
  9432  0027B8  0012               	return	
  9433  0027BA                     __end_of_PWM2:
  9434                           	opt stack 0
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           intcon2	equ	0xFF1
  9443                           postinc0	equ	0xFEE
  9444                           wreg	equ	0xFE8
  9445                           indf2	equ	0xFDF
  9446                           postinc2	equ	0xFDE
  9447                           postdec2	equ	0xFDD
  9448                           fsr2h	equ	0xFDA
  9449                           fsr2l	equ	0xFD9
  9450                           status	equ	0xFD8
  9451                           
  9452 ;; *************** function _PWM1off *****************
  9453 ;; Defined at:
  9454 ;;		line 28 in file "motors.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;		None
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  1    wreg      void 
  9461 ;; Registers used:
  9462 ;;		wreg, status,2
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;Total ram usage:        0 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    2
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		_main
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text34
  9483  002C8C                     __ptext34:
  9484                           	opt stack 0
  9485  002C8C                     _PWM1off:
  9486                           	opt stack 28
  9487                           
  9488                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  9489                           
  9490                           ;incstack = 0
  9491  002C8C  98BD               	bcf	4029,4,c	;volatile
  9492                           
  9493                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  9494  002C8E  9ABD               	bcf	4029,5,c	;volatile
  9495                           
  9496                           ;motors.c: 31: CCPR1L = 0;
  9497  002C90  0E00               	movlw	0
  9498  002C92  6EBE               	movwf	4030,c	;volatile
  9499  002C94  0012               	return		;funcret
  9500  002C96                     __end_of_PWM1off:
  9501                           	opt stack 0
  9502                           tblptru	equ	0xFF8
  9503                           tblptrh	equ	0xFF7
  9504                           tblptrl	equ	0xFF6
  9505                           tablat	equ	0xFF5
  9506                           prodh	equ	0xFF4
  9507                           prodl	equ	0xFF3
  9508                           intcon	equ	0xFF2
  9509                           intcon2	equ	0xFF1
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           indf2	equ	0xFDF
  9513                           postinc2	equ	0xFDE
  9514                           postdec2	equ	0xFDD
  9515                           fsr2h	equ	0xFDA
  9516                           fsr2l	equ	0xFD9
  9517                           status	equ	0xFD8
  9518                           
  9519 ;; *************** function _PWM1 *****************
  9520 ;; Defined at:
  9521 ;;		line 14 in file "motors.c"
  9522 ;; Parameters:    Size  Location     Type
  9523 ;;  duty            2   32[COMRAM] int 
  9524 ;; Auto vars:     Size  Location     Type
  9525 ;;		None
  9526 ;; Return value:  Size  Location     Type
  9527 ;;                  1    wreg      void 
  9528 ;; Registers used:
  9529 ;;		wreg, status,2, status,0
  9530 ;; Tracked objects:
  9531 ;;		On entry : 0/0
  9532 ;;		On exit  : 0/0
  9533 ;;		Unchanged: 0/0
  9534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;Total ram usage:        4 bytes
  9540 ;; Hardware stack levels used:    1
  9541 ;; Hardware stack levels required when called:    2
  9542 ;; This function calls:
  9543 ;;		Nothing
  9544 ;; This function is called by:
  9545 ;;		_main
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text35
  9550  0029F6                     __ptext35:
  9551                           	opt stack 0
  9552  0029F6                     _PWM1:
  9553                           	opt stack 28
  9554                           
  9555                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  9556                           
  9557                           ;incstack = 0
  9558  0029F6  C021  F023         	movff	PWM1@duty,??_PWM1
  9559  0029FA  0E01               	movlw	1
  9560  0029FC  1623               	andwf	??_PWM1,f,c
  9561  0029FE  3A23               	swapf	??_PWM1,f,c
  9562  002A00  50BD               	movf	4029,w,c	;volatile
  9563  002A02  1823               	xorwf	??_PWM1,w,c
  9564  002A04  0BEF               	andlw	-17
  9565  002A06  1823               	xorwf	??_PWM1,w,c
  9566  002A08  6EBD               	movwf	4029,c	;volatile
  9567                           
  9568                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  9569  002A0A  3422               	rlcf	PWM1@duty+1,w,c
  9570  002A0C  3022               	rrcf	PWM1@duty+1,w,c
  9571  002A0E  6E24               	movwf	(??_PWM1+1)& (0+255),c
  9572  002A10  3021               	rrcf	PWM1@duty,w,c
  9573  002A12  6E23               	movwf	??_PWM1& (0+255),c
  9574  002A14  0E01               	movlw	1
  9575  002A16  1623               	andwf	??_PWM1,f,c
  9576  002A18  3A23               	swapf	??_PWM1,f,c
  9577  002A1A  4623               	rlncf	??_PWM1,f,c
  9578  002A1C  50BD               	movf	4029,w,c	;volatile
  9579  002A1E  1823               	xorwf	??_PWM1,w,c
  9580  002A20  0BDF               	andlw	-33
  9581  002A22  1823               	xorwf	??_PWM1,w,c
  9582  002A24  6EBD               	movwf	4029,c	;volatile
  9583                           
  9584                           ;motors.c: 24: CCPR1L = (duty >> 2);
  9585  002A26  C021  F023         	movff	PWM1@duty,??_PWM1
  9586  002A2A  C022  F024         	movff	PWM1@duty+1,??_PWM1+1
  9587  002A2E  3424               	rlcf	??_PWM1+1,w,c
  9588  002A30  3224               	rrcf	??_PWM1+1,f,c
  9589  002A32  3223               	rrcf	??_PWM1,f,c
  9590  002A34  3424               	rlcf	??_PWM1+1,w,c
  9591  002A36  3224               	rrcf	??_PWM1+1,f,c
  9592  002A38  3223               	rrcf	??_PWM1,f,c
  9593  002A3A  5023               	movf	??_PWM1,w,c
  9594  002A3C  6EBE               	movwf	4030,c	;volatile
  9595  002A3E  0012               	return		;funcret
  9596  002A40                     __end_of_PWM1:
  9597                           	opt stack 0
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           intcon2	equ	0xFF1
  9606                           postinc0	equ	0xFEE
  9607                           wreg	equ	0xFE8
  9608                           indf2	equ	0xFDF
  9609                           postinc2	equ	0xFDE
  9610                           postdec2	equ	0xFDD
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _handler *****************
  9616 ;; Defined at:
  9617 ;;		line 31 in file "main.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;		None
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9635 ;;Total ram usage:       18 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    1
  9638 ;; This function calls:
  9639 ;;		___awdiv
  9640 ;;		_updateS2
  9641 ;;		i2___wmul
  9642 ;;		i2_startTMR1
  9643 ;;		i2_updateS1
  9644 ;;		i2_updateS3
  9645 ;; This function is called by:
  9646 ;;		Interrupt level 2
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           	psect	intcode
  9651  000008                     __pintcode:
  9652                           	opt stack 0
  9653  000008                     _handler:
  9654                           	opt stack 25
  9655                           
  9656                           ;incstack = 0
  9657  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9658  00000A  EDAE  F00D         	call	int_func,f	;refresh shadow registers
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           intcon	equ	0xFF2
  9666                           intcon2	equ	0xFF1
  9667                           postinc0	equ	0xFEE
  9668                           wreg	equ	0xFE8
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           fsr2h	equ	0xFDA
  9673                           fsr2l	equ	0xFD9
  9674                           status	equ	0xFD8
  9675                           
  9676                           	psect	intcode_body
  9677  001B5C                     __pintcode_body:
  9678                           	opt stack 25
  9679  001B5C                     int_func:
  9680                           	opt stack 25
  9681  001B5C  0006               	pop		; remove dummy address from shadow register refresh
  9682  001B5E  CFFA F011          	movff	pclath,??_handler+2
  9683  001B62  CFFB F012          	movff	pclatu,??_handler+3
  9684  001B66  CFE9 F013          	movff	fsr0l,??_handler+4
  9685  001B6A  CFEA F014          	movff	fsr0h,??_handler+5
  9686  001B6E  CFE1 F015          	movff	fsr1l,??_handler+6
  9687  001B72  CFE2 F016          	movff	fsr1h,??_handler+7
  9688  001B76  CFD9 F017          	movff	fsr2l,??_handler+8
  9689  001B7A  CFDA F018          	movff	fsr2h,??_handler+9
  9690  001B7E  CFF3 F019          	movff	prodl,??_handler+10
  9691  001B82  CFF4 F01A          	movff	prodh,??_handler+11
  9692  001B86  CFF6 F01B          	movff	tblptrl,??_handler+12
  9693  001B8A  CFF7 F01C          	movff	tblptrh,??_handler+13
  9694  001B8E  CFF8 F01D          	movff	tblptru,??_handler+14
  9695  001B92  CFF5 F01E          	movff	tablat,??_handler+15
  9696                           
  9697                           ;main.c: 33: (INTCONbits.GIE = 0);
  9698  001B96  9EF2               	bcf	intcon,7,c	;volatile
  9699                           
  9700                           ;main.c: 34: if(TMR0IF){
  9701  001B98  A4F2               	btfss	intcon,2,c	;volatile
  9702  001B9A  D00E               	goto	i2l4553
  9703                           
  9704                           ;main.c: 35: TMR0IF = 0;
  9705  001B9C  94F2               	bcf	intcon,2,c	;volatile
  9706                           
  9707                           ;main.c: 36: seconds++;
  9708  001B9E  0100               	movlb	0	; () banked
  9709  001BA0  4BBC               	infsnz	_seconds& (0+255),f,b
  9710  001BA2  2BBD               	incf	(_seconds+1)& (0+255),f,b
  9711                           
  9712                           ; BSR set to: 0
  9713                           ;main.c: 37: TMR0ON = 0;
  9714  001BA4  9ED5               	bcf	4053,7,c	;volatile
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;main.c: 40: T0CON = 0b00010111;
  9718  001BA6  0E17               	movlw	23
  9719  001BA8  6ED5               	movwf	4053,c	;volatile
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;main.c: 41: TMR0H = 0b10000101;
  9723  001BAA  0E85               	movlw	133
  9724  001BAC  6ED7               	movwf	4055,c	;volatile
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;main.c: 42: TMR0L = 0b10101110;
  9728  001BAE  0EAE               	movlw	174
  9729  001BB0  6ED6               	movwf	4054,c	;volatile
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;main.c: 43: T0CON = T0CON | 0b10000000;
  9733  001BB2  50D5               	movf	4053,w,c	;volatile
  9734  001BB4  0980               	iorlw	128
  9735  001BB6  6ED5               	movwf	4053,c	;volatile
  9736  001BB8                     i2l4553:
  9737                           
  9738                           ;main.c: 44: }
  9739                           ;main.c: 46: if(TMR1IF){
  9740  001BB8  A09E               	btfss	3998,0,c	;volatile
  9741  001BBA  D0D7               	goto	i2l181
  9742                           
  9743                           ;main.c: 47: TMR1IF = 0;
  9744  001BBC  909E               	bcf	3998,0,c	;volatile
  9745                           
  9746                           ;main.c: 48: updateS1(S1mode);
  9747  001BBE  C05D  F001         	movff	_S1mode,i2updateS1@mode
  9748  001BC2  C05E  F002         	movff	_S1mode+1,i2updateS1@mode+1
  9749  001BC6  EC56  F00C         	call	i2_updateS1	;wreg free
  9750                           
  9751                           ;main.c: 49: updateS2(S2mode);
  9752  001BCA  C05B  F001         	movff	_S2mode,updateS2@mode
  9753  001BCE  C05C  F002         	movff	_S2mode+1,updateS2@mode+1
  9754  001BD2  EC41  F012         	call	_updateS2	;wreg free
  9755                           
  9756                           ;main.c: 50: updateS3(S3mode);
  9757  001BD6  C059  F001         	movff	_S3mode,i2updateS3@mode
  9758  001BDA  C05A  F002         	movff	_S3mode+1,i2updateS3@mode+1
  9759  001BDE  ECCD  F00F         	call	i2_updateS3	;wreg free
  9760                           
  9761                           ;main.c: 51: soupSteps ++;
  9762  001BE2  4A57               	infsnz	_soupSteps,f,c
  9763  001BE4  2A58               	incf	_soupSteps+1,f,c
  9764                           
  9765                           ;main.c: 52: sodaSteps ++;
  9766  001BE6  4A55               	infsnz	_sodaSteps,f,c
  9767  001BE8  2A56               	incf	_sodaSteps+1,f,c
  9768                           
  9769                           ;main.c: 54: if(((tabState == 0) && (sodaSteps == (sodaI*(sodaI+2)/2*100 + 500))) ||
  9770                           ;main.c: 55: ((tabState == 1) && (sodaSteps == (sodaI*(sodaI+1)/2*100 + 300)))){
  9771  001BEA  5053               	movf	_tabState,w,c
  9772  001BEC  1054               	iorwf	_tabState+1,w,c
  9773  001BEE  A4D8               	btfss	status,2,c
  9774  001BF0  D033               	goto	i2l4567
  9775  001BF2  0E00               	movlw	0
  9776  001BF4  6E0A               	movwf	___awdiv@divisor+1,c
  9777  001BF6  0E02               	movlw	2
  9778  001BF8  6E09               	movwf	___awdiv@divisor,c
  9779  001BFA  0E02               	movlw	2
  9780  001BFC  244B               	addwf	_sodaI,w,c
  9781  001BFE  6E01               	movwf	i2___wmul@multiplier,c
  9782  001C00  0E00               	movlw	0
  9783  001C02  204C               	addwfc	_sodaI+1,w,c
  9784  001C04  6E02               	movwf	i2___wmul@multiplier+1,c
  9785  001C06  C04B  F003         	movff	_sodaI,i2___wmul@multiplicand
  9786  001C0A  C04C  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9787  001C0E  ECCD  F015         	call	i2___wmul	;wreg free
  9788  001C12  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9789  001C16  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9790  001C1A  ECE2  F012         	call	___awdiv	;wreg free
  9791  001C1E  C007  F01F         	movff	?___awdiv,_handler$1823
  9792  001C22  C008  F020         	movff	?___awdiv+1,_handler$1823+1
  9793  001C26  0EF4               	movlw	244
  9794  001C28  6E0F               	movwf	??_handler& (0+255),c
  9795  001C2A  0E01               	movlw	1
  9796  001C2C  6E10               	movwf	(??_handler+1)& (0+255),c
  9797  001C2E  C01F  F001         	movff	_handler$1823,i2___wmul@multiplier
  9798  001C32  C020  F002         	movff	_handler$1823+1,i2___wmul@multiplier+1
  9799  001C36  0E00               	movlw	0
  9800  001C38  6E04               	movwf	i2___wmul@multiplicand+1,c
  9801  001C3A  0E64               	movlw	100
  9802  001C3C  6E03               	movwf	i2___wmul@multiplicand,c
  9803  001C3E  ECCD  F015         	call	i2___wmul	;wreg free
  9804  001C42  500F               	movf	??_handler,w,c
  9805  001C44  2601               	addwf	?i2___wmul,f,c
  9806  001C46  5010               	movf	??_handler+1,w,c
  9807  001C48  2202               	addwfc	?i2___wmul+1,f,c
  9808  001C4A  5055               	movf	_sodaSteps,w,c
  9809  001C4C  1801               	xorwf	?i2___wmul,w,c
  9810  001C4E  E104               	bnz	i2l4567
  9811  001C50  5056               	movf	_sodaSteps+1,w,c
  9812  001C52  1802               	xorwf	?i2___wmul+1,w,c
  9813  001C54  B4D8               	btfsc	status,2,c
  9814  001C56  D037               	goto	i2l4571
  9815  001C58                     i2l4567:
  9816  001C58  0453               	decf	_tabState,w,c
  9817  001C5A  1054               	iorwf	_tabState+1,w,c
  9818  001C5C  A4D8               	btfss	status,2,c
  9819  001C5E  D041               	goto	i2l4579
  9820  001C60  0E00               	movlw	0
  9821  001C62  6E0A               	movwf	___awdiv@divisor+1,c
  9822  001C64  0E02               	movlw	2
  9823  001C66  6E09               	movwf	___awdiv@divisor,c
  9824  001C68  0E01               	movlw	1
  9825  001C6A  244B               	addwf	_sodaI,w,c
  9826  001C6C  6E01               	movwf	i2___wmul@multiplier,c
  9827  001C6E  0E00               	movlw	0
  9828  001C70  204C               	addwfc	_sodaI+1,w,c
  9829  001C72  6E02               	movwf	i2___wmul@multiplier+1,c
  9830  001C74  C04B  F003         	movff	_sodaI,i2___wmul@multiplicand
  9831  001C78  C04C  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9832  001C7C  ECCD  F015         	call	i2___wmul	;wreg free
  9833  001C80  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9834  001C84  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9835  001C88  ECE2  F012         	call	___awdiv	;wreg free
  9836  001C8C  C007  F01F         	movff	?___awdiv,_handler$1823
  9837  001C90  C008  F020         	movff	?___awdiv+1,_handler$1823+1
  9838  001C94  0E2C               	movlw	44
  9839  001C96  6E0F               	movwf	??_handler& (0+255),c
  9840  001C98  0E01               	movlw	1
  9841  001C9A  6E10               	movwf	(??_handler+1)& (0+255),c
  9842  001C9C  C01F  F001         	movff	_handler$1823,i2___wmul@multiplier
  9843  001CA0  C020  F002         	movff	_handler$1823+1,i2___wmul@multiplier+1
  9844  001CA4  0E00               	movlw	0
  9845  001CA6  6E04               	movwf	i2___wmul@multiplicand+1,c
  9846  001CA8  0E64               	movlw	100
  9847  001CAA  6E03               	movwf	i2___wmul@multiplicand,c
  9848  001CAC  ECCD  F015         	call	i2___wmul	;wreg free
  9849  001CB0  500F               	movf	??_handler,w,c
  9850  001CB2  2601               	addwf	?i2___wmul,f,c
  9851  001CB4  5010               	movf	??_handler+1,w,c
  9852  001CB6  2202               	addwfc	?i2___wmul+1,f,c
  9853  001CB8  5055               	movf	_sodaSteps,w,c
  9854  001CBA  1801               	xorwf	?i2___wmul,w,c
  9855  001CBC  E112               	bnz	i2l4579
  9856  001CBE  5056               	movf	_sodaSteps+1,w,c
  9857  001CC0  1802               	xorwf	?i2___wmul+1,w,c
  9858  001CC2  A4D8               	btfss	status,2,c
  9859  001CC4  D00E               	goto	i2l4579
  9860  001CC6                     i2l4571:
  9861                           
  9862                           ;main.c: 56: if(sodaAlign == 1){sodaAlign = 2;}
  9863  001CC6  0451               	decf	_sodaAlign,w,c
  9864  001CC8  1052               	iorwf	_sodaAlign+1,w,c
  9865  001CCA  A4D8               	btfss	status,2,c
  9866  001CCC  D004               	goto	i2l4575
  9867  001CCE  0E00               	movlw	0
  9868  001CD0  6E52               	movwf	_sodaAlign+1,c
  9869  001CD2  0E02               	movlw	2
  9870  001CD4  D003               	goto	L15
  9871  001CD6                     i2l4575:
  9872                           
  9873                           ;main.c: 57: else{sodaAlign = 1;}
  9874  001CD6  0E00               	movlw	0
  9875  001CD8  6E52               	movwf	_sodaAlign+1,c
  9876  001CDA  0E01               	movlw	1
  9877  001CDC                     L15:
  9878  001CDC  6E51               	movwf	_sodaAlign,c
  9879                           
  9880                           ;main.c: 58: sodaI++;
  9881  001CDE  4A4B               	infsnz	_sodaI,f,c
  9882  001CE0  2A4C               	incf	_sodaI+1,f,c
  9883  001CE2                     i2l4579:
  9884                           
  9885                           ;main.c: 59: }
  9886                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 400)){
  9887  001CE2  0E00               	movlw	0
  9888  001CE4  6E0A               	movwf	___awdiv@divisor+1,c
  9889  001CE6  0E02               	movlw	2
  9890  001CE8  6E09               	movwf	___awdiv@divisor,c
  9891  001CEA  0E01               	movlw	1
  9892  001CEC  244D               	addwf	_soupI,w,c
  9893  001CEE  6E01               	movwf	i2___wmul@multiplier,c
  9894  001CF0  0E00               	movlw	0
  9895  001CF2  204E               	addwfc	_soupI+1,w,c
  9896  001CF4  6E02               	movwf	i2___wmul@multiplier+1,c
  9897  001CF6  C04D  F003         	movff	_soupI,i2___wmul@multiplicand
  9898  001CFA  C04E  F004         	movff	_soupI+1,i2___wmul@multiplicand+1
  9899  001CFE  ECCD  F015         	call	i2___wmul	;wreg free
  9900  001D02  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9901  001D06  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9902  001D0A  ECE2  F012         	call	___awdiv	;wreg free
  9903  001D0E  C007  F01F         	movff	?___awdiv,_handler$1823
  9904  001D12  C008  F020         	movff	?___awdiv+1,_handler$1823+1
  9905                           
  9906                           ;main.c: 59: }
  9907                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 400)){
  9908  001D16  0E90               	movlw	144
  9909  001D18  6E0F               	movwf	??_handler& (0+255),c
  9910  001D1A  0E01               	movlw	1
  9911  001D1C  6E10               	movwf	(??_handler+1)& (0+255),c
  9912  001D1E  C01F  F001         	movff	_handler$1823,i2___wmul@multiplier
  9913  001D22  C020  F002         	movff	_handler$1823+1,i2___wmul@multiplier+1
  9914  001D26  0E00               	movlw	0
  9915  001D28  6E04               	movwf	i2___wmul@multiplicand+1,c
  9916  001D2A  0E64               	movlw	100
  9917  001D2C  6E03               	movwf	i2___wmul@multiplicand,c
  9918  001D2E  ECCD  F015         	call	i2___wmul	;wreg free
  9919  001D32  500F               	movf	??_handler,w,c
  9920  001D34  2601               	addwf	?i2___wmul,f,c
  9921  001D36  5010               	movf	??_handler+1,w,c
  9922  001D38  2202               	addwfc	?i2___wmul+1,f,c
  9923  001D3A  5057               	movf	_soupSteps,w,c
  9924  001D3C  1801               	xorwf	?i2___wmul,w,c
  9925  001D3E  E112               	bnz	i2l4591
  9926  001D40  5058               	movf	_soupSteps+1,w,c
  9927  001D42  1802               	xorwf	?i2___wmul+1,w,c
  9928  001D44  A4D8               	btfss	status,2,c
  9929  001D46  D00E               	goto	i2l4591
  9930                           
  9931                           ;main.c: 62: if(soupAlign == 1){soupAlign = 2;}
  9932  001D48  044F               	decf	_soupAlign,w,c
  9933  001D4A  1050               	iorwf	_soupAlign+1,w,c
  9934  001D4C  A4D8               	btfss	status,2,c
  9935  001D4E  D004               	goto	i2l4587
  9936  001D50  0E00               	movlw	0
  9937  001D52  6E50               	movwf	_soupAlign+1,c
  9938  001D54  0E02               	movlw	2
  9939  001D56  D003               	goto	L16
  9940  001D58                     i2l4587:
  9941                           
  9942                           ;main.c: 63: else{soupAlign = 1;}
  9943  001D58  0E00               	movlw	0
  9944  001D5A  6E50               	movwf	_soupAlign+1,c
  9945  001D5C  0E01               	movlw	1
  9946  001D5E                     L16:
  9947  001D5E  6E4F               	movwf	_soupAlign,c
  9948                           
  9949                           ;main.c: 64: soupI ++;
  9950  001D60  4A4D               	infsnz	_soupI,f,c
  9951  001D62  2A4E               	incf	_soupI+1,f,c
  9952  001D64                     i2l4591:
  9953                           
  9954                           ;main.c: 65: }
  9955                           ;main.c: 66: TMR1ON = 0;
  9956  001D64  90CD               	bcf	4045,0,c	;volatile
  9957                           
  9958                           ;main.c: 68: startTMR1();
  9959  001D66  EC28  F016         	call	i2_startTMR1	;wreg free
  9960  001D6A                     i2l181:
  9961  001D6A  C01E  FFF5         	movff	??_handler+15,tablat
  9962  001D6E  C01D  FFF8         	movff	??_handler+14,tblptru
  9963  001D72  C01C  FFF7         	movff	??_handler+13,tblptrh
  9964  001D76  C01B  FFF6         	movff	??_handler+12,tblptrl
  9965  001D7A  C01A  FFF4         	movff	??_handler+11,prodh
  9966  001D7E  C019  FFF3         	movff	??_handler+10,prodl
  9967  001D82  C018  FFDA         	movff	??_handler+9,fsr2h
  9968  001D86  C017  FFD9         	movff	??_handler+8,fsr2l
  9969  001D8A  C016  FFE2         	movff	??_handler+7,fsr1h
  9970  001D8E  C015  FFE1         	movff	??_handler+6,fsr1l
  9971  001D92  C014  FFEA         	movff	??_handler+5,fsr0h
  9972  001D96  C013  FFE9         	movff	??_handler+4,fsr0l
  9973  001D9A  C012  FFFB         	movff	??_handler+3,pclatu
  9974  001D9E  C011  FFFA         	movff	??_handler+2,pclath
  9975  001DA2  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9976  001DA4  0011               	retfie		f
  9977  001DA6                     __end_of_handler:
  9978                           	opt stack 0
  9979                           pclatu	equ	0xFFB
  9980                           pclath	equ	0xFFA
  9981                           tblptru	equ	0xFF8
  9982                           tblptrh	equ	0xFF7
  9983                           tblptrl	equ	0xFF6
  9984                           tablat	equ	0xFF5
  9985                           prodh	equ	0xFF4
  9986                           prodl	equ	0xFF3
  9987                           intcon	equ	0xFF2
  9988                           intcon2	equ	0xFF1
  9989                           postinc0	equ	0xFEE
  9990                           fsr0h	equ	0xFEA
  9991                           fsr0l	equ	0xFE9
  9992                           wreg	equ	0xFE8
  9993                           fsr1h	equ	0xFE2
  9994                           fsr1l	equ	0xFE1
  9995                           indf2	equ	0xFDF
  9996                           postinc2	equ	0xFDE
  9997                           postdec2	equ	0xFDD
  9998                           fsr2h	equ	0xFDA
  9999                           fsr2l	equ	0xFD9
 10000                           status	equ	0xFD8
 10001                           
 10002 ;; *************** function i2_updateS3 *****************
 10003 ;; Defined at:
 10004 ;;		line 182 in file "motors.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;  mode            2    0[COMRAM] int 
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;		None
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  1    wreg      void 
 10011 ;; Registers used:
 10012 ;;		wreg, status,2, status,0
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;Total ram usage:        3 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_handler
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           	psect	text37
 10032  001F9A                     __ptext37:
 10033                           	opt stack 0
 10034  001F9A                     i2_updateS3:
 10035                           	opt stack 25
 10036                           
 10037                           ;motors.c: 183: _delay((unsigned long)((5)*(32000000/4000.0)));
 10038                           
 10039                           ;incstack = 0
 10040  001F9A  0E34               	movlw	52
 10041  001F9C  6E03               	movwf	??i2_updateS3& (0+255),c
 10042  001F9E  0EF2               	movlw	242
 10043  001FA0                     i2u818_47:
 10044  001FA0  2EE8               	decfsz	wreg,f,c
 10045  001FA2  D7FE               	bra	i2u818_47
 10046  001FA4  2E03               	decfsz	??i2_updateS3& (0+255),f,c
 10047  001FA6  D7FC               	bra	i2u818_47
 10048                           
 10049                           ;motors.c: 185: if(mode == 0){
 10050  001FA8  5001               	movf	i2updateS3@mode,w,c
 10051  001FAA  1002               	iorwf	i2updateS3@mode+1,w,c
 10052  001FAC  A4D8               	btfss	status,2,c
 10053  001FAE  D005               	goto	i2l4443
 10054                           
 10055                           ;motors.c: 186: LATEbits.LATE2 = 0;
 10056  001FB0  948D               	bcf	3981,2,c	;volatile
 10057                           
 10058                           ;motors.c: 187: LATEbits.LATE1 = 0;
 10059  001FB2  928D               	bcf	3981,1,c	;volatile
 10060                           
 10061                           ;motors.c: 188: LATAbits.LATA4 = 0;
 10062  001FB4  9889               	bcf	3977,4,c	;volatile
 10063                           
 10064                           ;motors.c: 189: LATDbits.LATD0 = 0;
 10065  001FB6  908C               	bcf	3980,0,c	;volatile
 10066                           
 10067                           ;motors.c: 190: }
 10068  001FB8  0012               	return	
 10069  001FBA                     i2l4443:
 10070                           
 10071                           ;motors.c: 191: else if(mode == 4){
 10072  001FBA  0E04               	movlw	4
 10073  001FBC  1801               	xorwf	i2updateS3@mode,w,c
 10074  001FBE  1002               	iorwf	i2updateS3@mode+1,w,c
 10075  001FC0  B4D8               	btfsc	status,2,c
 10076  001FC2  0012               	return	
 10077                           
 10078                           ;motors.c: 194: else if(mode == 3){
 10079                           
 10080                           ;motors.c: 193: }
 10081  001FC4  0E03               	movlw	3
 10082  001FC6  1801               	xorwf	i2updateS3@mode,w,c
 10083  001FC8  1002               	iorwf	i2updateS3@mode+1,w,c
 10084  001FCA  A4D8               	btfss	status,2,c
 10085  001FCC  D042               	goto	i2l4471
 10086                           
 10087                           ;motors.c: 195: t3++;
 10088  001FCE  4A41               	infsnz	_t3,f,c
 10089  001FD0  2A42               	incf	_t3+1,f,c
 10090                           
 10091                           ;motors.c: 196: if (t3>8) {t3=1;}
 10092  001FD2  BE42               	btfsc	_t3+1,7,c
 10093  001FD4  D00A               	goto	i2l4455
 10094  001FD6  5042               	movf	_t3+1,w,c
 10095  001FD8  E104               	bnz	i2u545_40
 10096  001FDA  0E09               	movlw	9
 10097  001FDC  5C41               	subwf	_t3,w,c
 10098  001FDE  A0D8               	btfss	status,0,c
 10099  001FE0  D004               	goto	i2l4455
 10100  001FE2                     i2u545_40:
 10101  001FE2  0E00               	movlw	0
 10102  001FE4  6E42               	movwf	_t3+1,c
 10103  001FE6  0E01               	movlw	1
 10104  001FE8  6E41               	movwf	_t3,c
 10105  001FEA                     i2l4455:
 10106                           
 10107                           ;motors.c: 197: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
 10108  001FEA  0441               	decf	_t3,w,c
 10109  001FEC  1042               	iorwf	_t3+1,w,c
 10110  001FEE  B4D8               	btfsc	status,2,c
 10111  001FF0  D005               	goto	i2l594
 10112  001FF2  0E08               	movlw	8
 10113  001FF4  1841               	xorwf	_t3,w,c
 10114  001FF6  1042               	iorwf	_t3+1,w,c
 10115  001FF8  A4D8               	btfss	status,2,c
 10116  001FFA  D002               	goto	i2l592
 10117  001FFC                     i2l594:
 10118  001FFC  848D               	bsf	3981,2,c	;volatile
 10119  001FFE  D001               	goto	i2l4459
 10120  002000                     i2l592:
 10121                           
 10122                           ;motors.c: 198: else{LATEbits.LATE2 = 0;}
 10123  002000  948D               	bcf	3981,2,c	;volatile
 10124  002002                     i2l4459:
 10125                           
 10126                           ;motors.c: 199: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
 10127  002002  0E02               	movlw	2
 10128  002004  1841               	xorwf	_t3,w,c
 10129  002006  1042               	iorwf	_t3+1,w,c
 10130  002008  B4D8               	btfsc	status,2,c
 10131  00200A  D005               	goto	i2l598
 10132  00200C  0E07               	movlw	7
 10133  00200E  1841               	xorwf	_t3,w,c
 10134  002010  1042               	iorwf	_t3+1,w,c
 10135  002012  A4D8               	btfss	status,2,c
 10136  002014  D002               	goto	i2l596
 10137  002016                     i2l598:
 10138  002016  828D               	bsf	3981,1,c	;volatile
 10139  002018  D001               	goto	i2l4463
 10140  00201A                     i2l596:
 10141                           
 10142                           ;motors.c: 200: else{LATEbits.LATE1 = 0;}
 10143  00201A  928D               	bcf	3981,1,c	;volatile
 10144  00201C                     i2l4463:
 10145                           
 10146                           ;motors.c: 201: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
 10147  00201C  0E03               	movlw	3
 10148  00201E  1841               	xorwf	_t3,w,c
 10149  002020  1042               	iorwf	_t3+1,w,c
 10150  002022  B4D8               	btfsc	status,2,c
 10151  002024  D005               	goto	i2l602
 10152  002026  0E06               	movlw	6
 10153  002028  1841               	xorwf	_t3,w,c
 10154  00202A  1042               	iorwf	_t3+1,w,c
 10155  00202C  A4D8               	btfss	status,2,c
 10156  00202E  D002               	goto	i2l600
 10157  002030                     i2l602:
 10158  002030  8889               	bsf	3977,4,c	;volatile
 10159  002032  D001               	goto	i2l4467
 10160  002034                     i2l600:
 10161                           
 10162                           ;motors.c: 202: else{LATAbits.LATA4 = 0;}
 10163  002034  9889               	bcf	3977,4,c	;volatile
 10164  002036                     i2l4467:
 10165                           
 10166                           ;motors.c: 203: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
 10167  002036  0E04               	movlw	4
 10168  002038  1841               	xorwf	_t3,w,c
 10169  00203A  1042               	iorwf	_t3+1,w,c
 10170  00203C  B4D8               	btfsc	status,2,c
 10171  00203E  D005               	goto	i2l606
 10172  002040  0E05               	movlw	5
 10173  002042  1841               	xorwf	_t3,w,c
 10174  002044  1042               	iorwf	_t3+1,w,c
 10175  002046  A4D8               	btfss	status,2,c
 10176  002048  D002               	goto	i2l604
 10177  00204A                     i2l606:
 10178  00204A  808C               	bsf	3980,0,c	;volatile
 10179  00204C  0012               	return	
 10180  00204E                     i2l604:
 10181                           
 10182                           ;motors.c: 204: else{LATDbits.LATD0 = 0;}
 10183  00204E  908C               	bcf	3980,0,c	;volatile
 10184                           
 10185                           ;motors.c: 205: }
 10186  002050  0012               	return	
 10187  002052                     i2l4471:
 10188                           
 10189                           ;motors.c: 206: else if(mode == 5){
 10190  002052  0E05               	movlw	5
 10191  002054  1801               	xorwf	i2updateS3@mode,w,c
 10192  002056  1002               	iorwf	i2updateS3@mode+1,w,c
 10193  002058  A4D8               	btfss	status,2,c
 10194  00205A  D042               	goto	i2l4495
 10195                           
 10196                           ;motors.c: 207: t3++;
 10197  00205C  4A41               	infsnz	_t3,f,c
 10198  00205E  2A42               	incf	_t3+1,f,c
 10199                           
 10200                           ;motors.c: 208: if (t3>8) {t3=1;}
 10201  002060  BE42               	btfsc	_t3+1,7,c
 10202  002062  D00A               	goto	i2l4479
 10203  002064  5042               	movf	_t3+1,w,c
 10204  002066  E104               	bnz	i2u555_40
 10205  002068  0E09               	movlw	9
 10206  00206A  5C41               	subwf	_t3,w,c
 10207  00206C  A0D8               	btfss	status,0,c
 10208  00206E  D004               	goto	i2l4479
 10209  002070                     i2u555_40:
 10210  002070  0E00               	movlw	0
 10211  002072  6E42               	movwf	_t3+1,c
 10212  002074  0E01               	movlw	1
 10213  002076  6E41               	movwf	_t3,c
 10214  002078                     i2l4479:
 10215                           
 10216                           ;motors.c: 209: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
 10217  002078  0441               	decf	_t3,w,c
 10218  00207A  1042               	iorwf	_t3+1,w,c
 10219  00207C  B4D8               	btfsc	status,2,c
 10220  00207E  D005               	goto	i2l613
 10221  002080  0E08               	movlw	8
 10222  002082  1841               	xorwf	_t3,w,c
 10223  002084  1042               	iorwf	_t3+1,w,c
 10224  002086  A4D8               	btfss	status,2,c
 10225  002088  D002               	goto	i2l611
 10226  00208A                     i2l613:
 10227  00208A  8889               	bsf	3977,4,c	;volatile
 10228  00208C  D001               	goto	i2l4483
 10229  00208E                     i2l611:
 10230                           
 10231                           ;motors.c: 210: else{LATAbits.LATA4 = 0;}
 10232  00208E  9889               	bcf	3977,4,c	;volatile
 10233  002090                     i2l4483:
 10234                           
 10235                           ;motors.c: 211: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
 10236  002090  0E02               	movlw	2
 10237  002092  1841               	xorwf	_t3,w,c
 10238  002094  1042               	iorwf	_t3+1,w,c
 10239  002096  B4D8               	btfsc	status,2,c
 10240  002098  D005               	goto	i2l617
 10241  00209A  0E07               	movlw	7
 10242  00209C  1841               	xorwf	_t3,w,c
 10243  00209E  1042               	iorwf	_t3+1,w,c
 10244  0020A0  A4D8               	btfss	status,2,c
 10245  0020A2  D002               	goto	i2l615
 10246  0020A4                     i2l617:
 10247  0020A4  808C               	bsf	3980,0,c	;volatile
 10248  0020A6  D001               	goto	i2l4487
 10249  0020A8                     i2l615:
 10250                           
 10251                           ;motors.c: 212: else{LATDbits.LATD0 = 0;}
 10252  0020A8  908C               	bcf	3980,0,c	;volatile
 10253  0020AA                     i2l4487:
 10254                           
 10255                           ;motors.c: 213: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
 10256  0020AA  0E03               	movlw	3
 10257  0020AC  1841               	xorwf	_t3,w,c
 10258  0020AE  1042               	iorwf	_t3+1,w,c
 10259  0020B0  B4D8               	btfsc	status,2,c
 10260  0020B2  D005               	goto	i2l621
 10261  0020B4  0E06               	movlw	6
 10262  0020B6  1841               	xorwf	_t3,w,c
 10263  0020B8  1042               	iorwf	_t3+1,w,c
 10264  0020BA  A4D8               	btfss	status,2,c
 10265  0020BC  D002               	goto	i2l619
 10266  0020BE                     i2l621:
 10267  0020BE  848D               	bsf	3981,2,c	;volatile
 10268  0020C0  D001               	goto	i2l4491
 10269  0020C2                     i2l619:
 10270                           
 10271                           ;motors.c: 214: else{LATEbits.LATE2 = 0;}
 10272  0020C2  948D               	bcf	3981,2,c	;volatile
 10273  0020C4                     i2l4491:
 10274                           
 10275                           ;motors.c: 215: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
 10276  0020C4  0E04               	movlw	4
 10277  0020C6  1841               	xorwf	_t3,w,c
 10278  0020C8  1042               	iorwf	_t3+1,w,c
 10279  0020CA  B4D8               	btfsc	status,2,c
 10280  0020CC  D005               	goto	i2l625
 10281  0020CE  0E05               	movlw	5
 10282  0020D0  1841               	xorwf	_t3,w,c
 10283  0020D2  1042               	iorwf	_t3+1,w,c
 10284  0020D4  A4D8               	btfss	status,2,c
 10285  0020D6  D002               	goto	i2l623
 10286  0020D8                     i2l625:
 10287  0020D8  828D               	bsf	3981,1,c	;volatile
 10288  0020DA  0012               	return	
 10289  0020DC                     i2l623:
 10290                           
 10291                           ;motors.c: 216: else{LATEbits.LATE1 = 0;}
 10292  0020DC  928D               	bcf	3981,1,c	;volatile
 10293                           
 10294                           ;motors.c: 217: }
 10295  0020DE  0012               	return	
 10296  0020E0                     i2l4495:
 10297                           
 10298                           ;motors.c: 218: else{
 10299                           ;motors.c: 219: if(mode == 1){
 10300  0020E0  0401               	decf	i2updateS3@mode,w,c
 10301  0020E2  1002               	iorwf	i2updateS3@mode+1,w,c
 10302  0020E4  A4D8               	btfss	status,2,c
 10303  0020E6  D013               	goto	i2l4503
 10304                           
 10305                           ;motors.c: 220: s3 ++;
 10306  0020E8  0100               	movlb	0	; () banked
 10307  0020EA  4BBE               	infsnz	_s3& (0+255),f,b
 10308  0020EC  2BBF               	incf	(_s3+1)& (0+255),f,b
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;motors.c: 221: if (s3>4) {s3=1;}
 10312  0020EE  0100               	movlb	0	; () banked
 10313  0020F0  BFBF               	btfsc	(_s3+1)& (0+255),7,b
 10314  0020F2  D025               	goto	i2l4511
 10315  0020F4  0100               	movlb	0	; () banked
 10316  0020F6  51BF               	movf	(_s3+1)& (0+255),w,b
 10317  0020F8  E105               	bnz	i2u565_40
 10318  0020FA  0E05               	movlw	5
 10319  0020FC  0100               	movlb	0	; () banked
 10320  0020FE  5DBE               	subwf	_s3& (0+255),w,b
 10321  002100  A0D8               	btfss	status,0,c
 10322  002102  D01D               	goto	i2l4511
 10323  002104                     i2u565_40:
 10324                           
 10325                           ; BSR set to: 0
 10326  002104  0E00               	movlw	0
 10327  002106  0100               	movlb	0	; () banked
 10328  002108  6FBF               	movwf	(_s3+1)& (0+255),b
 10329  00210A  0E01               	movlw	1
 10330  00210C  D017               	goto	L17
 10331  00210E                     i2l4503:
 10332                           
 10333                           ;motors.c: 223: else if(mode == 2){
 10334  00210E  0E02               	movlw	2
 10335  002110  1801               	xorwf	i2updateS3@mode,w,c
 10336  002112  1002               	iorwf	i2updateS3@mode+1,w,c
 10337  002114  A4D8               	btfss	status,2,c
 10338  002116  D013               	goto	i2l4511
 10339                           
 10340                           ;motors.c: 224: s3 --;
 10341  002118  0100               	movlb	0	; () banked
 10342  00211A  07BE               	decf	_s3& (0+255),f,b
 10343  00211C  A0D8               	btfss	status,0,c
 10344  00211E  07BF               	decf	(_s3+1)& (0+255),f,b
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;motors.c: 225: if (s3<1) {s3=4;}
 10348  002120  0100               	movlb	0	; () banked
 10349  002122  BFBF               	btfsc	(_s3+1)& (0+255),7,b
 10350  002124  D007               	goto	i2l4509
 10351  002126  0100               	movlb	0	; () banked
 10352  002128  51BF               	movf	(_s3+1)& (0+255),w,b
 10353  00212A  E109               	bnz	i2l4511
 10354  00212C  0100               	movlb	0	; () banked
 10355  00212E  05BE               	decf	_s3& (0+255),w,b
 10356  002130  B0D8               	btfsc	status,0,c
 10357  002132  D005               	goto	i2l4511
 10358  002134                     i2l4509:
 10359                           
 10360                           ; BSR set to: 0
 10361  002134  0E00               	movlw	0
 10362  002136  0100               	movlb	0	; () banked
 10363  002138  6FBF               	movwf	(_s3+1)& (0+255),b
 10364  00213A  0E04               	movlw	4
 10365  00213C                     L17:
 10366  00213C  6FBE               	movwf	_s3& (0+255),b
 10367  00213E                     i2l4511:
 10368                           
 10369                           ;motors.c: 226: }
 10370                           ;motors.c: 227: if (s3 == 1){LATEbits.LATE2 = 1;}
 10371  00213E  0100               	movlb	0	; () banked
 10372  002140  05BE               	decf	_s3& (0+255),w,b
 10373  002142  0100               	movlb	0	; () banked
 10374  002144  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10375  002146  A4D8               	btfss	status,2,c
 10376  002148  D002               	goto	i2l633
 10377                           
 10378                           ; BSR set to: 0
 10379  00214A  848D               	bsf	3981,2,c	;volatile
 10380  00214C  D001               	goto	i2l4515
 10381  00214E                     i2l633:
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;motors.c: 228: else{LATEbits.LATE2 = 0;}
 10385  00214E  948D               	bcf	3981,2,c	;volatile
 10386  002150                     i2l4515:
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;motors.c: 229: if (s3 == 2){LATEbits.LATE1 = 1;}
 10390  002150  0E02               	movlw	2
 10391  002152  0100               	movlb	0	; () banked
 10392  002154  19BE               	xorwf	_s3& (0+255),w,b
 10393  002156  0100               	movlb	0	; () banked
 10394  002158  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10395  00215A  A4D8               	btfss	status,2,c
 10396  00215C  D002               	goto	i2l635
 10397                           
 10398                           ; BSR set to: 0
 10399  00215E  828D               	bsf	3981,1,c	;volatile
 10400  002160  D001               	goto	i2l4519
 10401  002162                     i2l635:
 10402                           
 10403                           ; BSR set to: 0
 10404                           ;motors.c: 230: else{LATEbits.LATE1 = 0;}
 10405  002162  928D               	bcf	3981,1,c	;volatile
 10406  002164                     i2l4519:
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;motors.c: 231: if (s3 == 3){LATAbits.LATA4 = 1;}
 10410  002164  0E03               	movlw	3
 10411  002166  0100               	movlb	0	; () banked
 10412  002168  19BE               	xorwf	_s3& (0+255),w,b
 10413  00216A  0100               	movlb	0	; () banked
 10414  00216C  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10415  00216E  A4D8               	btfss	status,2,c
 10416  002170  D002               	goto	i2l637
 10417                           
 10418                           ; BSR set to: 0
 10419  002172  8889               	bsf	3977,4,c	;volatile
 10420  002174  D001               	goto	i2l4523
 10421  002176                     i2l637:
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;motors.c: 232: else{LATAbits.LATA4 = 0;}
 10425  002176  9889               	bcf	3977,4,c	;volatile
 10426  002178                     i2l4523:
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;motors.c: 233: if (s3 == 4){LATDbits.LATD0 = 1;}
 10430  002178  0E04               	movlw	4
 10431  00217A  0100               	movlb	0	; () banked
 10432  00217C  19BE               	xorwf	_s3& (0+255),w,b
 10433  00217E  0100               	movlb	0	; () banked
 10434  002180  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10435  002182  A4D8               	btfss	status,2,c
 10436  002184  D002               	goto	i2l639
 10437                           
 10438                           ; BSR set to: 0
 10439  002186  808C               	bsf	3980,0,c	;volatile
 10440  002188  0012               	return	
 10441  00218A                     i2l639:
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;motors.c: 234: else{LATDbits.LATD0 = 0;}
 10445  00218A  908C               	bcf	3980,0,c	;volatile
 10446                           
 10447                           ; BSR set to: 0
 10448                           
 10449                           ; BSR set to: 0
 10450                           
 10451                           ; BSR set to: 0
 10452                           
 10453                           ; BSR set to: 0
 10454  00218C  0012               	return	
 10455  00218E                     __end_ofi2_updateS3:
 10456                           	opt stack 0
 10457                           pclatu	equ	0xFFB
 10458                           pclath	equ	0xFFA
 10459                           tblptru	equ	0xFF8
 10460                           tblptrh	equ	0xFF7
 10461                           tblptrl	equ	0xFF6
 10462                           tablat	equ	0xFF5
 10463                           prodh	equ	0xFF4
 10464                           prodl	equ	0xFF3
 10465                           intcon	equ	0xFF2
 10466                           intcon2	equ	0xFF1
 10467                           postinc0	equ	0xFEE
 10468                           fsr0h	equ	0xFEA
 10469                           fsr0l	equ	0xFE9
 10470                           wreg	equ	0xFE8
 10471                           fsr1h	equ	0xFE2
 10472                           fsr1l	equ	0xFE1
 10473                           indf2	equ	0xFDF
 10474                           postinc2	equ	0xFDE
 10475                           postdec2	equ	0xFDD
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           
 10480 ;; *************** function i2_updateS1 *****************
 10481 ;; Defined at:
 10482 ;;		line 66 in file "motors.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;  mode            2    0[COMRAM] int 
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  1    wreg      void 
 10489 ;; Registers used:
 10490 ;;		wreg, status,2, status,0
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10496 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;Total ram usage:        3 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_handler
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text38
 10510  0018AC                     __ptext38:
 10511                           	opt stack 0
 10512  0018AC                     i2_updateS1:
 10513                           	opt stack 25
 10514                           
 10515                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
 10516                           
 10517                           ;incstack = 0
 10518  0018AC  0E34               	movlw	52
 10519  0018AE  6E03               	movwf	??i2_updateS1& (0+255),c
 10520  0018B0  0EF2               	movlw	242
 10521  0018B2                     i2u819_47:
 10522  0018B2  2EE8               	decfsz	wreg,f,c
 10523  0018B4  D7FE               	bra	i2u819_47
 10524  0018B6  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10525  0018B8  D7FC               	bra	i2u819_47
 10526                           
 10527                           ;motors.c: 69: if(mode == 0){
 10528  0018BA  5001               	movf	i2updateS1@mode,w,c
 10529  0018BC  1002               	iorwf	i2updateS1@mode+1,w,c
 10530  0018BE  A4D8               	btfss	status,2,c
 10531  0018C0  D005               	goto	i2l4319
 10532                           
 10533                           ;motors.c: 70: LATDbits.LATD1 = 0;
 10534  0018C2  928C               	bcf	3980,1,c	;volatile
 10535                           
 10536                           ;motors.c: 71: LATBbits.LATB3 = 0;
 10537  0018C4  968A               	bcf	3978,3,c	;volatile
 10538                           
 10539                           ;motors.c: 72: LATBbits.LATB2 = 0;
 10540  0018C6  948A               	bcf	3978,2,c	;volatile
 10541                           
 10542                           ;motors.c: 73: LATBbits.LATB0 = 0;
 10543  0018C8  908A               	bcf	3978,0,c	;volatile
 10544                           
 10545                           ;motors.c: 74: }
 10546  0018CA  0012               	return	
 10547  0018CC                     i2l4319:
 10548                           
 10549                           ;motors.c: 75: else if(mode == 3){
 10550  0018CC  0E03               	movlw	3
 10551  0018CE  1801               	xorwf	i2updateS1@mode,w,c
 10552  0018D0  1002               	iorwf	i2updateS1@mode+1,w,c
 10553  0018D2  A4D8               	btfss	status,2,c
 10554  0018D4  D049               	goto	i2l4345
 10555                           
 10556                           ;motors.c: 76: t++;
 10557  0018D6  4A45               	infsnz	_t,f,c
 10558  0018D8  2A46               	incf	_t+1,f,c
 10559                           
 10560                           ;motors.c: 77: if (t>8) {t=1;}
 10561  0018DA  BE46               	btfsc	_t+1,7,c
 10562  0018DC  D00A               	goto	i2l4327
 10563  0018DE  5046               	movf	_t+1,w,c
 10564  0018E0  E104               	bnz	i2u504_40
 10565  0018E2  0E09               	movlw	9
 10566  0018E4  5C45               	subwf	_t,w,c
 10567  0018E6  A0D8               	btfss	status,0,c
 10568  0018E8  D004               	goto	i2l4327
 10569  0018EA                     i2u504_40:
 10570  0018EA  0E00               	movlw	0
 10571  0018EC  6E46               	movwf	_t+1,c
 10572  0018EE  0E01               	movlw	1
 10573  0018F0  6E45               	movwf	_t,c
 10574  0018F2                     i2l4327:
 10575                           
 10576                           ;motors.c: 78: _delay((unsigned long)((5)*(32000000/4000.0)));
 10577  0018F2  0E34               	movlw	52
 10578  0018F4  6E03               	movwf	??i2_updateS1& (0+255),c
 10579  0018F6  0EF2               	movlw	242
 10580  0018F8                     i2u820_47:
 10581  0018F8  2EE8               	decfsz	wreg,f,c
 10582  0018FA  D7FE               	bra	i2u820_47
 10583  0018FC  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10584  0018FE  D7FC               	bra	i2u820_47
 10585                           
 10586                           ;motors.c: 79: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
 10587  001900  0445               	decf	_t,w,c
 10588  001902  1046               	iorwf	_t+1,w,c
 10589  001904  B4D8               	btfsc	status,2,c
 10590  001906  D005               	goto	i2l481
 10591  001908  0E08               	movlw	8
 10592  00190A  1845               	xorwf	_t,w,c
 10593  00190C  1046               	iorwf	_t+1,w,c
 10594  00190E  A4D8               	btfss	status,2,c
 10595  001910  D002               	goto	i2l479
 10596  001912                     i2l481:
 10597  001912  828C               	bsf	3980,1,c	;volatile
 10598  001914  D001               	goto	i2l4333
 10599  001916                     i2l479:
 10600                           
 10601                           ;motors.c: 80: else{LATDbits.LATD1 = 0;}
 10602  001916  928C               	bcf	3980,1,c	;volatile
 10603  001918                     i2l4333:
 10604                           
 10605                           ;motors.c: 81: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
 10606  001918  0E02               	movlw	2
 10607  00191A  1845               	xorwf	_t,w,c
 10608  00191C  1046               	iorwf	_t+1,w,c
 10609  00191E  B4D8               	btfsc	status,2,c
 10610  001920  D005               	goto	i2l485
 10611  001922  0E07               	movlw	7
 10612  001924  1845               	xorwf	_t,w,c
 10613  001926  1046               	iorwf	_t+1,w,c
 10614  001928  A4D8               	btfss	status,2,c
 10615  00192A  D002               	goto	i2l483
 10616  00192C                     i2l485:
 10617  00192C  868A               	bsf	3978,3,c	;volatile
 10618  00192E  D001               	goto	i2l4337
 10619  001930                     i2l483:
 10620                           
 10621                           ;motors.c: 82: else{LATBbits.LATB3 = 0;}
 10622  001930  968A               	bcf	3978,3,c	;volatile
 10623  001932                     i2l4337:
 10624                           
 10625                           ;motors.c: 83: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
 10626  001932  0E03               	movlw	3
 10627  001934  1845               	xorwf	_t,w,c
 10628  001936  1046               	iorwf	_t+1,w,c
 10629  001938  B4D8               	btfsc	status,2,c
 10630  00193A  D005               	goto	i2l489
 10631  00193C  0E06               	movlw	6
 10632  00193E  1845               	xorwf	_t,w,c
 10633  001940  1046               	iorwf	_t+1,w,c
 10634  001942  A4D8               	btfss	status,2,c
 10635  001944  D002               	goto	i2l487
 10636  001946                     i2l489:
 10637  001946  848A               	bsf	3978,2,c	;volatile
 10638  001948  D001               	goto	i2l4341
 10639  00194A                     i2l487:
 10640                           
 10641                           ;motors.c: 84: else{LATBbits.LATB2 = 0;}
 10642  00194A  948A               	bcf	3978,2,c	;volatile
 10643  00194C                     i2l4341:
 10644                           
 10645                           ;motors.c: 85: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
 10646  00194C  0E04               	movlw	4
 10647  00194E  1845               	xorwf	_t,w,c
 10648  001950  1046               	iorwf	_t+1,w,c
 10649  001952  B4D8               	btfsc	status,2,c
 10650  001954  D005               	goto	i2l493
 10651  001956  0E05               	movlw	5
 10652  001958  1845               	xorwf	_t,w,c
 10653  00195A  1046               	iorwf	_t+1,w,c
 10654  00195C  A4D8               	btfss	status,2,c
 10655  00195E  D002               	goto	i2l491
 10656  001960                     i2l493:
 10657  001960  808A               	bsf	3978,0,c	;volatile
 10658  001962  0012               	return	
 10659  001964                     i2l491:
 10660                           
 10661                           ;motors.c: 86: else{LATBbits.LATB0 = 0;}
 10662  001964  908A               	bcf	3978,0,c	;volatile
 10663                           
 10664                           ;motors.c: 87: }
 10665  001966  0012               	return	
 10666  001968                     i2l4345:
 10667                           
 10668                           ;motors.c: 88: else if(mode == 5){
 10669  001968  0E05               	movlw	5
 10670  00196A  1801               	xorwf	i2updateS1@mode,w,c
 10671  00196C  1002               	iorwf	i2updateS1@mode+1,w,c
 10672  00196E  A4D8               	btfss	status,2,c
 10673  001970  D049               	goto	i2l4371
 10674                           
 10675                           ;motors.c: 89: t++;
 10676  001972  4A45               	infsnz	_t,f,c
 10677  001974  2A46               	incf	_t+1,f,c
 10678                           
 10679                           ;motors.c: 90: if (t>8) {t=1;}
 10680  001976  BE46               	btfsc	_t+1,7,c
 10681  001978  D00A               	goto	i2l4353
 10682  00197A  5046               	movf	_t+1,w,c
 10683  00197C  E104               	bnz	i2u514_40
 10684  00197E  0E09               	movlw	9
 10685  001980  5C45               	subwf	_t,w,c
 10686  001982  A0D8               	btfss	status,0,c
 10687  001984  D004               	goto	i2l4353
 10688  001986                     i2u514_40:
 10689  001986  0E00               	movlw	0
 10690  001988  6E46               	movwf	_t+1,c
 10691  00198A  0E01               	movlw	1
 10692  00198C  6E45               	movwf	_t,c
 10693  00198E                     i2l4353:
 10694                           
 10695                           ;motors.c: 91: _delay((unsigned long)((5)*(32000000/4000.0)));
 10696  00198E  0E34               	movlw	52
 10697  001990  6E03               	movwf	??i2_updateS1& (0+255),c
 10698  001992  0EF2               	movlw	242
 10699  001994                     i2u821_47:
 10700  001994  2EE8               	decfsz	wreg,f,c
 10701  001996  D7FE               	bra	i2u821_47
 10702  001998  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10703  00199A  D7FC               	bra	i2u821_47
 10704                           
 10705                           ;motors.c: 92: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
 10706  00199C  0445               	decf	_t,w,c
 10707  00199E  1046               	iorwf	_t+1,w,c
 10708  0019A0  B4D8               	btfsc	status,2,c
 10709  0019A2  D005               	goto	i2l500
 10710  0019A4  0E08               	movlw	8
 10711  0019A6  1845               	xorwf	_t,w,c
 10712  0019A8  1046               	iorwf	_t+1,w,c
 10713  0019AA  A4D8               	btfss	status,2,c
 10714  0019AC  D002               	goto	i2l498
 10715  0019AE                     i2l500:
 10716  0019AE  848A               	bsf	3978,2,c	;volatile
 10717  0019B0  D001               	goto	i2l4359
 10718  0019B2                     i2l498:
 10719                           
 10720                           ;motors.c: 93: else{LATBbits.LATB2 = 0;}
 10721  0019B2  948A               	bcf	3978,2,c	;volatile
 10722  0019B4                     i2l4359:
 10723                           
 10724                           ;motors.c: 94: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
 10725  0019B4  0E02               	movlw	2
 10726  0019B6  1845               	xorwf	_t,w,c
 10727  0019B8  1046               	iorwf	_t+1,w,c
 10728  0019BA  B4D8               	btfsc	status,2,c
 10729  0019BC  D005               	goto	i2l504
 10730  0019BE  0E07               	movlw	7
 10731  0019C0  1845               	xorwf	_t,w,c
 10732  0019C2  1046               	iorwf	_t+1,w,c
 10733  0019C4  A4D8               	btfss	status,2,c
 10734  0019C6  D002               	goto	i2l502
 10735  0019C8                     i2l504:
 10736  0019C8  808A               	bsf	3978,0,c	;volatile
 10737  0019CA  D001               	goto	i2l4363
 10738  0019CC                     i2l502:
 10739                           
 10740                           ;motors.c: 95: else{LATBbits.LATB0 = 0;}
 10741  0019CC  908A               	bcf	3978,0,c	;volatile
 10742  0019CE                     i2l4363:
 10743                           
 10744                           ;motors.c: 96: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
 10745  0019CE  0E03               	movlw	3
 10746  0019D0  1845               	xorwf	_t,w,c
 10747  0019D2  1046               	iorwf	_t+1,w,c
 10748  0019D4  B4D8               	btfsc	status,2,c
 10749  0019D6  D005               	goto	i2l508
 10750  0019D8  0E06               	movlw	6
 10751  0019DA  1845               	xorwf	_t,w,c
 10752  0019DC  1046               	iorwf	_t+1,w,c
 10753  0019DE  A4D8               	btfss	status,2,c
 10754  0019E0  D002               	goto	i2l506
 10755  0019E2                     i2l508:
 10756  0019E2  828C               	bsf	3980,1,c	;volatile
 10757  0019E4  D001               	goto	i2l4367
 10758  0019E6                     i2l506:
 10759                           
 10760                           ;motors.c: 97: else{LATDbits.LATD1 = 0;}
 10761  0019E6  928C               	bcf	3980,1,c	;volatile
 10762  0019E8                     i2l4367:
 10763                           
 10764                           ;motors.c: 98: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
 10765  0019E8  0E04               	movlw	4
 10766  0019EA  1845               	xorwf	_t,w,c
 10767  0019EC  1046               	iorwf	_t+1,w,c
 10768  0019EE  B4D8               	btfsc	status,2,c
 10769  0019F0  D005               	goto	i2l512
 10770  0019F2  0E05               	movlw	5
 10771  0019F4  1845               	xorwf	_t,w,c
 10772  0019F6  1046               	iorwf	_t+1,w,c
 10773  0019F8  A4D8               	btfss	status,2,c
 10774  0019FA  D002               	goto	i2l510
 10775  0019FC                     i2l512:
 10776  0019FC  868A               	bsf	3978,3,c	;volatile
 10777  0019FE  0012               	return	
 10778  001A00                     i2l510:
 10779                           
 10780                           ;motors.c: 99: else{LATBbits.LATB3 = 0;}
 10781  001A00  968A               	bcf	3978,3,c	;volatile
 10782                           
 10783                           ;motors.c: 100: }
 10784  001A02  0012               	return	
 10785  001A04                     i2l4371:
 10786                           
 10787                           ;motors.c: 101: else if(mode == 4){
 10788  001A04  0E04               	movlw	4
 10789  001A06  1801               	xorwf	i2updateS1@mode,w,c
 10790  001A08  1002               	iorwf	i2updateS1@mode+1,w,c
 10791  001A0A  B4D8               	btfsc	status,2,c
 10792  001A0C  0012               	return	
 10793                           
 10794                           ;motors.c: 104: else{
 10795                           ;motors.c: 105: _delay((unsigned long)((10)*(32000000/4000.0)));
 10796                           
 10797                           ;motors.c: 103: }
 10798  001A0E  0E68               	movlw	104
 10799  001A10  6E03               	movwf	??i2_updateS1& (0+255),c
 10800  001A12  0EE4               	movlw	228
 10801  001A14                     i2u822_47:
 10802  001A14  2EE8               	decfsz	wreg,f,c
 10803  001A16  D7FE               	bra	i2u822_47
 10804  001A18  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10805  001A1A  D7FC               	bra	i2u822_47
 10806  001A1C  D000               	nop2	
 10807                           
 10808                           ;motors.c: 107: if(mode == 1 || mode == 5){
 10809  001A1E  0401               	decf	i2updateS1@mode,w,c
 10810  001A20  1002               	iorwf	i2updateS1@mode+1,w,c
 10811  001A22  B4D8               	btfsc	status,2,c
 10812  001A24  D005               	goto	i2l4381
 10813  001A26  0E05               	movlw	5
 10814  001A28  1801               	xorwf	i2updateS1@mode,w,c
 10815  001A2A  1002               	iorwf	i2updateS1@mode+1,w,c
 10816  001A2C  A4D8               	btfss	status,2,c
 10817  001A2E  D013               	goto	i2l4387
 10818  001A30                     i2l4381:
 10819                           
 10820                           ;motors.c: 108: s1 ++;
 10821  001A30  0100               	movlb	0	; () banked
 10822  001A32  4BC0               	infsnz	_s1& (0+255),f,b
 10823  001A34  2BC1               	incf	(_s1+1)& (0+255),f,b
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;motors.c: 109: if (s1>4) {s1=1;}
 10827  001A36  0100               	movlb	0	; () banked
 10828  001A38  BFC1               	btfsc	(_s1+1)& (0+255),7,b
 10829  001A3A  D02A               	goto	i2l4397
 10830  001A3C  0100               	movlb	0	; () banked
 10831  001A3E  51C1               	movf	(_s1+1)& (0+255),w,b
 10832  001A40  E105               	bnz	i2u526_40
 10833  001A42  0E05               	movlw	5
 10834  001A44  0100               	movlb	0	; () banked
 10835  001A46  5DC0               	subwf	_s1& (0+255),w,b
 10836  001A48  A0D8               	btfss	status,0,c
 10837  001A4A  D022               	goto	i2l4397
 10838  001A4C                     i2u526_40:
 10839                           
 10840                           ; BSR set to: 0
 10841  001A4C  0E00               	movlw	0
 10842  001A4E  0100               	movlb	0	; () banked
 10843  001A50  6FC1               	movwf	(_s1+1)& (0+255),b
 10844  001A52  0E01               	movlw	1
 10845  001A54  D01C               	goto	L18
 10846  001A56                     i2l4387:
 10847                           
 10848                           ;motors.c: 112: else if(mode == 2 || mode==6){
 10849  001A56  0E02               	movlw	2
 10850  001A58  1801               	xorwf	i2updateS1@mode,w,c
 10851  001A5A  1002               	iorwf	i2updateS1@mode+1,w,c
 10852  001A5C  B4D8               	btfsc	status,2,c
 10853  001A5E  D005               	goto	i2l4391
 10854  001A60  0E06               	movlw	6
 10855  001A62  1801               	xorwf	i2updateS1@mode,w,c
 10856  001A64  1002               	iorwf	i2updateS1@mode+1,w,c
 10857  001A66  A4D8               	btfss	status,2,c
 10858  001A68  D013               	goto	i2l4397
 10859  001A6A                     i2l4391:
 10860                           
 10861                           ;motors.c: 113: s1 --;
 10862  001A6A  0100               	movlb	0	; () banked
 10863  001A6C  07C0               	decf	_s1& (0+255),f,b
 10864  001A6E  A0D8               	btfss	status,0,c
 10865  001A70  07C1               	decf	(_s1+1)& (0+255),f,b
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;motors.c: 114: if (s1<1) {s1=4;}
 10869  001A72  0100               	movlb	0	; () banked
 10870  001A74  BFC1               	btfsc	(_s1+1)& (0+255),7,b
 10871  001A76  D007               	goto	i2l4395
 10872  001A78  0100               	movlb	0	; () banked
 10873  001A7A  51C1               	movf	(_s1+1)& (0+255),w,b
 10874  001A7C  E109               	bnz	i2l4397
 10875  001A7E  0100               	movlb	0	; () banked
 10876  001A80  05C0               	decf	_s1& (0+255),w,b
 10877  001A82  B0D8               	btfsc	status,0,c
 10878  001A84  D005               	goto	i2l4397
 10879  001A86                     i2l4395:
 10880                           
 10881                           ; BSR set to: 0
 10882  001A86  0E00               	movlw	0
 10883  001A88  0100               	movlb	0	; () banked
 10884  001A8A  6FC1               	movwf	(_s1+1)& (0+255),b
 10885  001A8C  0E04               	movlw	4
 10886  001A8E                     L18:
 10887  001A8E  6FC0               	movwf	_s1& (0+255),b
 10888  001A90                     i2l4397:
 10889                           
 10890                           ;motors.c: 115: }
 10891                           ;motors.c: 117: if(mode == 1 || mode ==2){
 10892  001A90  0401               	decf	i2updateS1@mode,w,c
 10893  001A92  1002               	iorwf	i2updateS1@mode+1,w,c
 10894  001A94  B4D8               	btfsc	status,2,c
 10895  001A96  D005               	goto	i2l4401
 10896  001A98  0E02               	movlw	2
 10897  001A9A  1801               	xorwf	i2updateS1@mode,w,c
 10898  001A9C  1002               	iorwf	i2updateS1@mode+1,w,c
 10899  001A9E  A4D8               	btfss	status,2,c
 10900  001AA0  D027               	goto	i2l4417
 10901  001AA2                     i2l4401:
 10902                           
 10903                           ;motors.c: 118: if (s1 == 1){LATDbits.LATD1 = 1;}
 10904  001AA2  0100               	movlb	0	; () banked
 10905  001AA4  05C0               	decf	_s1& (0+255),w,b
 10906  001AA6  0100               	movlb	0	; () banked
 10907  001AA8  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10908  001AAA  A4D8               	btfss	status,2,c
 10909  001AAC  D002               	goto	i2l529
 10910                           
 10911                           ; BSR set to: 0
 10912  001AAE  828C               	bsf	3980,1,c	;volatile
 10913  001AB0  D001               	goto	i2l4405
 10914  001AB2                     i2l529:
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;motors.c: 119: else{LATDbits.LATD1 = 0;}
 10918  001AB2  928C               	bcf	3980,1,c	;volatile
 10919  001AB4                     i2l4405:
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;motors.c: 120: if (s1 == 2){LATBbits.LATB3 = 1;}
 10923  001AB4  0E02               	movlw	2
 10924  001AB6  0100               	movlb	0	; () banked
 10925  001AB8  19C0               	xorwf	_s1& (0+255),w,b
 10926  001ABA  0100               	movlb	0	; () banked
 10927  001ABC  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10928  001ABE  A4D8               	btfss	status,2,c
 10929  001AC0  D002               	goto	i2l531
 10930                           
 10931                           ; BSR set to: 0
 10932  001AC2  868A               	bsf	3978,3,c	;volatile
 10933  001AC4  D001               	goto	i2l4409
 10934  001AC6                     i2l531:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;motors.c: 121: else{LATBbits.LATB3 = 0;}
 10938  001AC6  968A               	bcf	3978,3,c	;volatile
 10939  001AC8                     i2l4409:
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;motors.c: 122: if (s1 == 3){LATBbits.LATB2 = 1;}
 10943  001AC8  0E03               	movlw	3
 10944  001ACA  0100               	movlb	0	; () banked
 10945  001ACC  19C0               	xorwf	_s1& (0+255),w,b
 10946  001ACE  0100               	movlb	0	; () banked
 10947  001AD0  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10948  001AD2  A4D8               	btfss	status,2,c
 10949  001AD4  D002               	goto	i2l533
 10950                           
 10951                           ; BSR set to: 0
 10952  001AD6  848A               	bsf	3978,2,c	;volatile
 10953  001AD8  D001               	goto	i2l4413
 10954  001ADA                     i2l533:
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;motors.c: 123: else{LATBbits.LATB2 = 0;}
 10958  001ADA  948A               	bcf	3978,2,c	;volatile
 10959  001ADC                     i2l4413:
 10960                           
 10961                           ; BSR set to: 0
 10962                           ;motors.c: 124: if (s1 == 4){LATBbits.LATB0 = 1;}
 10963  001ADC  0E04               	movlw	4
 10964  001ADE  0100               	movlb	0	; () banked
 10965  001AE0  19C0               	xorwf	_s1& (0+255),w,b
 10966  001AE2  0100               	movlb	0	; () banked
 10967  001AE4  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10968  001AE6  A4D8               	btfss	status,2,c
 10969  001AE8  D002               	goto	i2l535
 10970                           
 10971                           ; BSR set to: 0
 10972  001AEA  808A               	bsf	3978,0,c	;volatile
 10973  001AEC  D001               	goto	i2l4417
 10974  001AEE                     i2l535:
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;motors.c: 125: else{LATBbits.LATB0 = 0;}
 10978  001AEE  908A               	bcf	3978,0,c	;volatile
 10979  001AF0                     i2l4417:
 10980                           
 10981                           ;motors.c: 126: }
 10982                           ;motors.c: 127: if(mode == 5 || mode ==6){
 10983  001AF0  0E05               	movlw	5
 10984  001AF2  1801               	xorwf	i2updateS1@mode,w,c
 10985  001AF4  1002               	iorwf	i2updateS1@mode+1,w,c
 10986  001AF6  B4D8               	btfsc	status,2,c
 10987  001AF8  D005               	goto	i2l4421
 10988  001AFA  0E06               	movlw	6
 10989  001AFC  1801               	xorwf	i2updateS1@mode,w,c
 10990  001AFE  1002               	iorwf	i2updateS1@mode+1,w,c
 10991  001B00  A4D8               	btfss	status,2,c
 10992  001B02  0012               	return	
 10993  001B04                     i2l4421:
 10994                           
 10995                           ;motors.c: 128: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
 10996  001B04  0100               	movlb	0	; () banked
 10997  001B06  05C0               	decf	_s1& (0+255),w,b
 10998  001B08  0100               	movlb	0	; () banked
 10999  001B0A  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11000  001B0C  A4D8               	btfss	status,2,c
 11001  001B0E  D004               	goto	i2l4425
 11002                           
 11003                           ; BSR set to: 0
 11004  001B10  828C               	bsf	3980,1,c	;volatile
 11005  001B12  868A               	bsf	3978,3,c	;volatile
 11006  001B14  948A               	bcf	3978,2,c	;volatile
 11007  001B16  908A               	bcf	3978,0,c	;volatile
 11008  001B18                     i2l4425:
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;motors.c: 129: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
 11012  001B18  0E02               	movlw	2
 11013  001B1A  0100               	movlb	0	; () banked
 11014  001B1C  19C0               	xorwf	_s1& (0+255),w,b
 11015  001B1E  0100               	movlb	0	; () banked
 11016  001B20  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11017  001B22  A4D8               	btfss	status,2,c
 11018  001B24  D004               	goto	i2l4429
 11019                           
 11020                           ; BSR set to: 0
 11021  001B26  928C               	bcf	3980,1,c	;volatile
 11022  001B28  868A               	bsf	3978,3,c	;volatile
 11023  001B2A  848A               	bsf	3978,2,c	;volatile
 11024  001B2C  908A               	bcf	3978,0,c	;volatile
 11025  001B2E                     i2l4429:
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;motors.c: 130: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
 11029  001B2E  0E03               	movlw	3
 11030  001B30  0100               	movlb	0	; () banked
 11031  001B32  19C0               	xorwf	_s1& (0+255),w,b
 11032  001B34  0100               	movlb	0	; () banked
 11033  001B36  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11034  001B38  A4D8               	btfss	status,2,c
 11035  001B3A  D004               	goto	i2l4433
 11036                           
 11037                           ; BSR set to: 0
 11038  001B3C  928C               	bcf	3980,1,c	;volatile
 11039  001B3E  968A               	bcf	3978,3,c	;volatile
 11040  001B40  848A               	bsf	3978,2,c	;volatile
 11041  001B42  808A               	bsf	3978,0,c	;volatile
 11042  001B44                     i2l4433:
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;motors.c: 131: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
 11046  001B44  0E04               	movlw	4
 11047  001B46  0100               	movlb	0	; () banked
 11048  001B48  19C0               	xorwf	_s1& (0+255),w,b
 11049  001B4A  0100               	movlb	0	; () banked
 11050  001B4C  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11051  001B4E  A4D8               	btfss	status,2,c
 11052  001B50  0012               	return	
 11053                           
 11054                           ; BSR set to: 0
 11055  001B52  828C               	bsf	3980,1,c	;volatile
 11056  001B54  968A               	bcf	3978,3,c	;volatile
 11057  001B56  948A               	bcf	3978,2,c	;volatile
 11058  001B58  808A               	bsf	3978,0,c	;volatile
 11059                           
 11060                           ; BSR set to: 0
 11061                           
 11062                           ; BSR set to: 0
 11063                           
 11064                           ; BSR set to: 0
 11065                           
 11066                           ; BSR set to: 0
 11067                           
 11068                           ; BSR set to: 0
 11069  001B5A  0012               	return	
 11070  001B5C                     __end_ofi2_updateS1:
 11071                           	opt stack 0
 11072                           pclatu	equ	0xFFB
 11073                           pclath	equ	0xFFA
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           prodh	equ	0xFF4
 11079                           prodl	equ	0xFF3
 11080                           intcon	equ	0xFF2
 11081                           intcon2	equ	0xFF1
 11082                           postinc0	equ	0xFEE
 11083                           fsr0h	equ	0xFEA
 11084                           fsr0l	equ	0xFE9
 11085                           wreg	equ	0xFE8
 11086                           fsr1h	equ	0xFE2
 11087                           fsr1l	equ	0xFE1
 11088                           indf2	equ	0xFDF
 11089                           postinc2	equ	0xFDE
 11090                           postdec2	equ	0xFDD
 11091                           fsr2h	equ	0xFDA
 11092                           fsr2l	equ	0xFD9
 11093                           status	equ	0xFD8
 11094                           
 11095 ;; *************** function i2_startTMR1 *****************
 11096 ;; Defined at:
 11097 ;;		line 24 in file "logic.c"
 11098 ;; Parameters:    Size  Location     Type
 11099 ;;		None
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;		None
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  2    0[None  ] int 
 11104 ;; Registers used:
 11105 ;;		wreg, status,2
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;Total ram usage:        0 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_handler
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text39
 11125  002C50                     __ptext39:
 11126                           	opt stack 0
 11127  002C50                     i2_startTMR1:
 11128                           	opt stack 25
 11129                           
 11130                           ;logic.c: 25: T1CON = 0b10110000;
 11131                           
 11132                           ;incstack = 0
 11133  002C50  0EB0               	movlw	176
 11134  002C52  6ECD               	movwf	4045,c	;volatile
 11135                           
 11136                           ;logic.c: 26: TMR1H = 0b11101001;
 11137  002C54  0EE9               	movlw	233
 11138  002C56  6ECF               	movwf	4047,c	;volatile
 11139                           
 11140                           ;logic.c: 27: TMR1L = 0b01011011;
 11141  002C58  0E5B               	movlw	91
 11142  002C5A  6ECE               	movwf	4046,c	;volatile
 11143                           
 11144                           ;logic.c: 28: TMR1ON = 1;
 11145  002C5C  80CD               	bsf	4045,0,c	;volatile
 11146  002C5E  0012               	return		;funcret
 11147  002C60                     __end_ofi2_startTMR1:
 11148                           	opt stack 0
 11149                           pclatu	equ	0xFFB
 11150                           pclath	equ	0xFFA
 11151                           tblptru	equ	0xFF8
 11152                           tblptrh	equ	0xFF7
 11153                           tblptrl	equ	0xFF6
 11154                           tablat	equ	0xFF5
 11155                           prodh	equ	0xFF4
 11156                           prodl	equ	0xFF3
 11157                           intcon	equ	0xFF2
 11158                           intcon2	equ	0xFF1
 11159                           postinc0	equ	0xFEE
 11160                           fsr0h	equ	0xFEA
 11161                           fsr0l	equ	0xFE9
 11162                           wreg	equ	0xFE8
 11163                           fsr1h	equ	0xFE2
 11164                           fsr1l	equ	0xFE1
 11165                           indf2	equ	0xFDF
 11166                           postinc2	equ	0xFDE
 11167                           postdec2	equ	0xFDD
 11168                           fsr2h	equ	0xFDA
 11169                           fsr2l	equ	0xFD9
 11170                           status	equ	0xFD8
 11171                           
 11172 ;; *************** function i2___wmul *****************
 11173 ;; Defined at:
 11174 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;  multiplier      2    0[COMRAM] unsigned int 
 11177 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11178 ;; Auto vars:     Size  Location     Type
 11179 ;;  __wmul          2    4[COMRAM] unsigned int 
 11180 ;; Return value:  Size  Location     Type
 11181 ;;                  2    0[COMRAM] unsigned int 
 11182 ;; Registers used:
 11183 ;;		wreg, status,2, status,0, prodl, prodh
 11184 ;; Tracked objects:
 11185 ;;		On entry : 0/0
 11186 ;;		On exit  : 0/0
 11187 ;;		Unchanged: 0/0
 11188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11190 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;Total ram usage:        6 bytes
 11194 ;; Hardware stack levels used:    1
 11195 ;; This function calls:
 11196 ;;		Nothing
 11197 ;; This function is called by:
 11198 ;;		_handler
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           	psect	text40
 11203  002B9A                     __ptext40:
 11204                           	opt stack 0
 11205  002B9A                     i2___wmul:
 11206                           	opt stack 25
 11207                           
 11208                           ;incstack = 0
 11209  002B9A  5001               	movf	i2___wmul@multiplier,w,c
 11210  002B9C  0203               	mulwf	i2___wmul@multiplicand,c
 11211  002B9E  CFF3 F005          	movff	prodl,i2___wmul@product
 11212  002BA2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11213  002BA6  5001               	movf	i2___wmul@multiplier,w,c
 11214  002BA8  0204               	mulwf	i2___wmul@multiplicand+1,c
 11215  002BAA  50F3               	movf	prodl,w,c
 11216  002BAC  2606               	addwf	i2___wmul@product+1,f,c
 11217  002BAE  5002               	movf	i2___wmul@multiplier+1,w,c
 11218  002BB0  0203               	mulwf	i2___wmul@multiplicand,c
 11219  002BB2  50F3               	movf	prodl,w,c
 11220  002BB4  2606               	addwf	i2___wmul@product+1,f,c
 11221  002BB6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11222  002BBA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11223  002BBE  0012               	return	
 11224  002BC0                     __end_ofi2___wmul:
 11225                           	opt stack 0
 11226                           pclatu	equ	0xFFB
 11227                           pclath	equ	0xFFA
 11228                           tblptru	equ	0xFF8
 11229                           tblptrh	equ	0xFF7
 11230                           tblptrl	equ	0xFF6
 11231                           tablat	equ	0xFF5
 11232                           prodh	equ	0xFF4
 11233                           prodl	equ	0xFF3
 11234                           intcon	equ	0xFF2
 11235                           intcon2	equ	0xFF1
 11236                           postinc0	equ	0xFEE
 11237                           fsr0h	equ	0xFEA
 11238                           fsr0l	equ	0xFE9
 11239                           wreg	equ	0xFE8
 11240                           fsr1h	equ	0xFE2
 11241                           fsr1l	equ	0xFE1
 11242                           indf2	equ	0xFDF
 11243                           postinc2	equ	0xFDE
 11244                           postdec2	equ	0xFDD
 11245                           fsr2h	equ	0xFDA
 11246                           fsr2l	equ	0xFD9
 11247                           status	equ	0xFD8
 11248                           
 11249 ;; *************** function _updateS2 *****************
 11250 ;; Defined at:
 11251 ;;		line 137 in file "motors.c"
 11252 ;; Parameters:    Size  Location     Type
 11253 ;;  mode            2    0[COMRAM] int 
 11254 ;; Auto vars:     Size  Location     Type
 11255 ;;		None
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  1    wreg      void 
 11258 ;; Registers used:
 11259 ;;		wreg, status,2, status,0
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11265 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;Total ram usage:        3 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; This function calls:
 11272 ;;		Nothing
 11273 ;; This function is called by:
 11274 ;;		_handler
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text41
 11279  002482                     __ptext41:
 11280                           	opt stack 0
 11281  002482                     _updateS2:
 11282                           	opt stack 25
 11283                           
 11284                           ;motors.c: 138: _delay((unsigned long)((5)*(32000000/4000.0)));
 11285                           
 11286                           ;incstack = 0
 11287  002482  0E34               	movlw	52
 11288  002484  6E03               	movwf	??_updateS2& (0+255),c
 11289  002486  0EF2               	movlw	242
 11290  002488                     i2u823_47:
 11291  002488  2EE8               	decfsz	wreg,f,c
 11292  00248A  D7FE               	bra	i2u823_47
 11293  00248C  2E03               	decfsz	??_updateS2& (0+255),f,c
 11294  00248E  D7FC               	bra	i2u823_47
 11295                           
 11296                           ;motors.c: 140: if(mode == 0){
 11297  002490  5001               	movf	updateS2@mode,w,c
 11298  002492  1002               	iorwf	updateS2@mode+1,w,c
 11299  002494  A4D8               	btfss	status,2,c
 11300  002496  D005               	goto	i2l3913
 11301                           
 11302                           ;motors.c: 141: LATCbits.LATC7 = 0;
 11303  002498  9E8B               	bcf	3979,7,c	;volatile
 11304                           
 11305                           ;motors.c: 142: LATCbits.LATC6 = 0;
 11306  00249A  9C8B               	bcf	3979,6,c	;volatile
 11307                           
 11308                           ;motors.c: 143: LATCbits.LATC0 = 0;
 11309  00249C  908B               	bcf	3979,0,c	;volatile
 11310                           
 11311                           ;motors.c: 144: LATCbits.LATC5 = 0;
 11312  00249E  9A8B               	bcf	3979,5,c	;volatile
 11313                           
 11314                           ;motors.c: 145: }
 11315  0024A0  0012               	return	
 11316  0024A2                     i2l3913:
 11317                           
 11318                           ;motors.c: 146: else if(mode == 4){
 11319  0024A2  0E04               	movlw	4
 11320  0024A4  1801               	xorwf	updateS2@mode,w,c
 11321  0024A6  1002               	iorwf	updateS2@mode+1,w,c
 11322  0024A8  B4D8               	btfsc	status,2,c
 11323  0024AA  0012               	return	
 11324                           
 11325                           ;motors.c: 149: else if(mode == 3){
 11326                           
 11327                           ;motors.c: 148: }
 11328  0024AC  0E03               	movlw	3
 11329  0024AE  1801               	xorwf	updateS2@mode,w,c
 11330  0024B0  1002               	iorwf	updateS2@mode+1,w,c
 11331  0024B2  A4D8               	btfss	status,2,c
 11332  0024B4  D042               	goto	i2l3941
 11333                           
 11334                           ;motors.c: 150: t2++;
 11335  0024B6  4A43               	infsnz	_t2,f,c
 11336  0024B8  2A44               	incf	_t2+1,f,c
 11337                           
 11338                           ;motors.c: 151: if (t2>8) {t2=1;}
 11339  0024BA  BE44               	btfsc	_t2+1,7,c
 11340  0024BC  D00A               	goto	i2l3925
 11341  0024BE  5044               	movf	_t2+1,w,c
 11342  0024C0  E104               	bnz	i2u451_40
 11343  0024C2  0E09               	movlw	9
 11344  0024C4  5C43               	subwf	_t2,w,c
 11345  0024C6  A0D8               	btfss	status,0,c
 11346  0024C8  D004               	goto	i2l3925
 11347  0024CA                     i2u451_40:
 11348  0024CA  0E00               	movlw	0
 11349  0024CC  6E44               	movwf	_t2+1,c
 11350  0024CE  0E01               	movlw	1
 11351  0024D0  6E43               	movwf	_t2,c
 11352  0024D2                     i2l3925:
 11353                           
 11354                           ;motors.c: 152: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
 11355  0024D2  0443               	decf	_t2,w,c
 11356  0024D4  1044               	iorwf	_t2+1,w,c
 11357  0024D6  B4D8               	btfsc	status,2,c
 11358  0024D8  D005               	goto	i2l555
 11359  0024DA  0E08               	movlw	8
 11360  0024DC  1843               	xorwf	_t2,w,c
 11361  0024DE  1044               	iorwf	_t2+1,w,c
 11362  0024E0  A4D8               	btfss	status,2,c
 11363  0024E2  D002               	goto	i2l553
 11364  0024E4                     i2l555:
 11365  0024E4  8E8B               	bsf	3979,7,c	;volatile
 11366  0024E6  D001               	goto	i2l3929
 11367  0024E8                     i2l553:
 11368                           
 11369                           ;motors.c: 153: else{LATCbits.LATC7 = 0;}
 11370  0024E8  9E8B               	bcf	3979,7,c	;volatile
 11371  0024EA                     i2l3929:
 11372                           
 11373                           ;motors.c: 154: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
 11374  0024EA  0E02               	movlw	2
 11375  0024EC  1843               	xorwf	_t2,w,c
 11376  0024EE  1044               	iorwf	_t2+1,w,c
 11377  0024F0  B4D8               	btfsc	status,2,c
 11378  0024F2  D005               	goto	i2l559
 11379  0024F4  0E07               	movlw	7
 11380  0024F6  1843               	xorwf	_t2,w,c
 11381  0024F8  1044               	iorwf	_t2+1,w,c
 11382  0024FA  A4D8               	btfss	status,2,c
 11383  0024FC  D002               	goto	i2l557
 11384  0024FE                     i2l559:
 11385  0024FE  8C8B               	bsf	3979,6,c	;volatile
 11386  002500  D001               	goto	i2l3933
 11387  002502                     i2l557:
 11388                           
 11389                           ;motors.c: 155: else{LATCbits.LATC6 = 0;}
 11390  002502  9C8B               	bcf	3979,6,c	;volatile
 11391  002504                     i2l3933:
 11392                           
 11393                           ;motors.c: 156: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
 11394  002504  0E03               	movlw	3
 11395  002506  1843               	xorwf	_t2,w,c
 11396  002508  1044               	iorwf	_t2+1,w,c
 11397  00250A  B4D8               	btfsc	status,2,c
 11398  00250C  D005               	goto	i2l563
 11399  00250E  0E06               	movlw	6
 11400  002510  1843               	xorwf	_t2,w,c
 11401  002512  1044               	iorwf	_t2+1,w,c
 11402  002514  A4D8               	btfss	status,2,c
 11403  002516  D002               	goto	i2l561
 11404  002518                     i2l563:
 11405  002518  808B               	bsf	3979,0,c	;volatile
 11406  00251A  D001               	goto	i2l3937
 11407  00251C                     i2l561:
 11408                           
 11409                           ;motors.c: 157: else{LATCbits.LATC0 = 0;}
 11410  00251C  908B               	bcf	3979,0,c	;volatile
 11411  00251E                     i2l3937:
 11412                           
 11413                           ;motors.c: 158: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
 11414  00251E  0E04               	movlw	4
 11415  002520  1843               	xorwf	_t2,w,c
 11416  002522  1044               	iorwf	_t2+1,w,c
 11417  002524  B4D8               	btfsc	status,2,c
 11418  002526  D005               	goto	i2l567
 11419  002528  0E05               	movlw	5
 11420  00252A  1843               	xorwf	_t2,w,c
 11421  00252C  1044               	iorwf	_t2+1,w,c
 11422  00252E  A4D8               	btfss	status,2,c
 11423  002530  D002               	goto	i2l565
 11424  002532                     i2l567:
 11425  002532  8A8B               	bsf	3979,5,c	;volatile
 11426  002534  0012               	return	
 11427  002536                     i2l565:
 11428                           
 11429                           ;motors.c: 159: else{LATCbits.LATC5 = 0;}
 11430  002536  9A8B               	bcf	3979,5,c	;volatile
 11431                           
 11432                           ;motors.c: 160: }
 11433  002538  0012               	return	
 11434  00253A                     i2l3941:
 11435                           
 11436                           ;motors.c: 161: else{
 11437                           ;motors.c: 162: if(mode == 1){
 11438  00253A  0401               	decf	updateS2@mode,w,c
 11439  00253C  1002               	iorwf	updateS2@mode+1,w,c
 11440  00253E  A4D8               	btfss	status,2,c
 11441  002540  D00E               	goto	i2l3949
 11442                           
 11443                           ;motors.c: 163: s2 ++;
 11444  002542  4A49               	infsnz	_s2,f,c
 11445  002544  2A4A               	incf	_s2+1,f,c
 11446                           
 11447                           ;motors.c: 164: if (s2>4) {s2=1;}
 11448  002546  BE4A               	btfsc	_s2+1,7,c
 11449  002548  D01D               	goto	i2l3957
 11450  00254A  504A               	movf	_s2+1,w,c
 11451  00254C  E104               	bnz	i2u461_40
 11452  00254E  0E05               	movlw	5
 11453  002550  5C49               	subwf	_s2,w,c
 11454  002552  A0D8               	btfss	status,0,c
 11455  002554  D017               	goto	i2l3957
 11456  002556                     i2u461_40:
 11457  002556  0E00               	movlw	0
 11458  002558  6E4A               	movwf	_s2+1,c
 11459  00255A  0E01               	movlw	1
 11460  00255C  D012               	goto	L19
 11461  00255E                     i2l3949:
 11462                           
 11463                           ;motors.c: 166: else if(mode == 2){
 11464  00255E  0E02               	movlw	2
 11465  002560  1801               	xorwf	updateS2@mode,w,c
 11466  002562  1002               	iorwf	updateS2@mode+1,w,c
 11467  002564  A4D8               	btfss	status,2,c
 11468  002566  D00E               	goto	i2l3957
 11469                           
 11470                           ;motors.c: 167: s2 --;
 11471  002568  0649               	decf	_s2,f,c
 11472  00256A  A0D8               	btfss	status,0,c
 11473  00256C  064A               	decf	_s2+1,f,c
 11474                           
 11475                           ;motors.c: 168: if (s2<1) {s2=4;}
 11476  00256E  BE4A               	btfsc	_s2+1,7,c
 11477  002570  D005               	goto	i2l3955
 11478  002572  504A               	movf	_s2+1,w,c
 11479  002574  E107               	bnz	i2l3957
 11480  002576  0449               	decf	_s2,w,c
 11481  002578  B0D8               	btfsc	status,0,c
 11482  00257A  D004               	goto	i2l3957
 11483  00257C                     i2l3955:
 11484  00257C  0E00               	movlw	0
 11485  00257E  6E4A               	movwf	_s2+1,c
 11486  002580  0E04               	movlw	4
 11487  002582                     L19:
 11488  002582  6E49               	movwf	_s2,c
 11489  002584                     i2l3957:
 11490                           
 11491                           ;motors.c: 169: }
 11492                           ;motors.c: 171: if (s2 == 1){LATCbits.LATC7 = 1;}
 11493  002584  0449               	decf	_s2,w,c
 11494  002586  104A               	iorwf	_s2+1,w,c
 11495  002588  A4D8               	btfss	status,2,c
 11496  00258A  D002               	goto	i2l575
 11497  00258C  8E8B               	bsf	3979,7,c	;volatile
 11498  00258E  D001               	goto	i2l3961
 11499  002590                     i2l575:
 11500                           
 11501                           ;motors.c: 172: else{LATCbits.LATC7 = 0;}
 11502  002590  9E8B               	bcf	3979,7,c	;volatile
 11503  002592                     i2l3961:
 11504                           
 11505                           ;motors.c: 173: if (s2 == 2){LATCbits.LATC6 = 1;}
 11506  002592  0E02               	movlw	2
 11507  002594  1849               	xorwf	_s2,w,c
 11508  002596  104A               	iorwf	_s2+1,w,c
 11509  002598  A4D8               	btfss	status,2,c
 11510  00259A  D002               	goto	i2l577
 11511  00259C  8C8B               	bsf	3979,6,c	;volatile
 11512  00259E  D001               	goto	i2l3965
 11513  0025A0                     i2l577:
 11514                           
 11515                           ;motors.c: 174: else{LATCbits.LATC6 = 0;}
 11516  0025A0  9C8B               	bcf	3979,6,c	;volatile
 11517  0025A2                     i2l3965:
 11518                           
 11519                           ;motors.c: 175: if (s2 == 3){LATCbits.LATC0 = 1;}
 11520  0025A2  0E03               	movlw	3
 11521  0025A4  1849               	xorwf	_s2,w,c
 11522  0025A6  104A               	iorwf	_s2+1,w,c
 11523  0025A8  A4D8               	btfss	status,2,c
 11524  0025AA  D002               	goto	i2l579
 11525  0025AC  808B               	bsf	3979,0,c	;volatile
 11526  0025AE  D001               	goto	i2l3969
 11527  0025B0                     i2l579:
 11528                           
 11529                           ;motors.c: 176: else{LATCbits.LATC0 = 0;}
 11530  0025B0  908B               	bcf	3979,0,c	;volatile
 11531  0025B2                     i2l3969:
 11532                           
 11533                           ;motors.c: 177: if (s2 == 4){LATCbits.LATC5 = 1;}
 11534  0025B2  0E04               	movlw	4
 11535  0025B4  1849               	xorwf	_s2,w,c
 11536  0025B6  104A               	iorwf	_s2+1,w,c
 11537  0025B8  A4D8               	btfss	status,2,c
 11538  0025BA  D002               	goto	i2l581
 11539  0025BC  8A8B               	bsf	3979,5,c	;volatile
 11540  0025BE  0012               	return	
 11541  0025C0                     i2l581:
 11542                           
 11543                           ;motors.c: 178: else{LATCbits.LATC5 = 0;}
 11544  0025C0  9A8B               	bcf	3979,5,c	;volatile
 11545  0025C2  0012               	return	
 11546  0025C4                     __end_of_updateS2:
 11547                           	opt stack 0
 11548                           pclatu	equ	0xFFB
 11549                           pclath	equ	0xFFA
 11550                           tblptru	equ	0xFF8
 11551                           tblptrh	equ	0xFF7
 11552                           tblptrl	equ	0xFF6
 11553                           tablat	equ	0xFF5
 11554                           prodh	equ	0xFF4
 11555                           prodl	equ	0xFF3
 11556                           intcon	equ	0xFF2
 11557                           intcon2	equ	0xFF1
 11558                           postinc0	equ	0xFEE
 11559                           fsr0h	equ	0xFEA
 11560                           fsr0l	equ	0xFE9
 11561                           wreg	equ	0xFE8
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           
 11571 ;; *************** function ___awdiv *****************
 11572 ;; Defined at:
 11573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;  dividend        2    6[COMRAM] int 
 11576 ;;  divisor         2    8[COMRAM] int 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;  quotient        2   12[COMRAM] int 
 11579 ;;  sign            1   11[COMRAM] unsigned char 
 11580 ;;  counter         1   10[COMRAM] unsigned char 
 11581 ;; Return value:  Size  Location     Type
 11582 ;;                  2    6[COMRAM] int 
 11583 ;; Registers used:
 11584 ;;		wreg, status,2, status,0
 11585 ;; Tracked objects:
 11586 ;;		On entry : 0/0
 11587 ;;		On exit  : 0/0
 11588 ;;		Unchanged: 0/0
 11589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11590 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11593 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;Total ram usage:        8 bytes
 11595 ;; Hardware stack levels used:    1
 11596 ;; This function calls:
 11597 ;;		Nothing
 11598 ;; This function is called by:
 11599 ;;		_handler
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           	psect	text42
 11604  0025C4                     __ptext42:
 11605                           	opt stack 0
 11606  0025C4                     ___awdiv:
 11607                           	opt stack 25
 11608                           
 11609                           ;incstack = 0
 11610  0025C4  0E00               	movlw	0
 11611  0025C6  6E0C               	movwf	___awdiv@sign,c
 11612  0025C8  AE0A               	btfss	___awdiv@divisor+1,7,c
 11613  0025CA  D006               	goto	i2l4241
 11614  0025CC  6C09               	negf	___awdiv@divisor,c
 11615  0025CE  1E0A               	comf	___awdiv@divisor+1,f,c
 11616  0025D0  B0D8               	btfsc	status,0,c
 11617  0025D2  2A0A               	incf	___awdiv@divisor+1,f,c
 11618  0025D4  0E01               	movlw	1
 11619  0025D6  6E0C               	movwf	___awdiv@sign,c
 11620  0025D8                     i2l4241:
 11621  0025D8  AE08               	btfss	___awdiv@dividend+1,7,c
 11622  0025DA  D006               	goto	i2l4247
 11623  0025DC  6C07               	negf	___awdiv@dividend,c
 11624  0025DE  1E08               	comf	___awdiv@dividend+1,f,c
 11625  0025E0  B0D8               	btfsc	status,0,c
 11626  0025E2  2A08               	incf	___awdiv@dividend+1,f,c
 11627  0025E4  0E01               	movlw	1
 11628  0025E6  1A0C               	xorwf	___awdiv@sign,f,c
 11629  0025E8                     i2l4247:
 11630  0025E8  0E00               	movlw	0
 11631  0025EA  6E0E               	movwf	___awdiv@quotient+1,c
 11632  0025EC  0E00               	movlw	0
 11633  0025EE  6E0D               	movwf	___awdiv@quotient,c
 11634  0025F0  5009               	movf	___awdiv@divisor,w,c
 11635  0025F2  100A               	iorwf	___awdiv@divisor+1,w,c
 11636  0025F4  B4D8               	btfsc	status,2,c
 11637  0025F6  D01C               	goto	i2l4269
 11638  0025F8  0E01               	movlw	1
 11639  0025FA  6E0B               	movwf	___awdiv@counter,c
 11640  0025FC  D004               	goto	i2l4255
 11641  0025FE                     i2l4253:
 11642  0025FE  90D8               	bcf	status,0,c
 11643  002600  3609               	rlcf	___awdiv@divisor,f,c
 11644  002602  360A               	rlcf	___awdiv@divisor+1,f,c
 11645  002604  2A0B               	incf	___awdiv@counter,f,c
 11646  002606                     i2l4255:
 11647  002606  AE0A               	btfss	___awdiv@divisor+1,7,c
 11648  002608  D7FA               	goto	i2l4253
 11649  00260A                     i2l4257:
 11650  00260A  90D8               	bcf	status,0,c
 11651  00260C  360D               	rlcf	___awdiv@quotient,f,c
 11652  00260E  360E               	rlcf	___awdiv@quotient+1,f,c
 11653  002610  5009               	movf	___awdiv@divisor,w,c
 11654  002612  5C07               	subwf	___awdiv@dividend,w,c
 11655  002614  500A               	movf	___awdiv@divisor+1,w,c
 11656  002616  5808               	subwfb	___awdiv@dividend+1,w,c
 11657  002618  A0D8               	btfss	status,0,c
 11658  00261A  D005               	goto	i2l4265
 11659  00261C  5009               	movf	___awdiv@divisor,w,c
 11660  00261E  5E07               	subwf	___awdiv@dividend,f,c
 11661  002620  500A               	movf	___awdiv@divisor+1,w,c
 11662  002622  5A08               	subwfb	___awdiv@dividend+1,f,c
 11663  002624  800D               	bsf	___awdiv@quotient,0,c
 11664  002626                     i2l4265:
 11665  002626  90D8               	bcf	status,0,c
 11666  002628  320A               	rrcf	___awdiv@divisor+1,f,c
 11667  00262A  3209               	rrcf	___awdiv@divisor,f,c
 11668  00262C  2E0B               	decfsz	___awdiv@counter,f,c
 11669  00262E  D7ED               	goto	i2l4257
 11670  002630                     i2l4269:
 11671  002630  500C               	movf	___awdiv@sign,w,c
 11672  002632  B4D8               	btfsc	status,2,c
 11673  002634  D004               	goto	i2l4273
 11674  002636  6C0D               	negf	___awdiv@quotient,c
 11675  002638  1E0E               	comf	___awdiv@quotient+1,f,c
 11676  00263A  B0D8               	btfsc	status,0,c
 11677  00263C  2A0E               	incf	___awdiv@quotient+1,f,c
 11678  00263E                     i2l4273:
 11679  00263E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11680  002642  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11681  002646  0012               	return	
 11682  002648                     __end_of___awdiv:
 11683                           	opt stack 0
 11684                           pclatu	equ	0xFFB
 11685                           pclath	equ	0xFFA
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           intcon2	equ	0xFF1
 11694                           postinc0	equ	0xFEE
 11695                           fsr0h	equ	0xFEA
 11696                           fsr0l	equ	0xFE9
 11697                           wreg	equ	0xFE8
 11698                           fsr1h	equ	0xFE2
 11699                           fsr1l	equ	0xFE1
 11700                           indf2	equ	0xFDF
 11701                           postinc2	equ	0xFDE
 11702                           postdec2	equ	0xFDD
 11703                           fsr2h	equ	0xFDA
 11704                           fsr2l	equ	0xFD9
 11705                           status	equ	0xFD8
 11706                           pclatu	equ	0xFFB
 11707                           pclath	equ	0xFFA
 11708                           tblptru	equ	0xFF8
 11709                           tblptrh	equ	0xFF7
 11710                           tblptrl	equ	0xFF6
 11711                           tablat	equ	0xFF5
 11712                           prodh	equ	0xFF4
 11713                           prodl	equ	0xFF3
 11714                           intcon	equ	0xFF2
 11715                           intcon2	equ	0xFF1
 11716                           postinc0	equ	0xFEE
 11717                           fsr0h	equ	0xFEA
 11718                           fsr0l	equ	0xFE9
 11719                           wreg	equ	0xFE8
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729                           	psect	rparam
 11730  0000                     pclatu	equ	0xFFB
 11731                           pclath	equ	0xFFA
 11732                           tblptru	equ	0xFF8
 11733                           tblptrh	equ	0xFF7
 11734                           tblptrl	equ	0xFF6
 11735                           tablat	equ	0xFF5
 11736                           prodh	equ	0xFF4
 11737                           prodl	equ	0xFF3
 11738                           intcon	equ	0xFF2
 11739                           intcon2	equ	0xFF1
 11740                           postinc0	equ	0xFEE
 11741                           fsr0h	equ	0xFEA
 11742                           fsr0l	equ	0xFE9
 11743                           wreg	equ	0xFE8
 11744                           fsr1h	equ	0xFE2
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           postdec2	equ	0xFDD
 11749                           fsr2h	equ	0xFDA
 11750                           fsr2l	equ	0xFD9
 11751                           status	equ	0xFD8
 11752                           
 11753                           	psect	temp
 11754  00005F                     btemp:
 11755                           	opt stack 0
 11756  00005F                     	ds	1
 11757  0000                     int$flags	set	btemp
 11758                           pclatu	equ	0xFFB
 11759                           pclath	equ	0xFFA
 11760                           tblptru	equ	0xFF8
 11761                           tblptrh	equ	0xFF7
 11762                           tblptrl	equ	0xFF6
 11763                           tablat	equ	0xFF5
 11764                           prodh	equ	0xFF4
 11765                           prodl	equ	0xFF3
 11766                           intcon	equ	0xFF2
 11767                           intcon2	equ	0xFF1
 11768                           postinc0	equ	0xFEE
 11769                           fsr0h	equ	0xFEA
 11770                           fsr0l	equ	0xFE9
 11771                           wreg	equ	0xFE8
 11772                           fsr1h	equ	0xFE2
 11773                           fsr1l	equ	0xFE1
 11774                           indf2	equ	0xFDF
 11775                           postinc2	equ	0xFDE
 11776                           postdec2	equ	0xFDD
 11777                           fsr2h	equ	0xFDA
 11778                           fsr2l	equ	0xFD9
 11779                           status	equ	0xFD8


Data Sizes:
    Strings     450
    Constant    42
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      94
    BANK0           128     47      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_51(CODE[17]), STR_50(CODE[17]), STR_49(CODE[16]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[16]), STR_44(CODE[17]), 
		 -> STR_43(CODE[22]), STR_42(CODE[17]), STR_41(CODE[21]), STR_40(CODE[17]), 
		 -> STR_39(CODE[12]), STR_38(CODE[17]), STR_37(CODE[8]), STR_36(CODE[15]), 
		 -> STR_35(CODE[8]), STR_34(CODE[16]), STR_33(CODE[17]), STR_32(CODE[16]), 
		 -> STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[12]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[12]), STR_21(CODE[9]), STR_20(CODE[9]), 
		 -> STR_19(CODE[12]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[11]), STR_13(CODE[13]), STR_12(CODE[3]), 
		 -> STR_11(CODE[16]), STR_10(CODE[16]), STR_9(CODE[3]), STR_8(CODE[16]), 
		 -> STR_7(CODE[16]), STR_6(CODE[12]), STR_5(CODE[12]), STR_4(CODE[17]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_addRun
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _calibrateWheels->_updateS1
    _calibrateWheels->_updateS3
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->___awdiv
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_displayLog
    _homescreen->_printf
    _displayLog->_printf

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   33580
                                             17 BANK0     30    30      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                            ___awmod
                             _addRun
                    _calibrateWheels
                         _displayLog
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                             35 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             33 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             33 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     571
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             35 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             45 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             32 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    8006
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    9119
                                             56 COMRAM     2     0      2
                                             10 BANK0      7     7      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    7811
                                             44 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1204
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             39 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             32 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateWheels                                      4     4      0    1535
                                             35 COMRAM     4     4      0
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     554
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     686
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _startTMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2493
                                             36 COMRAM    24     2     22
                                              0 BANK0      3     3      0
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     834
                                             32 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      62
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     552
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 6     2      4     728
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             22    22      0    1982
                                             14 COMRAM    18    18      0
                            ___awdiv
                           _updateS2
                           i2___wmul
                        i2_startTMR1
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     158
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     290
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_startTMR1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   ___awmod
   _addRun
     _eepromRead
     _eepromWrite
   _calibrateWheels
     _readADC
     _startTMR1
     _updateS1
     _updateS3
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _startTMR1
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   ___awdiv
     i2___wmul (ARG)
   _updateS2
   i2___wmul
   i2_startTMR1
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      43       5       52.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      5E       1       74.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      34        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 12 02:09:08 2017

                        _s 0047                          _t 0045               ___awdiv@sign 000C  
                       _s1 00C0                         _s2 0049                         _s3 00BE  
                       _t2 0043                         _t3 0041        ___wmul@multiplicand 0023  
              __CFG_BORV$3 000000           ?_calibrateWheels 0001               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l212 03F6                        l214 0406                        l223 0490  
                      l240 053A                        l216 0416                        l225 04A0  
                      l234 050A                        l218 0426                        l227 04B0  
                      l500 16FE                        l316 0D96                        l236 051A  
                      l229 04C0                        l510 1750                        l502 171C  
                      l238 052A                        l512 174C                        l504 1718  
                      l600 1E40                        l506 1736                        l602 1E3C  
                      l531 1816                        l611 1E9A                        l508 1732  
                      l604 1E5A                        l533 182A                        l621 1ECA  
                      l613 1E96                        l606 1E56                        l535 183E  
                      l623 1EE8                        l615 1EB4                        l529 1802  
                      l481 1662                        l633 1F5A                        l625 1EE4  
                      l617 1EB0                        l386 2C2E                        l467 27B4  
                      l491 16B4                        l483 1680                        l635 1F6E  
                      l619 1ECE                        l493 16B0                        l485 167C  
                      l637 1F82                        l487 169A                        l479 1666  
                      l639 1F96                        l592 1E0C                        l489 1696  
                      l817 0FFC                        l498 1702                        l594 1E08  
                      l770 222E                        l691 2B20                        l675 2C18  
                      l596 1E26                        l684 2C14                        l685 2C10  
                      l598 1E22                        l782 22EA                        l678 2C26  
                      l697 2AF6               __CFG_CPB$OFF 000000                        _PR2 000FCB  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
             ___awmod@sign 0026                        prod 000FF3                        wreg 000FE8  
      __end_ofi2_startTMR1 2C60               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1209 26B8                       l1262 29EC                       l1272 2ABE  
                     l4001 285E                       l4011 2882                       l4005 2866  
                     l4031 2198                       l4041 21E4                       l4033 21A8  
                     l4043 21F2                       l4035 21B6                       l3411 266A  
                     l4301 2808                       l4061 2254                       l4045 2202  
                     l4037 21C6                       l3413 2676                       l3511 1704  
                     l4071 22A0                       l4063 2264                       l4055 2236  
                     l4047 2210                       l4039 21D4                       l3423 26AA  
                     l3415 267A                       l4305 2812                       l3505 16DE  
                     l4073 22AE                       l4065 2272                       l4049 2218  
                     l3515 171E                       l3523 1754                       l3611 1E0E  
                     l4075 22BE                       l4067 2282                       l6011 08A4  
                     l4309 2820                       l3533 1780                       l4085 22F2  
                     l4077 22CC                       l4069 2290                       l5301 2A94  
                     l6021 08FE                       l3543 17BA                       l3519 1738  
                     l3471 161C                       l3631 1E84                       l3615 1E28  
                     l3607 1DF6                       l3623 1E5E                       l4079 22D4  
                     l5303 2A9C                       l6111 0B2C                       l6015 08C0  
                     l3561 1818                       l3553 17F2                       l5305 2AA0  
                     l6121 0B6E                       l6113 0B3E                       l6017 08D4  
                     l3547 17D6                       l3539 17A6                       l3643 1ED0  
                     l3635 1E9C                       l3619 1E42                       l5411 10FA  
                     l5403 10C8                       l6123 0B86                       l6107 0B08  
                     l6043 0986                       l6019 08E4                       l4293 27E8  
                     l4285 27CE                       l3581 187E                       l3573 1854  
                     l3565 182C                       l3557 1804                       l3549 17E0  
                     l3493 169C                       l3485 1668                       l3661 1F40  
                     l5309 2AB4                       l5405 10DA                       l5333 0F1A  
                     l6205 0E12                       l6117 0B56                       l6109 0B1C  
                     l6061 09E8                       l6037 0966                       l4295 27F0  
                     l3479 1642                       l3671 1F70                       l3663 1F4A  
                     l3655 1F1A                       l3639 1EB6                       l3647 1EEC  
                     l5431 1178                       l5423 1150                       l5415 112E  
                     l5335 0F2C                       l6207 0E28                       l6143 0C02  
                     l6135 0BCC                       l6119 0B5E                       l6063 09F0  
                     l6047 099A                       l6039 0970                       l4297 27F4  
                     l4289 27DA                       l5601 2352                       l3585 1894  
                     l3577 1868                       l3569 1840                       l3489 1682  
                     l3497 16B8                       l5281 29BA                       l5265 2BFA  
                     l5441 11AA                       l5417 1138                       l5353 0FC6  
                     l5345 0F64                       l5329 0F06                       l5513 129C  
                     l5521 12C8                       l6161 0C96                       l6145 0C1E  
                     l6081 0A5C                       l6057 09CC                       l6065 09F8  
                     l5603 235A                       l3675 1F84                       l3667 1F5C  
                     l3595 1DC6                       l5283 29C2                       l5443 11F2  
                     l5451 1250                       l5435 1192                       l5339 0F34  
                     l6147 0C2E                       l6139 0BEA                       l6091 0AAC  
                     l3845 2BD0                       l5293 29E2                       l5285 29C6  
                     l5453 1258                       l5429 116C                       l5373 1050  
                     l5357 0FCC                       l6173 0CD6                       l6149 0C50  
                     l6165 0CB4                       l6093 0AB4                       l3847 2BDE  
                     l5439 11A4                       l5375 1056                       l5455 1264  
                     l5519 12C2                       l6183 0D06                       l6095 0AC4  
                     l6087 0A94                       l6191 0D32                       l5449 123E  
                     l5369 1034                       l6169 0CC6                       l6097 0AD4  
                     l6089 0A9C                       l5801 0408                       l5705 01FA  
                     l5713 0256                       l5387 108C                       l6195 0D66  
                     l6187 0D22                       l6099 0AE4                       l5651 0066  
                     l5389 1092                       l3869 2B6E                       l6189 0D2A  
                     l5805 0418                       l5813 0448                       l5709 0236  
                     l5661 0086                       l5823 047E                       l5655 007A  
                     l5921 0674                       l5833 04A2                       l5841 04C2  
                     l5809 0428                       l5681 016E                       _ADFM 007E07  
                     l5851 04F8                       l5691 019E                       l5925 0684  
                     l5861 051C                       l5837 04B2                       l5829 0492  
                     l5677 0156                       l5791 03E4                       l5951 071A  
                     l5679 015E                       l5865 052C                       l5857 050C  
                     l5873 055C                       l5697 01C2                       l5689 0196  
                     l5947 0706                       l5891 05BE                       l5699 01CA  
                     l5981 07E0                       l5869 053C                       l5797 03F8  
                     l5991 082A                       l5975 07C8                       l5983 07F6  
                     l5993 083A                       l5969 0790                       l5987 0812  
                     l5989 081A                       STR_1 FEFE                       STR_2 FF3E  
                     STR_3 FF0E                       STR_4 FEAC                       STR_5 FFC7  
                     STR_6 FF97                       STR_7 FF1E                       STR_8 FF4E  
                     STR_9 FFFC                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u4080 1F10                       u4155 2922                       u4420 2B6C  
                     u3470 163A                       u3570 16D6                       _PEIE 007F96  
                     u4465 2AD2                       u3690 179C                       _RCEN 007E2B  
                     u8007 12F2                       u3880 1DEE                       u8017 1350  
                     u8107 299C                       u8027 13EC                       u3980 1E7C  
                     u8117 1DAC                       u8037 1488                       u8127 1602  
                     u8047 14E8                       u8137 1648                       u8057 1548  
                     u8147 16E4                       u8067 15A8                       u8157 1764  
                     u8077 2966                       u8167 2BD6                       u8087 2970  
                     u8177 2798                       u8097 2992                       u7750 0DDA  
                     u7807 012C                       u7817 0272                       u6970 12B8  
                     u6955 2B0A                       u7907 05D2                       u7827 02AE  
                     u7917 0668                       u7837 02EE                       u7927 0698  
                     u7847 032E                       u7937 06B2                       u7857 036E  
                     u7947 0728                       u7867 03CC                       u7957 0782  
                     u7877 0466                       u7797 005C                       u7967 0A4E  
                     u7887 04E0                       u7977 0EB0                       u7897 058C  
                     u7987 2A46                       u7997 2A7A                       _PWM1 29F6  
                     _PWM2 2742                       _RSEN 007E29                displayLog@i 008D  
          __end_of_PWM1off 2C96            __end_of_PWM2off 2C8C                       _main 0012  
                     _curr 003D                       _keys FE13                       _time 00AF  
                     _prev 003F                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 005F  
              main@standby 00AD                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                 i2_updateS1 18AC                 i2_updateS3 1F9A  
                    ?_PWM1 0021                      ?_PWM2 0021           ?_I2C_Master_Init 002E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 2648                      _ADRES 000FC3                      _EEADR 000FA9  
                    STR_10 FF5E                      STR_11 FF6E                      STR_12 FFFC  
                    STR_20 FFDE                      STR_21 FFDE                      STR_13 FF7E  
                    STR_30 FFFB                      STR_14 FFD3                      STR_22 FFBB  
                    STR_31 FFFB                      STR_23 FFFB                      STR_15 FFF7  
                    STR_16 FFF7                      STR_24 FEEA                      STR_40 FE9B  
                    STR_32 FF2E                      STR_17 FFF7                      STR_25 FFFB  
                    STR_33 FEBD                      STR_41 FE53                      STR_18 FFF7  
                    STR_26 FEEA                      STR_50 FE9B                      STR_42 FE9B  
                    STR_34 FECE                      STR_27 FFFB                      STR_35 FFEF  
                    STR_19 FFA3                      STR_51 FE8A                      STR_43 FE3D  
                    STR_44 FE9B                      STR_36 FE44                      STR_28 FFAF  
                    STR_52 FE68            __end_of___awmod 282A                      STR_29 FFFB  
                    STR_37 FFE7                      STR_45 FEDE                      STR_46 FE9B  
                    STR_38 FE9B                      STR_39 FF8B                      STR_47 FE79  
                    STR_48 FE9B                      STR_49 FEEE            __end_of___lldiv 26CA  
                    _T0CON 000FD5            ___awdiv@divisor 0009                      _T1CON 000FCD  
                    _T2CON 000FCA                      _T3CON 000FB1            __end_of___lwdiv 29F6  
          __end_of___lwmod 2AC8                      i2l500 19AE                      i2l181 1D6A  
                    i2l510 1A00                      i2l502 19CC                      i2l512 19FC  
                    i2l504 19C8                      i2l600 2034                      i2l506 19E6  
                    i2l602 2030                      i2l531 1AC6                      i2l611 208E  
                    i2l508 19E2                      i2l604 204E                      i2l533 1ADA  
                    i2l621 20BE                      i2l613 208A                      i2l606 204A  
                    i2l535 1AEE                      i2l623 20DC                      i2l615 20A8  
                    i2l561 251C                      i2l553 24E8                      i2l529 1AB2  
                    i2l481 1912                      i2l633 214E                      i2l625 20D8  
                    i2l617 20A4                      i2l563 2518                      i2l555 24E4  
                    i2l491 1964                      i2l483 1930                      i2l635 2162  
                    i2l619 20C2                      i2l581 25C0                      i2l565 2536  
                    i2l557 2502                      i2l493 1960                      i2l485 192C  
                    i2l637 2176                      i2l575 2590                      i2l567 2532  
                    i2l559 24FE                      i2l487 194A                      i2l479 1916  
                    i2l639 218A                      i2l592 2000                      i2l577 25A0  
                    i2l489 1946                      i2l498 19B2                      i2l594 1FFC  
                    i2l579 25B0                      i2l596 201A                      i2l598 2016  
          ___awdiv@counter 000B               updateS1@mode 0021               updateS2@mode 0001  
             updateS3@mode 0021                      _TMR0H 000FD7                      _TMR1H 000FCF  
                    _TMR0L 000FD6                      _TMR3H 000FB3                      _TMR1L 000FCE  
                    _TMR3L 000FB2                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 2C78            __end_of_handler 1DA6             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC 2BE4  
          __end_of_initLCD 2A86             __CFG_EBTRB$OFF 000000            __end_of_dpowers FE2E  
             main@sodaLoad 0095            __end_of_isdigit 2C02                      _sodaI 004B  
             main@sodaSort 00A7                      _soupI 004D                      _putch 2C60  
                    main@s 0097                      pclath 000FFA                      tablat 000FF5  
         __end_ofi2___wmul 2BC0                      status 000FD8               main@soupLoad 0093  
             main@soupSort 00A5             __CFG_PBADEN$ON 000000               __end_of_PWM1 2A40  
             __end_of_PWM2 27BA            __initialization 2B28               __end_of_main 0EF8  
             __end_of_keys FE24                     ??_PWM1 0023                     ??_PWM2 0025  
              i2_startTMR1 2C50                     ??_main 0091              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0022         ??_I2C_Master_Start 0022  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0024  
                   _ADCON2 000FC0                  ??_PWM1off 0021                  ??_PWM2off 0021  
                   _ADRESH 000FC4                     _EEADRH 000FAA                     _EEDATA 000FA8  
                   _CCPR1L 000FBE                     _CCPR2L 000FBB                     _EECON2 000FA7  
         ___awdiv@dividend 0007                     ?_putch 0001                     _CVRCON 000FB5  
                   i2l4241 25D8                     i2l4401 1AA2                     i2l4253 25FE  
                   i2l4421 1B04                     i2l4413 1ADC                     i2l4405 1AB4  
                   i2l4341 194C                     i2l4333 1918                     i2l4255 2606  
                   i2l4247 25E8                     i2l4327 18F2                     i2l4319 18CC  
                   i2l4511 213E                     i2l4503 210E                     i2l4273 263E  
                   i2l4265 2626                     i2l4257 260A                     i2l4433 1B44  
                   i2l4425 1B18                     i2l4409 1AC8                     i2l4417 1AF0  
                   i2l4353 198E                     i2l4337 1932                     i2l4345 1968  
                   i2l4363 19CE                     i2l4371 1A04                     i2l4523 2178  
                   i2l4515 2150                     i2l4443 1FBA                     i2l4269 2630  
                   i2l4429 1B2E                     i2l4381 1A30                     i2l4509 2134  
                   i2l4391 1A6A                     i2l4367 19E8                     i2l4359 19B4  
                   i2l4519 2164                     i2l4463 201C                     i2l4455 1FEA  
                   i2l4471 2052                     i2l3913 24A2                     i2l4553 1BB8  
                   i2l4395 1A86                     i2l4387 1A56                     i2l4491 20C4  
                   i2l4483 2090                     i2l4467 2036                     i2l4459 2002  
                   i2l4571 1CC6                     i2l3933 2504                     i2l3925 24D2  
                   i2l3941 253A                     i2l4397 1A90                     i2l4487 20AA  
                   i2l4479 2078                     i2l4495 20E0                     i2l4591 1D64  
                   i2l4575 1CD6                     i2l4567 1C58                     i2l3961 2592  
                   i2l3937 251E                     i2l3929 24EA                     i2l3955 257C  
                   i2l4587 1D58                     i2l4579 1CE2                     i2l3965 25A2  
                   i2l3957 2584                     i2l3949 255E                     i2l3969 25B2  
                   _OSCCON 000FD3                     _TMR0IE 007F95                     _TMR0IF 007F92  
                   _TMR1IE 007CE8                     _TMR1IF 007CF0                     _TMR0ON 007EAF  
                   _TMR1ON 007E68                     _TMR3ON 007D88                     _S1mode 005D  
                   _S2mode 005B                     _SSPADD 000FC8                     _S3mode 0059  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038                     _addRun 2316  
                   ___wmul 2B74                  ??___awdiv 000B             __CFG_STVREN$ON 000000  
                ??___awmod 0025                ?i2_updateS1 0001                ?i2_updateS3 0001  
                ??___lldiv 0029                  ??___lwdiv 0025                  ??___lwmod 002C  
            displayLog@run 0039           __end_of_keycheck 2C2E           calibrateWheels@i 0026  
                   clear_0 2B2E                     clear_1 2B3A            eepromWrite@data 0021  
         __end_of_currtime FE3D           ___awdiv@quotient 000D            ___awmod@divisor 0023  
          ___awmod@counter 0025                  ??_lcdInst 0023                     _printf 0EF8  
                ??_handler 000F                  ??_readADC 0021                  ??_initLCD 0024  
                ??_isdigit 0021               __mediumconst FE12                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8              ?_keyinterrupt 0001  
         __end_of_updateS1 18AC           __end_of_updateS2 25C4           __end_of_updateS3 1F9A  
               __accesstop 0080    __end_of__initialization 2B40               addRun@sodaNT 0035  
             addRun@soupNL 0039              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_putch 2C6C                  ?i2___wmul 0001         __size_of_lcdNibble 0056  
        eepromRead@address 0023             ??_keyinterrupt 0021             i2updateS1@mode 0001  
           i2updateS3@mode 0001                    ??_putch 0023                 addRun@date 002B  
      __size_ofi2_updateS1 02B0        __size_ofi2_updateS3 01F4                 __pbssBANK0 00AF  
               addRun@mins 002F                 addRun@secs 0031                 addRun@year 0027  
                  PWM2@dir 0023                    ?_addRun 0025                    ?___wmul 0021  
                  _CCP1CON 000FBD                    _CCP2CON 000FBA                    ?_printf 002D  
               _labelState 00BA                 ??i2___wmul 0005                 _eepromRead 2B00  
        displayLog@currRun 008F   __size_of_calibrateWheels 0188               _handler$1823 001F  
       __size_of_startTMR1 0010                 _displayLog 1280                    _PWM1off 2C8C  
                  _PWM2off 2C82                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                  ?_keycheck 0001          __end_of_lcdNibble 29A4  
                  __Hparam 0000                    __Lparam 0000            __size_of_addRun 016C  
                  ___awdiv 25C4                  ?_updateS1 0021                  ?_updateS2 0001  
                ?_updateS3 0021                    ___awmod 27BA                    ___lldiv 2648  
          __size_of___wmul 0026                    ___lwdiv 29A4                    ___lwmod 2A86  
                _CMCONbits 000FB4                 _homescreen 2892                    __pcinit 2B28  
                  __ramtop 1000                 _initialize 26CA               ?i2_startTMR1 0001  
                  _lcdInst 2C6C                    _handler 0008                    __ptext0 0012  
                  __ptext1 282A                    __ptext2 2C78                    __ptext3 2C96  
                  __ptext4 2C9E                    __ptext5 2B4E                    __ptext6 2C2E  
                  __ptext7 2C02                    __ptext8 26CA                    __ptext9 2A40  
          __size_of_printf 0388                  _T0CONbits 000FD5                    _readADC 2BC0  
                  _initLCD 2A40          __end_of_hexpowers FE36                    _dpowers FE24  
                  _isdigit 2BE4           ___awmod@dividend 0021                    _seconds 00BC  
                  _sodaCnt 00B6   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _soupCnt 00B8  
           main@prevSodaIR 00A9             __pintcode_body 1B5C       end_of_initialization 2B40  
           main@prevSoupIR 00AB                 ??_keycheck 0021              __Lmediumconst FE12  
                  int_func 1B5C        i2___wmul@multiplier 0001  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0025            ___lldiv@counter 002D  
     __end_of_keyinterrupt 2C18                    printf@c 0089                    printf@f 002D  
         I2C_Master_Init@c 002E           I2C_Master_Read@a 0022                    postdec2 000FDD  
        __end_of_startTMR1 2C50                    postinc0 000FEE                    postinc2 000FDE  
             ??i2_updateS1 0003               ??i2_updateS3 0003                 ??_updateS1 0023  
               ??_updateS2 0003                 ??_updateS3 0023                  _PORTBbits 000F81  
              ?_eepromRead 0001              addRun@currRun 003B                 _updateTime 282A  
              ?_displayLog 0039         __end_ofi2_updateS1 1B5C         __end_ofi2_updateS3 218E  
        ??_calibrateWheels 0024                _CCP1CONbits 000FBD              ??_eepromWrite 0022  
              printf@width 0087                _CCP2CONbits 000FBA                 main@sodaNT 00A3  
               main@soupNL 009F                ?_homescreen 0001             __end_of_addRun 2482  
           __end_of___wmul 2B9A                ?_initialize 0001           i2___wmul@product 0005  
           __end_of_printf 1280        start_initialization 2B28                updateTime@j 0024  
        __size_ofi2___wmul 0026          ??_I2C_Master_Init 0032          ??_I2C_Master_Read 0022  
        ??_I2C_Master_Wait 0021          ??_I2C_Master_Stop 0022           __CFG_OSC$INTIO67 000000  
      __size_of_eepromRead 0028                   ??_addRun 0080        __end_of_eepromWrite 2B00  
                 ??___wmul 0025        __size_of_displayLog 037C           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 0035                addRun@hours 002D                addRun@sodaT 0033  
              addRun@month 0029                addRun@soupL 0037       __size_ofi2_startTMR1 0010  
              __pbssCOMRAM 003D              __pcstackBANK0 0080                ?_updateTime 0001  
             _isdigit$1453 0022                   ?_PWM1off 0001                   ?_PWM2off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0016        __size_of_initialize 0078  
                addRun@dur 0025           _I2C_Master_Start 2C9E           _I2C_Master_Write 2C78  
        __size_of_keycheck 0016           ___lwdiv@dividend 0021          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008              __pmediumconst FE12                  _lcdNibble 294E  
                 ?___awdiv 0007                   ?___awmod 0021                   ?___lldiv 0021  
                 PWM1@duty 0021                   PWM2@duty 0021                   ?___lwdiv 0021  
                 ?___lwmod 0028          __size_of_updateS1 02B0          __size_of_updateS2 0142  
        __size_of_updateS3 01F4                   ?_lcdInst 0001                   ?_handler 0001  
                 ?_readADC 0001                   ?_initLCD 0001                   ?_isdigit 0001  
             _keyinterrupt 2C02                  _hexpowers FE2E           ___lwdiv@quotient 0026  
           __size_of_putch 000C         eepromWrite@address 0024        calibrateWheels@prev 0024  
           ___wmul@product 0025                   _LATAbits 000F89                   _LATBbits 000F8A  
                 _LATCbits 000F8B                   _LATDbits 000F8C                   _LATEbits 000F8D  
              _eepromWrite 2AC8                  _sodaAlign 0051                   i2u504_40 18EA  
                 i2u514_40 1986                   i2u451_40 24CA                   _PIR2bits 000FA1  
                 i2u461_40 2556                   i2u526_40 1A4C                   i2u545_40 1FE2  
                 i2u555_40 2070                   i2u820_47 18F8                   i2u565_40 2104  
                 i2u821_47 1994                  _sodaSteps 0055                   i2u822_47 1A14  
                 i2u823_47 2488                   i2u818_47 1FA0                   i2u819_47 18B2  
         __CFG_WDTPS$32768 000000        __size_of_updateTime 0068                 ?_lcdNibble 0001  
                _startTMR1 2C40                 _ADCON0bits 000FC2          ___wmul@multiplier 0021  
                _soupAlign 004F                   i2___wmul 2B9A              lcdNibble@data 0022  
             ??_eepromRead 0021                 printf@flag 0086              lcdNibble@temp 0021  
                _soupSteps 0057                 printf@prec 0083                  main@sodaT 00A1  
          _calibrateWheels 218E                  main@soupL 009D           main@prevSodaLoad 009B  
             ??_displayLog 008A        I2C_Master_Read@temp 0023           __size_of_PWM1off 000A  
         __size_of_PWM2off 000A           main@prevSoupLoad 0099                 _EECON1bits 000FA6  
                 __Hrparam 0000                   __Lrparam 0000         __end_of_eepromRead 2B28  
       __CFG_BOREN$SBORDIS 000000               ??_homescreen 0039           __size_of___awdiv 0084  
         __size_of___awmod 0070         __end_of_displayLog 15FC      i2___wmul@multiplicand 0003  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0022               ??_initialize 0036                 ?_startTMR1 0001  
         __size_of_lcdInst 000C           __size_of_handler 1D9E            _I2C_Master_Init 28F4  
         __size_of_readADC 0024            _I2C_Master_Read 2B4E           __size_of_initLCD 0046  
          _I2C_Master_Wait 2C2E            _I2C_Master_Stop 2C96           __size_of_isdigit 001E  
          ___lwdiv@divisor 0023            ___lwdiv@counter 0025                   __ptext10 28F4  
                 __ptext11 2648                   __ptext20 2C6C                   __ptext12 2892  
                 __ptext21 294E                   __ptext13 1280                   __ptext30 2B00  
                 __ptext22 2C18                   __ptext14 0EF8                   __ptext31 27BA  
                 __ptext23 218E                   __ptext15 2C60                   __ptext40 2B9A  
                 __ptext32 2C82                   __ptext24 1DA6                   __ptext16 2BE4  
                 __ptext41 2482                   __ptext33 2742                   __ptext25 15FC  
                 __ptext17 2B74                   __ptext42 25C4                   __ptext34 2C8C  
                 __ptext26 2C40                   __ptext18 2A86                   __ptext35 29F6  
                 __ptext27 2BC0                   __ptext19 29A4                   __ptext28 2316  
                 __ptext37 1F9A                   __ptext29 2AC8                   __ptext38 18AC  
                 __ptext39 2C50              __size_of_PWM1 004A              __size_of_PWM2 0078  
       __end_of_homescreen 28F4                   _keycheck 2C18                   _tabState 0053  
            __size_of_main 0EE6                   _currtime FE36                   _keypress 00C2  
       __end_of_initialize 2742                ??_lcdNibble 0021                   int$flags 005F  
                 _updateS1 15FC                   _updateS2 2482                   _updateS3 1DA6  
                printf@idx 0080                  printf@val 0084    __end_of_calibrateWheels 2316  
                putch@data 0023   __end_of_I2C_Master_Start 2CA6                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write 2C82                 _INTCONbits 000FF2               ??_updateTime 0024  
                 isdigit@c 0023                   intlevel2 0000           ___lwmod@dividend 0028  
         ___lldiv@dividend 0021                   printf@ap 0081         __end_of_updateTime 2892  
  __end_of_I2C_Master_Init 294E    __end_of_I2C_Master_Read 2B74    __end_of_I2C_Master_Wait 2C40  
  __end_of_I2C_Master_Stop 2C9E                lcdInst@data 0023              ??i2_startTMR1 0001  
              ??_startTMR1 0021           ___lldiv@quotient 0029          I2C_Master_Write@d 0022  
          ___lwmod@divisor 002A            ___lwmod@counter 002C               ?_eepromWrite 0021  
