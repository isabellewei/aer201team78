

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 13 22:52:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	text36,global,reloc=2,class=CODE,delta=1
    46                           	psect	text37,global,reloc=2,class=CODE,delta=1
    47                           	psect	text38,global,reloc=2,class=CODE,delta=1
    48                           	psect	text39,global,reloc=2,class=CODE,delta=1
    49                           	psect	text40,global,reloc=2,class=CODE,delta=1
    50                           	psect	text41,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53  0000                     
    54                           ; Version 1.41
    55                           ; Generated 25/01/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	mediumconst
    90  00FE60                     __pmediumconst:
    91                           	opt stack 0
    92  00FE60  00                 	db	0
    93  00FE61                     _keys:
    94                           	opt stack 0
    95  00FE61  31                 	db	49
    96  00FE62  32                 	db	50
    97  00FE63  33                 	db	51
    98  00FE64  41                 	db	65
    99  00FE65  34                 	db	52
   100  00FE66  35                 	db	53
   101  00FE67  36                 	db	54
   102  00FE68  42                 	db	66
   103  00FE69  37                 	db	55
   104  00FE6A  38                 	db	56
   105  00FE6B  39                 	db	57
   106  00FE6C  43                 	db	67
   107  00FE6D  2A                 	db	42
   108  00FE6E  30                 	db	48
   109  00FE6F  23                 	db	35
   110  00FE70  44                 	db	68
   111  00FE71  00                 	db	0
   112  00FE72                     __end_of_keys:
   113                           	opt stack 0
   114  00FE72                     _dpowers:
   115                           	opt stack 0
   116  00FE72  0001               	dw	1
   117  00FE74  000A               	dw	10
   118  00FE76  0064               	dw	100
   119  00FE78  03E8               	dw	1000
   120  00FE7A  2710               	dw	10000
   121  00FE7C                     __end_of_dpowers:
   122                           	opt stack 0
   123  00FE7C                     _hexpowers:
   124                           	opt stack 0
   125  00FE7C  0001               	dw	1
   126  00FE7E  0010               	dw	16
   127  00FE80  0100               	dw	256
   128  00FE82  1000               	dw	4096
   129  00FE84                     __end_of_hexpowers:
   130                           	opt stack 0
   131  00FE84                     _currtime:
   132                           	opt stack 0
   133  00FE84  30                 	db	48
   134  00FE85  26                 	db	38
   135  00FE86  13                 	db	19
   136  00FE87  04                 	db	4
   137  00FE88  01                 	db	1
   138  00FE89  03                 	db	3
   139  00FE8A  17                 	db	23
   140  00FE8B                     __end_of_currtime:
   141                           	opt stack 0
   142  0000                     _ADRES	set	4035
   143  0000                     _PIR2bits	set	4001
   144  0000                     _EECON2	set	4007
   145  0000                     _EEDATA	set	4008
   146  0000                     _EECON1bits	set	4006
   147  0000                     _EEADR	set	4009
   148  0000                     _EEADRH	set	4010
   149  0000                     _LATCbits	set	3979
   150  0000                     _LATBbits	set	3978
   151  0000                     _LATAbits	set	3977
   152  0000                     _LATEbits	set	3981
   153  0000                     _TMR0L	set	4054
   154  0000                     _CCP2CONbits	set	4026
   155  0000                     _CCP1CONbits	set	4029
   156  0000                     _SSPBUF	set	4041
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPCON2	set	4037
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPSTAT	set	4039
   161  0000                     _LATDbits	set	3980
   162  0000                     _ADRESL	set	4035
   163  0000                     _ADRESH	set	4036
   164  0000                     _T0CON	set	4053
   165  0000                     _CMCONbits	set	4020
   166  0000                     _CVRCON	set	4021
   167  0000                     _ADCON1	set	4033
   168  0000                     _LATE	set	3981
   169  0000                     _LATD	set	3980
   170  0000                     _LATC	set	3979
   171  0000                     _LATB	set	3978
   172  0000                     _LATA	set	3977
   173  0000                     _T2CON	set	4042
   174  0000                     _CCPR2L	set	4027
   175  0000                     _CCP2CON	set	4026
   176  0000                     _CCPR1L	set	4030
   177  0000                     _CCP1CON	set	4029
   178  0000                     _PR2	set	4043
   179  0000                     _TRISE	set	3990
   180  0000                     _TRISD	set	3989
   181  0000                     _TRISC	set	3988
   182  0000                     _TRISB	set	3987
   183  0000                     _TRISA	set	3986
   184  0000                     _OSCTUNEbits	set	3995
   185  0000                     _OSCCON	set	4051
   186  0000                     _PORTB	set	3969
   187  0000                     _PORTBbits	set	3969
   188  0000                     _ADCON0bits	set	4034
   189  0000                     _ADCON0	set	4034
   190  0000                     _ACKEN	set	32300
   191  0000                     _ACKDT	set	32301
   192  0000                     _RCEN	set	32299
   193  0000                     _PEN	set	32298
   194  0000                     _RSEN	set	32297
   195  0000                     _SEN	set	32296
   196  0000                     _TRISC4	set	31908
   197  0000                     _TRISC3	set	31907
   198  0000                     _ADFM	set	32263
   199  0000                     _nRBPU	set	32655
   200  00FE8B                     STR_26:
   201  00FE8B  46                 	db	70	;'F'
   202  00FE8C  69                 	db	105	;'i'
   203  00FE8D  6E                 	db	110	;'n'
   204  00FE8E  69                 	db	105	;'i'
   205  00FE8F  73                 	db	115	;'s'
   206  00FE90  68                 	db	104	;'h'
   207  00FE91  65                 	db	101	;'e'
   208  00FE92  64                 	db	100	;'d'
   209  00FE93  20                 	db	32
   210  00FE94  73                 	db	115	;'s'
   211  00FE95  6F                 	db	111	;'o'
   212  00FE96  72                 	db	114	;'r'
   213  00FE97  74                 	db	116	;'t'
   214  00FE98  69                 	db	105	;'i'
   215  00FE99  6E                 	db	110	;'n'
   216  00FE9A  67                 	db	103	;'g'
   217  00FE9B  21                 	db	33
   218  00FE9C  20                 	db	32
   219  00FE9D  00                 	db	0
   220  00FE9E                     STR_37:
   221  00FE9E  30                 	db	48	;'0'
   222  00FE9F  31                 	db	49	;'1'
   223  00FEA0  32                 	db	50	;'2'
   224  00FEA1  33                 	db	51	;'3'
   225  00FEA2  34                 	db	52	;'4'
   226  00FEA3  35                 	db	53	;'5'
   227  00FEA4  36                 	db	54	;'6'
   228  00FEA5  37                 	db	55	;'7'
   229  00FEA6  38                 	db	56	;'8'
   230  00FEA7  39                 	db	57	;'9'
   231  00FEA8  61                 	db	97	;'a'
   232  00FEA9  62                 	db	98	;'b'
   233  00FEAA  63                 	db	99	;'c'
   234  00FEAB  64                 	db	100	;'d'
   235  00FEAC  65                 	db	101	;'e'
   236  00FEAD  66                 	db	102	;'f'
   237  00FEAE  00                 	db	0
   238  00FEAF                     STR_27:
   239  00FEAF  25                 	db	37
   240  00FEB0  30                 	db	48	;'0'
   241  00FEB1  32                 	db	50	;'2'
   242  00FEB2  78                 	db	120	;'x'
   243  00FEB3  2F                 	db	47
   244  00FEB4  25                 	db	37
   245  00FEB5  30                 	db	48	;'0'
   246  00FEB6  32                 	db	50	;'2'
   247  00FEB7  78                 	db	120	;'x'
   248  00FEB8  2F                 	db	47
   249  00FEB9  25                 	db	37
   250  00FEBA  30                 	db	48	;'0'
   251  00FEBB  32                 	db	50	;'2'
   252  00FEBC  78                 	db	120	;'x'
   253  00FEBD  20                 	db	32
   254  00FEBE  00                 	db	0
   255  00FEBF                     STR_34:
   256  00FEBF  23                 	db	35
   257  00FEC0  20                 	db	32
   258  00FEC1  73                 	db	115	;'s'
   259  00FEC2  6F                 	db	111	;'o'
   260  00FEC3  64                 	db	100	;'d'
   261  00FEC4  61                 	db	97	;'a'
   262  00FEC5  20                 	db	32
   263  00FEC6  63                 	db	99	;'c'
   264  00FEC7  61                 	db	97	;'a'
   265  00FEC8  6E                 	db	110	;'n'
   266  00FEC9  73                 	db	115	;'s'
   267  00FECA  3A                 	db	58	;':'
   268  00FECB  20                 	db	32
   269  00FECC  25                 	db	37
   270  00FECD  64                 	db	100	;'d'
   271  00FECE  00                 	db	0
   272  00FECF                     STR_31:
   273  00FECF  52                 	db	82	;'R'
   274  00FED0  75                 	db	117	;'u'
   275  00FED1  6E                 	db	110	;'n'
   276  00FED2  23                 	db	35
   277  00FED3  31                 	db	49	;'1'
   278  00FED4  20                 	db	32
   279  00FED5  20                 	db	32
   280  00FED6  20                 	db	32
   281  00FED7  20                 	db	32
   282  00FED8  41                 	db	65	;'A'
   283  00FED9  3A                 	db	58	;':'
   284  00FEDA  4E                 	db	78	;'N'
   285  00FEDB  65                 	db	101	;'e'
   286  00FEDC  78                 	db	120	;'x'
   287  00FEDD  74                 	db	116	;'t'
   288  00FEDE  00                 	db	0
   289  00FEDF                     STR_1:
   290  00FEDF  53                 	db	83	;'S'
   291  00FEE0  6F                 	db	111	;'o'
   292  00FEE1  72                 	db	114	;'r'
   293  00FEE2  74                 	db	116	;'t'
   294  00FEE3  69                 	db	105	;'i'
   295  00FEE4  6E                 	db	110	;'n'
   296  00FEE5  67                 	db	103	;'g'
   297  00FEE6  20                 	db	32
   298  00FEE7  63                 	db	99	;'c'
   299  00FEE8  61                 	db	97	;'a'
   300  00FEE9  6E                 	db	110	;'n'
   301  00FEEA  73                 	db	115	;'s'
   302  00FEEB  2E                 	db	46
   303  00FEEC  2E                 	db	46
   304  00FEED  2E                 	db	46
   305  00FEEE  00                 	db	0
   306  00FEEF                     STR_2:
   307  00FEEF  41                 	db	65	;'A'
   308  00FEF0  6E                 	db	110	;'n'
   309  00FEF1  79                 	db	121	;'y'
   310  00FEF2  20                 	db	32
   311  00FEF3  6B                 	db	107	;'k'
   312  00FEF4  65                 	db	101	;'e'
   313  00FEF5  79                 	db	121	;'y'
   314  00FEF6  20                 	db	32
   315  00FEF7  74                 	db	116	;'t'
   316  00FEF8  6F                 	db	111	;'o'
   317  00FEF9  20                 	db	32
   318  00FEFA  73                 	db	115	;'s'
   319  00FEFB  74                 	db	116	;'t'
   320  00FEFC  6F                 	db	111	;'o'
   321  00FEFD  70                 	db	112	;'p'
   322  00FEFE  00                 	db	0
   323  00FEFF                     STR_36:
   324  00FEFF  23                 	db	35
   325  00FF00  20                 	db	32
   326  00FF01  73                 	db	115	;'s'
   327  00FF02  6F                 	db	111	;'o'
   328  00FF03  75                 	db	117	;'u'
   329  00FF04  70                 	db	112	;'p'
   330  00FF05  20                 	db	32
   331  00FF06  63                 	db	99	;'c'
   332  00FF07  61                 	db	97	;'a'
   333  00FF08  6E                 	db	110	;'n'
   334  00FF09  73                 	db	115	;'s'
   335  00FF0A  3A                 	db	58	;':'
   336  00FF0B  20                 	db	32
   337  00FF0C  34                 	db	52	;'4'
   338  00FF0D  00                 	db	0
   339  00FF0E                     STR_29:
   340  00FF0E  25                 	db	37
   341  00FF0F  30                 	db	48	;'0'
   342  00FF10  32                 	db	50	;'2'
   343  00FF11  78                 	db	120	;'x'
   344  00FF12  3A                 	db	58	;':'
   345  00FF13  25                 	db	37
   346  00FF14  30                 	db	48	;'0'
   347  00FF15  32                 	db	50	;'2'
   348  00FF16  78                 	db	120	;'x'
   349  00FF17  3A                 	db	58	;':'
   350  00FF18  25                 	db	37
   351  00FF19  30                 	db	48	;'0'
   352  00FF1A  32                 	db	50	;'2'
   353  00FF1B  78                 	db	120	;'x'
   354  00FF1C  00                 	db	0
   355  00FF1D                     STR_32:
   356  00FF1D  23                 	db	35
   357  00FF1E  20                 	db	32
   358  00FF1F  6F                 	db	111	;'o'
   359  00FF20  66                 	db	102	;'f'
   360  00FF21  20                 	db	32
   361  00FF22  63                 	db	99	;'c'
   362  00FF23  61                 	db	97	;'a'
   363  00FF24  6E                 	db	110	;'n'
   364  00FF25  73                 	db	115	;'s'
   365  00FF26  3A                 	db	58	;':'
   366  00FF27  20                 	db	32
   367  00FF28  25                 	db	37
   368  00FF29  64                 	db	100	;'d'
   369  00FF2A  00                 	db	0
   370  00FF2B                     STR_13:
   371  00FF2B  74                 	db	116	;'t'
   372  00FF2C  65                 	db	101	;'e'
   373  00FF2D  73                 	db	115	;'s'
   374  00FF2E  74                 	db	116	;'t'
   375  00FF2F  69                 	db	105	;'i'
   376  00FF30  6E                 	db	110	;'n'
   377  00FF31  67                 	db	103	;'g'
   378  00FF32  20                 	db	32
   379  00FF33  6C                 	db	108	;'l'
   380  00FF34  61                 	db	97	;'a'
   381  00FF35  62                 	db	98	;'b'
   382  00FF36  65                 	db	101	;'e'
   383  00FF37  6C                 	db	108	;'l'
   384  00FF38  00                 	db	0
   385  00FF39                     STR_15:
   386  00FF39  73                 	db	115	;'s'
   387  00FF3A  6F                 	db	111	;'o'
   388  00FF3B  75                 	db	117	;'u'
   389  00FF3C  70                 	db	112	;'p'
   390  00FF3D  20                 	db	32
   391  00FF3E  63                 	db	99	;'c'
   392  00FF3F  61                 	db	97	;'a'
   393  00FF40  6E                 	db	110	;'n'
   394  00FF41  20                 	db	32
   395  00FF42  74                 	db	116	;'t'
   396  00FF43  65                 	db	101	;'e'
   397  00FF44  73                 	db	115	;'s'
   398  00FF45  74                 	db	116	;'t'
   399  00FF46  00                 	db	0
   400  00FF47                     STR_7:
   401  00FF47  74                 	db	116	;'t'
   402  00FF48  65                 	db	101	;'e'
   403  00FF49  73                 	db	115	;'s'
   404  00FF4A  74                 	db	116	;'t'
   405  00FF4B  69                 	db	105	;'i'
   406  00FF4C  6E                 	db	110	;'n'
   407  00FF4D  67                 	db	103	;'g'
   408  00FF4E  20                 	db	32
   409  00FF4F  50                 	db	80	;'P'
   410  00FF50  57                 	db	87	;'W'
   411  00FF51  4D                 	db	77	;'M'
   412  00FF52  31                 	db	49	;'1'
   413  00FF53  00                 	db	0
   414  00FF54                     STR_6:
   415  00FF54  74                 	db	116	;'t'
   416  00FF55  65                 	db	101	;'e'
   417  00FF56  73                 	db	115	;'s'
   418  00FF57  74                 	db	116	;'t'
   419  00FF58  69                 	db	105	;'i'
   420  00FF59  6E                 	db	110	;'n'
   421  00FF5A  67                 	db	103	;'g'
   422  00FF5B  20                 	db	32
   423  00FF5C  50                 	db	80	;'P'
   424  00FF5D  57                 	db	87	;'W'
   425  00FF5E  4D                 	db	77	;'M'
   426  00FF5F  32                 	db	50	;'2'
   427  00FF60  00                 	db	0
   428  00FF61                     STR_20:
   429  00FF61  72                 	db	114	;'r'
   430  00FF62  65                 	db	101	;'e'
   431  00FF63  74                 	db	116	;'t'
   432  00FF64  75                 	db	117	;'u'
   433  00FF65  72                 	db	114	;'r'
   434  00FF66  6E                 	db	110	;'n'
   435  00FF67  69                 	db	105	;'i'
   436  00FF68  6E                 	db	110	;'n'
   437  00FF69  67                 	db	103	;'g'
   438  00FF6A  20                 	db	32
   439  00FF6B  25                 	db	37
   440  00FF6C  64                 	db	100	;'d'
   441  00FF6D  00                 	db	0
   442  00FF6E                     STR_9:
   443  00FF6E  74                 	db	116	;'t'
   444  00FF6F  65                 	db	101	;'e'
   445  00FF70  73                 	db	115	;'s'
   446  00FF71  74                 	db	116	;'t'
   447  00FF72  69                 	db	105	;'i'
   448  00FF73  6E                 	db	110	;'n'
   449  00FF74  67                 	db	103	;'g'
   450  00FF75  20                 	db	32
   451  00FF76  49                 	db	73	;'I'
   452  00FF77  52                 	db	82	;'R'
   453  00FF78  31                 	db	49	;'1'
   454  00FF79  00                 	db	0
   455  00FF7A                     STR_11:
   456  00FF7A  74                 	db	116	;'t'
   457  00FF7B  65                 	db	101	;'e'
   458  00FF7C  73                 	db	115	;'s'
   459  00FF7D  74                 	db	116	;'t'
   460  00FF7E  69                 	db	105	;'i'
   461  00FF7F  6E                 	db	110	;'n'
   462  00FF80  67                 	db	103	;'g'
   463  00FF81  20                 	db	32
   464  00FF82  49                 	db	73	;'I'
   465  00FF83  52                 	db	82	;'R'
   466  00FF84  32                 	db	50	;'2'
   467  00FF85  00                 	db	0
   468  00FF86                     STR_4:
   469  00FF86  74                 	db	116	;'t'
   470  00FF87  65                 	db	101	;'e'
   471  00FF88  73                 	db	115	;'s'
   472  00FF89  74                 	db	116	;'t'
   473  00FF8A  69                 	db	105	;'i'
   474  00FF8B  6E                 	db	110	;'n'
   475  00FF8C  67                 	db	103	;'g'
   476  00FF8D  20                 	db	32
   477  00FF8E  53                 	db	83	;'S'
   478  00FF8F  20                 	db	32
   479  00FF90  62                 	db	98	;'b'
   480  00FF91  00                 	db	0
   481  00FF92                     STR_24:
   482  00FF92  66                 	db	102	;'f'
   483  00FF93  69                 	db	105	;'i'
   484  00FF94  6E                 	db	110	;'n'
   485  00FF95  69                 	db	105	;'i'
   486  00FF96  73                 	db	115	;'s'
   487  00FF97  68                 	db	104	;'h'
   488  00FF98  65                 	db	101	;'e'
   489  00FF99  64                 	db	100	;'d'
   490  00FF9A  20                 	db	32
   491  00FF9B  25                 	db	37
   492  00FF9C  64                 	db	100	;'d'
   493  00FF9D  00                 	db	0
   494  00FF9E                     STR_3:
   495  00FF9E  74                 	db	116	;'t'
   496  00FF9F  65                 	db	101	;'e'
   497  00FFA0  73                 	db	115	;'s'
   498  00FFA1  74                 	db	116	;'t'
   499  00FFA2  69                 	db	105	;'i'
   500  00FFA3  6E                 	db	110	;'n'
   501  00FFA4  67                 	db	103	;'g'
   502  00FFA5  20                 	db	32
   503  00FFA6  53                 	db	83	;'S'
   504  00FFA7  20                 	db	32
   505  00FFA8  66                 	db	102	;'f'
   506  00FFA9  00                 	db	0
   507  00FFAA                     STR_19:
   508  00FFAA  73                 	db	115	;'s'
   509  00FFAB  6F                 	db	111	;'o'
   510  00FFAC  72                 	db	114	;'r'
   511  00FFAD  74                 	db	116	;'t'
   512  00FFAE  69                 	db	105	;'i'
   513  00FFAF  6E                 	db	110	;'n'
   514  00FFB0  67                 	db	103	;'g'
   515  00FFB1  20                 	db	32
   516  00FFB2  25                 	db	37
   517  00FFB3  64                 	db	100	;'d'
   518  00FFB4  00                 	db	0
   519  00FFB5                     STR_17:
   520  00FFB5  74                 	db	116	;'t'
   521  00FFB6  65                 	db	101	;'e'
   522  00FFB7  73                 	db	115	;'s'
   523  00FFB8  74                 	db	116	;'t'
   524  00FFB9  69                 	db	105	;'i'
   525  00FFBA  6E                 	db	110	;'n'
   526  00FFBB  67                 	db	103	;'g'
   527  00FFBC  20                 	db	32
   528  00FFBD  25                 	db	37
   529  00FFBE  64                 	db	100	;'d'
   530  00FFBF  00                 	db	0
   531  00FFC0                     STR_8:
   532  00FFC0  74                 	db	116	;'t'
   533  00FFC1  69                 	db	105	;'i'
   534  00FFC2  6D                 	db	109	;'m'
   535  00FFC3  65                 	db	101	;'e'
   536  00FFC4  20                 	db	32
   537  00FFC5  25                 	db	37
   538  00FFC6  78                 	db	120	;'x'
   539  00FFC7  20                 	db	32
   540  00FFC8  25                 	db	37
   541  00FFC9  78                 	db	120	;'x'
   542  00FFCA  00                 	db	0
   543  00FFCB                     STR_16:
   544  00FFCB  76                 	db	118	;'v'
   545  00FFCC  61                 	db	97	;'a'
   546  00FFCD  6C                 	db	108	;'l'
   547  00FFCE  75                 	db	117	;'u'
   548  00FFCF  65                 	db	101	;'e'
   549  00FFD0  3A                 	db	58	;':'
   550  00FFD1  20                 	db	32
   551  00FFD2  25                 	db	37
   552  00FFD3  78                 	db	120	;'x'
   553  00FFD4  00                 	db	0
   554  00FFD5                     STR_18:
   555  00FFD5  6E                 	db	110	;'n'
   556  00FFD6  6F                 	db	111	;'o'
   557  00FFD7  20                 	db	32
   558  00FFD8  6C                 	db	108	;'l'
   559  00FFD9  61                 	db	97	;'a'
   560  00FFDA  62                 	db	98	;'b'
   561  00FFDB  65                 	db	101	;'e'
   562  00FFDC  6C                 	db	108	;'l'
   563  00FFDD  00                 	db	0
   564  00FFDE                     STR_30:
   565  00FFDE  20                 	db	32
   566  00FFDF  32                 	db	50	;'2'
   567  00FFE0  3A                 	db	58	;':'
   568  00FFE1  4C                 	db	76	;'L'
   569  00FFE2  6F                 	db	111	;'o'
   570  00FFE3  67                 	db	103	;'g'
   571  00FFE4  73                 	db	115	;'s'
   572  00FFE5  00                 	db	0
   573  00FFE6                     STR_28:
   574  00FFE6  33                 	db	51	;'3'
   575  00FFE7  3A                 	db	58	;':'
   576  00FFE8  53                 	db	83	;'S'
   577  00FFE9  74                 	db	116	;'t'
   578  00FFEA  61                 	db	97	;'a'
   579  00FFEB  72                 	db	114	;'r'
   580  00FFEC  74                 	db	116	;'t'
   581  00FFED  00                 	db	0
   582  00FFEE                     STR_25:
   583  00FFEE  73                 	db	115	;'s'
   584  00FFEF  6F                 	db	111	;'o'
   585  00FFF0  72                 	db	114	;'r'
   586  00FFF1  74                 	db	116	;'t'
   587  00FFF2  69                 	db	105	;'i'
   588  00FFF3  6E                 	db	110	;'n'
   589  00FFF4  67                 	db	103	;'g'
   590  00FFF5  00                 	db	0
   591  00FFF6                     STR_14:
   592  00FFF6  25                 	db	37
   593  00FFF7  78                 	db	120	;'x'
   594  00FFF8  20                 	db	32
   595  00FFF9  20                 	db	32
   596  00FFFA  20                 	db	32
   597  00FFFB  25                 	db	37
   598  00FFFC  78                 	db	120	;'x'
   599  00FFFD  00                 	db	0
   600  0000                     
   601                           ; #config settings
   602  00FFFE  00                 	db	0	; dummy byte at the end
   603  0000                     
   604                           	psect	cinit
   605  00E7B4                     __pcinit:
   606                           	opt stack 0
   607  00E7B4                     start_initialization:
   608                           	opt stack 0
   609  00E7B4                     __initialization:
   610                           	opt stack 0
   611                           
   612                           ; Clear objects allocated to COMRAM (14 bytes)
   613  00E7B4  EE00  F04C         	lfsr	0,__pbssCOMRAM
   614  00E7B8  0E0E               	movlw	14
   615  00E7BA                     clear_0:
   616  00E7BA  6AEE               	clrf	postinc0,c
   617  00E7BC  06E8               	decf	wreg,f,c
   618  00E7BE  E1FD               	bnz	clear_0
   619  00E7C0                     end_of_initialization:
   620                           	opt stack 0
   621  00E7C0                     __end_of__initialization:
   622                           	opt stack 0
   623  00E7C0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   624  00E7C2  6EF8               	movwf	tblptru,c
   625  00E7C4  0100               	movlb	0
   626  00E7C6  EFD2  F079         	goto	_main	;jump to C main() function
   627                           tblptru	equ	0xFF8
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           
   631                           	psect	bssCOMRAM
   632  00004C                     __pbssCOMRAM:
   633                           	opt stack 0
   634  00004C                     _time:
   635                           	opt stack 0
   636  00004C                     	ds	7
   637  000053                     _curr:
   638                           	opt stack 0
   639  000053                     	ds	2
   640  000055                     _prev:
   641                           	opt stack 0
   642  000055                     	ds	2
   643  000057                     _s:
   644                           	opt stack 0
   645  000057                     	ds	2
   646  000059                     _keypress:
   647                           	opt stack 0
   648  000059                     	ds	1
   649                           tblptru	equ	0xFF8
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           
   653                           	psect	cstackCOMRAM
   654  000001                     __pcstackCOMRAM:
   655                           	opt stack 0
   656  000001                     ??_eepromRead:
   657  000001                     ??_isdigit:
   658  000001                     ??_readADC:
   659  000001                     ??_I2C_Master_Wait:
   660  000001                     ?___wmul:
   661                           	opt stack 0
   662  000001                     ?___lwdiv:
   663                           	opt stack 0
   664  000001                     ?___lldiv:
   665                           	opt stack 0
   666  000001                     lcdNibble@temp:
   667                           	opt stack 0
   668  000001                     PWM1@duty:
   669                           	opt stack 0
   670  000001                     PWM2@duty:
   671                           	opt stack 0
   672  000001                     ___wmul@multiplier:
   673                           	opt stack 0
   674  000001                     ___lwdiv@dividend:
   675                           	opt stack 0
   676  000001                     ___lldiv@dividend:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x0
   680  000001                     	ds	1
   681  000002                     readADC@channel:
   682                           	opt stack 0
   683  000002                     lcdNibble@data:
   684                           	opt stack 0
   685  000002                     I2C_Master_Read@a:
   686                           	opt stack 0
   687  000002                     _isdigit$1191:
   688                           	opt stack 0
   689  000002                     I2C_Master_Write@d:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x1
   693  000002                     	ds	1
   694  000003                     ??_PWM1:
   695  000003                     ??_PWM2:
   696  000003                     lcdInst@data:
   697                           	opt stack 0
   698  000003                     putch@data:
   699                           	opt stack 0
   700  000003                     I2C_Master_Read@temp:
   701                           	opt stack 0
   702  000003                     eepromRead@address:
   703                           	opt stack 0
   704  000003                     isdigit@c:
   705                           	opt stack 0
   706  000003                     ___wmul@multiplicand:
   707                           	opt stack 0
   708  000003                     ___lwdiv@divisor:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2
   712  000003                     	ds	1
   713  000004                     ??_initLCD:
   714  000004                     updateTime@j:
   715                           	opt stack 0
   716  000004                     eepromWrite@data:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x3
   720  000004                     	ds	1
   721  000005                     ??_eepromWrite:
   722  000005                     ___wmul@product:
   723                           	opt stack 0
   724  000005                     ___lwdiv@quotient:
   725                           	opt stack 0
   726  000005                     ___lldiv@divisor:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x4
   730  000005                     	ds	2
   731  000007                     ?_timePassed:
   732                           	opt stack 0
   733  000007                     eepromWrite@address:
   734                           	opt stack 0
   735  000007                     ___lwdiv@counter:
   736                           	opt stack 0
   737  000007                     timePassed@start:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x6
   741  000007                     	ds	1
   742  000008                     ?___lwmod:
   743                           	opt stack 0
   744  000008                     ___lwmod@dividend:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x7
   748  000008                     	ds	1
   749  000009                     ??_timePassed:
   750  000009                     ___lldiv@quotient:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x8
   754  000009                     	ds	1
   755  00000A                     ___lwmod@divisor:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x9
   759  00000A                     	ds	2
   760  00000C                     ___lwmod@counter:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0xB
   764  00000C                     	ds	1
   765  00000D                     ___lldiv@counter:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0xC
   769  00000D                     	ds	1
   770  00000E                     I2C_Master_Init@c:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0xD
   774  00000E                     	ds	4
   775  000012                     ??_I2C_Master_Init:
   776  000012                     ?_printf:
   777                           	opt stack 0
   778  000012                     updateEEPROM@time:
   779                           	opt stack 0
   780  000012                     printf@f:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x11
   784  000012                     	ds	2
   785  000014                     
   786                           ; 1 bytes @ 0x13
   787  000014                     	ds	2
   788  000016                     
   789                           ; 1 bytes @ 0x15
   790  000016                     	ds	4
   791  00001A                     ??_printf:
   792                           
   793                           ; 1 bytes @ 0x19
   794  00001A                     	ds	4
   795  00001E                     printf@idx:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x1D
   799  00001E                     	ds	1
   800  00001F                     printf@ap:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x1E
   804  00001F                     	ds	2
   805  000021                     printf@prec:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x20
   809  000021                     	ds	1
   810  000022                     printf@val:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x21
   814  000022                     	ds	2
   815  000024                     printf@flag:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x23
   819  000024                     	ds	1
   820  000025                     printf@width:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x24
   824  000025                     	ds	2
   825  000027                     printf@c:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x26
   829  000027                     	ds	1
   830  000028                     ??_displayLogs:
   831                           
   832                           ; 1 bytes @ 0x27
   833  000028                     	ds	1
   834  000029                     ??_main:
   835                           
   836                           ; 1 bytes @ 0x28
   837  000029                     	ds	7
   838  000030                     main@prevUnblock:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x2F
   842  000030                     	ds	2
   843  000032                     main@prevSodaTime:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x31
   847  000032                     	ds	2
   848  000034                     main@sodaState:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x33
   852  000034                     	ds	2
   853  000036                     main@tabState:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x35
   857  000036                     	ds	2
   858  000038                     main@dc:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x37
   862  000038                     	ds	2
   863  00003A                     _main$1542:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x39
   867  00003A                     	ds	2
   868  00003C                     main@canCheck:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x3B
   872  00003C                     	ds	2
   873  00003E                     main@soupLoad:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x3D
   877  00003E                     	ds	2
   878  000040                     main@sodaLoad:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x3F
   882  000040                     	ds	2
   883  000042                     main@startTime:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x41
   887  000042                     	ds	2
   888  000044                     main@labelState:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x43
   892  000044                     	ds	2
   893  000046                     main@s:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x45
   897  000046                     	ds	2
   898  000048                     main@standby:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x47
   902  000048                     	ds	2
   903  00004A                     main@prevSoupTime:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x49
   907  00004A                     	ds	2
   908                           tblptru	equ	0xFF8
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           
   912 ;;
   913 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   914 ;;
   915 ;; *************** function _main *****************
   916 ;; Defined at:
   917 ;;		line 96 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  prevSoupTime    2   73[COMRAM] int 
   922 ;;  standby         2   71[COMRAM] int 
   923 ;;  s               2   69[COMRAM] int 
   924 ;;  labelState      2   67[COMRAM] int 
   925 ;;  startTime       2   65[COMRAM] int 
   926 ;;  sodaLoad        2   63[COMRAM] int 
   927 ;;  soupLoad        2   61[COMRAM] int 
   928 ;;  canCheck        2   59[COMRAM] int 
   929 ;;  dc              2   55[COMRAM] int 
   930 ;;  tabState        2   53[COMRAM] int 
   931 ;;  sodaState       2   51[COMRAM] int 
   932 ;;  prevSodaTime    2   49[COMRAM] int 
   933 ;;  prevUnblock     2   47[COMRAM] int 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  2  145[None  ] int 
   936 ;; Registers used:
   937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;      Totals:        35       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   947 ;;Total ram usage:       35 bytes
   948 ;; Hardware stack levels required when called:    4
   949 ;; This function calls:
   950 ;;		_PWM1
   951 ;;		_PWM1off
   952 ;;		_PWM2
   953 ;;		_PWM2off
   954 ;;		_S1backward
   955 ;;		_S1forward
   956 ;;		_S1off
   957 ;;		_S2backward
   958 ;;		_S2forward
   959 ;;		_S2off
   960 ;;		_S3backward
   961 ;;		_S3forward
   962 ;;		_S3off
   963 ;;		___wmul
   964 ;;		_displayLogs
   965 ;;		_homescreen
   966 ;;		_initialize
   967 ;;		_keycheck
   968 ;;		_keyinterrupt
   969 ;;		_lcdInst
   970 ;;		_printf
   971 ;;		_readADC
   972 ;;		_timePassed
   973 ;;		_updateEEPROM
   974 ;;		_updateStepper
   975 ;;		_updateTime
   976 ;; This function is called by:
   977 ;;		Startup code after reset
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text0
   982  00F3A4                     __ptext0:
   983                           	opt stack 0
   984  00F3A4                     _main:
   985                           	opt stack 27
   986                           
   987                           ;main.c: 97: initialize();
   988                           
   989                           ;incstack = 0
   990  00F3A4  EC19  F077         	call	_initialize	;wreg free
   991                           
   992                           ;main.c: 98: int standby = 1;
   993  00F3A8  0E00               	movlw	0
   994  00F3AA  6E49               	movwf	main@standby+1,c
   995  00F3AC  0E01               	movlw	1
   996  00F3AE  6E48               	movwf	main@standby,c
   997                           
   998                           ;main.c: 99: int s = 0;
   999  00F3B0  0E00               	movlw	0
  1000  00F3B2  6E47               	movwf	main@s+1,c
  1001  00F3B4  0E00               	movlw	0
  1002  00F3B6  6E46               	movwf	main@s,c
  1003                           
  1004                           ;main.c: 100: int dc = 0;
  1005  00F3B8  0E00               	movlw	0
  1006  00F3BA  6E39               	movwf	main@dc+1,c
  1007  00F3BC  0E00               	movlw	0
  1008  00F3BE  6E38               	movwf	main@dc,c
  1009                           
  1010                           ;main.c: 101: int startTime;
  1011                           ;main.c: 102: int prevUnblock = 0;
  1012  00F3C0  0E00               	movlw	0
  1013  00F3C2  6E31               	movwf	main@prevUnblock+1,c
  1014  00F3C4  0E00               	movlw	0
  1015  00F3C6  6E30               	movwf	main@prevUnblock,c
  1016                           
  1017                           ;main.c: 103: int soupLoad = 1;
  1018  00F3C8  0E00               	movlw	0
  1019  00F3CA  6E3F               	movwf	main@soupLoad+1,c
  1020  00F3CC  0E01               	movlw	1
  1021  00F3CE  6E3E               	movwf	main@soupLoad,c
  1022                           
  1023                           ;main.c: 104: int sodaLoad = 1;
  1024  00F3D0  0E00               	movlw	0
  1025  00F3D2  6E41               	movwf	main@sodaLoad+1,c
  1026  00F3D4  0E01               	movlw	1
  1027  00F3D6  6E40               	movwf	main@sodaLoad,c
  1028                           
  1029                           ;main.c: 105: int canCheck;
  1030                           ;main.c: 106: int prevSodaTime = 0;
  1031  00F3D8  0E00               	movlw	0
  1032  00F3DA  6E33               	movwf	main@prevSodaTime+1,c
  1033  00F3DC  0E00               	movlw	0
  1034  00F3DE  6E32               	movwf	main@prevSodaTime,c
  1035                           
  1036                           ;main.c: 107: int prevSoupTime = 0;
  1037  00F3E0  0E00               	movlw	0
  1038  00F3E2  6E4B               	movwf	main@prevSoupTime+1,c
  1039  00F3E4  0E00               	movlw	0
  1040  00F3E6  6E4A               	movwf	main@prevSoupTime,c
  1041                           
  1042                           ;main.c: 108: int sodaState = 0;
  1043  00F3E8  0E00               	movlw	0
  1044  00F3EA  6E35               	movwf	main@sodaState+1,c
  1045  00F3EC  0E00               	movlw	0
  1046  00F3EE  6E34               	movwf	main@sodaState,c
  1047                           
  1048                           ;main.c: 109: int tabState = 0;
  1049  00F3F0  0E00               	movlw	0
  1050  00F3F2  6E37               	movwf	main@tabState+1,c
  1051  00F3F4  0E00               	movlw	0
  1052  00F3F6  6E36               	movwf	main@tabState,c
  1053                           
  1054                           ;main.c: 110: int labelState = 0;
  1055  00F3F8  0E00               	movlw	0
  1056  00F3FA  6E45               	movwf	main@labelState+1,c
  1057  00F3FC  0E00               	movlw	0
  1058  00F3FE  6E44               	movwf	main@labelState,c
  1059                           
  1060                           ;main.c: 112: int s = 1;
  1061  00F400  0E00               	movlw	0
  1062  00F402  6E47               	movwf	main@s+1,c
  1063  00F404  0E01               	movlw	1
  1064  00F406  6E46               	movwf	main@s,c
  1065                           
  1066                           ;main.c: 114: _delay((unsigned long)((10)*(32000000/4000.0)));
  1067  00F408  0E68               	movlw	104
  1068  00F40A  6E29               	movwf	??_main& (0+255),c
  1069  00F40C  0EE4               	movlw	228
  1070  00F40E                     u2417:
  1071  00F40E  2EE8               	decfsz	wreg,f,c
  1072  00F410  D7FE               	bra	u2417
  1073  00F412  2E29               	decfsz	??_main& (0+255),f,c
  1074  00F414  D7FC               	bra	u2417
  1075  00F416  D000               	nop2	
  1076  00F418                     l2826:
  1077                           
  1078                           ;main.c: 118: updateTime();
  1079  00F418  ECE6  F076         	call	_updateTime	;wreg free
  1080                           
  1081                           ;main.c: 119: updateStepper();
  1082  00F41C  ECF4  F073         	call	_updateStepper	;wreg free
  1083                           
  1084                           ;main.c: 120: readADC(2);
  1085  00F420  0E02               	movlw	2
  1086  00F422  EC03  F074         	call	_readADC
  1087                           
  1088                           ;main.c: 121: soupLoad = ADRESH;
  1089  00F426  CFC4 F03E          	movff	4036,main@soupLoad	;volatile
  1090  00F42A  6A3F               	clrf	main@soupLoad+1,c
  1091                           
  1092                           ;main.c: 122: readADC(5);
  1093  00F42C  0E05               	movlw	5
  1094  00F42E  EC03  F074         	call	_readADC
  1095                           
  1096                           ;main.c: 123: sodaLoad = ADRESH;
  1097  00F432  CFC4 F040          	movff	4036,main@sodaLoad	;volatile
  1098  00F436  6A41               	clrf	main@sodaLoad+1,c
  1099                           
  1100                           ;main.c: 125: if (standby == 1){
  1101  00F438  0448               	decf	main@standby,w,c
  1102  00F43A  1049               	iorwf	main@standby+1,w,c
  1103  00F43C  A4D8               	btfss	status,2,c
  1104  00F43E  D0DC               	goto	l2882
  1105                           
  1106                           ;main.c: 127: keypress = (0);
  1107  00F440  0E00               	movlw	0
  1108  00F442  6E59               	movwf	_keypress,c	;volatile
  1109                           
  1110                           ;main.c: 128: homescreen();
  1111  00F444  ECB5  F076         	call	_homescreen	;wreg free
  1112                           
  1113                           ;main.c: 129: keyinterrupt();
  1114  00F448  ECD0  F073         	call	_keyinterrupt	;wreg free
  1115                           
  1116                           ;main.c: 132: if(keypress == 2){
  1117  00F44C  0E02               	movlw	2
  1118  00F44E  1859               	xorwf	_keypress,w,c	;volatile
  1119  00F450  A4D8               	btfss	status,2,c
  1120  00F452  D075               	goto	l2868
  1121                           
  1122                           ;main.c: 133: standby = 0;
  1123  00F454  0E00               	movlw	0
  1124  00F456  6E49               	movwf	main@standby+1,c
  1125  00F458  0E00               	movlw	0
  1126  00F45A  6E48               	movwf	main@standby,c
  1127                           
  1128                           ;main.c: 134: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1129  00F45C  0E01               	movlw	1
  1130  00F45E  ECB1  F073         	call	_lcdInst
  1131  00F462  0E68               	movlw	104
  1132  00F464  6E29               	movwf	??_main& (0+255),c
  1133  00F466  0EE4               	movlw	228
  1134  00F468                     u2427:
  1135  00F468  2EE8               	decfsz	wreg,f,c
  1136  00F46A  D7FE               	bra	u2427
  1137  00F46C  2E29               	decfsz	??_main& (0+255),f,c
  1138  00F46E  D7FC               	bra	u2427
  1139  00F470  D000               	nop2	
  1140                           
  1141                           ;main.c: 135: printf("Sorting cans...");
  1142  00F472  0EDF               	movlw	low STR_1
  1143  00F474  6E12               	movwf	printf@f,c
  1144  00F476  0EFE               	movlw	high STR_1
  1145  00F478  6E13               	movwf	printf@f+1,c
  1146  00F47A  EC4C  F078         	call	_printf	;wreg free
  1147                           
  1148                           ;main.c: 136: lcdInst(0b11000000);;
  1149  00F47E  0EC0               	movlw	192
  1150  00F480  ECB1  F073         	call	_lcdInst
  1151                           
  1152                           ;main.c: 137: printf("Any key to stop");
  1153  00F484  0EEF               	movlw	low STR_2
  1154  00F486  6E12               	movwf	printf@f,c
  1155  00F488  0EFE               	movlw	high STR_2
  1156  00F48A  6E13               	movwf	printf@f+1,c
  1157  00F48C  EC4C  F078         	call	_printf	;wreg free
  1158                           
  1159                           ;main.c: 138: PWM1(100);
  1160  00F490  0E00               	movlw	0
  1161  00F492  6E02               	movwf	PWM1@duty+1,c
  1162  00F494  0E64               	movlw	100
  1163  00F496  6E01               	movwf	PWM1@duty,c
  1164  00F498  ECEA  F075         	call	_PWM1	;wreg free
  1165                           
  1166                           ;main.c: 139: dc = 1;
  1167  00F49C  0E00               	movlw	0
  1168  00F49E  6E39               	movwf	main@dc+1,c
  1169  00F4A0  0E01               	movlw	1
  1170  00F4A2  6E38               	movwf	main@dc,c
  1171                           
  1172                           ;main.c: 140: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1173  00F4A4  C04E  F029         	movff	_time+2,??_main
  1174  00F4A8  0E0F               	movlw	15
  1175  00F4AA  1629               	andwf	??_main,f,c
  1176  00F4AC  5029               	movf	??_main,w,c
  1177  00F4AE  6E01               	movwf	___wmul@multiplier,c
  1178  00F4B0  6A02               	clrf	___wmul@multiplier+1,c
  1179  00F4B2  0E0E               	movlw	14
  1180  00F4B4  6E04               	movwf	___wmul@multiplicand+1,c
  1181  00F4B6  0E10               	movlw	16
  1182  00F4B8  6E03               	movwf	___wmul@multiplicand,c
  1183  00F4BA  EC15  F074         	call	___wmul	;wreg free
  1184  00F4BE  C04C  F02A         	movff	_time,??_main+1
  1185  00F4C2  3A2A               	swapf	??_main+1,f,c
  1186  00F4C4  0E0F               	movlw	15
  1187  00F4C6  162A               	andwf	??_main+1,f,c
  1188  00F4C8  0E0F               	movlw	15
  1189  00F4CA  162A               	andwf	??_main+1,f,c
  1190  00F4CC  502A               	movf	??_main+1,w,c
  1191  00F4CE  0D0A               	mullw	10
  1192  00F4D0  504C               	movf	_time,w,c
  1193  00F4D2  0B0F               	andlw	15
  1194  00F4D4  6E2B               	movwf	(??_main+2)& (0+255),c
  1195  00F4D6  6A2C               	clrf	(??_main+3)& (0+255),c
  1196  00F4D8  50F3               	movf	prodl,w,c
  1197  00F4DA  262B               	addwf	??_main+2,f,c
  1198  00F4DC  50F4               	movf	prodh,w,c
  1199  00F4DE  222C               	addwfc	??_main+3,f,c
  1200  00F4E0  C04D  F02D         	movff	_time+1,??_main+4
  1201  00F4E4  0E0F               	movlw	15
  1202  00F4E6  162D               	andwf	??_main+4,f,c
  1203  00F4E8  502D               	movf	??_main+4,w,c
  1204  00F4EA  0D3C               	mullw	60
  1205  00F4EC  50F3               	movf	prodl,w,c
  1206  00F4EE  262B               	addwf	??_main+2,f,c
  1207  00F4F0  50F4               	movf	prodh,w,c
  1208  00F4F2  222C               	addwfc	??_main+3,f,c
  1209  00F4F4  C04D  F02E         	movff	_time+1,??_main+5
  1210  00F4F8  3A2E               	swapf	??_main+5,f,c
  1211  00F4FA  0E0F               	movlw	15
  1212  00F4FC  162E               	andwf	??_main+5,f,c
  1213  00F4FE  0E0F               	movlw	15
  1214  00F500  162E               	andwf	??_main+5,f,c
  1215  00F502  502E               	movf	??_main+5,w,c
  1216  00F504  0D0A               	mullw	10
  1217  00F506  50F3               	movf	prodl,w,c
  1218  00F508  262B               	addwf	??_main+2,f,c
  1219  00F50A  50F4               	movf	prodh,w,c
  1220  00F50C  222C               	addwfc	??_main+3,f,c
  1221  00F50E  5001               	movf	?___wmul,w,c
  1222  00F510  262B               	addwf	??_main+2,f,c
  1223  00F512  5002               	movf	?___wmul+1,w,c
  1224  00F514  222C               	addwfc	??_main+3,f,c
  1225  00F516  C04E  F02F         	movff	_time+2,??_main+6
  1226  00F51A  3A2F               	swapf	??_main+6,f,c
  1227  00F51C  0E0F               	movlw	15
  1228  00F51E  162F               	andwf	??_main+6,f,c
  1229  00F520  0E0F               	movlw	15
  1230  00F522  162F               	andwf	??_main+6,f,c
  1231  00F524  502F               	movf	??_main+6,w,c
  1232  00F526  0D0A               	mullw	10
  1233  00F528  50F3               	movf	prodl,w,c
  1234  00F52A  242B               	addwf	??_main+2,w,c
  1235  00F52C  6E42               	movwf	main@startTime,c
  1236  00F52E  50F4               	movf	prodh,w,c
  1237  00F530  202C               	addwfc	??_main+3,w,c
  1238  00F532  6E43               	movwf	main@startTime+1,c
  1239                           
  1240                           ;main.c: 141: canCheck = startTime;
  1241  00F534  C042  F03C         	movff	main@startTime,main@canCheck
  1242  00F538  C043  F03D         	movff	main@startTime+1,main@canCheck+1
  1243                           
  1244                           ;main.c: 143: }
  1245  00F53C  D76D               	goto	l2826
  1246  00F53E                     l2868:
  1247                           
  1248                           ;main.c: 144: else if(keypress == 1){
  1249  00F53E  0459               	decf	_keypress,w,c	;volatile
  1250  00F540  A4D8               	btfss	status,2,c
  1251  00F542  D003               	goto	l2872
  1252                           
  1253                           ;main.c: 146: displayLogs();
  1254  00F544  ECE9  F077         	call	_displayLogs	;wreg free
  1255                           
  1256                           ;main.c: 147: }
  1257  00F548  D767               	goto	l2826
  1258  00F54A                     l2872:
  1259                           
  1260                           ;main.c: 148: else if(keypress != (0) ) {
  1261  00F54A  5059               	movf	_keypress,w,c	;volatile
  1262  00F54C  B4D8               	btfsc	status,2,c
  1263  00F54E  D764               	goto	l2826
  1264                           
  1265                           ;main.c: 149: standby = keypress;
  1266  00F550  C059  F048         	movff	_keypress,main@standby	;volatile
  1267  00F554  6A49               	clrf	main@standby+1,c
  1268                           
  1269                           ;main.c: 150: prevSoupTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1270  00F556  C04E  F029         	movff	_time+2,??_main
  1271  00F55A  0E0F               	movlw	15
  1272  00F55C  1629               	andwf	??_main,f,c
  1273  00F55E  5029               	movf	??_main,w,c
  1274  00F560  6E01               	movwf	___wmul@multiplier,c
  1275  00F562  6A02               	clrf	___wmul@multiplier+1,c
  1276  00F564  0E0E               	movlw	14
  1277  00F566  6E04               	movwf	___wmul@multiplicand+1,c
  1278  00F568  0E10               	movlw	16
  1279  00F56A  6E03               	movwf	___wmul@multiplicand,c
  1280  00F56C  EC15  F074         	call	___wmul	;wreg free
  1281  00F570  C04C  F02A         	movff	_time,??_main+1
  1282  00F574  3A2A               	swapf	??_main+1,f,c
  1283  00F576  0E0F               	movlw	15
  1284  00F578  162A               	andwf	??_main+1,f,c
  1285  00F57A  0E0F               	movlw	15
  1286  00F57C  162A               	andwf	??_main+1,f,c
  1287  00F57E  502A               	movf	??_main+1,w,c
  1288  00F580  0D0A               	mullw	10
  1289  00F582  504C               	movf	_time,w,c
  1290  00F584  0B0F               	andlw	15
  1291  00F586  6E2B               	movwf	(??_main+2)& (0+255),c
  1292  00F588  6A2C               	clrf	(??_main+3)& (0+255),c
  1293  00F58A  50F3               	movf	prodl,w,c
  1294  00F58C  262B               	addwf	??_main+2,f,c
  1295  00F58E  50F4               	movf	prodh,w,c
  1296  00F590  222C               	addwfc	??_main+3,f,c
  1297  00F592  C04D  F02D         	movff	_time+1,??_main+4
  1298  00F596  0E0F               	movlw	15
  1299  00F598  162D               	andwf	??_main+4,f,c
  1300  00F59A  502D               	movf	??_main+4,w,c
  1301  00F59C  0D3C               	mullw	60
  1302  00F59E  50F3               	movf	prodl,w,c
  1303  00F5A0  262B               	addwf	??_main+2,f,c
  1304  00F5A2  50F4               	movf	prodh,w,c
  1305  00F5A4  222C               	addwfc	??_main+3,f,c
  1306  00F5A6  C04D  F02E         	movff	_time+1,??_main+5
  1307  00F5AA  3A2E               	swapf	??_main+5,f,c
  1308  00F5AC  0E0F               	movlw	15
  1309  00F5AE  162E               	andwf	??_main+5,f,c
  1310  00F5B0  0E0F               	movlw	15
  1311  00F5B2  162E               	andwf	??_main+5,f,c
  1312  00F5B4  502E               	movf	??_main+5,w,c
  1313  00F5B6  0D0A               	mullw	10
  1314  00F5B8  50F3               	movf	prodl,w,c
  1315  00F5BA  262B               	addwf	??_main+2,f,c
  1316  00F5BC  50F4               	movf	prodh,w,c
  1317  00F5BE  222C               	addwfc	??_main+3,f,c
  1318  00F5C0  5001               	movf	?___wmul,w,c
  1319  00F5C2  262B               	addwf	??_main+2,f,c
  1320  00F5C4  5002               	movf	?___wmul+1,w,c
  1321  00F5C6  222C               	addwfc	??_main+3,f,c
  1322  00F5C8  C04E  F02F         	movff	_time+2,??_main+6
  1323  00F5CC  3A2F               	swapf	??_main+6,f,c
  1324  00F5CE  0E0F               	movlw	15
  1325  00F5D0  162F               	andwf	??_main+6,f,c
  1326  00F5D2  0E0F               	movlw	15
  1327  00F5D4  162F               	andwf	??_main+6,f,c
  1328  00F5D6  502F               	movf	??_main+6,w,c
  1329  00F5D8  0D0A               	mullw	10
  1330  00F5DA  50F3               	movf	prodl,w,c
  1331  00F5DC  242B               	addwf	??_main+2,w,c
  1332  00F5DE  6E4A               	movwf	main@prevSoupTime,c
  1333  00F5E0  50F4               	movf	prodh,w,c
  1334  00F5E2  202C               	addwfc	??_main+3,w,c
  1335  00F5E4  6E4B               	movwf	main@prevSoupTime+1,c
  1336                           
  1337                           ;main.c: 151: labelState = 0;
  1338  00F5E6  0E00               	movlw	0
  1339  00F5E8  6E45               	movwf	main@labelState+1,c
  1340  00F5EA  0E00               	movlw	0
  1341  00F5EC  6E44               	movwf	main@labelState,c
  1342                           
  1343                           ;main.c: 152: s = 1;
  1344  00F5EE  0E00               	movlw	0
  1345  00F5F0  6E47               	movwf	main@s+1,c
  1346  00F5F2  0E01               	movlw	1
  1347  00F5F4  6E46               	movwf	main@s,c
  1348                           
  1349                           ;main.c: 153: }
  1350                           ;main.c: 155: }
  1351  00F5F6  D710               	goto	l2826
  1352  00F5F8                     l2882:
  1353                           
  1354                           ;main.c: 156: else if(standby == 15){
  1355  00F5F8  0E0F               	movlw	15
  1356  00F5FA  1848               	xorwf	main@standby,w,c
  1357  00F5FC  1049               	iorwf	main@standby+1,w,c
  1358  00F5FE  A4D8               	btfss	status,2,c
  1359  00F600  D1F6               	goto	l3034
  1360                           
  1361                           ;main.c: 157: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1362  00F602  0E01               	movlw	1
  1363  00F604  ECB1  F073         	call	_lcdInst
  1364  00F608  0E68               	movlw	104
  1365  00F60A  6E29               	movwf	??_main& (0+255),c
  1366  00F60C  0EE4               	movlw	228
  1367  00F60E                     u2437:
  1368  00F60E  2EE8               	decfsz	wreg,f,c
  1369  00F610  D7FE               	bra	u2437
  1370  00F612  2E29               	decfsz	??_main& (0+255),f,c
  1371  00F614  D7FC               	bra	u2437
  1372  00F616  D000               	nop2	
  1373                           
  1374                           ;main.c: 158: keypress = (0);
  1375  00F618  0E00               	movlw	0
  1376  00F61A  6E59               	movwf	_keypress,c	;volatile
  1377                           
  1378                           ;main.c: 159: if (s==1){
  1379  00F61C  0446               	decf	main@s,w,c
  1380  00F61E  1047               	iorwf	main@s+1,w,c
  1381  00F620  A4D8               	btfss	status,2,c
  1382  00F622  D00F               	goto	l2902
  1383                           
  1384                           ;main.c: 160: printf("testing S f");
  1385  00F624  0E9E               	movlw	low STR_3
  1386  00F626  6E12               	movwf	printf@f,c
  1387  00F628  0EFF               	movlw	high STR_3
  1388  00F62A  6E13               	movwf	printf@f+1,c
  1389  00F62C  EC4C  F078         	call	_printf	;wreg free
  1390                           
  1391                           ;main.c: 161: S2forward();
  1392  00F630  EC06  F075         	call	_S2forward	;wreg free
  1393                           
  1394                           ;main.c: 162: S1forward();
  1395  00F634  ECA6  F074         	call	_S1forward	;wreg free
  1396                           
  1397                           ;main.c: 163: S3forward();
  1398  00F638  EC66  F075         	call	_S3forward	;wreg free
  1399                           
  1400                           ;main.c: 164: keyinterrupt();
  1401  00F63C  ECD0  F073         	call	_keyinterrupt	;wreg free
  1402                           
  1403                           ;main.c: 165: }
  1404  00F640  D1D0               	goto	l156
  1405  00F642                     l2902:
  1406                           
  1407                           ;main.c: 166: else if(s==2){
  1408  00F642  0E02               	movlw	2
  1409  00F644  1846               	xorwf	main@s,w,c
  1410  00F646  1047               	iorwf	main@s+1,w,c
  1411  00F648  A4D8               	btfss	status,2,c
  1412  00F64A  D00F               	goto	l2914
  1413                           
  1414                           ;main.c: 167: printf("testing S b");
  1415  00F64C  0E86               	movlw	low STR_4
  1416  00F64E  6E12               	movwf	printf@f,c
  1417  00F650  0EFF               	movlw	high STR_4
  1418  00F652  6E13               	movwf	printf@f+1,c
  1419  00F654  EC4C  F078         	call	_printf	;wreg free
  1420                           
  1421                           ;main.c: 168: S1backward();
  1422  00F658  EC86  F074         	call	_S1backward	;wreg free
  1423                           
  1424                           ;main.c: 169: S2backward();
  1425  00F65C  ECE6  F074         	call	_S2backward	;wreg free
  1426                           
  1427                           ;main.c: 170: S3backward();
  1428  00F660  EC46  F075         	call	_S3backward	;wreg free
  1429                           
  1430                           ;main.c: 171: keyinterrupt();
  1431  00F664  ECD0  F073         	call	_keyinterrupt	;wreg free
  1432                           
  1433                           ;main.c: 172: }
  1434  00F668  D1BC               	goto	l156
  1435  00F66A                     l2914:
  1436                           
  1437                           ;main.c: 173: else if(s==3){
  1438  00F66A  0E03               	movlw	3
  1439  00F66C  1846               	xorwf	main@s,w,c
  1440  00F66E  1047               	iorwf	main@s+1,w,c
  1441  00F670  A4D8               	btfss	status,2,c
  1442  00F672  D00F               	goto	l2926
  1443                           
  1444                           ;main.c: 174: printf("testing S b");
  1445  00F674  0E86               	movlw	low STR_4
  1446  00F676  6E12               	movwf	printf@f,c
  1447  00F678  0EFF               	movlw	high STR_4
  1448  00F67A  6E13               	movwf	printf@f+1,c
  1449  00F67C  EC4C  F078         	call	_printf	;wreg free
  1450                           
  1451                           ;main.c: 175: S3off();
  1452  00F680  EC86  F075         	call	_S3off	;wreg free
  1453                           
  1454                           ;main.c: 176: S2off();
  1455  00F684  EC26  F075         	call	_S2off	;wreg free
  1456                           
  1457                           ;main.c: 177: S1off();
  1458  00F688  ECC6  F074         	call	_S1off	;wreg free
  1459                           
  1460                           ;main.c: 178: keyinterrupt();
  1461  00F68C  ECD0  F073         	call	_keyinterrupt	;wreg free
  1462                           
  1463                           ;main.c: 179: }
  1464  00F690  D1A8               	goto	l156
  1465  00F692                     l2926:
  1466                           
  1467                           ;main.c: 181: else{
  1468                           ;main.c: 183: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1469  00F692  0E01               	movlw	1
  1470  00F694  ECB1  F073         	call	_lcdInst
  1471  00F698  0E68               	movlw	104
  1472  00F69A  6E29               	movwf	??_main& (0+255),c
  1473  00F69C  0EE4               	movlw	228
  1474  00F69E                     u2447:
  1475  00F69E  2EE8               	decfsz	wreg,f,c
  1476  00F6A0  D7FE               	bra	u2447
  1477  00F6A2  2E29               	decfsz	??_main& (0+255),f,c
  1478  00F6A4  D7FC               	bra	u2447
  1479  00F6A6  D000               	nop2	
  1480                           
  1481                           ;main.c: 184: printf("testing PWM2");
  1482  00F6A8  0E54               	movlw	low STR_6
  1483  00F6AA  6E12               	movwf	printf@f,c
  1484  00F6AC  0EFF               	movlw	high STR_6
  1485  00F6AE  6E13               	movwf	printf@f+1,c
  1486  00F6B0  EC4C  F078         	call	_printf	;wreg free
  1487                           
  1488                           ;main.c: 185: PWM2(500);
  1489  00F6B4  0E01               	movlw	1
  1490  00F6B6  6E02               	movwf	PWM2@duty+1,c
  1491  00F6B8  0EF4               	movlw	244
  1492  00F6BA  6E01               	movwf	PWM2@duty,c
  1493  00F6BC  EC0F  F076         	call	_PWM2	;wreg free
  1494                           
  1495                           ;main.c: 186: keycheck();
  1496  00F6C0  ECC6  F073         	call	_keycheck	;wreg free
  1497                           
  1498                           ;main.c: 187: PWM2off();
  1499  00F6C4  ECA7  F073         	call	_PWM2off	;wreg free
  1500                           
  1501                           ;main.c: 189: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1502  00F6C8  0E01               	movlw	1
  1503  00F6CA  ECB1  F073         	call	_lcdInst
  1504  00F6CE  0E68               	movlw	104
  1505  00F6D0  6E29               	movwf	??_main& (0+255),c
  1506  00F6D2  0EE4               	movlw	228
  1507  00F6D4                     u2457:
  1508  00F6D4  2EE8               	decfsz	wreg,f,c
  1509  00F6D6  D7FE               	bra	u2457
  1510  00F6D8  2E29               	decfsz	??_main& (0+255),f,c
  1511  00F6DA  D7FC               	bra	u2457
  1512  00F6DC  D000               	nop2	
  1513                           
  1514                           ;main.c: 190: printf("testing PWM1");
  1515  00F6DE  0E47               	movlw	low STR_7
  1516  00F6E0  6E12               	movwf	printf@f,c
  1517  00F6E2  0EFF               	movlw	high STR_7
  1518  00F6E4  6E13               	movwf	printf@f+1,c
  1519  00F6E6  EC4C  F078         	call	_printf	;wreg free
  1520                           
  1521                           ;main.c: 191: PWM1(500);
  1522  00F6EA  0E01               	movlw	1
  1523  00F6EC  6E02               	movwf	PWM1@duty+1,c
  1524  00F6EE  0EF4               	movlw	244
  1525  00F6F0  6E01               	movwf	PWM1@duty,c
  1526  00F6F2  ECEA  F075         	call	_PWM1	;wreg free
  1527                           
  1528                           ;main.c: 192: keycheck();
  1529  00F6F6  ECC6  F073         	call	_keycheck	;wreg free
  1530                           
  1531                           ;main.c: 193: PWM1off();
  1532  00F6FA  ECA2  F073         	call	_PWM1off	;wreg free
  1533                           
  1534                           ;main.c: 195: keypress = (0);
  1535  00F6FE  0E00               	movlw	0
  1536  00F700  6E59               	movwf	_keypress,c	;volatile
  1537                           
  1538                           ;main.c: 196: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1539  00F702  C04E  F029         	movff	_time+2,??_main
  1540  00F706  0E0F               	movlw	15
  1541  00F708  1629               	andwf	??_main,f,c
  1542  00F70A  5029               	movf	??_main,w,c
  1543  00F70C  6E01               	movwf	___wmul@multiplier,c
  1544  00F70E  6A02               	clrf	___wmul@multiplier+1,c
  1545  00F710  0E0E               	movlw	14
  1546  00F712  6E04               	movwf	___wmul@multiplicand+1,c
  1547  00F714  0E10               	movlw	16
  1548  00F716  6E03               	movwf	___wmul@multiplicand,c
  1549  00F718  EC15  F074         	call	___wmul	;wreg free
  1550  00F71C  C04C  F02A         	movff	_time,??_main+1
  1551  00F720  3A2A               	swapf	??_main+1,f,c
  1552  00F722  0E0F               	movlw	15
  1553  00F724  162A               	andwf	??_main+1,f,c
  1554  00F726  0E0F               	movlw	15
  1555  00F728  162A               	andwf	??_main+1,f,c
  1556  00F72A  502A               	movf	??_main+1,w,c
  1557  00F72C  0D0A               	mullw	10
  1558  00F72E  504C               	movf	_time,w,c
  1559  00F730  0B0F               	andlw	15
  1560  00F732  6E2B               	movwf	(??_main+2)& (0+255),c
  1561  00F734  6A2C               	clrf	(??_main+3)& (0+255),c
  1562  00F736  50F3               	movf	prodl,w,c
  1563  00F738  262B               	addwf	??_main+2,f,c
  1564  00F73A  50F4               	movf	prodh,w,c
  1565  00F73C  222C               	addwfc	??_main+3,f,c
  1566  00F73E  C04D  F02D         	movff	_time+1,??_main+4
  1567  00F742  0E0F               	movlw	15
  1568  00F744  162D               	andwf	??_main+4,f,c
  1569  00F746  502D               	movf	??_main+4,w,c
  1570  00F748  0D3C               	mullw	60
  1571  00F74A  50F3               	movf	prodl,w,c
  1572  00F74C  262B               	addwf	??_main+2,f,c
  1573  00F74E  50F4               	movf	prodh,w,c
  1574  00F750  222C               	addwfc	??_main+3,f,c
  1575  00F752  C04D  F02E         	movff	_time+1,??_main+5
  1576  00F756  3A2E               	swapf	??_main+5,f,c
  1577  00F758  0E0F               	movlw	15
  1578  00F75A  162E               	andwf	??_main+5,f,c
  1579  00F75C  0E0F               	movlw	15
  1580  00F75E  162E               	andwf	??_main+5,f,c
  1581  00F760  502E               	movf	??_main+5,w,c
  1582  00F762  0D0A               	mullw	10
  1583  00F764  50F3               	movf	prodl,w,c
  1584  00F766  262B               	addwf	??_main+2,f,c
  1585  00F768  50F4               	movf	prodh,w,c
  1586  00F76A  222C               	addwfc	??_main+3,f,c
  1587  00F76C  5001               	movf	?___wmul,w,c
  1588  00F76E  262B               	addwf	??_main+2,f,c
  1589  00F770  5002               	movf	?___wmul+1,w,c
  1590  00F772  222C               	addwfc	??_main+3,f,c
  1591  00F774  C04E  F02F         	movff	_time+2,??_main+6
  1592  00F778  3A2F               	swapf	??_main+6,f,c
  1593  00F77A  0E0F               	movlw	15
  1594  00F77C  162F               	andwf	??_main+6,f,c
  1595  00F77E  0E0F               	movlw	15
  1596  00F780  162F               	andwf	??_main+6,f,c
  1597  00F782  502F               	movf	??_main+6,w,c
  1598  00F784  0D0A               	mullw	10
  1599  00F786  50F3               	movf	prodl,w,c
  1600  00F788  242B               	addwf	??_main+2,w,c
  1601  00F78A  6E42               	movwf	main@startTime,c
  1602  00F78C  50F4               	movf	prodh,w,c
  1603  00F78E  202C               	addwfc	??_main+3,w,c
  1604  00F790  6E43               	movwf	main@startTime+1,c
  1605                           
  1606                           ;main.c: 197: while(keypress==(0)){
  1607  00F792  D079               	goto	l2968
  1608  00F794                     l2952:
  1609                           
  1610                           ;main.c: 198: updateTime();
  1611  00F794  ECE6  F076         	call	_updateTime	;wreg free
  1612                           
  1613                           ;main.c: 199: keypress = (0);
  1614  00F798  0E00               	movlw	0
  1615  00F79A  6E59               	movwf	_keypress,c	;volatile
  1616                           
  1617                           ;main.c: 200: _delay((unsigned long)((50)*(32000000/4000.0)));
  1618  00F79C  0E03               	movlw	3
  1619  00F79E  6E2A               	movwf	(??_main+1)& (0+255),c
  1620  00F7A0  0E08               	movlw	8
  1621  00F7A2  6E29               	movwf	??_main& (0+255),c
  1622  00F7A4  0E77               	movlw	119
  1623  00F7A6                     u2467:
  1624  00F7A6  2EE8               	decfsz	wreg,f,c
  1625  00F7A8  D7FE               	bra	u2467
  1626  00F7AA  2E29               	decfsz	??_main& (0+255),f,c
  1627  00F7AC  D7FC               	bra	u2467
  1628  00F7AE  2E2A               	decfsz	(??_main+1)& (0+255),f,c
  1629  00F7B0  D7FA               	bra	u2467
  1630  00F7B2  F000               	nop	
  1631                           
  1632                           ;main.c: 201: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1633  00F7B4  0E01               	movlw	1
  1634  00F7B6  ECB1  F073         	call	_lcdInst
  1635  00F7BA  0E68               	movlw	104
  1636  00F7BC  6E29               	movwf	??_main& (0+255),c
  1637  00F7BE  0EE4               	movlw	228
  1638  00F7C0                     u2477:
  1639  00F7C0  2EE8               	decfsz	wreg,f,c
  1640  00F7C2  D7FE               	bra	u2477
  1641  00F7C4  2E29               	decfsz	??_main& (0+255),f,c
  1642  00F7C6  D7FC               	bra	u2477
  1643  00F7C8  D000               	nop2	
  1644                           
  1645                           ;main.c: 202: printf("time %x %x", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(ti
      +                          me[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)
      +                          *10), timePassed(startTime));
  1646  00F7CA  C04E  F029         	movff	_time+2,??_main
  1647  00F7CE  0E0F               	movlw	15
  1648  00F7D0  1629               	andwf	??_main,f,c
  1649  00F7D2  5029               	movf	??_main,w,c
  1650  00F7D4  6E01               	movwf	___wmul@multiplier,c
  1651  00F7D6  6A02               	clrf	___wmul@multiplier+1,c
  1652  00F7D8  0E0E               	movlw	14
  1653  00F7DA  6E04               	movwf	___wmul@multiplicand+1,c
  1654  00F7DC  0E10               	movlw	16
  1655  00F7DE  6E03               	movwf	___wmul@multiplicand,c
  1656  00F7E0  EC15  F074         	call	___wmul	;wreg free
  1657  00F7E4  C04C  F02A         	movff	_time,??_main+1
  1658  00F7E8  3A2A               	swapf	??_main+1,f,c
  1659  00F7EA  0E0F               	movlw	15
  1660  00F7EC  162A               	andwf	??_main+1,f,c
  1661  00F7EE  0E0F               	movlw	15
  1662  00F7F0  162A               	andwf	??_main+1,f,c
  1663  00F7F2  502A               	movf	??_main+1,w,c
  1664  00F7F4  0D0A               	mullw	10
  1665  00F7F6  504C               	movf	_time,w,c
  1666  00F7F8  0B0F               	andlw	15
  1667  00F7FA  6E2B               	movwf	(??_main+2)& (0+255),c
  1668  00F7FC  6A2C               	clrf	(??_main+3)& (0+255),c
  1669  00F7FE  50F3               	movf	prodl,w,c
  1670  00F800  262B               	addwf	??_main+2,f,c
  1671  00F802  50F4               	movf	prodh,w,c
  1672  00F804  222C               	addwfc	??_main+3,f,c
  1673  00F806  C04D  F02D         	movff	_time+1,??_main+4
  1674  00F80A  0E0F               	movlw	15
  1675  00F80C  162D               	andwf	??_main+4,f,c
  1676  00F80E  502D               	movf	??_main+4,w,c
  1677  00F810  0D3C               	mullw	60
  1678  00F812  50F3               	movf	prodl,w,c
  1679  00F814  262B               	addwf	??_main+2,f,c
  1680  00F816  50F4               	movf	prodh,w,c
  1681  00F818  222C               	addwfc	??_main+3,f,c
  1682  00F81A  C04D  F02E         	movff	_time+1,??_main+5
  1683  00F81E  3A2E               	swapf	??_main+5,f,c
  1684  00F820  0E0F               	movlw	15
  1685  00F822  162E               	andwf	??_main+5,f,c
  1686  00F824  0E0F               	movlw	15
  1687  00F826  162E               	andwf	??_main+5,f,c
  1688  00F828  502E               	movf	??_main+5,w,c
  1689  00F82A  0D0A               	mullw	10
  1690  00F82C  50F3               	movf	prodl,w,c
  1691  00F82E  262B               	addwf	??_main+2,f,c
  1692  00F830  50F4               	movf	prodh,w,c
  1693  00F832  222C               	addwfc	??_main+3,f,c
  1694  00F834  5001               	movf	?___wmul,w,c
  1695  00F836  262B               	addwf	??_main+2,f,c
  1696  00F838  5002               	movf	?___wmul+1,w,c
  1697  00F83A  222C               	addwfc	??_main+3,f,c
  1698  00F83C  C04E  F02F         	movff	_time+2,??_main+6
  1699  00F840  3A2F               	swapf	??_main+6,f,c
  1700  00F842  0E0F               	movlw	15
  1701  00F844  162F               	andwf	??_main+6,f,c
  1702  00F846  0E0F               	movlw	15
  1703  00F848  162F               	andwf	??_main+6,f,c
  1704  00F84A  502F               	movf	??_main+6,w,c
  1705  00F84C  0D0A               	mullw	10
  1706  00F84E  50F3               	movf	prodl,w,c
  1707  00F850  242B               	addwf	??_main+2,w,c
  1708  00F852  6E3A               	movwf	_main$1542,c
  1709  00F854  50F4               	movf	prodh,w,c
  1710  00F856  202C               	addwfc	??_main+3,w,c
  1711  00F858  6E3B               	movwf	_main$1542+1,c
  1712                           
  1713                           ;main.c: 202: printf("time %x %x", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(ti
      +                          me[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)
      +                          *10), timePassed(startTime));
  1714  00F85A  0EC0               	movlw	low STR_8
  1715  00F85C  6E12               	movwf	printf@f,c
  1716  00F85E  0EFF               	movlw	high STR_8
  1717  00F860  6E13               	movwf	printf@f+1,c
  1718  00F862  C03A  F014         	movff	_main$1542,?_printf+2
  1719  00F866  C03B  F015         	movff	_main$1542+1,?_printf+3
  1720  00F86A  C042  F007         	movff	main@startTime,timePassed@start
  1721  00F86E  C043  F008         	movff	main@startTime+1,timePassed@start+1
  1722  00F872  EC94  F077         	call	_timePassed	;wreg free
  1723  00F876  C007  F016         	movff	?_timePassed,?_printf+4
  1724  00F87A  C008  F017         	movff	?_timePassed+1,?_printf+5
  1725  00F87E  EC4C  F078         	call	_printf	;wreg free
  1726                           
  1727                           ;main.c: 203: keyinterrupt();
  1728  00F882  ECD0  F073         	call	_keyinterrupt	;wreg free
  1729  00F886                     l2968:
  1730  00F886  5059               	movf	_keypress,w,c	;volatile
  1731  00F888  B4D8               	btfsc	status,2,c
  1732  00F88A  D784               	goto	l2952
  1733                           
  1734                           ;main.c: 204: }
  1735                           ;main.c: 206: keypress = (0);
  1736  00F88C  0E00               	movlw	0
  1737  00F88E  6E59               	movwf	_keypress,c	;volatile
  1738                           
  1739                           ;main.c: 207: while(keypress==(0)){
  1740  00F890  D031               	goto	l164
  1741  00F892                     l2972:
  1742                           
  1743                           ;main.c: 208: keypress = (0);
  1744  00F892  0E00               	movlw	0
  1745  00F894  6E59               	movwf	_keypress,c	;volatile
  1746                           
  1747                           ;main.c: 209: _delay((unsigned long)((50)*(32000000/4000.0)));
  1748  00F896  0E03               	movlw	3
  1749  00F898  6E2A               	movwf	(??_main+1)& (0+255),c
  1750  00F89A  0E08               	movlw	8
  1751  00F89C  6E29               	movwf	??_main& (0+255),c
  1752  00F89E  0E77               	movlw	119
  1753  00F8A0                     u2487:
  1754  00F8A0  2EE8               	decfsz	wreg,f,c
  1755  00F8A2  D7FE               	bra	u2487
  1756  00F8A4  2E29               	decfsz	??_main& (0+255),f,c
  1757  00F8A6  D7FC               	bra	u2487
  1758  00F8A8  2E2A               	decfsz	(??_main+1)& (0+255),f,c
  1759  00F8AA  D7FA               	bra	u2487
  1760  00F8AC  F000               	nop	
  1761                           
  1762                           ;main.c: 210: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1763  00F8AE  0E01               	movlw	1
  1764  00F8B0  ECB1  F073         	call	_lcdInst
  1765  00F8B4  0E68               	movlw	104
  1766  00F8B6  6E29               	movwf	??_main& (0+255),c
  1767  00F8B8  0EE4               	movlw	228
  1768  00F8BA                     u2497:
  1769  00F8BA  2EE8               	decfsz	wreg,f,c
  1770  00F8BC  D7FE               	bra	u2497
  1771  00F8BE  2E29               	decfsz	??_main& (0+255),f,c
  1772  00F8C0  D7FC               	bra	u2497
  1773  00F8C2  D000               	nop2	
  1774                           
  1775                           ;main.c: 211: printf("testing IR1");
  1776  00F8C4  0E6E               	movlw	low STR_9
  1777  00F8C6  6E12               	movwf	printf@f,c
  1778  00F8C8  0EFF               	movlw	high STR_9
  1779  00F8CA  6E13               	movwf	printf@f+1,c
  1780  00F8CC  EC4C  F078         	call	_printf	;wreg free
  1781                           
  1782                           ;main.c: 212: readADC(1);
  1783  00F8D0  0E01               	movlw	1
  1784  00F8D2  EC03  F074         	call	_readADC
  1785                           
  1786                           ;main.c: 213: lcdInst(0b11000000);;
  1787  00F8D6  0EC0               	movlw	192
  1788  00F8D8  ECB1  F073         	call	_lcdInst
  1789                           
  1790                           ;main.c: 214: printf("%x", ADRES);
  1791  00F8DC  0EFB               	movlw	low (STR_14+5)
  1792  00F8DE  6E12               	movwf	printf@f,c
  1793  00F8E0  0EFF               	movlw	high (STR_14+5)
  1794  00F8E2  6E13               	movwf	printf@f+1,c
  1795  00F8E4  CFC3 F014          	movff	4035,?_printf+2	;volatile
  1796  00F8E8  CFC4 F015          	movff	4036,?_printf+3	;volatile
  1797  00F8EC  EC4C  F078         	call	_printf	;wreg free
  1798                           
  1799                           ;main.c: 215: keyinterrupt();
  1800  00F8F0  ECD0  F073         	call	_keyinterrupt	;wreg free
  1801  00F8F4                     l164:
  1802  00F8F4  5059               	movf	_keypress,w,c	;volatile
  1803  00F8F6  B4D8               	btfsc	status,2,c
  1804  00F8F8  D7CC               	goto	l2972
  1805                           
  1806                           ;main.c: 216: }
  1807                           ;main.c: 218: keypress = (0);
  1808  00F8FA  0E00               	movlw	0
  1809  00F8FC  6E59               	movwf	_keypress,c	;volatile
  1810                           
  1811                           ;main.c: 219: while(keypress==(0)){
  1812  00F8FE  D031               	goto	l167
  1813  00F900                     l2992:
  1814                           
  1815                           ;main.c: 220: keypress = (0);
  1816  00F900  0E00               	movlw	0
  1817  00F902  6E59               	movwf	_keypress,c	;volatile
  1818                           
  1819                           ;main.c: 221: _delay((unsigned long)((50)*(32000000/4000.0)));
  1820  00F904  0E03               	movlw	3
  1821  00F906  6E2A               	movwf	(??_main+1)& (0+255),c
  1822  00F908  0E08               	movlw	8
  1823  00F90A  6E29               	movwf	??_main& (0+255),c
  1824  00F90C  0E77               	movlw	119
  1825  00F90E                     u2507:
  1826  00F90E  2EE8               	decfsz	wreg,f,c
  1827  00F910  D7FE               	bra	u2507
  1828  00F912  2E29               	decfsz	??_main& (0+255),f,c
  1829  00F914  D7FC               	bra	u2507
  1830  00F916  2E2A               	decfsz	(??_main+1)& (0+255),f,c
  1831  00F918  D7FA               	bra	u2507
  1832  00F91A  F000               	nop	
  1833                           
  1834                           ;main.c: 222: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1835  00F91C  0E01               	movlw	1
  1836  00F91E  ECB1  F073         	call	_lcdInst
  1837  00F922  0E68               	movlw	104
  1838  00F924  6E29               	movwf	??_main& (0+255),c
  1839  00F926  0EE4               	movlw	228
  1840  00F928                     u2517:
  1841  00F928  2EE8               	decfsz	wreg,f,c
  1842  00F92A  D7FE               	bra	u2517
  1843  00F92C  2E29               	decfsz	??_main& (0+255),f,c
  1844  00F92E  D7FC               	bra	u2517
  1845  00F930  D000               	nop2	
  1846                           
  1847                           ;main.c: 223: printf("testing IR2");
  1848  00F932  0E7A               	movlw	low STR_11
  1849  00F934  6E12               	movwf	printf@f,c
  1850  00F936  0EFF               	movlw	high STR_11
  1851  00F938  6E13               	movwf	printf@f+1,c
  1852  00F93A  EC4C  F078         	call	_printf	;wreg free
  1853                           
  1854                           ;main.c: 224: readADC(0);
  1855  00F93E  0E00               	movlw	0
  1856  00F940  EC03  F074         	call	_readADC
  1857                           
  1858                           ;main.c: 225: lcdInst(0b11000000);;
  1859  00F944  0EC0               	movlw	192
  1860  00F946  ECB1  F073         	call	_lcdInst
  1861                           
  1862                           ;main.c: 226: printf("%x", ADRES);
  1863  00F94A  0EFB               	movlw	low (STR_14+5)
  1864  00F94C  6E12               	movwf	printf@f,c
  1865  00F94E  0EFF               	movlw	high (STR_14+5)
  1866  00F950  6E13               	movwf	printf@f+1,c
  1867  00F952  CFC3 F014          	movff	4035,?_printf+2	;volatile
  1868  00F956  CFC4 F015          	movff	4036,?_printf+3	;volatile
  1869  00F95A  EC4C  F078         	call	_printf	;wreg free
  1870                           
  1871                           ;main.c: 227: keyinterrupt();
  1872  00F95E  ECD0  F073         	call	_keyinterrupt	;wreg free
  1873  00F962                     l167:
  1874  00F962  5059               	movf	_keypress,w,c	;volatile
  1875  00F964  B4D8               	btfsc	status,2,c
  1876  00F966  D7CC               	goto	l2992
  1877                           
  1878                           ;main.c: 228: }
  1879                           ;main.c: 230: keypress = (0);
  1880  00F968  0E00               	movlw	0
  1881  00F96A  6E59               	movwf	_keypress,c	;volatile
  1882                           
  1883                           ;main.c: 231: while(keypress==(0)){
  1884  00F96C  D033               	goto	l170
  1885  00F96E                     l3012:
  1886                           
  1887                           ;main.c: 232: keypress = (0);
  1888  00F96E  0E00               	movlw	0
  1889  00F970  6E59               	movwf	_keypress,c	;volatile
  1890                           
  1891                           ;main.c: 233: _delay((unsigned long)((50)*(32000000/4000.0)));
  1892  00F972  0E03               	movlw	3
  1893  00F974  6E2A               	movwf	(??_main+1)& (0+255),c
  1894  00F976  0E08               	movlw	8
  1895  00F978  6E29               	movwf	??_main& (0+255),c
  1896  00F97A  0E77               	movlw	119
  1897  00F97C                     u2527:
  1898  00F97C  2EE8               	decfsz	wreg,f,c
  1899  00F97E  D7FE               	bra	u2527
  1900  00F980  2E29               	decfsz	??_main& (0+255),f,c
  1901  00F982  D7FC               	bra	u2527
  1902  00F984  2E2A               	decfsz	(??_main+1)& (0+255),f,c
  1903  00F986  D7FA               	bra	u2527
  1904  00F988  F000               	nop	
  1905                           
  1906                           ;main.c: 234: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1907  00F98A  0E01               	movlw	1
  1908  00F98C  ECB1  F073         	call	_lcdInst
  1909  00F990  0E68               	movlw	104
  1910  00F992  6E29               	movwf	??_main& (0+255),c
  1911  00F994  0EE4               	movlw	228
  1912  00F996                     u2537:
  1913  00F996  2EE8               	decfsz	wreg,f,c
  1914  00F998  D7FE               	bra	u2537
  1915  00F99A  2E29               	decfsz	??_main& (0+255),f,c
  1916  00F99C  D7FC               	bra	u2537
  1917  00F99E  D000               	nop2	
  1918                           
  1919                           ;main.c: 235: printf("testing label");
  1920  00F9A0  0E2B               	movlw	low STR_13
  1921  00F9A2  6E12               	movwf	printf@f,c
  1922  00F9A4  0EFF               	movlw	high STR_13
  1923  00F9A6  6E13               	movwf	printf@f+1,c
  1924  00F9A8  EC4C  F078         	call	_printf	;wreg free
  1925                           
  1926                           ;main.c: 236: readADC(4);
  1927  00F9AC  0E04               	movlw	4
  1928  00F9AE  EC03  F074         	call	_readADC
  1929                           
  1930                           ;main.c: 237: lcdInst(0b11000000);;
  1931  00F9B2  0EC0               	movlw	192
  1932  00F9B4  ECB1  F073         	call	_lcdInst
  1933                           
  1934                           ;main.c: 238: printf("%x   %x", ADRESH, ADRESL);
  1935  00F9B8  0EF6               	movlw	low STR_14
  1936  00F9BA  6E12               	movwf	printf@f,c
  1937  00F9BC  0EFF               	movlw	high STR_14
  1938  00F9BE  6E13               	movwf	printf@f+1,c
  1939  00F9C0  CFC4 F014          	movff	4036,?_printf+2	;volatile
  1940  00F9C4  6A15               	clrf	?_printf+3,c
  1941  00F9C6  CFC3 F016          	movff	4035,?_printf+4	;volatile
  1942  00F9CA  6A17               	clrf	?_printf+5,c
  1943  00F9CC  EC4C  F078         	call	_printf	;wreg free
  1944                           
  1945                           ;main.c: 239: keyinterrupt();
  1946  00F9D0  ECD0  F073         	call	_keyinterrupt	;wreg free
  1947  00F9D4                     l170:
  1948  00F9D4  5059               	movf	_keypress,w,c	;volatile
  1949  00F9D6  B4D8               	btfsc	status,2,c
  1950  00F9D8  D7CA               	goto	l3012
  1951                           
  1952                           ;main.c: 240: }
  1953                           ;main.c: 245: standby = 1;
  1954  00F9DA  0E00               	movlw	0
  1955  00F9DC  6E49               	movwf	main@standby+1,c
  1956  00F9DE  0E01               	movlw	1
  1957  00F9E0  6E48               	movwf	main@standby,c
  1958  00F9E2                     l156:
  1959                           
  1960                           ;main.c: 246: }
  1961                           ;main.c: 248: if(keypress != (0)){
  1962  00F9E2  5059               	movf	_keypress,w,c	;volatile
  1963  00F9E4  B4D8               	btfsc	status,2,c
  1964  00F9E6  D518               	goto	l2826
  1965                           
  1966                           ;main.c: 249: s++;
  1967  00F9E8  4A46               	infsnz	main@s,f,c
  1968  00F9EA  2A47               	incf	main@s+1,f,c
  1969                           
  1970                           ;main.c: 250: }
  1971                           ;main.c: 252: }
  1972  00F9EC  D515               	goto	l2826
  1973  00F9EE                     l3034:
  1974                           
  1975                           ;main.c: 253: else if(standby == 14){
  1976  00F9EE  0E0E               	movlw	14
  1977  00F9F0  1848               	xorwf	main@standby,w,c
  1978  00F9F2  1049               	iorwf	main@standby+1,w,c
  1979  00F9F4  A4D8               	btfss	status,2,c
  1980  00F9F6  D174               	goto	l3118
  1981                           
  1982                           ;main.c: 254: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1983  00F9F8  0E01               	movlw	1
  1984  00F9FA  ECB1  F073         	call	_lcdInst
  1985  00F9FE  0E68               	movlw	104
  1986  00FA00  6E29               	movwf	??_main& (0+255),c
  1987  00FA02  0EE4               	movlw	228
  1988  00FA04                     u2547:
  1989  00FA04  2EE8               	decfsz	wreg,f,c
  1990  00FA06  D7FE               	bra	u2547
  1991  00FA08  2E29               	decfsz	??_main& (0+255),f,c
  1992  00FA0A  D7FC               	bra	u2547
  1993  00FA0C  D000               	nop2	
  1994                           
  1995                           ;main.c: 255: printf("soup can test");
  1996  00FA0E  0E39               	movlw	low STR_15
  1997  00FA10  6E12               	movwf	printf@f,c
  1998  00FA12  0EFF               	movlw	high STR_15
  1999  00FA14  6E13               	movwf	printf@f+1,c
  2000  00FA16  EC4C  F078         	call	_printf	;wreg free
  2001                           
  2002                           ;main.c: 256: if (timePassed(prevSoupTime) < 3){
  2003  00FA1A  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2004  00FA1E  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2005  00FA22  EC94  F077         	call	_timePassed	;wreg free
  2006  00FA26  BE08               	btfsc	?_timePassed+1,7,c
  2007  00FA28  D006               	goto	l3044
  2008  00FA2A  5008               	movf	?_timePassed+1,w,c
  2009  00FA2C  E138               	bnz	l3060
  2010  00FA2E  0E03               	movlw	3
  2011  00FA30  5C07               	subwf	?_timePassed,w,c
  2012  00FA32  B0D8               	btfsc	status,0,c
  2013  00FA34  D034               	goto	l3060
  2014  00FA36                     l3044:
  2015                           
  2016                           ;main.c: 258: S1off();
  2017  00FA36  ECC6  F074         	call	_S1off	;wreg free
  2018                           
  2019                           ;main.c: 259: readADC(4);
  2020  00FA3A  0E04               	movlw	4
  2021  00FA3C  EC03  F074         	call	_readADC
  2022                           
  2023                           ;main.c: 260: if(ADRESL<=0x1){labelState = 1;}
  2024  00FA40  0E02               	movlw	2
  2025  00FA42  60C3               	cpfslt	4035,c	;volatile
  2026  00FA44  D004               	goto	l3050
  2027  00FA46  0E00               	movlw	0
  2028  00FA48  6E45               	movwf	main@labelState+1,c
  2029  00FA4A  0E01               	movlw	1
  2030  00FA4C  6E44               	movwf	main@labelState,c
  2031  00FA4E                     l3050:
  2032                           
  2033                           ;main.c: 261: lcdInst(0b11000000);;
  2034  00FA4E  0EC0               	movlw	192
  2035  00FA50  ECB1  F073         	call	_lcdInst
  2036                           
  2037                           ;main.c: 262: printf("value: %x", ADRESL);
  2038  00FA54  0ECB               	movlw	low STR_16
  2039  00FA56  6E12               	movwf	printf@f,c
  2040  00FA58  0EFF               	movlw	high STR_16
  2041  00FA5A  6E13               	movwf	printf@f+1,c
  2042  00FA5C  CFC3 F014          	movff	4035,?_printf+2	;volatile
  2043  00FA60  6A15               	clrf	?_printf+3,c
  2044  00FA62  EC4C  F078         	call	_printf	;wreg free
  2045                           
  2046                           ;main.c: 263: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2047  00FA66  0E01               	movlw	1
  2048  00FA68  ECB1  F073         	call	_lcdInst
  2049  00FA6C  0E68               	movlw	104
  2050  00FA6E  6E29               	movwf	??_main& (0+255),c
  2051  00FA70  0EE4               	movlw	228
  2052  00FA72                     u2557:
  2053  00FA72  2EE8               	decfsz	wreg,f,c
  2054  00FA74  D7FE               	bra	u2557
  2055  00FA76  2E29               	decfsz	??_main& (0+255),f,c
  2056  00FA78  D7FC               	bra	u2557
  2057  00FA7A  D000               	nop2	
  2058                           
  2059                           ;main.c: 264: printf("testing %d", timePassed(prevSoupTime));
  2060  00FA7C  0EB5               	movlw	low STR_17
  2061  00FA7E  6E12               	movwf	printf@f,c
  2062  00FA80  0EFF               	movlw	high STR_17
  2063  00FA82  6E13               	movwf	printf@f+1,c
  2064  00FA84  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2065  00FA88  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2066  00FA8C  EC94  F077         	call	_timePassed	;wreg free
  2067  00FA90  C007  F014         	movff	?_timePassed,?_printf+2
  2068  00FA94  C008  F015         	movff	?_timePassed+1,?_printf+3
  2069  00FA98  EC4C  F078         	call	_printf	;wreg free
  2070                           
  2071                           ;main.c: 265: }
  2072  00FA9C  D4BD               	goto	l2826
  2073  00FA9E                     l3060:
  2074                           
  2075                           ;main.c: 266: else if (labelState == 1){
  2076  00FA9E  0444               	decf	main@labelState,w,c
  2077  00FAA0  1045               	iorwf	main@labelState+1,w,c
  2078  00FAA2  A4D8               	btfss	status,2,c
  2079  00FAA4  D056               	goto	l3084
  2080                           
  2081                           ;main.c: 267: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2082  00FAA6  0E01               	movlw	1
  2083  00FAA8  ECB1  F073         	call	_lcdInst
  2084  00FAAC  0E68               	movlw	104
  2085  00FAAE  6E29               	movwf	??_main& (0+255),c
  2086  00FAB0  0EE4               	movlw	228
  2087  00FAB2                     u2567:
  2088  00FAB2  2EE8               	decfsz	wreg,f,c
  2089  00FAB4  D7FE               	bra	u2567
  2090  00FAB6  2E29               	decfsz	??_main& (0+255),f,c
  2091  00FAB8  D7FC               	bra	u2567
  2092  00FABA  D000               	nop2	
  2093                           
  2094                           ;main.c: 268: printf("no label");
  2095  00FABC  0ED5               	movlw	low STR_18
  2096  00FABE  6E12               	movwf	printf@f,c
  2097  00FAC0  0EFF               	movlw	high STR_18
  2098  00FAC2  6E13               	movwf	printf@f+1,c
  2099  00FAC4  EC4C  F078         	call	_printf	;wreg free
  2100                           
  2101                           ;main.c: 269: lcdInst(0b11000000);;
  2102  00FAC8  0EC0               	movlw	192
  2103  00FACA  ECB1  F073         	call	_lcdInst
  2104                           
  2105                           ;main.c: 270: if(timePassed(prevSoupTime) < 8){
  2106  00FACE  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2107  00FAD2  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2108  00FAD6  EC94  F077         	call	_timePassed	;wreg free
  2109  00FADA  BE08               	btfsc	?_timePassed+1,7,c
  2110  00FADC  D006               	goto	l3072
  2111  00FADE  5008               	movf	?_timePassed+1,w,c
  2112  00FAE0  E117               	bnz	l3076
  2113  00FAE2  0E08               	movlw	8
  2114  00FAE4  5C07               	subwf	?_timePassed,w,c
  2115  00FAE6  B0D8               	btfsc	status,0,c
  2116  00FAE8  D013               	goto	l3076
  2117  00FAEA                     l3072:
  2118                           
  2119                           ;main.c: 271: S1forward();
  2120  00FAEA  ECA6  F074         	call	_S1forward	;wreg free
  2121                           
  2122                           ;main.c: 272: printf("sorting %d", timePassed(prevSoupTime));
  2123  00FAEE  0EAA               	movlw	low STR_19
  2124  00FAF0  6E12               	movwf	printf@f,c
  2125  00FAF2  0EFF               	movlw	high STR_19
  2126  00FAF4  6E13               	movwf	printf@f+1,c
  2127  00FAF6  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2128  00FAFA  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2129  00FAFE  EC94  F077         	call	_timePassed	;wreg free
  2130  00FB02  C007  F014         	movff	?_timePassed,?_printf+2
  2131  00FB06  C008  F015         	movff	?_timePassed+1,?_printf+3
  2132  00FB0A  EC4C  F078         	call	_printf	;wreg free
  2133                           
  2134                           ;main.c: 273: }
  2135  00FB0E  D484               	goto	l2826
  2136  00FB10                     l3076:
  2137                           
  2138                           ;main.c: 274: else if(timePassed(prevSoupTime) < 13){
  2139  00FB10  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2140  00FB14  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2141  00FB18  EC94  F077         	call	_timePassed	;wreg free
  2142  00FB1C  BE08               	btfsc	?_timePassed+1,7,c
  2143  00FB1E  D006               	goto	l3078
  2144  00FB20  5008               	movf	?_timePassed+1,w,c
  2145  00FB22  E171               	bnz	l3106
  2146  00FB24  0E0D               	movlw	13
  2147  00FB26  5C07               	subwf	?_timePassed,w,c
  2148  00FB28  B0D8               	btfsc	status,0,c
  2149  00FB2A  D06D               	goto	l3106
  2150  00FB2C                     l3078:
  2151                           
  2152                           ;main.c: 275: S1backward();
  2153  00FB2C  EC86  F074         	call	_S1backward	;wreg free
  2154                           
  2155                           ;main.c: 276: printf("returning %d", timePassed(prevSoupTime));
  2156  00FB30  0E61               	movlw	low STR_20
  2157  00FB32  6E12               	movwf	printf@f,c
  2158  00FB34  0EFF               	movlw	high STR_20
  2159  00FB36  6E13               	movwf	printf@f+1,c
  2160  00FB38  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2161  00FB3C  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2162  00FB40  EC94  F077         	call	_timePassed	;wreg free
  2163  00FB44  C007  F014         	movff	?_timePassed,?_printf+2
  2164  00FB48  C008  F015         	movff	?_timePassed+1,?_printf+3
  2165  00FB4C  EC4C  F078         	call	_printf	;wreg free
  2166                           
  2167                           ;main.c: 277: }
  2168  00FB50  D463               	goto	l2826
  2169  00FB52                     l3084:
  2170                           
  2171                           ;main.c: 280: else if(labelState == 0){
  2172  00FB52  5044               	movf	main@labelState,w,c
  2173  00FB54  1045               	iorwf	main@labelState+1,w,c
  2174  00FB56  A4D8               	btfss	status,2,c
  2175  00FB58  D05A               	goto	l3108
  2176                           
  2177                           ;main.c: 281: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2178  00FB5A  0E01               	movlw	1
  2179  00FB5C  ECB1  F073         	call	_lcdInst
  2180  00FB60  0E68               	movlw	104
  2181  00FB62  6E29               	movwf	??_main& (0+255),c
  2182  00FB64  0EE4               	movlw	228
  2183  00FB66                     u2577:
  2184  00FB66  2EE8               	decfsz	wreg,f,c
  2185  00FB68  D7FE               	bra	u2577
  2186  00FB6A  2E29               	decfsz	??_main& (0+255),f,c
  2187  00FB6C  D7FC               	bra	u2577
  2188  00FB6E  D000               	nop2	
  2189                           
  2190                           ;main.c: 282: printf("label");
  2191  00FB70  0E33               	movlw	low (STR_13+8)
  2192  00FB72  6E12               	movwf	printf@f,c
  2193  00FB74  0EFF               	movlw	high (STR_13+8)
  2194  00FB76  6E13               	movwf	printf@f+1,c
  2195  00FB78  EC4C  F078         	call	_printf	;wreg free
  2196                           
  2197                           ;main.c: 283: lcdInst(0b11000000);;
  2198  00FB7C  0EC0               	movlw	192
  2199  00FB7E  ECB1  F073         	call	_lcdInst
  2200                           
  2201                           ;main.c: 284: if(timePassed(prevSoupTime) < 8){
  2202  00FB82  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2203  00FB86  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2204  00FB8A  EC94  F077         	call	_timePassed	;wreg free
  2205  00FB8E  BE08               	btfsc	?_timePassed+1,7,c
  2206  00FB90  D006               	goto	l3096
  2207  00FB92  5008               	movf	?_timePassed+1,w,c
  2208  00FB94  E117               	bnz	l3100
  2209  00FB96  0E08               	movlw	8
  2210  00FB98  5C07               	subwf	?_timePassed,w,c
  2211  00FB9A  B0D8               	btfsc	status,0,c
  2212  00FB9C  D013               	goto	l3100
  2213  00FB9E                     l3096:
  2214                           
  2215                           ;main.c: 285: S1backward();
  2216  00FB9E  EC86  F074         	call	_S1backward	;wreg free
  2217                           
  2218                           ;main.c: 286: printf("sorting %d", timePassed(prevSoupTime));
  2219  00FBA2  0EAA               	movlw	low STR_19
  2220  00FBA4  6E12               	movwf	printf@f,c
  2221  00FBA6  0EFF               	movlw	high STR_19
  2222  00FBA8  6E13               	movwf	printf@f+1,c
  2223  00FBAA  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2224  00FBAE  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2225  00FBB2  EC94  F077         	call	_timePassed	;wreg free
  2226  00FBB6  C007  F014         	movff	?_timePassed,?_printf+2
  2227  00FBBA  C008  F015         	movff	?_timePassed+1,?_printf+3
  2228  00FBBE  EC4C  F078         	call	_printf	;wreg free
  2229                           
  2230                           ;main.c: 287: }
  2231  00FBC2  D42A               	goto	l2826
  2232  00FBC4                     l3100:
  2233                           
  2234                           ;main.c: 288: else if(timePassed(prevSoupTime) < 13){
  2235  00FBC4  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2236  00FBC8  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2237  00FBCC  EC94  F077         	call	_timePassed	;wreg free
  2238  00FBD0  BE08               	btfsc	?_timePassed+1,7,c
  2239  00FBD2  D006               	goto	l3102
  2240  00FBD4  5008               	movf	?_timePassed+1,w,c
  2241  00FBD6  E117               	bnz	l3106
  2242  00FBD8  0E0D               	movlw	13
  2243  00FBDA  5C07               	subwf	?_timePassed,w,c
  2244  00FBDC  B0D8               	btfsc	status,0,c
  2245  00FBDE  D013               	goto	l3106
  2246  00FBE0                     l3102:
  2247                           
  2248                           ;main.c: 289: S1forward();
  2249  00FBE0  ECA6  F074         	call	_S1forward	;wreg free
  2250                           
  2251                           ;main.c: 290: printf("returning %d", timePassed(prevSoupTime));
  2252  00FBE4  0E61               	movlw	low STR_20
  2253  00FBE6  6E12               	movwf	printf@f,c
  2254  00FBE8  0EFF               	movlw	high STR_20
  2255  00FBEA  6E13               	movwf	printf@f+1,c
  2256  00FBEC  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2257  00FBF0  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2258  00FBF4  EC94  F077         	call	_timePassed	;wreg free
  2259  00FBF8  C007  F014         	movff	?_timePassed,?_printf+2
  2260  00FBFC  C008  F015         	movff	?_timePassed+1,?_printf+3
  2261  00FC00  EC4C  F078         	call	_printf	;wreg free
  2262                           
  2263                           ;main.c: 291: }
  2264  00FC04  D409               	goto	l2826
  2265  00FC06                     l3106:
  2266                           
  2267                           ;main.c: 292: else{labelState = 100;}
  2268  00FC06  0E00               	movlw	0
  2269  00FC08  6E45               	movwf	main@labelState+1,c
  2270  00FC0A  0E64               	movlw	100
  2271  00FC0C  D066               	goto	L1
  2272  00FC0E                     l3108:
  2273                           
  2274                           ;main.c: 294: else{
  2275                           ;main.c: 295: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2276  00FC0E  0E01               	movlw	1
  2277  00FC10  ECB1  F073         	call	_lcdInst
  2278  00FC14  0E68               	movlw	104
  2279  00FC16  6E29               	movwf	??_main& (0+255),c
  2280  00FC18  0EE4               	movlw	228
  2281  00FC1A                     u2587:
  2282  00FC1A  2EE8               	decfsz	wreg,f,c
  2283  00FC1C  D7FE               	bra	u2587
  2284  00FC1E  2E29               	decfsz	??_main& (0+255),f,c
  2285  00FC20  D7FC               	bra	u2587
  2286  00FC22  D000               	nop2	
  2287                           
  2288                           ;main.c: 296: printf("finished %d", timePassed(prevSoupTime));
  2289  00FC24  0E92               	movlw	low STR_24
  2290  00FC26  6E12               	movwf	printf@f,c
  2291  00FC28  0EFF               	movlw	high STR_24
  2292  00FC2A  6E13               	movwf	printf@f+1,c
  2293  00FC2C  C04A  F007         	movff	main@prevSoupTime,timePassed@start
  2294  00FC30  C04B  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2295  00FC34  EC94  F077         	call	_timePassed	;wreg free
  2296  00FC38  C007  F014         	movff	?_timePassed,?_printf+2
  2297  00FC3C  C008  F015         	movff	?_timePassed+1,?_printf+3
  2298  00FC40  EC4C  F078         	call	_printf	;wreg free
  2299                           
  2300                           ;main.c: 297: prevSoupTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  2301  00FC44  C04E  F029         	movff	_time+2,??_main
  2302  00FC48  0E0F               	movlw	15
  2303  00FC4A  1629               	andwf	??_main,f,c
  2304  00FC4C  5029               	movf	??_main,w,c
  2305  00FC4E  6E01               	movwf	___wmul@multiplier,c
  2306  00FC50  6A02               	clrf	___wmul@multiplier+1,c
  2307  00FC52  0E0E               	movlw	14
  2308  00FC54  6E04               	movwf	___wmul@multiplicand+1,c
  2309  00FC56  0E10               	movlw	16
  2310  00FC58  6E03               	movwf	___wmul@multiplicand,c
  2311  00FC5A  EC15  F074         	call	___wmul	;wreg free
  2312  00FC5E  C04C  F02A         	movff	_time,??_main+1
  2313  00FC62  3A2A               	swapf	??_main+1,f,c
  2314  00FC64  0E0F               	movlw	15
  2315  00FC66  162A               	andwf	??_main+1,f,c
  2316  00FC68  0E0F               	movlw	15
  2317  00FC6A  162A               	andwf	??_main+1,f,c
  2318  00FC6C  502A               	movf	??_main+1,w,c
  2319  00FC6E  0D0A               	mullw	10
  2320  00FC70  504C               	movf	_time,w,c
  2321  00FC72  0B0F               	andlw	15
  2322  00FC74  6E2B               	movwf	(??_main+2)& (0+255),c
  2323  00FC76  6A2C               	clrf	(??_main+3)& (0+255),c
  2324  00FC78  50F3               	movf	prodl,w,c
  2325  00FC7A  262B               	addwf	??_main+2,f,c
  2326  00FC7C  50F4               	movf	prodh,w,c
  2327  00FC7E  222C               	addwfc	??_main+3,f,c
  2328  00FC80  C04D  F02D         	movff	_time+1,??_main+4
  2329  00FC84  0E0F               	movlw	15
  2330  00FC86  162D               	andwf	??_main+4,f,c
  2331  00FC88  502D               	movf	??_main+4,w,c
  2332  00FC8A  0D3C               	mullw	60
  2333  00FC8C  50F3               	movf	prodl,w,c
  2334  00FC8E  262B               	addwf	??_main+2,f,c
  2335  00FC90  50F4               	movf	prodh,w,c
  2336  00FC92  222C               	addwfc	??_main+3,f,c
  2337  00FC94  C04D  F02E         	movff	_time+1,??_main+5
  2338  00FC98  3A2E               	swapf	??_main+5,f,c
  2339  00FC9A  0E0F               	movlw	15
  2340  00FC9C  162E               	andwf	??_main+5,f,c
  2341  00FC9E  0E0F               	movlw	15
  2342  00FCA0  162E               	andwf	??_main+5,f,c
  2343  00FCA2  502E               	movf	??_main+5,w,c
  2344  00FCA4  0D0A               	mullw	10
  2345  00FCA6  50F3               	movf	prodl,w,c
  2346  00FCA8  262B               	addwf	??_main+2,f,c
  2347  00FCAA  50F4               	movf	prodh,w,c
  2348  00FCAC  222C               	addwfc	??_main+3,f,c
  2349  00FCAE  5001               	movf	?___wmul,w,c
  2350  00FCB0  262B               	addwf	??_main+2,f,c
  2351  00FCB2  5002               	movf	?___wmul+1,w,c
  2352  00FCB4  222C               	addwfc	??_main+3,f,c
  2353  00FCB6  C04E  F02F         	movff	_time+2,??_main+6
  2354  00FCBA  3A2F               	swapf	??_main+6,f,c
  2355  00FCBC  0E0F               	movlw	15
  2356  00FCBE  162F               	andwf	??_main+6,f,c
  2357  00FCC0  0E0F               	movlw	15
  2358  00FCC2  162F               	andwf	??_main+6,f,c
  2359  00FCC4  502F               	movf	??_main+6,w,c
  2360  00FCC6  0D0A               	mullw	10
  2361  00FCC8  50F3               	movf	prodl,w,c
  2362  00FCCA  242B               	addwf	??_main+2,w,c
  2363  00FCCC  6E4A               	movwf	main@prevSoupTime,c
  2364  00FCCE  50F4               	movf	prodh,w,c
  2365  00FCD0  202C               	addwfc	??_main+3,w,c
  2366  00FCD2  6E4B               	movwf	main@prevSoupTime+1,c
  2367                           
  2368                           ;main.c: 298: labelState = 0;
  2369  00FCD4  0E00               	movlw	0
  2370  00FCD6  6E45               	movwf	main@labelState+1,c
  2371  00FCD8  0E00               	movlw	0
  2372  00FCDA                     L1:
  2373  00FCDA  6E44               	movwf	main@labelState,c
  2374                           
  2375                           ;main.c: 299: }
  2376                           ;main.c: 301: }
  2377  00FCDC  EF0C  F07A         	goto	l2826
  2378  00FCE0                     l3118:
  2379                           
  2380                           ;main.c: 302: else{
  2381                           ;main.c: 303: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2382  00FCE0  0E01               	movlw	1
  2383  00FCE2  ECB1  F073         	call	_lcdInst
  2384  00FCE6  0E68               	movlw	104
  2385  00FCE8  6E29               	movwf	??_main& (0+255),c
  2386  00FCEA  0EE4               	movlw	228
  2387  00FCEC                     u2597:
  2388  00FCEC  2EE8               	decfsz	wreg,f,c
  2389  00FCEE  D7FE               	bra	u2597
  2390  00FCF0  2E29               	decfsz	??_main& (0+255),f,c
  2391  00FCF2  D7FC               	bra	u2597
  2392  00FCF4  D000               	nop2	
  2393                           
  2394                           ;main.c: 304: printf("sorting");
  2395  00FCF6  0EEE               	movlw	low STR_25
  2396  00FCF8  6E12               	movwf	printf@f,c
  2397  00FCFA  0EFF               	movlw	high STR_25
  2398  00FCFC  6E13               	movwf	printf@f+1,c
  2399  00FCFE  EC4C  F078         	call	_printf	;wreg free
  2400                           
  2401                           ;main.c: 305: keypress = (0);
  2402  00FD02  0E00               	movlw	0
  2403  00FD04  6E59               	movwf	_keypress,c	;volatile
  2404                           
  2405                           ;main.c: 306: keyinterrupt();
  2406  00FD06  ECD0  F073         	call	_keyinterrupt	;wreg free
  2407                           
  2408                           ;main.c: 307: if (keypress != (0)) {
  2409  00FD0A  5059               	movf	_keypress,w,c	;volatile
  2410  00FD0C  B4D8               	btfsc	status,2,c
  2411  00FD0E  D004               	goto	l3132
  2412                           
  2413                           ;main.c: 308: standby = 1;
  2414  00FD10  0E00               	movlw	0
  2415  00FD12  6E49               	movwf	main@standby+1,c
  2416  00FD14  0E01               	movlw	1
  2417  00FD16  6E48               	movwf	main@standby,c
  2418  00FD18                     l3132:
  2419                           
  2420                           ;main.c: 309: }
  2421                           ;main.c: 323: if(timePassed(canCheck) > 10){
  2422  00FD18  C03C  F007         	movff	main@canCheck,timePassed@start
  2423  00FD1C  C03D  F008         	movff	main@canCheck+1,timePassed@start+1
  2424  00FD20  EC94  F077         	call	_timePassed	;wreg free
  2425  00FD24  BE08               	btfsc	?_timePassed+1,7,c
  2426  00FD26  D066               	goto	l3148
  2427  00FD28  5008               	movf	?_timePassed+1,w,c
  2428  00FD2A  E104               	bnz	u2340
  2429  00FD2C  0E0B               	movlw	11
  2430  00FD2E  5C07               	subwf	?_timePassed,w,c
  2431  00FD30  A0D8               	btfss	status,0,c
  2432  00FD32  D060               	goto	l3148
  2433  00FD34                     u2340:
  2434                           
  2435                           ;main.c: 324: readADC(5);
  2436  00FD34  0E05               	movlw	5
  2437  00FD36  EC03  F074         	call	_readADC
  2438                           
  2439                           ;main.c: 325: soupLoad = ADRESH;
  2440  00FD3A  CFC4 F03E          	movff	4036,main@soupLoad	;volatile
  2441  00FD3E  6A3F               	clrf	main@soupLoad+1,c
  2442                           
  2443                           ;main.c: 326: readADC(2);
  2444  00FD40  0E02               	movlw	2
  2445  00FD42  EC03  F074         	call	_readADC
  2446                           
  2447                           ;main.c: 327: sodaLoad = ADRESH;
  2448  00FD46  CFC4 F040          	movff	4036,main@sodaLoad	;volatile
  2449  00FD4A  6A41               	clrf	main@sodaLoad+1,c
  2450                           
  2451                           ;main.c: 328: if (!soupLoad & !sodaLoad){
  2452  00FD4C  503E               	movf	main@soupLoad,w,c
  2453  00FD4E  103F               	iorwf	main@soupLoad+1,w,c
  2454  00FD50  A4D8               	btfss	status,2,c
  2455  00FD52  D008               	goto	l3146
  2456  00FD54  5040               	movf	main@sodaLoad,w,c
  2457  00FD56  1041               	iorwf	main@sodaLoad+1,w,c
  2458  00FD58  A4D8               	btfss	status,2,c
  2459  00FD5A  D004               	goto	l3146
  2460                           
  2461                           ;main.c: 329: standby = 1;
  2462  00FD5C  0E00               	movlw	0
  2463  00FD5E  6E49               	movwf	main@standby+1,c
  2464  00FD60  0E01               	movlw	1
  2465  00FD62  6E48               	movwf	main@standby,c
  2466  00FD64                     l3146:
  2467                           
  2468                           ;main.c: 330: }
  2469                           ;main.c: 331: canCheck = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x
      +                          0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  2470  00FD64  C04E  F029         	movff	_time+2,??_main
  2471  00FD68  0E0F               	movlw	15
  2472  00FD6A  1629               	andwf	??_main,f,c
  2473  00FD6C  5029               	movf	??_main,w,c
  2474  00FD6E  6E01               	movwf	___wmul@multiplier,c
  2475  00FD70  6A02               	clrf	___wmul@multiplier+1,c
  2476  00FD72  0E0E               	movlw	14
  2477  00FD74  6E04               	movwf	___wmul@multiplicand+1,c
  2478  00FD76  0E10               	movlw	16
  2479  00FD78  6E03               	movwf	___wmul@multiplicand,c
  2480  00FD7A  EC15  F074         	call	___wmul	;wreg free
  2481  00FD7E  C04C  F02A         	movff	_time,??_main+1
  2482  00FD82  3A2A               	swapf	??_main+1,f,c
  2483  00FD84  0E0F               	movlw	15
  2484  00FD86  162A               	andwf	??_main+1,f,c
  2485  00FD88  0E0F               	movlw	15
  2486  00FD8A  162A               	andwf	??_main+1,f,c
  2487  00FD8C  502A               	movf	??_main+1,w,c
  2488  00FD8E  0D0A               	mullw	10
  2489  00FD90  504C               	movf	_time,w,c
  2490  00FD92  0B0F               	andlw	15
  2491  00FD94  6E2B               	movwf	(??_main+2)& (0+255),c
  2492  00FD96  6A2C               	clrf	(??_main+3)& (0+255),c
  2493  00FD98  50F3               	movf	prodl,w,c
  2494  00FD9A  262B               	addwf	??_main+2,f,c
  2495  00FD9C  50F4               	movf	prodh,w,c
  2496  00FD9E  222C               	addwfc	??_main+3,f,c
  2497  00FDA0  C04D  F02D         	movff	_time+1,??_main+4
  2498  00FDA4  0E0F               	movlw	15
  2499  00FDA6  162D               	andwf	??_main+4,f,c
  2500  00FDA8  502D               	movf	??_main+4,w,c
  2501  00FDAA  0D3C               	mullw	60
  2502  00FDAC  50F3               	movf	prodl,w,c
  2503  00FDAE  262B               	addwf	??_main+2,f,c
  2504  00FDB0  50F4               	movf	prodh,w,c
  2505  00FDB2  222C               	addwfc	??_main+3,f,c
  2506  00FDB4  C04D  F02E         	movff	_time+1,??_main+5
  2507  00FDB8  3A2E               	swapf	??_main+5,f,c
  2508  00FDBA  0E0F               	movlw	15
  2509  00FDBC  162E               	andwf	??_main+5,f,c
  2510  00FDBE  0E0F               	movlw	15
  2511  00FDC0  162E               	andwf	??_main+5,f,c
  2512  00FDC2  502E               	movf	??_main+5,w,c
  2513  00FDC4  0D0A               	mullw	10
  2514  00FDC6  50F3               	movf	prodl,w,c
  2515  00FDC8  262B               	addwf	??_main+2,f,c
  2516  00FDCA  50F4               	movf	prodh,w,c
  2517  00FDCC  222C               	addwfc	??_main+3,f,c
  2518  00FDCE  5001               	movf	?___wmul,w,c
  2519  00FDD0  262B               	addwf	??_main+2,f,c
  2520  00FDD2  5002               	movf	?___wmul+1,w,c
  2521  00FDD4  222C               	addwfc	??_main+3,f,c
  2522  00FDD6  C04E  F02F         	movff	_time+2,??_main+6
  2523  00FDDA  3A2F               	swapf	??_main+6,f,c
  2524  00FDDC  0E0F               	movlw	15
  2525  00FDDE  162F               	andwf	??_main+6,f,c
  2526  00FDE0  0E0F               	movlw	15
  2527  00FDE2  162F               	andwf	??_main+6,f,c
  2528  00FDE4  502F               	movf	??_main+6,w,c
  2529  00FDE6  0D0A               	mullw	10
  2530  00FDE8  50F3               	movf	prodl,w,c
  2531  00FDEA  242B               	addwf	??_main+2,w,c
  2532  00FDEC  6E3C               	movwf	main@canCheck,c
  2533  00FDEE  50F4               	movf	prodh,w,c
  2534  00FDF0  202C               	addwfc	??_main+3,w,c
  2535  00FDF2  6E3D               	movwf	main@canCheck+1,c
  2536  00FDF4                     l3148:
  2537                           
  2538                           ;main.c: 332: }
  2539                           ;main.c: 335: if(standby==1){
  2540  00FDF4  0448               	decf	main@standby,w,c
  2541  00FDF6  1049               	iorwf	main@standby+1,w,c
  2542  00FDF8  A4D8               	btfss	status,2,c
  2543  00FDFA  EF0C  F07A         	goto	l2826
  2544                           
  2545                           ;main.c: 336: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2546  00FDFE  0E01               	movlw	1
  2547  00FE00  ECB1  F073         	call	_lcdInst
  2548  00FE04  0E68               	movlw	104
  2549  00FE06  6E29               	movwf	??_main& (0+255),c
  2550  00FE08  0EE4               	movlw	228
  2551  00FE0A                     u2607:
  2552  00FE0A  2EE8               	decfsz	wreg,f,c
  2553  00FE0C  D7FE               	bra	u2607
  2554  00FE0E  2E29               	decfsz	??_main& (0+255),f,c
  2555  00FE10  D7FC               	bra	u2607
  2556  00FE12  D000               	nop2	
  2557                           
  2558                           ;main.c: 337: printf("Finished sorting! ");
  2559  00FE14  0E8B               	movlw	low STR_26
  2560  00FE16  6E12               	movwf	printf@f,c
  2561  00FE18  0EFE               	movlw	high STR_26
  2562  00FE1A  6E13               	movwf	printf@f+1,c
  2563  00FE1C  EC4C  F078         	call	_printf	;wreg free
  2564                           
  2565                           ;main.c: 338: _delay((unsigned long)((500)*(32000000/4000.0)));
  2566  00FE20  0E15               	movlw	21
  2567  00FE22  6E2A               	movwf	(??_main+1)& (0+255),c
  2568  00FE24  0E4B               	movlw	75
  2569  00FE26  6E29               	movwf	??_main& (0+255),c
  2570  00FE28  0EBE               	movlw	190
  2571  00FE2A                     u2617:
  2572  00FE2A  2EE8               	decfsz	wreg,f,c
  2573  00FE2C  D7FE               	bra	u2617
  2574  00FE2E  2E29               	decfsz	??_main& (0+255),f,c
  2575  00FE30  D7FC               	bra	u2617
  2576  00FE32  2E2A               	decfsz	(??_main+1)& (0+255),f,c
  2577  00FE34  D7FA               	bra	u2617
  2578  00FE36  D000               	nop2	
  2579                           
  2580                           ;main.c: 339: PWM1off();
  2581  00FE38  ECA2  F073         	call	_PWM1off	;wreg free
  2582                           
  2583                           ;main.c: 340: dc = 0;
  2584  00FE3C  0E00               	movlw	0
  2585  00FE3E  6E39               	movwf	main@dc+1,c
  2586  00FE40  0E00               	movlw	0
  2587  00FE42  6E38               	movwf	main@dc,c
  2588                           
  2589                           ;main.c: 341: updateEEPROM(timePassed(startTime));
  2590  00FE44  C042  F007         	movff	main@startTime,timePassed@start
  2591  00FE48  C043  F008         	movff	main@startTime+1,timePassed@start+1
  2592  00FE4C  EC94  F077         	call	_timePassed	;wreg free
  2593  00FE50  C007  F012         	movff	?_timePassed,updateEEPROM@time
  2594  00FE54  C008  F013         	movff	?_timePassed+1,updateEEPROM@time+1
  2595  00FE58  EC4F  F074         	call	_updateEEPROM	;wreg free
  2596  00FE5C  EF0C  F07A         	goto	l2826
  2597  00FE60                     __end_of_main:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           prodh	equ	0xFF4
  2601                           prodl	equ	0xFF3
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _updateTime *****************
  2607 ;; Defined at:
  2608 ;;		line 89 in file "I2C.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  j               1    3[COMRAM] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    2
  2629 ;; This function calls:
  2630 ;;		_I2C_Master_Read
  2631 ;;		_I2C_Master_Start
  2632 ;;		_I2C_Master_Stop
  2633 ;;		_I2C_Master_Write
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text1
  2640  00EDCC                     __ptext1:
  2641                           	opt stack 0
  2642  00EDCC                     _updateTime:
  2643                           	opt stack 28
  2644                           
  2645                           ;I2C.c: 91: I2C_Master_Start();
  2646                           
  2647                           ;incstack = 0
  2648  00EDCC  EC9A  F073         	call	_I2C_Master_Start	;wreg free
  2649                           
  2650                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  2651  00EDD0  0E00               	movlw	0
  2652  00EDD2  6E03               	movwf	I2C_Master_Write@d+1,c
  2653  00EDD4  0ED0               	movlw	208
  2654  00EDD6  6E02               	movwf	I2C_Master_Write@d,c
  2655  00EDD8  ECAC  F073         	call	_I2C_Master_Write	;wreg free
  2656                           
  2657                           ;I2C.c: 93: I2C_Master_Write(0x00);
  2658  00EDDC  0E00               	movlw	0
  2659  00EDDE  6E03               	movwf	I2C_Master_Write@d+1,c
  2660  00EDE0  0E00               	movlw	0
  2661  00EDE2  6E02               	movwf	I2C_Master_Write@d,c
  2662  00EDE4  ECAC  F073         	call	_I2C_Master_Write	;wreg free
  2663                           
  2664                           ;I2C.c: 94: I2C_Master_Stop();
  2665  00EDE8  EC9E  F073         	call	_I2C_Master_Stop	;wreg free
  2666                           
  2667                           ;I2C.c: 97: I2C_Master_Start();
  2668  00EDEC  EC9A  F073         	call	_I2C_Master_Start	;wreg free
  2669                           
  2670                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  2671  00EDF0  0E00               	movlw	0
  2672  00EDF2  6E03               	movwf	I2C_Master_Write@d+1,c
  2673  00EDF4  0ED1               	movlw	209
  2674  00EDF6  6E02               	movwf	I2C_Master_Write@d,c
  2675  00EDF8  ECAC  F073         	call	_I2C_Master_Write	;wreg free
  2676                           
  2677                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  2678  00EDFC  0E00               	movlw	0
  2679  00EDFE  6E04               	movwf	updateTime@j,c
  2680  00EE00                     l2568:
  2681  00EE00  0E05               	movlw	5
  2682  00EE02  6404               	cpfsgt	updateTime@j,c
  2683  00EE04  D001               	goto	l2572
  2684  00EE06  D00E               	goto	l2578
  2685  00EE08                     l2572:
  2686                           
  2687                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  2688  00EE08  5004               	movf	updateTime@j,w,c
  2689  00EE0A  0D01               	mullw	1
  2690  00EE0C  0E4C               	movlw	low _time
  2691  00EE0E  24F3               	addwf	prodl,w,c
  2692  00EE10  6ED9               	movwf	fsr2l,c
  2693  00EE12  0E00               	movlw	high _time
  2694  00EE14  20F4               	addwfc	prodh,w,c
  2695  00EE16  6EDA               	movwf	fsr2h,c
  2696  00EE18  0E01               	movlw	1
  2697  00EE1A  EC28  F074         	call	_I2C_Master_Read
  2698  00EE1E  6EDF               	movwf	indf2,c
  2699  00EE20  2A04               	incf	updateTime@j,f,c
  2700  00EE22  D7EE               	goto	l2568
  2701  00EE24                     l2578:
  2702                           
  2703                           ;I2C.c: 101: }
  2704                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  2705  00EE24  0E00               	movlw	0
  2706  00EE26  EC28  F074         	call	_I2C_Master_Read
  2707  00EE2A  6E52               	movwf	_time+6,c
  2708                           
  2709                           ;I2C.c: 103: I2C_Master_Stop();
  2710  00EE2C  EC9E  F073         	call	_I2C_Master_Stop	;wreg free
  2711  00EE30  0012               	return		;funcret
  2712  00EE32                     __end_of_updateTime:
  2713                           	opt stack 0
  2714                           tblptru	equ	0xFF8
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           indf2	equ	0xFDF
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _I2C_Master_Write *****************
  2725 ;; Defined at:
  2726 ;;		line 54 in file "I2C.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  d               2    1[COMRAM] unsigned int 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;Total ram usage:        2 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    1
  2747 ;; This function calls:
  2748 ;;		_I2C_Master_Wait
  2749 ;; This function is called by:
  2750 ;;		_updateTime
  2751 ;;		_set_time
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text2
  2756  00E758                     __ptext2:
  2757                           	opt stack 0
  2758  00E758                     _I2C_Master_Write:
  2759                           	opt stack 28
  2760                           
  2761                           ;I2C.c: 56: I2C_Master_Wait();
  2762                           
  2763                           ;incstack = 0
  2764  00E758  ECBD  F073         	call	_I2C_Master_Wait	;wreg free
  2765                           
  2766                           ;I2C.c: 57: SSPBUF = d;
  2767  00E75C  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2768  00E760  0012               	return		;funcret
  2769  00E762                     __end_of_I2C_Master_Write:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           indf2	equ	0xFDF
  2777                           fsr2h	equ	0xFDA
  2778                           fsr2l	equ	0xFD9
  2779                           status	equ	0xFD8
  2780                           
  2781 ;; *************** function _I2C_Master_Stop *****************
  2782 ;; Defined at:
  2783 ;;		line 48 in file "I2C.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2, status,0, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;Total ram usage:        0 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    1
  2804 ;; This function calls:
  2805 ;;		_I2C_Master_Wait
  2806 ;; This function is called by:
  2807 ;;		_updateTime
  2808 ;;		_set_time
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text3
  2813  00E73C                     __ptext3:
  2814                           	opt stack 0
  2815  00E73C                     _I2C_Master_Stop:
  2816                           	opt stack 28
  2817                           
  2818                           ;I2C.c: 50: I2C_Master_Wait();
  2819                           
  2820                           ;incstack = 0
  2821  00E73C  ECBD  F073         	call	_I2C_Master_Wait	;wreg free
  2822                           
  2823                           ;I2C.c: 51: PEN = 1;
  2824  00E740  84C5               	bsf	4037,2,c	;volatile
  2825  00E742  0012               	return		;funcret
  2826  00E744                     __end_of_I2C_Master_Stop:
  2827                           	opt stack 0
  2828                           tblptru	equ	0xFF8
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           indf2	equ	0xFDF
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _I2C_Master_Start *****************
  2839 ;; Defined at:
  2840 ;;		line 36 in file "I2C.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        0 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    1
  2861 ;; This function calls:
  2862 ;;		_I2C_Master_Wait
  2863 ;; This function is called by:
  2864 ;;		_updateTime
  2865 ;;		_set_time
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text4
  2870  00E734                     __ptext4:
  2871                           	opt stack 0
  2872  00E734                     _I2C_Master_Start:
  2873                           	opt stack 28
  2874                           
  2875                           ;I2C.c: 38: I2C_Master_Wait();
  2876                           
  2877                           ;incstack = 0
  2878  00E734  ECBD  F073         	call	_I2C_Master_Wait	;wreg free
  2879                           
  2880                           ;I2C.c: 39: SEN = 1;
  2881  00E738  80C5               	bsf	4037,0,c	;volatile
  2882  00E73A  0012               	return		;funcret
  2883  00E73C                     __end_of_I2C_Master_Start:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           indf2	equ	0xFDF
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _I2C_Master_Read *****************
  2896 ;; Defined at:
  2897 ;;		line 60 in file "I2C.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  a               1    wreg     unsigned char 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  a               1    1[COMRAM] unsigned char 
  2902 ;;  temp            1    2[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      unsigned char 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;Total ram usage:        2 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    1
  2919 ;; This function calls:
  2920 ;;		_I2C_Master_Wait
  2921 ;; This function is called by:
  2922 ;;		_updateTime
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text5
  2927  00E850                     __ptext5:
  2928                           	opt stack 0
  2929  00E850                     _I2C_Master_Read:
  2930                           	opt stack 28
  2931                           
  2932                           ;incstack = 0
  2933                           ;I2C_Master_Read@a stored from wreg
  2934  00E850  6E02               	movwf	I2C_Master_Read@a,c
  2935                           
  2936                           ;I2C.c: 62: unsigned char temp;
  2937                           ;I2C.c: 63: I2C_Master_Wait();
  2938  00E852  ECBD  F073         	call	_I2C_Master_Wait	;wreg free
  2939                           
  2940                           ;I2C.c: 64: RCEN = 1;
  2941  00E856  86C5               	bsf	4037,3,c	;volatile
  2942                           
  2943                           ;I2C.c: 65: I2C_Master_Wait();
  2944  00E858  ECBD  F073         	call	_I2C_Master_Wait	;wreg free
  2945                           
  2946                           ;I2C.c: 66: temp = SSPBUF;
  2947  00E85C  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  2948                           
  2949                           ;I2C.c: 67: I2C_Master_Wait();
  2950  00E860  ECBD  F073         	call	_I2C_Master_Wait	;wreg free
  2951                           
  2952                           ;I2C.c: 68: ACKDT = (a)?0:1;
  2953  00E864  5002               	movf	I2C_Master_Read@a,w,c
  2954  00E866  A4D8               	btfss	status,2,c
  2955  00E868  D002               	goto	u1630
  2956  00E86A  8AC5               	bsf	4037,5,c	;volatile
  2957  00E86C  D001               	goto	l2496
  2958  00E86E                     u1630:
  2959  00E86E  9AC5               	bcf	4037,5,c	;volatile
  2960  00E870                     l2496:
  2961                           
  2962                           ;I2C.c: 69: ACKEN = 1;
  2963  00E870  88C5               	bsf	4037,4,c	;volatile
  2964                           
  2965                           ;I2C.c: 70: return temp;
  2966  00E872  5003               	movf	I2C_Master_Read@temp,w,c
  2967  00E874  0012               	return	
  2968  00E876                     __end_of_I2C_Master_Read:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           indf2	equ	0xFDF
  2976                           fsr2h	equ	0xFDA
  2977                           fsr2l	equ	0xFD9
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _I2C_Master_Wait *****************
  2981 ;; Defined at:
  2982 ;;		line 31 in file "I2C.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;Total ram usage:        1 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_I2C_Master_Start
  3006 ;;		_I2C_Master_Stop
  3007 ;;		_I2C_Master_Write
  3008 ;;		_I2C_Master_Read
  3009 ;;		_I2C_Master_RepeatedStart
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text6
  3014  00E77A                     __ptext6:
  3015                           	opt stack 0
  3016  00E77A                     _I2C_Master_Wait:
  3017                           	opt stack 28
  3018  00E77A                     l258:
  3019  00E77A  B4C7               	btfsc	4039,2,c	;volatile
  3020  00E77C  D7FE               	goto	l258
  3021  00E77E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3022  00E782  0E1F               	movlw	31
  3023  00E784  1601               	andwf	??_I2C_Master_Wait,f,c
  3024  00E786  B4D8               	btfsc	status,2,c
  3025  00E788  0012               	return	
  3026  00E78A  D7F7               	goto	l258
  3027  00E78C                     __end_of_I2C_Master_Wait:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           indf2	equ	0xFDF
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _updateStepper *****************
  3040 ;; Defined at:
  3041 ;;		line 72 in file "motors.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text7
  3069  00E7E8                     __ptext7:
  3070                           	opt stack 0
  3071  00E7E8                     _updateStepper:
  3072                           	opt stack 30
  3073                           
  3074                           ;motors.c: 73: s++;
  3075                           
  3076                           ;incstack = 0
  3077  00E7E8  4A57               	infsnz	_s,f,c
  3078  00E7EA  2A58               	incf	_s+1,f,c
  3079                           
  3080                           ;motors.c: 74: if (s>4) {s=1;}
  3081  00E7EC  BE58               	btfsc	_s+1,7,c
  3082  00E7EE  0012               	return	
  3083  00E7F0  5058               	movf	_s+1,w,c
  3084  00E7F2  E104               	bnz	u1740
  3085  00E7F4  0E05               	movlw	5
  3086  00E7F6  5C57               	subwf	_s,w,c
  3087  00E7F8  A0D8               	btfss	status,0,c
  3088  00E7FA  0012               	return	
  3089  00E7FC                     u1740:
  3090  00E7FC  0E00               	movlw	0
  3091  00E7FE  6E58               	movwf	_s+1,c
  3092  00E800  0E01               	movlw	1
  3093  00E802  6E57               	movwf	_s,c
  3094  00E804  0012               	return	
  3095  00E806                     __end_of_updateStepper:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           indf2	equ	0xFDF
  3103                           fsr2h	equ	0xFDA
  3104                           fsr2l	equ	0xFD9
  3105                           status	equ	0xFD8
  3106                           
  3107 ;; *************** function _updateEEPROM *****************
  3108 ;; Defined at:
  3109 ;;		line 72 in file "interface.c"
  3110 ;; Parameters:    Size  Location     Type
  3111 ;;  time            2   17[COMRAM] int 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;		None
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      void 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;Total ram usage:        2 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    1
  3130 ;; This function calls:
  3131 ;;		_eepromRead
  3132 ;;		_eepromWrite
  3133 ;; This function is called by:
  3134 ;;		_main
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text8
  3139  00E89E                     __ptext8:
  3140                           	opt stack 0
  3141  00E89E                     _updateEEPROM:
  3142                           	opt stack 29
  3143                           
  3144                           ;interface.c: 73: eepromWrite(40, eepromRead(30));
  3145                           
  3146                           ;incstack = 0
  3147  00E89E  0E1E               	movlw	30
  3148  00E8A0  EC3B  F074         	call	_eepromRead
  3149  00E8A4  6E04               	movwf	eepromWrite@data,c
  3150  00E8A6  0E28               	movlw	40
  3151  00E8A8  EC6A  F074         	call	_eepromWrite
  3152                           
  3153                           ;interface.c: 74: eepromWrite(30, eepromRead(20));
  3154  00E8AC  0E14               	movlw	20
  3155  00E8AE  EC3B  F074         	call	_eepromRead
  3156  00E8B2  6E04               	movwf	eepromWrite@data,c
  3157  00E8B4  0E1E               	movlw	30
  3158  00E8B6  EC6A  F074         	call	_eepromWrite
  3159                           
  3160                           ;interface.c: 75: eepromWrite(20, eepromRead(10));
  3161  00E8BA  0E0A               	movlw	10
  3162  00E8BC  EC3B  F074         	call	_eepromRead
  3163  00E8C0  6E04               	movwf	eepromWrite@data,c
  3164  00E8C2  0E14               	movlw	20
  3165  00E8C4  EC6A  F074         	call	_eepromWrite
  3166                           
  3167                           ;interface.c: 76: eepromWrite(10, time);
  3168  00E8C8  C012  F004         	movff	updateEEPROM@time,eepromWrite@data
  3169  00E8CC  0E0A               	movlw	10
  3170  00E8CE  EC6A  F074         	call	_eepromWrite
  3171  00E8D2  0012               	return		;funcret
  3172  00E8D4                     __end_of_updateEEPROM:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           prodh	equ	0xFF4
  3176                           prodl	equ	0xFF3
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           indf2	equ	0xFDF
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _eepromWrite *****************
  3185 ;; Defined at:
  3186 ;;		line 46 in file "interface.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  address         1    wreg     char 
  3189 ;;  data            1    3[COMRAM] char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  address         1    6[COMRAM] char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2, status,0
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3201 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;Total ram usage:        4 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_updateEEPROM
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text9
  3215  00E8D4                     __ptext9:
  3216                           	opt stack 0
  3217  00E8D4                     _eepromWrite:
  3218                           	opt stack 29
  3219                           
  3220                           ;incstack = 0
  3221                           ;eepromWrite@address stored from wreg
  3222  00E8D4  6E07               	movwf	eepromWrite@address,c
  3223                           
  3224                           ;interface.c: 48: EEADRH = (signed char)(address >> 8);
  3225  00E8D6  C007  F005         	movff	eepromWrite@address,??_eepromWrite
  3226  00E8DA  0E08               	movlw	8
  3227  00E8DC  6E06               	movwf	(??_eepromWrite+1)& (0+255),c
  3228  00E8DE                     u1675:
  3229  00E8DE  3405               	rlcf	??_eepromWrite,w,c
  3230  00E8E0  3205               	rrcf	??_eepromWrite,f,c
  3231  00E8E2  2E06               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  3232  00E8E4  D7FC               	goto	u1675
  3233  00E8E6  5005               	movf	??_eepromWrite,w,c
  3234  00E8E8  6EAA               	movwf	4010,c	;volatile
  3235                           
  3236                           ;interface.c: 49: EEADR = (signed char)address;
  3237  00E8EA  C007  FFA9         	movff	eepromWrite@address,4009	;volatile
  3238                           
  3239                           ;interface.c: 51: EEDATA = data;
  3240  00E8EE  C004  FFA8         	movff	eepromWrite@data,4008	;volatile
  3241                           
  3242                           ;interface.c: 52: EECON1bits.EEPGD = 0;
  3243  00E8F2  9EA6               	bcf	4006,7,c	;volatile
  3244                           
  3245                           ;interface.c: 53: EECON1bits.CFGS = 0;
  3246  00E8F4  9CA6               	bcf	4006,6,c	;volatile
  3247                           
  3248                           ;interface.c: 54: EECON1bits.WREN = 1;
  3249  00E8F6  84A6               	bsf	4006,2,c	;volatile
  3250                           
  3251                           ;interface.c: 58: EECON2 = 0x55;
  3252  00E8F8  0E55               	movlw	85
  3253  00E8FA  6EA7               	movwf	4007,c	;volatile
  3254                           
  3255                           ;interface.c: 59: EECON2 = 0xAA;
  3256  00E8FC  0EAA               	movlw	170
  3257  00E8FE  6EA7               	movwf	4007,c	;volatile
  3258                           
  3259                           ;interface.c: 60: EECON1bits.WR = 1;
  3260  00E900  82A6               	bsf	4006,1,c	;volatile
  3261  00E902                     l484:
  3262  00E902  A8A1               	btfss	4001,4,c	;volatile
  3263  00E904  D7FE               	goto	l484
  3264                           
  3265                           ;interface.c: 66: }
  3266                           ;interface.c: 68: PIR2bits.EEIF = 0;
  3267  00E906  98A1               	bcf	4001,4,c	;volatile
  3268                           
  3269                           ;interface.c: 69: EECON1bits.WREN = 0;
  3270  00E908  94A6               	bcf	4006,2,c	;volatile
  3271  00E90A  0012               	return		;funcret
  3272  00E90C                     __end_of_eepromWrite:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           indf2	equ	0xFDF
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function _timePassed *****************
  3285 ;; Defined at:
  3286 ;;		line 19 in file "logic.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  start           2    6[COMRAM] int 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  2    6[COMRAM] int 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;Total ram usage:       11 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    1
  3307 ;; This function calls:
  3308 ;;		___wmul
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text10
  3315  00EF28                     __ptext10:
  3316                           	opt stack 0
  3317  00EF28                     _timePassed:
  3318                           	opt stack 29
  3319                           
  3320                           ;logic.c: 21: else{return ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10) - st
      +                          art;}
  3321                           
  3322                           ;logic.c: 20: if(((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) + ((
      +                          time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10) >= 86400){ret
      +                          urn ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) + ((time[1] & 0xF
  3323                           
  3324                           ;incstack = 0
  3325  00EF28  C007  F009         	movff	timePassed@start,??_timePassed
  3326  00EF2C  C008  F00A         	movff	timePassed@start+1,??_timePassed+1
  3327  00EF30  1E09               	comf	??_timePassed,f,c
  3328  00EF32  1E0A               	comf	??_timePassed+1,f,c
  3329  00EF34  4A09               	infsnz	??_timePassed,f,c
  3330  00EF36  2A0A               	incf	??_timePassed+1,f,c
  3331  00EF38  C04E  F00B         	movff	_time+2,??_timePassed+2
  3332  00EF3C  0E0F               	movlw	15
  3333  00EF3E  160B               	andwf	??_timePassed+2,f,c
  3334  00EF40  500B               	movf	??_timePassed+2,w,c
  3335  00EF42  6E01               	movwf	___wmul@multiplier,c
  3336  00EF44  6A02               	clrf	___wmul@multiplier+1,c
  3337  00EF46  0E0E               	movlw	14
  3338  00EF48  6E04               	movwf	___wmul@multiplicand+1,c
  3339  00EF4A  0E10               	movlw	16
  3340  00EF4C  6E03               	movwf	___wmul@multiplicand,c
  3341  00EF4E  EC15  F074         	call	___wmul	;wreg free
  3342  00EF52  C04C  F00C         	movff	_time,??_timePassed+3
  3343  00EF56  3A0C               	swapf	??_timePassed+3,f,c
  3344  00EF58  0E0F               	movlw	15
  3345  00EF5A  160C               	andwf	??_timePassed+3,f,c
  3346  00EF5C  0E0F               	movlw	15
  3347  00EF5E  160C               	andwf	??_timePassed+3,f,c
  3348  00EF60  500C               	movf	??_timePassed+3,w,c
  3349  00EF62  0D0A               	mullw	10
  3350  00EF64  504C               	movf	_time,w,c
  3351  00EF66  0B0F               	andlw	15
  3352  00EF68  6E0D               	movwf	(??_timePassed+4)& (0+255),c
  3353  00EF6A  6A0E               	clrf	(??_timePassed+5)& (0+255),c
  3354  00EF6C  50F3               	movf	prodl,w,c
  3355  00EF6E  260D               	addwf	??_timePassed+4,f,c
  3356  00EF70  50F4               	movf	prodh,w,c
  3357  00EF72  220E               	addwfc	??_timePassed+5,f,c
  3358  00EF74  C04D  F00F         	movff	_time+1,??_timePassed+6
  3359  00EF78  0E0F               	movlw	15
  3360  00EF7A  160F               	andwf	??_timePassed+6,f,c
  3361  00EF7C  500F               	movf	??_timePassed+6,w,c
  3362  00EF7E  0D3C               	mullw	60
  3363  00EF80  50F3               	movf	prodl,w,c
  3364  00EF82  260D               	addwf	??_timePassed+4,f,c
  3365  00EF84  50F4               	movf	prodh,w,c
  3366  00EF86  220E               	addwfc	??_timePassed+5,f,c
  3367  00EF88  C04D  F010         	movff	_time+1,??_timePassed+7
  3368  00EF8C  3A10               	swapf	??_timePassed+7,f,c
  3369  00EF8E  0E0F               	movlw	15
  3370  00EF90  1610               	andwf	??_timePassed+7,f,c
  3371  00EF92  0E0F               	movlw	15
  3372  00EF94  1610               	andwf	??_timePassed+7,f,c
  3373  00EF96  5010               	movf	??_timePassed+7,w,c
  3374  00EF98  0D0A               	mullw	10
  3375  00EF9A  50F3               	movf	prodl,w,c
  3376  00EF9C  260D               	addwf	??_timePassed+4,f,c
  3377  00EF9E  50F4               	movf	prodh,w,c
  3378  00EFA0  220E               	addwfc	??_timePassed+5,f,c
  3379  00EFA2  5001               	movf	?___wmul,w,c
  3380  00EFA4  260D               	addwf	??_timePassed+4,f,c
  3381  00EFA6  5002               	movf	?___wmul+1,w,c
  3382  00EFA8  220E               	addwfc	??_timePassed+5,f,c
  3383  00EFAA  C04E  F011         	movff	_time+2,??_timePassed+8
  3384  00EFAE  3A11               	swapf	??_timePassed+8,f,c
  3385  00EFB0  0E0F               	movlw	15
  3386  00EFB2  1611               	andwf	??_timePassed+8,f,c
  3387  00EFB4  0E0F               	movlw	15
  3388  00EFB6  1611               	andwf	??_timePassed+8,f,c
  3389  00EFB8  5011               	movf	??_timePassed+8,w,c
  3390  00EFBA  0D0A               	mullw	10
  3391  00EFBC  50F3               	movf	prodl,w,c
  3392  00EFBE  260D               	addwf	??_timePassed+4,f,c
  3393  00EFC0  50F4               	movf	prodh,w,c
  3394  00EFC2  220E               	addwfc	??_timePassed+5,f,c
  3395  00EFC4  5009               	movf	??_timePassed,w,c
  3396  00EFC6  240D               	addwf	??_timePassed+4,w,c
  3397  00EFC8  6E07               	movwf	?_timePassed,c
  3398  00EFCA  500A               	movf	??_timePassed+1,w,c
  3399  00EFCC  200E               	addwfc	??_timePassed+5,w,c
  3400  00EFCE  6E08               	movwf	?_timePassed+1,c
  3401  00EFD0  0012               	return	
  3402  00EFD2                     __end_of_timePassed:
  3403                           	opt stack 0
  3404                           tblptru	equ	0xFF8
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           indf2	equ	0xFDF
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _readADC *****************
  3415 ;; Defined at:
  3416 ;;		line 17 in file "main.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  channel         1    wreg     unsigned char 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  channel         1    1[COMRAM] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:        2 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           	psect	text11
  3444  00E806                     __ptext11:
  3445                           	opt stack 0
  3446  00E806                     _readADC:
  3447                           	opt stack 30
  3448                           
  3449                           ;incstack = 0
  3450                           ;readADC@channel stored from wreg
  3451  00E806  6E02               	movwf	readADC@channel,c
  3452                           
  3453                           ;main.c: 19: ADCON0 = ((channel <<2));
  3454  00E808  4402               	rlncf	readADC@channel,w,c
  3455  00E80A  46E8               	rlncf	wreg,f,c
  3456  00E80C  0BFC               	andlw	252
  3457  00E80E  6EC2               	movwf	4034,c	;volatile
  3458                           
  3459                           ;main.c: 20: ADCON0bits.ADON = 1;
  3460  00E810  80C2               	bsf	4034,0,c	;volatile
  3461                           
  3462                           ;main.c: 21: ADCON0bits.GO = 1;
  3463  00E812  82C2               	bsf	4034,1,c	;volatile
  3464                           
  3465                           ;main.c: 22: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0))
      +                          );}
  3466  00E814  D007               	goto	l2542
  3467  00E816                     l2540:
  3468  00E816  0E34               	movlw	52
  3469  00E818  6E01               	movwf	??_readADC& (0+255),c
  3470  00E81A  0EF2               	movlw	242
  3471  00E81C                     u2627:
  3472  00E81C  2EE8               	decfsz	wreg,f,c
  3473  00E81E  D7FE               	bra	u2627
  3474  00E820  2E01               	decfsz	??_readADC& (0+255),f,c
  3475  00E822  D7FC               	bra	u2627
  3476  00E824                     l2542:
  3477  00E824  A2C2               	btfss	4034,1,c	;volatile
  3478  00E826  0012               	return	
  3479  00E828  D7F6               	goto	l2540
  3480  00E82A                     __end_of_readADC:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           prodh	equ	0xFF4
  3484                           prodl	equ	0xFF3
  3485                           postinc0	equ	0xFEE
  3486                           wreg	equ	0xFE8
  3487                           indf2	equ	0xFDF
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _keyinterrupt *****************
  3493 ;; Defined at:
  3494 ;;		line 38 in file "main.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;Total ram usage:        0 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_main
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text12
  3522  00E7A0                     __ptext12:
  3523                           	opt stack 0
  3524  00E7A0                     _keyinterrupt:
  3525                           	opt stack 30
  3526                           
  3527                           ;main.c: 39: if(PORTBbits.RB1 == 1){
  3528                           
  3529                           ;incstack = 0
  3530  00E7A0  A281               	btfss	3969,1,c	;volatile
  3531  00E7A2  D006               	goto	l136
  3532                           
  3533                           ;main.c: 40: keypress = (PORTB & 0xF0)>>4;
  3534  00E7A4  3881               	swapf	3969,w,c	;volatile
  3535  00E7A6  0B0F               	andlw	15
  3536  00E7A8  0B0F               	andlw	15
  3537  00E7AA  6E59               	movwf	_keypress,c	;volatile
  3538  00E7AC                     l137:
  3539  00E7AC  B281               	btfsc	3969,1,c	;volatile
  3540  00E7AE  D7FE               	goto	l137
  3541  00E7B0                     l136:
  3542                           
  3543                           ;main.c: 46: }
  3544                           ;main.c: 52: }
  3545                           ;main.c: 53: __nop();
  3546  00E7B0  F000               	nop	
  3547  00E7B2  0012               	return		;funcret
  3548  00E7B4                     __end_of_keyinterrupt:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           postinc0	equ	0xFEE
  3554                           wreg	equ	0xFE8
  3555                           indf2	equ	0xFDF
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function _initialize *****************
  3561 ;; Defined at:
  3562 ;;		line 57 in file "main.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;		None
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;Total ram usage:        0 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    3
  3583 ;; This function calls:
  3584 ;;		_I2C_Master_Init
  3585 ;;		_initLCD
  3586 ;; This function is called by:
  3587 ;;		_main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text13
  3592  00EE32                     __ptext13:
  3593                           	opt stack 0
  3594  00EE32                     _initialize:
  3595                           	opt stack 27
  3596                           
  3597                           ;main.c: 58: OSCCON = 0xF2;
  3598                           
  3599                           ;incstack = 0
  3600  00EE32  0EF2               	movlw	242
  3601  00EE34  6ED3               	movwf	4051,c	;volatile
  3602                           
  3603                           ;main.c: 59: OSCTUNEbits.PLLEN = 1;
  3604  00EE36  8C9B               	bsf	3995,6,c	;volatile
  3605                           
  3606                           ;main.c: 61: TRISA = 0b11001111;
  3607  00EE38  0ECF               	movlw	207
  3608  00EE3A  6E92               	movwf	3986,c	;volatile
  3609                           
  3610                           ;main.c: 62: TRISB = 0b11110010;
  3611  00EE3C  0EF2               	movlw	242
  3612  00EE3E  6E93               	movwf	3987,c	;volatile
  3613                           
  3614                           ;main.c: 63: TRISC = 0b00011000;
  3615  00EE40  0E18               	movlw	24
  3616  00EE42  6E94               	movwf	3988,c	;volatile
  3617                           
  3618                           ;main.c: 65: TRISD = 0x00;
  3619  00EE44  0E00               	movlw	0
  3620  00EE46  6E95               	movwf	3989,c	;volatile
  3621                           
  3622                           ;main.c: 66: TRISE = 0b00000001;
  3623  00EE48  0E01               	movlw	1
  3624  00EE4A  6E96               	movwf	3990,c	;volatile
  3625                           
  3626                           ;main.c: 68: PR2 = 0xff;
  3627  00EE4C  68CB               	setf	4043,c	;volatile
  3628                           
  3629                           ;main.c: 69: CCP1CON = 0b00001100;
  3630  00EE4E  0E0C               	movlw	12
  3631  00EE50  6EBD               	movwf	4029,c	;volatile
  3632                           
  3633                           ;main.c: 70: CCPR1L = 0x00;
  3634  00EE52  0E00               	movlw	0
  3635  00EE54  6EBE               	movwf	4030,c	;volatile
  3636                           
  3637                           ;main.c: 71: CCP2CON = 0b00001100;
  3638  00EE56  0E0C               	movlw	12
  3639  00EE58  6EBA               	movwf	4026,c	;volatile
  3640                           
  3641                           ;main.c: 72: CCPR2L = 0x00;
  3642  00EE5A  0E00               	movlw	0
  3643  00EE5C  6EBB               	movwf	4027,c	;volatile
  3644                           
  3645                           ;main.c: 73: T2CON = 0b00000101;
  3646  00EE5E  0E05               	movlw	5
  3647  00EE60  6ECA               	movwf	4042,c	;volatile
  3648                           
  3649                           ;main.c: 75: LATA = 0x00;
  3650  00EE62  0E00               	movlw	0
  3651  00EE64  6E89               	movwf	3977,c	;volatile
  3652                           
  3653                           ;main.c: 76: LATB = 0x00;
  3654  00EE66  0E00               	movlw	0
  3655  00EE68  6E8A               	movwf	3978,c	;volatile
  3656                           
  3657                           ;main.c: 77: LATC = 0x00;
  3658  00EE6A  0E00               	movlw	0
  3659  00EE6C  6E8B               	movwf	3979,c	;volatile
  3660                           
  3661                           ;main.c: 78: LATD = 0x00;
  3662  00EE6E  0E00               	movlw	0
  3663  00EE70  6E8C               	movwf	3980,c	;volatile
  3664                           
  3665                           ;main.c: 79: LATE = 0x00;
  3666  00EE72  0E00               	movlw	0
  3667  00EE74  6E8D               	movwf	3981,c	;volatile
  3668                           
  3669                           ;main.c: 81: initLCD();
  3670  00EE76  ECC7  F075         	call	_initLCD	;wreg free
  3671                           
  3672                           ;main.c: 83: I2C_Master_Init(10000);
  3673  00EE7A  0E10               	movlw	16
  3674  00EE7C  6E0E               	movwf	I2C_Master_Init@c,c
  3675  00EE7E  0E27               	movlw	39
  3676  00EE80  6E0F               	movwf	I2C_Master_Init@c+1,c
  3677  00EE82  0E00               	movlw	0
  3678  00EE84  6E10               	movwf	I2C_Master_Init@c+2,c
  3679  00EE86  0E00               	movlw	0
  3680  00EE88  6E11               	movwf	I2C_Master_Init@c+3,c
  3681  00EE8A  EC88  F076         	call	_I2C_Master_Init	;wreg free
  3682                           
  3683                           ;main.c: 86: nRBPU = 0;
  3684  00EE8E  9EF1               	bcf	intcon2,7,c	;volatile
  3685                           
  3686                           ;main.c: 87: ADCON0 = 00000001;
  3687  00EE90  0E01               	movlw	1
  3688  00EE92  6EC2               	movwf	4034,c	;volatile
  3689                           
  3690                           ;main.c: 88: ADCON1 = 0b00001001;
  3691  00EE94  0E09               	movlw	9
  3692  00EE96  6EC1               	movwf	4033,c	;volatile
  3693                           
  3694                           ;main.c: 89: CVRCON = 0x00;
  3695  00EE98  0E00               	movlw	0
  3696  00EE9A  6EB5               	movwf	4021,c	;volatile
  3697                           
  3698                           ;main.c: 90: CMCONbits.CIS = 0;
  3699  00EE9C  96B4               	bcf	4020,3,c	;volatile
  3700                           
  3701                           ;main.c: 91: ADFM = 1;
  3702  00EE9E  8EC0               	bsf	4032,7,c	;volatile
  3703                           
  3704                           ;main.c: 93: T0CON = 0b11011000;
  3705  00EEA0  0ED8               	movlw	216
  3706  00EEA2  6ED5               	movwf	4053,c	;volatile
  3707  00EEA4  0012               	return		;funcret
  3708  00EEA6                     __end_of_initialize:
  3709                           	opt stack 0
  3710                           tblptru	equ	0xFF8
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon2	equ	0xFF1
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           indf2	equ	0xFDF
  3717                           fsr2h	equ	0xFDA
  3718                           fsr2l	equ	0xFD9
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _initLCD *****************
  3722 ;; Defined at:
  3723 ;;		line 11 in file "lcd.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;Total ram usage:        1 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    2
  3744 ;; This function calls:
  3745 ;;		_lcdInst
  3746 ;; This function is called by:
  3747 ;;		_initialize
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text14
  3752  00EB8E                     __ptext14:
  3753                           	opt stack 0
  3754  00EB8E                     _initLCD:
  3755                           	opt stack 27
  3756                           
  3757                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  3758                           
  3759                           ;incstack = 0
  3760  00EB8E  0E9C               	movlw	156
  3761  00EB90  6E04               	movwf	??_initLCD& (0+255),c
  3762  00EB92  0ED7               	movlw	215
  3763  00EB94                     u2637:
  3764  00EB94  2EE8               	decfsz	wreg,f,c
  3765  00EB96  D7FE               	bra	u2637
  3766  00EB98  2E04               	decfsz	??_initLCD& (0+255),f,c
  3767  00EB9A  D7FC               	bra	u2637
  3768  00EB9C  F000               	nop	
  3769                           
  3770                           ;lcd.c: 13: lcdInst(0b00110011);
  3771  00EB9E  0E33               	movlw	51
  3772  00EBA0  ECB1  F073         	call	_lcdInst
  3773                           
  3774                           ;lcd.c: 14: lcdInst(0b00110010);
  3775  00EBA4  0E32               	movlw	50
  3776  00EBA6  ECB1  F073         	call	_lcdInst
  3777                           
  3778                           ;lcd.c: 15: lcdInst(0b00101000);
  3779  00EBAA  0E28               	movlw	40
  3780  00EBAC  ECB1  F073         	call	_lcdInst
  3781                           
  3782                           ;lcd.c: 16: lcdInst(0b00001111);
  3783  00EBB0  0E0F               	movlw	15
  3784  00EBB2  ECB1  F073         	call	_lcdInst
  3785                           
  3786                           ;lcd.c: 17: lcdInst(0b00000110);
  3787  00EBB6  0E06               	movlw	6
  3788  00EBB8  ECB1  F073         	call	_lcdInst
  3789                           
  3790                           ;lcd.c: 18: lcdInst(0b00000001);
  3791  00EBBC  0E01               	movlw	1
  3792  00EBBE  ECB1  F073         	call	_lcdInst
  3793                           
  3794                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  3795  00EBC2  0E9C               	movlw	156
  3796  00EBC4  6E04               	movwf	??_initLCD& (0+255),c
  3797  00EBC6  0ED7               	movlw	215
  3798  00EBC8                     u2647:
  3799  00EBC8  2EE8               	decfsz	wreg,f,c
  3800  00EBCA  D7FE               	bra	u2647
  3801  00EBCC  2E04               	decfsz	??_initLCD& (0+255),f,c
  3802  00EBCE  D7FC               	bra	u2647
  3803  00EBD0  F000               	nop	
  3804  00EBD2  0012               	return		;funcret
  3805  00EBD4                     __end_of_initLCD:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon2	equ	0xFF1
  3811                           postinc0	equ	0xFEE
  3812                           wreg	equ	0xFE8
  3813                           indf2	equ	0xFDF
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _I2C_Master_Init *****************
  3819 ;; Defined at:
  3820 ;;		line 20 in file "I2C.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  c               4   13[COMRAM] const unsigned long 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:        8 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    1
  3841 ;; This function calls:
  3842 ;;		___lldiv
  3843 ;; This function is called by:
  3844 ;;		_initialize
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text15
  3849  00ED10                     __ptext15:
  3850                           	opt stack 0
  3851  00ED10                     _I2C_Master_Init:
  3852                           	opt stack 28
  3853                           
  3854                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  3855                           
  3856                           ;incstack = 0
  3857  00ED10  0E00               	movlw	0
  3858  00ED12  6EC7               	movwf	4039,c	;volatile
  3859                           
  3860                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  3861  00ED14  0E28               	movlw	40
  3862  00ED16  6EC6               	movwf	4038,c	;volatile
  3863                           
  3864                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  3865  00ED18  0E00               	movlw	0
  3866  00ED1A  6EC5               	movwf	4037,c	;volatile
  3867                           
  3868                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  3869  00ED1C  0E00               	movlw	0
  3870  00ED1E  6E01               	movwf	___lldiv@dividend,c
  3871  00ED20  0E48               	movlw	72
  3872  00ED22  6E02               	movwf	___lldiv@dividend+1,c
  3873  00ED24  0EE8               	movlw	232
  3874  00ED26  6E03               	movwf	___lldiv@dividend+2,c
  3875  00ED28  0E01               	movlw	1
  3876  00ED2A  6E04               	movwf	___lldiv@dividend+3,c
  3877  00ED2C  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3878  00ED30  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3879  00ED34  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3880  00ED38  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3881  00ED3C  0E02               	movlw	2
  3882  00ED3E                     u1395:
  3883  00ED3E  90D8               	bcf	status,0,c
  3884  00ED40  3612               	rlcf	??_I2C_Master_Init,f,c
  3885  00ED42  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3886  00ED44  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3887  00ED46  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3888  00ED48  2EE8               	decfsz	wreg,f,c
  3889  00ED4A  D7F9               	goto	u1395
  3890  00ED4C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3891  00ED50  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3892  00ED54  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3893  00ED58  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3894  00ED5C  EC53  F077         	call	___lldiv	;wreg free
  3895  00ED60  0401               	decf	?___lldiv,w,c
  3896  00ED62  6EC8               	movwf	4040,c	;volatile
  3897                           
  3898                           ;I2C.c: 27: TRISC3 = 1;
  3899  00ED64  8694               	bsf	3988,3,c	;volatile
  3900                           
  3901                           ;I2C.c: 28: TRISC4 = 1;
  3902  00ED66  8894               	bsf	3988,4,c	;volatile
  3903  00ED68  0012               	return		;funcret
  3904  00ED6A                     __end_of_I2C_Master_Init:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           intcon2	equ	0xFF1
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           indf2	equ	0xFDF
  3913                           fsr2h	equ	0xFDA
  3914                           fsr2l	equ	0xFD9
  3915                           status	equ	0xFD8
  3916                           
  3917 ;; *************** function ___lldiv *****************
  3918 ;; Defined at:
  3919 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;  dividend        4    0[COMRAM] unsigned long 
  3922 ;;  divisor         4    4[COMRAM] unsigned long 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  quotient        4    8[COMRAM] unsigned long 
  3925 ;;  counter         1   12[COMRAM] unsigned char 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  4    0[COMRAM] unsigned long 
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3935 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;Total ram usage:       13 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_I2C_Master_Init
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text16
  3949  00EEA6                     __ptext16:
  3950                           	opt stack 0
  3951  00EEA6                     ___lldiv:
  3952                           	opt stack 28
  3953                           
  3954                           ;incstack = 0
  3955  00EEA6  0E00               	movlw	0
  3956  00EEA8  6E09               	movwf	___lldiv@quotient,c
  3957  00EEAA  0E00               	movlw	0
  3958  00EEAC  6E0A               	movwf	___lldiv@quotient+1,c
  3959  00EEAE  0E00               	movlw	0
  3960  00EEB0  6E0B               	movwf	___lldiv@quotient+2,c
  3961  00EEB2  0E00               	movlw	0
  3962  00EEB4  6E0C               	movwf	___lldiv@quotient+3,c
  3963  00EEB6  5005               	movf	___lldiv@divisor,w,c
  3964  00EEB8  1006               	iorwf	___lldiv@divisor+1,w,c
  3965  00EEBA  1007               	iorwf	___lldiv@divisor+2,w,c
  3966  00EEBC  1008               	iorwf	___lldiv@divisor+3,w,c
  3967  00EEBE  B4D8               	btfsc	status,2,c
  3968  00EEC0  D02A               	goto	l930
  3969  00EEC2  0E01               	movlw	1
  3970  00EEC4  6E0D               	movwf	___lldiv@counter,c
  3971  00EEC6  D006               	goto	l2268
  3972  00EEC8                     l2266:
  3973  00EEC8  90D8               	bcf	status,0,c
  3974  00EECA  3605               	rlcf	___lldiv@divisor,f,c
  3975  00EECC  3606               	rlcf	___lldiv@divisor+1,f,c
  3976  00EECE  3607               	rlcf	___lldiv@divisor+2,f,c
  3977  00EED0  3608               	rlcf	___lldiv@divisor+3,f,c
  3978  00EED2  2A0D               	incf	___lldiv@counter,f,c
  3979  00EED4                     l2268:
  3980  00EED4  AE08               	btfss	___lldiv@divisor+3,7,c
  3981  00EED6  D7F8               	goto	l2266
  3982  00EED8                     l2270:
  3983  00EED8  90D8               	bcf	status,0,c
  3984  00EEDA  3609               	rlcf	___lldiv@quotient,f,c
  3985  00EEDC  360A               	rlcf	___lldiv@quotient+1,f,c
  3986  00EEDE  360B               	rlcf	___lldiv@quotient+2,f,c
  3987  00EEE0  360C               	rlcf	___lldiv@quotient+3,f,c
  3988  00EEE2  5005               	movf	___lldiv@divisor,w,c
  3989  00EEE4  5C01               	subwf	___lldiv@dividend,w,c
  3990  00EEE6  5006               	movf	___lldiv@divisor+1,w,c
  3991  00EEE8  5802               	subwfb	___lldiv@dividend+1,w,c
  3992  00EEEA  5007               	movf	___lldiv@divisor+2,w,c
  3993  00EEEC  5803               	subwfb	___lldiv@dividend+2,w,c
  3994  00EEEE  5008               	movf	___lldiv@divisor+3,w,c
  3995  00EEF0  5804               	subwfb	___lldiv@dividend+3,w,c
  3996  00EEF2  A0D8               	btfss	status,0,c
  3997  00EEF4  D009               	goto	l2278
  3998  00EEF6  5005               	movf	___lldiv@divisor,w,c
  3999  00EEF8  5E01               	subwf	___lldiv@dividend,f,c
  4000  00EEFA  5006               	movf	___lldiv@divisor+1,w,c
  4001  00EEFC  5A02               	subwfb	___lldiv@dividend+1,f,c
  4002  00EEFE  5007               	movf	___lldiv@divisor+2,w,c
  4003  00EF00  5A03               	subwfb	___lldiv@dividend+2,f,c
  4004  00EF02  5008               	movf	___lldiv@divisor+3,w,c
  4005  00EF04  5A04               	subwfb	___lldiv@dividend+3,f,c
  4006  00EF06  8009               	bsf	___lldiv@quotient,0,c
  4007  00EF08                     l2278:
  4008  00EF08  90D8               	bcf	status,0,c
  4009  00EF0A  3208               	rrcf	___lldiv@divisor+3,f,c
  4010  00EF0C  3207               	rrcf	___lldiv@divisor+2,f,c
  4011  00EF0E  3206               	rrcf	___lldiv@divisor+1,f,c
  4012  00EF10  3205               	rrcf	___lldiv@divisor,f,c
  4013  00EF12  2E0D               	decfsz	___lldiv@counter,f,c
  4014  00EF14  D7E1               	goto	l2270
  4015  00EF16                     l930:
  4016  00EF16  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4017  00EF1A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4018  00EF1E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4019  00EF22  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4020  00EF26  0012               	return		;funcret
  4021  00EF28                     __end_of___lldiv:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           prodh	equ	0xFF4
  4025                           prodl	equ	0xFF3
  4026                           intcon2	equ	0xFF1
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           indf2	equ	0xFDF
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _homescreen *****************
  4035 ;; Defined at:
  4036 ;;		line 3 in file "interface.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    3
  4057 ;; This function calls:
  4058 ;;		_lcdInst
  4059 ;;		_printf
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text17
  4066  00ED6A                     __ptext17:
  4067                           	opt stack 0
  4068  00ED6A                     _homescreen:
  4069                           	opt stack 27
  4070                           
  4071                           ;interface.c: 4: lcdInst(0b10000000);;
  4072                           
  4073                           ;incstack = 0
  4074  00ED6A  0E80               	movlw	128
  4075  00ED6C  ECB1  F073         	call	_lcdInst
  4076                           
  4077                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  4078  00ED70  0EAF               	movlw	low STR_27
  4079  00ED72  6E12               	movwf	printf@f,c
  4080  00ED74  0EFE               	movlw	high STR_27
  4081  00ED76  6E13               	movwf	printf@f+1,c
  4082  00ED78  C052  F014         	movff	_time+6,?_printf+2
  4083  00ED7C  6A15               	clrf	?_printf+3,c
  4084  00ED7E  C051  F016         	movff	_time+5,?_printf+4
  4085  00ED82  6A17               	clrf	?_printf+5,c
  4086  00ED84  C050  F018         	movff	_time+4,?_printf+6
  4087  00ED88  6A19               	clrf	?_printf+7,c
  4088  00ED8A  EC4C  F078         	call	_printf	;wreg free
  4089                           
  4090                           ;interface.c: 6: printf("3:Start");
  4091  00ED8E  0EE6               	movlw	low STR_28
  4092  00ED90  6E12               	movwf	printf@f,c
  4093  00ED92  0EFF               	movlw	high STR_28
  4094  00ED94  6E13               	movwf	printf@f+1,c
  4095  00ED96  EC4C  F078         	call	_printf	;wreg free
  4096                           
  4097                           ;interface.c: 7: lcdInst(0b11000000);;
  4098  00ED9A  0EC0               	movlw	192
  4099  00ED9C  ECB1  F073         	call	_lcdInst
  4100                           
  4101                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4102  00EDA0  0E0E               	movlw	low STR_29
  4103  00EDA2  6E12               	movwf	printf@f,c
  4104  00EDA4  0EFF               	movlw	high STR_29
  4105  00EDA6  6E13               	movwf	printf@f+1,c
  4106  00EDA8  C04E  F014         	movff	_time+2,?_printf+2
  4107  00EDAC  6A15               	clrf	?_printf+3,c
  4108  00EDAE  C04D  F016         	movff	_time+1,?_printf+4
  4109  00EDB2  6A17               	clrf	?_printf+5,c
  4110  00EDB4  C04C  F018         	movff	_time,?_printf+6
  4111  00EDB8  6A19               	clrf	?_printf+7,c
  4112  00EDBA  EC4C  F078         	call	_printf	;wreg free
  4113                           
  4114                           ;interface.c: 9: printf(" 2:Logs");
  4115  00EDBE  0EDE               	movlw	low STR_30
  4116  00EDC0  6E12               	movwf	printf@f,c
  4117  00EDC2  0EFF               	movlw	high STR_30
  4118  00EDC4  6E13               	movwf	printf@f+1,c
  4119  00EDC6  EC4C  F078         	call	_printf	;wreg free
  4120  00EDCA  0012               	return		;funcret
  4121  00EDCC                     __end_of_homescreen:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           prodh	equ	0xFF4
  4125                           prodl	equ	0xFF3
  4126                           intcon2	equ	0xFF1
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           indf2	equ	0xFDF
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function _displayLogs *****************
  4135 ;; Defined at:
  4136 ;;		line 12 in file "interface.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;Total ram usage:        1 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    3
  4157 ;; This function calls:
  4158 ;;		_eepromRead
  4159 ;;		_keycheck
  4160 ;;		_lcdInst
  4161 ;;		_printf
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text18
  4168  00EFD2                     __ptext18:
  4169                           	opt stack 0
  4170  00EFD2                     _displayLogs:
  4171                           	opt stack 27
  4172                           
  4173                           ;interface.c: 13: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  4174                           
  4175                           ;incstack = 0
  4176  00EFD2  0E01               	movlw	1
  4177  00EFD4  ECB1  F073         	call	_lcdInst
  4178  00EFD8  0E68               	movlw	104
  4179  00EFDA  6E28               	movwf	??_displayLogs& (0+255),c
  4180  00EFDC  0EE4               	movlw	228
  4181  00EFDE                     u2657:
  4182  00EFDE  2EE8               	decfsz	wreg,f,c
  4183  00EFE0  D7FE               	bra	u2657
  4184  00EFE2  2E28               	decfsz	??_displayLogs& (0+255),f,c
  4185  00EFE4  D7FC               	bra	u2657
  4186  00EFE6  D000               	nop2	
  4187                           
  4188                           ;interface.c: 14: printf("Run#1    A:Next");
  4189  00EFE8  0ECF               	movlw	low STR_31
  4190  00EFEA  6E12               	movwf	printf@f,c
  4191  00EFEC  0EFE               	movlw	high STR_31
  4192  00EFEE  6E13               	movwf	printf@f+1,c
  4193  00EFF0  EC4C  F078         	call	_printf	;wreg free
  4194                           
  4195                           ;interface.c: 15: lcdInst(0b11000000);;
  4196  00EFF4  0EC0               	movlw	192
  4197  00EFF6  ECB1  F073         	call	_lcdInst
  4198                           
  4199                           ;interface.c: 16: printf("# of cans: %d", eepromRead(10));
  4200  00EFFA  0E1D               	movlw	low STR_32
  4201  00EFFC  6E12               	movwf	printf@f,c
  4202  00EFFE  0EFF               	movlw	high STR_32
  4203  00F000  6E13               	movwf	printf@f+1,c
  4204  00F002  0E0A               	movlw	10
  4205  00F004  EC3B  F074         	call	_eepromRead
  4206  00F008  6E14               	movwf	?_printf+2,c
  4207  00F00A  6A15               	clrf	?_printf+3,c
  4208  00F00C  BE14               	btfsc	?_printf+2,7,c
  4209  00F00E  0615               	decf	?_printf+3,f,c
  4210  00F010  EC4C  F078         	call	_printf	;wreg free
  4211                           
  4212                           ;interface.c: 17: keycheck();
  4213  00F014  ECC6  F073         	call	_keycheck	;wreg free
  4214                           
  4215                           ;interface.c: 18: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  4216  00F018  0E01               	movlw	1
  4217  00F01A  ECB1  F073         	call	_lcdInst
  4218  00F01E  0E68               	movlw	104
  4219  00F020  6E28               	movwf	??_displayLogs& (0+255),c
  4220  00F022  0EE4               	movlw	228
  4221  00F024                     u2667:
  4222  00F024  2EE8               	decfsz	wreg,f,c
  4223  00F026  D7FE               	bra	u2667
  4224  00F028  2E28               	decfsz	??_displayLogs& (0+255),f,c
  4225  00F02A  D7FC               	bra	u2667
  4226  00F02C  D000               	nop2	
  4227                           
  4228                           ;interface.c: 19: printf("Run#1    A:Next");
  4229  00F02E  0ECF               	movlw	low STR_31
  4230  00F030  6E12               	movwf	printf@f,c
  4231  00F032  0EFE               	movlw	high STR_31
  4232  00F034  6E13               	movwf	printf@f+1,c
  4233  00F036  EC4C  F078         	call	_printf	;wreg free
  4234                           
  4235                           ;interface.c: 20: lcdInst(0b11000000);;
  4236  00F03A  0EC0               	movlw	192
  4237  00F03C  ECB1  F073         	call	_lcdInst
  4238                           
  4239                           ;interface.c: 21: printf("# soda cans: %d", eepromRead(20));
  4240  00F040  0EBF               	movlw	low STR_34
  4241  00F042  6E12               	movwf	printf@f,c
  4242  00F044  0EFE               	movlw	high STR_34
  4243  00F046  6E13               	movwf	printf@f+1,c
  4244  00F048  0E14               	movlw	20
  4245  00F04A  EC3B  F074         	call	_eepromRead
  4246  00F04E  6E14               	movwf	?_printf+2,c
  4247  00F050  6A15               	clrf	?_printf+3,c
  4248  00F052  BE14               	btfsc	?_printf+2,7,c
  4249  00F054  0615               	decf	?_printf+3,f,c
  4250  00F056  EC4C  F078         	call	_printf	;wreg free
  4251                           
  4252                           ;interface.c: 22: keycheck();
  4253  00F05A  ECC6  F073         	call	_keycheck	;wreg free
  4254                           
  4255                           ;interface.c: 23: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  4256  00F05E  0E01               	movlw	1
  4257  00F060  ECB1  F073         	call	_lcdInst
  4258  00F064  0E68               	movlw	104
  4259  00F066  6E28               	movwf	??_displayLogs& (0+255),c
  4260  00F068  0EE4               	movlw	228
  4261  00F06A                     u2677:
  4262  00F06A  2EE8               	decfsz	wreg,f,c
  4263  00F06C  D7FE               	bra	u2677
  4264  00F06E  2E28               	decfsz	??_displayLogs& (0+255),f,c
  4265  00F070  D7FC               	bra	u2677
  4266  00F072  D000               	nop2	
  4267                           
  4268                           ;interface.c: 24: printf("Run#1    A:Next");
  4269  00F074  0ECF               	movlw	low STR_31
  4270  00F076  6E12               	movwf	printf@f,c
  4271  00F078  0EFE               	movlw	high STR_31
  4272  00F07A  6E13               	movwf	printf@f+1,c
  4273  00F07C  EC4C  F078         	call	_printf	;wreg free
  4274                           
  4275                           ;interface.c: 25: lcdInst(0b11000000);;
  4276  00F080  0EC0               	movlw	192
  4277  00F082  ECB1  F073         	call	_lcdInst
  4278                           
  4279                           ;interface.c: 26: printf("# soup cans: 4");
  4280  00F086  0EFF               	movlw	low STR_36
  4281  00F088  6E12               	movwf	printf@f,c
  4282  00F08A  0EFE               	movlw	high STR_36
  4283  00F08C  6E13               	movwf	printf@f+1,c
  4284  00F08E  EC4C  F078         	call	_printf	;wreg free
  4285                           
  4286                           ;interface.c: 27: keycheck();
  4287  00F092  ECC6  F073         	call	_keycheck	;wreg free
  4288  00F096  0012               	return		;funcret
  4289  00F098                     __end_of_displayLogs:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon2	equ	0xFF1
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           indf2	equ	0xFDF
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _printf *****************
  4303 ;; Defined at:
  4304 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  f               2   17[COMRAM] PTR const unsigned char 
  4307 ;;		 -> STR_36(15), STR_35(16), STR_34(16), STR_33(16), 
  4308 ;;		 -> STR_32(14), STR_31(16), STR_30(8), STR_29(15), 
  4309 ;;		 -> STR_28(8), STR_27(16), STR_26(19), STR_25(8), 
  4310 ;;		 -> STR_24(12), STR_23(13), STR_22(11), STR_21(6), 
  4311 ;;		 -> STR_20(13), STR_19(11), STR_18(9), STR_17(11), 
  4312 ;;		 -> STR_16(10), STR_15(14), STR_14(8), STR_13(14), 
  4313 ;;		 -> STR_12(3), STR_11(12), STR_10(3), STR_9(12), 
  4314 ;;		 -> STR_8(11), STR_7(13), STR_6(13), STR_5(12), 
  4315 ;;		 -> STR_4(12), STR_3(12), STR_2(16), STR_1(16), 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;  idx             1   29[COMRAM] unsigned char 
  4318 ;;  tmpval          4    0        struct .
  4319 ;;  cp              3    0        PTR const unsigned char 
  4320 ;;  width           2   36[COMRAM] int 
  4321 ;;  val             2   33[COMRAM] unsigned int 
  4322 ;;  ap              2   30[COMRAM] PTR void [1]
  4323 ;;		 -> ?_printf(2), 
  4324 ;;  len             2    0        unsigned int 
  4325 ;;  c               1   38[COMRAM] char 
  4326 ;;  flag            1   35[COMRAM] unsigned char 
  4327 ;;  prec            1   32[COMRAM] char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2   17[COMRAM] int 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:       22 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    2
  4344 ;; This function calls:
  4345 ;;		___lwdiv
  4346 ;;		___lwmod
  4347 ;;		___wmul
  4348 ;;		_isdigit
  4349 ;;		_putch
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;;		_homescreen
  4353 ;;		_displayLogs
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text19
  4358  00F098                     __ptext19:
  4359                           	opt stack 0
  4360  00F098                     _printf:
  4361                           	opt stack 28
  4362                           
  4363                           ;doprnt.c: 466: va_list ap;
  4364                           ;doprnt.c: 499: signed char c;
  4365                           ;doprnt.c: 501: int width;
  4366                           ;doprnt.c: 506: signed char prec;
  4367                           ;doprnt.c: 508: unsigned char flag;
  4368                           ;doprnt.c: 523: union {
  4369                           ;doprnt.c: 524: unsigned long vd;
  4370                           ;doprnt.c: 525: double integ;
  4371                           ;doprnt.c: 526: } tmpval;
  4372                           ;doprnt.c: 528: unsigned int val;
  4373                           ;doprnt.c: 529: unsigned len;
  4374                           ;doprnt.c: 530: const char * cp;
  4375                           ;doprnt.c: 533: *ap = __va_start();
  4376                           
  4377                           ;incstack = 0
  4378  00F098  0E14               	movlw	low (?_printf+2)
  4379  00F09A  6E1F               	movwf	printf@ap,c
  4380  00F09C  0E00               	movlw	high (?_printf+2)
  4381  00F09E  6E20               	movwf	printf@ap+1,c
  4382                           
  4383                           ;doprnt.c: 536: while(c = *f++) {
  4384  00F0A0  D174               	goto	l2474
  4385  00F0A2                     l2348:
  4386                           
  4387                           ;doprnt.c: 538: if(c != '%')
  4388  00F0A2  0E25               	movlw	37
  4389  00F0A4  1827               	xorwf	printf@c,w,c
  4390  00F0A6  B4D8               	btfsc	status,2,c
  4391  00F0A8  D004               	goto	l2352
  4392                           
  4393                           ;doprnt.c: 540: {
  4394                           ;doprnt.c: 541: (putch(c) );
  4395  00F0AA  5027               	movf	printf@c,w,c
  4396  00F0AC  ECB7  F073         	call	_putch
  4397                           
  4398                           ;doprnt.c: 542: continue;
  4399  00F0B0  D16C               	goto	l2474
  4400  00F0B2                     l2352:
  4401                           
  4402                           ;doprnt.c: 543: }
  4403                           ;doprnt.c: 546: width = 0;
  4404  00F0B2  0E00               	movlw	0
  4405  00F0B4  6E26               	movwf	printf@width+1,c
  4406  00F0B6  0E00               	movlw	0
  4407  00F0B8  6E25               	movwf	printf@width,c
  4408                           
  4409                           ;doprnt.c: 548: flag = 0;
  4410  00F0BA  0E00               	movlw	0
  4411  00F0BC  6E24               	movwf	printf@flag,c
  4412                           
  4413                           ;doprnt.c: 551: switch(*f) {
  4414                           
  4415                           ;doprnt.c: 550: for(;;) {
  4416  00F0BE  D003               	goto	l2358
  4417  00F0C0                     l2354:
  4418                           
  4419                           ;doprnt.c: 580: flag |= 0x04;
  4420  00F0C0  8424               	bsf	printf@flag,2,c
  4421                           
  4422                           ;doprnt.c: 581: f++;
  4423  00F0C2  4A12               	infsnz	printf@f,f,c
  4424  00F0C4  2A13               	incf	printf@f+1,f,c
  4425  00F0C6                     l2358:
  4426  00F0C6  C012  FFF6         	movff	printf@f,tblptrl
  4427  00F0CA  C013  FFF7         	movff	printf@f+1,tblptrh
  4428  00F0CE                     	if	0	;tblptru may be non-zero
  4429  00F0CE                     	endif
  4430  00F0CE                     	if	0	;tblptru may be non-zero
  4431  00F0CE                     	endif
  4432  00F0CE  0008               	tblrd		*
  4433  00F0D0  50F5               	movf	tablat,w,c
  4434                           
  4435                           ; Switch size 1, requested type "space"
  4436                           ; Number of cases is 1, Range of values is 48 to 48
  4437                           ; switch strategies available:
  4438                           ; Name         Instructions Cycles
  4439                           ; simple_byte            4     3 (average)
  4440                           ;	Chosen strategy is simple_byte
  4441  00F0D2  0A30               	xorlw	48	; case 48
  4442  00F0D4  B4D8               	btfsc	status,2,c
  4443  00F0D6  D7F4               	goto	l2354
  4444                           
  4445                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4446                           
  4447                           ;doprnt.c: 586: }
  4448                           
  4449                           ;doprnt.c: 585: break;
  4450  00F0D8  C012  FFF6         	movff	printf@f,tblptrl
  4451  00F0DC  C013  FFF7         	movff	printf@f+1,tblptrh
  4452  00F0E0                     	if	0	;tblptru may be non-zero
  4453  00F0E0                     	endif
  4454  00F0E0                     	if	0	;tblptru may be non-zero
  4455  00F0E0                     	endif
  4456  00F0E0  0008               	tblrd		*
  4457  00F0E2  50F5               	movf	tablat,w,c
  4458  00F0E4  ECE5  F073         	call	_isdigit
  4459  00F0E8  A0D8               	btfss	status,0,c
  4460  00F0EA  D035               	goto	l2376
  4461                           
  4462                           ;doprnt.c: 598: width = 0;
  4463  00F0EC  0E00               	movlw	0
  4464  00F0EE  6E26               	movwf	printf@width+1,c
  4465  00F0F0  0E00               	movlw	0
  4466  00F0F2  6E25               	movwf	printf@width,c
  4467  00F0F4                     l2364:
  4468                           
  4469                           ;doprnt.c: 600: width *= 10;
  4470  00F0F4  C025  F001         	movff	printf@width,___wmul@multiplier
  4471  00F0F8  C026  F002         	movff	printf@width+1,___wmul@multiplier+1
  4472  00F0FC  0E00               	movlw	0
  4473  00F0FE  6E04               	movwf	___wmul@multiplicand+1,c
  4474  00F100  0E0A               	movlw	10
  4475  00F102  6E03               	movwf	___wmul@multiplicand,c
  4476  00F104  EC15  F074         	call	___wmul	;wreg free
  4477  00F108  C001  F025         	movff	?___wmul,printf@width
  4478  00F10C  C002  F026         	movff	?___wmul+1,printf@width+1
  4479                           
  4480                           ;doprnt.c: 601: width += *f++ - '0';
  4481  00F110  0ED0               	movlw	208
  4482  00F112  6E1A               	movwf	??_printf& (0+255),c
  4483  00F114  0EFF               	movlw	255
  4484  00F116  6E1B               	movwf	(??_printf+1)& (0+255),c
  4485  00F118  C012  FFF6         	movff	printf@f,tblptrl
  4486  00F11C  C013  FFF7         	movff	printf@f+1,tblptrh
  4487  00F120                     	if	0	;tblptru may be non-zero
  4488  00F120                     	endif
  4489  00F120                     	if	0	;tblptru may be non-zero
  4490  00F120                     	endif
  4491  00F120  0008               	tblrd		*
  4492  00F122  50F5               	movf	tablat,w,c
  4493  00F124  6E1C               	movwf	(??_printf+2)& (0+255),c
  4494  00F126  6A1D               	clrf	(??_printf+3)& (0+255),c
  4495  00F128  501A               	movf	??_printf,w,c
  4496  00F12A  261C               	addwf	??_printf+2,f,c
  4497  00F12C  501B               	movf	??_printf+1,w,c
  4498  00F12E  221D               	addwfc	??_printf+3,f,c
  4499  00F130  501C               	movf	??_printf+2,w,c
  4500  00F132  2625               	addwf	printf@width,f,c
  4501  00F134  501D               	movf	??_printf+3,w,c
  4502  00F136  2226               	addwfc	printf@width+1,f,c
  4503  00F138  4A12               	infsnz	printf@f,f,c
  4504  00F13A  2A13               	incf	printf@f+1,f,c
  4505                           
  4506                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4507  00F13C  C012  FFF6         	movff	printf@f,tblptrl
  4508  00F140  C013  FFF7         	movff	printf@f+1,tblptrh
  4509  00F144                     	if	0	;tblptru may be non-zero
  4510  00F144                     	endif
  4511  00F144                     	if	0	;tblptru may be non-zero
  4512  00F144                     	endif
  4513  00F144  0008               	tblrd		*
  4514  00F146  50F5               	movf	tablat,w,c
  4515  00F148  ECE5  F073         	call	_isdigit
  4516  00F14C  A0D8               	btfss	status,0,c
  4517  00F14E  D003               	goto	l2376
  4518  00F150  D7D1               	goto	l2364
  4519  00F152                     l2372:
  4520                           
  4521                           ;doprnt.c: 721: flag |= 0x80;
  4522  00F152  8E24               	bsf	printf@flag,7,c
  4523                           
  4524                           ;doprnt.c: 723: break;
  4525  00F154  D017               	goto	l538
  4526  00F156                     l2376:
  4527  00F156  C012  FFF6         	movff	printf@f,tblptrl
  4528  00F15A  C013  FFF7         	movff	printf@f+1,tblptrh
  4529  00F15E  4A12               	infsnz	printf@f,f,c
  4530  00F160  2A13               	incf	printf@f+1,f,c
  4531  00F162                     	if	0	;tblptru may be non-zero
  4532  00F162                     	endif
  4533  00F162                     	if	0	;tblptru may be non-zero
  4534  00F162                     	endif
  4535  00F162  0008               	tblrd		*
  4536  00F164  CFF5 F027          	movff	tablat,printf@c
  4537  00F168  5027               	movf	printf@c,w,c
  4538                           
  4539                           ; Switch size 1, requested type "space"
  4540                           ; Number of cases is 4, Range of values is 0 to 120
  4541                           ; switch strategies available:
  4542                           ; Name         Instructions Cycles
  4543                           ; simple_byte           13     7 (average)
  4544                           ;	Chosen strategy is simple_byte
  4545  00F16A  0A00               	xorlw	0	; case 0
  4546  00F16C  B4D8               	btfsc	status,2,c
  4547  00F16E  0012               	return	
  4548  00F170  0A64               	xorlw	100	; case 100
  4549  00F172  B4D8               	btfsc	status,2,c
  4550  00F174  D007               	goto	l538
  4551  00F176  0A0D               	xorlw	13	; case 105
  4552  00F178  B4D8               	btfsc	status,2,c
  4553  00F17A  D004               	goto	l538
  4554  00F17C  0A11               	xorlw	17	; case 120
  4555  00F17E  B4D8               	btfsc	status,2,c
  4556  00F180  D7E8               	goto	l2372
  4557  00F182  D103               	goto	l2474
  4558  00F184                     l538:
  4559                           
  4560                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4561  00F184  BE24               	btfsc	printf@flag,7,c
  4562  00F186  D015               	goto	l2388
  4563                           
  4564                           ;doprnt.c: 1253: {
  4565                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4566  00F188  C01F  FFD9         	movff	printf@ap,fsr2l
  4567  00F18C  C020  FFDA         	movff	printf@ap+1,fsr2h
  4568  00F190  CFDE F022          	movff	postinc2,printf@val
  4569  00F194  CFDD F023          	movff	postdec2,printf@val+1
  4570  00F198  0E02               	movlw	2
  4571  00F19A  261F               	addwf	printf@ap,f,c
  4572  00F19C  0E00               	movlw	0
  4573  00F19E  2220               	addwfc	printf@ap+1,f,c
  4574                           
  4575                           ;doprnt.c: 1261: if((int)val < 0) {
  4576  00F1A0  AE23               	btfss	printf@val+1,7,c
  4577  00F1A2  D044               	goto	l2422
  4578                           
  4579                           ;doprnt.c: 1262: flag |= 0x03;
  4580  00F1A4  0E03               	movlw	3
  4581  00F1A6  1224               	iorwf	printf@flag,f,c
  4582                           
  4583                           ;doprnt.c: 1263: val = -val;
  4584  00F1A8  6C22               	negf	printf@val,c
  4585  00F1AA  1E23               	comf	printf@val+1,f,c
  4586  00F1AC  B0D8               	btfsc	status,0,c
  4587  00F1AE  2A23               	incf	printf@val+1,f,c
  4588                           
  4589                           ;doprnt.c: 1264: }
  4590                           ;doprnt.c: 1266: }
  4591  00F1B0  D03D               	goto	l2422
  4592  00F1B2                     l2388:
  4593                           
  4594                           ;doprnt.c: 1268: else
  4595                           ;doprnt.c: 1273: {
  4596                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4597  00F1B2  C01F  FFD9         	movff	printf@ap,fsr2l
  4598  00F1B6  C020  FFDA         	movff	printf@ap+1,fsr2h
  4599  00F1BA  CFDE F022          	movff	postinc2,printf@val
  4600  00F1BE  CFDD F023          	movff	postdec2,printf@val+1
  4601  00F1C2  0E02               	movlw	2
  4602  00F1C4  261F               	addwf	printf@ap,f,c
  4603  00F1C6  0E00               	movlw	0
  4604  00F1C8  2220               	addwfc	printf@ap+1,f,c
  4605                           
  4606                           ;doprnt.c: 1287: }
  4607                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4608  00F1CA  D030               	goto	l2422
  4609  00F1CC                     l2392:
  4610                           
  4611                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4612  00F1CC  0E01               	movlw	1
  4613  00F1CE  6E27               	movwf	printf@c,c
  4614  00F1D0                     l2394:
  4615  00F1D0  0E05               	movlw	5
  4616  00F1D2  1827               	xorwf	printf@c,w,c
  4617  00F1D4  B4D8               	btfsc	status,2,c
  4618  00F1D6  D032               	goto	l2424
  4619                           
  4620                           ;doprnt.c: 1306: if(val < dpowers[c])
  4621  00F1D8  5027               	movf	printf@c,w,c
  4622  00F1DA  0D02               	mullw	2
  4623  00F1DC  0E72               	movlw	low _dpowers
  4624  00F1DE  24F3               	addwf	prodl,w,c
  4625  00F1E0  6EF6               	movwf	tblptrl,c
  4626  00F1E2  0EFE               	movlw	high _dpowers
  4627  00F1E4  20F4               	addwfc	prodh,w,c
  4628  00F1E6  6EF7               	movwf	tblptrh,c
  4629  00F1E8                     	if	0	;There are less than 3 active tblptr bytes
  4630  00F1E8                     	endif
  4631  00F1E8  0009               	tblrd		*+
  4632  00F1EA  50F5               	movf	tablat,w,c
  4633  00F1EC  5C22               	subwf	printf@val,w,c
  4634  00F1EE  0009               	tblrd		*+
  4635  00F1F0  50F5               	movf	tablat,w,c
  4636  00F1F2  5823               	subwfb	printf@val+1,w,c
  4637  00F1F4  A0D8               	btfss	status,0,c
  4638  00F1F6  D022               	goto	l2424
  4639                           
  4640                           ;doprnt.c: 1307: break;
  4641  00F1F8  2A27               	incf	printf@c,f,c
  4642  00F1FA  D7EA               	goto	l2394
  4643  00F1FC                     l2406:
  4644                           
  4645                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4646  00F1FC  0E01               	movlw	1
  4647  00F1FE  6E27               	movwf	printf@c,c
  4648  00F200                     l2408:
  4649  00F200  0E04               	movlw	4
  4650  00F202  1827               	xorwf	printf@c,w,c
  4651  00F204  B4D8               	btfsc	status,2,c
  4652  00F206  D01A               	goto	l2424
  4653                           
  4654                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4655  00F208  5027               	movf	printf@c,w,c
  4656  00F20A  0D02               	mullw	2
  4657  00F20C  0E7C               	movlw	low _hexpowers
  4658  00F20E  24F3               	addwf	prodl,w,c
  4659  00F210  6EF6               	movwf	tblptrl,c
  4660  00F212  0EFE               	movlw	high _hexpowers
  4661  00F214  20F4               	addwfc	prodh,w,c
  4662  00F216  6EF7               	movwf	tblptrh,c
  4663  00F218                     	if	0	;There are less than 3 active tblptr bytes
  4664  00F218                     	endif
  4665  00F218  0009               	tblrd		*+
  4666  00F21A  50F5               	movf	tablat,w,c
  4667  00F21C  5C22               	subwf	printf@val,w,c
  4668  00F21E  0009               	tblrd		*+
  4669  00F220  50F5               	movf	tablat,w,c
  4670  00F222  5823               	subwfb	printf@val+1,w,c
  4671  00F224  A0D8               	btfss	status,0,c
  4672  00F226  D00A               	goto	l2424
  4673                           
  4674                           ;doprnt.c: 1318: break;
  4675  00F228  2A27               	incf	printf@c,f,c
  4676  00F22A  D7EA               	goto	l2408
  4677  00F22C                     l2422:
  4678  00F22C  5024               	movf	printf@flag,w,c
  4679  00F22E  0B80               	andlw	128
  4680                           
  4681                           ; Switch size 1, requested type "space"
  4682                           ; Number of cases is 2, Range of values is 0 to 128
  4683                           ; switch strategies available:
  4684                           ; Name         Instructions Cycles
  4685                           ; simple_byte            7     4 (average)
  4686                           ;	Chosen strategy is simple_byte
  4687  00F230  0A00               	xorlw	0	; case 0
  4688  00F232  B4D8               	btfsc	status,2,c
  4689  00F234  D7CB               	goto	l2392
  4690  00F236  0A80               	xorlw	128	; case 128
  4691  00F238  B4D8               	btfsc	status,2,c
  4692  00F23A  D7E0               	goto	l2406
  4693  00F23C                     l2424:
  4694                           
  4695                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4696  00F23C  5025               	movf	printf@width,w,c
  4697  00F23E  1026               	iorwf	printf@width+1,w,c
  4698  00F240  B4D8               	btfsc	status,2,c
  4699  00F242  D009               	goto	l2430
  4700  00F244  C024  F01A         	movff	printf@flag,??_printf
  4701  00F248  0E03               	movlw	3
  4702  00F24A  161A               	andwf	??_printf,f,c
  4703  00F24C  B4D8               	btfsc	status,2,c
  4704  00F24E  D003               	goto	l2430
  4705                           
  4706                           ;doprnt.c: 1346: width--;
  4707  00F250  0625               	decf	printf@width,f,c
  4708  00F252  A0D8               	btfss	status,0,c
  4709  00F254  0626               	decf	printf@width+1,f,c
  4710  00F256                     l2430:
  4711                           
  4712                           ;doprnt.c: 1381: if(width > c)
  4713  00F256  0E80               	movlw	128
  4714  00F258  BE27               	btfsc	printf@c,7,c
  4715  00F25A  0E7F               	movlw	127
  4716  00F25C  6E1A               	movwf	??_printf& (0+255),c
  4717  00F25E  5025               	movf	printf@width,w,c
  4718  00F260  5C27               	subwf	printf@c,w,c
  4719  00F262  5026               	movf	printf@width+1,w,c
  4720  00F264  0A80               	xorlw	128
  4721  00F266  581A               	subwfb	??_printf& (0+255),w,c
  4722  00F268  B0D8               	btfsc	status,0,c
  4723  00F26A  D007               	goto	l2434
  4724                           
  4725                           ;doprnt.c: 1382: width -= c;
  4726  00F26C  5027               	movf	printf@c,w,c
  4727  00F26E  5E25               	subwf	printf@width,f,c
  4728  00F270  0E00               	movlw	0
  4729  00F272  BE27               	btfsc	printf@c,7,c
  4730  00F274  0EFF               	movlw	255
  4731  00F276  5A26               	subwfb	printf@width+1,f,c
  4732  00F278  D004               	goto	l2436
  4733  00F27A                     l2434:
  4734                           
  4735                           ;doprnt.c: 1383: else
  4736                           ;doprnt.c: 1384: width = 0;
  4737  00F27A  0E00               	movlw	0
  4738  00F27C  6E26               	movwf	printf@width+1,c
  4739  00F27E  0E00               	movlw	0
  4740  00F280  6E25               	movwf	printf@width,c
  4741  00F282                     l2436:
  4742                           
  4743                           ;doprnt.c: 1387: if(flag & 0x04) {
  4744  00F282  A424               	btfss	printf@flag,2,c
  4745  00F284  D014               	goto	l2448
  4746                           
  4747                           ;doprnt.c: 1392: if(flag & 0x03)
  4748  00F286  C024  F01A         	movff	printf@flag,??_printf
  4749  00F28A  0E03               	movlw	3
  4750  00F28C  161A               	andwf	??_printf,f,c
  4751  00F28E  B4D8               	btfsc	status,2,c
  4752  00F290  D003               	goto	l2442
  4753                           
  4754                           ;doprnt.c: 1393: (putch('-') );
  4755  00F292  0E2D               	movlw	45
  4756  00F294  ECB7  F073         	call	_putch
  4757  00F298                     l2442:
  4758                           
  4759                           ;doprnt.c: 1415: if(width)
  4760  00F298  5025               	movf	printf@width,w,c
  4761  00F29A  1026               	iorwf	printf@width+1,w,c
  4762  00F29C  B4D8               	btfsc	status,2,c
  4763  00F29E  D01E               	goto	l2458
  4764                           
  4765                           ;doprnt.c: 1417: (putch('0') );
  4766                           
  4767                           ;doprnt.c: 1416: do
  4768  00F2A0  0E30               	movlw	48
  4769  00F2A2  ECB7  F073         	call	_putch
  4770                           
  4771                           ;doprnt.c: 1418: while(--width);
  4772  00F2A6  0625               	decf	printf@width,f,c
  4773  00F2A8  A0D8               	btfss	status,0,c
  4774  00F2AA  0626               	decf	printf@width+1,f,c
  4775  00F2AC  D7F5               	goto	l2442
  4776  00F2AE                     l2448:
  4777                           
  4778                           ;doprnt.c: 1422: {
  4779                           ;doprnt.c: 1424: if(width
  4780                           ;doprnt.c: 1428: )
  4781  00F2AE  5025               	movf	printf@width,w,c
  4782  00F2B0  1026               	iorwf	printf@width+1,w,c
  4783  00F2B2  B4D8               	btfsc	status,2,c
  4784  00F2B4  D00A               	goto	l2454
  4785  00F2B6                     l2450:
  4786                           
  4787                           ;doprnt.c: 1430: (putch(' ') );
  4788  00F2B6  0E20               	movlw	32
  4789  00F2B8  ECB7  F073         	call	_putch
  4790                           
  4791                           ;doprnt.c: 1431: while(--width);
  4792  00F2BC  0625               	decf	printf@width,f,c
  4793  00F2BE  A0D8               	btfss	status,0,c
  4794  00F2C0  0626               	decf	printf@width+1,f,c
  4795  00F2C2  5025               	movf	printf@width,w,c
  4796  00F2C4  1026               	iorwf	printf@width+1,w,c
  4797  00F2C6  A4D8               	btfss	status,2,c
  4798  00F2C8  D7F6               	goto	l2450
  4799  00F2CA                     l2454:
  4800                           
  4801                           ;doprnt.c: 1438: if(flag & 0x03)
  4802  00F2CA  C024  F01A         	movff	printf@flag,??_printf
  4803  00F2CE  0E03               	movlw	3
  4804  00F2D0  161A               	andwf	??_printf,f,c
  4805  00F2D2  B4D8               	btfsc	status,2,c
  4806  00F2D4  D003               	goto	l2458
  4807                           
  4808                           ;doprnt.c: 1439: (putch('-') );
  4809  00F2D6  0E2D               	movlw	45
  4810  00F2D8  ECB7  F073         	call	_putch
  4811  00F2DC                     l2458:
  4812                           
  4813                           ;doprnt.c: 1469: }
  4814                           ;doprnt.c: 1472: prec = c;
  4815  00F2DC  C027  F021         	movff	printf@c,printf@prec
  4816                           
  4817                           ;doprnt.c: 1474: while(prec--) {
  4818  00F2E0  D050               	goto	l2472
  4819  00F2E2                     l2460:
  4820                           
  4821                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4822  00F2E2  5021               	movf	printf@prec,w,c
  4823  00F2E4  0D02               	mullw	2
  4824  00F2E6  0E72               	movlw	low _dpowers
  4825  00F2E8  24F3               	addwf	prodl,w,c
  4826  00F2EA  6EF6               	movwf	tblptrl,c
  4827  00F2EC  0EFE               	movlw	high _dpowers
  4828  00F2EE  20F4               	addwfc	prodh,w,c
  4829  00F2F0  6EF7               	movwf	tblptrh,c
  4830  00F2F2                     	if	0	;There are less than 3 active tblptr bytes
  4831  00F2F2                     	endif
  4832  00F2F2  0009               	tblrd		*+
  4833  00F2F4  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4834  00F2F8  000A               	tblrd		*-
  4835  00F2FA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4836  00F2FE  C022  F001         	movff	printf@val,___lwdiv@dividend
  4837  00F302  C023  F002         	movff	printf@val+1,___lwdiv@dividend+1
  4838  00F306  EC34  F076         	call	___lwdiv	;wreg free
  4839  00F30A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4840  00F30E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4841  00F312  0E00               	movlw	0
  4842  00F314  6E0B               	movwf	___lwmod@divisor+1,c
  4843  00F316  0E0A               	movlw	10
  4844  00F318  6E0A               	movwf	___lwmod@divisor,c
  4845  00F31A  ECA6  F075         	call	___lwmod	;wreg free
  4846  00F31E  5008               	movf	?___lwmod,w,c
  4847  00F320  0F30               	addlw	48
  4848  00F322  6E27               	movwf	printf@c,c
  4849                           
  4850                           ;doprnt.c: 1491: break;
  4851  00F324  D02B               	goto	l2470
  4852  00F326                     l2462:
  4853                           
  4854                           ;doprnt.c: 1499: {
  4855                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4856  00F326  C022  F001         	movff	printf@val,___lwdiv@dividend
  4857  00F32A  C023  F002         	movff	printf@val+1,___lwdiv@dividend+1
  4858  00F32E  5021               	movf	printf@prec,w,c
  4859  00F330  0D02               	mullw	2
  4860  00F332  0E7C               	movlw	low _hexpowers
  4861  00F334  24F3               	addwf	prodl,w,c
  4862  00F336  6EF6               	movwf	tblptrl,c
  4863  00F338  0EFE               	movlw	high _hexpowers
  4864  00F33A  20F4               	addwfc	prodh,w,c
  4865  00F33C  6EF7               	movwf	tblptrh,c
  4866  00F33E                     	if	0	;There are less than 3 active tblptr bytes
  4867  00F33E                     	endif
  4868  00F33E  0009               	tblrd		*+
  4869  00F340  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4870  00F344  000A               	tblrd		*-
  4871  00F346  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4872  00F34A  EC34  F076         	call	___lwdiv	;wreg free
  4873  00F34E  5001               	movf	?___lwdiv,w,c
  4874  00F350  0B0F               	andlw	15
  4875  00F352  6E1E               	movwf	printf@idx,c
  4876                           
  4877                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4878  00F354  501E               	movf	printf@idx,w,c
  4879  00F356  0D01               	mullw	1
  4880  00F358  0E9E               	movlw	low STR_37
  4881  00F35A  24F3               	addwf	prodl,w,c
  4882  00F35C  6EF6               	movwf	tblptrl,c
  4883  00F35E  0EFE               	movlw	high STR_37
  4884  00F360  20F4               	addwfc	prodh,w,c
  4885  00F362  6EF7               	movwf	tblptrh,c
  4886  00F364                     	if	0	;There are less than 3 active tblptr bytes
  4887  00F364                     	endif
  4888  00F364  0008               	tblrd		*
  4889  00F366  CFF5 F027          	movff	tablat,printf@c
  4890                           
  4891                           ;doprnt.c: 1523: }
  4892                           
  4893                           ;doprnt.c: 1508: }
  4894                           ;doprnt.c: 1510: break;
  4895  00F36A  D008               	goto	l2470
  4896  00F36C                     l2468:
  4897  00F36C  5024               	movf	printf@flag,w,c
  4898  00F36E  0B80               	andlw	128
  4899                           
  4900                           ; Switch size 1, requested type "space"
  4901                           ; Number of cases is 2, Range of values is 0 to 128
  4902                           ; switch strategies available:
  4903                           ; Name         Instructions Cycles
  4904                           ; simple_byte            7     4 (average)
  4905                           ;	Chosen strategy is simple_byte
  4906  00F370  0A00               	xorlw	0	; case 0
  4907  00F372  B4D8               	btfsc	status,2,c
  4908  00F374  D7B6               	goto	l2460
  4909  00F376  0A80               	xorlw	128	; case 128
  4910  00F378  B4D8               	btfsc	status,2,c
  4911  00F37A  D7D5               	goto	l2462
  4912  00F37C                     l2470:
  4913                           
  4914                           ;doprnt.c: 1524: (putch(c) );
  4915  00F37C  5027               	movf	printf@c,w,c
  4916  00F37E  ECB7  F073         	call	_putch
  4917  00F382                     l2472:
  4918  00F382  0621               	decf	printf@prec,f,c
  4919  00F384  2821               	incf	printf@prec,w,c
  4920  00F386  A4D8               	btfss	status,2,c
  4921  00F388  D7F1               	goto	l2468
  4922  00F38A                     l2474:
  4923  00F38A  C012  FFF6         	movff	printf@f,tblptrl
  4924  00F38E  C013  FFF7         	movff	printf@f+1,tblptrh
  4925  00F392  4A12               	infsnz	printf@f,f,c
  4926  00F394  2A13               	incf	printf@f+1,f,c
  4927  00F396                     	if	0	;tblptru may be non-zero
  4928  00F396                     	endif
  4929  00F396                     	if	0	;tblptru may be non-zero
  4930  00F396                     	endif
  4931  00F396  0008               	tblrd		*
  4932  00F398  CFF5 F027          	movff	tablat,printf@c
  4933  00F39C  5027               	movf	printf@c,w,c
  4934  00F39E  B4D8               	btfsc	status,2,c
  4935  00F3A0  0012               	return	
  4936  00F3A2  D67F               	goto	l2348
  4937  00F3A4                     __end_of_printf:
  4938                           	opt stack 0
  4939                           tblptru	equ	0xFF8
  4940                           tblptrh	equ	0xFF7
  4941                           tblptrl	equ	0xFF6
  4942                           tablat	equ	0xFF5
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon2	equ	0xFF1
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           indf2	equ	0xFDF
  4949                           postinc2	equ	0xFDE
  4950                           postdec2	equ	0xFDD
  4951                           fsr2h	equ	0xFDA
  4952                           fsr2l	equ	0xFD9
  4953                           status	equ	0xFD8
  4954                           
  4955 ;; *************** function _putch *****************
  4956 ;; Defined at:
  4957 ;;		line 27 in file "lcd.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  data            1    wreg     unsigned char 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  data            1    2[COMRAM] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;Total ram usage:        1 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    1
  4978 ;; This function calls:
  4979 ;;		_lcdNibble
  4980 ;; This function is called by:
  4981 ;;		_printf
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text20
  4986  00E76E                     __ptext20:
  4987                           	opt stack 0
  4988  00E76E                     _putch:
  4989                           	opt stack 28
  4990                           
  4991                           ;incstack = 0
  4992                           ;putch@data stored from wreg
  4993  00E76E  6E03               	movwf	putch@data,c
  4994                           
  4995                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  4996  00E770  848C               	bsf	3980,2,c	;volatile
  4997                           
  4998                           ;lcd.c: 29: lcdNibble(data);
  4999  00E772  5003               	movf	putch@data,w,c
  5000  00E774  EC5D  F076         	call	_lcdNibble
  5001  00E778  0012               	return		;funcret
  5002  00E77A                     __end_of_putch:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon2	equ	0xFF1
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _isdigit *****************
  5021 ;; Defined at:
  5022 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  c               1    wreg     unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  c               1    2[COMRAM] unsigned char 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;		None               void
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;Total ram usage:        3 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; This function calls:
  5043 ;;		Nothing
  5044 ;; This function is called by:
  5045 ;;		_printf
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text21
  5050  00E7CA                     __ptext21:
  5051                           	opt stack 0
  5052  00E7CA                     _isdigit:
  5053                           	opt stack 29
  5054                           
  5055                           ;incstack = 0
  5056                           ;isdigit@c stored from wreg
  5057  00E7CA  6E03               	movwf	isdigit@c,c
  5058  00E7CC  0E00               	movlw	0
  5059  00E7CE  6E02               	movwf	_isdigit$1191,c
  5060  00E7D0  0E3A               	movlw	58
  5061  00E7D2  6003               	cpfslt	isdigit@c,c
  5062  00E7D4  D005               	goto	l2250
  5063  00E7D6  0E2F               	movlw	47
  5064  00E7D8  6403               	cpfsgt	isdigit@c,c
  5065  00E7DA  D002               	goto	l2250
  5066  00E7DC  0E01               	movlw	1
  5067  00E7DE  6E02               	movwf	_isdigit$1191,c
  5068  00E7E0                     l2250:
  5069  00E7E0  C002  F001         	movff	_isdigit$1191,??_isdigit
  5070  00E7E4  3001               	rrcf	??_isdigit,w,c
  5071  00E7E6  0012               	return	
  5072  00E7E8                     __end_of_isdigit:
  5073                           	opt stack 0
  5074                           tblptru	equ	0xFF8
  5075                           tblptrh	equ	0xFF7
  5076                           tblptrl	equ	0xFF6
  5077                           tablat	equ	0xFF5
  5078                           prodh	equ	0xFF4
  5079                           prodl	equ	0xFF3
  5080                           intcon2	equ	0xFF1
  5081                           postinc0	equ	0xFEE
  5082                           wreg	equ	0xFE8
  5083                           indf2	equ	0xFDF
  5084                           postinc2	equ	0xFDE
  5085                           postdec2	equ	0xFDD
  5086                           fsr2h	equ	0xFDA
  5087                           fsr2l	equ	0xFD9
  5088                           status	equ	0xFD8
  5089                           
  5090 ;; *************** function ___wmul *****************
  5091 ;; Defined at:
  5092 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  multiplier      2    0[COMRAM] unsigned int 
  5095 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  product         2    4[COMRAM] unsigned int 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  2    0[COMRAM] unsigned int 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, prodl, prodh
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        6 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;;		_timePassed
  5118 ;;		_printf
  5119 ;;		_backlogTest
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text22
  5124  00E82A                     __ptext22:
  5125                           	opt stack 0
  5126  00E82A                     ___wmul:
  5127                           	opt stack 29
  5128                           
  5129                           ;incstack = 0
  5130  00E82A  5001               	movf	___wmul@multiplier,w,c
  5131  00E82C  0203               	mulwf	___wmul@multiplicand,c
  5132  00E82E  CFF3 F005          	movff	prodl,___wmul@product
  5133  00E832  CFF4 F006          	movff	prodh,___wmul@product+1
  5134  00E836  5001               	movf	___wmul@multiplier,w,c
  5135  00E838  0204               	mulwf	___wmul@multiplicand+1,c
  5136  00E83A  50F3               	movf	prodl,w,c
  5137  00E83C  2606               	addwf	___wmul@product+1,f,c
  5138  00E83E  5002               	movf	___wmul@multiplier+1,w,c
  5139  00E840  0203               	mulwf	___wmul@multiplicand,c
  5140  00E842  50F3               	movf	prodl,w,c
  5141  00E844  2606               	addwf	___wmul@product+1,f,c
  5142  00E846  C005  F001         	movff	___wmul@product,?___wmul
  5143  00E84A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5144  00E84E  0012               	return	
  5145  00E850                     __end_of___wmul:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon2	equ	0xFF1
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function ___lwmod *****************
  5164 ;; Defined at:
  5165 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  dividend        2    7[COMRAM] unsigned int 
  5168 ;;  divisor         2    9[COMRAM] unsigned int 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  counter         1   11[COMRAM] unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  2    7[COMRAM] unsigned int 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        5 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_printf
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text23
  5194  00EB4C                     __ptext23:
  5195                           	opt stack 0
  5196  00EB4C                     ___lwmod:
  5197                           	opt stack 29
  5198                           
  5199                           ;incstack = 0
  5200  00EB4C  500A               	movf	___lwmod@divisor,w,c
  5201  00EB4E  100B               	iorwf	___lwmod@divisor+1,w,c
  5202  00EB50  B4D8               	btfsc	status,2,c
  5203  00EB52  D018               	goto	l993
  5204  00EB54  0E01               	movlw	1
  5205  00EB56  6E0C               	movwf	___lwmod@counter,c
  5206  00EB58  D004               	goto	l2310
  5207  00EB5A                     l2308:
  5208  00EB5A  90D8               	bcf	status,0,c
  5209  00EB5C  360A               	rlcf	___lwmod@divisor,f,c
  5210  00EB5E  360B               	rlcf	___lwmod@divisor+1,f,c
  5211  00EB60  2A0C               	incf	___lwmod@counter,f,c
  5212  00EB62                     l2310:
  5213  00EB62  AE0B               	btfss	___lwmod@divisor+1,7,c
  5214  00EB64  D7FA               	goto	l2308
  5215  00EB66                     l2312:
  5216  00EB66  500A               	movf	___lwmod@divisor,w,c
  5217  00EB68  5C08               	subwf	___lwmod@dividend,w,c
  5218  00EB6A  500B               	movf	___lwmod@divisor+1,w,c
  5219  00EB6C  5809               	subwfb	___lwmod@dividend+1,w,c
  5220  00EB6E  A0D8               	btfss	status,0,c
  5221  00EB70  D004               	goto	l2316
  5222  00EB72  500A               	movf	___lwmod@divisor,w,c
  5223  00EB74  5E08               	subwf	___lwmod@dividend,f,c
  5224  00EB76  500B               	movf	___lwmod@divisor+1,w,c
  5225  00EB78  5A09               	subwfb	___lwmod@dividend+1,f,c
  5226  00EB7A                     l2316:
  5227  00EB7A  90D8               	bcf	status,0,c
  5228  00EB7C  320B               	rrcf	___lwmod@divisor+1,f,c
  5229  00EB7E  320A               	rrcf	___lwmod@divisor,f,c
  5230  00EB80  2E0C               	decfsz	___lwmod@counter,f,c
  5231  00EB82  D7F1               	goto	l2312
  5232  00EB84                     l993:
  5233  00EB84  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5234  00EB88  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5235  00EB8C  0012               	return		;funcret
  5236  00EB8E                     __end_of___lwmod:
  5237                           	opt stack 0
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           intcon2	equ	0xFF1
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function ___lwdiv *****************
  5255 ;; Defined at:
  5256 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  dividend        2    0[COMRAM] unsigned int 
  5259 ;;  divisor         2    2[COMRAM] unsigned int 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  quotient        2    4[COMRAM] unsigned int 
  5262 ;;  counter         1    6[COMRAM] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  2    0[COMRAM] unsigned int 
  5265 ;; Registers used:
  5266 ;;		wreg, status,2, status,0
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5272 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;Total ram usage:        7 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_printf
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text24
  5286  00EC68                     __ptext24:
  5287                           	opt stack 0
  5288  00EC68                     ___lwdiv:
  5289                           	opt stack 29
  5290                           
  5291                           ;incstack = 0
  5292  00EC68  0E00               	movlw	0
  5293  00EC6A  6E06               	movwf	___lwdiv@quotient+1,c
  5294  00EC6C  0E00               	movlw	0
  5295  00EC6E  6E05               	movwf	___lwdiv@quotient,c
  5296  00EC70  5003               	movf	___lwdiv@divisor,w,c
  5297  00EC72  1004               	iorwf	___lwdiv@divisor+1,w,c
  5298  00EC74  B4D8               	btfsc	status,2,c
  5299  00EC76  D01C               	goto	l983
  5300  00EC78  0E01               	movlw	1
  5301  00EC7A  6E07               	movwf	___lwdiv@counter,c
  5302  00EC7C  D004               	goto	l2290
  5303  00EC7E                     l2288:
  5304  00EC7E  90D8               	bcf	status,0,c
  5305  00EC80  3603               	rlcf	___lwdiv@divisor,f,c
  5306  00EC82  3604               	rlcf	___lwdiv@divisor+1,f,c
  5307  00EC84  2A07               	incf	___lwdiv@counter,f,c
  5308  00EC86                     l2290:
  5309  00EC86  AE04               	btfss	___lwdiv@divisor+1,7,c
  5310  00EC88  D7FA               	goto	l2288
  5311  00EC8A                     l2292:
  5312  00EC8A  90D8               	bcf	status,0,c
  5313  00EC8C  3605               	rlcf	___lwdiv@quotient,f,c
  5314  00EC8E  3606               	rlcf	___lwdiv@quotient+1,f,c
  5315  00EC90  5003               	movf	___lwdiv@divisor,w,c
  5316  00EC92  5C01               	subwf	___lwdiv@dividend,w,c
  5317  00EC94  5004               	movf	___lwdiv@divisor+1,w,c
  5318  00EC96  5802               	subwfb	___lwdiv@dividend+1,w,c
  5319  00EC98  A0D8               	btfss	status,0,c
  5320  00EC9A  D005               	goto	l2300
  5321  00EC9C  5003               	movf	___lwdiv@divisor,w,c
  5322  00EC9E  5E01               	subwf	___lwdiv@dividend,f,c
  5323  00ECA0  5004               	movf	___lwdiv@divisor+1,w,c
  5324  00ECA2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5325  00ECA4  8005               	bsf	___lwdiv@quotient,0,c
  5326  00ECA6                     l2300:
  5327  00ECA6  90D8               	bcf	status,0,c
  5328  00ECA8  3204               	rrcf	___lwdiv@divisor+1,f,c
  5329  00ECAA  3203               	rrcf	___lwdiv@divisor,f,c
  5330  00ECAC  2E07               	decfsz	___lwdiv@counter,f,c
  5331  00ECAE  D7ED               	goto	l2292
  5332  00ECB0                     l983:
  5333  00ECB0  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5334  00ECB4  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5335  00ECB8  0012               	return		;funcret
  5336  00ECBA                     __end_of___lwdiv:
  5337                           	opt stack 0
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           intcon2	equ	0xFF1
  5345                           postinc0	equ	0xFEE
  5346                           wreg	equ	0xFE8
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function _lcdInst *****************
  5355 ;; Defined at:
  5356 ;;		line 22 in file "lcd.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  data            1    wreg     unsigned char 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  data            1    2[COMRAM] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;Total ram usage:        1 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    1
  5377 ;; This function calls:
  5378 ;;		_lcdNibble
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;;		_initLCD
  5382 ;;		_homescreen
  5383 ;;		_displayLogs
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text25
  5388  00E762                     __ptext25:
  5389                           	opt stack 0
  5390  00E762                     _lcdInst:
  5391                           	opt stack 29
  5392                           
  5393                           ;incstack = 0
  5394                           ;lcdInst@data stored from wreg
  5395  00E762  6E03               	movwf	lcdInst@data,c
  5396                           
  5397                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  5398  00E764  948C               	bcf	3980,2,c	;volatile
  5399                           
  5400                           ;lcd.c: 24: lcdNibble(data);
  5401  00E766  5003               	movf	lcdInst@data,w,c
  5402  00E768  EC5D  F076         	call	_lcdNibble
  5403  00E76C  0012               	return		;funcret
  5404  00E76E                     __end_of_lcdInst:
  5405                           	opt stack 0
  5406                           tblptru	equ	0xFF8
  5407                           tblptrh	equ	0xFF7
  5408                           tblptrl	equ	0xFF6
  5409                           tablat	equ	0xFF5
  5410                           prodh	equ	0xFF4
  5411                           prodl	equ	0xFF3
  5412                           intcon2	equ	0xFF1
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           indf2	equ	0xFDF
  5416                           postinc2	equ	0xFDE
  5417                           postdec2	equ	0xFDD
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _lcdNibble *****************
  5423 ;; Defined at:
  5424 ;;		line 32 in file "lcd.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  data            1    wreg     unsigned char 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  data            1    1[COMRAM] unsigned char 
  5429 ;;  temp            1    0[COMRAM] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:        2 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_lcdInst
  5449 ;;		_putch
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text26
  5454  00ECBA                     __ptext26:
  5455                           	opt stack 0
  5456  00ECBA                     _lcdNibble:
  5457                           	opt stack 28
  5458                           
  5459                           ;incstack = 0
  5460                           ;lcdNibble@data stored from wreg
  5461  00ECBA  6E02               	movwf	lcdNibble@data,c
  5462                           
  5463                           ;lcd.c: 34: char temp = data & 0xF0;
  5464  00ECBC  5002               	movf	lcdNibble@data,w,c
  5465  00ECBE  0BF0               	andlw	240
  5466  00ECC0  6E01               	movwf	lcdNibble@temp,c
  5467                           
  5468                           ;lcd.c: 35: LATD = LATD & 0x0F;
  5469  00ECC2  508C               	movf	3980,w,c	;volatile
  5470  00ECC4  0B0F               	andlw	15
  5471  00ECC6  6E8C               	movwf	3980,c	;volatile
  5472                           
  5473                           ;lcd.c: 36: LATD = temp | LATD;
  5474  00ECC8  5001               	movf	lcdNibble@temp,w,c
  5475  00ECCA  108C               	iorwf	3980,w,c	;volatile
  5476  00ECCC  6E8C               	movwf	3980,c	;volatile
  5477                           
  5478                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  5479  00ECCE  968C               	bcf	3980,3,c	;volatile
  5480                           
  5481                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5482  00ECD0  0E42               	movlw	66
  5483  00ECD2                     u2687:
  5484  00ECD2  2EE8               	decfsz	wreg,f,c
  5485  00ECD4  D7FE               	bra	u2687
  5486  00ECD6  D000               	nop2	
  5487                           
  5488                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  5489  00ECD8  868C               	bsf	3980,3,c	;volatile
  5490                           
  5491                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5492  00ECDA  0E42               	movlw	66
  5493  00ECDC                     u2697:
  5494  00ECDC  2EE8               	decfsz	wreg,f,c
  5495  00ECDE  D7FE               	bra	u2697
  5496  00ECE0  D000               	nop2	
  5497                           
  5498                           ;lcd.c: 43: data = data << 4;
  5499  00ECE2  3802               	swapf	lcdNibble@data,w,c
  5500  00ECE4  0BF0               	andlw	240
  5501  00ECE6  6E02               	movwf	lcdNibble@data,c
  5502                           
  5503                           ;lcd.c: 45: temp = data & 0xF0;
  5504  00ECE8  5002               	movf	lcdNibble@data,w,c
  5505  00ECEA  0BF0               	andlw	240
  5506  00ECEC  6E01               	movwf	lcdNibble@temp,c
  5507                           
  5508                           ;lcd.c: 46: LATD = LATD & 0x0F;
  5509  00ECEE  508C               	movf	3980,w,c	;volatile
  5510  00ECF0  0B0F               	andlw	15
  5511  00ECF2  6E8C               	movwf	3980,c	;volatile
  5512                           
  5513                           ;lcd.c: 47: LATD = temp | LATD;
  5514  00ECF4  5001               	movf	lcdNibble@temp,w,c
  5515  00ECF6  108C               	iorwf	3980,w,c	;volatile
  5516  00ECF8  6E8C               	movwf	3980,c	;volatile
  5517                           
  5518                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  5519  00ECFA  968C               	bcf	3980,3,c	;volatile
  5520                           
  5521                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5522  00ECFC  0E42               	movlw	66
  5523  00ECFE                     u2707:
  5524  00ECFE  2EE8               	decfsz	wreg,f,c
  5525  00ED00  D7FE               	bra	u2707
  5526  00ED02  D000               	nop2	
  5527                           
  5528                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  5529  00ED04  868C               	bsf	3980,3,c	;volatile
  5530                           
  5531                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  5532  00ED06  0E42               	movlw	66
  5533  00ED08                     u2717:
  5534  00ED08  2EE8               	decfsz	wreg,f,c
  5535  00ED0A  D7FE               	bra	u2717
  5536  00ED0C  D000               	nop2	
  5537  00ED0E  0012               	return		;funcret
  5538  00ED10                     __end_of_lcdNibble:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           intcon2	equ	0xFF1
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           indf2	equ	0xFDF
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           fsr2h	equ	0xFDA
  5553                           fsr2l	equ	0xFD9
  5554                           status	equ	0xFD8
  5555                           
  5556 ;; *************** function _keycheck *****************
  5557 ;; Defined at:
  5558 ;;		line 26 in file "main.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;		None
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;		None
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  1    wreg      void 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;Total ram usage:        0 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_main
  5582 ;;		_displayLogs
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text27
  5587  00E78C                     __ptext27:
  5588                           	opt stack 0
  5589  00E78C                     _keycheck:
  5590                           	opt stack 30
  5591  00E78C                     l127:
  5592  00E78C  A281               	btfss	3969,1,c	;volatile
  5593  00E78E  D7FE               	goto	l127
  5594                           
  5595                           ;main.c: 30: }
  5596                           ;main.c: 31: keypress = (PORTB & 0xF0)>>4;
  5597  00E790  3881               	swapf	3969,w,c	;volatile
  5598  00E792  0B0F               	andlw	15
  5599  00E794  0B0F               	andlw	15
  5600  00E796  6E59               	movwf	_keypress,c	;volatile
  5601  00E798                     l130:
  5602  00E798  B281               	btfsc	3969,1,c	;volatile
  5603  00E79A  D7FE               	goto	l130
  5604                           
  5605                           ;main.c: 34: }
  5606                           ;main.c: 35: __nop();
  5607  00E79C  F000               	nop	
  5608                           
  5609                           ;main.c: 36: return;
  5610  00E79E  0012               	return		;funcret
  5611  00E7A0                     __end_of_keycheck:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon2	equ	0xFF1
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _eepromRead *****************
  5630 ;; Defined at:
  5631 ;;		line 30 in file "interface.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  address         1    wreg     char 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  address         1    2[COMRAM] char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      char 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        3 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; This function calls:
  5652 ;;		Nothing
  5653 ;; This function is called by:
  5654 ;;		_displayLogs
  5655 ;;		_updateEEPROM
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text28
  5660  00E876                     __ptext28:
  5661                           	opt stack 0
  5662  00E876                     _eepromRead:
  5663                           	opt stack 29
  5664                           
  5665                           ;incstack = 0
  5666                           ;eepromRead@address stored from wreg
  5667  00E876  6E03               	movwf	eepromRead@address,c
  5668                           
  5669                           ;interface.c: 32: EEADRH = (signed char)(address >> 8);
  5670  00E878  C003  F001         	movff	eepromRead@address,??_eepromRead
  5671  00E87C  0E08               	movlw	8
  5672  00E87E  6E02               	movwf	(??_eepromRead+1)& (0+255),c
  5673  00E880                     u1655:
  5674  00E880  3401               	rlcf	??_eepromRead,w,c
  5675  00E882  3201               	rrcf	??_eepromRead,f,c
  5676  00E884  2E02               	decfsz	(??_eepromRead+1)& (0+255),f,c
  5677  00E886  D7FC               	goto	u1655
  5678  00E888  5001               	movf	??_eepromRead,w,c
  5679  00E88A  6EAA               	movwf	4010,c	;volatile
  5680                           
  5681                           ;interface.c: 33: EEADR = (signed char)address;
  5682  00E88C  C003  FFA9         	movff	eepromRead@address,4009	;volatile
  5683                           
  5684                           ;interface.c: 35: EECON1bits.EEPGD = 0;
  5685  00E890  9EA6               	bcf	4006,7,c	;volatile
  5686                           
  5687                           ;interface.c: 36: EECON1bits.CFGS = 0;
  5688  00E892  9CA6               	bcf	4006,6,c	;volatile
  5689                           
  5690                           ;interface.c: 37: EECON1bits.RD = 1;
  5691  00E894  80A6               	bsf	4006,0,c	;volatile
  5692  00E896                     l478:
  5693  00E896  B0A6               	btfsc	4006,0,c	;volatile
  5694  00E898  D7FE               	goto	l478
  5695                           
  5696                           ;interface.c: 43: return EEDATA;
  5697  00E89A  50A8               	movf	4008,w,c	;volatile
  5698  00E89C  0012               	return	
  5699  00E89E                     __end_of_eepromRead:
  5700                           	opt stack 0
  5701                           tblptru	equ	0xFF8
  5702                           tblptrh	equ	0xFF7
  5703                           tblptrl	equ	0xFF6
  5704                           tablat	equ	0xFF5
  5705                           prodh	equ	0xFF4
  5706                           prodl	equ	0xFF3
  5707                           intcon2	equ	0xFF1
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           indf2	equ	0xFDF
  5711                           postinc2	equ	0xFDE
  5712                           postdec2	equ	0xFDD
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _S3off *****************
  5718 ;; Defined at:
  5719 ;;		line 162 in file "motors.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;Total ram usage:        0 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_main
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text29
  5747  00EB0C                     __ptext29:
  5748                           	opt stack 0
  5749  00EB0C                     _S3off:
  5750                           	opt stack 30
  5751                           
  5752                           ;motors.c: 163: if (s == 4){LATCbits.LATC7 = 1;}
  5753                           
  5754                           ;incstack = 0
  5755  00EB0C  0E04               	movlw	4
  5756  00EB0E  1857               	xorwf	_s,w,c
  5757  00EB10  1058               	iorwf	_s+1,w,c
  5758  00EB12  A4D8               	btfss	status,2,c
  5759  00EB14  D002               	goto	l437
  5760  00EB16  8E8B               	bsf	3979,7,c	;volatile
  5761  00EB18  D001               	goto	l2730
  5762  00EB1A                     l437:
  5763                           
  5764                           ;motors.c: 164: else{LATCbits.LATC7 = 0;}
  5765  00EB1A  9E8B               	bcf	3979,7,c	;volatile
  5766  00EB1C                     l2730:
  5767                           
  5768                           ;motors.c: 165: if (s == 2){LATCbits.LATC6 = 1;}
  5769  00EB1C  0E02               	movlw	2
  5770  00EB1E  1857               	xorwf	_s,w,c
  5771  00EB20  1058               	iorwf	_s+1,w,c
  5772  00EB22  A4D8               	btfss	status,2,c
  5773  00EB24  D002               	goto	l439
  5774  00EB26  8C8B               	bsf	3979,6,c	;volatile
  5775  00EB28  D001               	goto	l2734
  5776  00EB2A                     l439:
  5777                           
  5778                           ;motors.c: 166: else{LATCbits.LATC6 = 0;}
  5779  00EB2A  9C8B               	bcf	3979,6,c	;volatile
  5780  00EB2C                     l2734:
  5781                           
  5782                           ;motors.c: 167: if (s == 3){LATCbits.LATC0 = 1;}
  5783  00EB2C  0E03               	movlw	3
  5784  00EB2E  1857               	xorwf	_s,w,c
  5785  00EB30  1058               	iorwf	_s+1,w,c
  5786  00EB32  A4D8               	btfss	status,2,c
  5787  00EB34  D002               	goto	l441
  5788  00EB36  808B               	bsf	3979,0,c	;volatile
  5789  00EB38  D001               	goto	l2738
  5790  00EB3A                     l441:
  5791                           
  5792                           ;motors.c: 168: else{LATCbits.LATC0 = 0;}
  5793  00EB3A  908B               	bcf	3979,0,c	;volatile
  5794  00EB3C                     l2738:
  5795                           
  5796                           ;motors.c: 169: if (s == 1){LATCbits.LATC5 = 1;}
  5797  00EB3C  0457               	decf	_s,w,c
  5798  00EB3E  1058               	iorwf	_s+1,w,c
  5799  00EB40  A4D8               	btfss	status,2,c
  5800  00EB42  D002               	goto	l443
  5801  00EB44  8A8B               	bsf	3979,5,c	;volatile
  5802  00EB46  0012               	return	
  5803  00EB48                     l443:
  5804                           
  5805                           ;motors.c: 170: else{LATCbits.LATC5 = 0;}
  5806  00EB48  9A8B               	bcf	3979,5,c	;volatile
  5807  00EB4A  0012               	return	
  5808  00EB4C                     __end_of_S3off:
  5809                           	opt stack 0
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           intcon2	equ	0xFF1
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           postdec2	equ	0xFDD
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _S3forward *****************
  5827 ;; Defined at:
  5828 ;;		line 141 in file "motors.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;		None
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;Total ram usage:        0 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_main
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text30
  5856  00EACC                     __ptext30:
  5857                           	opt stack 0
  5858  00EACC                     _S3forward:
  5859                           	opt stack 30
  5860                           
  5861                           ;motors.c: 142: if (s == 1){LATCbits.LATC7 = 1;}
  5862                           
  5863                           ;incstack = 0
  5864  00EACC  0457               	decf	_s,w,c
  5865  00EACE  1058               	iorwf	_s+1,w,c
  5866  00EAD0  A4D8               	btfss	status,2,c
  5867  00EAD2  D002               	goto	l415
  5868  00EAD4  8E8B               	bsf	3979,7,c	;volatile
  5869  00EAD6  D001               	goto	l2666
  5870  00EAD8                     l415:
  5871                           
  5872                           ;motors.c: 143: else{LATCbits.LATC7 = 0;}
  5873  00EAD8  9E8B               	bcf	3979,7,c	;volatile
  5874  00EADA                     l2666:
  5875                           
  5876                           ;motors.c: 144: if (s == 2){LATCbits.LATC6 = 1;}
  5877  00EADA  0E02               	movlw	2
  5878  00EADC  1857               	xorwf	_s,w,c
  5879  00EADE  1058               	iorwf	_s+1,w,c
  5880  00EAE0  A4D8               	btfss	status,2,c
  5881  00EAE2  D002               	goto	l417
  5882  00EAE4  8C8B               	bsf	3979,6,c	;volatile
  5883  00EAE6  D001               	goto	l2670
  5884  00EAE8                     l417:
  5885                           
  5886                           ;motors.c: 145: else{LATCbits.LATC6 = 0;}
  5887  00EAE8  9C8B               	bcf	3979,6,c	;volatile
  5888  00EAEA                     l2670:
  5889                           
  5890                           ;motors.c: 146: if (s == 3){LATCbits.LATC0 = 1;}
  5891  00EAEA  0E03               	movlw	3
  5892  00EAEC  1857               	xorwf	_s,w,c
  5893  00EAEE  1058               	iorwf	_s+1,w,c
  5894  00EAF0  A4D8               	btfss	status,2,c
  5895  00EAF2  D002               	goto	l419
  5896  00EAF4  808B               	bsf	3979,0,c	;volatile
  5897  00EAF6  D001               	goto	l2674
  5898  00EAF8                     l419:
  5899                           
  5900                           ;motors.c: 147: else{LATCbits.LATC0 = 0;}
  5901  00EAF8  908B               	bcf	3979,0,c	;volatile
  5902  00EAFA                     l2674:
  5903                           
  5904                           ;motors.c: 148: if (s == 4){LATCbits.LATC5 = 1;}
  5905  00EAFA  0E04               	movlw	4
  5906  00EAFC  1857               	xorwf	_s,w,c
  5907  00EAFE  1058               	iorwf	_s+1,w,c
  5908  00EB00  A4D8               	btfss	status,2,c
  5909  00EB02  D002               	goto	l421
  5910  00EB04  8A8B               	bsf	3979,5,c	;volatile
  5911  00EB06  0012               	return	
  5912  00EB08                     l421:
  5913                           
  5914                           ;motors.c: 149: else{LATCbits.LATC5 = 0;}
  5915  00EB08  9A8B               	bcf	3979,5,c	;volatile
  5916  00EB0A  0012               	return	
  5917  00EB0C                     __end_of_S3forward:
  5918                           	opt stack 0
  5919                           tblptru	equ	0xFF8
  5920                           tblptrh	equ	0xFF7
  5921                           tblptrl	equ	0xFF6
  5922                           tablat	equ	0xFF5
  5923                           prodh	equ	0xFF4
  5924                           prodl	equ	0xFF3
  5925                           intcon2	equ	0xFF1
  5926                           postinc0	equ	0xFEE
  5927                           wreg	equ	0xFE8
  5928                           indf2	equ	0xFDF
  5929                           postinc2	equ	0xFDE
  5930                           postdec2	equ	0xFDD
  5931                           fsr2h	equ	0xFDA
  5932                           fsr2l	equ	0xFD9
  5933                           status	equ	0xFD8
  5934                           
  5935 ;; *************** function _S3backward *****************
  5936 ;; Defined at:
  5937 ;;		line 152 in file "motors.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_main
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text31
  5965  00EA8C                     __ptext31:
  5966                           	opt stack 0
  5967  00EA8C                     _S3backward:
  5968                           	opt stack 30
  5969                           
  5970                           ;motors.c: 153: if (s == 4){LATCbits.LATC7 = 1;}
  5971                           
  5972                           ;incstack = 0
  5973  00EA8C  0E04               	movlw	4
  5974  00EA8E  1857               	xorwf	_s,w,c
  5975  00EA90  1058               	iorwf	_s+1,w,c
  5976  00EA92  A4D8               	btfss	status,2,c
  5977  00EA94  D002               	goto	l426
  5978  00EA96  8E8B               	bsf	3979,7,c	;volatile
  5979  00EA98  D001               	goto	l2714
  5980  00EA9A                     l426:
  5981                           
  5982                           ;motors.c: 154: else{LATCbits.LATC7 = 0;}
  5983  00EA9A  9E8B               	bcf	3979,7,c	;volatile
  5984  00EA9C                     l2714:
  5985                           
  5986                           ;motors.c: 155: if (s == 3){LATCbits.LATC6 = 1;}
  5987  00EA9C  0E03               	movlw	3
  5988  00EA9E  1857               	xorwf	_s,w,c
  5989  00EAA0  1058               	iorwf	_s+1,w,c
  5990  00EAA2  A4D8               	btfss	status,2,c
  5991  00EAA4  D002               	goto	l428
  5992  00EAA6  8C8B               	bsf	3979,6,c	;volatile
  5993  00EAA8  D001               	goto	l2718
  5994  00EAAA                     l428:
  5995                           
  5996                           ;motors.c: 156: else{LATCbits.LATC6 = 0;}
  5997  00EAAA  9C8B               	bcf	3979,6,c	;volatile
  5998  00EAAC                     l2718:
  5999                           
  6000                           ;motors.c: 157: if (s == 2){LATCbits.LATC0 = 1;}
  6001  00EAAC  0E02               	movlw	2
  6002  00EAAE  1857               	xorwf	_s,w,c
  6003  00EAB0  1058               	iorwf	_s+1,w,c
  6004  00EAB2  A4D8               	btfss	status,2,c
  6005  00EAB4  D002               	goto	l430
  6006  00EAB6  808B               	bsf	3979,0,c	;volatile
  6007  00EAB8  D001               	goto	l2722
  6008  00EABA                     l430:
  6009                           
  6010                           ;motors.c: 158: else{LATCbits.LATC0 = 0;}
  6011  00EABA  908B               	bcf	3979,0,c	;volatile
  6012  00EABC                     l2722:
  6013                           
  6014                           ;motors.c: 159: if (s == 1){LATCbits.LATC5 = 1;}
  6015  00EABC  0457               	decf	_s,w,c
  6016  00EABE  1058               	iorwf	_s+1,w,c
  6017  00EAC0  A4D8               	btfss	status,2,c
  6018  00EAC2  D002               	goto	l432
  6019  00EAC4  8A8B               	bsf	3979,5,c	;volatile
  6020  00EAC6  0012               	return	
  6021  00EAC8                     l432:
  6022                           
  6023                           ;motors.c: 160: else{LATCbits.LATC5 = 0;}
  6024  00EAC8  9A8B               	bcf	3979,5,c	;volatile
  6025  00EACA  0012               	return	
  6026  00EACC                     __end_of_S3backward:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon2	equ	0xFF1
  6035                           postinc0	equ	0xFEE
  6036                           wreg	equ	0xFE8
  6037                           indf2	equ	0xFDF
  6038                           postinc2	equ	0xFDE
  6039                           postdec2	equ	0xFDD
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _S2off *****************
  6045 ;; Defined at:
  6046 ;;		line 98 in file "motors.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;		None
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;		None
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  1    wreg      void 
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;Total ram usage:        0 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; This function calls:
  6067 ;;		Nothing
  6068 ;; This function is called by:
  6069 ;;		_main
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text32
  6074  00EA4C                     __ptext32:
  6075                           	opt stack 0
  6076  00EA4C                     _S2off:
  6077                           	opt stack 30
  6078                           
  6079                           ;motors.c: 99: if (s == 4){LATEbits.LATE2 = 1;}
  6080                           
  6081                           ;incstack = 0
  6082  00EA4C  0E04               	movlw	4
  6083  00EA4E  1857               	xorwf	_s,w,c
  6084  00EA50  1058               	iorwf	_s+1,w,c
  6085  00EA52  A4D8               	btfss	status,2,c
  6086  00EA54  D002               	goto	l371
  6087  00EA56  848D               	bsf	3981,2,c	;volatile
  6088  00EA58  D001               	goto	l2746
  6089  00EA5A                     l371:
  6090                           
  6091                           ;motors.c: 100: else{LATEbits.LATE2 = 0;}
  6092  00EA5A  948D               	bcf	3981,2,c	;volatile
  6093  00EA5C                     l2746:
  6094                           
  6095                           ;motors.c: 101: if (s == 2){LATEbits.LATE1 = 1;}
  6096  00EA5C  0E02               	movlw	2
  6097  00EA5E  1857               	xorwf	_s,w,c
  6098  00EA60  1058               	iorwf	_s+1,w,c
  6099  00EA62  A4D8               	btfss	status,2,c
  6100  00EA64  D002               	goto	l373
  6101  00EA66  828D               	bsf	3981,1,c	;volatile
  6102  00EA68  D001               	goto	l2750
  6103  00EA6A                     l373:
  6104                           
  6105                           ;motors.c: 102: else{LATEbits.LATE1 = 0;}
  6106  00EA6A  928D               	bcf	3981,1,c	;volatile
  6107  00EA6C                     l2750:
  6108                           
  6109                           ;motors.c: 103: if (s == 3){LATAbits.LATA4 = 1;}
  6110  00EA6C  0E03               	movlw	3
  6111  00EA6E  1857               	xorwf	_s,w,c
  6112  00EA70  1058               	iorwf	_s+1,w,c
  6113  00EA72  A4D8               	btfss	status,2,c
  6114  00EA74  D002               	goto	l375
  6115  00EA76  8889               	bsf	3977,4,c	;volatile
  6116  00EA78  D001               	goto	l2754
  6117  00EA7A                     l375:
  6118                           
  6119                           ;motors.c: 104: else{LATAbits.LATA4 = 0;}
  6120  00EA7A  9889               	bcf	3977,4,c	;volatile
  6121  00EA7C                     l2754:
  6122                           
  6123                           ;motors.c: 105: if (s == 1){LATDbits.LATD0 = 1;}
  6124  00EA7C  0457               	decf	_s,w,c
  6125  00EA7E  1058               	iorwf	_s+1,w,c
  6126  00EA80  A4D8               	btfss	status,2,c
  6127  00EA82  D002               	goto	l377
  6128  00EA84  808C               	bsf	3980,0,c	;volatile
  6129  00EA86  0012               	return	
  6130  00EA88                     l377:
  6131                           
  6132                           ;motors.c: 106: else{LATDbits.LATD0 = 0;}
  6133  00EA88  908C               	bcf	3980,0,c	;volatile
  6134  00EA8A  0012               	return	
  6135  00EA8C                     __end_of_S2off:
  6136                           	opt stack 0
  6137                           tblptru	equ	0xFF8
  6138                           tblptrh	equ	0xFF7
  6139                           tblptrl	equ	0xFF6
  6140                           tablat	equ	0xFF5
  6141                           prodh	equ	0xFF4
  6142                           prodl	equ	0xFF3
  6143                           intcon2	equ	0xFF1
  6144                           postinc0	equ	0xFEE
  6145                           wreg	equ	0xFE8
  6146                           indf2	equ	0xFDF
  6147                           postinc2	equ	0xFDE
  6148                           postdec2	equ	0xFDD
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function _S2forward *****************
  6154 ;; Defined at:
  6155 ;;		line 77 in file "motors.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;		None
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1    wreg      void 
  6162 ;; Registers used:
  6163 ;;		wreg, status,2, status,0
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;Total ram usage:        0 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; This function calls:
  6176 ;;		Nothing
  6177 ;; This function is called by:
  6178 ;;		_main
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           	psect	text33
  6183  00EA0C                     __ptext33:
  6184                           	opt stack 0
  6185  00EA0C                     _S2forward:
  6186                           	opt stack 30
  6187                           
  6188                           ;motors.c: 78: if (s == 1){LATEbits.LATE2 = 1;}
  6189                           
  6190                           ;incstack = 0
  6191  00EA0C  0457               	decf	_s,w,c
  6192  00EA0E  1058               	iorwf	_s+1,w,c
  6193  00EA10  A4D8               	btfss	status,2,c
  6194  00EA12  D002               	goto	l349
  6195  00EA14  848D               	bsf	3981,2,c	;volatile
  6196  00EA16  D001               	goto	l2634
  6197  00EA18                     l349:
  6198                           
  6199                           ;motors.c: 79: else{LATEbits.LATE2 = 0;}
  6200  00EA18  948D               	bcf	3981,2,c	;volatile
  6201  00EA1A                     l2634:
  6202                           
  6203                           ;motors.c: 80: if (s == 2){LATEbits.LATE1 = 1;}
  6204  00EA1A  0E02               	movlw	2
  6205  00EA1C  1857               	xorwf	_s,w,c
  6206  00EA1E  1058               	iorwf	_s+1,w,c
  6207  00EA20  A4D8               	btfss	status,2,c
  6208  00EA22  D002               	goto	l351
  6209  00EA24  828D               	bsf	3981,1,c	;volatile
  6210  00EA26  D001               	goto	l2638
  6211  00EA28                     l351:
  6212                           
  6213                           ;motors.c: 81: else{LATEbits.LATE1 = 0;}
  6214  00EA28  928D               	bcf	3981,1,c	;volatile
  6215  00EA2A                     l2638:
  6216                           
  6217                           ;motors.c: 82: if (s == 3){LATAbits.LATA4 = 1;}
  6218  00EA2A  0E03               	movlw	3
  6219  00EA2C  1857               	xorwf	_s,w,c
  6220  00EA2E  1058               	iorwf	_s+1,w,c
  6221  00EA30  A4D8               	btfss	status,2,c
  6222  00EA32  D002               	goto	l353
  6223  00EA34  8889               	bsf	3977,4,c	;volatile
  6224  00EA36  D001               	goto	l2642
  6225  00EA38                     l353:
  6226                           
  6227                           ;motors.c: 83: else{LATAbits.LATA4 = 0;}
  6228  00EA38  9889               	bcf	3977,4,c	;volatile
  6229  00EA3A                     l2642:
  6230                           
  6231                           ;motors.c: 84: if (s == 4){LATDbits.LATD0 = 1;}
  6232  00EA3A  0E04               	movlw	4
  6233  00EA3C  1857               	xorwf	_s,w,c
  6234  00EA3E  1058               	iorwf	_s+1,w,c
  6235  00EA40  A4D8               	btfss	status,2,c
  6236  00EA42  D002               	goto	l355
  6237  00EA44  808C               	bsf	3980,0,c	;volatile
  6238  00EA46  0012               	return	
  6239  00EA48                     l355:
  6240                           
  6241                           ;motors.c: 85: else{LATDbits.LATD0 = 0;}
  6242  00EA48  908C               	bcf	3980,0,c	;volatile
  6243  00EA4A  0012               	return	
  6244  00EA4C                     __end_of_S2forward:
  6245                           	opt stack 0
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon2	equ	0xFF1
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _S2backward *****************
  6263 ;; Defined at:
  6264 ;;		line 88 in file "motors.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;Total ram usage:        0 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; This function calls:
  6285 ;;		Nothing
  6286 ;; This function is called by:
  6287 ;;		_main
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text34
  6292  00E9CC                     __ptext34:
  6293                           	opt stack 0
  6294  00E9CC                     _S2backward:
  6295                           	opt stack 30
  6296                           
  6297                           ;motors.c: 89: if (s == 4){LATEbits.LATE2 = 1;}
  6298                           
  6299                           ;incstack = 0
  6300  00E9CC  0E04               	movlw	4
  6301  00E9CE  1857               	xorwf	_s,w,c
  6302  00E9D0  1058               	iorwf	_s+1,w,c
  6303  00E9D2  A4D8               	btfss	status,2,c
  6304  00E9D4  D002               	goto	l360
  6305  00E9D6  848D               	bsf	3981,2,c	;volatile
  6306  00E9D8  D001               	goto	l2698
  6307  00E9DA                     l360:
  6308                           
  6309                           ;motors.c: 90: else{LATEbits.LATE2 = 0;}
  6310  00E9DA  948D               	bcf	3981,2,c	;volatile
  6311  00E9DC                     l2698:
  6312                           
  6313                           ;motors.c: 91: if (s == 3){LATEbits.LATE1 = 1;}
  6314  00E9DC  0E03               	movlw	3
  6315  00E9DE  1857               	xorwf	_s,w,c
  6316  00E9E0  1058               	iorwf	_s+1,w,c
  6317  00E9E2  A4D8               	btfss	status,2,c
  6318  00E9E4  D002               	goto	l362
  6319  00E9E6  828D               	bsf	3981,1,c	;volatile
  6320  00E9E8  D001               	goto	l2702
  6321  00E9EA                     l362:
  6322                           
  6323                           ;motors.c: 92: else{LATEbits.LATE1 = 0;}
  6324  00E9EA  928D               	bcf	3981,1,c	;volatile
  6325  00E9EC                     l2702:
  6326                           
  6327                           ;motors.c: 93: if (s == 2){LATAbits.LATA4 = 1;}
  6328  00E9EC  0E02               	movlw	2
  6329  00E9EE  1857               	xorwf	_s,w,c
  6330  00E9F0  1058               	iorwf	_s+1,w,c
  6331  00E9F2  A4D8               	btfss	status,2,c
  6332  00E9F4  D002               	goto	l364
  6333  00E9F6  8889               	bsf	3977,4,c	;volatile
  6334  00E9F8  D001               	goto	l2706
  6335  00E9FA                     l364:
  6336                           
  6337                           ;motors.c: 94: else{LATAbits.LATA4 = 0;}
  6338  00E9FA  9889               	bcf	3977,4,c	;volatile
  6339  00E9FC                     l2706:
  6340                           
  6341                           ;motors.c: 95: if (s == 1){LATDbits.LATD0 = 1;}
  6342  00E9FC  0457               	decf	_s,w,c
  6343  00E9FE  1058               	iorwf	_s+1,w,c
  6344  00EA00  A4D8               	btfss	status,2,c
  6345  00EA02  D002               	goto	l366
  6346  00EA04  808C               	bsf	3980,0,c	;volatile
  6347  00EA06  0012               	return	
  6348  00EA08                     l366:
  6349                           
  6350                           ;motors.c: 96: else{LATDbits.LATD0 = 0;}
  6351  00EA08  908C               	bcf	3980,0,c	;volatile
  6352  00EA0A  0012               	return	
  6353  00EA0C                     __end_of_S2backward:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon2	equ	0xFF1
  6362                           postinc0	equ	0xFEE
  6363                           wreg	equ	0xFE8
  6364                           indf2	equ	0xFDF
  6365                           postinc2	equ	0xFDE
  6366                           postdec2	equ	0xFDD
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _S1off *****************
  6372 ;; Defined at:
  6373 ;;		line 130 in file "motors.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; This function calls:
  6394 ;;		Nothing
  6395 ;; This function is called by:
  6396 ;;		_main
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text35
  6401  00E98C                     __ptext35:
  6402                           	opt stack 0
  6403  00E98C                     _S1off:
  6404                           	opt stack 30
  6405                           
  6406                           ;motors.c: 131: if (s == 4){LATDbits.LATD1 = 1;}
  6407                           
  6408                           ;incstack = 0
  6409  00E98C  0E04               	movlw	4
  6410  00E98E  1857               	xorwf	_s,w,c
  6411  00E990  1058               	iorwf	_s+1,w,c
  6412  00E992  A4D8               	btfss	status,2,c
  6413  00E994  D002               	goto	l404
  6414  00E996  828C               	bsf	3980,1,c	;volatile
  6415  00E998  D001               	goto	l2762
  6416  00E99A                     l404:
  6417                           
  6418                           ;motors.c: 132: else{LATDbits.LATD1 = 0;}
  6419  00E99A  928C               	bcf	3980,1,c	;volatile
  6420  00E99C                     l2762:
  6421                           
  6422                           ;motors.c: 133: if (s == 2){LATBbits.LATB3 = 1;}
  6423  00E99C  0E02               	movlw	2
  6424  00E99E  1857               	xorwf	_s,w,c
  6425  00E9A0  1058               	iorwf	_s+1,w,c
  6426  00E9A2  A4D8               	btfss	status,2,c
  6427  00E9A4  D002               	goto	l406
  6428  00E9A6  868A               	bsf	3978,3,c	;volatile
  6429  00E9A8  D001               	goto	l2766
  6430  00E9AA                     l406:
  6431                           
  6432                           ;motors.c: 134: else{LATBbits.LATB3 = 0;}
  6433  00E9AA  968A               	bcf	3978,3,c	;volatile
  6434  00E9AC                     l2766:
  6435                           
  6436                           ;motors.c: 135: if (s == 3){LATBbits.LATB2 = 1;}
  6437  00E9AC  0E03               	movlw	3
  6438  00E9AE  1857               	xorwf	_s,w,c
  6439  00E9B0  1058               	iorwf	_s+1,w,c
  6440  00E9B2  A4D8               	btfss	status,2,c
  6441  00E9B4  D002               	goto	l408
  6442  00E9B6  848A               	bsf	3978,2,c	;volatile
  6443  00E9B8  D001               	goto	l2770
  6444  00E9BA                     l408:
  6445                           
  6446                           ;motors.c: 136: else{LATBbits.LATB2 = 0;}
  6447  00E9BA  948A               	bcf	3978,2,c	;volatile
  6448  00E9BC                     l2770:
  6449                           
  6450                           ;motors.c: 137: if (s == 1){LATBbits.LATB0 = 1;}
  6451  00E9BC  0457               	decf	_s,w,c
  6452  00E9BE  1058               	iorwf	_s+1,w,c
  6453  00E9C0  A4D8               	btfss	status,2,c
  6454  00E9C2  D002               	goto	l410
  6455  00E9C4  808A               	bsf	3978,0,c	;volatile
  6456  00E9C6  0012               	return	
  6457  00E9C8                     l410:
  6458                           
  6459                           ;motors.c: 138: else{LATBbits.LATB0 = 0;}
  6460  00E9C8  908A               	bcf	3978,0,c	;volatile
  6461  00E9CA  0012               	return	
  6462  00E9CC                     __end_of_S1off:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           intcon2	equ	0xFF1
  6471                           postinc0	equ	0xFEE
  6472                           wreg	equ	0xFE8
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _S1forward *****************
  6481 ;; Defined at:
  6482 ;;		line 109 in file "motors.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  1    wreg      void 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;Total ram usage:        0 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_main
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           	psect	text36
  6510  00E94C                     __ptext36:
  6511                           	opt stack 0
  6512  00E94C                     _S1forward:
  6513                           	opt stack 30
  6514                           
  6515                           ;motors.c: 110: if (s == 1){LATDbits.LATD1 = 1;}
  6516                           
  6517                           ;incstack = 0
  6518  00E94C  0457               	decf	_s,w,c
  6519  00E94E  1058               	iorwf	_s+1,w,c
  6520  00E950  A4D8               	btfss	status,2,c
  6521  00E952  D002               	goto	l382
  6522  00E954  828C               	bsf	3980,1,c	;volatile
  6523  00E956  D001               	goto	l2650
  6524  00E958                     l382:
  6525                           
  6526                           ;motors.c: 111: else{LATDbits.LATD1 = 0;}
  6527  00E958  928C               	bcf	3980,1,c	;volatile
  6528  00E95A                     l2650:
  6529                           
  6530                           ;motors.c: 112: if (s == 2){LATBbits.LATB3 = 1;}
  6531  00E95A  0E02               	movlw	2
  6532  00E95C  1857               	xorwf	_s,w,c
  6533  00E95E  1058               	iorwf	_s+1,w,c
  6534  00E960  A4D8               	btfss	status,2,c
  6535  00E962  D002               	goto	l384
  6536  00E964  868A               	bsf	3978,3,c	;volatile
  6537  00E966  D001               	goto	l2654
  6538  00E968                     l384:
  6539                           
  6540                           ;motors.c: 113: else{LATBbits.LATB3 = 0;}
  6541  00E968  968A               	bcf	3978,3,c	;volatile
  6542  00E96A                     l2654:
  6543                           
  6544                           ;motors.c: 114: if (s == 3){LATBbits.LATB2 = 1;}
  6545  00E96A  0E03               	movlw	3
  6546  00E96C  1857               	xorwf	_s,w,c
  6547  00E96E  1058               	iorwf	_s+1,w,c
  6548  00E970  A4D8               	btfss	status,2,c
  6549  00E972  D002               	goto	l386
  6550  00E974  848A               	bsf	3978,2,c	;volatile
  6551  00E976  D001               	goto	l2658
  6552  00E978                     l386:
  6553                           
  6554                           ;motors.c: 115: else{LATBbits.LATB2 = 0;}
  6555  00E978  948A               	bcf	3978,2,c	;volatile
  6556  00E97A                     l2658:
  6557                           
  6558                           ;motors.c: 116: if (s == 4){LATBbits.LATB0 = 1;}
  6559  00E97A  0E04               	movlw	4
  6560  00E97C  1857               	xorwf	_s,w,c
  6561  00E97E  1058               	iorwf	_s+1,w,c
  6562  00E980  A4D8               	btfss	status,2,c
  6563  00E982  D002               	goto	l388
  6564  00E984  808A               	bsf	3978,0,c	;volatile
  6565  00E986  0012               	return	
  6566  00E988                     l388:
  6567                           
  6568                           ;motors.c: 117: else{LATBbits.LATB0 = 0;}
  6569  00E988  908A               	bcf	3978,0,c	;volatile
  6570  00E98A  0012               	return	
  6571  00E98C                     __end_of_S1forward:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon2	equ	0xFF1
  6580                           postinc0	equ	0xFEE
  6581                           wreg	equ	0xFE8
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _S1backward *****************
  6590 ;; Defined at:
  6591 ;;		line 120 in file "motors.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;		None
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;		None
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg, status,2, status,0
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;Total ram usage:        0 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text37
  6619  00E90C                     __ptext37:
  6620                           	opt stack 0
  6621  00E90C                     _S1backward:
  6622                           	opt stack 30
  6623                           
  6624                           ;motors.c: 121: if (s == 4){LATDbits.LATD1 = 1;}
  6625                           
  6626                           ;incstack = 0
  6627  00E90C  0E04               	movlw	4
  6628  00E90E  1857               	xorwf	_s,w,c
  6629  00E910  1058               	iorwf	_s+1,w,c
  6630  00E912  A4D8               	btfss	status,2,c
  6631  00E914  D002               	goto	l393
  6632  00E916  828C               	bsf	3980,1,c	;volatile
  6633  00E918  D001               	goto	l2682
  6634  00E91A                     l393:
  6635                           
  6636                           ;motors.c: 122: else{LATDbits.LATD1 = 0;}
  6637  00E91A  928C               	bcf	3980,1,c	;volatile
  6638  00E91C                     l2682:
  6639                           
  6640                           ;motors.c: 123: if (s == 3){LATBbits.LATB3 = 1;}
  6641  00E91C  0E03               	movlw	3
  6642  00E91E  1857               	xorwf	_s,w,c
  6643  00E920  1058               	iorwf	_s+1,w,c
  6644  00E922  A4D8               	btfss	status,2,c
  6645  00E924  D002               	goto	l395
  6646  00E926  868A               	bsf	3978,3,c	;volatile
  6647  00E928  D001               	goto	l2686
  6648  00E92A                     l395:
  6649                           
  6650                           ;motors.c: 124: else{LATBbits.LATB3 = 0;}
  6651  00E92A  968A               	bcf	3978,3,c	;volatile
  6652  00E92C                     l2686:
  6653                           
  6654                           ;motors.c: 125: if (s == 2){LATBbits.LATB2 = 1;}
  6655  00E92C  0E02               	movlw	2
  6656  00E92E  1857               	xorwf	_s,w,c
  6657  00E930  1058               	iorwf	_s+1,w,c
  6658  00E932  A4D8               	btfss	status,2,c
  6659  00E934  D002               	goto	l397
  6660  00E936  848A               	bsf	3978,2,c	;volatile
  6661  00E938  D001               	goto	l2690
  6662  00E93A                     l397:
  6663                           
  6664                           ;motors.c: 126: else{LATBbits.LATB2 = 0;}
  6665  00E93A  948A               	bcf	3978,2,c	;volatile
  6666  00E93C                     l2690:
  6667                           
  6668                           ;motors.c: 127: if (s == 1){LATBbits.LATB0 = 1;}
  6669  00E93C  0457               	decf	_s,w,c
  6670  00E93E  1058               	iorwf	_s+1,w,c
  6671  00E940  A4D8               	btfss	status,2,c
  6672  00E942  D002               	goto	l399
  6673  00E944  808A               	bsf	3978,0,c	;volatile
  6674  00E946  0012               	return	
  6675  00E948                     l399:
  6676                           
  6677                           ;motors.c: 128: else{LATBbits.LATB0 = 0;}
  6678  00E948  908A               	bcf	3978,0,c	;volatile
  6679  00E94A  0012               	return	
  6680  00E94C                     __end_of_S1backward:
  6681                           	opt stack 0
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodh	equ	0xFF4
  6687                           prodl	equ	0xFF3
  6688                           intcon2	equ	0xFF1
  6689                           postinc0	equ	0xFEE
  6690                           wreg	equ	0xFE8
  6691                           indf2	equ	0xFDF
  6692                           postinc2	equ	0xFDE
  6693                           postdec2	equ	0xFDD
  6694                           fsr2h	equ	0xFDA
  6695                           fsr2l	equ	0xFD9
  6696                           status	equ	0xFD8
  6697                           
  6698 ;; *************** function _PWM2off *****************
  6699 ;; Defined at:
  6700 ;;		line 42 in file "motors.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		wreg, status,2
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;Total ram usage:        0 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text38
  6728  00E74E                     __ptext38:
  6729                           	opt stack 0
  6730  00E74E                     _PWM2off:
  6731                           	opt stack 30
  6732                           
  6733                           ;motors.c: 43: CCP2CONbits.DC2B0 = 0;
  6734                           
  6735                           ;incstack = 0
  6736  00E74E  98BA               	bcf	4026,4,c	;volatile
  6737                           
  6738                           ;motors.c: 44: CCP2CONbits.DC2B1 = 0;
  6739  00E750  9ABA               	bcf	4026,5,c	;volatile
  6740                           
  6741                           ;motors.c: 46: CCPR2L = 0;
  6742  00E752  0E00               	movlw	0
  6743  00E754  6EBB               	movwf	4027,c	;volatile
  6744  00E756  0012               	return		;funcret
  6745  00E758                     __end_of_PWM2off:
  6746                           	opt stack 0
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon2	equ	0xFF1
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           postdec2	equ	0xFDD
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function _PWM2 *****************
  6764 ;; Defined at:
  6765 ;;		line 28 in file "motors.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  duty            2    0[COMRAM] int 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;                  1    wreg      void 
  6772 ;; Registers used:
  6773 ;;		wreg, status,2, status,0
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;Total ram usage:        4 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_main
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           	psect	text39
  6793  00EC1E                     __ptext39:
  6794                           	opt stack 0
  6795  00EC1E                     _PWM2:
  6796                           	opt stack 30
  6797                           
  6798                           ;motors.c: 36: CCP2CONbits.DC2B0 = duty & 1;
  6799                           
  6800                           ;incstack = 0
  6801  00EC1E  C001  F003         	movff	PWM2@duty,??_PWM2
  6802  00EC22  0E01               	movlw	1
  6803  00EC24  1603               	andwf	??_PWM2,f,c
  6804  00EC26  3A03               	swapf	??_PWM2,f,c
  6805  00EC28  50BA               	movf	4026,w,c	;volatile
  6806  00EC2A  1803               	xorwf	??_PWM2,w,c
  6807  00EC2C  0BEF               	andlw	-17
  6808  00EC2E  1803               	xorwf	??_PWM2,w,c
  6809  00EC30  6EBA               	movwf	4026,c	;volatile
  6810                           
  6811                           ;motors.c: 37: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  6812  00EC32  3402               	rlcf	PWM2@duty+1,w,c
  6813  00EC34  3002               	rrcf	PWM2@duty+1,w,c
  6814  00EC36  6E04               	movwf	(??_PWM2+1)& (0+255),c
  6815  00EC38  3001               	rrcf	PWM2@duty,w,c
  6816  00EC3A  6E03               	movwf	??_PWM2& (0+255),c
  6817  00EC3C  0E01               	movlw	1
  6818  00EC3E  1603               	andwf	??_PWM2,f,c
  6819  00EC40  3A03               	swapf	??_PWM2,f,c
  6820  00EC42  4603               	rlncf	??_PWM2,f,c
  6821  00EC44  50BA               	movf	4026,w,c	;volatile
  6822  00EC46  1803               	xorwf	??_PWM2,w,c
  6823  00EC48  0BDF               	andlw	-33
  6824  00EC4A  1803               	xorwf	??_PWM2,w,c
  6825  00EC4C  6EBA               	movwf	4026,c	;volatile
  6826                           
  6827                           ;motors.c: 38: CCPR2L = (duty >> 2);
  6828  00EC4E  C001  F003         	movff	PWM2@duty,??_PWM2
  6829  00EC52  C002  F004         	movff	PWM2@duty+1,??_PWM2+1
  6830  00EC56  3404               	rlcf	??_PWM2+1,w,c
  6831  00EC58  3204               	rrcf	??_PWM2+1,f,c
  6832  00EC5A  3203               	rrcf	??_PWM2,f,c
  6833  00EC5C  3404               	rlcf	??_PWM2+1,w,c
  6834  00EC5E  3204               	rrcf	??_PWM2+1,f,c
  6835  00EC60  3203               	rrcf	??_PWM2,f,c
  6836  00EC62  5003               	movf	??_PWM2,w,c
  6837  00EC64  6EBB               	movwf	4027,c	;volatile
  6838  00EC66  0012               	return		;funcret
  6839  00EC68                     __end_of_PWM2:
  6840                           	opt stack 0
  6841                           tblptru	equ	0xFF8
  6842                           tblptrh	equ	0xFF7
  6843                           tblptrl	equ	0xFF6
  6844                           tablat	equ	0xFF5
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           intcon2	equ	0xFF1
  6848                           postinc0	equ	0xFEE
  6849                           wreg	equ	0xFE8
  6850                           indf2	equ	0xFDF
  6851                           postinc2	equ	0xFDE
  6852                           postdec2	equ	0xFDD
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857 ;; *************** function _PWM1off *****************
  6858 ;; Defined at:
  6859 ;;		line 22 in file "motors.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg, status,2
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;Total ram usage:        0 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; This function calls:
  6880 ;;		Nothing
  6881 ;; This function is called by:
  6882 ;;		_main
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text40
  6887  00E744                     __ptext40:
  6888                           	opt stack 0
  6889  00E744                     _PWM1off:
  6890                           	opt stack 30
  6891                           
  6892                           ;motors.c: 23: CCP1CONbits.DC1B0 = 0;
  6893                           
  6894                           ;incstack = 0
  6895  00E744  98BD               	bcf	4029,4,c	;volatile
  6896                           
  6897                           ;motors.c: 24: CCP1CONbits.DC1B1 = 0;
  6898  00E746  9ABD               	bcf	4029,5,c	;volatile
  6899                           
  6900                           ;motors.c: 25: CCPR1L = 0;
  6901  00E748  0E00               	movlw	0
  6902  00E74A  6EBE               	movwf	4030,c	;volatile
  6903  00E74C  0012               	return		;funcret
  6904  00E74E                     __end_of_PWM1off:
  6905                           	opt stack 0
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon2	equ	0xFF1
  6913                           postinc0	equ	0xFEE
  6914                           wreg	equ	0xFE8
  6915                           indf2	equ	0xFDF
  6916                           postinc2	equ	0xFDE
  6917                           postdec2	equ	0xFDD
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _PWM1 *****************
  6923 ;; Defined at:
  6924 ;;		line 8 in file "motors.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  duty            2    0[COMRAM] int 
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, status,2, status,0
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;Total ram usage:        4 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_main
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text41
  6952  00EBD4                     __ptext41:
  6953                           	opt stack 0
  6954  00EBD4                     _PWM1:
  6955                           	opt stack 30
  6956                           
  6957                           ;motors.c: 16: CCP1CONbits.DC1B0 = duty & 1;
  6958                           
  6959                           ;incstack = 0
  6960  00EBD4  C001  F003         	movff	PWM1@duty,??_PWM1
  6961  00EBD8  0E01               	movlw	1
  6962  00EBDA  1603               	andwf	??_PWM1,f,c
  6963  00EBDC  3A03               	swapf	??_PWM1,f,c
  6964  00EBDE  50BD               	movf	4029,w,c	;volatile
  6965  00EBE0  1803               	xorwf	??_PWM1,w,c
  6966  00EBE2  0BEF               	andlw	-17
  6967  00EBE4  1803               	xorwf	??_PWM1,w,c
  6968  00EBE6  6EBD               	movwf	4029,c	;volatile
  6969                           
  6970                           ;motors.c: 17: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  6971  00EBE8  3402               	rlcf	PWM1@duty+1,w,c
  6972  00EBEA  3002               	rrcf	PWM1@duty+1,w,c
  6973  00EBEC  6E04               	movwf	(??_PWM1+1)& (0+255),c
  6974  00EBEE  3001               	rrcf	PWM1@duty,w,c
  6975  00EBF0  6E03               	movwf	??_PWM1& (0+255),c
  6976  00EBF2  0E01               	movlw	1
  6977  00EBF4  1603               	andwf	??_PWM1,f,c
  6978  00EBF6  3A03               	swapf	??_PWM1,f,c
  6979  00EBF8  4603               	rlncf	??_PWM1,f,c
  6980  00EBFA  50BD               	movf	4029,w,c	;volatile
  6981  00EBFC  1803               	xorwf	??_PWM1,w,c
  6982  00EBFE  0BDF               	andlw	-33
  6983  00EC00  1803               	xorwf	??_PWM1,w,c
  6984  00EC02  6EBD               	movwf	4029,c	;volatile
  6985                           
  6986                           ;motors.c: 18: CCPR1L = (duty >> 2);
  6987  00EC04  C001  F003         	movff	PWM1@duty,??_PWM1
  6988  00EC08  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  6989  00EC0C  3404               	rlcf	??_PWM1+1,w,c
  6990  00EC0E  3204               	rrcf	??_PWM1+1,f,c
  6991  00EC10  3203               	rrcf	??_PWM1,f,c
  6992  00EC12  3404               	rlcf	??_PWM1+1,w,c
  6993  00EC14  3204               	rrcf	??_PWM1+1,f,c
  6994  00EC16  3203               	rrcf	??_PWM1,f,c
  6995  00EC18  5003               	movf	??_PWM1,w,c
  6996  00EC1A  6EBE               	movwf	4030,c	;volatile
  6997  00EC1C  0012               	return		;funcret
  6998  00EC1E                     __end_of_PWM1:
  6999                           	opt stack 0
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon2	equ	0xFF1
  7007                           postinc0	equ	0xFEE
  7008                           wreg	equ	0xFE8
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           tblptru	equ	0xFF8
  7016                           tblptrh	equ	0xFF7
  7017                           tblptrl	equ	0xFF6
  7018                           tablat	equ	0xFF5
  7019                           prodh	equ	0xFF4
  7020                           prodl	equ	0xFF3
  7021                           intcon2	equ	0xFF1
  7022                           postinc0	equ	0xFEE
  7023                           wreg	equ	0xFE8
  7024                           indf2	equ	0xFDF
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031                           	psect	rparam
  7032  0000                     tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon2	equ	0xFF1
  7039                           postinc0	equ	0xFEE
  7040                           wreg	equ	0xFE8
  7041                           indf2	equ	0xFDF
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8


Data Sizes:
    Strings     371
    Constant    42
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     75      89
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_36(CODE[15]), STR_35(CODE[16]), STR_34(CODE[16]), STR_33(CODE[16]), 
		 -> STR_32(CODE[14]), STR_31(CODE[16]), STR_30(CODE[8]), STR_29(CODE[15]), 
		 -> STR_28(CODE[8]), STR_27(CODE[16]), STR_26(CODE[19]), STR_25(CODE[8]), 
		 -> STR_24(CODE[12]), STR_23(CODE[13]), STR_22(CODE[11]), STR_21(CODE[6]), 
		 -> STR_20(CODE[13]), STR_19(CODE[11]), STR_18(CODE[9]), STR_17(CODE[11]), 
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[8]), STR_13(CODE[14]), 
		 -> STR_12(CODE[3]), STR_11(CODE[12]), STR_10(CODE[3]), STR_9(CODE[12]), 
		 -> STR_8(CODE[11]), STR_7(CODE[13]), STR_6(CODE[13]), STR_5(CODE[12]), 
		 -> STR_4(CODE[12]), STR_3(CODE[12]), STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLogs
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _updateEEPROM->_timePassed
    _eepromWrite->_eepromRead
    _timePassed->___wmul
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->_timePassed
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   23670
                                             40 COMRAM    35    35      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                         _S1backward
                          _S1forward
                              _S1off
                         _S2backward
                          _S2forward
                              _S2off
                         _S3backward
                          _S3forward
                              _S3off
                             ___wmul
                        _displayLogs
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _timePassed
                       _updateEEPROM
                      _updateStepper
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateStepper                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _updateEEPROM                                         2     0      2     452
                                             17 COMRAM     2     0      2
                         _eepromRead
                        _eepromWrite
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     322
                                              3 COMRAM     4     3      1
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _timePassed                                          11     9      2    2379
                                              6 COMRAM    11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     511
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    5783
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    5827
                                             39 COMRAM     1     1      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    5648
                                             17 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1439
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _S3off                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S3forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S3backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S2off                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S2forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S2backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1off                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 4     2      2     130
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _S1backward
   _S1forward
   _S1off
   _S2backward
   _S2forward
   _S2off
   _S3backward
   _S3forward
   _S3off
   ___wmul
   _displayLogs
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
     _timePassed (ARG)
       ___wmul
   _readADC
   _timePassed
     ___wmul
   _updateEEPROM
     _eepromRead
     _eepromWrite
       _eepromRead (ARG)
     _timePassed (ARG)
       ___wmul
   _updateStepper
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     4B      59       1       70.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59      34        0.0%
DATA                 0      0      59       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 13 22:52:22 2017

            _updateStepper E7E8                          _s 0057               ?_displayLogs 0001  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l130 E798                        l127 E78C  
                      l136 E7B0                        l137 E7AC                        l410 E9C8  
                      l170 F9D4                        l404 E99A                        l164 F8F4  
                      l156 F9E2                        l421 EB08                        l406 E9AA  
                      l430 EABA                        l351 EA28                        l415 EAD8  
                      l167 F962                        l408 E9BA                        l360 E9DA  
                      l432 EAC8                        l353 EA38                        l417 EAE8  
                      l441 EB3A                        l362 E9EA                        l426 EA9A  
                      l258 E77A                        l355 EA48                        l371 EA5A  
                      l419 EAF8                        l443 EB48                        l364 E9FA  
                      l428 EAAA                        l349 EA18                        l373 EA6A  
                      l437 EB1A                        l382 E958                        l366 EA08  
                      l375 EA7A                        l439 EB2A                        l384 E968  
                      l393 E91A                        l377 EA88                        l386 E978  
                      l538 F184                        l395 E92A                        l388 E988  
                      l484 E902                        l397 E93A                        l478 E896  
                      l399 E948                        l930 EF16                        l983 ECB0  
                      l993 EB84               __CFG_CPB$OFF 000000                        _PR2 000FCB  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l2300 ECA6                       l3100 FBC4  
                     l3012 F96E                       l2310 EB62                       l3102 FBE0  
                     l2312 EB66                       l2250 E7E0                       l3106 FC06  
                     l3050 FA4E                       l3034 F9EE                       l2316 EB7A  
                     l2308 EB5A                       l3132 FD18                       l3108 FC0E  
                     l3044 FA36                       l3060 FA9E                       l2430 F256  
                     l2406 F1FC                       l2422 F22C                       l2270 EED8  
                     l3118 FCE0                       l2408 F200                       l2424 F23C  
                     l2352 F0B2                       l3072 FAEA                       l2290 EC86  
                     l2450 F2B6                       l2442 F298                       l2434 F27A  
                     l2354 F0C0                       l2266 EEC8                       l3146 FD64  
                     l2292 EC8A                       l2460 F2E2                       l2436 F282  
                     l2372 F152                       l2364 F0F4                       l2348 F0A2  
                     l2268 EED4                       l2540 E816                       l3148 FDF4  
                     l3076 FB10                       l3084 FB52                       l2702 E9EC  
                     l2462 F326                       l2470 F37C                       l2454 F2CA  
                     l2358 F0C6                       l2278 EF08                       l2542 E824  
                     l3078 FB2C                       l2288 EC7E                       l2472 F382  
                     l2448 F2AE                       l2392 F1CC                       l2376 F156  
                     l3096 FB9E                       l2650 E95A                       l2706 E9FC  
                     l2642 EA3A                       l2634 EA1A                       l2722 EABC  
                     l2714 EA9C                       l2730 EB1C                       l2458 F2DC  
                     l2394 F1D0                       l2474 F38A                       l2468 F36C  
                     l2388 F1B2                       l2572 EE08                       l2654 E96A  
                     l2638 EA2A                       l2750 EA6C                       l2718 EAAC  
                     l2670 EAEA                       l2734 EB2C                       l2902 F642  
                     l2496 E870                       l2568 EE00                       l2690 E93C  
                     l2682 E91C                       l2658 E97A                       l2770 E9BC  
                     l2762 E99C                       l2754 EA7C                       l2746 EA5C  
                     l2674 EAFA                       l2666 EADA                       l2738 EB3C  
                     l2578 EE24                       l2914 F66A                       l2826 F418  
                     l2686 E92C                       l2766 E9AC                       l2926 F692  
                     l2952 F794                       l2872 F54A                       l2698 E9DC  
                     l2882 F5F8                       l2972 F892                       l2868 F53E  
                     l2992 F900                       l2968 F886                       _ADFM 007E07  
                     STR_1 FEDF                       STR_2 FEEF                       STR_3 FF9E  
                     STR_4 FF86                       STR_5 FF86                       STR_6 FF54  
                     STR_7 FF47                       STR_8 FFC0                       STR_9 FF6E  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u2340 FD34  
                     u1630 E86E                       u2417 F40E                       u1395 ED3E  
                     u2507 F90E                       u2427 F468                       u1740 E7FC  
                     u2517 F928                       u2437 F60E                       u1655 E880  
                     u2607 FE0A                       u2527 F97C                       u2447 F69E  
                     u2617 FE2A                       u2537 F996                       u2457 F6D4  
                     u2707 ECFE                       u2627 E81C                       u1675 E8DE  
                     u2547 FA04                       u2467 F7A6                       u2717 ED08  
                     u2637 EB94                       u2557 FA72                       u2477 F7C0  
                     u2647 EBC8                       u2567 FAB2                       u2487 F8A0  
                     u2657 EFDE                       u2577 FB66                       u2497 F8BA  
                     u2667 F024                       u2587 FC1A                       u2677 F06A  
                     u2597 FCEC                       u2687 ECD2                       u2697 ECDC  
                     _RCEN 007E2B                       _PWM1 EBD4                       _PWM2 EC1E  
                     _RSEN 007E29            __end_of_PWM1off E74E            __end_of_PWM2off E758  
                     _main F3A4                       _curr 0053                       _keys FE61  
                     _time 004C                       _prev 0055                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                main@standby 0048  
                     prodh 000FF4               main@canCheck 003C                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000             ?_updateStepper 0001  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                ?_S1backward 0001  
              ?_S2backward 0001                ?_S3backward 0001                      ?_PWM1 0001  
                    ?_PWM2 0001           ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D                      _ADRES 000FC3  
                    _EEADR 000FA9                      STR_10 FFFB                      STR_11 FF7A  
                    STR_12 FFFB                      STR_20 FF61                      STR_21 FF33  
                    STR_13 FF2B                      STR_22 FFAA                      STR_14 FFF6  
                    STR_30 FFDE                      STR_23 FF61                      STR_15 FF39  
                    STR_31 FECF                      STR_16 FFCB                      STR_24 FF92  
                    STR_32 FF1D                      STR_33 FECF                      STR_25 FFEE  
                    STR_17 FFB5                      STR_18 FFD5                      STR_34 FEBF  
                    STR_26 FE8B                      STR_35 FECF                      STR_19 FFAA  
                    STR_27 FEAF                      STR_28 FFE6                      STR_36 FEFF  
                    STR_29 FF0E                      STR_37 FE9E            __end_of___lldiv EF28  
                    _T0CON 000FD5                      _T2CON 000FCA            __end_of___lwdiv ECBA  
          __end_of___lwmod EB8E                      _TMR0L 000FD6                      _S1off E98C  
                    _PORTB 000F81                      _S2off EA4C                      _S3off EB0C  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96               main@tabState 0036  
            __CFG_PWRT$OFF 000000            timePassed@start 0007              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst E76E             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC E82A            __end_of_initLCD EBD4  
           __CFG_EBTRB$OFF 000000         __size_of_S1forward 0040            __end_of_dpowers FE7C  
       __size_of_S2forward 0040               main@sodaLoad 0040            __end_of_isdigit E7E8  
       __size_of_S3forward 0040                      _putch E76E                      main@s 0046  
                    tablat 000FF5                      status 000FD8               main@soupLoad 003E  
           __CFG_PBADEN$ON 000000               __end_of_PWM1 EC1E               __end_of_PWM2 EC68  
          __initialization E7B4               __end_of_main FE60               __end_of_keys FE72  
                   ??_PWM1 0003                     ??_PWM2 0003                     ??_main 0029  
            __activetblptr 000002                     ?_S1off 0001                     ?_S2off 0001  
                   ?_S3off 0001          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002  
       ??_I2C_Master_Start 0002                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0004                  ??_PWM1off 0001                  ??_PWM2off 0001  
                   _ADRESH 000FC4                     _EEADRH 000FAA                     _ADRESL 000FC3  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7        __size_of_S1backward 0040                     ?_putch 0001  
                   _CVRCON 000FB5        __size_of_S2backward 0040                     _OSCCON 000FD3  
      __size_of_S3backward 0040                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9            ??_updateStepper 0001  
           __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038          __end_of_S1forward E98C  
                   ___wmul E82A             __CFG_STVREN$ON 000000          __end_of_S2forward EA4C  
                ??___lldiv 0009                  ??___lwdiv 0005          __end_of_S3forward EB0C  
                ??___lwmod 000C           __end_of_keycheck E7A0                     clear_0 E7BA  
          eepromWrite@data 0004           __end_of_currtime FE8B              main@sodaState 0034  
                ??_lcdInst 0003                     _printf F098       __size_of_displayLogs 00C6  
                   main@dc 0038                  ??_readADC 0001                  ??_initLCD 0004  
                ??_isdigit 0001               __mediumconst FE60                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8              ?_keyinterrupt 0001  
            main@startTime 0042                 __accesstop 0080    __end_of__initialization E7C0  
            ___rparam_used 000001              __end_of_S1off E9CC              __end_of_S2off EA8C  
            __end_of_S3off EB4C             __pcstackCOMRAM 0001              __end_of_putch E77A  
       __size_of_lcdNibble 0056          eepromRead@address 0003                    ??_S1off 0001  
                  ??_S2off 0001                    ??_S3off 0001             ??_keyinterrupt 0001  
                  ??_putch 0003             main@labelState 0044               ??_S1backward 0001  
                  ?___wmul 0001               ??_S2backward 0001               ??_S3backward 0001  
                  _CCP1CON 000FBD                    _CCP2CON 000FBA           updateEEPROM@time 0012  
                  ?_printf 0012                 _eepromRead E876                    _PWM1off E744  
                  _PWM2off E74E                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7         __end_of_S1backward E94C         __end_of_S2backward EA0C  
                ?_keycheck 0001         __end_of_S3backward EACC          __end_of_lcdNibble ED10  
                  __Hparam 0000                    __Lparam 0000                    ___lldiv EEA6  
          __size_of___wmul 0026                    ___lwdiv EC68                    ___lwmod EB4C  
                _CMCONbits 000FB4                 _homescreen ED6A                    __pcinit E7B4  
                  __ramtop 1000                 _initialize EE32                    _lcdInst E762  
                  __ptext0 F3A4                    __ptext1 EDCC                    __ptext2 E758  
                  __ptext3 E73C                    __ptext4 E734                    __ptext5 E850  
                  __ptext6 E77A                    __ptext7 E7E8                    __ptext8 E89E  
                  __ptext9 E8D4            __size_of_printf 030C                    _readADC E806  
                  _initLCD EB8E          __end_of_hexpowers FE84                    _dpowers FE72  
                  _isdigit E7CA   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008       end_of_initialization E7C0  
               ??_keycheck 0001              __Lmediumconst FE60  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
     __end_of_keyinterrupt E7B4                 _timePassed EF28                    printf@c 0027  
                  printf@f 0012           I2C_Master_Init@c 000E           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                _S1forward E94C                  _PORTBbits 000F81                  _S2forward EA0C  
                _S3forward EACC                ?_eepromRead 0001                 _updateTime EDCC  
            ?_updateEEPROM 0012                _CCP1CONbits 000FBD              ??_eepromWrite 0005  
              printf@width 0025                _CCP2CONbits 000FBA      __end_of_updateStepper E806  
            ??_displayLogs 0028                ?_homescreen 0001             __end_of___wmul E850  
              ?_initialize 0001                 ?_S1forward 0001                 ?_S2forward 0001  
               ?_S3forward 0001             __end_of_printf F3A4        start_initialization E7B4  
              updateTime@j 0004             ??_updateEEPROM 0014          ??_I2C_Master_Init 0012  
        ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001          ??_I2C_Master_Stop 0002  
      __size_of_eepromRead 0028                ?_timePassed 0007        __end_of_eepromWrite E90C  
                 ??___wmul 0005           __CFG_LPT1OSC$OFF 000000                   ??_printf 001A  
      __end_of_displayLogs F098                __pbssCOMRAM 004C                ?_updateTime 0001  
             _isdigit$1191 0002                   ?_PWM1off 0001                   ?_PWM2off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0014        __size_of_initialize 0074  
         _I2C_Master_Start E734           _I2C_Master_Write E758          __size_of_keycheck 0014  
                _main$1542 003A           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
            __pmediumconst FE60                  _lcdNibble ECBA                   ?___lldiv 0001  
                 PWM1@duty 0001                   PWM2@duty 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                ??_S1forward 0001                   ?_lcdInst 0001  
              ??_S2forward 0001                ??_S3forward 0001                   ?_readADC 0001  
                 ?_initLCD 0001                   ?_isdigit 0001             __size_of_S1off 0040  
           __size_of_S2off 0040             __size_of_S3off 0040               _keyinterrupt E7A0  
                _hexpowers FE7C           ___lwdiv@quotient 0005        __size_of_timePassed 00AA  
           __size_of_putch 000C         eepromWrite@address 0007             ___wmul@product 0005  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _LATCbits 000F8B  
                 _LATDbits 000F8C                   _LATEbits 000F8D                _eepromWrite E8D4  
                 _PIR2bits 000FA1           __CFG_WDTPS$32768 000000        __size_of_updateTime 0066  
               ?_lcdNibble 0001       __end_of_updateEEPROM E8D4                _displayLogs EFD2  
               _ADCON0bits 000FC2          ___wmul@multiplier 0001              lcdNibble@data 0002  
             ??_eepromRead 0001                 printf@flag 0024              lcdNibble@temp 0001  
               printf@prec 0021           main@prevSodaTime 0032        I2C_Master_Read@temp 0003  
         __size_of_PWM1off 000A           __size_of_PWM2off 000A           main@prevSoupTime 004A  
               _EECON1bits 000FA6                   __Hrparam 0000                   __Lrparam 0000  
       __end_of_eepromRead E89E         __CFG_BOREN$SBORDIS 000000               ??_homescreen 0028  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0002               ??_initialize 0016           __size_of_lcdInst 000C  
          _I2C_Master_Init ED10           __size_of_readADC 0024            _I2C_Master_Read E850  
         __size_of_initLCD 0046            _I2C_Master_Wait E77A            _I2C_Master_Stop E73C  
         __size_of_isdigit 001E            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 EF28                   __ptext11 E806                   __ptext20 E76E  
                 __ptext12 E7A0                   __ptext21 E7CA                   __ptext13 EE32  
                 __ptext30 EACC                   __ptext22 E82A                   __ptext14 EB8E  
                 __ptext31 EA8C                   __ptext23 EB4C                   __ptext15 ED10  
                 __ptext40 E744                   __ptext32 EA4C                   __ptext24 EC68  
                 __ptext16 EEA6                   __ptext41 EBD4                   __ptext33 EA0C  
                 __ptext25 E762                   __ptext17 ED6A                   __ptext34 E9CC  
                 __ptext26 ECBA                   __ptext18 EFD2                   __ptext35 E98C  
                 __ptext27 E78C                   __ptext19 F098                   __ptext36 E94C  
                 __ptext28 E876                   __ptext37 E90C                   __ptext29 EB0C  
                 __ptext38 E74E                   __ptext39 EC1E              __size_of_PWM1 004A  
            __size_of_PWM2 004A         __end_of_homescreen EDCC                   _keycheck E78C  
            __size_of_main 0ABC                   _currtime FE84                   _keypress 0059  
       __end_of_initialize EEA6               ??_timePassed 0009                ??_lcdNibble 0001  
                printf@idx 001E                  printf@val 0022            main@prevUnblock 0030  
                putch@data 0003   __end_of_I2C_Master_Start E73C                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write E762               ??_updateTime 0004                   isdigit@c 0003  
   __size_of_updateStepper 001E         __end_of_timePassed EFD2           ___lwmod@dividend 0008  
         ___lldiv@dividend 0001      __size_of_updateEEPROM 0036                 _S1backward E90C  
                 printf@ap 001F         __end_of_updateTime EE32                 _S2backward E9CC  
  __end_of_I2C_Master_Init ED6A    __end_of_I2C_Master_Read E876    __end_of_I2C_Master_Wait E78C  
               _S3backward EA8C    __end_of_I2C_Master_Stop E744                lcdInst@data 0003  
         ___lldiv@quotient 0009          I2C_Master_Write@d 0002            ___lwmod@divisor 000A  
          ___lwmod@counter 000C               _updateEEPROM E89E               ?_eepromWrite 0004  
