

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Mar 10 02:34:52 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F4620 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	mediumconst
    84  00FEE0                     __pmediumconst:
    85                           	opt stack 0
    86  00FEE0  00                 	db	0
    87  00FEE1                     _keys:
    88                           	opt stack 0
    89  00FEE1  31                 	db	49
    90  00FEE2  32                 	db	50
    91  00FEE3  33                 	db	51
    92  00FEE4  41                 	db	65
    93  00FEE5  34                 	db	52
    94  00FEE6  35                 	db	53
    95  00FEE7  36                 	db	54
    96  00FEE8  42                 	db	66
    97  00FEE9  37                 	db	55
    98  00FEEA  38                 	db	56
    99  00FEEB  39                 	db	57
   100  00FEEC  43                 	db	67
   101  00FEED  2A                 	db	42
   102  00FEEE  30                 	db	48
   103  00FEEF  23                 	db	35
   104  00FEF0  44                 	db	68
   105  00FEF1  00                 	db	0
   106  00FEF2                     __end_of_keys:
   107                           	opt stack 0
   108  00FEF2                     _dpowers:
   109                           	opt stack 0
   110  00FEF2  0001               	dw	1
   111  00FEF4  000A               	dw	10
   112  00FEF6  0064               	dw	100
   113  00FEF8  03E8               	dw	1000
   114  00FEFA  2710               	dw	10000
   115  00FEFC                     __end_of_dpowers:
   116                           	opt stack 0
   117  00FEFC                     _hexpowers:
   118                           	opt stack 0
   119  00FEFC  0001               	dw	1
   120  00FEFE  0010               	dw	16
   121  00FF00  0100               	dw	256
   122  00FF02  1000               	dw	4096
   123  00FF04                     __end_of_hexpowers:
   124                           	opt stack 0
   125  00FF04                     _currtime:
   126                           	opt stack 0
   127  00FF04  30                 	db	48
   128  00FF05  26                 	db	38
   129  00FF06  13                 	db	19
   130  00FF07  04                 	db	4
   131  00FF08  01                 	db	1
   132  00FF09  03                 	db	3
   133  00FF0A  17                 	db	23
   134  00FF0B                     __end_of_currtime:
   135                           	opt stack 0
   136  0000                     _ADRES	set	4035
   137  0000                     _PIR2bits	set	4001
   138  0000                     _EECON2	set	4007
   139  0000                     _EEDATA	set	4008
   140  0000                     _EECON1bits	set	4006
   141  0000                     _EEADR	set	4009
   142  0000                     _EEADRH	set	4010
   143  0000                     _LATAbits	set	3977
   144  0000                     _LATEbits	set	3981
   145  0000                     _LATBbits	set	3978
   146  0000                     _LATCbits	set	3979
   147  0000                     _TMR0L	set	4054
   148  0000                     _CCP2CONbits	set	4026
   149  0000                     _CCP1CONbits	set	4029
   150  0000                     _SSPBUF	set	4041
   151  0000                     _SSPADD	set	4040
   152  0000                     _SSPCON2	set	4037
   153  0000                     _SSPCON1	set	4038
   154  0000                     _SSPSTAT	set	4039
   155  0000                     _LATDbits	set	3980
   156  0000                     _ADRESH	set	4036
   157  0000                     _T0CON	set	4053
   158  0000                     _CMCONbits	set	4020
   159  0000                     _CVRCON	set	4021
   160  0000                     _ADCON1	set	4033
   161  0000                     _LATE	set	3981
   162  0000                     _LATD	set	3980
   163  0000                     _LATC	set	3979
   164  0000                     _LATB	set	3978
   165  0000                     _LATA	set	3977
   166  0000                     _T2CON	set	4042
   167  0000                     _CCPR2L	set	4027
   168  0000                     _CCP2CON	set	4026
   169  0000                     _CCPR1L	set	4030
   170  0000                     _CCP1CON	set	4029
   171  0000                     _PR2	set	4043
   172  0000                     _TRISE	set	3990
   173  0000                     _TRISD	set	3989
   174  0000                     _TRISC	set	3988
   175  0000                     _TRISB	set	3987
   176  0000                     _TRISA	set	3986
   177  0000                     _OSCTUNEbits	set	3995
   178  0000                     _OSCCON	set	4051
   179  0000                     _PORTB	set	3969
   180  0000                     _PORTBbits	set	3969
   181  0000                     _ADCON0bits	set	4034
   182  0000                     _ADCON0	set	4034
   183  0000                     _ACKEN	set	32300
   184  0000                     _ACKDT	set	32301
   185  0000                     _RCEN	set	32299
   186  0000                     _PEN	set	32298
   187  0000                     _RSEN	set	32297
   188  0000                     _SEN	set	32296
   189  0000                     _TRISC4	set	31908
   190  0000                     _TRISC3	set	31907
   191  0000                     _ADFM	set	32263
   192  0000                     _nRBPU	set	32655
   193  00FF0B                     STR_9:
   194  00FF0B  46                 	db	70	;'F'
   195  00FF0C  69                 	db	105	;'i'
   196  00FF0D  6E                 	db	110	;'n'
   197  00FF0E  69                 	db	105	;'i'
   198  00FF0F  73                 	db	115	;'s'
   199  00FF10  68                 	db	104	;'h'
   200  00FF11  65                 	db	101	;'e'
   201  00FF12  64                 	db	100	;'d'
   202  00FF13  20                 	db	32
   203  00FF14  73                 	db	115	;'s'
   204  00FF15  6F                 	db	111	;'o'
   205  00FF16  72                 	db	114	;'r'
   206  00FF17  74                 	db	116	;'t'
   207  00FF18  69                 	db	105	;'i'
   208  00FF19  6E                 	db	110	;'n'
   209  00FF1A  67                 	db	103	;'g'
   210  00FF1B  21                 	db	33
   211  00FF1C  20                 	db	32
   212  00FF1D  00                 	db	0
   213  00FF1E                     STR_20:
   214  00FF1E  30                 	db	48	;'0'
   215  00FF1F  31                 	db	49	;'1'
   216  00FF20  32                 	db	50	;'2'
   217  00FF21  33                 	db	51	;'3'
   218  00FF22  34                 	db	52	;'4'
   219  00FF23  35                 	db	53	;'5'
   220  00FF24  36                 	db	54	;'6'
   221  00FF25  37                 	db	55	;'7'
   222  00FF26  38                 	db	56	;'8'
   223  00FF27  39                 	db	57	;'9'
   224  00FF28  61                 	db	97	;'a'
   225  00FF29  62                 	db	98	;'b'
   226  00FF2A  63                 	db	99	;'c'
   227  00FF2B  64                 	db	100	;'d'
   228  00FF2C  65                 	db	101	;'e'
   229  00FF2D  66                 	db	102	;'f'
   230  00FF2E  00                 	db	0
   231  00FF2F                     STR_10:
   232  00FF2F  25                 	db	37
   233  00FF30  30                 	db	48	;'0'
   234  00FF31  32                 	db	50	;'2'
   235  00FF32  78                 	db	120	;'x'
   236  00FF33  2F                 	db	47
   237  00FF34  25                 	db	37
   238  00FF35  30                 	db	48	;'0'
   239  00FF36  32                 	db	50	;'2'
   240  00FF37  78                 	db	120	;'x'
   241  00FF38  2F                 	db	47
   242  00FF39  25                 	db	37
   243  00FF3A  30                 	db	48	;'0'
   244  00FF3B  32                 	db	50	;'2'
   245  00FF3C  78                 	db	120	;'x'
   246  00FF3D  20                 	db	32
   247  00FF3E  00                 	db	0
   248  00FF3F                     STR_17:
   249  00FF3F  23                 	db	35
   250  00FF40  20                 	db	32
   251  00FF41  73                 	db	115	;'s'
   252  00FF42  6F                 	db	111	;'o'
   253  00FF43  64                 	db	100	;'d'
   254  00FF44  61                 	db	97	;'a'
   255  00FF45  20                 	db	32
   256  00FF46  63                 	db	99	;'c'
   257  00FF47  61                 	db	97	;'a'
   258  00FF48  6E                 	db	110	;'n'
   259  00FF49  73                 	db	115	;'s'
   260  00FF4A  3A                 	db	58	;':'
   261  00FF4B  20                 	db	32
   262  00FF4C  25                 	db	37
   263  00FF4D  64                 	db	100	;'d'
   264  00FF4E  00                 	db	0
   265  00FF4F                     STR_14:
   266  00FF4F  52                 	db	82	;'R'
   267  00FF50  75                 	db	117	;'u'
   268  00FF51  6E                 	db	110	;'n'
   269  00FF52  23                 	db	35
   270  00FF53  31                 	db	49	;'1'
   271  00FF54  20                 	db	32
   272  00FF55  20                 	db	32
   273  00FF56  20                 	db	32
   274  00FF57  20                 	db	32
   275  00FF58  41                 	db	65	;'A'
   276  00FF59  3A                 	db	58	;':'
   277  00FF5A  4E                 	db	78	;'N'
   278  00FF5B  65                 	db	101	;'e'
   279  00FF5C  78                 	db	120	;'x'
   280  00FF5D  74                 	db	116	;'t'
   281  00FF5E  00                 	db	0
   282  00FF5F                     STR_1:
   283  00FF5F  53                 	db	83	;'S'
   284  00FF60  6F                 	db	111	;'o'
   285  00FF61  72                 	db	114	;'r'
   286  00FF62  74                 	db	116	;'t'
   287  00FF63  69                 	db	105	;'i'
   288  00FF64  6E                 	db	110	;'n'
   289  00FF65  67                 	db	103	;'g'
   290  00FF66  20                 	db	32
   291  00FF67  63                 	db	99	;'c'
   292  00FF68  61                 	db	97	;'a'
   293  00FF69  6E                 	db	110	;'n'
   294  00FF6A  73                 	db	115	;'s'
   295  00FF6B  2E                 	db	46
   296  00FF6C  2E                 	db	46
   297  00FF6D  2E                 	db	46
   298  00FF6E  00                 	db	0
   299  00FF6F                     STR_2:
   300  00FF6F  41                 	db	65	;'A'
   301  00FF70  6E                 	db	110	;'n'
   302  00FF71  79                 	db	121	;'y'
   303  00FF72  20                 	db	32
   304  00FF73  6B                 	db	107	;'k'
   305  00FF74  65                 	db	101	;'e'
   306  00FF75  79                 	db	121	;'y'
   307  00FF76  20                 	db	32
   308  00FF77  74                 	db	116	;'t'
   309  00FF78  6F                 	db	111	;'o'
   310  00FF79  20                 	db	32
   311  00FF7A  73                 	db	115	;'s'
   312  00FF7B  74                 	db	116	;'t'
   313  00FF7C  6F                 	db	111	;'o'
   314  00FF7D  70                 	db	112	;'p'
   315  00FF7E  00                 	db	0
   316  00FF7F                     STR_19:
   317  00FF7F  23                 	db	35
   318  00FF80  20                 	db	32
   319  00FF81  73                 	db	115	;'s'
   320  00FF82  6F                 	db	111	;'o'
   321  00FF83  75                 	db	117	;'u'
   322  00FF84  70                 	db	112	;'p'
   323  00FF85  20                 	db	32
   324  00FF86  63                 	db	99	;'c'
   325  00FF87  61                 	db	97	;'a'
   326  00FF88  6E                 	db	110	;'n'
   327  00FF89  73                 	db	115	;'s'
   328  00FF8A  3A                 	db	58	;':'
   329  00FF8B  20                 	db	32
   330  00FF8C  34                 	db	52	;'4'
   331  00FF8D  00                 	db	0
   332  00FF8E                     STR_12:
   333  00FF8E  25                 	db	37
   334  00FF8F  30                 	db	48	;'0'
   335  00FF90  32                 	db	50	;'2'
   336  00FF91  78                 	db	120	;'x'
   337  00FF92  3A                 	db	58	;':'
   338  00FF93  25                 	db	37
   339  00FF94  30                 	db	48	;'0'
   340  00FF95  32                 	db	50	;'2'
   341  00FF96  78                 	db	120	;'x'
   342  00FF97  3A                 	db	58	;':'
   343  00FF98  25                 	db	37
   344  00FF99  30                 	db	48	;'0'
   345  00FF9A  32                 	db	50	;'2'
   346  00FF9B  78                 	db	120	;'x'
   347  00FF9C  00                 	db	0
   348  00FF9D                     STR_15:
   349  00FF9D  23                 	db	35
   350  00FF9E  20                 	db	32
   351  00FF9F  6F                 	db	111	;'o'
   352  00FFA0  66                 	db	102	;'f'
   353  00FFA1  20                 	db	32
   354  00FFA2  63                 	db	99	;'c'
   355  00FFA3  61                 	db	97	;'a'
   356  00FFA4  6E                 	db	110	;'n'
   357  00FFA5  73                 	db	115	;'s'
   358  00FFA6  3A                 	db	58	;':'
   359  00FFA7  20                 	db	32
   360  00FFA8  25                 	db	37
   361  00FFA9  64                 	db	100	;'d'
   362  00FFAA  00                 	db	0
   363  00FFAB                     STR_6:
   364  00FFAB  74                 	db	116	;'t'
   365  00FFAC  65                 	db	101	;'e'
   366  00FFAD  73                 	db	115	;'s'
   367  00FFAE  74                 	db	116	;'t'
   368  00FFAF  69                 	db	105	;'i'
   369  00FFB0  6E                 	db	110	;'n'
   370  00FFB1  67                 	db	103	;'g'
   371  00FFB2  20                 	db	32
   372  00FFB3  50                 	db	80	;'P'
   373  00FFB4  57                 	db	87	;'W'
   374  00FFB5  4D                 	db	77	;'M'
   375  00FFB6  31                 	db	49	;'1'
   376  00FFB7  00                 	db	0
   377  00FFB8                     STR_5:
   378  00FFB8  74                 	db	116	;'t'
   379  00FFB9  65                 	db	101	;'e'
   380  00FFBA  73                 	db	115	;'s'
   381  00FFBB  74                 	db	116	;'t'
   382  00FFBC  69                 	db	105	;'i'
   383  00FFBD  6E                 	db	110	;'n'
   384  00FFBE  67                 	db	103	;'g'
   385  00FFBF  20                 	db	32
   386  00FFC0  50                 	db	80	;'P'
   387  00FFC1  57                 	db	87	;'W'
   388  00FFC2  4D                 	db	77	;'M'
   389  00FFC3  32                 	db	50	;'2'
   390  00FFC4  00                 	db	0
   391  00FFC5                     STR_4:
   392  00FFC5  74                 	db	116	;'t'
   393  00FFC6  65                 	db	101	;'e'
   394  00FFC7  73                 	db	115	;'s'
   395  00FFC8  74                 	db	116	;'t'
   396  00FFC9  69                 	db	105	;'i'
   397  00FFCA  6E                 	db	110	;'n'
   398  00FFCB  67                 	db	103	;'g'
   399  00FFCC  20                 	db	32
   400  00FFCD  53                 	db	83	;'S'
   401  00FFCE  31                 	db	49	;'1'
   402  00FFCF  20                 	db	32
   403  00FFD0  62                 	db	98	;'b'
   404  00FFD1  00                 	db	0
   405  00FFD2                     STR_3:
   406  00FFD2  74                 	db	116	;'t'
   407  00FFD3  65                 	db	101	;'e'
   408  00FFD4  73                 	db	115	;'s'
   409  00FFD5  74                 	db	116	;'t'
   410  00FFD6  69                 	db	105	;'i'
   411  00FFD7  6E                 	db	110	;'n'
   412  00FFD8  67                 	db	103	;'g'
   413  00FFD9  20                 	db	32
   414  00FFDA  53                 	db	83	;'S'
   415  00FFDB  31                 	db	49	;'1'
   416  00FFDC  20                 	db	32
   417  00FFDD  66                 	db	102	;'f'
   418  00FFDE  00                 	db	0
   419  00FFDF                     STR_7:
   420  00FFDF  74                 	db	116	;'t'
   421  00FFE0  65                 	db	101	;'e'
   422  00FFE1  73                 	db	115	;'s'
   423  00FFE2  74                 	db	116	;'t'
   424  00FFE3  69                 	db	105	;'i'
   425  00FFE4  6E                 	db	110	;'n'
   426  00FFE5  67                 	db	103	;'g'
   427  00FFE6  20                 	db	32
   428  00FFE7  49                 	db	73	;'I'
   429  00FFE8  52                 	db	82	;'R'
   430  00FFE9  31                 	db	49	;'1'
   431  00FFEA  00                 	db	0
   432  00FFEB                     STR_13:
   433  00FFEB  20                 	db	32
   434  00FFEC  32                 	db	50	;'2'
   435  00FFED  3A                 	db	58	;':'
   436  00FFEE  4C                 	db	76	;'L'
   437  00FFEF  6F                 	db	111	;'o'
   438  00FFF0  67                 	db	103	;'g'
   439  00FFF1  73                 	db	115	;'s'
   440  00FFF2  00                 	db	0
   441  00FFF3                     STR_11:
   442  00FFF3  33                 	db	51	;'3'
   443  00FFF4  3A                 	db	58	;':'
   444  00FFF5  53                 	db	83	;'S'
   445  00FFF6  74                 	db	116	;'t'
   446  00FFF7  61                 	db	97	;'a'
   447  00FFF8  72                 	db	114	;'r'
   448  00FFF9  74                 	db	116	;'t'
   449  00FFFA  00                 	db	0
   450  00FFFB                     STR_8:
   451  00FFFB  25                 	db	37
   452  00FFFC  78                 	db	120	;'x'
   453  00FFFD  00                 	db	0
   454  0000                     
   455                           ; #config settings
   456  00FFFE  00                 	db	0	; dummy byte at the end
   457  0000                     
   458                           	psect	cinit
   459  00F0EC                     __pcinit:
   460                           	opt stack 0
   461  00F0EC                     start_initialization:
   462                           	opt stack 0
   463  00F0EC                     __initialization:
   464                           	opt stack 0
   465                           
   466                           ; Clear objects allocated to COMRAM (14 bytes)
   467  00F0EC  EE00  F036         	lfsr	0,__pbssCOMRAM
   468  00F0F0  0E0E               	movlw	14
   469  00F0F2                     clear_0:
   470  00F0F2  6AEE               	clrf	postinc0,c
   471  00F0F4  06E8               	decf	wreg,f,c
   472  00F0F6  E1FD               	bnz	clear_0
   473  00F0F8                     end_of_initialization:
   474                           	opt stack 0
   475  00F0F8                     __end_of__initialization:
   476                           	opt stack 0
   477  00F0F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   478  00F0FA  6EF8               	movwf	tblptru,c
   479  00F0FC  0100               	movlb	0
   480  00F0FE  EFBD  F07D         	goto	_main	;jump to C main() function
   481                           tblptru	equ	0xFF8
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           
   485                           	psect	bssCOMRAM
   486  000036                     __pbssCOMRAM:
   487                           	opt stack 0
   488  000036                     _time:
   489                           	opt stack 0
   490  000036                     	ds	7
   491  00003D                     _curr:
   492                           	opt stack 0
   493  00003D                     	ds	2
   494  00003F                     _prev:
   495                           	opt stack 0
   496  00003F                     	ds	2
   497  000041                     _s:
   498                           	opt stack 0
   499  000041                     	ds	2
   500  000043                     _keypress:
   501                           	opt stack 0
   502  000043                     	ds	1
   503                           tblptru	equ	0xFF8
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           
   507                           	psect	cstackCOMRAM
   508  000001                     __pcstackCOMRAM:
   509                           	opt stack 0
   510  000001                     ??_updateStepper:
   511  000001                     ??_eepromRead:
   512  000001                     ??_isdigit:
   513  000001                     ??_readADC:
   514  000001                     ??_I2C_Master_Wait:
   515  000001                     ?___wmul:
   516                           	opt stack 0
   517  000001                     ?___lwdiv:
   518                           	opt stack 0
   519  000001                     ?___lldiv:
   520                           	opt stack 0
   521  000001                     lcdNibble@temp:
   522                           	opt stack 0
   523  000001                     PWM1@duty:
   524                           	opt stack 0
   525  000001                     PWM2@duty:
   526                           	opt stack 0
   527  000001                     ___wmul@multiplier:
   528                           	opt stack 0
   529  000001                     ___lwdiv@dividend:
   530                           	opt stack 0
   531  000001                     ___lldiv@dividend:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x0
   535  000001                     	ds	1
   536  000002                     readADC@channel:
   537                           	opt stack 0
   538  000002                     lcdNibble@data:
   539                           	opt stack 0
   540  000002                     I2C_Master_Read@a:
   541                           	opt stack 0
   542  000002                     _isdigit$1142:
   543                           	opt stack 0
   544  000002                     I2C_Master_Write@d:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x1
   548  000002                     	ds	1
   549  000003                     ??_PWM1:
   550  000003                     ??_PWM2:
   551  000003                     lcdInst@data:
   552                           	opt stack 0
   553  000003                     putch@data:
   554                           	opt stack 0
   555  000003                     I2C_Master_Read@temp:
   556                           	opt stack 0
   557  000003                     eepromRead@address:
   558                           	opt stack 0
   559  000003                     isdigit@c:
   560                           	opt stack 0
   561  000003                     ___wmul@multiplicand:
   562                           	opt stack 0
   563  000003                     ___lwdiv@divisor:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x2
   567  000003                     	ds	1
   568  000004                     ??_initLCD:
   569  000004                     updateTime@j:
   570                           	opt stack 0
   571  000004                     eepromWrite@data:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x3
   575  000004                     	ds	1
   576  000005                     ??_eepromWrite:
   577  000005                     ___wmul@product:
   578                           	opt stack 0
   579  000005                     ___lwdiv@quotient:
   580                           	opt stack 0
   581  000005                     ___lldiv@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x4
   585  000005                     	ds	2
   586  000007                     ?_timePassed:
   587                           	opt stack 0
   588  000007                     eepromWrite@address:
   589                           	opt stack 0
   590  000007                     ___lwdiv@counter:
   591                           	opt stack 0
   592  000007                     timePassed@start:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x6
   596  000007                     	ds	1
   597  000008                     ?___lwmod:
   598                           	opt stack 0
   599  000008                     ___lwmod@dividend:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x7
   603  000008                     	ds	1
   604  000009                     ??_timePassed:
   605  000009                     ___lldiv@quotient:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x8
   609  000009                     	ds	1
   610  00000A                     ___lwmod@divisor:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x9
   614  00000A                     	ds	2
   615  00000C                     ___lwmod@counter:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0xB
   619  00000C                     	ds	1
   620  00000D                     ?_printf:
   621                           	opt stack 0
   622  00000D                     ___lldiv@counter:
   623                           	opt stack 0
   624  00000D                     updateEEPROM@time:
   625                           	opt stack 0
   626  00000D                     printf@f:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0xC
   630  00000D                     	ds	1
   631  00000E                     I2C_Master_Init@c:
   632                           	opt stack 0
   633                           
   634                           ; 4 bytes @ 0xD
   635  00000E                     	ds	1
   636  00000F                     
   637                           ; 1 bytes @ 0xE
   638  00000F                     	ds	3
   639  000012                     ??_I2C_Master_Init:
   640                           
   641                           ; 1 bytes @ 0x11
   642  000012                     	ds	3
   643  000015                     ??_printf:
   644                           
   645                           ; 1 bytes @ 0x14
   646  000015                     	ds	1
   647  000016                     
   648                           ; 1 bytes @ 0x15
   649  000016                     	ds	3
   650  000019                     printf@idx:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x18
   654  000019                     	ds	1
   655  00001A                     printf@ap:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x19
   659  00001A                     	ds	2
   660  00001C                     printf@prec:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x1B
   664  00001C                     	ds	1
   665  00001D                     printf@val:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x1C
   669  00001D                     	ds	2
   670  00001F                     printf@flag:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x1E
   674  00001F                     	ds	1
   675  000020                     printf@width:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x1F
   679  000020                     	ds	2
   680  000022                     printf@c:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x21
   684  000022                     	ds	1
   685  000023                     ??_displayLogs:
   686                           
   687                           ; 1 bytes @ 0x22
   688  000023                     	ds	1
   689  000024                     ??_main:
   690                           
   691                           ; 1 bytes @ 0x23
   692  000024                     	ds	2
   693  000026                     main@prevUnblock:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x25
   697  000026                     	ds	2
   698  000028                     main@dc:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x27
   702  000028                     	ds	2
   703  00002A                     main@soupLoad:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x29
   707  00002A                     	ds	2
   708  00002C                     main@sodaLoad:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2B
   712  00002C                     	ds	2
   713  00002E                     main@canCheck:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x2D
   717  00002E                     	ds	2
   718  000030                     main@startTime:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x2F
   722  000030                     	ds	2
   723  000032                     main@s:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x31
   727  000032                     	ds	2
   728  000034                     main@standby:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x33
   732  000034                     	ds	2
   733                           tblptru	equ	0xFF8
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           
   737 ;;
   738 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   739 ;;
   740 ;; *************** function _main *****************
   741 ;; Defined at:
   742 ;;		line 96 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  standby         2   51[COMRAM] int 
   747 ;;  s               2   49[COMRAM] int 
   748 ;;  startTime       2   47[COMRAM] int 
   749 ;;  canCheck        2   45[COMRAM] int 
   750 ;;  sodaLoad        2   43[COMRAM] int 
   751 ;;  soupLoad        2   41[COMRAM] int 
   752 ;;  dc              2   39[COMRAM] int 
   753 ;;  prevUnblock     2   37[COMRAM] int 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  2  131[None  ] int 
   756 ;; Registers used:
   757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   767 ;;Total ram usage:       18 bytes
   768 ;; Hardware stack levels required when called:    4
   769 ;; This function calls:
   770 ;;		_PWM1
   771 ;;		_PWM1off
   772 ;;		_PWM2
   773 ;;		_PWM2off
   774 ;;		_S1backward
   775 ;;		_S1forward
   776 ;;		_S1off
   777 ;;		___wmul
   778 ;;		_displayLogs
   779 ;;		_homescreen
   780 ;;		_initialize
   781 ;;		_keycheck
   782 ;;		_keyinterrupt
   783 ;;		_lcdInst
   784 ;;		_printf
   785 ;;		_readADC
   786 ;;		_timePassed
   787 ;;		_updateEEPROM
   788 ;;		_updateStepper
   789 ;;		_updateTime
   790 ;; This function is called by:
   791 ;;		Startup code after reset
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           	psect	text0
   796  00FB7A                     __ptext0:
   797                           	opt stack 0
   798  00FB7A                     _main:
   799                           	opt stack 27
   800                           
   801                           ;main.c: 97: initialize();
   802                           
   803                           ;incstack = 0
   804  00FB7A  EC0B  F07B         	call	_initialize	;wreg free
   805                           
   806                           ;main.c: 98: int standby = 1;
   807  00FB7E  0E00               	movlw	0
   808  00FB80  6E35               	movwf	main@standby+1,c
   809  00FB82  0E01               	movlw	1
   810  00FB84  6E34               	movwf	main@standby,c
   811                           
   812                           ;main.c: 99: int s = 0;
   813  00FB86  0E00               	movlw	0
   814  00FB88  6E33               	movwf	main@s+1,c
   815  00FB8A  0E00               	movlw	0
   816  00FB8C  6E32               	movwf	main@s,c
   817                           
   818                           ;main.c: 100: int dc = 0;
   819  00FB8E  0E00               	movlw	0
   820  00FB90  6E29               	movwf	main@dc+1,c
   821  00FB92  0E00               	movlw	0
   822  00FB94  6E28               	movwf	main@dc,c
   823                           
   824                           ;main.c: 101: int startTime;
   825                           ;main.c: 102: int prevUnblock = 0;
   826  00FB96  0E00               	movlw	0
   827  00FB98  6E27               	movwf	main@prevUnblock+1,c
   828  00FB9A  0E00               	movlw	0
   829  00FB9C  6E26               	movwf	main@prevUnblock,c
   830                           
   831                           ;main.c: 103: int soupLoad = 1;
   832  00FB9E  0E00               	movlw	0
   833  00FBA0  6E2B               	movwf	main@soupLoad+1,c
   834  00FBA2  0E01               	movlw	1
   835  00FBA4  6E2A               	movwf	main@soupLoad,c
   836                           
   837                           ;main.c: 104: int sodaLoad = 1;
   838  00FBA6  0E00               	movlw	0
   839  00FBA8  6E2D               	movwf	main@sodaLoad+1,c
   840  00FBAA  0E01               	movlw	1
   841  00FBAC  6E2C               	movwf	main@sodaLoad,c
   842                           
   843                           ;main.c: 105: int canCheck;
   844                           ;main.c: 107: int s;
   845                           ;main.c: 109: _delay((unsigned long)((10)*(32000000/4000.0)));
   846  00FBAE  0E68               	movlw	104
   847  00FBB0  6E24               	movwf	??_main& (0+255),c
   848  00FBB2  0EE4               	movlw	228
   849  00FBB4                     u1647:
   850  00FBB4  2EE8               	decfsz	wreg,f,c
   851  00FBB6  D7FE               	bra	u1647
   852  00FBB8  2E24               	decfsz	??_main& (0+255),f,c
   853  00FBBA  D7FC               	bra	u1647
   854  00FBBC  D000               	nop2	
   855  00FBBE                     l2291:
   856                           
   857                           ;main.c: 113: updateTime();
   858  00FBBE  ECD8  F07A         	call	_updateTime	;wreg free
   859                           
   860                           ;main.c: 114: updateStepper();
   861  00FBC2  EC86  F07B         	call	_updateStepper	;wreg free
   862                           
   863                           ;main.c: 116: if (standby == 1){
   864  00FBC6  0434               	decf	main@standby,w,c
   865  00FBC8  1035               	iorwf	main@standby+1,w,c
   866  00FBCA  A4D8               	btfss	status,2,c
   867  00FBCC  D062               	goto	l2333
   868                           
   869                           ;main.c: 117: keypress = (0);
   870  00FBCE  0E00               	movlw	0
   871  00FBD0  6E43               	movwf	_keypress,c	;volatile
   872                           
   873                           ;main.c: 118: homescreen();
   874  00FBD2  ECA7  F07A         	call	_homescreen	;wreg free
   875                           
   876                           ;main.c: 119: keyinterrupt();
   877  00FBD6  EC6C  F078         	call	_keyinterrupt	;wreg free
   878                           
   879                           ;main.c: 122: if(keypress == 2){
   880  00FBDA  0E02               	movlw	2
   881  00FBDC  1843               	xorwf	_keypress,w,c	;volatile
   882  00FBDE  A4D8               	btfss	status,2,c
   883  00FBE0  D045               	goto	l2325
   884                           
   885                           ;main.c: 123: standby = 0;
   886  00FBE2  0E00               	movlw	0
   887  00FBE4  6E35               	movwf	main@standby+1,c
   888  00FBE6  0E00               	movlw	0
   889  00FBE8  6E34               	movwf	main@standby,c
   890                           
   891                           ;main.c: 124: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
   892  00FBEA  0E01               	movlw	1
   893  00FBEC  EC4D  F078         	call	_lcdInst
   894  00FBF0  0E68               	movlw	104
   895  00FBF2  6E24               	movwf	??_main& (0+255),c
   896  00FBF4  0EE4               	movlw	228
   897  00FBF6                     u1657:
   898  00FBF6  2EE8               	decfsz	wreg,f,c
   899  00FBF8  D7FE               	bra	u1657
   900  00FBFA  2E24               	decfsz	??_main& (0+255),f,c
   901  00FBFC  D7FC               	bra	u1657
   902  00FBFE  D000               	nop2	
   903                           
   904                           ;main.c: 125: printf("Sorting cans...");
   905  00FC00  0E5F               	movlw	low STR_1
   906  00FC02  6E0D               	movwf	printf@f,c
   907  00FC04  0EFF               	movlw	high STR_1
   908  00FC06  6E0E               	movwf	printf@f+1,c
   909  00FC08  EC37  F07C         	call	_printf	;wreg free
   910                           
   911                           ;main.c: 126: lcdInst(0b11000000);;
   912  00FC0C  0EC0               	movlw	192
   913  00FC0E  EC4D  F078         	call	_lcdInst
   914                           
   915                           ;main.c: 127: printf("Any key to stop");
   916  00FC12  0E6F               	movlw	low STR_2
   917  00FC14  6E0D               	movwf	printf@f,c
   918  00FC16  0EFF               	movlw	high STR_2
   919  00FC18  6E0E               	movwf	printf@f+1,c
   920  00FC1A  EC37  F07C         	call	_printf	;wreg free
   921                           
   922                           ;main.c: 128: PWM1(100);
   923  00FC1E  0E00               	movlw	0
   924  00FC20  6E02               	movwf	PWM1@duty+1,c
   925  00FC22  0E64               	movlw	100
   926  00FC24  6E01               	movwf	PWM1@duty,c
   927  00FC26  ECB7  F079         	call	_PWM1	;wreg free
   928                           
   929                           ;main.c: 129: dc = 1;
   930  00FC2A  0E00               	movlw	0
   931  00FC2C  6E29               	movwf	main@dc+1,c
   932  00FC2E  0E01               	movlw	1
   933  00FC30  6E28               	movwf	main@dc,c
   934                           
   935                           ;main.c: 130: startTime = time[0] + 60*time[1] + 3600*time[2];
   936  00FC32  C038  F001         	movff	_time+2,___wmul@multiplier
   937  00FC36  6A02               	clrf	___wmul@multiplier+1,c
   938  00FC38  0E0E               	movlw	14
   939  00FC3A  6E04               	movwf	___wmul@multiplicand+1,c
   940  00FC3C  0E10               	movlw	16
   941  00FC3E  6E03               	movwf	___wmul@multiplicand,c
   942  00FC40  ECA2  F078         	call	___wmul	;wreg free
   943  00FC44  5037               	movf	_time+1,w,c
   944  00FC46  0D3C               	mullw	60
   945  00FC48  5036               	movf	_time,w,c
   946  00FC4A  6E24               	movwf	??_main& (0+255),c
   947  00FC4C  6A25               	clrf	(??_main+1)& (0+255),c
   948  00FC4E  50F3               	movf	prodl,w,c
   949  00FC50  2624               	addwf	??_main,f,c
   950  00FC52  50F4               	movf	prodh,w,c
   951  00FC54  2225               	addwfc	??_main+1,f,c
   952  00FC56  5001               	movf	?___wmul,w,c
   953  00FC58  2424               	addwf	??_main,w,c
   954  00FC5A  6E30               	movwf	main@startTime,c
   955  00FC5C  5002               	movf	?___wmul+1,w,c
   956  00FC5E  2025               	addwfc	??_main+1,w,c
   957  00FC60  6E31               	movwf	main@startTime+1,c
   958                           
   959                           ;main.c: 131: canCheck = startTime;
   960  00FC62  C030  F02E         	movff	main@startTime,main@canCheck
   961  00FC66  C031  F02F         	movff	main@startTime+1,main@canCheck+1
   962                           
   963                           ;main.c: 133: }
   964  00FC6A  D7A9               	goto	l2291
   965  00FC6C                     l2325:
   966                           
   967                           ;main.c: 134: else if(keypress == 1){
   968  00FC6C  0443               	decf	_keypress,w,c	;volatile
   969  00FC6E  A4D8               	btfss	status,2,c
   970  00FC70  D003               	goto	l2329
   971                           
   972                           ;main.c: 136: displayLogs();
   973  00FC72  ECD4  F07B         	call	_displayLogs	;wreg free
   974                           
   975                           ;main.c: 137: }
   976  00FC76  D7A3               	goto	l2291
   977  00FC78                     l2329:
   978                           
   979                           ;main.c: 138: else if(keypress == 15){
   980  00FC78  0E0F               	movlw	15
   981  00FC7A  1843               	xorwf	_keypress,w,c	;volatile
   982  00FC7C  A4D8               	btfss	status,2,c
   983  00FC7E  D79F               	goto	l2291
   984                           
   985                           ;main.c: 139: standby = 100;
   986  00FC80  0E00               	movlw	0
   987  00FC82  6E35               	movwf	main@standby+1,c
   988  00FC84  0E64               	movlw	100
   989  00FC86  6E34               	movwf	main@standby,c
   990                           
   991                           ;main.c: 140: s = 1;
   992  00FC88  0E00               	movlw	0
   993  00FC8A  6E33               	movwf	main@s+1,c
   994  00FC8C  0E01               	movlw	1
   995  00FC8E  6E32               	movwf	main@s,c
   996                           
   997                           ;main.c: 141: }
   998                           ;main.c: 143: }
   999  00FC90  D796               	goto	l2291
  1000  00FC92                     l2333:
  1001                           
  1002                           ;main.c: 144: else if(standby == 100){
  1003  00FC92  0E64               	movlw	100
  1004  00FC94  1834               	xorwf	main@standby,w,c
  1005  00FC96  1035               	iorwf	main@standby+1,w,c
  1006  00FC98  A4D8               	btfss	status,2,c
  1007  00FC9A  D0A5               	goto	l2403
  1008                           
  1009                           ;main.c: 145: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1010  00FC9C  0E01               	movlw	1
  1011  00FC9E  EC4D  F078         	call	_lcdInst
  1012  00FCA2  0E68               	movlw	104
  1013  00FCA4  6E24               	movwf	??_main& (0+255),c
  1014  00FCA6  0EE4               	movlw	228
  1015  00FCA8                     u1667:
  1016  00FCA8  2EE8               	decfsz	wreg,f,c
  1017  00FCAA  D7FE               	bra	u1667
  1018  00FCAC  2E24               	decfsz	??_main& (0+255),f,c
  1019  00FCAE  D7FC               	bra	u1667
  1020  00FCB0  D000               	nop2	
  1021                           
  1022                           ;main.c: 146: keypress = (0);
  1023  00FCB2  0E00               	movlw	0
  1024  00FCB4  6E43               	movwf	_keypress,c	;volatile
  1025                           
  1026                           ;main.c: 147: if (s==1){
  1027  00FCB6  0432               	decf	main@s,w,c
  1028  00FCB8  1033               	iorwf	main@s+1,w,c
  1029  00FCBA  A4D8               	btfss	status,2,c
  1030  00FCBC  D00B               	goto	l2349
  1031                           
  1032                           ;main.c: 148: printf("testing S1 f");
  1033  00FCBE  0ED2               	movlw	low STR_3
  1034  00FCC0  6E0D               	movwf	printf@f,c
  1035  00FCC2  0EFF               	movlw	high STR_3
  1036  00FCC4  6E0E               	movwf	printf@f+1,c
  1037  00FCC6  EC37  F07C         	call	_printf	;wreg free
  1038                           
  1039                           ;main.c: 149: S1forward();
  1040  00FCCA  EC33  F079         	call	_S1forward	;wreg free
  1041                           
  1042                           ;main.c: 150: keyinterrupt();
  1043  00FCCE  EC6C  F078         	call	_keyinterrupt	;wreg free
  1044                           
  1045                           ;main.c: 151: }
  1046  00FCD2  D083               	goto	l142
  1047  00FCD4                     l2349:
  1048                           
  1049                           ;main.c: 152: else if(s==2){
  1050  00FCD4  0E02               	movlw	2
  1051  00FCD6  1832               	xorwf	main@s,w,c
  1052  00FCD8  1033               	iorwf	main@s+1,w,c
  1053  00FCDA  A4D8               	btfss	status,2,c
  1054  00FCDC  D00B               	goto	l2357
  1055                           
  1056                           ;main.c: 153: printf("testing S1 b");
  1057  00FCDE  0EC5               	movlw	low STR_4
  1058  00FCE0  6E0D               	movwf	printf@f,c
  1059  00FCE2  0EFF               	movlw	high STR_4
  1060  00FCE4  6E0E               	movwf	printf@f+1,c
  1061  00FCE6  EC37  F07C         	call	_printf	;wreg free
  1062                           
  1063                           ;main.c: 154: S1backward();
  1064  00FCEA  EC13  F079         	call	_S1backward	;wreg free
  1065                           
  1066                           ;main.c: 155: keyinterrupt();
  1067  00FCEE  EC6C  F078         	call	_keyinterrupt	;wreg free
  1068                           
  1069                           ;main.c: 156: }
  1070  00FCF2  D073               	goto	l142
  1071  00FCF4                     l2357:
  1072                           
  1073                           ;main.c: 157: else{
  1074                           ;main.c: 158: S1off();
  1075  00FCF4  EC53  F079         	call	_S1off	;wreg free
  1076                           
  1077                           ;main.c: 160: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1078  00FCF8  0E01               	movlw	1
  1079  00FCFA  EC4D  F078         	call	_lcdInst
  1080  00FCFE  0E68               	movlw	104
  1081  00FD00  6E24               	movwf	??_main& (0+255),c
  1082  00FD02  0EE4               	movlw	228
  1083  00FD04                     u1677:
  1084  00FD04  2EE8               	decfsz	wreg,f,c
  1085  00FD06  D7FE               	bra	u1677
  1086  00FD08  2E24               	decfsz	??_main& (0+255),f,c
  1087  00FD0A  D7FC               	bra	u1677
  1088  00FD0C  D000               	nop2	
  1089                           
  1090                           ;main.c: 161: printf("testing PWM2");
  1091  00FD0E  0EB8               	movlw	low STR_5
  1092  00FD10  6E0D               	movwf	printf@f,c
  1093  00FD12  0EFF               	movlw	high STR_5
  1094  00FD14  6E0E               	movwf	printf@f+1,c
  1095  00FD16  EC37  F07C         	call	_printf	;wreg free
  1096                           
  1097                           ;main.c: 162: PWM2(500);
  1098  00FD1A  0E01               	movlw	1
  1099  00FD1C  6E02               	movwf	PWM2@duty+1,c
  1100  00FD1E  0EF4               	movlw	244
  1101  00FD20  6E01               	movwf	PWM2@duty,c
  1102  00FD22  ECDC  F079         	call	_PWM2	;wreg free
  1103                           
  1104                           ;main.c: 163: keycheck();
  1105  00FD26  EC62  F078         	call	_keycheck	;wreg free
  1106                           
  1107                           ;main.c: 164: PWM2off();
  1108  00FD2A  EC43  F078         	call	_PWM2off	;wreg free
  1109                           
  1110                           ;main.c: 166: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1111  00FD2E  0E01               	movlw	1
  1112  00FD30  EC4D  F078         	call	_lcdInst
  1113  00FD34  0E68               	movlw	104
  1114  00FD36  6E24               	movwf	??_main& (0+255),c
  1115  00FD38  0EE4               	movlw	228
  1116  00FD3A                     u1687:
  1117  00FD3A  2EE8               	decfsz	wreg,f,c
  1118  00FD3C  D7FE               	bra	u1687
  1119  00FD3E  2E24               	decfsz	??_main& (0+255),f,c
  1120  00FD40  D7FC               	bra	u1687
  1121  00FD42  D000               	nop2	
  1122                           
  1123                           ;main.c: 167: printf("testing PWM1");
  1124  00FD44  0EAB               	movlw	low STR_6
  1125  00FD46  6E0D               	movwf	printf@f,c
  1126  00FD48  0EFF               	movlw	high STR_6
  1127  00FD4A  6E0E               	movwf	printf@f+1,c
  1128  00FD4C  EC37  F07C         	call	_printf	;wreg free
  1129                           
  1130                           ;main.c: 168: PWM1(500);
  1131  00FD50  0E01               	movlw	1
  1132  00FD52  6E02               	movwf	PWM1@duty+1,c
  1133  00FD54  0EF4               	movlw	244
  1134  00FD56  6E01               	movwf	PWM1@duty,c
  1135  00FD58  ECB7  F079         	call	_PWM1	;wreg free
  1136                           
  1137                           ;main.c: 169: keycheck();
  1138  00FD5C  EC62  F078         	call	_keycheck	;wreg free
  1139                           
  1140                           ;main.c: 170: PWM1off();
  1141  00FD60  EC3E  F078         	call	_PWM1off	;wreg free
  1142                           
  1143                           ;main.c: 172: keypress = (0);
  1144  00FD64  0E00               	movlw	0
  1145  00FD66  6E43               	movwf	_keypress,c	;volatile
  1146                           
  1147                           ;main.c: 173: while(keypress==(0)){
  1148  00FD68  D031               	goto	l145
  1149  00FD6A                     l2381:
  1150                           
  1151                           ;main.c: 174: keypress = (0);
  1152  00FD6A  0E00               	movlw	0
  1153  00FD6C  6E43               	movwf	_keypress,c	;volatile
  1154                           
  1155                           ;main.c: 175: _delay((unsigned long)((50)*(32000000/4000.0)));
  1156  00FD6E  0E03               	movlw	3
  1157  00FD70  6E25               	movwf	(??_main+1)& (0+255),c
  1158  00FD72  0E08               	movlw	8
  1159  00FD74  6E24               	movwf	??_main& (0+255),c
  1160  00FD76  0E77               	movlw	119
  1161  00FD78                     u1697:
  1162  00FD78  2EE8               	decfsz	wreg,f,c
  1163  00FD7A  D7FE               	bra	u1697
  1164  00FD7C  2E24               	decfsz	??_main& (0+255),f,c
  1165  00FD7E  D7FC               	bra	u1697
  1166  00FD80  2E25               	decfsz	(??_main+1)& (0+255),f,c
  1167  00FD82  D7FA               	bra	u1697
  1168  00FD84  F000               	nop	
  1169                           
  1170                           ;main.c: 176: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1171  00FD86  0E01               	movlw	1
  1172  00FD88  EC4D  F078         	call	_lcdInst
  1173  00FD8C  0E68               	movlw	104
  1174  00FD8E  6E24               	movwf	??_main& (0+255),c
  1175  00FD90  0EE4               	movlw	228
  1176  00FD92                     u1707:
  1177  00FD92  2EE8               	decfsz	wreg,f,c
  1178  00FD94  D7FE               	bra	u1707
  1179  00FD96  2E24               	decfsz	??_main& (0+255),f,c
  1180  00FD98  D7FC               	bra	u1707
  1181  00FD9A  D000               	nop2	
  1182                           
  1183                           ;main.c: 177: printf("testing IR1");
  1184  00FD9C  0EDF               	movlw	low STR_7
  1185  00FD9E  6E0D               	movwf	printf@f,c
  1186  00FDA0  0EFF               	movlw	high STR_7
  1187  00FDA2  6E0E               	movwf	printf@f+1,c
  1188  00FDA4  EC37  F07C         	call	_printf	;wreg free
  1189                           
  1190                           ;main.c: 178: readADC(0);
  1191  00FDA8  0E00               	movlw	0
  1192  00FDAA  EC90  F078         	call	_readADC
  1193                           
  1194                           ;main.c: 179: lcdInst(0b11000000);;
  1195  00FDAE  0EC0               	movlw	192
  1196  00FDB0  EC4D  F078         	call	_lcdInst
  1197                           
  1198                           ;main.c: 180: printf("%x", ADRES);
  1199  00FDB4  0EFB               	movlw	low STR_8
  1200  00FDB6  6E0D               	movwf	printf@f,c
  1201  00FDB8  0EFF               	movlw	high STR_8
  1202  00FDBA  6E0E               	movwf	printf@f+1,c
  1203  00FDBC  CFC3 F00F          	movff	4035,?_printf+2	;volatile
  1204  00FDC0  CFC4 F010          	movff	4036,?_printf+3	;volatile
  1205  00FDC4  EC37  F07C         	call	_printf	;wreg free
  1206                           
  1207                           ;main.c: 181: keyinterrupt();
  1208  00FDC8  EC6C  F078         	call	_keyinterrupt	;wreg free
  1209  00FDCC                     l145:
  1210  00FDCC  5043               	movf	_keypress,w,c	;volatile
  1211  00FDCE  B4D8               	btfsc	status,2,c
  1212  00FDD0  D7CC               	goto	l2381
  1213                           
  1214                           ;main.c: 182: }
  1215                           ;main.c: 198: standby = 1;
  1216  00FDD2  0E00               	movlw	0
  1217  00FDD4  6E35               	movwf	main@standby+1,c
  1218  00FDD6  0E01               	movlw	1
  1219  00FDD8  6E34               	movwf	main@standby,c
  1220  00FDDA                     l142:
  1221                           
  1222                           ;main.c: 199: }
  1223                           ;main.c: 201: if(keypress != (0)){
  1224  00FDDA  5043               	movf	_keypress,w,c	;volatile
  1225  00FDDC  B4D8               	btfsc	status,2,c
  1226  00FDDE  D6EF               	goto	l2291
  1227                           
  1228                           ;main.c: 202: s++;
  1229  00FDE0  4A32               	infsnz	main@s,f,c
  1230  00FDE2  2A33               	incf	main@s+1,f,c
  1231                           
  1232                           ;main.c: 203: }
  1233                           ;main.c: 206: }
  1234  00FDE4  D6EC               	goto	l2291
  1235  00FDE6                     l2403:
  1236                           
  1237                           ;main.c: 207: else{
  1238                           ;main.c: 208: keypress = (0);
  1239  00FDE6  0E00               	movlw	0
  1240  00FDE8  6E43               	movwf	_keypress,c	;volatile
  1241                           
  1242                           ;main.c: 209: keyinterrupt();
  1243  00FDEA  EC6C  F078         	call	_keyinterrupt	;wreg free
  1244                           
  1245                           ;main.c: 210: if (keypress != (0)) {
  1246  00FDEE  5043               	movf	_keypress,w,c	;volatile
  1247  00FDF0  B4D8               	btfsc	status,2,c
  1248  00FDF2  D004               	goto	l2411
  1249                           
  1250                           ;main.c: 211: standby = 1;
  1251  00FDF4  0E00               	movlw	0
  1252  00FDF6  6E35               	movwf	main@standby+1,c
  1253  00FDF8  0E01               	movlw	1
  1254  00FDFA  6E34               	movwf	main@standby,c
  1255  00FDFC                     l2411:
  1256                           
  1257                           ;main.c: 212: }
  1258                           ;main.c: 226: if(timePassed(canCheck) > 10){
  1259  00FDFC  C02E  F007         	movff	main@canCheck,timePassed@start
  1260  00FE00  C02F  F008         	movff	main@canCheck+1,timePassed@start+1
  1261  00FE04  EC01  F07A         	call	_timePassed	;wreg free
  1262  00FE08  BE08               	btfsc	?_timePassed+1,7,c
  1263  00FE0A  D036               	goto	l2427
  1264  00FE0C  5008               	movf	?_timePassed+1,w,c
  1265  00FE0E  E104               	bnz	u1570
  1266  00FE10  0E0B               	movlw	11
  1267  00FE12  5C07               	subwf	?_timePassed,w,c
  1268  00FE14  A0D8               	btfss	status,0,c
  1269  00FE16  D030               	goto	l2427
  1270  00FE18                     u1570:
  1271                           
  1272                           ;main.c: 227: readADC(2);
  1273  00FE18  0E02               	movlw	2
  1274  00FE1A  EC90  F078         	call	_readADC
  1275                           
  1276                           ;main.c: 228: soupLoad = ADRESH;
  1277  00FE1E  CFC4 F02A          	movff	4036,main@soupLoad	;volatile
  1278  00FE22  6A2B               	clrf	main@soupLoad+1,c
  1279                           
  1280                           ;main.c: 229: readADC(5);
  1281  00FE24  0E05               	movlw	5
  1282  00FE26  EC90  F078         	call	_readADC
  1283                           
  1284                           ;main.c: 230: sodaLoad = ADRESH;
  1285  00FE2A  CFC4 F02C          	movff	4036,main@sodaLoad	;volatile
  1286  00FE2E  6A2D               	clrf	main@sodaLoad+1,c
  1287                           
  1288                           ;main.c: 231: if (!soupLoad & !sodaLoad){
  1289  00FE30  502A               	movf	main@soupLoad,w,c
  1290  00FE32  102B               	iorwf	main@soupLoad+1,w,c
  1291  00FE34  A4D8               	btfss	status,2,c
  1292  00FE36  D008               	goto	l2425
  1293  00FE38  502C               	movf	main@sodaLoad,w,c
  1294  00FE3A  102D               	iorwf	main@sodaLoad+1,w,c
  1295  00FE3C  A4D8               	btfss	status,2,c
  1296  00FE3E  D004               	goto	l2425
  1297                           
  1298                           ;main.c: 232: standby = 1;
  1299  00FE40  0E00               	movlw	0
  1300  00FE42  6E35               	movwf	main@standby+1,c
  1301  00FE44  0E01               	movlw	1
  1302  00FE46  6E34               	movwf	main@standby,c
  1303  00FE48                     l2425:
  1304                           
  1305                           ;main.c: 233: }
  1306                           ;main.c: 234: canCheck = time[0] + 60*time[1] + 3600*time[2];
  1307  00FE48  C038  F001         	movff	_time+2,___wmul@multiplier
  1308  00FE4C  6A02               	clrf	___wmul@multiplier+1,c
  1309  00FE4E  0E0E               	movlw	14
  1310  00FE50  6E04               	movwf	___wmul@multiplicand+1,c
  1311  00FE52  0E10               	movlw	16
  1312  00FE54  6E03               	movwf	___wmul@multiplicand,c
  1313  00FE56  ECA2  F078         	call	___wmul	;wreg free
  1314  00FE5A  5037               	movf	_time+1,w,c
  1315  00FE5C  0D3C               	mullw	60
  1316  00FE5E  5036               	movf	_time,w,c
  1317  00FE60  6E24               	movwf	??_main& (0+255),c
  1318  00FE62  6A25               	clrf	(??_main+1)& (0+255),c
  1319  00FE64  50F3               	movf	prodl,w,c
  1320  00FE66  2624               	addwf	??_main,f,c
  1321  00FE68  50F4               	movf	prodh,w,c
  1322  00FE6A  2225               	addwfc	??_main+1,f,c
  1323  00FE6C  5001               	movf	?___wmul,w,c
  1324  00FE6E  2424               	addwf	??_main,w,c
  1325  00FE70  6E2E               	movwf	main@canCheck,c
  1326  00FE72  5002               	movf	?___wmul+1,w,c
  1327  00FE74  2025               	addwfc	??_main+1,w,c
  1328  00FE76  6E2F               	movwf	main@canCheck+1,c
  1329  00FE78                     l2427:
  1330                           
  1331                           ;main.c: 235: }
  1332                           ;main.c: 238: if(standby){
  1333  00FE78  5034               	movf	main@standby,w,c
  1334  00FE7A  1035               	iorwf	main@standby+1,w,c
  1335  00FE7C  B4D8               	btfsc	status,2,c
  1336  00FE7E  D69F               	goto	l2291
  1337                           
  1338                           ;main.c: 239: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1339  00FE80  0E01               	movlw	1
  1340  00FE82  EC4D  F078         	call	_lcdInst
  1341  00FE86  0E68               	movlw	104
  1342  00FE88  6E24               	movwf	??_main& (0+255),c
  1343  00FE8A  0EE4               	movlw	228
  1344  00FE8C                     u1717:
  1345  00FE8C  2EE8               	decfsz	wreg,f,c
  1346  00FE8E  D7FE               	bra	u1717
  1347  00FE90  2E24               	decfsz	??_main& (0+255),f,c
  1348  00FE92  D7FC               	bra	u1717
  1349  00FE94  D000               	nop2	
  1350                           
  1351                           ;main.c: 240: printf("Finished sorting! ");
  1352  00FE96  0E0B               	movlw	low STR_9
  1353  00FE98  6E0D               	movwf	printf@f,c
  1354  00FE9A  0EFF               	movlw	high STR_9
  1355  00FE9C  6E0E               	movwf	printf@f+1,c
  1356  00FE9E  EC37  F07C         	call	_printf	;wreg free
  1357                           
  1358                           ;main.c: 241: _delay((unsigned long)((500)*(32000000/4000.0)));
  1359  00FEA2  0E15               	movlw	21
  1360  00FEA4  6E25               	movwf	(??_main+1)& (0+255),c
  1361  00FEA6  0E4B               	movlw	75
  1362  00FEA8  6E24               	movwf	??_main& (0+255),c
  1363  00FEAA  0EBE               	movlw	190
  1364  00FEAC                     u1727:
  1365  00FEAC  2EE8               	decfsz	wreg,f,c
  1366  00FEAE  D7FE               	bra	u1727
  1367  00FEB0  2E24               	decfsz	??_main& (0+255),f,c
  1368  00FEB2  D7FC               	bra	u1727
  1369  00FEB4  2E25               	decfsz	(??_main+1)& (0+255),f,c
  1370  00FEB6  D7FA               	bra	u1727
  1371  00FEB8  D000               	nop2	
  1372                           
  1373                           ;main.c: 242: PWM1off();
  1374  00FEBA  EC3E  F078         	call	_PWM1off	;wreg free
  1375                           
  1376                           ;main.c: 243: dc = 0;
  1377  00FEBE  0E00               	movlw	0
  1378  00FEC0  6E29               	movwf	main@dc+1,c
  1379  00FEC2  0E00               	movlw	0
  1380  00FEC4  6E28               	movwf	main@dc,c
  1381                           
  1382                           ;main.c: 244: updateEEPROM(timePassed(startTime));
  1383  00FEC6  C030  F007         	movff	main@startTime,timePassed@start
  1384  00FECA  C031  F008         	movff	main@startTime+1,timePassed@start+1
  1385  00FECE  EC01  F07A         	call	_timePassed	;wreg free
  1386  00FED2  C007  F00D         	movff	?_timePassed,updateEEPROM@time
  1387  00FED6  C008  F00E         	movff	?_timePassed+1,updateEEPROM@time+1
  1388  00FEDA  ECDC  F078         	call	_updateEEPROM	;wreg free
  1389  00FEDE  D66F               	goto	l2291
  1390  00FEE0                     __end_of_main:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           prodh	equ	0xFF4
  1394                           prodl	equ	0xFF3
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           status	equ	0xFD8
  1398                           
  1399 ;; *************** function _updateTime *****************
  1400 ;; Defined at:
  1401 ;;		line 89 in file "I2C.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  j               1    3[COMRAM] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        1 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    2
  1422 ;; This function calls:
  1423 ;;		_I2C_Master_Read
  1424 ;;		_I2C_Master_Start
  1425 ;;		_I2C_Master_Stop
  1426 ;;		_I2C_Master_Write
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text1
  1433  00F5B0                     __ptext1:
  1434                           	opt stack 0
  1435  00F5B0                     _updateTime:
  1436                           	opt stack 28
  1437                           
  1438                           ;I2C.c: 91: I2C_Master_Start();
  1439                           
  1440                           ;incstack = 0
  1441  00F5B0  EC36  F078         	call	_I2C_Master_Start	;wreg free
  1442                           
  1443                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  1444  00F5B4  0E00               	movlw	0
  1445  00F5B6  6E03               	movwf	I2C_Master_Write@d+1,c
  1446  00F5B8  0ED0               	movlw	208
  1447  00F5BA  6E02               	movwf	I2C_Master_Write@d,c
  1448  00F5BC  EC48  F078         	call	_I2C_Master_Write	;wreg free
  1449                           
  1450                           ;I2C.c: 93: I2C_Master_Write(0x00);
  1451  00F5C0  0E00               	movlw	0
  1452  00F5C2  6E03               	movwf	I2C_Master_Write@d+1,c
  1453  00F5C4  0E00               	movlw	0
  1454  00F5C6  6E02               	movwf	I2C_Master_Write@d,c
  1455  00F5C8  EC48  F078         	call	_I2C_Master_Write	;wreg free
  1456                           
  1457                           ;I2C.c: 94: I2C_Master_Stop();
  1458  00F5CC  EC3A  F078         	call	_I2C_Master_Stop	;wreg free
  1459                           
  1460                           ;I2C.c: 97: I2C_Master_Start();
  1461  00F5D0  EC36  F078         	call	_I2C_Master_Start	;wreg free
  1462                           
  1463                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  1464  00F5D4  0E00               	movlw	0
  1465  00F5D6  6E03               	movwf	I2C_Master_Write@d+1,c
  1466  00F5D8  0ED1               	movlw	209
  1467  00F5DA  6E02               	movwf	I2C_Master_Write@d,c
  1468  00F5DC  EC48  F078         	call	_I2C_Master_Write	;wreg free
  1469                           
  1470                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  1471  00F5E0  0E00               	movlw	0
  1472  00F5E2  6E04               	movwf	updateTime@j,c
  1473  00F5E4                     l2203:
  1474  00F5E4  0E05               	movlw	5
  1475  00F5E6  6404               	cpfsgt	updateTime@j,c
  1476  00F5E8  D001               	goto	l2207
  1477  00F5EA  D00E               	goto	l2213
  1478  00F5EC                     l2207:
  1479                           
  1480                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  1481  00F5EC  5004               	movf	updateTime@j,w,c
  1482  00F5EE  0D01               	mullw	1
  1483  00F5F0  0E36               	movlw	low _time
  1484  00F5F2  24F3               	addwf	prodl,w,c
  1485  00F5F4  6ED9               	movwf	fsr2l,c
  1486  00F5F6  0E00               	movlw	high _time
  1487  00F5F8  20F4               	addwfc	prodh,w,c
  1488  00F5FA  6EDA               	movwf	fsr2h,c
  1489  00F5FC  0E01               	movlw	1
  1490  00F5FE  ECB5  F078         	call	_I2C_Master_Read
  1491  00F602  6EDF               	movwf	indf2,c
  1492  00F604  2A04               	incf	updateTime@j,f,c
  1493  00F606  D7EE               	goto	l2203
  1494  00F608                     l2213:
  1495                           
  1496                           ;I2C.c: 101: }
  1497                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  1498  00F608  0E00               	movlw	0
  1499  00F60A  ECB5  F078         	call	_I2C_Master_Read
  1500  00F60E  6E3C               	movwf	_time+6,c
  1501                           
  1502                           ;I2C.c: 103: I2C_Master_Stop();
  1503  00F610  EC3A  F078         	call	_I2C_Master_Stop	;wreg free
  1504  00F614  0012               	return		;funcret
  1505  00F616                     __end_of_updateTime:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           postinc0	equ	0xFEE
  1511                           wreg	equ	0xFE8
  1512                           indf2	equ	0xFDF
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _I2C_Master_Write *****************
  1518 ;; Defined at:
  1519 ;;		line 54 in file "I2C.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  d               2    1[COMRAM] unsigned int 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1536 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;Total ram usage:        2 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    1
  1540 ;; This function calls:
  1541 ;;		_I2C_Master_Wait
  1542 ;; This function is called by:
  1543 ;;		_updateTime
  1544 ;;		_set_time
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text2
  1549  00F090                     __ptext2:
  1550                           	opt stack 0
  1551  00F090                     _I2C_Master_Write:
  1552                           	opt stack 28
  1553                           
  1554                           ;I2C.c: 56: I2C_Master_Wait();
  1555                           
  1556                           ;incstack = 0
  1557  00F090  EC59  F078         	call	_I2C_Master_Wait	;wreg free
  1558                           
  1559                           ;I2C.c: 57: SSPBUF = d;
  1560  00F094  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1561  00F098  0012               	return		;funcret
  1562  00F09A                     __end_of_I2C_Master_Write:
  1563                           	opt stack 0
  1564                           tblptru	equ	0xFF8
  1565                           prodh	equ	0xFF4
  1566                           prodl	equ	0xFF3
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           indf2	equ	0xFDF
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _I2C_Master_Stop *****************
  1575 ;; Defined at:
  1576 ;;		line 48 in file "I2C.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        0 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    1
  1597 ;; This function calls:
  1598 ;;		_I2C_Master_Wait
  1599 ;; This function is called by:
  1600 ;;		_updateTime
  1601 ;;		_set_time
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           	psect	text3
  1606  00F074                     __ptext3:
  1607                           	opt stack 0
  1608  00F074                     _I2C_Master_Stop:
  1609                           	opt stack 28
  1610                           
  1611                           ;I2C.c: 50: I2C_Master_Wait();
  1612                           
  1613                           ;incstack = 0
  1614  00F074  EC59  F078         	call	_I2C_Master_Wait	;wreg free
  1615                           
  1616                           ;I2C.c: 51: PEN = 1;
  1617  00F078  84C5               	bsf	4037,2,c	;volatile
  1618  00F07A  0012               	return		;funcret
  1619  00F07C                     __end_of_I2C_Master_Stop:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           prodh	equ	0xFF4
  1623                           prodl	equ	0xFF3
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           indf2	equ	0xFDF
  1627                           fsr2h	equ	0xFDA
  1628                           fsr2l	equ	0xFD9
  1629                           status	equ	0xFD8
  1630                           
  1631 ;; *************** function _I2C_Master_Start *****************
  1632 ;; Defined at:
  1633 ;;		line 36 in file "I2C.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, status,2, status,0, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;Total ram usage:        0 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    1
  1654 ;; This function calls:
  1655 ;;		_I2C_Master_Wait
  1656 ;; This function is called by:
  1657 ;;		_updateTime
  1658 ;;		_set_time
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text4
  1663  00F06C                     __ptext4:
  1664                           	opt stack 0
  1665  00F06C                     _I2C_Master_Start:
  1666                           	opt stack 28
  1667                           
  1668                           ;I2C.c: 38: I2C_Master_Wait();
  1669                           
  1670                           ;incstack = 0
  1671  00F06C  EC59  F078         	call	_I2C_Master_Wait	;wreg free
  1672                           
  1673                           ;I2C.c: 39: SEN = 1;
  1674  00F070  80C5               	bsf	4037,0,c	;volatile
  1675  00F072  0012               	return		;funcret
  1676  00F074                     __end_of_I2C_Master_Start:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           prodh	equ	0xFF4
  1680                           prodl	equ	0xFF3
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           indf2	equ	0xFDF
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function _I2C_Master_Read *****************
  1689 ;; Defined at:
  1690 ;;		line 60 in file "I2C.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  a               1    wreg     unsigned char 
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;  a               1    1[COMRAM] unsigned char 
  1695 ;;  temp            1    2[COMRAM] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      unsigned char 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;Total ram usage:        2 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    1
  1712 ;; This function calls:
  1713 ;;		_I2C_Master_Wait
  1714 ;; This function is called by:
  1715 ;;		_updateTime
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text5
  1720  00F16A                     __ptext5:
  1721                           	opt stack 0
  1722  00F16A                     _I2C_Master_Read:
  1723                           	opt stack 28
  1724                           
  1725                           ;incstack = 0
  1726                           ;I2C_Master_Read@a stored from wreg
  1727  00F16A  6E02               	movwf	I2C_Master_Read@a,c
  1728                           
  1729                           ;I2C.c: 62: unsigned char temp;
  1730                           ;I2C.c: 63: I2C_Master_Wait();
  1731  00F16C  EC59  F078         	call	_I2C_Master_Wait	;wreg free
  1732                           
  1733                           ;I2C.c: 64: RCEN = 1;
  1734  00F170  86C5               	bsf	4037,3,c	;volatile
  1735                           
  1736                           ;I2C.c: 65: I2C_Master_Wait();
  1737  00F172  EC59  F078         	call	_I2C_Master_Wait	;wreg free
  1738                           
  1739                           ;I2C.c: 66: temp = SSPBUF;
  1740  00F176  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  1741                           
  1742                           ;I2C.c: 67: I2C_Master_Wait();
  1743  00F17A  EC59  F078         	call	_I2C_Master_Wait	;wreg free
  1744                           
  1745                           ;I2C.c: 68: ACKDT = (a)?0:1;
  1746  00F17E  5002               	movf	I2C_Master_Read@a,w,c
  1747  00F180  A4D8               	btfss	status,2,c
  1748  00F182  D002               	goto	u400
  1749  00F184  8AC5               	bsf	4037,5,c	;volatile
  1750  00F186  D001               	goto	l1427
  1751  00F188                     u400:
  1752  00F188  9AC5               	bcf	4037,5,c	;volatile
  1753  00F18A                     l1427:
  1754                           
  1755                           ;I2C.c: 69: ACKEN = 1;
  1756  00F18A  88C5               	bsf	4037,4,c	;volatile
  1757                           
  1758                           ;I2C.c: 70: return temp;
  1759  00F18C  5003               	movf	I2C_Master_Read@temp,w,c
  1760  00F18E  0012               	return	
  1761  00F190                     __end_of_I2C_Master_Read:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           indf2	equ	0xFDF
  1769                           fsr2h	equ	0xFDA
  1770                           fsr2l	equ	0xFD9
  1771                           status	equ	0xFD8
  1772                           
  1773 ;; *************** function _I2C_Master_Wait *****************
  1774 ;; Defined at:
  1775 ;;		line 31 in file "I2C.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;		None
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2, status,0
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;Total ram usage:        1 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_I2C_Master_Start
  1799 ;;		_I2C_Master_Stop
  1800 ;;		_I2C_Master_Write
  1801 ;;		_I2C_Master_Read
  1802 ;;		_I2C_Master_RepeatedStart
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text6
  1807  00F0B2                     __ptext6:
  1808                           	opt stack 0
  1809  00F0B2                     _I2C_Master_Wait:
  1810                           	opt stack 28
  1811  00F0B2                     l216:
  1812  00F0B2  B4C7               	btfsc	4039,2,c	;volatile
  1813  00F0B4  D7FE               	goto	l216
  1814  00F0B6  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1815  00F0BA  0E1F               	movlw	31
  1816  00F0BC  1601               	andwf	??_I2C_Master_Wait,f,c
  1817  00F0BE  B4D8               	btfsc	status,2,c
  1818  00F0C0  0012               	return	
  1819  00F0C2  D7F7               	goto	l216
  1820  00F0C4                     __end_of_I2C_Master_Wait:
  1821                           	opt stack 0
  1822                           tblptru	equ	0xFF8
  1823                           prodh	equ	0xFF4
  1824                           prodl	equ	0xFF3
  1825                           postinc0	equ	0xFEE
  1826                           wreg	equ	0xFE8
  1827                           indf2	equ	0xFDF
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832 ;; *************** function _updateStepper *****************
  1833 ;; Defined at:
  1834 ;;		line 49 in file "motors.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1850 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;Total ram usage:        4 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_main
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text7
  1862  00F70C                     __ptext7:
  1863                           	opt stack 0
  1864  00F70C                     _updateStepper:
  1865                           	opt stack 30
  1866                           
  1867                           ;motors.c: 50: if (TMR0L>prev) {curr = TMR0L-prev;}
  1868                           
  1869                           ;incstack = 0
  1870  00F70C  50D6               	movf	4054,w,c	;volatile
  1871  00F70E  6E01               	movwf	??_updateStepper& (0+255),c
  1872  00F710  6A02               	clrf	(??_updateStepper+1)& (0+255),c
  1873  00F712  5001               	movf	??_updateStepper,w,c
  1874  00F714  5C3F               	subwf	_prev,w,c
  1875  00F716  5040               	movf	_prev+1,w,c
  1876  00F718  0A80               	xorlw	128
  1877  00F71A  6E03               	movwf	(??_updateStepper+2)& (0+255),c
  1878  00F71C  5002               	movf	??_updateStepper+1,w,c
  1879  00F71E  0A80               	xorlw	128
  1880  00F720  5803               	subwfb	(??_updateStepper+2)& (0+255),w,c
  1881  00F722  B0D8               	btfsc	status,0,c
  1882  00F724  D00E               	goto	l1515
  1883  00F726  C03F  F001         	movff	_prev,??_updateStepper
  1884  00F72A  C040  F002         	movff	_prev+1,??_updateStepper+1
  1885  00F72E  1E01               	comf	??_updateStepper,f,c
  1886  00F730  1E02               	comf	??_updateStepper+1,f,c
  1887  00F732  4A01               	infsnz	??_updateStepper,f,c
  1888  00F734  2A02               	incf	??_updateStepper+1,f,c
  1889  00F736  50D6               	movf	4054,w,c	;volatile
  1890  00F738  2401               	addwf	??_updateStepper,w,c
  1891  00F73A  6E3D               	movwf	_curr,c
  1892  00F73C  0E00               	movlw	0
  1893  00F73E  2002               	addwfc	??_updateStepper+1,w,c
  1894  00F740  D014               	goto	L1
  1895  00F742                     l1515:
  1896                           
  1897                           ;motors.c: 51: else {curr = TMR0L-prev + 255;}
  1898  00F742  C03F  F001         	movff	_prev,??_updateStepper
  1899  00F746  C040  F002         	movff	_prev+1,??_updateStepper+1
  1900  00F74A  1E01               	comf	??_updateStepper,f,c
  1901  00F74C  1E02               	comf	??_updateStepper+1,f,c
  1902  00F74E  4A01               	infsnz	??_updateStepper,f,c
  1903  00F750  2A02               	incf	??_updateStepper+1,f,c
  1904  00F752  50D6               	movf	4054,w,c	;volatile
  1905  00F754  6E03               	movwf	(??_updateStepper+2)& (0+255),c
  1906  00F756  6A04               	clrf	(??_updateStepper+3)& (0+255),c
  1907  00F758  5001               	movf	??_updateStepper,w,c
  1908  00F75A  2603               	addwf	??_updateStepper+2,f,c
  1909  00F75C  5002               	movf	??_updateStepper+1,w,c
  1910  00F75E  2204               	addwfc	??_updateStepper+3,f,c
  1911  00F760  0EFF               	movlw	255
  1912  00F762  2403               	addwf	??_updateStepper+2,w,c
  1913  00F764  6E3D               	movwf	_curr,c
  1914  00F766  0E00               	movlw	0
  1915  00F768  2004               	addwfc	??_updateStepper+3,w,c
  1916  00F76A                     L1:
  1917  00F76A  6E3E               	movwf	_curr+1,c
  1918                           
  1919                           ;motors.c: 53: if (curr > 50) {
  1920  00F76C  BE3E               	btfsc	_curr+1,7,c
  1921  00F76E  D00F               	goto	l1523
  1922  00F770  503E               	movf	_curr+1,w,c
  1923  00F772  E104               	bnz	u520
  1924  00F774  0E33               	movlw	51
  1925  00F776  5C3D               	subwf	_curr,w,c
  1926  00F778  A0D8               	btfss	status,0,c
  1927  00F77A  D009               	goto	l1523
  1928  00F77C                     u520:
  1929                           
  1930                           ;motors.c: 54: s++;
  1931  00F77C  4A41               	infsnz	_s,f,c
  1932  00F77E  2A42               	incf	_s+1,f,c
  1933                           
  1934                           ;motors.c: 55: curr = 0;
  1935  00F780  0E00               	movlw	0
  1936  00F782  6E3E               	movwf	_curr+1,c
  1937  00F784  0E00               	movlw	0
  1938  00F786  6E3D               	movwf	_curr,c
  1939                           
  1940                           ;motors.c: 56: prev = TMR0L;
  1941  00F788  CFD6 F03F          	movff	4054,_prev	;volatile
  1942  00F78C  6A40               	clrf	_prev+1,c
  1943  00F78E                     l1523:
  1944                           
  1945                           ;motors.c: 57: }
  1946                           ;motors.c: 58: if (s>4) {s=1;}
  1947  00F78E  BE42               	btfsc	_s+1,7,c
  1948  00F790  0012               	return	
  1949  00F792  5042               	movf	_s+1,w,c
  1950  00F794  E104               	bnz	u530
  1951  00F796  0E05               	movlw	5
  1952  00F798  5C41               	subwf	_s,w,c
  1953  00F79A  A0D8               	btfss	status,0,c
  1954  00F79C  0012               	return	
  1955  00F79E                     u530:
  1956  00F79E  0E00               	movlw	0
  1957  00F7A0  6E42               	movwf	_s+1,c
  1958  00F7A2  0E01               	movlw	1
  1959  00F7A4  6E41               	movwf	_s,c
  1960  00F7A6  0012               	return	
  1961  00F7A8                     __end_of_updateStepper:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           postinc0	equ	0xFEE
  1967                           wreg	equ	0xFE8
  1968                           indf2	equ	0xFDF
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function _updateEEPROM *****************
  1974 ;; Defined at:
  1975 ;;		line 72 in file "interface.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  time            2   12[COMRAM] int 
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2, status,0, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1989 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;Total ram usage:        2 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    1
  1996 ;; This function calls:
  1997 ;;		_eepromRead
  1998 ;;		_eepromWrite
  1999 ;; This function is called by:
  2000 ;;		_main
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text8
  2005  00F1B8                     __ptext8:
  2006                           	opt stack 0
  2007  00F1B8                     _updateEEPROM:
  2008                           	opt stack 29
  2009                           
  2010                           ;interface.c: 73: eepromWrite(40, eepromRead(30));
  2011                           
  2012                           ;incstack = 0
  2013  00F1B8  0E1E               	movlw	30
  2014  00F1BA  ECC8  F078         	call	_eepromRead
  2015  00F1BE  6E04               	movwf	eepromWrite@data,c
  2016  00F1C0  0E28               	movlw	40
  2017  00F1C2  ECF7  F078         	call	_eepromWrite
  2018                           
  2019                           ;interface.c: 74: eepromWrite(30, eepromRead(20));
  2020  00F1C6  0E14               	movlw	20
  2021  00F1C8  ECC8  F078         	call	_eepromRead
  2022  00F1CC  6E04               	movwf	eepromWrite@data,c
  2023  00F1CE  0E1E               	movlw	30
  2024  00F1D0  ECF7  F078         	call	_eepromWrite
  2025                           
  2026                           ;interface.c: 75: eepromWrite(20, eepromRead(10));
  2027  00F1D4  0E0A               	movlw	10
  2028  00F1D6  ECC8  F078         	call	_eepromRead
  2029  00F1DA  6E04               	movwf	eepromWrite@data,c
  2030  00F1DC  0E14               	movlw	20
  2031  00F1DE  ECF7  F078         	call	_eepromWrite
  2032                           
  2033                           ;interface.c: 76: eepromWrite(10, time);
  2034  00F1E2  C00D  F004         	movff	updateEEPROM@time,eepromWrite@data
  2035  00F1E6  0E0A               	movlw	10
  2036  00F1E8  ECF7  F078         	call	_eepromWrite
  2037  00F1EC  0012               	return		;funcret
  2038  00F1EE                     __end_of_updateEEPROM:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           prodh	equ	0xFF4
  2042                           prodl	equ	0xFF3
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           indf2	equ	0xFDF
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _eepromWrite *****************
  2051 ;; Defined at:
  2052 ;;		line 46 in file "interface.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  address         1    wreg     char 
  2055 ;;  data            1    3[COMRAM] char 
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;  address         1    6[COMRAM] char 
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, status,2, status,0
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:        4 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_updateEEPROM
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text9
  2081  00F1EE                     __ptext9:
  2082                           	opt stack 0
  2083  00F1EE                     _eepromWrite:
  2084                           	opt stack 29
  2085                           
  2086                           ;incstack = 0
  2087                           ;eepromWrite@address stored from wreg
  2088  00F1EE  6E07               	movwf	eepromWrite@address,c
  2089                           
  2090                           ;interface.c: 48: EEADRH = (signed char)(address >> 8);
  2091  00F1F0  C007  F005         	movff	eepromWrite@address,??_eepromWrite
  2092  00F1F4  0E08               	movlw	8
  2093  00F1F6  6E06               	movwf	(??_eepromWrite+1)& (0+255),c
  2094  00F1F8                     u1435:
  2095  00F1F8  3405               	rlcf	??_eepromWrite,w,c
  2096  00F1FA  3205               	rrcf	??_eepromWrite,f,c
  2097  00F1FC  2E06               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  2098  00F1FE  D7FC               	goto	u1435
  2099  00F200  5005               	movf	??_eepromWrite,w,c
  2100  00F202  6EAA               	movwf	4010,c	;volatile
  2101                           
  2102                           ;interface.c: 49: EEADR = (signed char)address;
  2103  00F204  C007  FFA9         	movff	eepromWrite@address,4009	;volatile
  2104                           
  2105                           ;interface.c: 51: EEDATA = data;
  2106  00F208  C004  FFA8         	movff	eepromWrite@data,4008	;volatile
  2107                           
  2108                           ;interface.c: 52: EECON1bits.EEPGD = 0;
  2109  00F20C  9EA6               	bcf	4006,7,c	;volatile
  2110                           
  2111                           ;interface.c: 53: EECON1bits.CFGS = 0;
  2112  00F20E  9CA6               	bcf	4006,6,c	;volatile
  2113                           
  2114                           ;interface.c: 54: EECON1bits.WREN = 1;
  2115  00F210  84A6               	bsf	4006,2,c	;volatile
  2116                           
  2117                           ;interface.c: 58: EECON2 = 0x55;
  2118  00F212  0E55               	movlw	85
  2119  00F214  6EA7               	movwf	4007,c	;volatile
  2120                           
  2121                           ;interface.c: 59: EECON2 = 0xAA;
  2122  00F216  0EAA               	movlw	170
  2123  00F218  6EA7               	movwf	4007,c	;volatile
  2124                           
  2125                           ;interface.c: 60: EECON1bits.WR = 1;
  2126  00F21A  82A6               	bsf	4006,1,c	;volatile
  2127  00F21C                     l433:
  2128  00F21C  A8A1               	btfss	4001,4,c	;volatile
  2129  00F21E  D7FE               	goto	l433
  2130                           
  2131                           ;interface.c: 66: }
  2132                           ;interface.c: 68: PIR2bits.EEIF = 0;
  2133  00F220  98A1               	bcf	4001,4,c	;volatile
  2134                           
  2135                           ;interface.c: 69: EECON1bits.WREN = 0;
  2136  00F222  94A6               	bcf	4006,2,c	;volatile
  2137  00F224  0012               	return		;funcret
  2138  00F226                     __end_of_eepromWrite:
  2139                           	opt stack 0
  2140                           tblptru	equ	0xFF8
  2141                           prodh	equ	0xFF4
  2142                           prodl	equ	0xFF3
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           indf2	equ	0xFDF
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _timePassed *****************
  2151 ;; Defined at:
  2152 ;;		line 19 in file "logic.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  start           2    6[COMRAM] int 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  2    6[COMRAM] int 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2169 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2170 ;;Total ram usage:        6 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    1
  2173 ;; This function calls:
  2174 ;;		___wmul
  2175 ;; This function is called by:
  2176 ;;		_main
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text10
  2181  00F402                     __ptext10:
  2182                           	opt stack 0
  2183  00F402                     _timePassed:
  2184                           	opt stack 29
  2185                           
  2186                           ;logic.c: 21: else{return time[0] + 60*time[1] + 3600*time[2] - start;}
  2187                           
  2188                           ;logic.c: 20: if(time[0] + 60*time[1] + 3600*time[2] >= 86400){return time[0] + 60*time[
      +                          1] + 3600*time[2] + 86400 - start;}
  2189                           
  2190                           ;incstack = 0
  2191  00F402  C007  F009         	movff	timePassed@start,??_timePassed
  2192  00F406  C008  F00A         	movff	timePassed@start+1,??_timePassed+1
  2193  00F40A  1E09               	comf	??_timePassed,f,c
  2194  00F40C  1E0A               	comf	??_timePassed+1,f,c
  2195  00F40E  4A09               	infsnz	??_timePassed,f,c
  2196  00F410  2A0A               	incf	??_timePassed+1,f,c
  2197  00F412  C038  F001         	movff	_time+2,___wmul@multiplier
  2198  00F416  6A02               	clrf	___wmul@multiplier+1,c
  2199  00F418  0E0E               	movlw	14
  2200  00F41A  6E04               	movwf	___wmul@multiplicand+1,c
  2201  00F41C  0E10               	movlw	16
  2202  00F41E  6E03               	movwf	___wmul@multiplicand,c
  2203  00F420  ECA2  F078         	call	___wmul	;wreg free
  2204  00F424  5037               	movf	_time+1,w,c
  2205  00F426  0D3C               	mullw	60
  2206  00F428  5036               	movf	_time,w,c
  2207  00F42A  6E0B               	movwf	(??_timePassed+2)& (0+255),c
  2208  00F42C  6A0C               	clrf	(??_timePassed+3)& (0+255),c
  2209  00F42E  50F3               	movf	prodl,w,c
  2210  00F430  260B               	addwf	??_timePassed+2,f,c
  2211  00F432  50F4               	movf	prodh,w,c
  2212  00F434  220C               	addwfc	??_timePassed+3,f,c
  2213  00F436  5001               	movf	?___wmul,w,c
  2214  00F438  260B               	addwf	??_timePassed+2,f,c
  2215  00F43A  5002               	movf	?___wmul+1,w,c
  2216  00F43C  220C               	addwfc	??_timePassed+3,f,c
  2217  00F43E  5009               	movf	??_timePassed,w,c
  2218  00F440  240B               	addwf	??_timePassed+2,w,c
  2219  00F442  6E07               	movwf	?_timePassed,c
  2220  00F444  500A               	movf	??_timePassed+1,w,c
  2221  00F446  200C               	addwfc	??_timePassed+3,w,c
  2222  00F448  6E08               	movwf	?_timePassed+1,c
  2223  00F44A  0012               	return	
  2224  00F44C                     __end_of_timePassed:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           indf2	equ	0xFDF
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           
  2236 ;; *************** function _readADC *****************
  2237 ;; Defined at:
  2238 ;;		line 17 in file "main.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  channel         1    wreg     unsigned char 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  channel         1    1[COMRAM] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;Total ram usage:        2 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text11
  2266  00F120                     __ptext11:
  2267                           	opt stack 0
  2268  00F120                     _readADC:
  2269                           	opt stack 30
  2270                           
  2271                           ;incstack = 0
  2272                           ;readADC@channel stored from wreg
  2273  00F120  6E02               	movwf	readADC@channel,c
  2274                           
  2275                           ;main.c: 19: ADCON0 = ((channel <<2));
  2276  00F122  4402               	rlncf	readADC@channel,w,c
  2277  00F124  46E8               	rlncf	wreg,f,c
  2278  00F126  0BFC               	andlw	252
  2279  00F128  6EC2               	movwf	4034,c	;volatile
  2280                           
  2281                           ;main.c: 20: ADCON0bits.ADON = 1;
  2282  00F12A  80C2               	bsf	4034,0,c	;volatile
  2283                           
  2284                           ;main.c: 21: ADCON0bits.GO = 1;
  2285  00F12C  82C2               	bsf	4034,1,c	;volatile
  2286                           
  2287                           ;main.c: 22: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0))
      +                          );}
  2288  00F12E  D007               	goto	l1473
  2289  00F130                     l1471:
  2290  00F130  0E34               	movlw	52
  2291  00F132  6E01               	movwf	??_readADC& (0+255),c
  2292  00F134  0EF2               	movlw	242
  2293  00F136                     u1737:
  2294  00F136  2EE8               	decfsz	wreg,f,c
  2295  00F138  D7FE               	bra	u1737
  2296  00F13A  2E01               	decfsz	??_readADC& (0+255),f,c
  2297  00F13C  D7FC               	bra	u1737
  2298  00F13E                     l1473:
  2299  00F13E  A2C2               	btfss	4034,1,c	;volatile
  2300  00F140  0012               	return	
  2301  00F142  D7F6               	goto	l1471
  2302  00F144                     __end_of_readADC:
  2303                           	opt stack 0
  2304                           tblptru	equ	0xFF8
  2305                           prodh	equ	0xFF4
  2306                           prodl	equ	0xFF3
  2307                           postinc0	equ	0xFEE
  2308                           wreg	equ	0xFE8
  2309                           indf2	equ	0xFDF
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _keyinterrupt *****************
  2315 ;; Defined at:
  2316 ;;		line 38 in file "main.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;		None
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;		None
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  1    wreg      void 
  2323 ;; Registers used:
  2324 ;;		wreg, status,2, status,0
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;Total ram usage:        0 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text12
  2344  00F0D8                     __ptext12:
  2345                           	opt stack 0
  2346  00F0D8                     _keyinterrupt:
  2347                           	opt stack 30
  2348                           
  2349                           ;main.c: 39: if(PORTBbits.RB1 == 1){
  2350                           
  2351                           ;incstack = 0
  2352  00F0D8  A281               	btfss	3969,1,c	;volatile
  2353  00F0DA  D006               	goto	l122
  2354                           
  2355                           ;main.c: 40: keypress = (PORTB & 0xF0)>>4;
  2356  00F0DC  3881               	swapf	3969,w,c	;volatile
  2357  00F0DE  0B0F               	andlw	15
  2358  00F0E0  0B0F               	andlw	15
  2359  00F0E2  6E43               	movwf	_keypress,c	;volatile
  2360  00F0E4                     l123:
  2361  00F0E4  B281               	btfsc	3969,1,c	;volatile
  2362  00F0E6  D7FE               	goto	l123
  2363  00F0E8                     l122:
  2364                           
  2365                           ;main.c: 46: }
  2366                           ;main.c: 52: }
  2367                           ;main.c: 53: __nop();
  2368  00F0E8  F000               	nop	
  2369  00F0EA  0012               	return		;funcret
  2370  00F0EC                     __end_of_keyinterrupt:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           indf2	equ	0xFDF
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _initialize *****************
  2383 ;; Defined at:
  2384 ;;		line 57 in file "main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    3
  2405 ;; This function calls:
  2406 ;;		_I2C_Master_Init
  2407 ;;		_initLCD
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text13
  2414  00F616                     __ptext13:
  2415                           	opt stack 0
  2416  00F616                     _initialize:
  2417                           	opt stack 27
  2418                           
  2419                           ;main.c: 58: OSCCON = 0xF2;
  2420                           
  2421                           ;incstack = 0
  2422  00F616  0EF2               	movlw	242
  2423  00F618  6ED3               	movwf	4051,c	;volatile
  2424                           
  2425                           ;main.c: 59: OSCTUNEbits.PLLEN = 1;
  2426  00F61A  8C9B               	bsf	3995,6,c	;volatile
  2427                           
  2428                           ;main.c: 61: TRISA = 0b11001111;
  2429  00F61C  0ECF               	movlw	207
  2430  00F61E  6E92               	movwf	3986,c	;volatile
  2431                           
  2432                           ;main.c: 62: TRISB = 0b11110010;
  2433  00F620  0EF2               	movlw	242
  2434  00F622  6E93               	movwf	3987,c	;volatile
  2435                           
  2436                           ;main.c: 63: TRISC = 0b00011000;
  2437  00F624  0E18               	movlw	24
  2438  00F626  6E94               	movwf	3988,c	;volatile
  2439                           
  2440                           ;main.c: 65: TRISD = 0x00;
  2441  00F628  0E00               	movlw	0
  2442  00F62A  6E95               	movwf	3989,c	;volatile
  2443                           
  2444                           ;main.c: 66: TRISE = 0b00000001;
  2445  00F62C  0E01               	movlw	1
  2446  00F62E  6E96               	movwf	3990,c	;volatile
  2447                           
  2448                           ;main.c: 68: PR2 = 0xff;
  2449  00F630  68CB               	setf	4043,c	;volatile
  2450                           
  2451                           ;main.c: 69: CCP1CON = 0b00001100;
  2452  00F632  0E0C               	movlw	12
  2453  00F634  6EBD               	movwf	4029,c	;volatile
  2454                           
  2455                           ;main.c: 70: CCPR1L = 0x00;
  2456  00F636  0E00               	movlw	0
  2457  00F638  6EBE               	movwf	4030,c	;volatile
  2458                           
  2459                           ;main.c: 71: CCP2CON = 0b00001100;
  2460  00F63A  0E0C               	movlw	12
  2461  00F63C  6EBA               	movwf	4026,c	;volatile
  2462                           
  2463                           ;main.c: 72: CCPR2L = 0x00;
  2464  00F63E  0E00               	movlw	0
  2465  00F640  6EBB               	movwf	4027,c	;volatile
  2466                           
  2467                           ;main.c: 73: T2CON = 0b00000101;
  2468  00F642  0E05               	movlw	5
  2469  00F644  6ECA               	movwf	4042,c	;volatile
  2470                           
  2471                           ;main.c: 75: LATA = 0x00;
  2472  00F646  0E00               	movlw	0
  2473  00F648  6E89               	movwf	3977,c	;volatile
  2474                           
  2475                           ;main.c: 76: LATB = 0x00;
  2476  00F64A  0E00               	movlw	0
  2477  00F64C  6E8A               	movwf	3978,c	;volatile
  2478                           
  2479                           ;main.c: 77: LATC = 0x00;
  2480  00F64E  0E00               	movlw	0
  2481  00F650  6E8B               	movwf	3979,c	;volatile
  2482                           
  2483                           ;main.c: 78: LATD = 0x00;
  2484  00F652  0E00               	movlw	0
  2485  00F654  6E8C               	movwf	3980,c	;volatile
  2486                           
  2487                           ;main.c: 79: LATE = 0x00;
  2488  00F656  0E00               	movlw	0
  2489  00F658  6E8D               	movwf	3981,c	;volatile
  2490                           
  2491                           ;main.c: 81: initLCD();
  2492  00F65A  EC94  F079         	call	_initLCD	;wreg free
  2493                           
  2494                           ;main.c: 83: I2C_Master_Init(10000);
  2495  00F65E  0E10               	movlw	16
  2496  00F660  6E0E               	movwf	I2C_Master_Init@c,c
  2497  00F662  0E27               	movlw	39
  2498  00F664  6E0F               	movwf	I2C_Master_Init@c+1,c
  2499  00F666  0E00               	movlw	0
  2500  00F668  6E10               	movwf	I2C_Master_Init@c+2,c
  2501  00F66A  0E00               	movlw	0
  2502  00F66C  6E11               	movwf	I2C_Master_Init@c+3,c
  2503  00F66E  EC7A  F07A         	call	_I2C_Master_Init	;wreg free
  2504                           
  2505                           ;main.c: 86: nRBPU = 0;
  2506  00F672  9EF1               	bcf	intcon2,7,c	;volatile
  2507                           
  2508                           ;main.c: 87: ADCON0 = 00000001;
  2509  00F674  0E01               	movlw	1
  2510  00F676  6EC2               	movwf	4034,c	;volatile
  2511                           
  2512                           ;main.c: 88: ADCON1 = 0b00001001;
  2513  00F678  0E09               	movlw	9
  2514  00F67A  6EC1               	movwf	4033,c	;volatile
  2515                           
  2516                           ;main.c: 89: CVRCON = 0x00;
  2517  00F67C  0E00               	movlw	0
  2518  00F67E  6EB5               	movwf	4021,c	;volatile
  2519                           
  2520                           ;main.c: 90: CMCONbits.CIS = 0;
  2521  00F680  96B4               	bcf	4020,3,c	;volatile
  2522                           
  2523                           ;main.c: 91: ADFM = 1;
  2524  00F682  8EC0               	bsf	4032,7,c	;volatile
  2525                           
  2526                           ;main.c: 93: T0CON = 11010010;
  2527  00F684  0EDA               	movlw	218
  2528  00F686  6ED5               	movwf	4053,c	;volatile
  2529  00F688  0012               	return		;funcret
  2530  00F68A                     __end_of_initialize:
  2531                           	opt stack 0
  2532                           tblptru	equ	0xFF8
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon2	equ	0xFF1
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           indf2	equ	0xFDF
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _initLCD *****************
  2544 ;; Defined at:
  2545 ;;		line 11 in file "lcd.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;Total ram usage:        1 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    2
  2566 ;; This function calls:
  2567 ;;		_lcdInst
  2568 ;; This function is called by:
  2569 ;;		_initialize
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text14
  2574  00F328                     __ptext14:
  2575                           	opt stack 0
  2576  00F328                     _initLCD:
  2577                           	opt stack 27
  2578                           
  2579                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  2580                           
  2581                           ;incstack = 0
  2582  00F328  0E9C               	movlw	156
  2583  00F32A  6E04               	movwf	??_initLCD& (0+255),c
  2584  00F32C  0ED7               	movlw	215
  2585  00F32E                     u1747:
  2586  00F32E  2EE8               	decfsz	wreg,f,c
  2587  00F330  D7FE               	bra	u1747
  2588  00F332  2E04               	decfsz	??_initLCD& (0+255),f,c
  2589  00F334  D7FC               	bra	u1747
  2590  00F336  F000               	nop	
  2591                           
  2592                           ;lcd.c: 13: lcdInst(0b00110011);
  2593  00F338  0E33               	movlw	51
  2594  00F33A  EC4D  F078         	call	_lcdInst
  2595                           
  2596                           ;lcd.c: 14: lcdInst(0b00110010);
  2597  00F33E  0E32               	movlw	50
  2598  00F340  EC4D  F078         	call	_lcdInst
  2599                           
  2600                           ;lcd.c: 15: lcdInst(0b00101000);
  2601  00F344  0E28               	movlw	40
  2602  00F346  EC4D  F078         	call	_lcdInst
  2603                           
  2604                           ;lcd.c: 16: lcdInst(0b00001111);
  2605  00F34A  0E0F               	movlw	15
  2606  00F34C  EC4D  F078         	call	_lcdInst
  2607                           
  2608                           ;lcd.c: 17: lcdInst(0b00000110);
  2609  00F350  0E06               	movlw	6
  2610  00F352  EC4D  F078         	call	_lcdInst
  2611                           
  2612                           ;lcd.c: 18: lcdInst(0b00000001);
  2613  00F356  0E01               	movlw	1
  2614  00F358  EC4D  F078         	call	_lcdInst
  2615                           
  2616                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  2617  00F35C  0E9C               	movlw	156
  2618  00F35E  6E04               	movwf	??_initLCD& (0+255),c
  2619  00F360  0ED7               	movlw	215
  2620  00F362                     u1757:
  2621  00F362  2EE8               	decfsz	wreg,f,c
  2622  00F364  D7FE               	bra	u1757
  2623  00F366  2E04               	decfsz	??_initLCD& (0+255),f,c
  2624  00F368  D7FC               	bra	u1757
  2625  00F36A  F000               	nop	
  2626  00F36C  0012               	return		;funcret
  2627  00F36E                     __end_of_initLCD:
  2628                           	opt stack 0
  2629                           tblptru	equ	0xFF8
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           intcon2	equ	0xFF1
  2633                           postinc0	equ	0xFEE
  2634                           wreg	equ	0xFE8
  2635                           indf2	equ	0xFDF
  2636                           fsr2h	equ	0xFDA
  2637                           fsr2l	equ	0xFD9
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function _I2C_Master_Init *****************
  2641 ;; Defined at:
  2642 ;;		line 20 in file "I2C.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;  c               4   13[COMRAM] const unsigned long 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, status,2, status,0, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;Total ram usage:        8 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    1
  2663 ;; This function calls:
  2664 ;;		___lldiv
  2665 ;; This function is called by:
  2666 ;;		_initialize
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text15
  2671  00F4F4                     __ptext15:
  2672                           	opt stack 0
  2673  00F4F4                     _I2C_Master_Init:
  2674                           	opt stack 28
  2675                           
  2676                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  2677                           
  2678                           ;incstack = 0
  2679  00F4F4  0E00               	movlw	0
  2680  00F4F6  6EC7               	movwf	4039,c	;volatile
  2681                           
  2682                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  2683  00F4F8  0E28               	movlw	40
  2684  00F4FA  6EC6               	movwf	4038,c	;volatile
  2685                           
  2686                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  2687  00F4FC  0E00               	movlw	0
  2688  00F4FE  6EC5               	movwf	4037,c	;volatile
  2689                           
  2690                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  2691  00F500  0E00               	movlw	0
  2692  00F502  6E01               	movwf	___lldiv@dividend,c
  2693  00F504  0E48               	movlw	72
  2694  00F506  6E02               	movwf	___lldiv@dividend+1,c
  2695  00F508  0EE8               	movlw	232
  2696  00F50A  6E03               	movwf	___lldiv@dividend+2,c
  2697  00F50C  0E01               	movlw	1
  2698  00F50E  6E04               	movwf	___lldiv@dividend+3,c
  2699  00F510  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2700  00F514  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2701  00F518  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2702  00F51C  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2703  00F520  0E02               	movlw	2
  2704  00F522                     u1195:
  2705  00F522  90D8               	bcf	status,0,c
  2706  00F524  3612               	rlcf	??_I2C_Master_Init,f,c
  2707  00F526  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2708  00F528  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2709  00F52A  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2710  00F52C  2EE8               	decfsz	wreg,f,c
  2711  00F52E  D7F9               	goto	u1195
  2712  00F530  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2713  00F534  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2714  00F538  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2715  00F53C  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2716  00F540  EC45  F07B         	call	___lldiv	;wreg free
  2717  00F544  0401               	decf	?___lldiv,w,c
  2718  00F546  6EC8               	movwf	4040,c	;volatile
  2719                           
  2720                           ;I2C.c: 27: TRISC3 = 1;
  2721  00F548  8694               	bsf	3988,3,c	;volatile
  2722                           
  2723                           ;I2C.c: 28: TRISC4 = 1;
  2724  00F54A  8894               	bsf	3988,4,c	;volatile
  2725  00F54C  0012               	return		;funcret
  2726  00F54E                     __end_of_I2C_Master_Init:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon2	equ	0xFF1
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           indf2	equ	0xFDF
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8
  2738                           
  2739 ;; *************** function ___lldiv *****************
  2740 ;; Defined at:
  2741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  dividend        4    0[COMRAM] unsigned long 
  2744 ;;  divisor         4    4[COMRAM] unsigned long 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  quotient        4    8[COMRAM] unsigned long 
  2747 ;;  counter         1   12[COMRAM] unsigned char 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  4    0[COMRAM] unsigned long 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2, status,0
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:       13 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_I2C_Master_Init
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text16
  2771  00F68A                     __ptext16:
  2772                           	opt stack 0
  2773  00F68A                     ___lldiv:
  2774                           	opt stack 28
  2775                           
  2776                           ;incstack = 0
  2777  00F68A  0E00               	movlw	0
  2778  00F68C  6E09               	movwf	___lldiv@quotient,c
  2779  00F68E  0E00               	movlw	0
  2780  00F690  6E0A               	movwf	___lldiv@quotient+1,c
  2781  00F692  0E00               	movlw	0
  2782  00F694  6E0B               	movwf	___lldiv@quotient+2,c
  2783  00F696  0E00               	movlw	0
  2784  00F698  6E0C               	movwf	___lldiv@quotient+3,c
  2785  00F69A  5005               	movf	___lldiv@divisor,w,c
  2786  00F69C  1006               	iorwf	___lldiv@divisor+1,w,c
  2787  00F69E  1007               	iorwf	___lldiv@divisor+2,w,c
  2788  00F6A0  1008               	iorwf	___lldiv@divisor+3,w,c
  2789  00F6A2  B4D8               	btfsc	status,2,c
  2790  00F6A4  D02A               	goto	l879
  2791  00F6A6  0E01               	movlw	1
  2792  00F6A8  6E0D               	movwf	___lldiv@counter,c
  2793  00F6AA  D006               	goto	l1971
  2794  00F6AC                     l1969:
  2795  00F6AC  90D8               	bcf	status,0,c
  2796  00F6AE  3605               	rlcf	___lldiv@divisor,f,c
  2797  00F6B0  3606               	rlcf	___lldiv@divisor+1,f,c
  2798  00F6B2  3607               	rlcf	___lldiv@divisor+2,f,c
  2799  00F6B4  3608               	rlcf	___lldiv@divisor+3,f,c
  2800  00F6B6  2A0D               	incf	___lldiv@counter,f,c
  2801  00F6B8                     l1971:
  2802  00F6B8  AE08               	btfss	___lldiv@divisor+3,7,c
  2803  00F6BA  D7F8               	goto	l1969
  2804  00F6BC                     l1973:
  2805  00F6BC  90D8               	bcf	status,0,c
  2806  00F6BE  3609               	rlcf	___lldiv@quotient,f,c
  2807  00F6C0  360A               	rlcf	___lldiv@quotient+1,f,c
  2808  00F6C2  360B               	rlcf	___lldiv@quotient+2,f,c
  2809  00F6C4  360C               	rlcf	___lldiv@quotient+3,f,c
  2810  00F6C6  5005               	movf	___lldiv@divisor,w,c
  2811  00F6C8  5C01               	subwf	___lldiv@dividend,w,c
  2812  00F6CA  5006               	movf	___lldiv@divisor+1,w,c
  2813  00F6CC  5802               	subwfb	___lldiv@dividend+1,w,c
  2814  00F6CE  5007               	movf	___lldiv@divisor+2,w,c
  2815  00F6D0  5803               	subwfb	___lldiv@dividend+2,w,c
  2816  00F6D2  5008               	movf	___lldiv@divisor+3,w,c
  2817  00F6D4  5804               	subwfb	___lldiv@dividend+3,w,c
  2818  00F6D6  A0D8               	btfss	status,0,c
  2819  00F6D8  D009               	goto	l1981
  2820  00F6DA  5005               	movf	___lldiv@divisor,w,c
  2821  00F6DC  5E01               	subwf	___lldiv@dividend,f,c
  2822  00F6DE  5006               	movf	___lldiv@divisor+1,w,c
  2823  00F6E0  5A02               	subwfb	___lldiv@dividend+1,f,c
  2824  00F6E2  5007               	movf	___lldiv@divisor+2,w,c
  2825  00F6E4  5A03               	subwfb	___lldiv@dividend+2,f,c
  2826  00F6E6  5008               	movf	___lldiv@divisor+3,w,c
  2827  00F6E8  5A04               	subwfb	___lldiv@dividend+3,f,c
  2828  00F6EA  8009               	bsf	___lldiv@quotient,0,c
  2829  00F6EC                     l1981:
  2830  00F6EC  90D8               	bcf	status,0,c
  2831  00F6EE  3208               	rrcf	___lldiv@divisor+3,f,c
  2832  00F6F0  3207               	rrcf	___lldiv@divisor+2,f,c
  2833  00F6F2  3206               	rrcf	___lldiv@divisor+1,f,c
  2834  00F6F4  3205               	rrcf	___lldiv@divisor,f,c
  2835  00F6F6  2E0D               	decfsz	___lldiv@counter,f,c
  2836  00F6F8  D7E1               	goto	l1973
  2837  00F6FA                     l879:
  2838  00F6FA  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2839  00F6FE  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2840  00F702  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2841  00F706  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2842  00F70A  0012               	return		;funcret
  2843  00F70C                     __end_of___lldiv:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           prodh	equ	0xFF4
  2847                           prodl	equ	0xFF3
  2848                           intcon2	equ	0xFF1
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           indf2	equ	0xFDF
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _homescreen *****************
  2857 ;; Defined at:
  2858 ;;		line 3 in file "interface.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;		None
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;		None
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        0 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    3
  2879 ;; This function calls:
  2880 ;;		_lcdInst
  2881 ;;		_printf
  2882 ;; This function is called by:
  2883 ;;		_main
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text17
  2888  00F54E                     __ptext17:
  2889                           	opt stack 0
  2890  00F54E                     _homescreen:
  2891                           	opt stack 27
  2892                           
  2893                           ;interface.c: 4: lcdInst(0b10000000);;
  2894                           
  2895                           ;incstack = 0
  2896  00F54E  0E80               	movlw	128
  2897  00F550  EC4D  F078         	call	_lcdInst
  2898                           
  2899                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  2900  00F554  0E2F               	movlw	low STR_10
  2901  00F556  6E0D               	movwf	printf@f,c
  2902  00F558  0EFF               	movlw	high STR_10
  2903  00F55A  6E0E               	movwf	printf@f+1,c
  2904  00F55C  C03C  F00F         	movff	_time+6,?_printf+2
  2905  00F560  6A10               	clrf	?_printf+3,c
  2906  00F562  C03B  F011         	movff	_time+5,?_printf+4
  2907  00F566  6A12               	clrf	?_printf+5,c
  2908  00F568  C03A  F013         	movff	_time+4,?_printf+6
  2909  00F56C  6A14               	clrf	?_printf+7,c
  2910  00F56E  EC37  F07C         	call	_printf	;wreg free
  2911                           
  2912                           ;interface.c: 6: printf("3:Start");
  2913  00F572  0EF3               	movlw	low STR_11
  2914  00F574  6E0D               	movwf	printf@f,c
  2915  00F576  0EFF               	movlw	high STR_11
  2916  00F578  6E0E               	movwf	printf@f+1,c
  2917  00F57A  EC37  F07C         	call	_printf	;wreg free
  2918                           
  2919                           ;interface.c: 7: lcdInst(0b11000000);;
  2920  00F57E  0EC0               	movlw	192
  2921  00F580  EC4D  F078         	call	_lcdInst
  2922                           
  2923                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2924  00F584  0E8E               	movlw	low STR_12
  2925  00F586  6E0D               	movwf	printf@f,c
  2926  00F588  0EFF               	movlw	high STR_12
  2927  00F58A  6E0E               	movwf	printf@f+1,c
  2928  00F58C  C038  F00F         	movff	_time+2,?_printf+2
  2929  00F590  6A10               	clrf	?_printf+3,c
  2930  00F592  C037  F011         	movff	_time+1,?_printf+4
  2931  00F596  6A12               	clrf	?_printf+5,c
  2932  00F598  C036  F013         	movff	_time,?_printf+6
  2933  00F59C  6A14               	clrf	?_printf+7,c
  2934  00F59E  EC37  F07C         	call	_printf	;wreg free
  2935                           
  2936                           ;interface.c: 9: printf(" 2:Logs");
  2937  00F5A2  0EEB               	movlw	low STR_13
  2938  00F5A4  6E0D               	movwf	printf@f,c
  2939  00F5A6  0EFF               	movlw	high STR_13
  2940  00F5A8  6E0E               	movwf	printf@f+1,c
  2941  00F5AA  EC37  F07C         	call	_printf	;wreg free
  2942  00F5AE  0012               	return		;funcret
  2943  00F5B0                     __end_of_homescreen:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon2	equ	0xFF1
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           indf2	equ	0xFDF
  2952                           fsr2h	equ	0xFDA
  2953                           fsr2l	equ	0xFD9
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _displayLogs *****************
  2957 ;; Defined at:
  2958 ;;		line 12 in file "interface.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;		None
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;		None
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;Total ram usage:        1 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    3
  2979 ;; This function calls:
  2980 ;;		_eepromRead
  2981 ;;		_keycheck
  2982 ;;		_lcdInst
  2983 ;;		_printf
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text18
  2990  00F7A8                     __ptext18:
  2991                           	opt stack 0
  2992  00F7A8                     _displayLogs:
  2993                           	opt stack 27
  2994                           
  2995                           ;interface.c: 13: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2996                           
  2997                           ;incstack = 0
  2998  00F7A8  0E01               	movlw	1
  2999  00F7AA  EC4D  F078         	call	_lcdInst
  3000  00F7AE  0E68               	movlw	104
  3001  00F7B0  6E23               	movwf	??_displayLogs& (0+255),c
  3002  00F7B2  0EE4               	movlw	228
  3003  00F7B4                     u1767:
  3004  00F7B4  2EE8               	decfsz	wreg,f,c
  3005  00F7B6  D7FE               	bra	u1767
  3006  00F7B8  2E23               	decfsz	??_displayLogs& (0+255),f,c
  3007  00F7BA  D7FC               	bra	u1767
  3008  00F7BC  D000               	nop2	
  3009                           
  3010                           ;interface.c: 14: printf("Run#1    A:Next");
  3011  00F7BE  0E4F               	movlw	low STR_14
  3012  00F7C0  6E0D               	movwf	printf@f,c
  3013  00F7C2  0EFF               	movlw	high STR_14
  3014  00F7C4  6E0E               	movwf	printf@f+1,c
  3015  00F7C6  EC37  F07C         	call	_printf	;wreg free
  3016                           
  3017                           ;interface.c: 15: lcdInst(0b11000000);;
  3018  00F7CA  0EC0               	movlw	192
  3019  00F7CC  EC4D  F078         	call	_lcdInst
  3020                           
  3021                           ;interface.c: 16: printf("# of cans: %d", eepromRead(10));
  3022  00F7D0  0E9D               	movlw	low STR_15
  3023  00F7D2  6E0D               	movwf	printf@f,c
  3024  00F7D4  0EFF               	movlw	high STR_15
  3025  00F7D6  6E0E               	movwf	printf@f+1,c
  3026  00F7D8  0E0A               	movlw	10
  3027  00F7DA  ECC8  F078         	call	_eepromRead
  3028  00F7DE  6E0F               	movwf	?_printf+2,c
  3029  00F7E0  6A10               	clrf	?_printf+3,c
  3030  00F7E2  BE0F               	btfsc	?_printf+2,7,c
  3031  00F7E4  0610               	decf	?_printf+3,f,c
  3032  00F7E6  EC37  F07C         	call	_printf	;wreg free
  3033                           
  3034                           ;interface.c: 17: keycheck();
  3035  00F7EA  EC62  F078         	call	_keycheck	;wreg free
  3036                           
  3037                           ;interface.c: 18: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  3038  00F7EE  0E01               	movlw	1
  3039  00F7F0  EC4D  F078         	call	_lcdInst
  3040  00F7F4  0E68               	movlw	104
  3041  00F7F6  6E23               	movwf	??_displayLogs& (0+255),c
  3042  00F7F8  0EE4               	movlw	228
  3043  00F7FA                     u1777:
  3044  00F7FA  2EE8               	decfsz	wreg,f,c
  3045  00F7FC  D7FE               	bra	u1777
  3046  00F7FE  2E23               	decfsz	??_displayLogs& (0+255),f,c
  3047  00F800  D7FC               	bra	u1777
  3048  00F802  D000               	nop2	
  3049                           
  3050                           ;interface.c: 19: printf("Run#1    A:Next");
  3051  00F804  0E4F               	movlw	low STR_14
  3052  00F806  6E0D               	movwf	printf@f,c
  3053  00F808  0EFF               	movlw	high STR_14
  3054  00F80A  6E0E               	movwf	printf@f+1,c
  3055  00F80C  EC37  F07C         	call	_printf	;wreg free
  3056                           
  3057                           ;interface.c: 20: lcdInst(0b11000000);;
  3058  00F810  0EC0               	movlw	192
  3059  00F812  EC4D  F078         	call	_lcdInst
  3060                           
  3061                           ;interface.c: 21: printf("# soda cans: %d", eepromRead(20));
  3062  00F816  0E3F               	movlw	low STR_17
  3063  00F818  6E0D               	movwf	printf@f,c
  3064  00F81A  0EFF               	movlw	high STR_17
  3065  00F81C  6E0E               	movwf	printf@f+1,c
  3066  00F81E  0E14               	movlw	20
  3067  00F820  ECC8  F078         	call	_eepromRead
  3068  00F824  6E0F               	movwf	?_printf+2,c
  3069  00F826  6A10               	clrf	?_printf+3,c
  3070  00F828  BE0F               	btfsc	?_printf+2,7,c
  3071  00F82A  0610               	decf	?_printf+3,f,c
  3072  00F82C  EC37  F07C         	call	_printf	;wreg free
  3073                           
  3074                           ;interface.c: 22: keycheck();
  3075  00F830  EC62  F078         	call	_keycheck	;wreg free
  3076                           
  3077                           ;interface.c: 23: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  3078  00F834  0E01               	movlw	1
  3079  00F836  EC4D  F078         	call	_lcdInst
  3080  00F83A  0E68               	movlw	104
  3081  00F83C  6E23               	movwf	??_displayLogs& (0+255),c
  3082  00F83E  0EE4               	movlw	228
  3083  00F840                     u1787:
  3084  00F840  2EE8               	decfsz	wreg,f,c
  3085  00F842  D7FE               	bra	u1787
  3086  00F844  2E23               	decfsz	??_displayLogs& (0+255),f,c
  3087  00F846  D7FC               	bra	u1787
  3088  00F848  D000               	nop2	
  3089                           
  3090                           ;interface.c: 24: printf("Run#1    A:Next");
  3091  00F84A  0E4F               	movlw	low STR_14
  3092  00F84C  6E0D               	movwf	printf@f,c
  3093  00F84E  0EFF               	movlw	high STR_14
  3094  00F850  6E0E               	movwf	printf@f+1,c
  3095  00F852  EC37  F07C         	call	_printf	;wreg free
  3096                           
  3097                           ;interface.c: 25: lcdInst(0b11000000);;
  3098  00F856  0EC0               	movlw	192
  3099  00F858  EC4D  F078         	call	_lcdInst
  3100                           
  3101                           ;interface.c: 26: printf("# soup cans: 4");
  3102  00F85C  0E7F               	movlw	low STR_19
  3103  00F85E  6E0D               	movwf	printf@f,c
  3104  00F860  0EFF               	movlw	high STR_19
  3105  00F862  6E0E               	movwf	printf@f+1,c
  3106  00F864  EC37  F07C         	call	_printf	;wreg free
  3107                           
  3108                           ;interface.c: 27: keycheck();
  3109  00F868  EC62  F078         	call	_keycheck	;wreg free
  3110  00F86C  0012               	return		;funcret
  3111  00F86E                     __end_of_displayLogs:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           prodh	equ	0xFF4
  3115                           prodl	equ	0xFF3
  3116                           intcon2	equ	0xFF1
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           indf2	equ	0xFDF
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _printf *****************
  3125 ;; Defined at:
  3126 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  f               2   12[COMRAM] PTR const unsigned char 
  3129 ;;		 -> STR_19(15), STR_18(16), STR_17(16), STR_16(16), 
  3130 ;;		 -> STR_15(14), STR_14(16), STR_13(8), STR_12(15), 
  3131 ;;		 -> STR_11(8), STR_10(16), STR_9(19), STR_8(3), 
  3132 ;;		 -> STR_7(12), STR_6(13), STR_5(13), STR_4(13), 
  3133 ;;		 -> STR_3(13), STR_2(16), STR_1(16), 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  idx             1   24[COMRAM] unsigned char 
  3136 ;;  tmpval          4    0        struct .
  3137 ;;  cp              3    0        PTR const unsigned char 
  3138 ;;  width           2   31[COMRAM] int 
  3139 ;;  val             2   28[COMRAM] unsigned int 
  3140 ;;  ap              2   25[COMRAM] PTR void [1]
  3141 ;;		 -> ?_printf(2), 
  3142 ;;  len             2    0        unsigned int 
  3143 ;;  c               1   33[COMRAM] char 
  3144 ;;  flag            1   30[COMRAM] unsigned char 
  3145 ;;  prec            1   27[COMRAM] char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  2   12[COMRAM] int 
  3148 ;; Registers used:
  3149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3155 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;Total ram usage:       22 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    2
  3162 ;; This function calls:
  3163 ;;		___lwdiv
  3164 ;;		___lwmod
  3165 ;;		___wmul
  3166 ;;		_isdigit
  3167 ;;		_putch
  3168 ;; This function is called by:
  3169 ;;		_main
  3170 ;;		_homescreen
  3171 ;;		_displayLogs
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text19
  3176  00F86E                     __ptext19:
  3177                           	opt stack 0
  3178  00F86E                     _printf:
  3179                           	opt stack 28
  3180                           
  3181                           ;doprnt.c: 466: va_list ap;
  3182                           ;doprnt.c: 499: signed char c;
  3183                           ;doprnt.c: 501: int width;
  3184                           ;doprnt.c: 506: signed char prec;
  3185                           ;doprnt.c: 508: unsigned char flag;
  3186                           ;doprnt.c: 523: union {
  3187                           ;doprnt.c: 524: unsigned long vd;
  3188                           ;doprnt.c: 525: double integ;
  3189                           ;doprnt.c: 526: } tmpval;
  3190                           ;doprnt.c: 528: unsigned int val;
  3191                           ;doprnt.c: 529: unsigned len;
  3192                           ;doprnt.c: 530: const char * cp;
  3193                           ;doprnt.c: 533: *ap = __va_start();
  3194                           
  3195                           ;incstack = 0
  3196  00F86E  0E0F               	movlw	low (?_printf+2)
  3197  00F870  6E1A               	movwf	printf@ap,c
  3198  00F872  0E00               	movlw	high (?_printf+2)
  3199  00F874  6E1B               	movwf	printf@ap+1,c
  3200                           
  3201                           ;doprnt.c: 536: while(c = *f++) {
  3202  00F876  D174               	goto	l2159
  3203  00F878                     l2033:
  3204                           
  3205                           ;doprnt.c: 538: if(c != '%')
  3206  00F878  0E25               	movlw	37
  3207  00F87A  1822               	xorwf	printf@c,w,c
  3208  00F87C  B4D8               	btfsc	status,2,c
  3209  00F87E  D004               	goto	l2037
  3210                           
  3211                           ;doprnt.c: 540: {
  3212                           ;doprnt.c: 541: (putch(c) );
  3213  00F880  5022               	movf	printf@c,w,c
  3214  00F882  EC53  F078         	call	_putch
  3215                           
  3216                           ;doprnt.c: 542: continue;
  3217  00F886  D16C               	goto	l2159
  3218  00F888                     l2037:
  3219                           
  3220                           ;doprnt.c: 543: }
  3221                           ;doprnt.c: 546: width = 0;
  3222  00F888  0E00               	movlw	0
  3223  00F88A  6E21               	movwf	printf@width+1,c
  3224  00F88C  0E00               	movlw	0
  3225  00F88E  6E20               	movwf	printf@width,c
  3226                           
  3227                           ;doprnt.c: 548: flag = 0;
  3228  00F890  0E00               	movlw	0
  3229  00F892  6E1F               	movwf	printf@flag,c
  3230                           
  3231                           ;doprnt.c: 551: switch(*f) {
  3232                           
  3233                           ;doprnt.c: 550: for(;;) {
  3234  00F894  D003               	goto	l2043
  3235  00F896                     l2039:
  3236                           
  3237                           ;doprnt.c: 580: flag |= 0x04;
  3238  00F896  841F               	bsf	printf@flag,2,c
  3239                           
  3240                           ;doprnt.c: 581: f++;
  3241  00F898  4A0D               	infsnz	printf@f,f,c
  3242  00F89A  2A0E               	incf	printf@f+1,f,c
  3243  00F89C                     l2043:
  3244  00F89C  C00D  FFF6         	movff	printf@f,tblptrl
  3245  00F8A0  C00E  FFF7         	movff	printf@f+1,tblptrh
  3246  00F8A4                     	if	0	;tblptru may be non-zero
  3247  00F8A4                     	endif
  3248  00F8A4                     	if	0	;tblptru may be non-zero
  3249  00F8A4                     	endif
  3250  00F8A4  0008               	tblrd		*
  3251  00F8A6  50F5               	movf	tablat,w,c
  3252                           
  3253                           ; Switch size 1, requested type "space"
  3254                           ; Number of cases is 1, Range of values is 48 to 48
  3255                           ; switch strategies available:
  3256                           ; Name         Instructions Cycles
  3257                           ; simple_byte            4     3 (average)
  3258                           ;	Chosen strategy is simple_byte
  3259  00F8A8  0A30               	xorlw	48	; case 48
  3260  00F8AA  B4D8               	btfsc	status,2,c
  3261  00F8AC  D7F4               	goto	l2039
  3262                           
  3263                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3264                           
  3265                           ;doprnt.c: 586: }
  3266                           
  3267                           ;doprnt.c: 585: break;
  3268  00F8AE  C00D  FFF6         	movff	printf@f,tblptrl
  3269  00F8B2  C00E  FFF7         	movff	printf@f+1,tblptrh
  3270  00F8B6                     	if	0	;tblptru may be non-zero
  3271  00F8B6                     	endif
  3272  00F8B6                     	if	0	;tblptru may be non-zero
  3273  00F8B6                     	endif
  3274  00F8B6  0008               	tblrd		*
  3275  00F8B8  50F5               	movf	tablat,w,c
  3276  00F8BA  EC81  F078         	call	_isdigit
  3277  00F8BE  A0D8               	btfss	status,0,c
  3278  00F8C0  D035               	goto	l2061
  3279                           
  3280                           ;doprnt.c: 598: width = 0;
  3281  00F8C2  0E00               	movlw	0
  3282  00F8C4  6E21               	movwf	printf@width+1,c
  3283  00F8C6  0E00               	movlw	0
  3284  00F8C8  6E20               	movwf	printf@width,c
  3285  00F8CA                     l2049:
  3286                           
  3287                           ;doprnt.c: 600: width *= 10;
  3288  00F8CA  C020  F001         	movff	printf@width,___wmul@multiplier
  3289  00F8CE  C021  F002         	movff	printf@width+1,___wmul@multiplier+1
  3290  00F8D2  0E00               	movlw	0
  3291  00F8D4  6E04               	movwf	___wmul@multiplicand+1,c
  3292  00F8D6  0E0A               	movlw	10
  3293  00F8D8  6E03               	movwf	___wmul@multiplicand,c
  3294  00F8DA  ECA2  F078         	call	___wmul	;wreg free
  3295  00F8DE  C001  F020         	movff	?___wmul,printf@width
  3296  00F8E2  C002  F021         	movff	?___wmul+1,printf@width+1
  3297                           
  3298                           ;doprnt.c: 601: width += *f++ - '0';
  3299  00F8E6  0ED0               	movlw	208
  3300  00F8E8  6E15               	movwf	??_printf& (0+255),c
  3301  00F8EA  0EFF               	movlw	255
  3302  00F8EC  6E16               	movwf	(??_printf+1)& (0+255),c
  3303  00F8EE  C00D  FFF6         	movff	printf@f,tblptrl
  3304  00F8F2  C00E  FFF7         	movff	printf@f+1,tblptrh
  3305  00F8F6                     	if	0	;tblptru may be non-zero
  3306  00F8F6                     	endif
  3307  00F8F6                     	if	0	;tblptru may be non-zero
  3308  00F8F6                     	endif
  3309  00F8F6  0008               	tblrd		*
  3310  00F8F8  50F5               	movf	tablat,w,c
  3311  00F8FA  6E17               	movwf	(??_printf+2)& (0+255),c
  3312  00F8FC  6A18               	clrf	(??_printf+3)& (0+255),c
  3313  00F8FE  5015               	movf	??_printf,w,c
  3314  00F900  2617               	addwf	??_printf+2,f,c
  3315  00F902  5016               	movf	??_printf+1,w,c
  3316  00F904  2218               	addwfc	??_printf+3,f,c
  3317  00F906  5017               	movf	??_printf+2,w,c
  3318  00F908  2620               	addwf	printf@width,f,c
  3319  00F90A  5018               	movf	??_printf+3,w,c
  3320  00F90C  2221               	addwfc	printf@width+1,f,c
  3321  00F90E  4A0D               	infsnz	printf@f,f,c
  3322  00F910  2A0E               	incf	printf@f+1,f,c
  3323                           
  3324                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3325  00F912  C00D  FFF6         	movff	printf@f,tblptrl
  3326  00F916  C00E  FFF7         	movff	printf@f+1,tblptrh
  3327  00F91A                     	if	0	;tblptru may be non-zero
  3328  00F91A                     	endif
  3329  00F91A                     	if	0	;tblptru may be non-zero
  3330  00F91A                     	endif
  3331  00F91A  0008               	tblrd		*
  3332  00F91C  50F5               	movf	tablat,w,c
  3333  00F91E  EC81  F078         	call	_isdigit
  3334  00F922  A0D8               	btfss	status,0,c
  3335  00F924  D003               	goto	l2061
  3336  00F926  D7D1               	goto	l2049
  3337  00F928                     l2057:
  3338                           
  3339                           ;doprnt.c: 721: flag |= 0x80;
  3340  00F928  8E1F               	bsf	printf@flag,7,c
  3341                           
  3342                           ;doprnt.c: 723: break;
  3343  00F92A  D017               	goto	l487
  3344  00F92C                     l2061:
  3345  00F92C  C00D  FFF6         	movff	printf@f,tblptrl
  3346  00F930  C00E  FFF7         	movff	printf@f+1,tblptrh
  3347  00F934  4A0D               	infsnz	printf@f,f,c
  3348  00F936  2A0E               	incf	printf@f+1,f,c
  3349  00F938                     	if	0	;tblptru may be non-zero
  3350  00F938                     	endif
  3351  00F938                     	if	0	;tblptru may be non-zero
  3352  00F938                     	endif
  3353  00F938  0008               	tblrd		*
  3354  00F93A  CFF5 F022          	movff	tablat,printf@c
  3355  00F93E  5022               	movf	printf@c,w,c
  3356                           
  3357                           ; Switch size 1, requested type "space"
  3358                           ; Number of cases is 4, Range of values is 0 to 120
  3359                           ; switch strategies available:
  3360                           ; Name         Instructions Cycles
  3361                           ; simple_byte           13     7 (average)
  3362                           ;	Chosen strategy is simple_byte
  3363  00F940  0A00               	xorlw	0	; case 0
  3364  00F942  B4D8               	btfsc	status,2,c
  3365  00F944  0012               	return	
  3366  00F946  0A64               	xorlw	100	; case 100
  3367  00F948  B4D8               	btfsc	status,2,c
  3368  00F94A  D007               	goto	l487
  3369  00F94C  0A0D               	xorlw	13	; case 105
  3370  00F94E  B4D8               	btfsc	status,2,c
  3371  00F950  D004               	goto	l487
  3372  00F952  0A11               	xorlw	17	; case 120
  3373  00F954  B4D8               	btfsc	status,2,c
  3374  00F956  D7E8               	goto	l2057
  3375  00F958  D103               	goto	l2159
  3376  00F95A                     l487:
  3377                           
  3378                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3379  00F95A  BE1F               	btfsc	printf@flag,7,c
  3380  00F95C  D015               	goto	l2073
  3381                           
  3382                           ;doprnt.c: 1253: {
  3383                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3384  00F95E  C01A  FFD9         	movff	printf@ap,fsr2l
  3385  00F962  C01B  FFDA         	movff	printf@ap+1,fsr2h
  3386  00F966  CFDE F01D          	movff	postinc2,printf@val
  3387  00F96A  CFDD F01E          	movff	postdec2,printf@val+1
  3388  00F96E  0E02               	movlw	2
  3389  00F970  261A               	addwf	printf@ap,f,c
  3390  00F972  0E00               	movlw	0
  3391  00F974  221B               	addwfc	printf@ap+1,f,c
  3392                           
  3393                           ;doprnt.c: 1261: if((int)val < 0) {
  3394  00F976  AE1E               	btfss	printf@val+1,7,c
  3395  00F978  D044               	goto	l2107
  3396                           
  3397                           ;doprnt.c: 1262: flag |= 0x03;
  3398  00F97A  0E03               	movlw	3
  3399  00F97C  121F               	iorwf	printf@flag,f,c
  3400                           
  3401                           ;doprnt.c: 1263: val = -val;
  3402  00F97E  6C1D               	negf	printf@val,c
  3403  00F980  1E1E               	comf	printf@val+1,f,c
  3404  00F982  B0D8               	btfsc	status,0,c
  3405  00F984  2A1E               	incf	printf@val+1,f,c
  3406                           
  3407                           ;doprnt.c: 1264: }
  3408                           ;doprnt.c: 1266: }
  3409  00F986  D03D               	goto	l2107
  3410  00F988                     l2073:
  3411                           
  3412                           ;doprnt.c: 1268: else
  3413                           ;doprnt.c: 1273: {
  3414                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3415  00F988  C01A  FFD9         	movff	printf@ap,fsr2l
  3416  00F98C  C01B  FFDA         	movff	printf@ap+1,fsr2h
  3417  00F990  CFDE F01D          	movff	postinc2,printf@val
  3418  00F994  CFDD F01E          	movff	postdec2,printf@val+1
  3419  00F998  0E02               	movlw	2
  3420  00F99A  261A               	addwf	printf@ap,f,c
  3421  00F99C  0E00               	movlw	0
  3422  00F99E  221B               	addwfc	printf@ap+1,f,c
  3423                           
  3424                           ;doprnt.c: 1287: }
  3425                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3426  00F9A0  D030               	goto	l2107
  3427  00F9A2                     l2077:
  3428                           
  3429                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3430  00F9A2  0E01               	movlw	1
  3431  00F9A4  6E22               	movwf	printf@c,c
  3432  00F9A6                     l2079:
  3433  00F9A6  0E05               	movlw	5
  3434  00F9A8  1822               	xorwf	printf@c,w,c
  3435  00F9AA  B4D8               	btfsc	status,2,c
  3436  00F9AC  D032               	goto	l2109
  3437                           
  3438                           ;doprnt.c: 1306: if(val < dpowers[c])
  3439  00F9AE  5022               	movf	printf@c,w,c
  3440  00F9B0  0D02               	mullw	2
  3441  00F9B2  0EF2               	movlw	low _dpowers
  3442  00F9B4  24F3               	addwf	prodl,w,c
  3443  00F9B6  6EF6               	movwf	tblptrl,c
  3444  00F9B8  0EFE               	movlw	high _dpowers
  3445  00F9BA  20F4               	addwfc	prodh,w,c
  3446  00F9BC  6EF7               	movwf	tblptrh,c
  3447  00F9BE                     	if	0	;There are less than 3 active tblptr bytes
  3448  00F9BE                     	endif
  3449  00F9BE  0009               	tblrd		*+
  3450  00F9C0  50F5               	movf	tablat,w,c
  3451  00F9C2  5C1D               	subwf	printf@val,w,c
  3452  00F9C4  0009               	tblrd		*+
  3453  00F9C6  50F5               	movf	tablat,w,c
  3454  00F9C8  581E               	subwfb	printf@val+1,w,c
  3455  00F9CA  A0D8               	btfss	status,0,c
  3456  00F9CC  D022               	goto	l2109
  3457                           
  3458                           ;doprnt.c: 1307: break;
  3459  00F9CE  2A22               	incf	printf@c,f,c
  3460  00F9D0  D7EA               	goto	l2079
  3461  00F9D2                     l2091:
  3462                           
  3463                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3464  00F9D2  0E01               	movlw	1
  3465  00F9D4  6E22               	movwf	printf@c,c
  3466  00F9D6                     l2093:
  3467  00F9D6  0E04               	movlw	4
  3468  00F9D8  1822               	xorwf	printf@c,w,c
  3469  00F9DA  B4D8               	btfsc	status,2,c
  3470  00F9DC  D01A               	goto	l2109
  3471                           
  3472                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3473  00F9DE  5022               	movf	printf@c,w,c
  3474  00F9E0  0D02               	mullw	2
  3475  00F9E2  0EFC               	movlw	low _hexpowers
  3476  00F9E4  24F3               	addwf	prodl,w,c
  3477  00F9E6  6EF6               	movwf	tblptrl,c
  3478  00F9E8  0EFE               	movlw	high _hexpowers
  3479  00F9EA  20F4               	addwfc	prodh,w,c
  3480  00F9EC  6EF7               	movwf	tblptrh,c
  3481  00F9EE                     	if	0	;There are less than 3 active tblptr bytes
  3482  00F9EE                     	endif
  3483  00F9EE  0009               	tblrd		*+
  3484  00F9F0  50F5               	movf	tablat,w,c
  3485  00F9F2  5C1D               	subwf	printf@val,w,c
  3486  00F9F4  0009               	tblrd		*+
  3487  00F9F6  50F5               	movf	tablat,w,c
  3488  00F9F8  581E               	subwfb	printf@val+1,w,c
  3489  00F9FA  A0D8               	btfss	status,0,c
  3490  00F9FC  D00A               	goto	l2109
  3491                           
  3492                           ;doprnt.c: 1318: break;
  3493  00F9FE  2A22               	incf	printf@c,f,c
  3494  00FA00  D7EA               	goto	l2093
  3495  00FA02                     l2107:
  3496  00FA02  501F               	movf	printf@flag,w,c
  3497  00FA04  0B80               	andlw	128
  3498                           
  3499                           ; Switch size 1, requested type "space"
  3500                           ; Number of cases is 2, Range of values is 0 to 128
  3501                           ; switch strategies available:
  3502                           ; Name         Instructions Cycles
  3503                           ; simple_byte            7     4 (average)
  3504                           ;	Chosen strategy is simple_byte
  3505  00FA06  0A00               	xorlw	0	; case 0
  3506  00FA08  B4D8               	btfsc	status,2,c
  3507  00FA0A  D7CB               	goto	l2077
  3508  00FA0C  0A80               	xorlw	128	; case 128
  3509  00FA0E  B4D8               	btfsc	status,2,c
  3510  00FA10  D7E0               	goto	l2091
  3511  00FA12                     l2109:
  3512                           
  3513                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3514  00FA12  5020               	movf	printf@width,w,c
  3515  00FA14  1021               	iorwf	printf@width+1,w,c
  3516  00FA16  B4D8               	btfsc	status,2,c
  3517  00FA18  D009               	goto	l2115
  3518  00FA1A  C01F  F015         	movff	printf@flag,??_printf
  3519  00FA1E  0E03               	movlw	3
  3520  00FA20  1615               	andwf	??_printf,f,c
  3521  00FA22  B4D8               	btfsc	status,2,c
  3522  00FA24  D003               	goto	l2115
  3523                           
  3524                           ;doprnt.c: 1346: width--;
  3525  00FA26  0620               	decf	printf@width,f,c
  3526  00FA28  A0D8               	btfss	status,0,c
  3527  00FA2A  0621               	decf	printf@width+1,f,c
  3528  00FA2C                     l2115:
  3529                           
  3530                           ;doprnt.c: 1381: if(width > c)
  3531  00FA2C  0E80               	movlw	128
  3532  00FA2E  BE22               	btfsc	printf@c,7,c
  3533  00FA30  0E7F               	movlw	127
  3534  00FA32  6E15               	movwf	??_printf& (0+255),c
  3535  00FA34  5020               	movf	printf@width,w,c
  3536  00FA36  5C22               	subwf	printf@c,w,c
  3537  00FA38  5021               	movf	printf@width+1,w,c
  3538  00FA3A  0A80               	xorlw	128
  3539  00FA3C  5815               	subwfb	??_printf& (0+255),w,c
  3540  00FA3E  B0D8               	btfsc	status,0,c
  3541  00FA40  D007               	goto	l2119
  3542                           
  3543                           ;doprnt.c: 1382: width -= c;
  3544  00FA42  5022               	movf	printf@c,w,c
  3545  00FA44  5E20               	subwf	printf@width,f,c
  3546  00FA46  0E00               	movlw	0
  3547  00FA48  BE22               	btfsc	printf@c,7,c
  3548  00FA4A  0EFF               	movlw	255
  3549  00FA4C  5A21               	subwfb	printf@width+1,f,c
  3550  00FA4E  D004               	goto	l2121
  3551  00FA50                     l2119:
  3552                           
  3553                           ;doprnt.c: 1383: else
  3554                           ;doprnt.c: 1384: width = 0;
  3555  00FA50  0E00               	movlw	0
  3556  00FA52  6E21               	movwf	printf@width+1,c
  3557  00FA54  0E00               	movlw	0
  3558  00FA56  6E20               	movwf	printf@width,c
  3559  00FA58                     l2121:
  3560                           
  3561                           ;doprnt.c: 1387: if(flag & 0x04) {
  3562  00FA58  A41F               	btfss	printf@flag,2,c
  3563  00FA5A  D014               	goto	l2133
  3564                           
  3565                           ;doprnt.c: 1392: if(flag & 0x03)
  3566  00FA5C  C01F  F015         	movff	printf@flag,??_printf
  3567  00FA60  0E03               	movlw	3
  3568  00FA62  1615               	andwf	??_printf,f,c
  3569  00FA64  B4D8               	btfsc	status,2,c
  3570  00FA66  D003               	goto	l2127
  3571                           
  3572                           ;doprnt.c: 1393: (putch('-') );
  3573  00FA68  0E2D               	movlw	45
  3574  00FA6A  EC53  F078         	call	_putch
  3575  00FA6E                     l2127:
  3576                           
  3577                           ;doprnt.c: 1415: if(width)
  3578  00FA6E  5020               	movf	printf@width,w,c
  3579  00FA70  1021               	iorwf	printf@width+1,w,c
  3580  00FA72  B4D8               	btfsc	status,2,c
  3581  00FA74  D01E               	goto	l2143
  3582                           
  3583                           ;doprnt.c: 1417: (putch('0') );
  3584                           
  3585                           ;doprnt.c: 1416: do
  3586  00FA76  0E30               	movlw	48
  3587  00FA78  EC53  F078         	call	_putch
  3588                           
  3589                           ;doprnt.c: 1418: while(--width);
  3590  00FA7C  0620               	decf	printf@width,f,c
  3591  00FA7E  A0D8               	btfss	status,0,c
  3592  00FA80  0621               	decf	printf@width+1,f,c
  3593  00FA82  D7F5               	goto	l2127
  3594  00FA84                     l2133:
  3595                           
  3596                           ;doprnt.c: 1422: {
  3597                           ;doprnt.c: 1424: if(width
  3598                           ;doprnt.c: 1428: )
  3599  00FA84  5020               	movf	printf@width,w,c
  3600  00FA86  1021               	iorwf	printf@width+1,w,c
  3601  00FA88  B4D8               	btfsc	status,2,c
  3602  00FA8A  D00A               	goto	l2139
  3603  00FA8C                     l2135:
  3604                           
  3605                           ;doprnt.c: 1430: (putch(' ') );
  3606  00FA8C  0E20               	movlw	32
  3607  00FA8E  EC53  F078         	call	_putch
  3608                           
  3609                           ;doprnt.c: 1431: while(--width);
  3610  00FA92  0620               	decf	printf@width,f,c
  3611  00FA94  A0D8               	btfss	status,0,c
  3612  00FA96  0621               	decf	printf@width+1,f,c
  3613  00FA98  5020               	movf	printf@width,w,c
  3614  00FA9A  1021               	iorwf	printf@width+1,w,c
  3615  00FA9C  A4D8               	btfss	status,2,c
  3616  00FA9E  D7F6               	goto	l2135
  3617  00FAA0                     l2139:
  3618                           
  3619                           ;doprnt.c: 1438: if(flag & 0x03)
  3620  00FAA0  C01F  F015         	movff	printf@flag,??_printf
  3621  00FAA4  0E03               	movlw	3
  3622  00FAA6  1615               	andwf	??_printf,f,c
  3623  00FAA8  B4D8               	btfsc	status,2,c
  3624  00FAAA  D003               	goto	l2143
  3625                           
  3626                           ;doprnt.c: 1439: (putch('-') );
  3627  00FAAC  0E2D               	movlw	45
  3628  00FAAE  EC53  F078         	call	_putch
  3629  00FAB2                     l2143:
  3630                           
  3631                           ;doprnt.c: 1469: }
  3632                           ;doprnt.c: 1472: prec = c;
  3633  00FAB2  C022  F01C         	movff	printf@c,printf@prec
  3634                           
  3635                           ;doprnt.c: 1474: while(prec--) {
  3636  00FAB6  D050               	goto	l2157
  3637  00FAB8                     l2145:
  3638                           
  3639                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3640  00FAB8  501C               	movf	printf@prec,w,c
  3641  00FABA  0D02               	mullw	2
  3642  00FABC  0EF2               	movlw	low _dpowers
  3643  00FABE  24F3               	addwf	prodl,w,c
  3644  00FAC0  6EF6               	movwf	tblptrl,c
  3645  00FAC2  0EFE               	movlw	high _dpowers
  3646  00FAC4  20F4               	addwfc	prodh,w,c
  3647  00FAC6  6EF7               	movwf	tblptrh,c
  3648  00FAC8                     	if	0	;There are less than 3 active tblptr bytes
  3649  00FAC8                     	endif
  3650  00FAC8  0009               	tblrd		*+
  3651  00FACA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3652  00FACE  000A               	tblrd		*-
  3653  00FAD0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3654  00FAD4  C01D  F001         	movff	printf@val,___lwdiv@dividend
  3655  00FAD8  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3656  00FADC  EC26  F07A         	call	___lwdiv	;wreg free
  3657  00FAE0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3658  00FAE4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3659  00FAE8  0E00               	movlw	0
  3660  00FAEA  6E0B               	movwf	___lwmod@divisor+1,c
  3661  00FAEC  0E0A               	movlw	10
  3662  00FAEE  6E0A               	movwf	___lwmod@divisor,c
  3663  00FAF0  EC73  F079         	call	___lwmod	;wreg free
  3664  00FAF4  5008               	movf	?___lwmod,w,c
  3665  00FAF6  0F30               	addlw	48
  3666  00FAF8  6E22               	movwf	printf@c,c
  3667                           
  3668                           ;doprnt.c: 1491: break;
  3669  00FAFA  D02B               	goto	l2155
  3670  00FAFC                     l2147:
  3671                           
  3672                           ;doprnt.c: 1499: {
  3673                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3674  00FAFC  C01D  F001         	movff	printf@val,___lwdiv@dividend
  3675  00FB00  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3676  00FB04  501C               	movf	printf@prec,w,c
  3677  00FB06  0D02               	mullw	2
  3678  00FB08  0EFC               	movlw	low _hexpowers
  3679  00FB0A  24F3               	addwf	prodl,w,c
  3680  00FB0C  6EF6               	movwf	tblptrl,c
  3681  00FB0E  0EFE               	movlw	high _hexpowers
  3682  00FB10  20F4               	addwfc	prodh,w,c
  3683  00FB12  6EF7               	movwf	tblptrh,c
  3684  00FB14                     	if	0	;There are less than 3 active tblptr bytes
  3685  00FB14                     	endif
  3686  00FB14  0009               	tblrd		*+
  3687  00FB16  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3688  00FB1A  000A               	tblrd		*-
  3689  00FB1C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3690  00FB20  EC26  F07A         	call	___lwdiv	;wreg free
  3691  00FB24  5001               	movf	?___lwdiv,w,c
  3692  00FB26  0B0F               	andlw	15
  3693  00FB28  6E19               	movwf	printf@idx,c
  3694                           
  3695                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3696  00FB2A  5019               	movf	printf@idx,w,c
  3697  00FB2C  0D01               	mullw	1
  3698  00FB2E  0E1E               	movlw	low STR_20
  3699  00FB30  24F3               	addwf	prodl,w,c
  3700  00FB32  6EF6               	movwf	tblptrl,c
  3701  00FB34  0EFF               	movlw	high STR_20
  3702  00FB36  20F4               	addwfc	prodh,w,c
  3703  00FB38  6EF7               	movwf	tblptrh,c
  3704  00FB3A                     	if	0	;There are less than 3 active tblptr bytes
  3705  00FB3A                     	endif
  3706  00FB3A  0008               	tblrd		*
  3707  00FB3C  CFF5 F022          	movff	tablat,printf@c
  3708                           
  3709                           ;doprnt.c: 1523: }
  3710                           
  3711                           ;doprnt.c: 1508: }
  3712                           ;doprnt.c: 1510: break;
  3713  00FB40  D008               	goto	l2155
  3714  00FB42                     l2153:
  3715  00FB42  501F               	movf	printf@flag,w,c
  3716  00FB44  0B80               	andlw	128
  3717                           
  3718                           ; Switch size 1, requested type "space"
  3719                           ; Number of cases is 2, Range of values is 0 to 128
  3720                           ; switch strategies available:
  3721                           ; Name         Instructions Cycles
  3722                           ; simple_byte            7     4 (average)
  3723                           ;	Chosen strategy is simple_byte
  3724  00FB46  0A00               	xorlw	0	; case 0
  3725  00FB48  B4D8               	btfsc	status,2,c
  3726  00FB4A  D7B6               	goto	l2145
  3727  00FB4C  0A80               	xorlw	128	; case 128
  3728  00FB4E  B4D8               	btfsc	status,2,c
  3729  00FB50  D7D5               	goto	l2147
  3730  00FB52                     l2155:
  3731                           
  3732                           ;doprnt.c: 1524: (putch(c) );
  3733  00FB52  5022               	movf	printf@c,w,c
  3734  00FB54  EC53  F078         	call	_putch
  3735  00FB58                     l2157:
  3736  00FB58  061C               	decf	printf@prec,f,c
  3737  00FB5A  281C               	incf	printf@prec,w,c
  3738  00FB5C  A4D8               	btfss	status,2,c
  3739  00FB5E  D7F1               	goto	l2153
  3740  00FB60                     l2159:
  3741  00FB60  C00D  FFF6         	movff	printf@f,tblptrl
  3742  00FB64  C00E  FFF7         	movff	printf@f+1,tblptrh
  3743  00FB68  4A0D               	infsnz	printf@f,f,c
  3744  00FB6A  2A0E               	incf	printf@f+1,f,c
  3745  00FB6C                     	if	0	;tblptru may be non-zero
  3746  00FB6C                     	endif
  3747  00FB6C                     	if	0	;tblptru may be non-zero
  3748  00FB6C                     	endif
  3749  00FB6C  0008               	tblrd		*
  3750  00FB6E  CFF5 F022          	movff	tablat,printf@c
  3751  00FB72  5022               	movf	printf@c,w,c
  3752  00FB74  B4D8               	btfsc	status,2,c
  3753  00FB76  0012               	return	
  3754  00FB78  D67F               	goto	l2033
  3755  00FB7A                     __end_of_printf:
  3756                           	opt stack 0
  3757                           tblptru	equ	0xFF8
  3758                           tblptrh	equ	0xFF7
  3759                           tblptrl	equ	0xFF6
  3760                           tablat	equ	0xFF5
  3761                           prodh	equ	0xFF4
  3762                           prodl	equ	0xFF3
  3763                           intcon2	equ	0xFF1
  3764                           postinc0	equ	0xFEE
  3765                           wreg	equ	0xFE8
  3766                           indf2	equ	0xFDF
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function _putch *****************
  3774 ;; Defined at:
  3775 ;;		line 27 in file "lcd.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  data            1    wreg     unsigned char 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  data            1    2[COMRAM] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;Total ram usage:        1 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    1
  3796 ;; This function calls:
  3797 ;;		_lcdNibble
  3798 ;; This function is called by:
  3799 ;;		_printf
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text20
  3804  00F0A6                     __ptext20:
  3805                           	opt stack 0
  3806  00F0A6                     _putch:
  3807                           	opt stack 28
  3808                           
  3809                           ;incstack = 0
  3810                           ;putch@data stored from wreg
  3811  00F0A6  6E03               	movwf	putch@data,c
  3812                           
  3813                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  3814  00F0A8  848C               	bsf	3980,2,c	;volatile
  3815                           
  3816                           ;lcd.c: 29: lcdNibble(data);
  3817  00F0AA  5003               	movf	putch@data,w,c
  3818  00F0AC  EC4F  F07A         	call	_lcdNibble
  3819  00F0B0  0012               	return		;funcret
  3820  00F0B2                     __end_of_putch:
  3821                           	opt stack 0
  3822                           tblptru	equ	0xFF8
  3823                           tblptrh	equ	0xFF7
  3824                           tblptrl	equ	0xFF6
  3825                           tablat	equ	0xFF5
  3826                           prodh	equ	0xFF4
  3827                           prodl	equ	0xFF3
  3828                           intcon2	equ	0xFF1
  3829                           postinc0	equ	0xFEE
  3830                           wreg	equ	0xFE8
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           fsr2h	equ	0xFDA
  3835                           fsr2l	equ	0xFD9
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _isdigit *****************
  3839 ;; Defined at:
  3840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  c               1    wreg     unsigned char 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  c               1    2[COMRAM] unsigned char 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;		None               void
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;Total ram usage:        3 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_printf
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text21
  3868  00F102                     __ptext21:
  3869                           	opt stack 0
  3870  00F102                     _isdigit:
  3871                           	opt stack 29
  3872                           
  3873                           ;incstack = 0
  3874                           ;isdigit@c stored from wreg
  3875  00F102  6E03               	movwf	isdigit@c,c
  3876  00F104  0E00               	movlw	0
  3877  00F106  6E02               	movwf	_isdigit$1142,c
  3878  00F108  0E3A               	movlw	58
  3879  00F10A  6003               	cpfslt	isdigit@c,c
  3880  00F10C  D005               	goto	l1953
  3881  00F10E  0E2F               	movlw	47
  3882  00F110  6403               	cpfsgt	isdigit@c,c
  3883  00F112  D002               	goto	l1953
  3884  00F114  0E01               	movlw	1
  3885  00F116  6E02               	movwf	_isdigit$1142,c
  3886  00F118                     l1953:
  3887  00F118  C002  F001         	movff	_isdigit$1142,??_isdigit
  3888  00F11C  3001               	rrcf	??_isdigit,w,c
  3889  00F11E  0012               	return	
  3890  00F120                     __end_of_isdigit:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodh	equ	0xFF4
  3897                           prodl	equ	0xFF3
  3898                           intcon2	equ	0xFF1
  3899                           postinc0	equ	0xFEE
  3900                           wreg	equ	0xFE8
  3901                           indf2	equ	0xFDF
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           status	equ	0xFD8
  3907                           
  3908 ;; *************** function ___wmul *****************
  3909 ;; Defined at:
  3910 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  multiplier      2    0[COMRAM] unsigned int 
  3913 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  product         2    4[COMRAM] unsigned int 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  2    0[COMRAM] unsigned int 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, prodl, prodh
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:        6 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; This function calls:
  3932 ;;		Nothing
  3933 ;; This function is called by:
  3934 ;;		_main
  3935 ;;		_timePassed
  3936 ;;		_printf
  3937 ;;		_backlogTest
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text22
  3942  00F144                     __ptext22:
  3943                           	opt stack 0
  3944  00F144                     ___wmul:
  3945                           	opt stack 29
  3946                           
  3947                           ;incstack = 0
  3948  00F144  5001               	movf	___wmul@multiplier,w,c
  3949  00F146  0203               	mulwf	___wmul@multiplicand,c
  3950  00F148  CFF3 F005          	movff	prodl,___wmul@product
  3951  00F14C  CFF4 F006          	movff	prodh,___wmul@product+1
  3952  00F150  5001               	movf	___wmul@multiplier,w,c
  3953  00F152  0204               	mulwf	___wmul@multiplicand+1,c
  3954  00F154  50F3               	movf	prodl,w,c
  3955  00F156  2606               	addwf	___wmul@product+1,f,c
  3956  00F158  5002               	movf	___wmul@multiplier+1,w,c
  3957  00F15A  0203               	mulwf	___wmul@multiplicand,c
  3958  00F15C  50F3               	movf	prodl,w,c
  3959  00F15E  2606               	addwf	___wmul@product+1,f,c
  3960  00F160  C005  F001         	movff	___wmul@product,?___wmul
  3961  00F164  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3962  00F168  0012               	return	
  3963  00F16A                     __end_of___wmul:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon2	equ	0xFF1
  3972                           postinc0	equ	0xFEE
  3973                           wreg	equ	0xFE8
  3974                           indf2	equ	0xFDF
  3975                           postinc2	equ	0xFDE
  3976                           postdec2	equ	0xFDD
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function ___lwmod *****************
  3982 ;; Defined at:
  3983 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  dividend        2    7[COMRAM] unsigned int 
  3986 ;;  divisor         2    9[COMRAM] unsigned int 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;  counter         1   11[COMRAM] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  2    7[COMRAM] unsigned int 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;Total ram usage:        5 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_printf
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text23
  4012  00F2E6                     __ptext23:
  4013                           	opt stack 0
  4014  00F2E6                     ___lwmod:
  4015                           	opt stack 29
  4016                           
  4017                           ;incstack = 0
  4018  00F2E6  500A               	movf	___lwmod@divisor,w,c
  4019  00F2E8  100B               	iorwf	___lwmod@divisor+1,w,c
  4020  00F2EA  B4D8               	btfsc	status,2,c
  4021  00F2EC  D018               	goto	l942
  4022  00F2EE  0E01               	movlw	1
  4023  00F2F0  6E0C               	movwf	___lwmod@counter,c
  4024  00F2F2  D004               	goto	l2013
  4025  00F2F4                     l2011:
  4026  00F2F4  90D8               	bcf	status,0,c
  4027  00F2F6  360A               	rlcf	___lwmod@divisor,f,c
  4028  00F2F8  360B               	rlcf	___lwmod@divisor+1,f,c
  4029  00F2FA  2A0C               	incf	___lwmod@counter,f,c
  4030  00F2FC                     l2013:
  4031  00F2FC  AE0B               	btfss	___lwmod@divisor+1,7,c
  4032  00F2FE  D7FA               	goto	l2011
  4033  00F300                     l2015:
  4034  00F300  500A               	movf	___lwmod@divisor,w,c
  4035  00F302  5C08               	subwf	___lwmod@dividend,w,c
  4036  00F304  500B               	movf	___lwmod@divisor+1,w,c
  4037  00F306  5809               	subwfb	___lwmod@dividend+1,w,c
  4038  00F308  A0D8               	btfss	status,0,c
  4039  00F30A  D004               	goto	l2019
  4040  00F30C  500A               	movf	___lwmod@divisor,w,c
  4041  00F30E  5E08               	subwf	___lwmod@dividend,f,c
  4042  00F310  500B               	movf	___lwmod@divisor+1,w,c
  4043  00F312  5A09               	subwfb	___lwmod@dividend+1,f,c
  4044  00F314                     l2019:
  4045  00F314  90D8               	bcf	status,0,c
  4046  00F316  320B               	rrcf	___lwmod@divisor+1,f,c
  4047  00F318  320A               	rrcf	___lwmod@divisor,f,c
  4048  00F31A  2E0C               	decfsz	___lwmod@counter,f,c
  4049  00F31C  D7F1               	goto	l2015
  4050  00F31E                     l942:
  4051  00F31E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  4052  00F322  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  4053  00F326  0012               	return		;funcret
  4054  00F328                     __end_of___lwmod:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon2	equ	0xFF1
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           indf2	equ	0xFDF
  4066                           postinc2	equ	0xFDE
  4067                           postdec2	equ	0xFDD
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function ___lwdiv *****************
  4073 ;; Defined at:
  4074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  dividend        2    0[COMRAM] unsigned int 
  4077 ;;  divisor         2    2[COMRAM] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  quotient        2    4[COMRAM] unsigned int 
  4080 ;;  counter         1    6[COMRAM] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  2    0[COMRAM] unsigned int 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;Total ram usage:        7 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_printf
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text24
  4104  00F44C                     __ptext24:
  4105                           	opt stack 0
  4106  00F44C                     ___lwdiv:
  4107                           	opt stack 29
  4108                           
  4109                           ;incstack = 0
  4110  00F44C  0E00               	movlw	0
  4111  00F44E  6E06               	movwf	___lwdiv@quotient+1,c
  4112  00F450  0E00               	movlw	0
  4113  00F452  6E05               	movwf	___lwdiv@quotient,c
  4114  00F454  5003               	movf	___lwdiv@divisor,w,c
  4115  00F456  1004               	iorwf	___lwdiv@divisor+1,w,c
  4116  00F458  B4D8               	btfsc	status,2,c
  4117  00F45A  D01C               	goto	l932
  4118  00F45C  0E01               	movlw	1
  4119  00F45E  6E07               	movwf	___lwdiv@counter,c
  4120  00F460  D004               	goto	l1993
  4121  00F462                     l1991:
  4122  00F462  90D8               	bcf	status,0,c
  4123  00F464  3603               	rlcf	___lwdiv@divisor,f,c
  4124  00F466  3604               	rlcf	___lwdiv@divisor+1,f,c
  4125  00F468  2A07               	incf	___lwdiv@counter,f,c
  4126  00F46A                     l1993:
  4127  00F46A  AE04               	btfss	___lwdiv@divisor+1,7,c
  4128  00F46C  D7FA               	goto	l1991
  4129  00F46E                     l1995:
  4130  00F46E  90D8               	bcf	status,0,c
  4131  00F470  3605               	rlcf	___lwdiv@quotient,f,c
  4132  00F472  3606               	rlcf	___lwdiv@quotient+1,f,c
  4133  00F474  5003               	movf	___lwdiv@divisor,w,c
  4134  00F476  5C01               	subwf	___lwdiv@dividend,w,c
  4135  00F478  5004               	movf	___lwdiv@divisor+1,w,c
  4136  00F47A  5802               	subwfb	___lwdiv@dividend+1,w,c
  4137  00F47C  A0D8               	btfss	status,0,c
  4138  00F47E  D005               	goto	l2003
  4139  00F480  5003               	movf	___lwdiv@divisor,w,c
  4140  00F482  5E01               	subwf	___lwdiv@dividend,f,c
  4141  00F484  5004               	movf	___lwdiv@divisor+1,w,c
  4142  00F486  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4143  00F488  8005               	bsf	___lwdiv@quotient,0,c
  4144  00F48A                     l2003:
  4145  00F48A  90D8               	bcf	status,0,c
  4146  00F48C  3204               	rrcf	___lwdiv@divisor+1,f,c
  4147  00F48E  3203               	rrcf	___lwdiv@divisor,f,c
  4148  00F490  2E07               	decfsz	___lwdiv@counter,f,c
  4149  00F492  D7ED               	goto	l1995
  4150  00F494                     l932:
  4151  00F494  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4152  00F498  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4153  00F49C  0012               	return		;funcret
  4154  00F49E                     __end_of___lwdiv:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon2	equ	0xFF1
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           indf2	equ	0xFDF
  4166                           postinc2	equ	0xFDE
  4167                           postdec2	equ	0xFDD
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _lcdInst *****************
  4173 ;; Defined at:
  4174 ;;		line 22 in file "lcd.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  data            1    wreg     unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  data            1    2[COMRAM] unsigned char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg, status,2, status,0, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;Total ram usage:        1 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    1
  4195 ;; This function calls:
  4196 ;;		_lcdNibble
  4197 ;; This function is called by:
  4198 ;;		_main
  4199 ;;		_initLCD
  4200 ;;		_homescreen
  4201 ;;		_displayLogs
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           	psect	text25
  4206  00F09A                     __ptext25:
  4207                           	opt stack 0
  4208  00F09A                     _lcdInst:
  4209                           	opt stack 29
  4210                           
  4211                           ;incstack = 0
  4212                           ;lcdInst@data stored from wreg
  4213  00F09A  6E03               	movwf	lcdInst@data,c
  4214                           
  4215                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  4216  00F09C  948C               	bcf	3980,2,c	;volatile
  4217                           
  4218                           ;lcd.c: 24: lcdNibble(data);
  4219  00F09E  5003               	movf	lcdInst@data,w,c
  4220  00F0A0  EC4F  F07A         	call	_lcdNibble
  4221  00F0A4  0012               	return		;funcret
  4222  00F0A6                     __end_of_lcdInst:
  4223                           	opt stack 0
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon2	equ	0xFF1
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           indf2	equ	0xFDF
  4234                           postinc2	equ	0xFDE
  4235                           postdec2	equ	0xFDD
  4236                           fsr2h	equ	0xFDA
  4237                           fsr2l	equ	0xFD9
  4238                           status	equ	0xFD8
  4239                           
  4240 ;; *************** function _lcdNibble *****************
  4241 ;; Defined at:
  4242 ;;		line 32 in file "lcd.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  data            1    wreg     unsigned char 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  data            1    1[COMRAM] unsigned char 
  4247 ;;  temp            1    0[COMRAM] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;Total ram usage:        2 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_lcdInst
  4267 ;;		_putch
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text26
  4272  00F49E                     __ptext26:
  4273                           	opt stack 0
  4274  00F49E                     _lcdNibble:
  4275                           	opt stack 28
  4276                           
  4277                           ;incstack = 0
  4278                           ;lcdNibble@data stored from wreg
  4279  00F49E  6E02               	movwf	lcdNibble@data,c
  4280                           
  4281                           ;lcd.c: 34: char temp = data & 0xF0;
  4282  00F4A0  5002               	movf	lcdNibble@data,w,c
  4283  00F4A2  0BF0               	andlw	240
  4284  00F4A4  6E01               	movwf	lcdNibble@temp,c
  4285                           
  4286                           ;lcd.c: 35: LATD = LATD & 0x0F;
  4287  00F4A6  508C               	movf	3980,w,c	;volatile
  4288  00F4A8  0B0F               	andlw	15
  4289  00F4AA  6E8C               	movwf	3980,c	;volatile
  4290                           
  4291                           ;lcd.c: 36: LATD = temp | LATD;
  4292  00F4AC  5001               	movf	lcdNibble@temp,w,c
  4293  00F4AE  108C               	iorwf	3980,w,c	;volatile
  4294  00F4B0  6E8C               	movwf	3980,c	;volatile
  4295                           
  4296                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  4297  00F4B2  968C               	bcf	3980,3,c	;volatile
  4298                           
  4299                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4300  00F4B4  0E42               	movlw	66
  4301  00F4B6                     u1797:
  4302  00F4B6  2EE8               	decfsz	wreg,f,c
  4303  00F4B8  D7FE               	bra	u1797
  4304  00F4BA  D000               	nop2	
  4305                           
  4306                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  4307  00F4BC  868C               	bsf	3980,3,c	;volatile
  4308                           
  4309                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4310  00F4BE  0E42               	movlw	66
  4311  00F4C0                     u1807:
  4312  00F4C0  2EE8               	decfsz	wreg,f,c
  4313  00F4C2  D7FE               	bra	u1807
  4314  00F4C4  D000               	nop2	
  4315                           
  4316                           ;lcd.c: 43: data = data << 4;
  4317  00F4C6  3802               	swapf	lcdNibble@data,w,c
  4318  00F4C8  0BF0               	andlw	240
  4319  00F4CA  6E02               	movwf	lcdNibble@data,c
  4320                           
  4321                           ;lcd.c: 45: temp = data & 0xF0;
  4322  00F4CC  5002               	movf	lcdNibble@data,w,c
  4323  00F4CE  0BF0               	andlw	240
  4324  00F4D0  6E01               	movwf	lcdNibble@temp,c
  4325                           
  4326                           ;lcd.c: 46: LATD = LATD & 0x0F;
  4327  00F4D2  508C               	movf	3980,w,c	;volatile
  4328  00F4D4  0B0F               	andlw	15
  4329  00F4D6  6E8C               	movwf	3980,c	;volatile
  4330                           
  4331                           ;lcd.c: 47: LATD = temp | LATD;
  4332  00F4D8  5001               	movf	lcdNibble@temp,w,c
  4333  00F4DA  108C               	iorwf	3980,w,c	;volatile
  4334  00F4DC  6E8C               	movwf	3980,c	;volatile
  4335                           
  4336                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  4337  00F4DE  968C               	bcf	3980,3,c	;volatile
  4338                           
  4339                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4340  00F4E0  0E42               	movlw	66
  4341  00F4E2                     u1817:
  4342  00F4E2  2EE8               	decfsz	wreg,f,c
  4343  00F4E4  D7FE               	bra	u1817
  4344  00F4E6  D000               	nop2	
  4345                           
  4346                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  4347  00F4E8  868C               	bsf	3980,3,c	;volatile
  4348                           
  4349                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4350  00F4EA  0E42               	movlw	66
  4351  00F4EC                     u1827:
  4352  00F4EC  2EE8               	decfsz	wreg,f,c
  4353  00F4EE  D7FE               	bra	u1827
  4354  00F4F0  D000               	nop2	
  4355  00F4F2  0012               	return		;funcret
  4356  00F4F4                     __end_of_lcdNibble:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon2	equ	0xFF1
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function _keycheck *****************
  4375 ;; Defined at:
  4376 ;;		line 26 in file "main.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;		None
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;		None
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      void 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;Total ram usage:        0 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_main
  4400 ;;		_displayLogs
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text27
  4405  00F0C4                     __ptext27:
  4406                           	opt stack 0
  4407  00F0C4                     _keycheck:
  4408                           	opt stack 30
  4409  00F0C4                     l113:
  4410  00F0C4  A281               	btfss	3969,1,c	;volatile
  4411  00F0C6  D7FE               	goto	l113
  4412                           
  4413                           ;main.c: 30: }
  4414                           ;main.c: 31: keypress = (PORTB & 0xF0)>>4;
  4415  00F0C8  3881               	swapf	3969,w,c	;volatile
  4416  00F0CA  0B0F               	andlw	15
  4417  00F0CC  0B0F               	andlw	15
  4418  00F0CE  6E43               	movwf	_keypress,c	;volatile
  4419  00F0D0                     l116:
  4420  00F0D0  B281               	btfsc	3969,1,c	;volatile
  4421  00F0D2  D7FE               	goto	l116
  4422                           
  4423                           ;main.c: 34: }
  4424                           ;main.c: 35: __nop();
  4425  00F0D4  F000               	nop	
  4426                           
  4427                           ;main.c: 36: return;
  4428  00F0D6  0012               	return		;funcret
  4429  00F0D8                     __end_of_keycheck:
  4430                           	opt stack 0
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           intcon2	equ	0xFF1
  4438                           postinc0	equ	0xFEE
  4439                           wreg	equ	0xFE8
  4440                           indf2	equ	0xFDF
  4441                           postinc2	equ	0xFDE
  4442                           postdec2	equ	0xFDD
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _eepromRead *****************
  4448 ;; Defined at:
  4449 ;;		line 30 in file "interface.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  address         1    wreg     char 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  address         1    2[COMRAM] char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      char 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        3 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_displayLogs
  4473 ;;		_updateEEPROM
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text28
  4478  00F190                     __ptext28:
  4479                           	opt stack 0
  4480  00F190                     _eepromRead:
  4481                           	opt stack 29
  4482                           
  4483                           ;incstack = 0
  4484                           ;eepromRead@address stored from wreg
  4485  00F190  6E03               	movwf	eepromRead@address,c
  4486                           
  4487                           ;interface.c: 32: EEADRH = (signed char)(address >> 8);
  4488  00F192  C003  F001         	movff	eepromRead@address,??_eepromRead
  4489  00F196  0E08               	movlw	8
  4490  00F198  6E02               	movwf	(??_eepromRead+1)& (0+255),c
  4491  00F19A                     u425:
  4492  00F19A  3401               	rlcf	??_eepromRead,w,c
  4493  00F19C  3201               	rrcf	??_eepromRead,f,c
  4494  00F19E  2E02               	decfsz	(??_eepromRead+1)& (0+255),f,c
  4495  00F1A0  D7FC               	goto	u425
  4496  00F1A2  5001               	movf	??_eepromRead,w,c
  4497  00F1A4  6EAA               	movwf	4010,c	;volatile
  4498                           
  4499                           ;interface.c: 33: EEADR = (signed char)address;
  4500  00F1A6  C003  FFA9         	movff	eepromRead@address,4009	;volatile
  4501                           
  4502                           ;interface.c: 35: EECON1bits.EEPGD = 0;
  4503  00F1AA  9EA6               	bcf	4006,7,c	;volatile
  4504                           
  4505                           ;interface.c: 36: EECON1bits.CFGS = 0;
  4506  00F1AC  9CA6               	bcf	4006,6,c	;volatile
  4507                           
  4508                           ;interface.c: 37: EECON1bits.RD = 1;
  4509  00F1AE  80A6               	bsf	4006,0,c	;volatile
  4510  00F1B0                     l427:
  4511  00F1B0  B0A6               	btfsc	4006,0,c	;volatile
  4512  00F1B2  D7FE               	goto	l427
  4513                           
  4514                           ;interface.c: 43: return EEDATA;
  4515  00F1B4  50A8               	movf	4008,w,c	;volatile
  4516  00F1B6  0012               	return	
  4517  00F1B8                     __end_of_eepromRead:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon2	equ	0xFF1
  4526                           postinc0	equ	0xFEE
  4527                           wreg	equ	0xFE8
  4528                           indf2	equ	0xFDF
  4529                           postinc2	equ	0xFDE
  4530                           postdec2	equ	0xFDD
  4531                           fsr2h	equ	0xFDA
  4532                           fsr2l	equ	0xFD9
  4533                           status	equ	0xFD8
  4534                           
  4535 ;; *************** function _S1off *****************
  4536 ;; Defined at:
  4537 ;;		line 114 in file "motors.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_main
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text29
  4565  00F2A6                     __ptext29:
  4566                           	opt stack 0
  4567  00F2A6                     _S1off:
  4568                           	opt stack 30
  4569                           
  4570                           ;motors.c: 115: if (s == 4){LATDbits.LATD1 = 1;}
  4571                           
  4572                           ;incstack = 0
  4573  00F2A6  0E04               	movlw	4
  4574  00F2A8  1841               	xorwf	_s,w,c
  4575  00F2AA  1042               	iorwf	_s+1,w,c
  4576  00F2AC  A4D8               	btfss	status,2,c
  4577  00F2AE  D002               	goto	l353
  4578  00F2B0  828C               	bsf	3980,1,c	;volatile
  4579  00F2B2  D001               	goto	l1607
  4580  00F2B4                     l353:
  4581                           
  4582                           ;motors.c: 116: else{LATDbits.LATD1 = 0;}
  4583  00F2B4  928C               	bcf	3980,1,c	;volatile
  4584  00F2B6                     l1607:
  4585                           
  4586                           ;motors.c: 117: if (s == 2){LATBbits.LATB3 = 1;}
  4587  00F2B6  0E02               	movlw	2
  4588  00F2B8  1841               	xorwf	_s,w,c
  4589  00F2BA  1042               	iorwf	_s+1,w,c
  4590  00F2BC  A4D8               	btfss	status,2,c
  4591  00F2BE  D002               	goto	l355
  4592  00F2C0  868A               	bsf	3978,3,c	;volatile
  4593  00F2C2  D001               	goto	l1611
  4594  00F2C4                     l355:
  4595                           
  4596                           ;motors.c: 118: else{LATBbits.LATB3 = 0;}
  4597  00F2C4  968A               	bcf	3978,3,c	;volatile
  4598  00F2C6                     l1611:
  4599                           
  4600                           ;motors.c: 119: if (s == 3){LATBbits.LATB2 = 1;}
  4601  00F2C6  0E03               	movlw	3
  4602  00F2C8  1841               	xorwf	_s,w,c
  4603  00F2CA  1042               	iorwf	_s+1,w,c
  4604  00F2CC  A4D8               	btfss	status,2,c
  4605  00F2CE  D002               	goto	l357
  4606  00F2D0  848A               	bsf	3978,2,c	;volatile
  4607  00F2D2  D001               	goto	l1615
  4608  00F2D4                     l357:
  4609                           
  4610                           ;motors.c: 120: else{LATBbits.LATB2 = 0;}
  4611  00F2D4  948A               	bcf	3978,2,c	;volatile
  4612  00F2D6                     l1615:
  4613                           
  4614                           ;motors.c: 121: if (s == 1){LATBbits.LATB0 = 1;}
  4615  00F2D6  0441               	decf	_s,w,c
  4616  00F2D8  1042               	iorwf	_s+1,w,c
  4617  00F2DA  A4D8               	btfss	status,2,c
  4618  00F2DC  D002               	goto	l359
  4619  00F2DE  808A               	bsf	3978,0,c	;volatile
  4620  00F2E0  0012               	return	
  4621  00F2E2                     l359:
  4622                           
  4623                           ;motors.c: 122: else{LATBbits.LATB0 = 0;}
  4624  00F2E2  908A               	bcf	3978,0,c	;volatile
  4625  00F2E4  0012               	return	
  4626  00F2E6                     __end_of_S1off:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon2	equ	0xFF1
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644 ;; *************** function _S1forward *****************
  4645 ;; Defined at:
  4646 ;;		line 93 in file "motors.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      void 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;Total ram usage:        0 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_main
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text30
  4674  00F266                     __ptext30:
  4675                           	opt stack 0
  4676  00F266                     _S1forward:
  4677                           	opt stack 30
  4678                           
  4679                           ;motors.c: 94: if (s == 1){LATDbits.LATD1 = 1;}
  4680                           
  4681                           ;incstack = 0
  4682  00F266  0441               	decf	_s,w,c
  4683  00F268  1042               	iorwf	_s+1,w,c
  4684  00F26A  A4D8               	btfss	status,2,c
  4685  00F26C  D002               	goto	l331
  4686  00F26E  828C               	bsf	3980,1,c	;volatile
  4687  00F270  D001               	goto	l1575
  4688  00F272                     l331:
  4689                           
  4690                           ;motors.c: 95: else{LATDbits.LATD1 = 0;}
  4691  00F272  928C               	bcf	3980,1,c	;volatile
  4692  00F274                     l1575:
  4693                           
  4694                           ;motors.c: 96: if (s == 2){LATBbits.LATB3 = 1;}
  4695  00F274  0E02               	movlw	2
  4696  00F276  1841               	xorwf	_s,w,c
  4697  00F278  1042               	iorwf	_s+1,w,c
  4698  00F27A  A4D8               	btfss	status,2,c
  4699  00F27C  D002               	goto	l333
  4700  00F27E  868A               	bsf	3978,3,c	;volatile
  4701  00F280  D001               	goto	l1579
  4702  00F282                     l333:
  4703                           
  4704                           ;motors.c: 97: else{LATBbits.LATB3 = 0;}
  4705  00F282  968A               	bcf	3978,3,c	;volatile
  4706  00F284                     l1579:
  4707                           
  4708                           ;motors.c: 98: if (s == 3){LATBbits.LATB2 = 1;}
  4709  00F284  0E03               	movlw	3
  4710  00F286  1841               	xorwf	_s,w,c
  4711  00F288  1042               	iorwf	_s+1,w,c
  4712  00F28A  A4D8               	btfss	status,2,c
  4713  00F28C  D002               	goto	l335
  4714  00F28E  848A               	bsf	3978,2,c	;volatile
  4715  00F290  D001               	goto	l1583
  4716  00F292                     l335:
  4717                           
  4718                           ;motors.c: 99: else{LATBbits.LATB2 = 0;}
  4719  00F292  948A               	bcf	3978,2,c	;volatile
  4720  00F294                     l1583:
  4721                           
  4722                           ;motors.c: 100: if (s == 4){LATBbits.LATB0 = 1;}
  4723  00F294  0E04               	movlw	4
  4724  00F296  1841               	xorwf	_s,w,c
  4725  00F298  1042               	iorwf	_s+1,w,c
  4726  00F29A  A4D8               	btfss	status,2,c
  4727  00F29C  D002               	goto	l337
  4728  00F29E  808A               	bsf	3978,0,c	;volatile
  4729  00F2A0  0012               	return	
  4730  00F2A2                     l337:
  4731                           
  4732                           ;motors.c: 101: else{LATBbits.LATB0 = 0;}
  4733  00F2A2  908A               	bcf	3978,0,c	;volatile
  4734  00F2A4  0012               	return	
  4735  00F2A6                     __end_of_S1forward:
  4736                           	opt stack 0
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           prodh	equ	0xFF4
  4742                           prodl	equ	0xFF3
  4743                           intcon2	equ	0xFF1
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _S1backward *****************
  4754 ;; Defined at:
  4755 ;;		line 104 in file "motors.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;Total ram usage:        0 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text31
  4783  00F226                     __ptext31:
  4784                           	opt stack 0
  4785  00F226                     _S1backward:
  4786                           	opt stack 30
  4787                           
  4788                           ;motors.c: 105: if (s == 4){LATDbits.LATD1 = 1;}
  4789                           
  4790                           ;incstack = 0
  4791  00F226  0E04               	movlw	4
  4792  00F228  1841               	xorwf	_s,w,c
  4793  00F22A  1042               	iorwf	_s+1,w,c
  4794  00F22C  A4D8               	btfss	status,2,c
  4795  00F22E  D002               	goto	l342
  4796  00F230  828C               	bsf	3980,1,c	;volatile
  4797  00F232  D001               	goto	l1591
  4798  00F234                     l342:
  4799                           
  4800                           ;motors.c: 106: else{LATDbits.LATD1 = 0;}
  4801  00F234  928C               	bcf	3980,1,c	;volatile
  4802  00F236                     l1591:
  4803                           
  4804                           ;motors.c: 107: if (s == 3){LATBbits.LATB3 = 1;}
  4805  00F236  0E03               	movlw	3
  4806  00F238  1841               	xorwf	_s,w,c
  4807  00F23A  1042               	iorwf	_s+1,w,c
  4808  00F23C  A4D8               	btfss	status,2,c
  4809  00F23E  D002               	goto	l344
  4810  00F240  868A               	bsf	3978,3,c	;volatile
  4811  00F242  D001               	goto	l1595
  4812  00F244                     l344:
  4813                           
  4814                           ;motors.c: 108: else{LATBbits.LATB3 = 0;}
  4815  00F244  968A               	bcf	3978,3,c	;volatile
  4816  00F246                     l1595:
  4817                           
  4818                           ;motors.c: 109: if (s == 2){LATBbits.LATB2 = 1;}
  4819  00F246  0E02               	movlw	2
  4820  00F248  1841               	xorwf	_s,w,c
  4821  00F24A  1042               	iorwf	_s+1,w,c
  4822  00F24C  A4D8               	btfss	status,2,c
  4823  00F24E  D002               	goto	l346
  4824  00F250  848A               	bsf	3978,2,c	;volatile
  4825  00F252  D001               	goto	l1599
  4826  00F254                     l346:
  4827                           
  4828                           ;motors.c: 110: else{LATBbits.LATB2 = 0;}
  4829  00F254  948A               	bcf	3978,2,c	;volatile
  4830  00F256                     l1599:
  4831                           
  4832                           ;motors.c: 111: if (s == 1){LATBbits.LATB0 = 1;}
  4833  00F256  0441               	decf	_s,w,c
  4834  00F258  1042               	iorwf	_s+1,w,c
  4835  00F25A  A4D8               	btfss	status,2,c
  4836  00F25C  D002               	goto	l348
  4837  00F25E  808A               	bsf	3978,0,c	;volatile
  4838  00F260  0012               	return	
  4839  00F262                     l348:
  4840                           
  4841                           ;motors.c: 112: else{LATBbits.LATB0 = 0;}
  4842  00F262  908A               	bcf	3978,0,c	;volatile
  4843  00F264  0012               	return	
  4844  00F266                     __end_of_S1backward:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           prodh	equ	0xFF4
  4851                           prodl	equ	0xFF3
  4852                           intcon2	equ	0xFF1
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _PWM2off *****************
  4863 ;; Defined at:
  4864 ;;		line 42 in file "motors.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        0 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		_main
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text32
  4892  00F086                     __ptext32:
  4893                           	opt stack 0
  4894  00F086                     _PWM2off:
  4895                           	opt stack 30
  4896                           
  4897                           ;motors.c: 43: CCP2CONbits.DC2B0 = 0;
  4898                           
  4899                           ;incstack = 0
  4900  00F086  98BA               	bcf	4026,4,c	;volatile
  4901                           
  4902                           ;motors.c: 44: CCP2CONbits.DC2B1 = 0;
  4903  00F088  9ABA               	bcf	4026,5,c	;volatile
  4904                           
  4905                           ;motors.c: 46: CCPR2L = 0;
  4906  00F08A  0E00               	movlw	0
  4907  00F08C  6EBB               	movwf	4027,c	;volatile
  4908  00F08E  0012               	return		;funcret
  4909  00F090                     __end_of_PWM2off:
  4910                           	opt stack 0
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon2	equ	0xFF1
  4918                           postinc0	equ	0xFEE
  4919                           wreg	equ	0xFE8
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           fsr2h	equ	0xFDA
  4924                           fsr2l	equ	0xFD9
  4925                           status	equ	0xFD8
  4926                           
  4927 ;; *************** function _PWM2 *****************
  4928 ;; Defined at:
  4929 ;;		line 28 in file "motors.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  duty            2    0[COMRAM] int 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4943 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;Total ram usage:        4 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; This function calls:
  4950 ;;		Nothing
  4951 ;; This function is called by:
  4952 ;;		_main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text33
  4957  00F3B8                     __ptext33:
  4958                           	opt stack 0
  4959  00F3B8                     _PWM2:
  4960                           	opt stack 30
  4961                           
  4962                           ;motors.c: 36: CCP2CONbits.DC2B0 = duty & 1;
  4963                           
  4964                           ;incstack = 0
  4965  00F3B8  C001  F003         	movff	PWM2@duty,??_PWM2
  4966  00F3BC  0E01               	movlw	1
  4967  00F3BE  1603               	andwf	??_PWM2,f,c
  4968  00F3C0  3A03               	swapf	??_PWM2,f,c
  4969  00F3C2  50BA               	movf	4026,w,c	;volatile
  4970  00F3C4  1803               	xorwf	??_PWM2,w,c
  4971  00F3C6  0BEF               	andlw	-17
  4972  00F3C8  1803               	xorwf	??_PWM2,w,c
  4973  00F3CA  6EBA               	movwf	4026,c	;volatile
  4974                           
  4975                           ;motors.c: 37: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  4976  00F3CC  3402               	rlcf	PWM2@duty+1,w,c
  4977  00F3CE  3002               	rrcf	PWM2@duty+1,w,c
  4978  00F3D0  6E04               	movwf	(??_PWM2+1)& (0+255),c
  4979  00F3D2  3001               	rrcf	PWM2@duty,w,c
  4980  00F3D4  6E03               	movwf	??_PWM2& (0+255),c
  4981  00F3D6  0E01               	movlw	1
  4982  00F3D8  1603               	andwf	??_PWM2,f,c
  4983  00F3DA  3A03               	swapf	??_PWM2,f,c
  4984  00F3DC  4603               	rlncf	??_PWM2,f,c
  4985  00F3DE  50BA               	movf	4026,w,c	;volatile
  4986  00F3E0  1803               	xorwf	??_PWM2,w,c
  4987  00F3E2  0BDF               	andlw	-33
  4988  00F3E4  1803               	xorwf	??_PWM2,w,c
  4989  00F3E6  6EBA               	movwf	4026,c	;volatile
  4990                           
  4991                           ;motors.c: 38: CCPR2L = (duty >> 2);
  4992  00F3E8  C001  F003         	movff	PWM2@duty,??_PWM2
  4993  00F3EC  C002  F004         	movff	PWM2@duty+1,??_PWM2+1
  4994  00F3F0  3404               	rlcf	??_PWM2+1,w,c
  4995  00F3F2  3204               	rrcf	??_PWM2+1,f,c
  4996  00F3F4  3203               	rrcf	??_PWM2,f,c
  4997  00F3F6  3404               	rlcf	??_PWM2+1,w,c
  4998  00F3F8  3204               	rrcf	??_PWM2+1,f,c
  4999  00F3FA  3203               	rrcf	??_PWM2,f,c
  5000  00F3FC  5003               	movf	??_PWM2,w,c
  5001  00F3FE  6EBB               	movwf	4027,c	;volatile
  5002  00F400  0012               	return		;funcret
  5003  00F402                     __end_of_PWM2:
  5004                           	opt stack 0
  5005                           tblptru	equ	0xFF8
  5006                           tblptrh	equ	0xFF7
  5007                           tblptrl	equ	0xFF6
  5008                           tablat	equ	0xFF5
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon2	equ	0xFF1
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           indf2	equ	0xFDF
  5015                           postinc2	equ	0xFDE
  5016                           postdec2	equ	0xFDD
  5017                           fsr2h	equ	0xFDA
  5018                           fsr2l	equ	0xFD9
  5019                           status	equ	0xFD8
  5020                           
  5021 ;; *************** function _PWM1off *****************
  5022 ;; Defined at:
  5023 ;;		line 22 in file "motors.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  1    wreg      void 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        0 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_main
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text34
  5051  00F07C                     __ptext34:
  5052                           	opt stack 0
  5053  00F07C                     _PWM1off:
  5054                           	opt stack 30
  5055                           
  5056                           ;motors.c: 23: CCP1CONbits.DC1B0 = 0;
  5057                           
  5058                           ;incstack = 0
  5059  00F07C  98BD               	bcf	4029,4,c	;volatile
  5060                           
  5061                           ;motors.c: 24: CCP1CONbits.DC1B1 = 0;
  5062  00F07E  9ABD               	bcf	4029,5,c	;volatile
  5063                           
  5064                           ;motors.c: 25: CCPR1L = 0;
  5065  00F080  0E00               	movlw	0
  5066  00F082  6EBE               	movwf	4030,c	;volatile
  5067  00F084  0012               	return		;funcret
  5068  00F086                     __end_of_PWM1off:
  5069                           	opt stack 0
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           intcon2	equ	0xFF1
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           indf2	equ	0xFDF
  5080                           postinc2	equ	0xFDE
  5081                           postdec2	equ	0xFDD
  5082                           fsr2h	equ	0xFDA
  5083                           fsr2l	equ	0xFD9
  5084                           status	equ	0xFD8
  5085                           
  5086 ;; *************** function _PWM1 *****************
  5087 ;; Defined at:
  5088 ;;		line 8 in file "motors.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  duty            2    0[COMRAM] int 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;Total ram usage:        4 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text35
  5116  00F36E                     __ptext35:
  5117                           	opt stack 0
  5118  00F36E                     _PWM1:
  5119                           	opt stack 30
  5120                           
  5121                           ;motors.c: 16: CCP1CONbits.DC1B0 = duty & 1;
  5122                           
  5123                           ;incstack = 0
  5124  00F36E  C001  F003         	movff	PWM1@duty,??_PWM1
  5125  00F372  0E01               	movlw	1
  5126  00F374  1603               	andwf	??_PWM1,f,c
  5127  00F376  3A03               	swapf	??_PWM1,f,c
  5128  00F378  50BD               	movf	4029,w,c	;volatile
  5129  00F37A  1803               	xorwf	??_PWM1,w,c
  5130  00F37C  0BEF               	andlw	-17
  5131  00F37E  1803               	xorwf	??_PWM1,w,c
  5132  00F380  6EBD               	movwf	4029,c	;volatile
  5133                           
  5134                           ;motors.c: 17: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  5135  00F382  3402               	rlcf	PWM1@duty+1,w,c
  5136  00F384  3002               	rrcf	PWM1@duty+1,w,c
  5137  00F386  6E04               	movwf	(??_PWM1+1)& (0+255),c
  5138  00F388  3001               	rrcf	PWM1@duty,w,c
  5139  00F38A  6E03               	movwf	??_PWM1& (0+255),c
  5140  00F38C  0E01               	movlw	1
  5141  00F38E  1603               	andwf	??_PWM1,f,c
  5142  00F390  3A03               	swapf	??_PWM1,f,c
  5143  00F392  4603               	rlncf	??_PWM1,f,c
  5144  00F394  50BD               	movf	4029,w,c	;volatile
  5145  00F396  1803               	xorwf	??_PWM1,w,c
  5146  00F398  0BDF               	andlw	-33
  5147  00F39A  1803               	xorwf	??_PWM1,w,c
  5148  00F39C  6EBD               	movwf	4029,c	;volatile
  5149                           
  5150                           ;motors.c: 18: CCPR1L = (duty >> 2);
  5151  00F39E  C001  F003         	movff	PWM1@duty,??_PWM1
  5152  00F3A2  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  5153  00F3A6  3404               	rlcf	??_PWM1+1,w,c
  5154  00F3A8  3204               	rrcf	??_PWM1+1,f,c
  5155  00F3AA  3203               	rrcf	??_PWM1,f,c
  5156  00F3AC  3404               	rlcf	??_PWM1+1,w,c
  5157  00F3AE  3204               	rrcf	??_PWM1+1,f,c
  5158  00F3B0  3203               	rrcf	??_PWM1,f,c
  5159  00F3B2  5003               	movf	??_PWM1,w,c
  5160  00F3B4  6EBE               	movwf	4030,c	;volatile
  5161  00F3B6  0012               	return		;funcret
  5162  00F3B8                     __end_of_PWM1:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           intcon2	equ	0xFF1
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           indf2	equ	0xFDF
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           prodh	equ	0xFF4
  5184                           prodl	equ	0xFF3
  5185                           intcon2	equ	0xFF1
  5186                           postinc0	equ	0xFEE
  5187                           wreg	equ	0xFE8
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195                           	psect	rparam
  5196  0000                     tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon2	equ	0xFF1
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8


Data Sizes:
    Strings     243
    Constant    42
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     53      67
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_19(CODE[15]), STR_18(CODE[16]), STR_17(CODE[16]), STR_16(CODE[16]), 
		 -> STR_15(CODE[14]), STR_14(CODE[16]), STR_13(CODE[8]), STR_12(CODE[15]), 
		 -> STR_11(CODE[8]), STR_10(CODE[16]), STR_9(CODE[19]), STR_8(CODE[3]), 
		 -> STR_7(CODE[12]), STR_6(CODE[13]), STR_5(CODE[13]), STR_4(CODE[13]), 
		 -> STR_3(CODE[13]), STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLogs
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _updateEEPROM->_timePassed
    _eepromWrite->_eepromRead
    _timePassed->___wmul
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   16322
                                             35 COMRAM    18    18      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                         _S1backward
                          _S1forward
                              _S1off
                             ___wmul
                        _displayLogs
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _timePassed
                       _updateEEPROM
                      _updateStepper
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     504
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateStepper                                        4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _updateEEPROM                                         2     0      2     438
                                             12 COMRAM     2     0      2
                         _eepromRead
                        _eepromWrite
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     322
                                              3 COMRAM     4     3      1
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _timePassed                                           6     4      2    1099
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     466
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    4093
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    4123
                                             34 COMRAM     1     1      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    4003
                                             12 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     927
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _S1off                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 4     2      2     130
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _S1backward
   _S1forward
   _S1off
   ___wmul
   _displayLogs
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _timePassed
     ___wmul
   _updateEEPROM
     _eepromRead
     _eepromWrite
       _eepromRead (ARG)
     _timePassed (ARG)
       ___wmul
   _updateStepper
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     35      43       1       52.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      43      34        0.0%
DATA                 0      0      43       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Mar 10 02:34:52 2017

            _updateStepper F70C                          _s 0041               ?_displayLogs 0001  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l113 F0C4                        l122 F0E8  
                      l123 F0E4                        l116 F0D0                        l142 FDDA  
                      l216 F0B2                        l145 FDCC                        l331 F272  
                      l333 F282                        l342 F234                        l335 F292  
                      l344 F244                        l337 F2A2                        l353 F2B4  
                      l433 F21C                        l346 F254                        l355 F2C4  
                      l427 F1B0                        l348 F262                        l357 F2D4  
                      l359 F2E2                        l487 F95A                        l932 F494  
                      l942 F31E                        l879 F6FA               __CFG_CPB$OFF 000000  
                      u400 F188                        _PR2 000FCB                        u520 F77C  
                      _PEN 007E2A                        u425 F19A                        u530 F79E  
             __CFG_CPD$OFF 000000                        _SEN 007E28                        prod 000FF3  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l2003 F48A                       l2011 F2F4                       l2013 F2FC  
                     l2015 F300                       l2121 FA58                       l2033 F878  
                     l2019 F314                       l2115 FA2C                       l2107 FA02  
                     l2043 F89C                       l2203 F5E4                       l2133 FA84  
                     l2109 FA12                       l2061 F92C                       l2037 F888  
                     l2213 F608                       l2135 FA8C                       l2143 FAB2  
                     l2127 FA6E                       l2119 FA50                       l2039 F896  
                     l2207 F5EC                       l2145 FAB8                       l2153 FB42  
                     l2073 F988                       l2057 F928                       l2049 F8CA  
                     l1611 F2C6                       l2147 FAFC                       l2155 FB52  
                     l2139 FAA0                       l2091 F9D2                       l1523 F78E  
                     l1515 F742                       l1427 F18A                       l2411 FDFC  
                     l2403 FDE6                       l2157 FB58                       l2093 F9D6  
                     l2077 F9A2                       l2325 FC6C                       l2333 FC92  
                     l1615 F2D6                       l1607 F2B6                       l2079 F9A6  
                     l2159 FB60                       l1471 F130                       l1473 F13E  
                     l2425 FE48                       l2329 FC78                       l2427 FE78  
                     l2291 FBBE                       l2381 FD6A                       l2357 FCF4  
                     l2349 FCD4                       l1591 F236                       l1583 F294  
                     l1575 F274                       l1595 F246                       l1579 F284  
                     l1599 F256                       l1953 F118                       l1971 F6B8  
                     l1981 F6EC                       l1973 F6BC                       l1991 F462  
                     l1993 F46A                       l1969 F6AC                       l1995 F46E  
                     _ADFM 007E07                       STR_1 FF5F                       STR_2 FF6F  
                     STR_3 FFD2                       STR_4 FFC5                       STR_5 FFB8  
                     STR_6 FFAB                       STR_7 FFDF                       STR_8 FFFB  
                     STR_9 FF0B                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u1195 F522                       u1435 F1F8                       u1570 FE18  
                     u1707 FD92                       u1717 FE8C                       u1807 F4C0  
                     u1727 FEAC                       u1647 FBB4                       u1817 F4E2  
                     u1737 F136                       u1657 FBF6                       u1827 F4EC  
                     u1747 F32E                       u1667 FCA8                       u1757 F362  
                     u1677 FD04                       u1767 F7B4                       u1687 FD3A  
                     u1777 F7FA                       u1697 FD78                       u1787 F840  
                     u1797 F4B6                       _RCEN 007E2B                       _PWM1 F36E  
                     _PWM2 F3B8                       _RSEN 007E29            __end_of_PWM1off F086  
          __end_of_PWM2off F090                       _main FB7A                       _curr 003D  
                     _keys FEE1                       _time 0036                       _prev 003F  
                     fsr2h 000FDA                       indf2 000FDF                       fsr2l 000FD9  
              main@standby 0034                       prodh 000FF4               main@canCheck 002E  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
           ?_updateStepper 0001              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              ?_S1backward 0001                      ?_PWM1 0001                      ?_PWM2 0001  
         ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D                      _ADRES 000FC3                      _EEADR 000FA9  
                    STR_10 FF2F                      STR_11 FFF3                      STR_12 FF8E  
                    STR_20 FF1E                      STR_13 FFEB                      STR_14 FF4F  
                    STR_15 FF9D                      STR_16 FF4F                      STR_17 FF3F  
                    STR_18 FF4F                      STR_19 FF7F            __end_of___lldiv F70C  
                    _T0CON 000FD5                      _T2CON 000FCA            __end_of___lwdiv F49E  
          __end_of___lwmod F328                      _TMR0L 000FD6                      _S1off F2A6  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000            timePassed@start 0007              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst F0A6             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC F144            __end_of_initLCD F36E  
           __CFG_EBTRB$OFF 000000         __size_of_S1forward 0040            __end_of_dpowers FEFC  
             main@sodaLoad 002C            __end_of_isdigit F120                      _putch F0A6  
                    main@s 0032                      tablat 000FF5                      status 000FD8  
             main@soupLoad 002A             __CFG_PBADEN$ON 000000               __end_of_PWM1 F3B8  
             __end_of_PWM2 F402            __initialization F0EC               __end_of_main FEE0  
             __end_of_keys FEF2                     ??_PWM1 0003                     ??_PWM2 0003  
                   ??_main 0024              __activetblptr 000002                     ?_S1off 0001  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002         ??_I2C_Master_Start 0002  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0004  
                ??_PWM1off 0001                  ??_PWM2off 0001                     _ADRESH 000FC4  
                   _EEADRH 000FAA                     _EEDATA 000FA8                     _CCPR1L 000FBE  
                   _CCPR2L 000FBB                     _EECON2 000FA7        __size_of_S1backward 0040  
                   ?_putch 0001                     _CVRCON 000FB5                     _OSCCON 000FD3  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9            ??_updateStepper 0001             __CFG_XINST$OFF 000000  
     __size_of_eepromWrite 0038          __end_of_S1forward F2A6                     ___wmul F144  
           __CFG_STVREN$ON 000000                  ??___lldiv 0009                  ??___lwdiv 0005  
                ??___lwmod 000C           __end_of_keycheck F0D8                     clear_0 F0F2  
          eepromWrite@data 0004           __end_of_currtime FF0B                  ??_lcdInst 0003  
                   _printf F86E       __size_of_displayLogs 00C6                     main@dc 0028  
                ??_readADC 0001                  ??_initLCD 0004                  ??_isdigit 0001  
             __mediumconst FEE0                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8              ?_keyinterrupt 0001              main@startTime 0030  
               __accesstop 0080    __end_of__initialization F0F8              ___rparam_used 000001  
            __end_of_S1off F2E6             __pcstackCOMRAM 0001              __end_of_putch F0B2  
       __size_of_lcdNibble 0056          eepromRead@address 0003                    ??_S1off 0001  
           ??_keyinterrupt 0001                    ??_putch 0003               ??_S1backward 0001  
                  ?___wmul 0001                    _CCP1CON 000FBD                    _CCP2CON 000FBA  
         updateEEPROM@time 000D                    ?_printf 000D                 _eepromRead F190  
                  _PWM1off F07C                    _PWM2off F086                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7         __end_of_S1backward F266  
                ?_keycheck 0001          __end_of_lcdNibble F4F4                    __Hparam 0000  
                  __Lparam 0000                    ___lldiv F68A            __size_of___wmul 0026  
                  ___lwdiv F44C                    ___lwmod F2E6                  _CMCONbits 000FB4  
               _homescreen F54E                    __pcinit F0EC                    __ramtop 1000  
               _initialize F616                    _lcdInst F09A                    __ptext0 FB7A  
                  __ptext1 F5B0                    __ptext2 F090                    __ptext3 F074  
                  __ptext4 F06C                    __ptext5 F16A                    __ptext6 F0B2  
                  __ptext7 F70C                    __ptext8 F1B8                    __ptext9 F1EE  
          __size_of_printf 030C                    _readADC F120                    _initLCD F328  
        __end_of_hexpowers FF04                    _dpowers FEF2                    _isdigit F102  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008       end_of_initialization F0F8                 ??_keycheck 0001  
            __Lmediumconst FEE0  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0005            ___lldiv@counter 000D       __end_of_keyinterrupt F0EC  
               _timePassed F402                    printf@c 0022                    printf@f 000D  
         I2C_Master_Init@c 000E           I2C_Master_Read@a 0002                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                  _S1forward F266  
                _PORTBbits 000F81                ?_eepromRead 0001                 _updateTime F5B0  
            ?_updateEEPROM 000D                _CCP1CONbits 000FBD              ??_eepromWrite 0005  
              printf@width 0020                _CCP2CONbits 000FBA      __end_of_updateStepper F7A8  
            ??_displayLogs 0023                ?_homescreen 0001             __end_of___wmul F16A  
              ?_initialize 0001                 ?_S1forward 0001             __end_of_printf FB7A  
      start_initialization F0EC                updateTime@j 0004             ??_updateEEPROM 000F  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002        __size_of_eepromRead 0028                ?_timePassed 0007  
      __end_of_eepromWrite F226                   ??___wmul 0005           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 0015        __end_of_displayLogs F86E                __pbssCOMRAM 0036  
              ?_updateTime 0001               _isdigit$1142 0002                   ?_PWM1off 0001  
                 ?_PWM2off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0014  
      __size_of_initialize 0074           _I2C_Master_Start F06C           _I2C_Master_Write F090  
        __size_of_keycheck 0014           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
            __pmediumconst FEE0                  _lcdNibble F49E                   ?___lldiv 0001  
                 PWM1@duty 0001                   PWM2@duty 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                ??_S1forward 0001                   ?_lcdInst 0001  
                 ?_readADC 0001                   ?_initLCD 0001                   ?_isdigit 0001  
           __size_of_S1off 0040               _keyinterrupt F0D8                  _hexpowers FEFC  
         ___lwdiv@quotient 0005        __size_of_timePassed 004A             __size_of_putch 000C  
       eepromWrite@address 0007             ___wmul@product 0005                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite F1EE                   _PIR2bits 000FA1  
         __CFG_WDTPS$32768 000000        __size_of_updateTime 0066                 ?_lcdNibble 0001  
     __end_of_updateEEPROM F1EE                _displayLogs F7A8                 _ADCON0bits 000FC2  
        ___wmul@multiplier 0001              lcdNibble@data 0002               ??_eepromRead 0001  
               printf@flag 001F              lcdNibble@temp 0001                 printf@prec 001C  
      I2C_Master_Read@temp 0003           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
               _EECON1bits 000FA6                   __Hrparam 0000                   __Lrparam 0000  
       __end_of_eepromRead F1B8         __CFG_BOREN$SBORDIS 000000               ??_homescreen 0023  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0002               ??_initialize 0016           __size_of_lcdInst 000C  
          _I2C_Master_Init F4F4           __size_of_readADC 0024            _I2C_Master_Read F16A  
         __size_of_initLCD 0046            _I2C_Master_Wait F0B2            _I2C_Master_Stop F074  
         __size_of_isdigit 001E            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 F402                   __ptext11 F120                   __ptext20 F0A6  
                 __ptext12 F0D8                   __ptext21 F102                   __ptext13 F616  
                 __ptext30 F266                   __ptext22 F144                   __ptext14 F328  
                 __ptext31 F226                   __ptext23 F2E6                   __ptext15 F4F4  
                 __ptext32 F086                   __ptext24 F44C                   __ptext16 F68A  
                 __ptext33 F3B8                   __ptext25 F09A                   __ptext17 F54E  
                 __ptext34 F07C                   __ptext26 F49E                   __ptext18 F7A8  
                 __ptext35 F36E                   __ptext27 F0C4                   __ptext19 F86E  
                 __ptext28 F190                   __ptext29 F2A6              __size_of_PWM1 004A  
            __size_of_PWM2 004A         __end_of_homescreen F5B0                   _keycheck F0C4  
            __size_of_main 0366                   _currtime FF04                   _keypress 0043  
       __end_of_initialize F68A               ??_timePassed 0009                ??_lcdNibble 0001  
                printf@idx 0019                  printf@val 001D            main@prevUnblock 0026  
                putch@data 0003   __end_of_I2C_Master_Start F074                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write F09A               ??_updateTime 0004                   isdigit@c 0003  
   __size_of_updateStepper 009C         __end_of_timePassed F44C           ___lwmod@dividend 0008  
         ___lldiv@dividend 0001      __size_of_updateEEPROM 0036                 _S1backward F226  
                 printf@ap 001A         __end_of_updateTime F616    __end_of_I2C_Master_Init F54E  
  __end_of_I2C_Master_Read F190    __end_of_I2C_Master_Wait F0C4    __end_of_I2C_Master_Stop F07C  
              lcdInst@data 0003           ___lldiv@quotient 0009          I2C_Master_Write@d 0002  
          ___lwmod@divisor 000A            ___lwmod@counter 000C               _updateEEPROM F1B8  
             ?_eepromWrite 0004  
