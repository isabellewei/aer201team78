

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 01 00:59:19 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.41
    38                           ; Generated 25/01/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	smallconst
    73  001000                     __psmallconst:
    74                           	opt stack 0
    75  001000  00                 	db	0
    76  001001                     _keys:
    77                           	opt stack 0
    78  001001  31                 	db	49
    79  001002  32                 	db	50
    80  001003  33                 	db	51
    81  001004  41                 	db	65
    82  001005  34                 	db	52
    83  001006  35                 	db	53
    84  001007  36                 	db	54
    85  001008  42                 	db	66
    86  001009  37                 	db	55
    87  00100A  38                 	db	56
    88  00100B  39                 	db	57
    89  00100C  43                 	db	67
    90  00100D  2A                 	db	42
    91  00100E  30                 	db	48
    92  00100F  23                 	db	35
    93  001010  44                 	db	68
    94  001011  00                 	db	0
    95  001012                     __end_of_keys:
    96                           	opt stack 0
    97  001012                     _hexpowers:
    98                           	opt stack 0
    99  001012  0001               	dw	1
   100  001014  0010               	dw	16
   101  001016  0100               	dw	256
   102  001018  1000               	dw	4096
   103  00101A                     __end_of_hexpowers:
   104                           	opt stack 0
   105  00101A                     _currtime:
   106                           	opt stack 0
   107  00101A  30                 	db	48
   108  00101B  11                 	db	17
   109  00101C  20                 	db	32
   110  00101D  03                 	db	3
   111  00101E  07                 	db	7
   112  00101F  02                 	db	2
   113  001020  17                 	db	23
   114  001021                     __end_of_currtime:
   115                           	opt stack 0
   116  0000                     _PIR2bits	set	4001
   117  0000                     _EECON2	set	4007
   118  0000                     _EEDATA	set	4008
   119  0000                     _EECON1bits	set	4006
   120  0000                     _EEADR	set	4009
   121  0000                     _EEADRH	set	4010
   122  0000                     _CCP1CONbits	set	4029
   123  0000                     _SSPBUF	set	4041
   124  0000                     _SSPADD	set	4040
   125  0000                     _SSPCON2	set	4037
   126  0000                     _SSPCON1	set	4038
   127  0000                     _SSPSTAT	set	4039
   128  0000                     _ADRESH	set	4036
   129  0000                     _CMCONbits	set	4020
   130  0000                     _CVRCON	set	4021
   131  0000                     _ADCON1	set	4033
   132  0000                     _LATEbits	set	3981
   133  0000                     _LATDbits	set	3980
   134  0000                     _LATE	set	3981
   135  0000                     _LATD	set	3980
   136  0000                     _LATC	set	3979
   137  0000                     _LATB	set	3978
   138  0000                     _LATA	set	3977
   139  0000                     _T2CON	set	4042
   140  0000                     _CCPR1L	set	4030
   141  0000                     _CCP1CON	set	4029
   142  0000                     _PR2	set	4043
   143  0000                     _TRISE	set	3990
   144  0000                     _TRISD	set	3989
   145  0000                     _TRISC	set	3988
   146  0000                     _TRISB	set	3987
   147  0000                     _TRISA	set	3986
   148  0000                     _OSCTUNEbits	set	3995
   149  0000                     _OSCCON	set	4051
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTBbits	set	3969
   152  0000                     _ADCON0bits	set	4034
   153  0000                     _ADCON0	set	4034
   154  0000                     _ACKEN	set	32300
   155  0000                     _ACKDT	set	32301
   156  0000                     _RCEN	set	32299
   157  0000                     _PEN	set	32298
   158  0000                     _RSEN	set	32297
   159  0000                     _SEN	set	32296
   160  0000                     _TRISC4	set	31908
   161  0000                     _TRISC3	set	31907
   162  0000                     _ADFM	set	32263
   163  0000                     _nRBPU	set	32655
   164  001021                     STR_13:
   165  001021  30                 	db	48	;'0'
   166  001022  31                 	db	49	;'1'
   167  001023  32                 	db	50	;'2'
   168  001024  33                 	db	51	;'3'
   169  001025  34                 	db	52	;'4'
   170  001026  35                 	db	53	;'5'
   171  001027  36                 	db	54	;'6'
   172  001028  37                 	db	55	;'7'
   173  001029  38                 	db	56	;'8'
   174  00102A  39                 	db	57	;'9'
   175  00102B  61                 	db	97	;'a'
   176  00102C  62                 	db	98	;'b'
   177  00102D  63                 	db	99	;'c'
   178  00102E  64                 	db	100	;'d'
   179  00102F  65                 	db	101	;'e'
   180  001030  66                 	db	102	;'f'
   181  001031  00                 	db	0
   182  001032                     STR_7:
   183  001032  52                 	db	82	;'R'
   184  001033  75                 	db	117	;'u'
   185  001034  6E                 	db	110	;'n'
   186  001035  23                 	db	35
   187  001036  31                 	db	49	;'1'
   188  001037  20                 	db	32
   189  001038  20                 	db	32
   190  001039  20                 	db	32
   191  00103A  20                 	db	32
   192  00103B  41                 	db	65	;'A'
   193  00103C  3A                 	db	58	;':'
   194  00103D  4E                 	db	78	;'N'
   195  00103E  65                 	db	101	;'e'
   196  00103F  78                 	db	120	;'x'
   197  001040  74                 	db	116	;'t'
   198  001041  00                 	db	0
   199  001042                     STR_1:
   200  001042  25                 	db	37
   201  001043  30                 	db	48	;'0'
   202  001044  32                 	db	50	;'2'
   203  001045  78                 	db	120	;'x'
   204  001046  2F                 	db	47
   205  001047  25                 	db	37
   206  001048  30                 	db	48	;'0'
   207  001049  32                 	db	50	;'2'
   208  00104A  78                 	db	120	;'x'
   209  00104B  2F                 	db	47
   210  00104C  25                 	db	37
   211  00104D  30                 	db	48	;'0'
   212  00104E  32                 	db	50	;'2'
   213  00104F  78                 	db	120	;'x'
   214  001050  20                 	db	32
   215  001051  00                 	db	0
   216  001052                     STR_5:
   217  001052  53                 	db	83	;'S'
   218  001053  6F                 	db	111	;'o'
   219  001054  72                 	db	114	;'r'
   220  001055  74                 	db	116	;'t'
   221  001056  69                 	db	105	;'i'
   222  001057  6E                 	db	110	;'n'
   223  001058  67                 	db	103	;'g'
   224  001059  20                 	db	32
   225  00105A  63                 	db	99	;'c'
   226  00105B  61                 	db	97	;'a'
   227  00105C  6E                 	db	110	;'n'
   228  00105D  73                 	db	115	;'s'
   229  00105E  2E                 	db	46
   230  00105F  2E                 	db	46
   231  001060  2E                 	db	46
   232  001061  00                 	db	0
   233  001062                     STR_6:
   234  001062  41                 	db	65	;'A'
   235  001063  6E                 	db	110	;'n'
   236  001064  79                 	db	121	;'y'
   237  001065  20                 	db	32
   238  001066  6B                 	db	107	;'k'
   239  001067  65                 	db	101	;'e'
   240  001068  79                 	db	121	;'y'
   241  001069  20                 	db	32
   242  00106A  74                 	db	116	;'t'
   243  00106B  6F                 	db	111	;'o'
   244  00106C  20                 	db	32
   245  00106D  73                 	db	115	;'s'
   246  00106E  74                 	db	116	;'t'
   247  00106F  6F                 	db	111	;'o'
   248  001070  70                 	db	112	;'p'
   249  001071  00                 	db	0
   250  001072                     STR_12:
   251  001072  23                 	db	35
   252  001073  20                 	db	32
   253  001074  73                 	db	115	;'s'
   254  001075  6F                 	db	111	;'o'
   255  001076  75                 	db	117	;'u'
   256  001077  70                 	db	112	;'p'
   257  001078  20                 	db	32
   258  001079  63                 	db	99	;'c'
   259  00107A  61                 	db	97	;'a'
   260  00107B  6E                 	db	110	;'n'
   261  00107C  73                 	db	115	;'s'
   262  00107D  3A                 	db	58	;':'
   263  00107E  20                 	db	32
   264  00107F  34                 	db	52	;'4'
   265  001080  00                 	db	0
   266  001081                     STR_10:
   267  001081  23                 	db	35
   268  001082  20                 	db	32
   269  001083  73                 	db	115	;'s'
   270  001084  6F                 	db	111	;'o'
   271  001085  64                 	db	100	;'d'
   272  001086  61                 	db	97	;'a'
   273  001087  20                 	db	32
   274  001088  63                 	db	99	;'c'
   275  001089  61                 	db	97	;'a'
   276  00108A  6E                 	db	110	;'n'
   277  00108B  73                 	db	115	;'s'
   278  00108C  3A                 	db	58	;':'
   279  00108D  20                 	db	32
   280  00108E  36                 	db	54	;'6'
   281  00108F  00                 	db	0
   282  001090                     STR_3:
   283  001090  25                 	db	37
   284  001091  30                 	db	48	;'0'
   285  001092  32                 	db	50	;'2'
   286  001093  78                 	db	120	;'x'
   287  001094  3A                 	db	58	;':'
   288  001095  25                 	db	37
   289  001096  30                 	db	48	;'0'
   290  001097  32                 	db	50	;'2'
   291  001098  78                 	db	120	;'x'
   292  001099  3A                 	db	58	;':'
   293  00109A  25                 	db	37
   294  00109B  30                 	db	48	;'0'
   295  00109C  32                 	db	50	;'2'
   296  00109D  78                 	db	120	;'x'
   297  00109E  00                 	db	0
   298  00109F                     STR_8:
   299  00109F  23                 	db	35
   300  0010A0  20                 	db	32
   301  0010A1  6F                 	db	111	;'o'
   302  0010A2  66                 	db	102	;'f'
   303  0010A3  20                 	db	32
   304  0010A4  63                 	db	99	;'c'
   305  0010A5  61                 	db	97	;'a'
   306  0010A6  6E                 	db	110	;'n'
   307  0010A7  73                 	db	115	;'s'
   308  0010A8  3A                 	db	58	;':'
   309  0010A9  20                 	db	32
   310  0010AA  31                 	db	49	;'1'
   311  0010AB  30                 	db	48	;'0'
   312  0010AC  00                 	db	0
   313  0010AD                     STR_4:
   314  0010AD  20                 	db	32
   315  0010AE  32                 	db	50	;'2'
   316  0010AF  3A                 	db	58	;':'
   317  0010B0  4C                 	db	76	;'L'
   318  0010B1  6F                 	db	111	;'o'
   319  0010B2  67                 	db	103	;'g'
   320  0010B3  73                 	db	115	;'s'
   321  0010B4  00                 	db	0
   322  0010B5                     STR_2:
   323  0010B5  33                 	db	51	;'3'
   324  0010B6  3A                 	db	58	;':'
   325  0010B7  53                 	db	83	;'S'
   326  0010B8  74                 	db	116	;'t'
   327  0010B9  61                 	db	97	;'a'
   328  0010BA  72                 	db	114	;'r'
   329  0010BB  74                 	db	116	;'t'
   330  0010BC  00                 	db	0
   331  0000                     
   332                           ; #config settings
   333  0010BD  00                 	db	0	; dummy byte at the end
   334  0000                     
   335                           	psect	cinit
   336  001826                     __pcinit:
   337                           	opt stack 0
   338  001826                     start_initialization:
   339                           	opt stack 0
   340  001826                     __initialization:
   341                           	opt stack 0
   342                           
   343                           ; Clear objects allocated to COMRAM (8 bytes)
   344  001826  EE00  F026         	lfsr	0,__pbssCOMRAM
   345  00182A  0E08               	movlw	8
   346  00182C                     clear_0:
   347  00182C  6AEE               	clrf	postinc0,c
   348  00182E  06E8               	decf	wreg,f,c
   349  001830  E1FD               	bnz	clear_0
   350  001832                     end_of_initialization:
   351                           	opt stack 0
   352  001832                     __end_of__initialization:
   353                           	opt stack 0
   354  001832  0E00               	movlw	low (__Lmediumconst shr (0+16))
   355  001834  6EF8               	movwf	tblptru,c
   356  001836  0100               	movlb	0
   357  001838  EF59  F009         	goto	_main	;jump to C main() function
   358                           tblptru	equ	0xFF8
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	bssCOMRAM
   363  000026                     __pbssCOMRAM:
   364                           	opt stack 0
   365  000026                     _time:
   366                           	opt stack 0
   367  000026                     	ds	7
   368  00002D                     _keypress:
   369                           	opt stack 0
   370  00002D                     	ds	1
   371                           tblptru	equ	0xFF8
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           
   375                           	psect	cstackCOMRAM
   376  000001                     __pcstackCOMRAM:
   377                           	opt stack 0
   378  000001                     ??_isdigit:
   379  000001                     ??_readADC:
   380  000001                     ??_I2C_Master_Wait:
   381  000001                     ?___wmul:
   382                           	opt stack 0
   383  000001                     ?___lwdiv:
   384                           	opt stack 0
   385  000001                     ?___lldiv:
   386                           	opt stack 0
   387  000001                     lcdNibble@temp:
   388                           	opt stack 0
   389  000001                     PWM1@duty:
   390                           	opt stack 0
   391  000001                     ___wmul@multiplier:
   392                           	opt stack 0
   393  000001                     ___lwdiv@dividend:
   394                           	opt stack 0
   395  000001                     ___lldiv@dividend:
   396                           	opt stack 0
   397                           
   398                           ; 4 bytes @ 0x0
   399  000001                     	ds	1
   400  000002                     readADC@channel:
   401                           	opt stack 0
   402  000002                     lcdNibble@data:
   403                           	opt stack 0
   404  000002                     I2C_Master_Read@a:
   405                           	opt stack 0
   406  000002                     _isdigit$881:
   407                           	opt stack 0
   408  000002                     I2C_Master_Write@d:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x1
   412  000002                     	ds	1
   413  000003                     ??_PWM1:
   414  000003                     lcdInst@data:
   415                           	opt stack 0
   416  000003                     putch@data:
   417                           	opt stack 0
   418  000003                     I2C_Master_Read@temp:
   419                           	opt stack 0
   420  000003                     isdigit@c:
   421                           	opt stack 0
   422  000003                     ___wmul@multiplicand:
   423                           	opt stack 0
   424  000003                     ___lwdiv@divisor:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x2
   428  000003                     	ds	1
   429  000004                     ??_initLCD:
   430  000004                     updateTime@j:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x3
   434  000004                     	ds	1
   435  000005                     ___wmul@product:
   436                           	opt stack 0
   437  000005                     ___lwdiv@quotient:
   438                           	opt stack 0
   439  000005                     ___lldiv@divisor:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x4
   443  000005                     	ds	2
   444  000007                     ___lwdiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x6
   448  000007                     	ds	1
   449  000008                     ?_printf:
   450                           	opt stack 0
   451  000008                     printf@f:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x7
   455  000008                     	ds	1
   456  000009                     ___lldiv@quotient:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x8
   460  000009                     	ds	4
   461  00000D                     ___lldiv@counter:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0xC
   465  00000D                     	ds	1
   466  00000E                     I2C_Master_Init@c:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0xD
   470  00000E                     	ds	2
   471  000010                     ??_printf:
   472                           
   473                           ; 1 bytes @ 0xF
   474  000010                     	ds	2
   475  000012                     ??_I2C_Master_Init:
   476                           
   477                           ; 1 bytes @ 0x11
   478  000012                     	ds	2
   479  000014                     printf@ap:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x13
   483  000014                     	ds	2
   484  000016                     printf@idx:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x15
   488  000016                     	ds	1
   489  000017                     printf@flag:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x16
   493  000017                     	ds	1
   494  000018                     printf@val:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x17
   498  000018                     	ds	2
   499  00001A                     printf@prec:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x19
   503  00001A                     	ds	1
   504  00001B                     printf@width:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x1A
   508  00001B                     	ds	2
   509  00001D                     printf@c:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x1C
   513  00001D                     	ds	1
   514  00001E                     ??_displayLogs:
   515  00001E                     
   516                           ; 1 bytes @ 0x1D
   517  00001E                     	ds	1
   518  00001F                     ??_main:
   519                           
   520                           ; 1 bytes @ 0x1E
   521  00001F                     	ds	1
   522  000020                     main@s:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x1F
   526  000020                     	ds	2
   527  000022                     main@dc:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x21
   531  000022                     	ds	2
   532  000024                     main@standby:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x23
   536  000024                     	ds	2
   537                           tblptru	equ	0xFF8
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           
   541 ;;
   542 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   543 ;;
   544 ;; *************** function _main *****************
   545 ;; Defined at:
   546 ;;		line 114 in file "main.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;  standby         2   35[COMRAM] int 
   551 ;;  dc              2   33[COMRAM] int 
   552 ;;  s               2   31[COMRAM] int 
   553 ;;  startTime       2    0        int 
   554 ;; Return value:  Size  Location     Type
   555 ;;                  2  123[None  ] int 
   556 ;; Registers used:
   557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   564 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   566 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   567 ;;Total ram usage:        7 bytes
   568 ;; Hardware stack levels required when called:    4
   569 ;; This function calls:
   570 ;;		_PWM1
   571 ;;		_PWM1off
   572 ;;		_displayLogs
   573 ;;		_homescreen
   574 ;;		_initialize
   575 ;;		_keyinterrupt
   576 ;;		_lcdInst
   577 ;;		_printf
   578 ;;		_readADC
   579 ;;		_updateTime
   580 ;; This function is called by:
   581 ;;		Startup code after reset
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	text0
   586  0012B2                     __ptext0:
   587                           	opt stack 0
   588  0012B2                     _main:
   589                           	opt stack 27
   590                           
   591                           ;main.c: 115: initialize();
   592                           
   593                           ;incstack = 0
   594  0012B2  EC65  F00A         	call	_initialize	;wreg free
   595                           
   596                           ;main.c: 116: int standby = 1;
   597  0012B6  0E00               	movlw	0
   598  0012B8  6E25               	movwf	main@standby+1,c
   599  0012BA  0E01               	movlw	1
   600  0012BC  6E24               	movwf	main@standby,c
   601                           
   602                           ;main.c: 117: int s = 0;
   603  0012BE  0E00               	movlw	0
   604  0012C0  6E21               	movwf	main@s+1,c
   605  0012C2  0E00               	movlw	0
   606  0012C4  6E20               	movwf	main@s,c
   607                           
   608                           ;main.c: 118: int dc = 0;
   609  0012C6  0E00               	movlw	0
   610  0012C8  6E23               	movwf	main@dc+1,c
   611  0012CA  0E00               	movlw	0
   612  0012CC  6E22               	movwf	main@dc,c
   613                           
   614                           ;main.c: 119: int startTime;
   615                           ;main.c: 120: _delay((unsigned long)((10)*(32000000/4000.0)));
   616  0012CE  0E68               	movlw	104
   617  0012D0  6E1F               	movwf	??_main& (0+255),c
   618  0012D2  0EE4               	movlw	228
   619  0012D4                     u797:
   620  0012D4  2EE8               	decfsz	wreg,f,c
   621  0012D6  D7FE               	bra	u797
   622  0012D8  2E1F               	decfsz	??_main& (0+255),f,c
   623  0012DA  D7FC               	bra	u797
   624  0012DC  D000               	nop2	
   625  0012DE                     l1622:
   626                           
   627                           ;main.c: 125: updateTime();
   628  0012DE  ECA0  F00A         	call	_updateTime	;wreg free
   629                           
   630                           ;main.c: 127: if (standby){
   631  0012E2  5024               	movf	main@standby,w,c
   632  0012E4  1025               	iorwf	main@standby+1,w,c
   633  0012E6  B4D8               	btfsc	status,2,c
   634  0012E8  D039               	goto	l1654
   635                           
   636                           ;main.c: 128: keypress = (0);
   637  0012EA  0E00               	movlw	0
   638  0012EC  6E2D               	movwf	_keypress,c	;volatile
   639                           
   640                           ;main.c: 129: homescreen();
   641  0012EE  ECD3  F00A         	call	_homescreen	;wreg free
   642                           
   643                           ;main.c: 130: keyinterrupt();
   644  0012F2  EC1E  F00C         	call	_keyinterrupt	;wreg free
   645                           
   646                           ;main.c: 132: if(keypress == 2){
   647  0012F6  0E02               	movlw	2
   648  0012F8  182D               	xorwf	_keypress,w,c	;volatile
   649  0012FA  A4D8               	btfss	status,2,c
   650  0012FC  D029               	goto	l1650
   651                           
   652                           ;main.c: 133: standby = 0;
   653  0012FE  0E00               	movlw	0
   654  001300  6E25               	movwf	main@standby+1,c
   655  001302  0E00               	movlw	0
   656  001304  6E24               	movwf	main@standby,c
   657                           
   658                           ;main.c: 134: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
   659  001306  0E01               	movlw	1
   660  001308  EC41  F00C         	call	_lcdInst
   661  00130C  0E68               	movlw	104
   662  00130E  6E1F               	movwf	??_main& (0+255),c
   663  001310  0EE4               	movlw	228
   664  001312                     u807:
   665  001312  2EE8               	decfsz	wreg,f,c
   666  001314  D7FE               	bra	u807
   667  001316  2E1F               	decfsz	??_main& (0+255),f,c
   668  001318  D7FC               	bra	u807
   669  00131A  D000               	nop2	
   670                           
   671                           ;main.c: 135: printf("Sorting cans...");
   672  00131C  0E52               	movlw	low STR_5
   673  00131E  6E08               	movwf	printf@f,c
   674  001320  0E10               	movlw	high STR_5
   675  001322  6E09               	movwf	printf@f+1,c
   676  001324  EC5F  F008         	call	_printf	;wreg free
   677                           
   678                           ;main.c: 136: lcdInst(0b11000000);;
   679  001328  0EC0               	movlw	192
   680  00132A  EC41  F00C         	call	_lcdInst
   681                           
   682                           ;main.c: 137: printf("Any key to stop");
   683  00132E  0E62               	movlw	low STR_6
   684  001330  6E08               	movwf	printf@f,c
   685  001332  0E10               	movlw	high STR_6
   686  001334  6E09               	movwf	printf@f+1,c
   687  001336  EC5F  F008         	call	_printf	;wreg free
   688                           
   689                           ;main.c: 138: PWM1(100);
   690  00133A  0E00               	movlw	0
   691  00133C  6E02               	movwf	PWM1@duty+1,c
   692  00133E  0E64               	movlw	100
   693  001340  6E01               	movwf	PWM1@duty,c
   694  001342  EC85  F00B         	call	_PWM1	;wreg free
   695                           
   696                           ;main.c: 139: dc = 1;
   697  001346  0E00               	movlw	0
   698  001348  6E23               	movwf	main@dc+1,c
   699  00134A  0E01               	movlw	1
   700  00134C  6E22               	movwf	main@dc,c
   701                           
   702                           ;main.c: 141: }
   703  00134E  D7C7               	goto	l1622
   704  001350                     l1650:
   705                           
   706                           ;main.c: 142: else if(keypress == 1){
   707  001350  042D               	decf	_keypress,w,c	;volatile
   708  001352  A4D8               	btfss	status,2,c
   709  001354  D7C4               	goto	l1622
   710                           
   711                           ;main.c: 143: displayLogs();
   712  001356  ECCF  F009         	call	_displayLogs	;wreg free
   713                           
   714                           ;main.c: 144: }
   715                           ;main.c: 146: }
   716  00135A  D7C1               	goto	l1622
   717  00135C                     l1654:
   718                           
   719                           ;main.c: 147: else{
   720                           ;main.c: 148: keypress = (0);
   721  00135C  0E00               	movlw	0
   722  00135E  6E2D               	movwf	_keypress,c	;volatile
   723                           
   724                           ;main.c: 149: keyinterrupt();
   725  001360  EC1E  F00C         	call	_keyinterrupt	;wreg free
   726                           
   727                           ;main.c: 150: if (keypress != (0)) {
   728  001364  502D               	movf	_keypress,w,c	;volatile
   729  001366  B4D8               	btfsc	status,2,c
   730  001368  D00A               	goto	l1666
   731                           
   732                           ;main.c: 151: standby = 1;
   733  00136A  0E00               	movlw	0
   734  00136C  6E25               	movwf	main@standby+1,c
   735  00136E  0E01               	movlw	1
   736  001370  6E24               	movwf	main@standby,c
   737                           
   738                           ;main.c: 152: PWM1off();
   739  001372  EC4C  F00C         	call	_PWM1off	;wreg free
   740                           
   741                           ;main.c: 153: dc = 0;
   742  001376  0E00               	movlw	0
   743  001378  6E23               	movwf	main@dc+1,c
   744  00137A  0E00               	movlw	0
   745  00137C  6E22               	movwf	main@dc,c
   746  00137E                     l1666:
   747                           
   748                           ;main.c: 154: }
   749                           ;main.c: 156: readADC(2);
   750  00137E  0E02               	movlw	2
   751  001380  ECF3  F00B         	call	_readADC
   752                           
   753                           ;main.c: 157: if (ADRESH > 0){
   754  001384  50C4               	movf	4036,w,c	;volatile
   755  001386  B4D8               	btfsc	status,2,c
   756  001388  D003               	goto	l1672
   757                           
   758                           ;main.c: 158: PWM1off();
   759  00138A  EC4C  F00C         	call	_PWM1off	;wreg free
   760                           
   761                           ;main.c: 159: }
   762  00138E  D7A7               	goto	l1622
   763  001390                     l1672:
   764                           
   765                           ;main.c: 160: else{
   766                           ;main.c: 161: PWM1(100);
   767  001390  0E00               	movlw	0
   768  001392  6E02               	movwf	PWM1@duty+1,c
   769  001394  0E64               	movlw	100
   770  001396  6E01               	movwf	PWM1@duty,c
   771  001398  EC85  F00B         	call	_PWM1	;wreg free
   772  00139C  D7A0               	goto	l1622
   773  00139E                     __end_of_main:
   774                           	opt stack 0
   775                           tblptru	equ	0xFF8
   776                           postinc0	equ	0xFEE
   777                           wreg	equ	0xFE8
   778                           status	equ	0xFD8
   779                           
   780 ;; *************** function _updateTime *****************
   781 ;; Defined at:
   782 ;;		line 24 in file "main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  j               1    3[COMRAM] unsigned char 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:        1 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    2
   803 ;; This function calls:
   804 ;;		_I2C_Master_Read
   805 ;;		_I2C_Master_Start
   806 ;;		_I2C_Master_Stop
   807 ;;		_I2C_Master_Write
   808 ;; This function is called by:
   809 ;;		_main
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text1
   814  001540                     __ptext1:
   815                           	opt stack 0
   816  001540                     _updateTime:
   817                           	opt stack 28
   818                           
   819                           ;main.c: 26: I2C_Master_Start();
   820                           
   821                           ;incstack = 0
   822  001540  EC55  F00C         	call	_I2C_Master_Start	;wreg free
   823                           
   824                           ;main.c: 27: I2C_Master_Write(0b11010000);
   825  001544  0E00               	movlw	0
   826  001546  6E03               	movwf	I2C_Master_Write@d+1,c
   827  001548  0ED0               	movlw	208
   828  00154A  6E02               	movwf	I2C_Master_Write@d,c
   829  00154C  EC47  F00C         	call	_I2C_Master_Write	;wreg free
   830                           
   831                           ;main.c: 28: I2C_Master_Write(0x00);
   832  001550  0E00               	movlw	0
   833  001552  6E03               	movwf	I2C_Master_Write@d+1,c
   834  001554  0E00               	movlw	0
   835  001556  6E02               	movwf	I2C_Master_Write@d,c
   836  001558  EC47  F00C         	call	_I2C_Master_Write	;wreg free
   837                           
   838                           ;main.c: 29: I2C_Master_Stop();
   839  00155C  EC51  F00C         	call	_I2C_Master_Stop	;wreg free
   840                           
   841                           ;main.c: 32: I2C_Master_Start();
   842  001560  EC55  F00C         	call	_I2C_Master_Start	;wreg free
   843                           
   844                           ;main.c: 33: I2C_Master_Write(0b11010001);
   845  001564  0E00               	movlw	0
   846  001566  6E03               	movwf	I2C_Master_Write@d+1,c
   847  001568  0ED1               	movlw	209
   848  00156A  6E02               	movwf	I2C_Master_Write@d,c
   849  00156C  EC47  F00C         	call	_I2C_Master_Write	;wreg free
   850                           
   851                           ;main.c: 34: for(unsigned char j=0;j<0x06;j++){
   852  001570  0E00               	movlw	0
   853  001572  6E04               	movwf	updateTime@j,c
   854  001574                     l1530:
   855  001574  0E05               	movlw	5
   856  001576  6404               	cpfsgt	updateTime@j,c
   857  001578  D001               	goto	l1534
   858  00157A  D00E               	goto	l1540
   859  00157C                     l1534:
   860                           
   861                           ;main.c: 35: time[j] = I2C_Master_Read(1);
   862  00157C  5004               	movf	updateTime@j,w,c
   863  00157E  0D01               	mullw	1
   864  001580  0E26               	movlw	low _time
   865  001582  24F3               	addwf	prodl,w,c
   866  001584  6ED9               	movwf	fsr2l,c
   867  001586  0E00               	movlw	high _time
   868  001588  20F4               	addwfc	prodh,w,c
   869  00158A  6EDA               	movwf	fsr2h,c
   870  00158C  0E01               	movlw	1
   871  00158E  ECCD  F00B         	call	_I2C_Master_Read
   872  001592  6EDF               	movwf	indf2,c
   873  001594  2A04               	incf	updateTime@j,f,c
   874  001596  D7EE               	goto	l1530
   875  001598                     l1540:
   876                           
   877                           ;main.c: 36: }
   878                           ;main.c: 37: time[6] = I2C_Master_Read(0);
   879  001598  0E00               	movlw	0
   880  00159A  ECCD  F00B         	call	_I2C_Master_Read
   881  00159E  6E2C               	movwf	_time+6,c
   882                           
   883                           ;main.c: 38: I2C_Master_Stop();
   884  0015A0  EC51  F00C         	call	_I2C_Master_Stop	;wreg free
   885  0015A4  0012               	return		;funcret
   886  0015A6                     __end_of_updateTime:
   887                           	opt stack 0
   888                           tblptru	equ	0xFF8
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           indf2	equ	0xFDF
   894                           fsr2h	equ	0xFDA
   895                           fsr2l	equ	0xFD9
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _I2C_Master_Write *****************
   899 ;; Defined at:
   900 ;;		line 54 in file "I2C.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  d               2    1[COMRAM] unsigned int 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:        2 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    1
   921 ;; This function calls:
   922 ;;		_I2C_Master_Wait
   923 ;; This function is called by:
   924 ;;		_updateTime
   925 ;;		_set_time
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text2
   930  00188E                     __ptext2:
   931                           	opt stack 0
   932  00188E                     _I2C_Master_Write:
   933                           	opt stack 28
   934                           
   935                           ;I2C.c: 56: I2C_Master_Wait();
   936                           
   937                           ;incstack = 0
   938  00188E  EC32  F00C         	call	_I2C_Master_Wait	;wreg free
   939                           
   940                           ;I2C.c: 57: SSPBUF = d;
   941  001892  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
   942  001896  0012               	return		;funcret
   943  001898                     __end_of_I2C_Master_Write:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           prodh	equ	0xFF4
   947                           prodl	equ	0xFF3
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           indf2	equ	0xFDF
   951                           fsr2h	equ	0xFDA
   952                           fsr2l	equ	0xFD9
   953                           status	equ	0xFD8
   954                           
   955 ;; *************** function _I2C_Master_Stop *****************
   956 ;; Defined at:
   957 ;;		line 48 in file "I2C.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;		None
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, status,2, status,0, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;Total ram usage:        0 bytes
   976 ;; Hardware stack levels used:    1
   977 ;; Hardware stack levels required when called:    1
   978 ;; This function calls:
   979 ;;		_I2C_Master_Wait
   980 ;; This function is called by:
   981 ;;		_updateTime
   982 ;;		_set_time
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text3
   987  0018A2                     __ptext3:
   988                           	opt stack 0
   989  0018A2                     _I2C_Master_Stop:
   990                           	opt stack 28
   991                           
   992                           ;I2C.c: 50: I2C_Master_Wait();
   993                           
   994                           ;incstack = 0
   995  0018A2  EC32  F00C         	call	_I2C_Master_Wait	;wreg free
   996                           
   997                           ;I2C.c: 51: PEN = 1;
   998  0018A6  84C5               	bsf	4037,2,c	;volatile
   999  0018A8  0012               	return		;funcret
  1000  0018AA                     __end_of_I2C_Master_Stop:
  1001                           	opt stack 0
  1002                           tblptru	equ	0xFF8
  1003                           prodh	equ	0xFF4
  1004                           prodl	equ	0xFF3
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           indf2	equ	0xFDF
  1008                           fsr2h	equ	0xFDA
  1009                           fsr2l	equ	0xFD9
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _I2C_Master_Start *****************
  1013 ;; Defined at:
  1014 ;;		line 36 in file "I2C.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  2    8[None  ] int 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;Total ram usage:        0 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    1
  1035 ;; This function calls:
  1036 ;;		_I2C_Master_Wait
  1037 ;; This function is called by:
  1038 ;;		_updateTime
  1039 ;;		_set_time
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text4
  1044  0018AA                     __ptext4:
  1045                           	opt stack 0
  1046  0018AA                     _I2C_Master_Start:
  1047                           	opt stack 28
  1048                           
  1049                           ;I2C.c: 38: I2C_Master_Wait();
  1050                           
  1051                           ;incstack = 0
  1052  0018AA  EC32  F00C         	call	_I2C_Master_Wait	;wreg free
  1053                           
  1054                           ;I2C.c: 39: SEN = 1;
  1055  0018AE  80C5               	bsf	4037,0,c	;volatile
  1056  0018B0  0012               	return		;funcret
  1057  0018B2                     __end_of_I2C_Master_Start:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           prodh	equ	0xFF4
  1061                           prodl	equ	0xFF3
  1062                           postinc0	equ	0xFEE
  1063                           wreg	equ	0xFE8
  1064                           indf2	equ	0xFDF
  1065                           fsr2h	equ	0xFDA
  1066                           fsr2l	equ	0xFD9
  1067                           status	equ	0xFD8
  1068                           
  1069 ;; *************** function _I2C_Master_Read *****************
  1070 ;; Defined at:
  1071 ;;		line 60 in file "I2C.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  a               1    wreg     unsigned char 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  a               1    1[COMRAM] unsigned char 
  1076 ;;  temp            1    2[COMRAM] unsigned char 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      unsigned char 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2, status,0, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1090 ;;Total ram usage:        2 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; Hardware stack levels required when called:    1
  1093 ;; This function calls:
  1094 ;;		_I2C_Master_Wait
  1095 ;; This function is called by:
  1096 ;;		_updateTime
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text5
  1101  00179A                     __ptext5:
  1102                           	opt stack 0
  1103  00179A                     _I2C_Master_Read:
  1104                           	opt stack 28
  1105                           
  1106                           ;incstack = 0
  1107                           ;I2C_Master_Read@a stored from wreg
  1108  00179A  6E02               	movwf	I2C_Master_Read@a,c
  1109                           
  1110                           ;I2C.c: 62: unsigned char temp;
  1111                           ;I2C.c: 63: I2C_Master_Wait();
  1112  00179C  EC32  F00C         	call	_I2C_Master_Wait	;wreg free
  1113                           
  1114                           ;I2C.c: 64: RCEN = 1;
  1115  0017A0  86C5               	bsf	4037,3,c	;volatile
  1116                           
  1117                           ;I2C.c: 65: I2C_Master_Wait();
  1118  0017A2  EC32  F00C         	call	_I2C_Master_Wait	;wreg free
  1119                           
  1120                           ;I2C.c: 66: temp = SSPBUF;
  1121  0017A6  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  1122                           
  1123                           ;I2C.c: 67: I2C_Master_Wait();
  1124  0017AA  EC32  F00C         	call	_I2C_Master_Wait	;wreg free
  1125                           
  1126                           ;I2C.c: 68: ACKDT = (a)?0:1;
  1127  0017AE  5002               	movf	I2C_Master_Read@a,w,c
  1128  0017B0  A4D8               	btfss	status,2,c
  1129  0017B2  D002               	goto	u110
  1130  0017B4  8AC5               	bsf	4037,5,c	;volatile
  1131  0017B6  D001               	goto	l1046
  1132  0017B8                     u110:
  1133  0017B8  9AC5               	bcf	4037,5,c	;volatile
  1134  0017BA                     l1046:
  1135                           
  1136                           ;I2C.c: 69: ACKEN = 1;
  1137  0017BA  88C5               	bsf	4037,4,c	;volatile
  1138                           
  1139                           ;I2C.c: 70: return temp;
  1140  0017BC  5003               	movf	I2C_Master_Read@temp,w,c
  1141  0017BE  0012               	return	
  1142  0017C0                     __end_of_I2C_Master_Read:
  1143                           	opt stack 0
  1144                           tblptru	equ	0xFF8
  1145                           prodh	equ	0xFF4
  1146                           prodl	equ	0xFF3
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           indf2	equ	0xFDF
  1150                           fsr2h	equ	0xFDA
  1151                           fsr2l	equ	0xFD9
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function _I2C_Master_Wait *****************
  1155 ;; Defined at:
  1156 ;;		line 31 in file "I2C.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;Total ram usage:        1 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_I2C_Master_Start
  1180 ;;		_I2C_Master_Stop
  1181 ;;		_I2C_Master_Write
  1182 ;;		_I2C_Master_Read
  1183 ;;		_I2C_Master_RepeatedStart
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text6
  1188  001864                     __ptext6:
  1189                           	opt stack 0
  1190  001864                     _I2C_Master_Wait:
  1191                           	opt stack 28
  1192  001864                     l193:
  1193  001864  B4C7               	btfsc	4039,2,c	;volatile
  1194  001866  D7FE               	goto	l193
  1195  001868  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1196  00186C  0E1F               	movlw	31
  1197  00186E  1601               	andwf	??_I2C_Master_Wait,f,c
  1198  001870  B4D8               	btfsc	status,2,c
  1199  001872  0012               	return	
  1200  001874  D7F7               	goto	l193
  1201  001876                     __end_of_I2C_Master_Wait:
  1202                           	opt stack 0
  1203                           tblptru	equ	0xFF8
  1204                           prodh	equ	0xFF4
  1205                           prodl	equ	0xFF3
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           indf2	equ	0xFDF
  1209                           fsr2h	equ	0xFDA
  1210                           fsr2l	equ	0xFD9
  1211                           status	equ	0xFD8
  1212                           
  1213 ;; *************** function _readADC *****************
  1214 ;; Defined at:
  1215 ;;		line 16 in file "main.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  channel         1    wreg     unsigned char 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  channel         1    1[COMRAM] unsigned char 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0, cstack
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;Total ram usage:        2 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; This function calls:
  1236 ;;		Nothing
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text7
  1243  0017E6                     __ptext7:
  1244                           	opt stack 0
  1245  0017E6                     _readADC:
  1246                           	opt stack 30
  1247                           
  1248                           ;incstack = 0
  1249                           ;readADC@channel stored from wreg
  1250  0017E6  6E02               	movwf	readADC@channel,c
  1251                           
  1252                           ;main.c: 18: ADCON0 = ((channel <<2));
  1253  0017E8  4402               	rlncf	readADC@channel,w,c
  1254  0017EA  46E8               	rlncf	wreg,f,c
  1255  0017EC  0BFC               	andlw	252
  1256  0017EE  6EC2               	movwf	4034,c	;volatile
  1257                           
  1258                           ;main.c: 19: ADCON0bits.GO = 1;
  1259  0017F0  82C2               	bsf	4034,1,c	;volatile
  1260                           
  1261                           ;main.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0))
      +                          );}
  1262  0017F2  D007               	goto	l1160
  1263  0017F4                     l1158:
  1264  0017F4  0E34               	movlw	52
  1265  0017F6  6E01               	movwf	??_readADC& (0+255),c
  1266  0017F8  0EF2               	movlw	242
  1267  0017FA                     u817:
  1268  0017FA  2EE8               	decfsz	wreg,f,c
  1269  0017FC  D7FE               	bra	u817
  1270  0017FE  2E01               	decfsz	??_readADC& (0+255),f,c
  1271  001800  D7FC               	bra	u817
  1272  001802                     l1160:
  1273  001802  A2C2               	btfss	4034,1,c	;volatile
  1274  001804  0012               	return	
  1275  001806  D7F6               	goto	l1158
  1276  001808                     __end_of_readADC:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           prodh	equ	0xFF4
  1280                           prodl	equ	0xFF3
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           indf2	equ	0xFDF
  1284                           fsr2h	equ	0xFDA
  1285                           fsr2l	equ	0xFD9
  1286                           status	equ	0xFD8
  1287                           
  1288 ;; *************** function _keyinterrupt *****************
  1289 ;; Defined at:
  1290 ;;		line 62 in file "main.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;		None
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg, status,2, status,0
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1308 ;;Total ram usage:        0 bytes
  1309 ;; Hardware stack levels used:    1
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text8
  1318  00183C                     __ptext8:
  1319                           	opt stack 0
  1320  00183C                     _keyinterrupt:
  1321                           	opt stack 30
  1322                           
  1323                           ;main.c: 63: if(PORTBbits.RB1 == 1){
  1324                           
  1325                           ;incstack = 0
  1326  00183C  A281               	btfss	3969,1,c	;volatile
  1327  00183E  D006               	goto	l114
  1328                           
  1329                           ;main.c: 64: keypress = (PORTB & 0xF0)>>4;
  1330  001840  3881               	swapf	3969,w,c	;volatile
  1331  001842  0B0F               	andlw	15
  1332  001844  0B0F               	andlw	15
  1333  001846  6E2D               	movwf	_keypress,c	;volatile
  1334  001848                     l115:
  1335  001848  B281               	btfsc	3969,1,c	;volatile
  1336  00184A  D7FE               	goto	l115
  1337  00184C                     l114:
  1338                           
  1339                           ;main.c: 67: }
  1340                           ;main.c: 68: }
  1341                           ;main.c: 69: __nop();
  1342  00184C  F000               	nop	
  1343  00184E  0012               	return		;funcret
  1344  001850                     __end_of_keyinterrupt:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           prodh	equ	0xFF4
  1348                           prodl	equ	0xFF3
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           indf2	equ	0xFDF
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _initialize *****************
  1357 ;; Defined at:
  1358 ;;		line 72 in file "main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		wreg, status,2, status,0, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    3
  1379 ;; This function calls:
  1380 ;;		_I2C_Master_Init
  1381 ;;		_initLCD
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text9
  1388  0014CA                     __ptext9:
  1389                           	opt stack 0
  1390  0014CA                     _initialize:
  1391                           	opt stack 27
  1392                           
  1393                           ;main.c: 73: OSCCON = 0xF2;
  1394                           
  1395                           ;incstack = 0
  1396  0014CA  0EF2               	movlw	242
  1397  0014CC  6ED3               	movwf	4051,c	;volatile
  1398                           
  1399                           ;main.c: 74: OSCTUNEbits.PLLEN = 1;
  1400  0014CE  8C9B               	bsf	3995,6,c	;volatile
  1401                           
  1402                           ;main.c: 76: TRISA = 0x00;
  1403  0014D0  0E00               	movlw	0
  1404  0014D2  6E92               	movwf	3986,c	;volatile
  1405                           
  1406                           ;main.c: 77: TRISB = 0b11110010;
  1407  0014D4  0EF2               	movlw	242
  1408  0014D6  6E93               	movwf	3987,c	;volatile
  1409                           
  1410                           ;main.c: 78: TRISC = 0x00011100;
  1411  0014D8  0E00               	movlw	0
  1412  0014DA  6E94               	movwf	3988,c	;volatile
  1413                           
  1414                           ;main.c: 80: TRISD = 0x00;
  1415  0014DC  0E00               	movlw	0
  1416  0014DE  6E95               	movwf	3989,c	;volatile
  1417                           
  1418                           ;main.c: 81: TRISE = 0x00;
  1419  0014E0  0E00               	movlw	0
  1420  0014E2  6E96               	movwf	3990,c	;volatile
  1421                           
  1422                           ;main.c: 83: PR2 = 0xff;
  1423  0014E4  68CB               	setf	4043,c	;volatile
  1424                           
  1425                           ;main.c: 84: CCP1CON = 0b00001100;
  1426  0014E6  0E0C               	movlw	12
  1427  0014E8  6EBD               	movwf	4029,c	;volatile
  1428                           
  1429                           ;main.c: 85: CCPR1L = 0x00;
  1430  0014EA  0E00               	movlw	0
  1431  0014EC  6EBE               	movwf	4030,c	;volatile
  1432                           
  1433                           ;main.c: 86: T2CON = 0b00000101;
  1434  0014EE  0E05               	movlw	5
  1435  0014F0  6ECA               	movwf	4042,c	;volatile
  1436                           
  1437                           ;main.c: 88: LATA = 0b01010101;
  1438  0014F2  0E55               	movlw	85
  1439  0014F4  6E89               	movwf	3977,c	;volatile
  1440                           
  1441                           ;main.c: 89: LATB = 0b01010101;
  1442  0014F6  0E55               	movlw	85
  1443  0014F8  6E8A               	movwf	3978,c	;volatile
  1444                           
  1445                           ;main.c: 90: LATC = 0b01010101;
  1446  0014FA  0E55               	movlw	85
  1447  0014FC  6E8B               	movwf	3979,c	;volatile
  1448                           
  1449                           ;main.c: 91: LATD = 0x00;
  1450  0014FE  0E00               	movlw	0
  1451  001500  6E8C               	movwf	3980,c	;volatile
  1452                           
  1453                           ;main.c: 92: LATE = 0x00;
  1454  001502  0E00               	movlw	0
  1455  001504  6E8D               	movwf	3981,c	;volatile
  1456                           
  1457                           ;main.c: 93: LATDbits.LATD0 = 1;
  1458  001506  808C               	bsf	3980,0,c	;volatile
  1459                           
  1460                           ;main.c: 94: LATDbits.LATD1 = 0;
  1461  001508  928C               	bcf	3980,1,c	;volatile
  1462                           
  1463                           ;main.c: 95: LATEbits.LATE0 = 1;
  1464  00150A  808D               	bsf	3981,0,c	;volatile
  1465                           
  1466                           ;main.c: 96: LATEbits.LATE1 = 0;
  1467  00150C  928D               	bcf	3981,1,c	;volatile
  1468                           
  1469                           ;main.c: 98: ADCON0 = 0x00;
  1470  00150E  0E00               	movlw	0
  1471  001510  6EC2               	movwf	4034,c	;volatile
  1472                           
  1473                           ;main.c: 99: ADCON1 = 0xFF;
  1474  001512  68C1               	setf	4033,c	;volatile
  1475                           
  1476                           ;main.c: 101: initLCD();
  1477  001514  ECAA  F00B         	call	_initLCD	;wreg free
  1478                           
  1479                           ;main.c: 103: I2C_Master_Init(10000);
  1480  001518  0E10               	movlw	16
  1481  00151A  6E0E               	movwf	I2C_Master_Init@c,c
  1482  00151C  0E27               	movlw	39
  1483  00151E  6E0F               	movwf	I2C_Master_Init@c+1,c
  1484  001520  0E00               	movlw	0
  1485  001522  6E10               	movwf	I2C_Master_Init@c+2,c
  1486  001524  0E00               	movlw	0
  1487  001526  6E11               	movwf	I2C_Master_Init@c+3,c
  1488  001528  EC04  F00B         	call	_I2C_Master_Init	;wreg free
  1489                           
  1490                           ;main.c: 106: nRBPU = 0;
  1491  00152C  9EF1               	bcf	intcon2,7,c	;volatile
  1492                           
  1493                           ;main.c: 107: ADCON0 = 00000001;
  1494  00152E  0E01               	movlw	1
  1495  001530  6EC2               	movwf	4034,c	;volatile
  1496                           
  1497                           ;main.c: 108: ADCON1 = 0x0B;
  1498  001532  0E0B               	movlw	11
  1499  001534  6EC1               	movwf	4033,c	;volatile
  1500                           
  1501                           ;main.c: 109: CVRCON = 0x00;
  1502  001536  0E00               	movlw	0
  1503  001538  6EB5               	movwf	4021,c	;volatile
  1504                           
  1505                           ;main.c: 110: CMCONbits.CIS = 0;
  1506  00153A  96B4               	bcf	4020,3,c	;volatile
  1507                           
  1508                           ;main.c: 111: ADFM = 1;
  1509  00153C  8EC0               	bsf	4032,7,c	;volatile
  1510  00153E  0012               	return		;funcret
  1511  001540                     __end_of_initialize:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           intcon2	equ	0xFF1
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           indf2	equ	0xFDF
  1520                           fsr2h	equ	0xFDA
  1521                           fsr2l	equ	0xFD9
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _initLCD *****************
  1525 ;; Defined at:
  1526 ;;		line 11 in file "lcd.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;		None
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      void 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;Total ram usage:        1 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    2
  1547 ;; This function calls:
  1548 ;;		_lcdInst
  1549 ;; This function is called by:
  1550 ;;		_initialize
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           	psect	text10
  1555  001754                     __ptext10:
  1556                           	opt stack 0
  1557  001754                     _initLCD:
  1558                           	opt stack 27
  1559                           
  1560                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  1561                           
  1562                           ;incstack = 0
  1563  001754  0E9C               	movlw	156
  1564  001756  6E04               	movwf	??_initLCD& (0+255),c
  1565  001758  0ED7               	movlw	215
  1566  00175A                     u827:
  1567  00175A  2EE8               	decfsz	wreg,f,c
  1568  00175C  D7FE               	bra	u827
  1569  00175E  2E04               	decfsz	??_initLCD& (0+255),f,c
  1570  001760  D7FC               	bra	u827
  1571  001762  F000               	nop	
  1572                           
  1573                           ;lcd.c: 13: lcdInst(0b00110011);
  1574  001764  0E33               	movlw	51
  1575  001766  EC41  F00C         	call	_lcdInst
  1576                           
  1577                           ;lcd.c: 14: lcdInst(0b00110010);
  1578  00176A  0E32               	movlw	50
  1579  00176C  EC41  F00C         	call	_lcdInst
  1580                           
  1581                           ;lcd.c: 15: lcdInst(0b00101000);
  1582  001770  0E28               	movlw	40
  1583  001772  EC41  F00C         	call	_lcdInst
  1584                           
  1585                           ;lcd.c: 16: lcdInst(0b00001111);
  1586  001776  0E0F               	movlw	15
  1587  001778  EC41  F00C         	call	_lcdInst
  1588                           
  1589                           ;lcd.c: 17: lcdInst(0b00000110);
  1590  00177C  0E06               	movlw	6
  1591  00177E  EC41  F00C         	call	_lcdInst
  1592                           
  1593                           ;lcd.c: 18: lcdInst(0b00000001);
  1594  001782  0E01               	movlw	1
  1595  001784  EC41  F00C         	call	_lcdInst
  1596                           
  1597                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  1598  001788  0E9C               	movlw	156
  1599  00178A  6E04               	movwf	??_initLCD& (0+255),c
  1600  00178C  0ED7               	movlw	215
  1601  00178E                     u837:
  1602  00178E  2EE8               	decfsz	wreg,f,c
  1603  001790  D7FE               	bra	u837
  1604  001792  2E04               	decfsz	??_initLCD& (0+255),f,c
  1605  001794  D7FC               	bra	u837
  1606  001796  F000               	nop	
  1607  001798  0012               	return		;funcret
  1608  00179A                     __end_of_initLCD:
  1609                           	opt stack 0
  1610                           tblptru	equ	0xFF8
  1611                           prodh	equ	0xFF4
  1612                           prodl	equ	0xFF3
  1613                           intcon2	equ	0xFF1
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           indf2	equ	0xFDF
  1617                           fsr2h	equ	0xFDA
  1618                           fsr2l	equ	0xFD9
  1619                           status	equ	0xFD8
  1620                           
  1621 ;; *************** function _I2C_Master_Init *****************
  1622 ;; Defined at:
  1623 ;;		line 20 in file "I2C.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;  c               4   13[COMRAM] const unsigned long 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;		None
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  1    wreg      void 
  1630 ;; Registers used:
  1631 ;;		wreg, status,2, status,0, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1637 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1641 ;;Total ram usage:        8 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    1
  1644 ;; This function calls:
  1645 ;;		___lldiv
  1646 ;; This function is called by:
  1647 ;;		_initialize
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text11
  1652  001608                     __ptext11:
  1653                           	opt stack 0
  1654  001608                     _I2C_Master_Init:
  1655                           	opt stack 28
  1656                           
  1657                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  1658                           
  1659                           ;incstack = 0
  1660  001608  0E00               	movlw	0
  1661  00160A  6EC7               	movwf	4039,c	;volatile
  1662                           
  1663                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  1664  00160C  0E28               	movlw	40
  1665  00160E  6EC6               	movwf	4038,c	;volatile
  1666                           
  1667                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  1668  001610  0E00               	movlw	0
  1669  001612  6EC5               	movwf	4037,c	;volatile
  1670                           
  1671                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  1672  001614  0E00               	movlw	0
  1673  001616  6E01               	movwf	___lldiv@dividend,c
  1674  001618  0E48               	movlw	72
  1675  00161A  6E02               	movwf	___lldiv@dividend+1,c
  1676  00161C  0EE8               	movlw	232
  1677  00161E  6E03               	movwf	___lldiv@dividend+2,c
  1678  001620  0E01               	movlw	1
  1679  001622  6E04               	movwf	___lldiv@dividend+3,c
  1680  001624  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  1681  001628  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  1682  00162C  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  1683  001630  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  1684  001634  0E02               	movlw	2
  1685  001636                     u695:
  1686  001636  90D8               	bcf	status,0,c
  1687  001638  3612               	rlcf	??_I2C_Master_Init,f,c
  1688  00163A  3613               	rlcf	??_I2C_Master_Init+1,f,c
  1689  00163C  3614               	rlcf	??_I2C_Master_Init+2,f,c
  1690  00163E  3615               	rlcf	??_I2C_Master_Init+3,f,c
  1691  001640  2EE8               	decfsz	wreg,f,c
  1692  001642  D7F9               	goto	u695
  1693  001644  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  1694  001648  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  1695  00164C  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  1696  001650  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  1697  001654  EC24  F00A         	call	___lldiv	;wreg free
  1698  001658  0401               	decf	?___lldiv,w,c
  1699  00165A  6EC8               	movwf	4040,c	;volatile
  1700                           
  1701                           ;I2C.c: 27: TRISC3 = 1;
  1702  00165C  8694               	bsf	3988,3,c	;volatile
  1703                           
  1704                           ;I2C.c: 28: TRISC4 = 1;
  1705  00165E  8894               	bsf	3988,4,c	;volatile
  1706  001660  0012               	return		;funcret
  1707  001662                     __end_of_I2C_Master_Init:
  1708                           	opt stack 0
  1709                           tblptru	equ	0xFF8
  1710                           prodh	equ	0xFF4
  1711                           prodl	equ	0xFF3
  1712                           intcon2	equ	0xFF1
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           indf2	equ	0xFDF
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function ___lldiv *****************
  1721 ;; Defined at:
  1722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  dividend        4    0[COMRAM] unsigned long 
  1725 ;;  divisor         4    4[COMRAM] unsigned long 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  quotient        4    8[COMRAM] unsigned long 
  1728 ;;  counter         1   12[COMRAM] unsigned char 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  4    0[COMRAM] unsigned long 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1738 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1742 ;;Total ram usage:       13 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_I2C_Master_Init
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text12
  1752  001448                     __ptext12:
  1753                           	opt stack 0
  1754  001448                     ___lldiv:
  1755                           	opt stack 28
  1756                           
  1757                           ;incstack = 0
  1758  001448  0E00               	movlw	0
  1759  00144A  6E09               	movwf	___lldiv@quotient,c
  1760  00144C  0E00               	movlw	0
  1761  00144E  6E0A               	movwf	___lldiv@quotient+1,c
  1762  001450  0E00               	movlw	0
  1763  001452  6E0B               	movwf	___lldiv@quotient+2,c
  1764  001454  0E00               	movlw	0
  1765  001456  6E0C               	movwf	___lldiv@quotient+3,c
  1766  001458  5005               	movf	___lldiv@divisor,w,c
  1767  00145A  1006               	iorwf	___lldiv@divisor+1,w,c
  1768  00145C  1007               	iorwf	___lldiv@divisor+2,w,c
  1769  00145E  1008               	iorwf	___lldiv@divisor+3,w,c
  1770  001460  B4D8               	btfsc	status,2,c
  1771  001462  D02A               	goto	l670
  1772  001464  0E01               	movlw	1
  1773  001466  6E0D               	movwf	___lldiv@counter,c
  1774  001468  D006               	goto	l1402
  1775  00146A                     l1400:
  1776  00146A  90D8               	bcf	status,0,c
  1777  00146C  3605               	rlcf	___lldiv@divisor,f,c
  1778  00146E  3606               	rlcf	___lldiv@divisor+1,f,c
  1779  001470  3607               	rlcf	___lldiv@divisor+2,f,c
  1780  001472  3608               	rlcf	___lldiv@divisor+3,f,c
  1781  001474  2A0D               	incf	___lldiv@counter,f,c
  1782  001476                     l1402:
  1783  001476  AE08               	btfss	___lldiv@divisor+3,7,c
  1784  001478  D7F8               	goto	l1400
  1785  00147A                     l1404:
  1786  00147A  90D8               	bcf	status,0,c
  1787  00147C  3609               	rlcf	___lldiv@quotient,f,c
  1788  00147E  360A               	rlcf	___lldiv@quotient+1,f,c
  1789  001480  360B               	rlcf	___lldiv@quotient+2,f,c
  1790  001482  360C               	rlcf	___lldiv@quotient+3,f,c
  1791  001484  5005               	movf	___lldiv@divisor,w,c
  1792  001486  5C01               	subwf	___lldiv@dividend,w,c
  1793  001488  5006               	movf	___lldiv@divisor+1,w,c
  1794  00148A  5802               	subwfb	___lldiv@dividend+1,w,c
  1795  00148C  5007               	movf	___lldiv@divisor+2,w,c
  1796  00148E  5803               	subwfb	___lldiv@dividend+2,w,c
  1797  001490  5008               	movf	___lldiv@divisor+3,w,c
  1798  001492  5804               	subwfb	___lldiv@dividend+3,w,c
  1799  001494  A0D8               	btfss	status,0,c
  1800  001496  D009               	goto	l1412
  1801  001498  5005               	movf	___lldiv@divisor,w,c
  1802  00149A  5E01               	subwf	___lldiv@dividend,f,c
  1803  00149C  5006               	movf	___lldiv@divisor+1,w,c
  1804  00149E  5A02               	subwfb	___lldiv@dividend+1,f,c
  1805  0014A0  5007               	movf	___lldiv@divisor+2,w,c
  1806  0014A2  5A03               	subwfb	___lldiv@dividend+2,f,c
  1807  0014A4  5008               	movf	___lldiv@divisor+3,w,c
  1808  0014A6  5A04               	subwfb	___lldiv@dividend+3,f,c
  1809  0014A8  8009               	bsf	___lldiv@quotient,0,c
  1810  0014AA                     l1412:
  1811  0014AA  90D8               	bcf	status,0,c
  1812  0014AC  3208               	rrcf	___lldiv@divisor+3,f,c
  1813  0014AE  3207               	rrcf	___lldiv@divisor+2,f,c
  1814  0014B0  3206               	rrcf	___lldiv@divisor+1,f,c
  1815  0014B2  3205               	rrcf	___lldiv@divisor,f,c
  1816  0014B4  2E0D               	decfsz	___lldiv@counter,f,c
  1817  0014B6  D7E1               	goto	l1404
  1818  0014B8                     l670:
  1819  0014B8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1820  0014BC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1821  0014C0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1822  0014C4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1823  0014C8  0012               	return		;funcret
  1824  0014CA                     __end_of___lldiv:
  1825                           	opt stack 0
  1826                           tblptru	equ	0xFF8
  1827                           prodh	equ	0xFF4
  1828                           prodl	equ	0xFF3
  1829                           intcon2	equ	0xFF1
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           indf2	equ	0xFDF
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _homescreen *****************
  1838 ;; Defined at:
  1839 ;;		line 40 in file "main.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;Total ram usage:        0 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    3
  1860 ;; This function calls:
  1861 ;;		_lcdInst
  1862 ;;		_printf
  1863 ;; This function is called by:
  1864 ;;		_main
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text13
  1869  0015A6                     __ptext13:
  1870                           	opt stack 0
  1871  0015A6                     _homescreen:
  1872                           	opt stack 27
  1873                           
  1874                           ;main.c: 41: lcdInst(0b10000000);;
  1875                           
  1876                           ;incstack = 0
  1877  0015A6  0E80               	movlw	128
  1878  0015A8  EC41  F00C         	call	_lcdInst
  1879                           
  1880                           ;main.c: 42: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  1881  0015AC  0E42               	movlw	low STR_1
  1882  0015AE  6E08               	movwf	printf@f,c
  1883  0015B0  0E10               	movlw	high STR_1
  1884  0015B2  6E09               	movwf	printf@f+1,c
  1885  0015B4  C02C  F00A         	movff	_time+6,?_printf+2
  1886  0015B8  6A0B               	clrf	?_printf+3,c
  1887  0015BA  C02B  F00C         	movff	_time+5,?_printf+4
  1888  0015BE  6A0D               	clrf	?_printf+5,c
  1889  0015C0  C02A  F00E         	movff	_time+4,?_printf+6
  1890  0015C4  6A0F               	clrf	?_printf+7,c
  1891  0015C6  EC5F  F008         	call	_printf	;wreg free
  1892                           
  1893                           ;main.c: 43: printf("3:Start");
  1894  0015CA  0EB5               	movlw	low STR_2
  1895  0015CC  6E08               	movwf	printf@f,c
  1896  0015CE  0E10               	movlw	high STR_2
  1897  0015D0  6E09               	movwf	printf@f+1,c
  1898  0015D2  EC5F  F008         	call	_printf	;wreg free
  1899                           
  1900                           ;main.c: 44: lcdInst(0b11000000);;
  1901  0015D6  0EC0               	movlw	192
  1902  0015D8  EC41  F00C         	call	_lcdInst
  1903                           
  1904                           ;main.c: 45: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1905  0015DC  0E90               	movlw	low STR_3
  1906  0015DE  6E08               	movwf	printf@f,c
  1907  0015E0  0E10               	movlw	high STR_3
  1908  0015E2  6E09               	movwf	printf@f+1,c
  1909  0015E4  C028  F00A         	movff	_time+2,?_printf+2
  1910  0015E8  6A0B               	clrf	?_printf+3,c
  1911  0015EA  C027  F00C         	movff	_time+1,?_printf+4
  1912  0015EE  6A0D               	clrf	?_printf+5,c
  1913  0015F0  C026  F00E         	movff	_time,?_printf+6
  1914  0015F4  6A0F               	clrf	?_printf+7,c
  1915  0015F6  EC5F  F008         	call	_printf	;wreg free
  1916                           
  1917                           ;main.c: 46: printf(" 2:Logs");
  1918  0015FA  0EAD               	movlw	low STR_4
  1919  0015FC  6E08               	movwf	printf@f,c
  1920  0015FE  0E10               	movlw	high STR_4
  1921  001600  6E09               	movwf	printf@f+1,c
  1922  001602  EC5F  F008         	call	_printf	;wreg free
  1923  001606  0012               	return		;funcret
  1924  001608                     __end_of_homescreen:
  1925                           	opt stack 0
  1926                           tblptru	equ	0xFF8
  1927                           prodh	equ	0xFF4
  1928                           prodl	equ	0xFF3
  1929                           intcon2	equ	0xFF1
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           indf2	equ	0xFDF
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _displayLogs *****************
  1938 ;; Defined at:
  1939 ;;		line 4 in file "interface.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;Total ram usage:        1 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    3
  1960 ;; This function calls:
  1961 ;;		_keycheck
  1962 ;;		_lcdInst
  1963 ;;		_printf
  1964 ;; This function is called by:
  1965 ;;		_main
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text14
  1970  00139E                     __ptext14:
  1971                           	opt stack 0
  1972  00139E                     _displayLogs:
  1973                           	opt stack 27
  1974                           
  1975                           ;interface.c: 5: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1976                           
  1977                           ;incstack = 0
  1978  00139E  0E01               	movlw	1
  1979  0013A0  EC41  F00C         	call	_lcdInst
  1980  0013A4  0E68               	movlw	104
  1981  0013A6  6E1E               	movwf	??_displayLogs& (0+255),c
  1982  0013A8  0EE4               	movlw	228
  1983  0013AA                     u847:
  1984  0013AA  2EE8               	decfsz	wreg,f,c
  1985  0013AC  D7FE               	bra	u847
  1986  0013AE  2E1E               	decfsz	??_displayLogs& (0+255),f,c
  1987  0013B0  D7FC               	bra	u847
  1988  0013B2  D000               	nop2	
  1989                           
  1990                           ;interface.c: 6: printf("Run#1    A:Next");
  1991  0013B4  0E32               	movlw	low STR_7
  1992  0013B6  6E08               	movwf	printf@f,c
  1993  0013B8  0E10               	movlw	high STR_7
  1994  0013BA  6E09               	movwf	printf@f+1,c
  1995  0013BC  EC5F  F008         	call	_printf	;wreg free
  1996                           
  1997                           ;interface.c: 7: lcdInst(0b11000000);;
  1998  0013C0  0EC0               	movlw	192
  1999  0013C2  EC41  F00C         	call	_lcdInst
  2000                           
  2001                           ;interface.c: 8: printf("# of cans: 10");
  2002  0013C6  0E9F               	movlw	low STR_8
  2003  0013C8  6E08               	movwf	printf@f,c
  2004  0013CA  0E10               	movlw	high STR_8
  2005  0013CC  6E09               	movwf	printf@f+1,c
  2006  0013CE  EC5F  F008         	call	_printf	;wreg free
  2007                           
  2008                           ;interface.c: 9: keycheck();
  2009  0013D2  EC28  F00C         	call	_keycheck	;wreg free
  2010                           
  2011                           ;interface.c: 10: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2012  0013D6  0E01               	movlw	1
  2013  0013D8  EC41  F00C         	call	_lcdInst
  2014  0013DC  0E68               	movlw	104
  2015  0013DE  6E1E               	movwf	??_displayLogs& (0+255),c
  2016  0013E0  0EE4               	movlw	228
  2017  0013E2                     u857:
  2018  0013E2  2EE8               	decfsz	wreg,f,c
  2019  0013E4  D7FE               	bra	u857
  2020  0013E6  2E1E               	decfsz	??_displayLogs& (0+255),f,c
  2021  0013E8  D7FC               	bra	u857
  2022  0013EA  D000               	nop2	
  2023                           
  2024                           ;interface.c: 11: printf("Run#1    A:Next");
  2025  0013EC  0E32               	movlw	low STR_7
  2026  0013EE  6E08               	movwf	printf@f,c
  2027  0013F0  0E10               	movlw	high STR_7
  2028  0013F2  6E09               	movwf	printf@f+1,c
  2029  0013F4  EC5F  F008         	call	_printf	;wreg free
  2030                           
  2031                           ;interface.c: 12: lcdInst(0b11000000);;
  2032  0013F8  0EC0               	movlw	192
  2033  0013FA  EC41  F00C         	call	_lcdInst
  2034                           
  2035                           ;interface.c: 13: printf("# soda cans: 6");
  2036  0013FE  0E81               	movlw	low STR_10
  2037  001400  6E08               	movwf	printf@f,c
  2038  001402  0E10               	movlw	high STR_10
  2039  001404  6E09               	movwf	printf@f+1,c
  2040  001406  EC5F  F008         	call	_printf	;wreg free
  2041                           
  2042                           ;interface.c: 14: keycheck();
  2043  00140A  EC28  F00C         	call	_keycheck	;wreg free
  2044                           
  2045                           ;interface.c: 15: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2046  00140E  0E01               	movlw	1
  2047  001410  EC41  F00C         	call	_lcdInst
  2048  001414  0E68               	movlw	104
  2049  001416  6E1E               	movwf	??_displayLogs& (0+255),c
  2050  001418  0EE4               	movlw	228
  2051  00141A                     u867:
  2052  00141A  2EE8               	decfsz	wreg,f,c
  2053  00141C  D7FE               	bra	u867
  2054  00141E  2E1E               	decfsz	??_displayLogs& (0+255),f,c
  2055  001420  D7FC               	bra	u867
  2056  001422  D000               	nop2	
  2057                           
  2058                           ;interface.c: 16: printf("Run#1    A:Next");
  2059  001424  0E32               	movlw	low STR_7
  2060  001426  6E08               	movwf	printf@f,c
  2061  001428  0E10               	movlw	high STR_7
  2062  00142A  6E09               	movwf	printf@f+1,c
  2063  00142C  EC5F  F008         	call	_printf	;wreg free
  2064                           
  2065                           ;interface.c: 17: lcdInst(0b11000000);;
  2066  001430  0EC0               	movlw	192
  2067  001432  EC41  F00C         	call	_lcdInst
  2068                           
  2069                           ;interface.c: 18: printf("# soup cans: 4");
  2070  001436  0E72               	movlw	low STR_12
  2071  001438  6E08               	movwf	printf@f,c
  2072  00143A  0E10               	movlw	high STR_12
  2073  00143C  6E09               	movwf	printf@f+1,c
  2074  00143E  EC5F  F008         	call	_printf	;wreg free
  2075                           
  2076                           ;interface.c: 19: keycheck();
  2077  001442  EC28  F00C         	call	_keycheck	;wreg free
  2078  001446  0012               	return		;funcret
  2079  001448                     __end_of_displayLogs:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           prodh	equ	0xFF4
  2083                           prodl	equ	0xFF3
  2084                           intcon2	equ	0xFF1
  2085                           postinc0	equ	0xFEE
  2086                           wreg	equ	0xFE8
  2087                           indf2	equ	0xFDF
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           status	equ	0xFD8
  2091                           
  2092 ;; *************** function _printf *****************
  2093 ;; Defined at:
  2094 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  f               2    7[COMRAM] PTR const unsigned char 
  2097 ;;		 -> STR_12(15), STR_11(16), STR_10(15), STR_9(16), 
  2098 ;;		 -> STR_8(14), STR_7(16), STR_6(16), STR_5(16), 
  2099 ;;		 -> STR_4(8), STR_3(15), STR_2(8), STR_1(16), 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  idx             1   21[COMRAM] unsigned char 
  2102 ;;  tmpval          4    0        struct .
  2103 ;;  cp              3    0        PTR const unsigned char 
  2104 ;;  width           2   26[COMRAM] int 
  2105 ;;  val             2   23[COMRAM] unsigned int 
  2106 ;;  ap              2   19[COMRAM] PTR void [1]
  2107 ;;		 -> ?_printf(2), 
  2108 ;;  len             2    0        unsigned int 
  2109 ;;  c               1   28[COMRAM] char 
  2110 ;;  prec            1   25[COMRAM] char 
  2111 ;;  flag            1   22[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  2    7[COMRAM] int 
  2114 ;; Registers used:
  2115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2121 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;Total ram usage:       22 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    2
  2128 ;; This function calls:
  2129 ;;		___lwdiv
  2130 ;;		___wmul
  2131 ;;		_isdigit
  2132 ;;		_putch
  2133 ;; This function is called by:
  2134 ;;		_homescreen
  2135 ;;		_main
  2136 ;;		_displayLogs
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text15
  2141  0010BE                     __ptext15:
  2142                           	opt stack 0
  2143  0010BE                     _printf:
  2144                           	opt stack 28
  2145                           
  2146                           ;doprnt.c: 466: va_list ap;
  2147                           ;doprnt.c: 499: signed char c;
  2148                           ;doprnt.c: 501: int width;
  2149                           ;doprnt.c: 506: signed char prec;
  2150                           ;doprnt.c: 508: unsigned char flag;
  2151                           ;doprnt.c: 523: union {
  2152                           ;doprnt.c: 524: unsigned long vd;
  2153                           ;doprnt.c: 525: double integ;
  2154                           ;doprnt.c: 526: } tmpval;
  2155                           ;doprnt.c: 528: unsigned int val;
  2156                           ;doprnt.c: 529: unsigned len;
  2157                           ;doprnt.c: 530: const char * cp;
  2158                           ;doprnt.c: 533: *ap = __va_start();
  2159                           
  2160                           ;incstack = 0
  2161  0010BE  0E0A               	movlw	low (?_printf+2)
  2162  0010C0  6E14               	movwf	printf@ap,c
  2163  0010C2  0E00               	movlw	high (?_printf+2)
  2164  0010C4  6E15               	movwf	printf@ap+1,c
  2165                           
  2166                           ;doprnt.c: 536: while(c = *f++) {
  2167  0010C6  D0E8               	goto	l1516
  2168  0010C8                     l1444:
  2169                           
  2170                           ;doprnt.c: 538: if(c != '%')
  2171  0010C8  0E25               	movlw	37
  2172  0010CA  181D               	xorwf	printf@c,w,c
  2173  0010CC  B4D8               	btfsc	status,2,c
  2174  0010CE  D004               	goto	l1448
  2175                           
  2176                           ;doprnt.c: 540: {
  2177                           ;doprnt.c: 541: (putch(c) );
  2178  0010D0  501D               	movf	printf@c,w,c
  2179  0010D2  EC3B  F00C         	call	_putch
  2180                           
  2181                           ;doprnt.c: 542: continue;
  2182  0010D6  D0E0               	goto	l1516
  2183  0010D8                     l1448:
  2184                           
  2185                           ;doprnt.c: 543: }
  2186                           ;doprnt.c: 546: width = 0;
  2187  0010D8  0E00               	movlw	0
  2188  0010DA  6E1C               	movwf	printf@width+1,c
  2189  0010DC  0E00               	movlw	0
  2190  0010DE  6E1B               	movwf	printf@width,c
  2191                           
  2192                           ;doprnt.c: 548: flag = 0;
  2193  0010E0  0E00               	movlw	0
  2194  0010E2  6E17               	movwf	printf@flag,c
  2195                           
  2196                           ;doprnt.c: 551: switch(*f) {
  2197                           
  2198                           ;doprnt.c: 550: for(;;) {
  2199  0010E4  D003               	goto	l1454
  2200  0010E6                     l1450:
  2201                           
  2202                           ;doprnt.c: 580: flag |= 0x04;
  2203  0010E6  8417               	bsf	printf@flag,2,c
  2204                           
  2205                           ;doprnt.c: 581: f++;
  2206  0010E8  4A08               	infsnz	printf@f,f,c
  2207  0010EA  2A09               	incf	printf@f+1,f,c
  2208  0010EC                     l1454:
  2209  0010EC  C008  FFF6         	movff	printf@f,tblptrl
  2210  0010F0  C009  FFF7         	movff	printf@f+1,tblptrh
  2211  0010F4                     	if	0	;tblptru may be non-zero
  2212  0010F4                     	endif
  2213  0010F4                     	if	0	;tblptru may be non-zero
  2214  0010F4                     	endif
  2215  0010F4  0008               	tblrd		*
  2216  0010F6  50F5               	movf	tablat,w,c
  2217                           
  2218                           ; Switch size 1, requested type "space"
  2219                           ; Number of cases is 1, Range of values is 48 to 48
  2220                           ; switch strategies available:
  2221                           ; Name         Instructions Cycles
  2222                           ; simple_byte            4     3 (average)
  2223                           ;	Chosen strategy is simple_byte
  2224  0010F8  0A30               	xorlw	48	; case 48
  2225  0010FA  B4D8               	btfsc	status,2,c
  2226  0010FC  D7F4               	goto	l1450
  2227                           
  2228                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2229                           
  2230                           ;doprnt.c: 586: }
  2231                           
  2232                           ;doprnt.c: 585: break;
  2233  0010FE  C008  FFF6         	movff	printf@f,tblptrl
  2234  001102  C009  FFF7         	movff	printf@f+1,tblptrh
  2235  001106                     	if	0	;tblptru may be non-zero
  2236  001106                     	endif
  2237  001106                     	if	0	;tblptru may be non-zero
  2238  001106                     	endif
  2239  001106  0008               	tblrd		*
  2240  001108  50F5               	movf	tablat,w,c
  2241  00110A  EC04  F00C         	call	_isdigit
  2242  00110E  A0D8               	btfss	status,0,c
  2243  001110  D032               	goto	l1470
  2244                           
  2245                           ;doprnt.c: 598: width = 0;
  2246  001112  0E00               	movlw	0
  2247  001114  6E1C               	movwf	printf@width+1,c
  2248  001116  0E00               	movlw	0
  2249  001118  6E1B               	movwf	printf@width,c
  2250  00111A                     l1460:
  2251                           
  2252                           ;doprnt.c: 600: width *= 10;
  2253  00111A  C01B  F001         	movff	printf@width,___wmul@multiplier
  2254  00111E  C01C  F002         	movff	printf@width+1,___wmul@multiplier+1
  2255  001122  0E00               	movlw	0
  2256  001124  6E04               	movwf	___wmul@multiplicand+1,c
  2257  001126  0E0A               	movlw	10
  2258  001128  6E03               	movwf	___wmul@multiplicand,c
  2259  00112A  ECE0  F00B         	call	___wmul	;wreg free
  2260  00112E  C001  F01B         	movff	?___wmul,printf@width
  2261  001132  C002  F01C         	movff	?___wmul+1,printf@width+1
  2262                           
  2263                           ;doprnt.c: 601: width += *f++ - '0';
  2264  001136  0ED0               	movlw	208
  2265  001138  6E10               	movwf	??_printf& (0+255),c
  2266  00113A  0EFF               	movlw	255
  2267  00113C  6E11               	movwf	(??_printf+1)& (0+255),c
  2268  00113E  C008  FFF6         	movff	printf@f,tblptrl
  2269  001142  C009  FFF7         	movff	printf@f+1,tblptrh
  2270  001146                     	if	0	;tblptru may be non-zero
  2271  001146                     	endif
  2272  001146                     	if	0	;tblptru may be non-zero
  2273  001146                     	endif
  2274  001146  0008               	tblrd		*
  2275  001148  50F5               	movf	tablat,w,c
  2276  00114A  6E12               	movwf	(??_printf+2)& (0+255),c
  2277  00114C  6A13               	clrf	(??_printf+3)& (0+255),c
  2278  00114E  5010               	movf	??_printf,w,c
  2279  001150  2612               	addwf	??_printf+2,f,c
  2280  001152  5011               	movf	??_printf+1,w,c
  2281  001154  2213               	addwfc	??_printf+3,f,c
  2282  001156  5012               	movf	??_printf+2,w,c
  2283  001158  261B               	addwf	printf@width,f,c
  2284  00115A  5013               	movf	??_printf+3,w,c
  2285  00115C  221C               	addwfc	printf@width+1,f,c
  2286  00115E  4A08               	infsnz	printf@f,f,c
  2287  001160  2A09               	incf	printf@f+1,f,c
  2288                           
  2289                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2290  001162  C008  FFF6         	movff	printf@f,tblptrl
  2291  001166  C009  FFF7         	movff	printf@f+1,tblptrh
  2292  00116A                     	if	0	;tblptru may be non-zero
  2293  00116A                     	endif
  2294  00116A                     	if	0	;tblptru may be non-zero
  2295  00116A                     	endif
  2296  00116A  0008               	tblrd		*
  2297  00116C  50F5               	movf	tablat,w,c
  2298  00116E  EC04  F00C         	call	_isdigit
  2299  001172  B0D8               	btfsc	status,0,c
  2300  001174  D7D2               	goto	l1460
  2301  001176                     l1470:
  2302  001176  C008  FFF6         	movff	printf@f,tblptrl
  2303  00117A  C009  FFF7         	movff	printf@f+1,tblptrh
  2304  00117E  4A08               	infsnz	printf@f,f,c
  2305  001180  2A09               	incf	printf@f+1,f,c
  2306  001182                     	if	0	;tblptru may be non-zero
  2307  001182                     	endif
  2308  001182                     	if	0	;tblptru may be non-zero
  2309  001182                     	endif
  2310  001182  0008               	tblrd		*
  2311  001184  CFF5 F01D          	movff	tablat,printf@c
  2312  001188  501D               	movf	printf@c,w,c
  2313                           
  2314                           ; Switch size 1, requested type "space"
  2315                           ; Number of cases is 2, Range of values is 0 to 120
  2316                           ; switch strategies available:
  2317                           ; Name         Instructions Cycles
  2318                           ; simple_byte            7     4 (average)
  2319                           ;	Chosen strategy is simple_byte
  2320  00118A  0A00               	xorlw	0	; case 0
  2321  00118C  B4D8               	btfsc	status,2,c
  2322  00118E  0012               	return	
  2323  001190  0A78               	xorlw	120	; case 120
  2324  001192  A4D8               	btfss	status,2,c
  2325  001194  D081               	goto	l1516
  2326                           
  2327                           ;doprnt.c: 1273: {
  2328                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2329  001196  C014  FFD9         	movff	printf@ap,fsr2l
  2330  00119A  C015  FFDA         	movff	printf@ap+1,fsr2h
  2331  00119E  CFDE F018          	movff	postinc2,printf@val
  2332  0011A2  CFDD F019          	movff	postdec2,printf@val+1
  2333  0011A6  0E02               	movlw	2
  2334  0011A8  2614               	addwf	printf@ap,f,c
  2335  0011AA  0E00               	movlw	0
  2336  0011AC  2215               	addwfc	printf@ap+1,f,c
  2337                           
  2338                           ;doprnt.c: 1287: }
  2339                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2340  0011AE  0E01               	movlw	1
  2341  0011B0  6E1D               	movwf	printf@c,c
  2342  0011B2                     l1478:
  2343  0011B2  0E04               	movlw	4
  2344  0011B4  181D               	xorwf	printf@c,w,c
  2345  0011B6  B4D8               	btfsc	status,2,c
  2346  0011B8  D012               	goto	l1490
  2347                           
  2348                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2349  0011BA  501D               	movf	printf@c,w,c
  2350  0011BC  0D02               	mullw	2
  2351  0011BE  0E12               	movlw	low _hexpowers
  2352  0011C0  24F3               	addwf	prodl,w,c
  2353  0011C2  6EF6               	movwf	tblptrl,c
  2354  0011C4  0E10               	movlw	high _hexpowers
  2355  0011C6  20F4               	addwfc	prodh,w,c
  2356  0011C8  6EF7               	movwf	tblptrh,c
  2357  0011CA                     	if	0	;There are less than 3 active tblptr bytes
  2358  0011CA                     	endif
  2359  0011CA  0009               	tblrd		*+
  2360  0011CC  50F5               	movf	tablat,w,c
  2361  0011CE  5C18               	subwf	printf@val,w,c
  2362  0011D0  0009               	tblrd		*+
  2363  0011D2  50F5               	movf	tablat,w,c
  2364  0011D4  5819               	subwfb	printf@val+1,w,c
  2365  0011D6  A0D8               	btfss	status,0,c
  2366  0011D8  D002               	goto	l1490
  2367                           
  2368                           ;doprnt.c: 1318: break;
  2369  0011DA  2A1D               	incf	printf@c,f,c
  2370  0011DC  D7EA               	goto	l1478
  2371  0011DE                     l1490:
  2372                           
  2373                           ;doprnt.c: 1381: if(width > c)
  2374  0011DE  0E80               	movlw	128
  2375  0011E0  BE1D               	btfsc	printf@c,7,c
  2376  0011E2  0E7F               	movlw	127
  2377  0011E4  6E10               	movwf	??_printf& (0+255),c
  2378  0011E6  501B               	movf	printf@width,w,c
  2379  0011E8  5C1D               	subwf	printf@c,w,c
  2380  0011EA  501C               	movf	printf@width+1,w,c
  2381  0011EC  0A80               	xorlw	128
  2382  0011EE  5810               	subwfb	??_printf& (0+255),w,c
  2383  0011F0  B0D8               	btfsc	status,0,c
  2384  0011F2  D007               	goto	l1494
  2385                           
  2386                           ;doprnt.c: 1382: width -= c;
  2387  0011F4  501D               	movf	printf@c,w,c
  2388  0011F6  5E1B               	subwf	printf@width,f,c
  2389  0011F8  0E00               	movlw	0
  2390  0011FA  BE1D               	btfsc	printf@c,7,c
  2391  0011FC  0EFF               	movlw	255
  2392  0011FE  5A1C               	subwfb	printf@width+1,f,c
  2393  001200  D004               	goto	l1496
  2394  001202                     l1494:
  2395                           
  2396                           ;doprnt.c: 1383: else
  2397                           ;doprnt.c: 1384: width = 0;
  2398  001202  0E00               	movlw	0
  2399  001204  6E1C               	movwf	printf@width+1,c
  2400  001206  0E00               	movlw	0
  2401  001208  6E1B               	movwf	printf@width,c
  2402  00120A                     l1496:
  2403                           
  2404                           ;doprnt.c: 1387: if(flag & 0x04) {
  2405  00120A  A417               	btfss	printf@flag,2,c
  2406  00120C  D00B               	goto	l1504
  2407  00120E                     
  2408                           ;doprnt.c: 1415: if(width)
  2409  00120E  501B               	movf	printf@width,w,c
  2410  001210  101C               	iorwf	printf@width+1,w,c
  2411  001212  B4D8               	btfsc	status,2,c
  2412  001214  D015               	goto	l307
  2413                           
  2414                           ;doprnt.c: 1417: (putch('0') );
  2415                           
  2416                           ;doprnt.c: 1416: do
  2417  001216  0E30               	movlw	48
  2418  001218  EC3B  F00C         	call	_putch
  2419                           
  2420                           ;doprnt.c: 1418: while(--width);
  2421  00121C  061B               	decf	printf@width,f,c
  2422  00121E  A0D8               	btfss	status,0,c
  2423  001220  061C               	decf	printf@width+1,f,c
  2424  001222  D7F5               	goto	L1
  2425  001224                     l1504:
  2426                           
  2427                           ;doprnt.c: 1422: {
  2428                           ;doprnt.c: 1424: if(width
  2429                           ;doprnt.c: 1428: )
  2430  001224  501B               	movf	printf@width,w,c
  2431  001226  101C               	iorwf	printf@width+1,w,c
  2432  001228  B4D8               	btfsc	status,2,c
  2433  00122A  D00A               	goto	l307
  2434  00122C                     l1506:
  2435                           
  2436                           ;doprnt.c: 1430: (putch(' ') );
  2437  00122C  0E20               	movlw	32
  2438  00122E  EC3B  F00C         	call	_putch
  2439                           
  2440                           ;doprnt.c: 1431: while(--width);
  2441  001232  061B               	decf	printf@width,f,c
  2442  001234  A0D8               	btfss	status,0,c
  2443  001236  061C               	decf	printf@width+1,f,c
  2444  001238  501B               	movf	printf@width,w,c
  2445  00123A  101C               	iorwf	printf@width+1,w,c
  2446  00123C  A4D8               	btfss	status,2,c
  2447  00123E  D7F6               	goto	l1506
  2448  001240                     l307:
  2449                           
  2450                           ;doprnt.c: 1469: }
  2451                           ;doprnt.c: 1472: prec = c;
  2452  001240  C01D  F01A         	movff	printf@c,printf@prec
  2453                           
  2454                           ;doprnt.c: 1474: while(prec--) {
  2455  001244  D025               	goto	l311
  2456  001246                     l1510:
  2457                           
  2458                           ;doprnt.c: 1478: {
  2459                           ;doprnt.c: 1499: {
  2460                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2461  001246  C018  F001         	movff	printf@val,___lwdiv@dividend
  2462  00124A  C019  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2463  00124E  501A               	movf	printf@prec,w,c
  2464  001250  0D02               	mullw	2
  2465  001252  0E12               	movlw	low _hexpowers
  2466  001254  24F3               	addwf	prodl,w,c
  2467  001256  6EF6               	movwf	tblptrl,c
  2468  001258  0E10               	movlw	high _hexpowers
  2469  00125A  20F4               	addwfc	prodh,w,c
  2470  00125C  6EF7               	movwf	tblptrh,c
  2471  00125E                     	if	0	;There are less than 3 active tblptr bytes
  2472  00125E                     	endif
  2473  00125E  0009               	tblrd		*+
  2474  001260  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2475  001264  000A               	tblrd		*-
  2476  001266  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2477  00126A  EC5C  F00B         	call	___lwdiv	;wreg free
  2478  00126E  5001               	movf	?___lwdiv,w,c
  2479  001270  0B0F               	andlw	15
  2480  001272  6E16               	movwf	printf@idx,c
  2481                           
  2482                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2483  001274  5016               	movf	printf@idx,w,c
  2484  001276  0D01               	mullw	1
  2485  001278  0E21               	movlw	low STR_13
  2486  00127A  24F3               	addwf	prodl,w,c
  2487  00127C  6EF6               	movwf	tblptrl,c
  2488  00127E  0E10               	movlw	high STR_13
  2489  001280  20F4               	addwfc	prodh,w,c
  2490  001282  6EF7               	movwf	tblptrh,c
  2491  001284                     	if	0	;There are less than 3 active tblptr bytes
  2492  001284                     	endif
  2493  001284  0008               	tblrd		*
  2494  001286  CFF5 F01D          	movff	tablat,printf@c
  2495                           
  2496                           ;doprnt.c: 1508: }
  2497                           ;doprnt.c: 1523: }
  2498                           ;doprnt.c: 1524: (putch(c) );
  2499  00128A  501D               	movf	printf@c,w,c
  2500  00128C  EC3B  F00C         	call	_putch
  2501  001290                     l311:
  2502  001290  061A               	decf	printf@prec,f,c
  2503  001292  281A               	incf	printf@prec,w,c
  2504  001294  A4D8               	btfss	status,2,c
  2505  001296  D7D7               	goto	l1510
  2506  001298                     l1516:
  2507  001298  C008  FFF6         	movff	printf@f,tblptrl
  2508  00129C  C009  FFF7         	movff	printf@f+1,tblptrh
  2509  0012A0  4A08               	infsnz	printf@f,f,c
  2510  0012A2  2A09               	incf	printf@f+1,f,c
  2511  0012A4                     	if	0	;tblptru may be non-zero
  2512  0012A4                     	endif
  2513  0012A4                     	if	0	;tblptru may be non-zero
  2514  0012A4                     	endif
  2515  0012A4  0008               	tblrd		*
  2516  0012A6  CFF5 F01D          	movff	tablat,printf@c
  2517  0012AA  501D               	movf	printf@c,w,c
  2518  0012AC  B4D8               	btfsc	status,2,c
  2519  0012AE  0012               	return	
  2520  0012B0  D70B               	goto	l1444
  2521  0012B2                     __end_of_printf:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon2	equ	0xFF1
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           indf2	equ	0xFDF
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           fsr2h	equ	0xFDA
  2536                           fsr2l	equ	0xFD9
  2537                           status	equ	0xFD8
  2538                           
  2539 ;; *************** function _putch *****************
  2540 ;; Defined at:
  2541 ;;		line 27 in file "lcd.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  data            1    wreg     unsigned char 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  data            1    2[COMRAM] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;Total ram usage:        1 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    1
  2562 ;; This function calls:
  2563 ;;		_lcdNibble
  2564 ;; This function is called by:
  2565 ;;		_printf
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text16
  2570  001876                     __ptext16:
  2571                           	opt stack 0
  2572  001876                     _putch:
  2573                           	opt stack 28
  2574                           
  2575                           ;incstack = 0
  2576                           ;putch@data stored from wreg
  2577  001876  6E03               	movwf	putch@data,c
  2578                           
  2579                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  2580  001878  848C               	bsf	3980,2,c	;volatile
  2581                           
  2582                           ;lcd.c: 29: lcdNibble(data);
  2583  00187A  5003               	movf	putch@data,w,c
  2584  00187C  EC31  F00B         	call	_lcdNibble
  2585  001880  0012               	return		;funcret
  2586  001882                     __end_of_putch:
  2587                           	opt stack 0
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           prodh	equ	0xFF4
  2593                           prodl	equ	0xFF3
  2594                           intcon2	equ	0xFF1
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           indf2	equ	0xFDF
  2598                           postinc2	equ	0xFDE
  2599                           postdec2	equ	0xFDD
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _isdigit *****************
  2605 ;; Defined at:
  2606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  c               1    wreg     unsigned char 
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;  c               1    2[COMRAM] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;		None               void
  2613 ;; Registers used:
  2614 ;;		wreg, status,2, status,0
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;Total ram usage:        3 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_printf
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text17
  2634  001808                     __ptext17:
  2635                           	opt stack 0
  2636  001808                     _isdigit:
  2637                           	opt stack 29
  2638                           
  2639                           ;incstack = 0
  2640                           ;isdigit@c stored from wreg
  2641  001808  6E03               	movwf	isdigit@c,c
  2642  00180A  0E00               	movlw	0
  2643  00180C  6E02               	movwf	_isdigit$881,c
  2644  00180E  0E3A               	movlw	58
  2645  001810  6003               	cpfslt	isdigit@c,c
  2646  001812  D005               	goto	l1384
  2647  001814  0E2F               	movlw	47
  2648  001816  6403               	cpfsgt	isdigit@c,c
  2649  001818  D002               	goto	l1384
  2650  00181A  0E01               	movlw	1
  2651  00181C  6E02               	movwf	_isdigit$881,c
  2652  00181E                     l1384:
  2653  00181E  C002  F001         	movff	_isdigit$881,??_isdigit
  2654  001822  3001               	rrcf	??_isdigit,w,c
  2655  001824  0012               	return	
  2656  001826                     __end_of_isdigit:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           intcon2	equ	0xFF1
  2665                           postinc0	equ	0xFEE
  2666                           wreg	equ	0xFE8
  2667                           indf2	equ	0xFDF
  2668                           postinc2	equ	0xFDE
  2669                           postdec2	equ	0xFDD
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function ___wmul *****************
  2675 ;; Defined at:
  2676 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;  multiplier      2    0[COMRAM] unsigned int 
  2679 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2680 ;; Auto vars:     Size  Location     Type
  2681 ;;  product         2    4[COMRAM] unsigned int 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  2    0[COMRAM] unsigned int 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2, status,0, prodl, prodh
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2694 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;Total ram usage:        6 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_printf
  2701 ;; This function uses a non-reentrant model
  2702 ;;
  2703                           
  2704                           	psect	text18
  2705  0017C0                     __ptext18:
  2706                           	opt stack 0
  2707  0017C0                     ___wmul:
  2708                           	opt stack 29
  2709                           
  2710                           ;incstack = 0
  2711  0017C0  5001               	movf	___wmul@multiplier,w,c
  2712  0017C2  0203               	mulwf	___wmul@multiplicand,c
  2713  0017C4  CFF3 F005          	movff	prodl,___wmul@product
  2714  0017C8  CFF4 F006          	movff	prodh,___wmul@product+1
  2715  0017CC  5001               	movf	___wmul@multiplier,w,c
  2716  0017CE  0204               	mulwf	___wmul@multiplicand+1,c
  2717  0017D0  50F3               	movf	prodl,w,c
  2718  0017D2  2606               	addwf	___wmul@product+1,f,c
  2719  0017D4  5002               	movf	___wmul@multiplier+1,w,c
  2720  0017D6  0203               	mulwf	___wmul@multiplicand,c
  2721  0017D8  50F3               	movf	prodl,w,c
  2722  0017DA  2606               	addwf	___wmul@product+1,f,c
  2723  0017DC  C005  F001         	movff	___wmul@product,?___wmul
  2724  0017E0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2725  0017E4  0012               	return	
  2726  0017E6                     __end_of___wmul:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           intcon2	equ	0xFF1
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           indf2	equ	0xFDF
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function ___lwdiv *****************
  2745 ;; Defined at:
  2746 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  dividend        2    0[COMRAM] unsigned int 
  2749 ;;  divisor         2    2[COMRAM] unsigned int 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  quotient        2    4[COMRAM] unsigned int 
  2752 ;;  counter         1    6[COMRAM] unsigned char 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  2    0[COMRAM] unsigned int 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2762 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;Total ram usage:        7 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_printf
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text19
  2776  0016B8                     __ptext19:
  2777                           	opt stack 0
  2778  0016B8                     ___lwdiv:
  2779                           	opt stack 29
  2780                           
  2781                           ;incstack = 0
  2782  0016B8  0E00               	movlw	0
  2783  0016BA  6E06               	movwf	___lwdiv@quotient+1,c
  2784  0016BC  0E00               	movlw	0
  2785  0016BE  6E05               	movwf	___lwdiv@quotient,c
  2786  0016C0  5003               	movf	___lwdiv@divisor,w,c
  2787  0016C2  1004               	iorwf	___lwdiv@divisor+1,w,c
  2788  0016C4  B4D8               	btfsc	status,2,c
  2789  0016C6  D01C               	goto	l723
  2790  0016C8  0E01               	movlw	1
  2791  0016CA  6E07               	movwf	___lwdiv@counter,c
  2792  0016CC  D004               	goto	l1424
  2793  0016CE                     l1422:
  2794  0016CE  90D8               	bcf	status,0,c
  2795  0016D0  3603               	rlcf	___lwdiv@divisor,f,c
  2796  0016D2  3604               	rlcf	___lwdiv@divisor+1,f,c
  2797  0016D4  2A07               	incf	___lwdiv@counter,f,c
  2798  0016D6                     l1424:
  2799  0016D6  AE04               	btfss	___lwdiv@divisor+1,7,c
  2800  0016D8  D7FA               	goto	l1422
  2801  0016DA                     l1426:
  2802  0016DA  90D8               	bcf	status,0,c
  2803  0016DC  3605               	rlcf	___lwdiv@quotient,f,c
  2804  0016DE  3606               	rlcf	___lwdiv@quotient+1,f,c
  2805  0016E0  5003               	movf	___lwdiv@divisor,w,c
  2806  0016E2  5C01               	subwf	___lwdiv@dividend,w,c
  2807  0016E4  5004               	movf	___lwdiv@divisor+1,w,c
  2808  0016E6  5802               	subwfb	___lwdiv@dividend+1,w,c
  2809  0016E8  A0D8               	btfss	status,0,c
  2810  0016EA  D005               	goto	l1434
  2811  0016EC  5003               	movf	___lwdiv@divisor,w,c
  2812  0016EE  5E01               	subwf	___lwdiv@dividend,f,c
  2813  0016F0  5004               	movf	___lwdiv@divisor+1,w,c
  2814  0016F2  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2815  0016F4  8005               	bsf	___lwdiv@quotient,0,c
  2816  0016F6                     l1434:
  2817  0016F6  90D8               	bcf	status,0,c
  2818  0016F8  3204               	rrcf	___lwdiv@divisor+1,f,c
  2819  0016FA  3203               	rrcf	___lwdiv@divisor,f,c
  2820  0016FC  2E07               	decfsz	___lwdiv@counter,f,c
  2821  0016FE  D7ED               	goto	l1426
  2822  001700                     l723:
  2823  001700  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2824  001704  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2825  001708  0012               	return		;funcret
  2826  00170A                     __end_of___lwdiv:
  2827                           	opt stack 0
  2828                           tblptru	equ	0xFF8
  2829                           tblptrh	equ	0xFF7
  2830                           tblptrl	equ	0xFF6
  2831                           tablat	equ	0xFF5
  2832                           prodh	equ	0xFF4
  2833                           prodl	equ	0xFF3
  2834                           intcon2	equ	0xFF1
  2835                           postinc0	equ	0xFEE
  2836                           wreg	equ	0xFE8
  2837                           indf2	equ	0xFDF
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _lcdInst *****************
  2845 ;; Defined at:
  2846 ;;		line 22 in file "lcd.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  data            1    wreg     unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  data            1    2[COMRAM] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;Total ram usage:        1 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    1
  2867 ;; This function calls:
  2868 ;;		_lcdNibble
  2869 ;; This function is called by:
  2870 ;;		_homescreen
  2871 ;;		_main
  2872 ;;		_initLCD
  2873 ;;		_displayLogs
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text20
  2878  001882                     __ptext20:
  2879                           	opt stack 0
  2880  001882                     _lcdInst:
  2881                           	opt stack 29
  2882                           
  2883                           ;incstack = 0
  2884                           ;lcdInst@data stored from wreg
  2885  001882  6E03               	movwf	lcdInst@data,c
  2886                           
  2887                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  2888  001884  948C               	bcf	3980,2,c	;volatile
  2889                           
  2890                           ;lcd.c: 24: lcdNibble(data);
  2891  001886  5003               	movf	lcdInst@data,w,c
  2892  001888  EC31  F00B         	call	_lcdNibble
  2893  00188C  0012               	return		;funcret
  2894  00188E                     __end_of_lcdInst:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           prodh	equ	0xFF4
  2901                           prodl	equ	0xFF3
  2902                           intcon2	equ	0xFF1
  2903                           postinc0	equ	0xFEE
  2904                           wreg	equ	0xFE8
  2905                           indf2	equ	0xFDF
  2906                           postinc2	equ	0xFDE
  2907                           postdec2	equ	0xFDD
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function _lcdNibble *****************
  2913 ;; Defined at:
  2914 ;;		line 32 in file "lcd.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  data            1    wreg     unsigned char 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  data            1    1[COMRAM] unsigned char 
  2919 ;;  temp            1    0[COMRAM] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      void 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;Total ram usage:        2 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_lcdInst
  2939 ;;		_putch
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text21
  2944  001662                     __ptext21:
  2945                           	opt stack 0
  2946  001662                     _lcdNibble:
  2947                           	opt stack 28
  2948                           
  2949                           ;incstack = 0
  2950                           ;lcdNibble@data stored from wreg
  2951  001662  6E02               	movwf	lcdNibble@data,c
  2952                           
  2953                           ;lcd.c: 34: char temp = data & 0xF0;
  2954  001664  5002               	movf	lcdNibble@data,w,c
  2955  001666  0BF0               	andlw	240
  2956  001668  6E01               	movwf	lcdNibble@temp,c
  2957                           
  2958                           ;lcd.c: 35: LATD = LATD & 0x0F;
  2959  00166A  508C               	movf	3980,w,c	;volatile
  2960  00166C  0B0F               	andlw	15
  2961  00166E  6E8C               	movwf	3980,c	;volatile
  2962                           
  2963                           ;lcd.c: 36: LATD = temp | LATD;
  2964  001670  5001               	movf	lcdNibble@temp,w,c
  2965  001672  108C               	iorwf	3980,w,c	;volatile
  2966  001674  6E8C               	movwf	3980,c	;volatile
  2967                           
  2968                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  2969  001676  968C               	bcf	3980,3,c	;volatile
  2970                           
  2971                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  2972  001678  0E42               	movlw	66
  2973  00167A                     u877:
  2974  00167A  2EE8               	decfsz	wreg,f,c
  2975  00167C  D7FE               	bra	u877
  2976  00167E  D000               	nop2	
  2977                           
  2978                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  2979  001680  868C               	bsf	3980,3,c	;volatile
  2980                           
  2981                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  2982  001682  0E42               	movlw	66
  2983  001684                     u887:
  2984  001684  2EE8               	decfsz	wreg,f,c
  2985  001686  D7FE               	bra	u887
  2986  001688  D000               	nop2	
  2987                           
  2988                           ;lcd.c: 43: data = data << 4;
  2989  00168A  3802               	swapf	lcdNibble@data,w,c
  2990  00168C  0BF0               	andlw	240
  2991  00168E  6E02               	movwf	lcdNibble@data,c
  2992                           
  2993                           ;lcd.c: 45: temp = data & 0xF0;
  2994  001690  5002               	movf	lcdNibble@data,w,c
  2995  001692  0BF0               	andlw	240
  2996  001694  6E01               	movwf	lcdNibble@temp,c
  2997                           
  2998                           ;lcd.c: 46: LATD = LATD & 0x0F;
  2999  001696  508C               	movf	3980,w,c	;volatile
  3000  001698  0B0F               	andlw	15
  3001  00169A  6E8C               	movwf	3980,c	;volatile
  3002                           
  3003                           ;lcd.c: 47: LATD = temp | LATD;
  3004  00169C  5001               	movf	lcdNibble@temp,w,c
  3005  00169E  108C               	iorwf	3980,w,c	;volatile
  3006  0016A0  6E8C               	movwf	3980,c	;volatile
  3007                           
  3008                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  3009  0016A2  968C               	bcf	3980,3,c	;volatile
  3010                           
  3011                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3012  0016A4  0E42               	movlw	66
  3013  0016A6                     u897:
  3014  0016A6  2EE8               	decfsz	wreg,f,c
  3015  0016A8  D7FE               	bra	u897
  3016  0016AA  D000               	nop2	
  3017                           
  3018                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  3019  0016AC  868C               	bsf	3980,3,c	;volatile
  3020                           
  3021                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3022  0016AE  0E42               	movlw	66
  3023  0016B0                     u907:
  3024  0016B0  2EE8               	decfsz	wreg,f,c
  3025  0016B2  D7FE               	bra	u907
  3026  0016B4  D000               	nop2	
  3027  0016B6  0012               	return		;funcret
  3028  0016B8                     __end_of_lcdNibble:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon2	equ	0xFF1
  3037                           postinc0	equ	0xFEE
  3038                           wreg	equ	0xFE8
  3039                           indf2	equ	0xFDF
  3040                           postinc2	equ	0xFDE
  3041                           postdec2	equ	0xFDD
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _keycheck *****************
  3047 ;; Defined at:
  3048 ;;		line 50 in file "main.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;		None
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;Total ram usage:        0 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_displayLogs
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text22
  3076  001850                     __ptext22:
  3077                           	opt stack 0
  3078  001850                     _keycheck:
  3079                           	opt stack 29
  3080  001850                     l105:
  3081  001850  A281               	btfss	3969,1,c	;volatile
  3082  001852  D7FE               	goto	l105
  3083                           
  3084                           ;main.c: 54: }
  3085                           ;main.c: 55: keypress = (PORTB & 0xF0)>>4;
  3086  001854  3881               	swapf	3969,w,c	;volatile
  3087  001856  0B0F               	andlw	15
  3088  001858  0B0F               	andlw	15
  3089  00185A  6E2D               	movwf	_keypress,c	;volatile
  3090  00185C                     l108:
  3091  00185C  B281               	btfsc	3969,1,c	;volatile
  3092  00185E  D7FE               	goto	l108
  3093                           
  3094                           ;main.c: 58: }
  3095                           ;main.c: 59: __nop();
  3096  001860  F000               	nop	
  3097                           
  3098                           ;main.c: 60: return;
  3099  001862  0012               	return		;funcret
  3100  001864                     __end_of_keycheck:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon2	equ	0xFF1
  3109                           postinc0	equ	0xFEE
  3110                           wreg	equ	0xFE8
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _PWM1off *****************
  3119 ;; Defined at:
  3120 ;;		line 19 in file "motors.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;		None
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;Total ram usage:        0 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text23
  3148  001898                     __ptext23:
  3149                           	opt stack 0
  3150  001898                     _PWM1off:
  3151                           	opt stack 30
  3152                           
  3153                           ;motors.c: 20: CCP1CONbits.DC1B0 = 0;
  3154                           
  3155                           ;incstack = 0
  3156  001898  98BD               	bcf	4029,4,c	;volatile
  3157                           
  3158                           ;motors.c: 21: CCP1CONbits.DC1B1 = 0;
  3159  00189A  9ABD               	bcf	4029,5,c	;volatile
  3160                           
  3161                           ;motors.c: 22: CCPR1L = 0;
  3162  00189C  0E00               	movlw	0
  3163  00189E  6EBE               	movwf	4030,c	;volatile
  3164  0018A0  0012               	return		;funcret
  3165  0018A2                     __end_of_PWM1off:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           intcon2	equ	0xFF1
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _PWM1 *****************
  3184 ;; Defined at:
  3185 ;;		line 5 in file "motors.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  duty            2    0[COMRAM] int 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;Total ram usage:        4 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_main
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text24
  3213  00170A                     __ptext24:
  3214                           	opt stack 0
  3215  00170A                     _PWM1:
  3216                           	opt stack 30
  3217                           
  3218                           ;motors.c: 13: CCP1CONbits.DC1B0 = duty & 1;
  3219                           
  3220                           ;incstack = 0
  3221  00170A  C001  F003         	movff	PWM1@duty,??_PWM1
  3222  00170E  0E01               	movlw	1
  3223  001710  1603               	andwf	??_PWM1,f,c
  3224  001712  3A03               	swapf	??_PWM1,f,c
  3225  001714  50BD               	movf	4029,w,c	;volatile
  3226  001716  1803               	xorwf	??_PWM1,w,c
  3227  001718  0BEF               	andlw	-17
  3228  00171A  1803               	xorwf	??_PWM1,w,c
  3229  00171C  6EBD               	movwf	4029,c	;volatile
  3230                           
  3231                           ;motors.c: 14: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  3232  00171E  3402               	rlcf	PWM1@duty+1,w,c
  3233  001720  3002               	rrcf	PWM1@duty+1,w,c
  3234  001722  6E04               	movwf	(??_PWM1+1)& (0+255),c
  3235  001724  3001               	rrcf	PWM1@duty,w,c
  3236  001726  6E03               	movwf	??_PWM1& (0+255),c
  3237  001728  0E01               	movlw	1
  3238  00172A  1603               	andwf	??_PWM1,f,c
  3239  00172C  3A03               	swapf	??_PWM1,f,c
  3240  00172E  4603               	rlncf	??_PWM1,f,c
  3241  001730  50BD               	movf	4029,w,c	;volatile
  3242  001732  1803               	xorwf	??_PWM1,w,c
  3243  001734  0BDF               	andlw	-33
  3244  001736  1803               	xorwf	??_PWM1,w,c
  3245  001738  6EBD               	movwf	4029,c	;volatile
  3246                           
  3247                           ;motors.c: 15: CCPR1L = (duty >> 2);
  3248  00173A  C001  F003         	movff	PWM1@duty,??_PWM1
  3249  00173E  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  3250  001742  3404               	rlcf	??_PWM1+1,w,c
  3251  001744  3204               	rrcf	??_PWM1+1,f,c
  3252  001746  3203               	rrcf	??_PWM1,f,c
  3253  001748  3404               	rlcf	??_PWM1+1,w,c
  3254  00174A  3204               	rrcf	??_PWM1+1,f,c
  3255  00174C  3203               	rrcf	??_PWM1,f,c
  3256  00174E  5003               	movf	??_PWM1,w,c
  3257  001750  6EBE               	movwf	4030,c	;volatile
  3258  001752  0012               	return		;funcret
  3259  001754                     __end_of_PWM1:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon2	equ	0xFF1
  3268                           postinc0	equ	0xFEE
  3269                           wreg	equ	0xFE8
  3270                           indf2	equ	0xFDF
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           intcon2	equ	0xFF1
  3283                           postinc0	equ	0xFEE
  3284                           wreg	equ	0xFE8
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292                           	psect	rparam
  3293  0000                     tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           prodh	equ	0xFF4
  3298                           prodl	equ	0xFF3
  3299                           intcon2	equ	0xFF1
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8


Data Sizes:
    Strings     156
    Constant    32
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     37      45
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_12(CODE[15]), STR_11(CODE[16]), STR_10(CODE[15]), STR_9(CODE[16]), 
		 -> STR_8(CODE[14]), STR_7(CODE[16]), STR_6(CODE[16]), STR_5(CODE[16]), 
		 -> STR_4(CODE[8]), STR_3(CODE[15]), STR_2(CODE[8]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLogs
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->___lwdiv
    _putch->_lcdNibble
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    7895
                                             30 COMRAM     7     7      0
                               _PWM1
                            _PWM1off
                        _displayLogs
                         _homescreen
                         _initialize
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     504
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     466
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    2229
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    2229
                                             29 COMRAM     1     1      0
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    2139
                                              7 COMRAM    22    14      8
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _displayLogs
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readADC
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     25      2D       1       35.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2D      34        0.0%
DATA                 0      0      2D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 01 00:59:19 2017

             ?_displayLogs 0001        ___wmul@multiplicand 0003                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l105 1850  
                      l114 184C                        l115 1848                        l108 185C  
                      l311 1290                        l307 1240                        l193 1864  
                      l723 1700                        l670 14B8               __CFG_CPB$OFF 000000  
                      u110 17B8                        _PR2 000FCB                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28                        u807 1312  
                      u817 17FA                        u907 16B0                        u827 175A  
                      u837 178E                        u847 13AA                        u695 1636  
                      u857 13E2                        u867 141A                        u877 167A  
                      u797 12D4                        u887 1684                        u897 16A6  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1046 17BA                       l1400 146A  
                     l1160 1802                       l1402 1476                       l1412 14AA  
                     l1404 147A                       l1422 16CE                       l1510 1246  
                     l1158 17F4                       l1424 16D6                       l1504 1224  
                     l1434 16F6                       l1426 16DA                       l1506 122C  
                     l1450 10E6                       l1530 1574                       l1460 111A  
                     l1444 10C8                       l1516 1298                       l1540 1598  
                     l1470 1176                       l1454 10EC                       l1534 157C  
                     l1622 12DE                       l1384 181E                       l1448 10D8  
                     l1490 11DE                       l1650 1350                       l1494 1202  
                     l1478 11B2                       l1654 135C                       l1496 120A  
                     l1672 1390                       l1666 137E                       _ADFM 007E07  
                     STR_1 1042                       STR_2 10B5                       STR_3 1090  
                     STR_4 10AD                       STR_5 1052                       STR_6 1062  
                     STR_7 1032                       STR_8 109F                       STR_9 1032  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       _RCEN 007E2B  
                     _PWM1 170A                       _RSEN 007E29            __end_of_PWM1off 18A2  
                     _main 12B2                       _keys 1001                       _time 0026  
                     fsr2h 000FDA                       indf2 000FDF                       fsr2l 000FD9  
              main@standby 0024                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ?_PWM1 0001           ?_I2C_Master_Init 000E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    _EEADR 000FA9                      STR_10 1081                      STR_11 1032  
                    STR_12 1072                      STR_13 1021            __end_of___lldiv 14CA  
                    _T2CON 000FCA            __end_of___lwdiv 170A                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 188E             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC 1808  
          __end_of_initLCD 179A             __CFG_EBTRB$OFF 000000            __end_of_isdigit 1826  
                    _putch 1876                      main@s 0020                      tablat 000FF5  
                    status 000FD8             __CFG_PBADEN$ON 000000               __end_of_PWM1 1754  
          __initialization 1826               __end_of_main 139E               __end_of_keys 1012  
                   ??_PWM1 0003                     ??_main 001F              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002         ??_I2C_Master_Start 0002  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0004  
                ??_PWM1off 0001                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _EECON2 000FA7  
                   ?_putch 0001                     _CVRCON 000FB5                     _OSCCON 000FD3  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000                     ___wmul 17C0  
           __CFG_STVREN$ON 000000                  ??___lldiv 0009                  ??___lwdiv 0005  
         __end_of_keycheck 1864                     clear_0 182C           __end_of_currtime 1021  
                ??_lcdInst 0003                     _printf 10BE       __size_of_displayLogs 00AA  
                   main@dc 0022                  ??_readADC 0001                  ??_initLCD 0004  
                ??_isdigit 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8              ?_keyinterrupt 0001  
               __accesstop 0080    __end_of__initialization 1832              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 1882         __size_of_lcdNibble 0056  
           ??_keyinterrupt 0001                    ??_putch 0003                    ?___wmul 0001  
                  _CCP1CON 000FBD                    ?_printf 0008                    _PWM1off 1898  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                ?_keycheck 0001          __end_of_lcdNibble 16B8                    __Hparam 0000  
                  __Lparam 0000                    ___lldiv 1448            __size_of___wmul 0026  
                  ___lwdiv 16B8                  _CMCONbits 000FB4                 _homescreen 15A6  
             __psmallconst 1000                    __pcinit 1826                    __ramtop 1000  
               _initialize 14CA                    _lcdInst 1882                    __ptext0 12B2  
                  __ptext1 1540                    __ptext2 188E                    __ptext3 18A2  
                  __ptext4 18AA                    __ptext5 179A                    __ptext6 1864  
                  __ptext7 17E6                    __ptext8 183C                    __ptext9 14CA  
          __size_of_printf 01F4                    _readADC 17E6                    _initLCD 1754  
        __end_of_hexpowers 101A                    _isdigit 1808   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
     end_of_initialization 1832                 ??_keycheck 0001              __Lmediumconst 0000  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005  
          ___lldiv@counter 000D       __end_of_keyinterrupt 1850                    printf@c 001D  
                  printf@f 0008           I2C_Master_Init@c 000E           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                _PORTBbits 000F81                 _updateTime 1540                _CCP1CONbits 000FBD  
              printf@width 001B              ??_displayLogs 001E                ?_homescreen 0001  
           __end_of___wmul 17E6                ?_initialize 0001             __end_of_printf 12B2  
      start_initialization 1826                updateTime@j 0004          ??_I2C_Master_Init 0012  
        ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001          ??_I2C_Master_Stop 0002  
                 ??___wmul 0005           __CFG_LPT1OSC$OFF 000000                   ??_printf 0010  
      __end_of_displayLogs 1448                __pbssCOMRAM 0026                ?_updateTime 0001  
                 ?_PWM1off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0014  
      __size_of_initialize 0076           _I2C_Master_Start 18AA           _I2C_Master_Write 188E  
        __size_of_keycheck 0014           ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000  
                _lcdNibble 1662                   ?___lldiv 0001                   PWM1@duty 0001  
                 ?___lwdiv 0001                   ?_lcdInst 0001                   ?_readADC 0001  
                 ?_initLCD 0001                __smallconst 1000                   ?_isdigit 0001  
             _keyinterrupt 183C                  _hexpowers 1012           ___lwdiv@quotient 0005  
           __size_of_putch 000C             ___wmul@product 0005                   _LATDbits 000F8C  
                 _LATEbits 000F8D                   _PIR2bits 000FA1           __CFG_WDTPS$32768 000000  
      __size_of_updateTime 0066                 ?_lcdNibble 0001                _displayLogs 139E  
               _ADCON0bits 000FC2          ___wmul@multiplier 0001              lcdNibble@data 0002  
               printf@flag 0017              lcdNibble@temp 0001                 printf@prec 001A  
      I2C_Master_Read@temp 0003           __size_of_PWM1off 000A                 _EECON1bits 000FA6  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 001E           __size_of___lldiv 0082           __size_of___lwdiv 0052  
           readADC@channel 0002               ??_initialize 0016                _isdigit$881 0002  
         __size_of_lcdInst 000C            _I2C_Master_Init 1608           __size_of_readADC 0022  
          _I2C_Master_Read 179A           __size_of_initLCD 0046            _I2C_Master_Wait 1864  
          _I2C_Master_Stop 18A2           __size_of_isdigit 001E            ___lwdiv@divisor 0003  
          ___lwdiv@counter 0007                   __ptext10 1754                   __ptext11 1608  
                 __ptext20 1882                   __ptext12 1448                   __ptext21 1662  
                 __ptext13 15A6                   __ptext22 1850                   __ptext14 139E  
                 __ptext23 1898                   __ptext15 10BE                   __ptext24 170A  
                 __ptext16 1876                   __ptext17 1808                   __ptext18 17C0  
                 __ptext19 16B8              __size_of_PWM1 004A         __end_of_homescreen 1608  
                 _keycheck 1850              __size_of_main 00EC                   _currtime 101A  
                 _keypress 002D         __end_of_initialize 1540                ??_lcdNibble 0001  
                printf@idx 0016                  printf@val 0018                  putch@data 0003  
 __end_of_I2C_Master_Start 18B2                _OSCTUNEbits 000F9B   __end_of_I2C_Master_Write 1898  
             ??_updateTime 0004                   isdigit@c 0003           ___lldiv@dividend 0001  
                 printf@ap 0014         __end_of_updateTime 15A6    __end_of_I2C_Master_Init 1662  
  __end_of_I2C_Master_Read 17C0    __end_of_I2C_Master_Wait 1876    __end_of_I2C_Master_Stop 18AA  
              lcdInst@data 0003           ___lldiv@quotient 0009          I2C_Master_Write@d 0002  
