

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr 09 02:30:19 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.41
    53                           ; Generated 25/01/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4620 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	mediumconst
    88  00FDD4                     __pmediumconst:
    89                           	opt stack 0
    90  00FDD4  00                 	db	0
    91  00FDD5                     _dpowers:
    92                           	opt stack 0
    93  00FDD5  0001               	dw	1
    94  00FDD7  0000               	dw	0
    95  00FDD9  000A               	dw	10
    96  00FDDB  0000               	dw	0
    97  00FDDD  0064               	dw	100
    98  00FDDF  0000               	dw	0
    99  00FDE1  03E8               	dw	1000
   100  00FDE3  0000               	dw	0
   101  00FDE5  2710               	dw	10000
   102  00FDE7  0000               	dw	0
   103  00FDE9  86A0               	dw	34464
   104  00FDEB  0001               	dw	1
   105  00FDED  4240               	dw	16960
   106  00FDEF  000F               	dw	15
   107  00FDF1  9680               	dw	38528
   108  00FDF3  0098               	dw	152
   109  00FDF5  E100               	dw	57600
   110  00FDF7  05F5               	dw	1525
   111  00FDF9  CA00               	dw	51712
   112  00FDFB  3B9A               	dw	15258
   113  00FDFD                     __end_of_dpowers:
   114                           	opt stack 0
   115  00FDFD                     _hexpowers:
   116                           	opt stack 0
   117  00FDFD  0001               	dw	1
   118  00FDFF  0000               	dw	0
   119  00FE01  0010               	dw	16
   120  00FE03  0000               	dw	0
   121  00FE05  0100               	dw	256
   122  00FE07  0000               	dw	0
   123  00FE09  1000               	dw	4096
   124  00FE0B  0000               	dw	0
   125  00FE0D  0000               	dw	0
   126  00FE0F  0001               	dw	1
   127  00FE11  0000               	dw	0
   128  00FE13  0010               	dw	16
   129  00FE15  0000               	dw	0
   130  00FE17  0100               	dw	256
   131  00FE19  0000               	dw	0
   132  00FE1B  1000               	dw	4096
   133  00FE1D                     __end_of_hexpowers:
   134                           	opt stack 0
   135  00FE1D                     _keys:
   136                           	opt stack 0
   137  00FE1D  31                 	db	49
   138  00FE1E  32                 	db	50
   139  00FE1F  33                 	db	51
   140  00FE20  41                 	db	65
   141  00FE21  34                 	db	52
   142  00FE22  35                 	db	53
   143  00FE23  36                 	db	54
   144  00FE24  42                 	db	66
   145  00FE25  37                 	db	55
   146  00FE26  38                 	db	56
   147  00FE27  39                 	db	57
   148  00FE28  43                 	db	67
   149  00FE29  2A                 	db	42
   150  00FE2A  30                 	db	48
   151  00FE2B  23                 	db	35
   152  00FE2C  44                 	db	68
   153  00FE2D  00                 	db	0
   154  00FE2E                     __end_of_keys:
   155                           	opt stack 0
   156  00FE2E                     _currtime:
   157                           	opt stack 0
   158  00FE2E  30                 	db	48
   159  00FE2F  26                 	db	38
   160  00FE30  13                 	db	19
   161  00FE31  04                 	db	4
   162  00FE32  01                 	db	1
   163  00FE33  03                 	db	3
   164  00FE34  17                 	db	23
   165  00FE35                     __end_of_currtime:
   166                           	opt stack 0
   167  0000                     _ADRES	set	4035
   168  0000                     _TMR3L	set	4018
   169  0000                     _TMR3H	set	4019
   170  0000                     _T3CON	set	4017
   171  0000                     _ADCON0bits	set	4034
   172  0000                     _ADCON0	set	4034
   173  0000                     _PIR2bits	set	4001
   174  0000                     _EECON2	set	4007
   175  0000                     _EEDATA	set	4008
   176  0000                     _EECON1bits	set	4006
   177  0000                     _EEADR	set	4009
   178  0000                     _EEADRH	set	4010
   179  0000                     _PORTB	set	3969
   180  0000                     _PORTBbits	set	3969
   181  0000                     _CCP2CONbits	set	4026
   182  0000                     _CCP1CONbits	set	4029
   183  0000                     _SSPBUF	set	4041
   184  0000                     _SSPADD	set	4040
   185  0000                     _SSPCON2	set	4037
   186  0000                     _SSPCON1	set	4038
   187  0000                     _SSPSTAT	set	4039
   188  0000                     _ADRESH	set	4036
   189  0000                     _LATAbits	set	3977
   190  0000                     _LATEbits	set	3981
   191  0000                     _LATCbits	set	3979
   192  0000                     _LATBbits	set	3978
   193  0000                     _LATDbits	set	3980
   194  0000                     _T0CONbits	set	4053
   195  0000                     _CMCONbits	set	4020
   196  0000                     _CVRCON	set	4021
   197  0000                     _ADCON2	set	4032
   198  0000                     _ADCON1	set	4033
   199  0000                     _LATE	set	3981
   200  0000                     _LATD	set	3980
   201  0000                     _LATC	set	3979
   202  0000                     _LATB	set	3978
   203  0000                     _LATA	set	3977
   204  0000                     _T2CON	set	4042
   205  0000                     _CCPR2L	set	4027
   206  0000                     _CCP2CON	set	4026
   207  0000                     _CCPR1L	set	4030
   208  0000                     _CCP1CON	set	4029
   209  0000                     _PR2	set	4043
   210  0000                     _TRISE	set	3990
   211  0000                     _TRISD	set	3989
   212  0000                     _TRISC	set	3988
   213  0000                     _TRISB	set	3987
   214  0000                     _TRISA	set	3986
   215  0000                     _OSCTUNEbits	set	3995
   216  0000                     _OSCCON	set	4051
   217  0000                     _TMR1L	set	4046
   218  0000                     _TMR1H	set	4047
   219  0000                     _T1CON	set	4045
   220  0000                     _TMR0L	set	4054
   221  0000                     _TMR0H	set	4055
   222  0000                     _T0CON	set	4053
   223  0000                     _INTCONbits	set	4082
   224  0000                     _TMR3ON	set	32136
   225  0000                     _ACKEN	set	32300
   226  0000                     _ACKDT	set	32301
   227  0000                     _RCEN	set	32299
   228  0000                     _PEN	set	32298
   229  0000                     _RSEN	set	32297
   230  0000                     _SEN	set	32296
   231  0000                     _TRISC4	set	31908
   232  0000                     _TRISC3	set	31907
   233  0000                     _PEIE	set	32662
   234  0000                     _TMR1IE	set	31976
   235  0000                     _TMR0IE	set	32661
   236  0000                     _ADFM	set	32263
   237  0000                     _nRBPU	set	32655
   238  0000                     _TMR1ON	set	32360
   239  0000                     _TMR1IF	set	31984
   240  0000                     _TMR0ON	set	32431
   241  0000                     _TMR0IF	set	32658
   242  00FE35                     STR_45:
   243  00FE35  44                 	db	68	;'D'
   244  00FE36  61                 	db	97	;'a'
   245  00FE37  74                 	db	116	;'t'
   246  00FE38  65                 	db	101	;'e'
   247  00FE39  3A                 	db	58	;':'
   248  00FE3A  20                 	db	32
   249  00FE3B  25                 	db	37
   250  00FE3C  30                 	db	48	;'0'
   251  00FE3D  32                 	db	50	;'2'
   252  00FE3E  78                 	db	120	;'x'
   253  00FE3F  2F                 	db	47
   254  00FE40  25                 	db	37
   255  00FE41  30                 	db	48	;'0'
   256  00FE42  32                 	db	50	;'2'
   257  00FE43  78                 	db	120	;'x'
   258  00FE44  2F                 	db	47
   259  00FE45  25                 	db	37
   260  00FE46  30                 	db	48	;'0'
   261  00FE47  32                 	db	50	;'2'
   262  00FE48  78                 	db	120	;'x'
   263  00FE49  00                 	db	0
   264  00FE4A                     STR_56:
   265  00FE4A  30                 	db	48	;'0'
   266  00FE4B  31                 	db	49	;'1'
   267  00FE4C  32                 	db	50	;'2'
   268  00FE4D  33                 	db	51	;'3'
   269  00FE4E  34                 	db	52	;'4'
   270  00FE4F  35                 	db	53	;'5'
   271  00FE50  36                 	db	54	;'6'
   272  00FE51  37                 	db	55	;'7'
   273  00FE52  38                 	db	56	;'8'
   274  00FE53  39                 	db	57	;'9'
   275  00FE54  61                 	db	97	;'a'
   276  00FE55  62                 	db	98	;'b'
   277  00FE56  63                 	db	99	;'c'
   278  00FE57  64                 	db	100	;'d'
   279  00FE58  65                 	db	101	;'e'
   280  00FE59  66                 	db	102	;'f'
   281  00FE5A  00                 	db	0
   282  00FE5B                     STR_51:
   283  00FE5B  53                 	db	83	;'S'
   284  00FE5C  6F                 	db	111	;'o'
   285  00FE5D  64                 	db	100	;'d'
   286  00FE5E  61                 	db	97	;'a'
   287  00FE5F  20                 	db	32
   288  00FE60  77                 	db	119	;'w'
   289  00FE61  2F                 	db	47
   290  00FE62  6F                 	db	111	;'o'
   291  00FE63  20                 	db	32
   292  00FE64  74                 	db	116	;'t'
   293  00FE65  61                 	db	97	;'a'
   294  00FE66  62                 	db	98	;'b'
   295  00FE67  3A                 	db	58	;':'
   296  00FE68  20                 	db	32
   297  00FE69  25                 	db	37
   298  00FE6A  64                 	db	100	;'d'
   299  00FE6B  00                 	db	0
   300  00FE6C                     STR_55:
   301  00FE6C  53                 	db	83	;'S'
   302  00FE6D  6F                 	db	111	;'o'
   303  00FE6E  75                 	db	117	;'u'
   304  00FE6F  70                 	db	112	;'p'
   305  00FE70  20                 	db	32
   306  00FE71  77                 	db	119	;'w'
   307  00FE72  2F                 	db	47
   308  00FE73  6F                 	db	111	;'o'
   309  00FE74  20                 	db	32
   310  00FE75  6C                 	db	108	;'l'
   311  00FE76  62                 	db	98	;'b'
   312  00FE77  6C                 	db	108	;'l'
   313  00FE78  3A                 	db	58	;':'
   314  00FE79  20                 	db	32
   315  00FE7A  25                 	db	37
   316  00FE7B  64                 	db	100	;'d'
   317  00FE7C  00                 	db	0
   318  00FE7D                     STR_42:
   319  00FE7D  52                 	db	82	;'R'
   320  00FE7E  75                 	db	117	;'u'
   321  00FE7F  6E                 	db	110	;'n'
   322  00FE80  23                 	db	35
   323  00FE81  25                 	db	37
   324  00FE82  64                 	db	100	;'d'
   325  00FE83  20                 	db	32
   326  00FE84  20                 	db	32
   327  00FE85  20                 	db	32
   328  00FE86  20                 	db	32
   329  00FE87  41                 	db	65	;'A'
   330  00FE88  3A                 	db	58	;':'
   331  00FE89  4E                 	db	78	;'N'
   332  00FE8A  65                 	db	101	;'e'
   333  00FE8B  78                 	db	120	;'x'
   334  00FE8C  74                 	db	116	;'t'
   335  00FE8D  00                 	db	0
   336  00FE8E                     STR_35:
   337  00FE8E  56                 	db	86	;'V'
   338  00FE8F  69                 	db	105	;'i'
   339  00FE90  65                 	db	101	;'e'
   340  00FE91  77                 	db	119	;'w'
   341  00FE92  20                 	db	32
   342  00FE93  4C                 	db	76	;'L'
   343  00FE94  6F                 	db	111	;'o'
   344  00FE95  67                 	db	103	;'g'
   345  00FE96  73                 	db	115	;'s'
   346  00FE97  3F                 	db	63	;'?'
   347  00FE98  20                 	db	32
   348  00FE99  42                 	db	66	;'B'
   349  00FE9A  3A                 	db	58	;':'
   350  00FE9B  59                 	db	89	;'Y'
   351  00FE9C  65                 	db	101	;'e'
   352  00FE9D  73                 	db	115	;'s'
   353  00FE9E  00                 	db	0
   354  00FE9F                     STR_37:
   355  00FE9F  25                 	db	37
   356  00FEA0  30                 	db	48	;'0'
   357  00FEA1  32                 	db	50	;'2'
   358  00FEA2  78                 	db	120	;'x'
   359  00FEA3  2F                 	db	47
   360  00FEA4  25                 	db	37
   361  00FEA5  30                 	db	48	;'0'
   362  00FEA6  32                 	db	50	;'2'
   363  00FEA7  78                 	db	120	;'x'
   364  00FEA8  2F                 	db	47
   365  00FEA9  25                 	db	37
   366  00FEAA  30                 	db	48	;'0'
   367  00FEAB  32                 	db	50	;'2'
   368  00FEAC  78                 	db	120	;'x'
   369  00FEAD  20                 	db	32
   370  00FEAE  00                 	db	0
   371  00FEAF                     STR_49:
   372  00FEAF  53                 	db	83	;'S'
   373  00FEB0  6F                 	db	111	;'o'
   374  00FEB1  64                 	db	100	;'d'
   375  00FEB2  61                 	db	97	;'a'
   376  00FEB3  20                 	db	32
   377  00FEB4  77                 	db	119	;'w'
   378  00FEB5  2F                 	db	47
   379  00FEB6  20                 	db	32
   380  00FEB7  74                 	db	116	;'t'
   381  00FEB8  61                 	db	97	;'a'
   382  00FEB9  62                 	db	98	;'b'
   383  00FEBA  3A                 	db	58	;':'
   384  00FEBB  20                 	db	32
   385  00FEBC  25                 	db	37
   386  00FEBD  64                 	db	100	;'d'
   387  00FEBE  00                 	db	0
   388  00FEBF                     STR_53:
   389  00FEBF  53                 	db	83	;'S'
   390  00FEC0  6F                 	db	111	;'o'
   391  00FEC1  75                 	db	117	;'u'
   392  00FEC2  70                 	db	112	;'p'
   393  00FEC3  20                 	db	32
   394  00FEC4  77                 	db	119	;'w'
   395  00FEC5  2F                 	db	47
   396  00FEC6  20                 	db	32
   397  00FEC7  6C                 	db	108	;'l'
   398  00FEC8  62                 	db	98	;'b'
   399  00FEC9  6C                 	db	108	;'l'
   400  00FECA  3A                 	db	58	;':'
   401  00FECB  20                 	db	32
   402  00FECC  25                 	db	37
   403  00FECD  64                 	db	100	;'d'
   404  00FECE  00                 	db	0
   405  00FECF                     STR_47:
   406  00FECF  53                 	db	83	;'S'
   407  00FED0  74                 	db	116	;'t'
   408  00FED1  61                 	db	97	;'a'
   409  00FED2  72                 	db	114	;'r'
   410  00FED3  74                 	db	116	;'t'
   411  00FED4  3A                 	db	58	;':'
   412  00FED5  20                 	db	32
   413  00FED6  25                 	db	37
   414  00FED7  64                 	db	100	;'d'
   415  00FED8  3A                 	db	58	;':'
   416  00FED9  25                 	db	37
   417  00FEDA  64                 	db	100	;'d'
   418  00FEDB  3A                 	db	58	;':'
   419  00FEDC  25                 	db	37
   420  00FEDD  64                 	db	100	;'d'
   421  00FEDE  00                 	db	0
   422  00FEDF                     STR_1:
   423  00FEDF  53                 	db	83	;'S'
   424  00FEE0  6F                 	db	111	;'o'
   425  00FEE1  72                 	db	114	;'r'
   426  00FEE2  74                 	db	116	;'t'
   427  00FEE3  69                 	db	105	;'i'
   428  00FEE4  6E                 	db	110	;'n'
   429  00FEE5  67                 	db	103	;'g'
   430  00FEE6  20                 	db	32
   431  00FEE7  63                 	db	99	;'c'
   432  00FEE8  61                 	db	97	;'a'
   433  00FEE9  6E                 	db	110	;'n'
   434  00FEEA  73                 	db	115	;'s'
   435  00FEEB  2E                 	db	46
   436  00FEEC  2E                 	db	46
   437  00FEED  2E                 	db	46
   438  00FEEE  00                 	db	0
   439  00FEEF                     STR_7:
   440  00FEEF  74                 	db	116	;'t'
   441  00FEF0  65                 	db	101	;'e'
   442  00FEF1  73                 	db	115	;'s'
   443  00FEF2  74                 	db	116	;'t'
   444  00FEF3  69                 	db	105	;'i'
   445  00FEF4  6E                 	db	110	;'n'
   446  00FEF5  67                 	db	103	;'g'
   447  00FEF6  20                 	db	32
   448  00FEF7  53                 	db	83	;'S'
   449  00FEF8  20                 	db	32
   450  00FEF9  73                 	db	115	;'s'
   451  00FEFA  68                 	db	104	;'h'
   452  00FEFB  61                 	db	97	;'a'
   453  00FEFC  6B                 	db	107	;'k'
   454  00FEFD  65                 	db	101	;'e'
   455  00FEFE  00                 	db	0
   456  00FEFF                     STR_34:
   457  00FEFF  53                 	db	83	;'S'
   458  00FF00  6F                 	db	111	;'o'
   459  00FF01  72                 	db	114	;'r'
   460  00FF02  74                 	db	116	;'t'
   461  00FF03  20                 	db	32
   462  00FF04  64                 	db	100	;'d'
   463  00FF05  6F                 	db	111	;'o'
   464  00FF06  6E                 	db	110	;'n'
   465  00FF07  65                 	db	101	;'e'
   466  00FF08  21                 	db	33
   467  00FF09  20                 	db	32
   468  00FF0A  41                 	db	65	;'A'
   469  00FF0B  3A                 	db	58	;':'
   470  00FF0C  4E                 	db	78	;'N'
   471  00FF0D  6F                 	db	111	;'o'
   472  00FF0E  00                 	db	0
   473  00FF0F                     STR_2:
   474  00FF0F  41                 	db	65	;'A'
   475  00FF10  6E                 	db	110	;'n'
   476  00FF11  79                 	db	121	;'y'
   477  00FF12  20                 	db	32
   478  00FF13  6B                 	db	107	;'k'
   479  00FF14  65                 	db	101	;'e'
   480  00FF15  79                 	db	121	;'y'
   481  00FF16  20                 	db	32
   482  00FF17  74                 	db	116	;'t'
   483  00FF18  6F                 	db	111	;'o'
   484  00FF19  20                 	db	32
   485  00FF1A  73                 	db	115	;'s'
   486  00FF1B  74                 	db	116	;'t'
   487  00FF1C  6F                 	db	111	;'o'
   488  00FF1D  70                 	db	112	;'p'
   489  00FF1E  00                 	db	0
   490  00FF1F                     STR_8:
   491  00FF1F  74                 	db	116	;'t'
   492  00FF20  65                 	db	101	;'e'
   493  00FF21  73                 	db	115	;'s'
   494  00FF22  74                 	db	116	;'t'
   495  00FF23  69                 	db	105	;'i'
   496  00FF24  6E                 	db	110	;'n'
   497  00FF25  67                 	db	103	;'g'
   498  00FF26  20                 	db	32
   499  00FF27  53                 	db	83	;'S'
   500  00FF28  31                 	db	49	;'1'
   501  00FF29  20                 	db	32
   502  00FF2A  70                 	db	112	;'p'
   503  00FF2B  69                 	db	105	;'i'
   504  00FF2C  6E                 	db	110	;'n'
   505  00FF2D  73                 	db	115	;'s'
   506  00FF2E  00                 	db	0
   507  00FF2F                     STR_10:
   508  00FF2F  74                 	db	116	;'t'
   509  00FF30  65                 	db	101	;'e'
   510  00FF31  73                 	db	115	;'s'
   511  00FF32  74                 	db	116	;'t'
   512  00FF33  69                 	db	105	;'i'
   513  00FF34  6E                 	db	110	;'n'
   514  00FF35  67                 	db	103	;'g'
   515  00FF36  20                 	db	32
   516  00FF37  53                 	db	83	;'S'
   517  00FF38  32                 	db	50	;'2'
   518  00FF39  20                 	db	32
   519  00FF3A  70                 	db	112	;'p'
   520  00FF3B  69                 	db	105	;'i'
   521  00FF3C  6E                 	db	110	;'n'
   522  00FF3D  73                 	db	115	;'s'
   523  00FF3E  00                 	db	0
   524  00FF3F                     STR_11:
   525  00FF3F  74                 	db	116	;'t'
   526  00FF40  65                 	db	101	;'e'
   527  00FF41  73                 	db	115	;'s'
   528  00FF42  74                 	db	116	;'t'
   529  00FF43  69                 	db	105	;'i'
   530  00FF44  6E                 	db	110	;'n'
   531  00FF45  67                 	db	103	;'g'
   532  00FF46  20                 	db	32
   533  00FF47  53                 	db	83	;'S'
   534  00FF48  33                 	db	51	;'3'
   535  00FF49  20                 	db	32
   536  00FF4A  70                 	db	112	;'p'
   537  00FF4B  69                 	db	105	;'i'
   538  00FF4C  6E                 	db	110	;'n'
   539  00FF4D  73                 	db	115	;'s'
   540  00FF4E  00                 	db	0
   541  00FF4F                     STR_39:
   542  00FF4F  25                 	db	37
   543  00FF50  30                 	db	48	;'0'
   544  00FF51  32                 	db	50	;'2'
   545  00FF52  78                 	db	120	;'x'
   546  00FF53  3A                 	db	58	;':'
   547  00FF54  25                 	db	37
   548  00FF55  30                 	db	48	;'0'
   549  00FF56  32                 	db	50	;'2'
   550  00FF57  78                 	db	120	;'x'
   551  00FF58  3A                 	db	58	;':'
   552  00FF59  25                 	db	37
   553  00FF5A  30                 	db	48	;'0'
   554  00FF5B  32                 	db	50	;'2'
   555  00FF5C  78                 	db	120	;'x'
   556  00FF5D  00                 	db	0
   557  00FF5E                     STR_15:
   558  00FF5E  74                 	db	116	;'t'
   559  00FF5F  65                 	db	101	;'e'
   560  00FF60  73                 	db	115	;'s'
   561  00FF61  74                 	db	116	;'t'
   562  00FF62  69                 	db	105	;'i'
   563  00FF63  6E                 	db	110	;'n'
   564  00FF64  67                 	db	103	;'g'
   565  00FF65  20                 	db	32
   566  00FF66  54                 	db	84	;'T'
   567  00FF67  4D                 	db	77	;'M'
   568  00FF68  52                 	db	82	;'R'
   569  00FF69  30                 	db	48	;'0'
   570  00FF6A  00                 	db	0
   571  00FF6B                     STR_14:
   572  00FF6B  74                 	db	116	;'t'
   573  00FF6C  65                 	db	101	;'e'
   574  00FF6D  73                 	db	115	;'s'
   575  00FF6E  74                 	db	116	;'t'
   576  00FF6F  69                 	db	105	;'i'
   577  00FF70  6E                 	db	110	;'n'
   578  00FF71  67                 	db	103	;'g'
   579  00FF72  20                 	db	32
   580  00FF73  50                 	db	80	;'P'
   581  00FF74  57                 	db	87	;'W'
   582  00FF75  4D                 	db	77	;'M'
   583  00FF76  31                 	db	49	;'1'
   584  00FF77  00                 	db	0
   585  00FF78                     STR_13:
   586  00FF78  74                 	db	116	;'t'
   587  00FF79  65                 	db	101	;'e'
   588  00FF7A  73                 	db	115	;'s'
   589  00FF7B  74                 	db	116	;'t'
   590  00FF7C  69                 	db	105	;'i'
   591  00FF7D  6E                 	db	110	;'n'
   592  00FF7E  67                 	db	103	;'g'
   593  00FF7F  20                 	db	32
   594  00FF80  50                 	db	80	;'P'
   595  00FF81  57                 	db	87	;'W'
   596  00FF82  4D                 	db	77	;'M'
   597  00FF83  32                 	db	50	;'2'
   598  00FF84  00                 	db	0
   599  00FF85                     STR_43:
   600  00FF85  52                 	db	82	;'R'
   601  00FF86  75                 	db	117	;'u'
   602  00FF87  6E                 	db	110	;'n'
   603  00FF88  74                 	db	116	;'t'
   604  00FF89  69                 	db	105	;'i'
   605  00FF8A  6D                 	db	109	;'m'
   606  00FF8B  65                 	db	101	;'e'
   607  00FF8C  3A                 	db	58	;':'
   608  00FF8D  20                 	db	32
   609  00FF8E  25                 	db	37
   610  00FF8F  64                 	db	100	;'d'
   611  00FF90  00                 	db	0
   612  00FF91                     STR_6:
   613  00FF91  74                 	db	116	;'t'
   614  00FF92  65                 	db	101	;'e'
   615  00FF93  73                 	db	115	;'s'
   616  00FF94  74                 	db	116	;'t'
   617  00FF95  69                 	db	105	;'i'
   618  00FF96  6E                 	db	110	;'n'
   619  00FF97  67                 	db	103	;'g'
   620  00FF98  20                 	db	32
   621  00FF99  53                 	db	83	;'S'
   622  00FF9A  20                 	db	32
   623  00FF9B  62                 	db	98	;'b'
   624  00FF9C  00                 	db	0
   625  00FF9D                     STR_22:
   626  00FF9D  6C                 	db	108	;'l'
   627  00FF9E  61                 	db	97	;'a'
   628  00FF9F  62                 	db	98	;'b'
   629  00FFA0  65                 	db	101	;'e'
   630  00FFA1  6C                 	db	108	;'l'
   631  00FFA2  20                 	db	32
   632  00FFA3  20                 	db	32
   633  00FFA4  20                 	db	32
   634  00FFA5  74                 	db	116	;'t'
   635  00FFA6  61                 	db	97	;'a'
   636  00FFA7  62                 	db	98	;'b'
   637  00FFA8  00                 	db	0
   638  00FFA9                     STR_5:
   639  00FFA9  74                 	db	116	;'t'
   640  00FFAA  65                 	db	101	;'e'
   641  00FFAB  73                 	db	115	;'s'
   642  00FFAC  74                 	db	116	;'t'
   643  00FFAD  69                 	db	105	;'i'
   644  00FFAE  6E                 	db	110	;'n'
   645  00FFAF  67                 	db	103	;'g'
   646  00FFB0  20                 	db	32
   647  00FFB1  53                 	db	83	;'S'
   648  00FFB2  20                 	db	32
   649  00FFB3  66                 	db	102	;'f'
   650  00FFB4  00                 	db	0
   651  00FFB5                     STR_17:
   652  00FFB5  74                 	db	116	;'t'
   653  00FFB6  65                 	db	101	;'e'
   654  00FFB7  73                 	db	115	;'s'
   655  00FFB8  74                 	db	116	;'t'
   656  00FFB9  69                 	db	105	;'i'
   657  00FFBA  6E                 	db	110	;'n'
   658  00FFBB  67                 	db	103	;'g'
   659  00FFBC  20                 	db	32
   660  00FFBD  49                 	db	73	;'I'
   661  00FFBE  52                 	db	82	;'R'
   662  00FFBF  00                 	db	0
   663  00FFC0                     STR_36:
   664  00FFC0  25                 	db	37
   665  00FFC1  6C                 	db	108	;'l'
   666  00FFC2  64                 	db	100	;'d'
   667  00FFC3  20                 	db	32
   668  00FFC4  25                 	db	37
   669  00FFC5  64                 	db	100	;'d'
   670  00FFC6  20                 	db	32
   671  00FFC7  25                 	db	37
   672  00FFC8  64                 	db	100	;'d'
   673  00FFC9  00                 	db	0
   674  00FFCA                     STR_23:
   675  00FFCA  25                 	db	37
   676  00FFCB  78                 	db	120	;'x'
   677  00FFCC  20                 	db	32
   678  00FFCD  20                 	db	32
   679  00FFCE  20                 	db	32
   680  00FFCF  20                 	db	32
   681  00FFD0  20                 	db	32
   682  00FFD1  20                 	db	32
   683  00FFD2  00                 	db	0
   684  00FFD3                     STR_3:
   685  00FFD3  25                 	db	37
   686  00FFD4  64                 	db	100	;'d'
   687  00FFD5  20                 	db	32
   688  00FFD6  25                 	db	37
   689  00FFD7  64                 	db	100	;'d'
   690  00FFD8  20                 	db	32
   691  00FFD9  25                 	db	37
   692  00FFDA  64                 	db	100	;'d'
   693  00FFDB  00                 	db	0
   694  00FFDC                     STR_40:
   695  00FFDC  20                 	db	32
   696  00FFDD  41                 	db	65	;'A'
   697  00FFDE  3A                 	db	58	;':'
   698  00FFDF  4C                 	db	76	;'L'
   699  00FFE0  6F                 	db	111	;'o'
   700  00FFE1  67                 	db	103	;'g'
   701  00FFE2  73                 	db	115	;'s'
   702  00FFE3  00                 	db	0
   703  00FFE4                     STR_38:
   704  00FFE4  33                 	db	51	;'3'
   705  00FFE5  3A                 	db	58	;':'
   706  00FFE6  53                 	db	83	;'S'
   707  00FFE7  74                 	db	116	;'t'
   708  00FFE8  61                 	db	97	;'a'
   709  00FFE9  72                 	db	114	;'r'
   710  00FFEA  74                 	db	116	;'t'
   711  00FFEB  00                 	db	0
   712  00FFEC                     STR_25:
   713  00FFEC  25                 	db	37
   714  00FFED  78                 	db	120	;'x'
   715  00FFEE  20                 	db	32
   716  00FFEF  25                 	db	37
   717  00FFF0  64                 	db	100	;'d'
   718  00FFF1  00                 	db	0
   719  00FFF2                     STR_18:
   720  00FFF2  25                 	db	37
   721  00FFF3  78                 	db	120	;'x'
   722  00FFF4  20                 	db	32
   723  00FFF5  00                 	db	0
   724  00FFF6                     STR_4:
   725  00FFF6  25                 	db	37
   726  00FFF7  6C                 	db	108	;'l'
   727  00FFF8  75                 	db	117	;'u'
   728  00FFF9  00                 	db	0
   729  00FFFA                     STR_26:
   730  00FFFA  20                 	db	32
   731  00FFFB  25                 	db	37
   732  00FFFC  78                 	db	120	;'x'
   733  00FFFD  00                 	db	0
   734  0000                     
   735                           ; #config settings
   736  00FFFE  00                 	db	0	; dummy byte at the end
   737  0000                     
   738                           	psect	cinit
   739  002658                     __pcinit:
   740                           	opt stack 0
   741  002658                     start_initialization:
   742                           	opt stack 0
   743  002658                     __initialization:
   744                           	opt stack 0
   745                           
   746                           ; Clear objects allocated to BANK0 (14 bytes)
   747  002658  EE00  F0AA         	lfsr	0,__pbssBANK0
   748  00265C  0E0E               	movlw	14
   749  00265E                     clear_0:
   750  00265E  6AEE               	clrf	postinc0,c
   751  002660  06E8               	decf	wreg,f,c
   752  002662  E1FD               	bnz	clear_0
   753                           
   754                           ; Clear objects allocated to COMRAM (24 bytes)
   755  002664  EE00  F053         	lfsr	0,__pbssCOMRAM
   756  002668  0E18               	movlw	24
   757  00266A                     clear_1:
   758  00266A  6AEE               	clrf	postinc0,c
   759  00266C  06E8               	decf	wreg,f,c
   760  00266E  E1FD               	bnz	clear_1
   761  002670                     end_of_initialization:
   762                           	opt stack 0
   763  002670                     __end_of__initialization:
   764                           	opt stack 0
   765  002670  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   766  002672  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   767  002674  0E00               	movlw	low (__Lmediumconst shr (0+16))
   768  002676  6EF8               	movwf	tblptru,c
   769  002678  0100               	movlb	0
   770  00267A  EF09  F000         	goto	_main	;jump to C main() function
   771                           tblptru	equ	0xFF8
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775                           	psect	bssCOMRAM
   776  000053                     __pbssCOMRAM:
   777                           	opt stack 0
   778  000053                     _curr:
   779                           	opt stack 0
   780  000053                     	ds	2
   781  000055                     _prev:
   782                           	opt stack 0
   783  000055                     	ds	2
   784  000057                     _t3:
   785                           	opt stack 0
   786  000057                     	ds	2
   787  000059                     _t2:
   788                           	opt stack 0
   789  000059                     	ds	2
   790  00005B                     _t:
   791                           	opt stack 0
   792  00005B                     	ds	2
   793  00005D                     _s:
   794                           	opt stack 0
   795  00005D                     	ds	2
   796  00005F                     _s3:
   797                           	opt stack 0
   798  00005F                     	ds	2
   799  000061                     _s2:
   800                           	opt stack 0
   801  000061                     	ds	2
   802  000063                     _s1:
   803                           	opt stack 0
   804  000063                     	ds	2
   805  000065                     _S3mode:
   806                           	opt stack 0
   807  000065                     	ds	2
   808  000067                     _S2mode:
   809                           	opt stack 0
   810  000067                     	ds	2
   811  000069                     _S1mode:
   812                           	opt stack 0
   813  000069                     	ds	2
   814                           tblptru	equ	0xFF8
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           
   818                           	psect	bssBANK0
   819  0000AA                     __pbssBANK0:
   820                           	opt stack 0
   821  0000AA                     _time:
   822                           	opt stack 0
   823  0000AA                     	ds	7
   824  0000B1                     _sodaSteps:
   825                           	opt stack 0
   826  0000B1                     	ds	2
   827  0000B3                     _soupSteps:
   828                           	opt stack 0
   829  0000B3                     	ds	2
   830  0000B5                     _seconds:
   831                           	opt stack 0
   832  0000B5                     	ds	2
   833  0000B7                     _keypress:
   834                           	opt stack 0
   835  0000B7                     	ds	1
   836                           tblptru	equ	0xFF8
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           
   840                           	psect	cstackBANK0
   841  000080                     __pcstackBANK0:
   842                           	opt stack 0
   843  000080                     main@soupLoad:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x0
   847  000080                     	ds	2
   848  000082                     main@sodaLoad:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x2
   852  000082                     	ds	2
   853  000084                     main@s:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x4
   857  000084                     	ds	2
   858  000086                     main@startTime:
   859                           	opt stack 0
   860                           
   861                           ; 4 bytes @ 0x6
   862  000086                     	ds	4
   863  00008A                     main@ee:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0xA
   867  00008A                     	ds	2
   868  00008C                     _main$1791:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0xC
   872  00008C                     	ds	2
   873  00008E                     main@soupL:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0xE
   877  00008E                     	ds	2
   878  000090                     main@soupNL:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x10
   882  000090                     	ds	2
   883  000092                     main@sodaT:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x12
   887  000092                     	ds	2
   888  000094                     main@sodaNT:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x14
   892  000094                     	ds	2
   893  000096                     main@prevSoupLoad:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x16
   897  000096                     	ds	2
   898  000098                     main@prevSodaLoad:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x18
   902  000098                     	ds	2
   903  00009A                     main@soupSort:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x1A
   907  00009A                     	ds	2
   908  00009C                     main@sodaSort:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x1C
   912  00009C                     	ds	2
   913  00009E                     main@prevSoupIR:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x1E
   917  00009E                     	ds	2
   918  0000A0                     main@standby:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x20
   922  0000A0                     	ds	2
   923  0000A2                     main@tabState:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x22
   927  0000A2                     	ds	2
   928  0000A4                     main@labelState:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x24
   932  0000A4                     	ds	2
   933  0000A6                     main@prevSodaIR:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x26
   937  0000A6                     	ds	2
   938  0000A8                     main@i:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x28
   942  0000A8                     	ds	2
   943                           tblptru	equ	0xFF8
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           
   947                           	psect	cstackCOMRAM
   948  000001                     __pcstackCOMRAM:
   949                           	opt stack 0
   950  000001                     updateS2@mode:
   951                           	opt stack 0
   952  000001                     i2updateS1@mode:
   953                           	opt stack 0
   954  000001                     i2updateS3@mode:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x0
   958  000001                     	ds	2
   959  000003                     ??_updateS2:
   960  000003                     ??i2_updateS1:
   961  000003                     ??i2_updateS3:
   962                           
   963                           ; 1 bytes @ 0x2
   964  000003                     	ds	1
   965  000004                     ??_handler:
   966                           
   967                           ; 1 bytes @ 0x3
   968  000004                     	ds	14
   969  000012                     ??_readADC:
   970  000012                     ??_eepromRead:
   971  000012                     ??_isdigit:
   972  000012                     ??_I2C_Master_Wait:
   973  000012                     ?___wmul:
   974                           	opt stack 0
   975  000012                     ?___lldiv:
   976                           	opt stack 0
   977  000012                     lcdNibble@temp:
   978                           	opt stack 0
   979  000012                     eepromWrite@data:
   980                           	opt stack 0
   981  000012                     PWM1@duty:
   982                           	opt stack 0
   983  000012                     PWM2@duty:
   984                           	opt stack 0
   985  000012                     updateS1@mode:
   986                           	opt stack 0
   987  000012                     updateS3@mode:
   988                           	opt stack 0
   989  000012                     ___wmul@multiplier:
   990                           	opt stack 0
   991  000012                     ___lldiv@dividend:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x11
   995  000012                     	ds	1
   996  000013                     ??_eepromWrite:
   997  000013                     lcdNibble@data:
   998                           	opt stack 0
   999  000013                     I2C_Master_Read@a:
  1000                           	opt stack 0
  1001  000013                     readADC@channel:
  1002                           	opt stack 0
  1003  000013                     _isdigit$1443:
  1004                           	opt stack 0
  1005  000013                     I2C_Master_Write@d:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x12
  1009  000013                     	ds	1
  1010  000014                     ??_updateS1:
  1011  000014                     ??_updateS3:
  1012  000014                     ??_PWM2:
  1013  000014                     ??_PWM1:
  1014  000014                     lcdInst@data:
  1015                           	opt stack 0
  1016  000014                     putch@data:
  1017                           	opt stack 0
  1018  000014                     I2C_Master_Read@temp:
  1019                           	opt stack 0
  1020  000014                     eepromRead@address:
  1021                           	opt stack 0
  1022  000014                     isdigit@c:
  1023                           	opt stack 0
  1024  000014                     ___wmul@multiplicand:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x13
  1028  000014                     	ds	1
  1029  000015                     ??_initLCD:
  1030  000015                     updateTime@j:
  1031                           	opt stack 0
  1032  000015                     eepromWrite@address:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x14
  1036  000015                     	ds	1
  1037  000016                     addRun@dur:
  1038                           	opt stack 0
  1039  000016                     ___wmul@product:
  1040                           	opt stack 0
  1041  000016                     ___lldiv@divisor:
  1042                           	opt stack 0
  1043                           
  1044                           ; 4 bytes @ 0x15
  1045  000016                     	ds	2
  1046  000018                     addRun@year:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x17
  1050  000018                     	ds	2
  1051  00001A                     addRun@month:
  1052                           	opt stack 0
  1053  00001A                     ___lldiv@quotient:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x19
  1057  00001A                     	ds	2
  1058  00001C                     addRun@date:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x1B
  1062  00001C                     	ds	2
  1063  00001E                     ___lldiv@counter:
  1064                           	opt stack 0
  1065  00001E                     addRun@hours:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x1D
  1069  00001E                     	ds	1
  1070  00001F                     ?___llmod:
  1071                           	opt stack 0
  1072  00001F                     I2C_Master_Init@c:
  1073                           	opt stack 0
  1074  00001F                     ___llmod@dividend:
  1075                           	opt stack 0
  1076                           
  1077                           ; 4 bytes @ 0x1E
  1078  00001F                     	ds	1
  1079  000020                     addRun@mins:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x1F
  1083  000020                     	ds	2
  1084  000022                     addRun@secs:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x21
  1088  000022                     	ds	1
  1089  000023                     ??_I2C_Master_Init:
  1090  000023                     ___llmod@divisor:
  1091                           	opt stack 0
  1092                           
  1093                           ; 4 bytes @ 0x22
  1094  000023                     	ds	1
  1095  000024                     addRun@sodaT:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x23
  1099  000024                     	ds	2
  1100  000026                     addRun@sodaNT:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x25
  1104  000026                     	ds	1
  1105  000027                     ___llmod@counter:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x26
  1109  000027                     	ds	1
  1110  000028                     ?_printf:
  1111                           	opt stack 0
  1112  000028                     addRun@soupL:
  1113                           	opt stack 0
  1114  000028                     printf@f:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x27
  1118  000028                     	ds	2
  1119  00002A                     addRun@soupNL:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x29
  1123  00002A                     	ds	2
  1124  00002C                     ??_addRun:
  1125                           
  1126                           ; 1 bytes @ 0x2B
  1127  00002C                     	ds	3
  1128  00002F                     addRun@currRun:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x2E
  1132  00002F                     	ds	3
  1133  000032                     ??_printf:
  1134                           
  1135                           ; 1 bytes @ 0x31
  1136  000032                     	ds	4
  1137  000036                     printf@idx:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x35
  1141  000036                     	ds	1
  1142  000037                     printf@prec:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x36
  1146  000037                     	ds	2
  1147  000039                     printf@ap:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x38
  1151  000039                     	ds	2
  1152  00003B                     printf@val:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0x3A
  1156  00003B                     	ds	4
  1157  00003F                     printf@width:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x3E
  1161  00003F                     	ds	2
  1162  000041                     printf@flag:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x40
  1166  000041                     	ds	1
  1167  000042                     printf@c:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x41
  1171  000042                     	ds	1
  1172  000043                     displayLog@run:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x42
  1176  000043                     	ds	2
  1177  000045                     ??_displayLog:
  1178                           
  1179                           ; 1 bytes @ 0x44
  1180  000045                     	ds	3
  1181  000048                     displayLog@i:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0x47
  1185  000048                     	ds	2
  1186  00004A                     displayLog@currRun:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x49
  1190  00004A                     	ds	2
  1191  00004C                     ??_main:
  1192                           
  1193                           ; 1 bytes @ 0x4B
  1194  00004C                     	ds	7
  1195                           tblptru	equ	0xFF8
  1196                           postinc0	equ	0xFEE
  1197                           wreg	equ	0xFE8
  1198                           
  1199 ;;
  1200 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1201 ;;
  1202 ;; *************** function _main *****************
  1203 ;; Defined at:
  1204 ;;		line 100 in file "main.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  i               2   40[BANK0 ] int 
  1209 ;;  startTime       4    6[BANK0 ] long 
  1210 ;;  prevSodaIR      2   38[BANK0 ] int 
  1211 ;;  labelState      2   36[BANK0 ] int 
  1212 ;;  tabState        2   34[BANK0 ] int 
  1213 ;;  standby         2   32[BANK0 ] int 
  1214 ;;  prevSoupIR      2   30[BANK0 ] int 
  1215 ;;  sodaSort        2   28[BANK0 ] int 
  1216 ;;  soupSort        2   26[BANK0 ] int 
  1217 ;;  prevSodaLoad    2   24[BANK0 ] int 
  1218 ;;  prevSoupLoad    2   22[BANK0 ] int 
  1219 ;;  sodaNT          2   20[BANK0 ] int 
  1220 ;;  sodaT           2   18[BANK0 ] int 
  1221 ;;  soupNL          2   16[BANK0 ] int 
  1222 ;;  soupL           2   14[BANK0 ] int 
  1223 ;;  ee              2   10[BANK0 ] int 
  1224 ;;  s               2    4[BANK0 ] int 
  1225 ;;  sodaLoad        2    2[BANK0 ] int 
  1226 ;;  soupLoad        2    0[BANK0 ] int 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  2  160[None  ] int 
  1229 ;; Registers used:
  1230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;      Locals:         0      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;      Totals:         7      42       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;Total ram usage:       49 bytes
  1241 ;; Hardware stack levels required when called:    6
  1242 ;; This function calls:
  1243 ;;		_PWM1
  1244 ;;		_PWM1off
  1245 ;;		_PWM2
  1246 ;;		_PWM2off
  1247 ;;		___wmul
  1248 ;;		_addRun
  1249 ;;		_displayLog
  1250 ;;		_eepromRead
  1251 ;;		_homescreen
  1252 ;;		_initialize
  1253 ;;		_keycheck
  1254 ;;		_keyinterrupt
  1255 ;;		_lcdInst
  1256 ;;		_printf
  1257 ;;		_readADC
  1258 ;;		_updateS1
  1259 ;;		_updateS3
  1260 ;;		_updateTime
  1261 ;; This function is called by:
  1262 ;;		Startup code after reset
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text0
  1267  000012                     __ptext0:
  1268                           	opt stack 0
  1269  000012                     _main:
  1270                           	opt stack 25
  1271                           
  1272                           ;main.c: 101: LATA = 0;
  1273                           
  1274                           ;incstack = 0
  1275  000012  0E00               	movlw	0
  1276  000014  6E89               	movwf	3977,c	;volatile
  1277                           
  1278                           ;main.c: 103: initialize();
  1279  000016  EC63  F011         	call	_initialize	;wreg free
  1280                           
  1281                           ;main.c: 104: int standby = 1;
  1282  00001A  0E00               	movlw	0
  1283  00001C  0100               	movlb	0	; () banked
  1284  00001E  6FA1               	movwf	(main@standby+1)& (0+255),b
  1285  000020  0E01               	movlw	1
  1286  000022  6FA0               	movwf	main@standby& (0+255),b
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 105: int s = 0;
  1290  000024  0E00               	movlw	0
  1291  000026  0100               	movlb	0	; () banked
  1292  000028  6F85               	movwf	(main@s+1)& (0+255),b
  1293  00002A  0E00               	movlw	0
  1294  00002C  6F84               	movwf	main@s& (0+255),b
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;main.c: 106: int prevSodaIR;
  1298                           ;main.c: 107: int prevSoupIR;
  1299                           ;main.c: 108: long startTime;
  1300                           ;main.c: 110: int soupLoad = 1;
  1301  00002E  0E00               	movlw	0
  1302  000030  0100               	movlb	0	; () banked
  1303  000032  6F81               	movwf	(main@soupLoad+1)& (0+255),b
  1304  000034  0E01               	movlw	1
  1305  000036  6F80               	movwf	main@soupLoad& (0+255),b
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;main.c: 111: int sodaLoad = 1;
  1309  000038  0E00               	movlw	0
  1310  00003A  0100               	movlb	0	; () banked
  1311  00003C  6F83               	movwf	(main@sodaLoad+1)& (0+255),b
  1312  00003E  0E01               	movlw	1
  1313  000040  6F82               	movwf	main@sodaLoad& (0+255),b
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 113: int tabState = 0;
  1317  000042  0E00               	movlw	0
  1318  000044  0100               	movlb	0	; () banked
  1319  000046  6FA3               	movwf	(main@tabState+1)& (0+255),b
  1320  000048  0E00               	movlw	0
  1321  00004A  6FA2               	movwf	main@tabState& (0+255),b
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 114: int labelState = 0;
  1325  00004C  0E00               	movlw	0
  1326  00004E  0100               	movlb	0	; () banked
  1327  000050  6FA5               	movwf	(main@labelState+1)& (0+255),b
  1328  000052  0E00               	movlw	0
  1329  000054  6FA4               	movwf	main@labelState& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 116: int soupSort;
  1333                           ;main.c: 117: int prevSoupLoad;
  1334                           ;main.c: 118: int sodaSort;
  1335                           ;main.c: 119: int prevSodaLoad;
  1336                           ;main.c: 121: int soupL;
  1337                           ;main.c: 122: int soupNL ;
  1338                           ;main.c: 123: int sodaT;
  1339                           ;main.c: 124: int sodaNT;
  1340                           ;main.c: 126: T0CON = 0b00010111;
  1341  000056  0E17               	movlw	23
  1342  000058  6ED5               	movwf	4053,c	;volatile
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 127: TMR0H = 0b10000101;
  1346  00005A  0E85               	movlw	133
  1347  00005C  6ED7               	movwf	4055,c	;volatile
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;main.c: 128: TMR0L = 0b10101110;
  1351  00005E  0EAE               	movlw	174
  1352  000060  6ED6               	movwf	4054,c	;volatile
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 129: T0CONbits.TMR0ON = 1;
  1356  000062  8ED5               	bsf	4053,7,c	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 130: T1CON = 0b10110000;
  1360  000064  0EB0               	movlw	176
  1361  000066  6ECD               	movwf	4045,c	;volatile
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 131: TMR1H = 0b11111101;
  1365  000068  0EFD               	movlw	253
  1366  00006A  6ECF               	movwf	4047,c	;volatile
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 132: TMR1L = 0b01011011;
  1370  00006C  0E5B               	movlw	91
  1371  00006E  6ECE               	movwf	4046,c	;volatile
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 133: TMR1ON = 1;
  1375  000070  80CD               	bsf	4045,0,c	;volatile
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 136: int ee = 0x100;
  1379  000072  0E01               	movlw	1
  1380  000074  0100               	movlb	0	; () banked
  1381  000076  6F8B               	movwf	(main@ee+1)& (0+255),b
  1382  000078  0E00               	movlw	0
  1383  00007A  6F8A               	movwf	main@ee& (0+255),b
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;main.c: 138: _delay((unsigned long)((10)*(32000000/4000.0)));
  1387  00007C  0E68               	movlw	104
  1388  00007E  6E4C               	movwf	??_main& (0+255),c
  1389  000080  0EE4               	movlw	228
  1390  000082                     u5167:
  1391  000082  2EE8               	decfsz	wreg,f,c
  1392  000084  D7FE               	bra	u5167
  1393  000086  2E4C               	decfsz	??_main& (0+255),f,c
  1394  000088  D7FC               	bra	u5167
  1395  00008A  D000               	nop2	
  1396  00008C                     l4042:
  1397                           
  1398                           ;main.c: 142: if (standby == 1){
  1399  00008C  0100               	movlb	0	; () banked
  1400  00008E  05A0               	decf	main@standby& (0+255),w,b
  1401  000090  0100               	movlb	0	; () banked
  1402  000092  11A1               	iorwf	(main@standby+1)& (0+255),w,b
  1403  000094  A4D8               	btfss	status,2,c
  1404  000096  D1D1               	goto	l4184
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 143: keypress = (0);
  1408  000098  0E00               	movlw	0
  1409  00009A  0100               	movlb	0	; () banked
  1410  00009C  6FB7               	movwf	_keypress& (0+255),b	;volatile
  1411                           
  1412                           ;main.c: 144: while(keypress == (0)){
  1413  00009E  D006               	goto	l4052
  1414  0000A0                     l4046:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 145: updateTime();
  1418  0000A0  EC9F  F011         	call	_updateTime	;wreg free
  1419                           
  1420                           ;main.c: 146: homescreen();
  1421  0000A4  EC06  F012         	call	_homescreen	;wreg free
  1422                           
  1423                           ;main.c: 147: keyinterrupt();
  1424  0000A8  EC86  F013         	call	_keyinterrupt	;wreg free
  1425  0000AC                     l4052:
  1426  0000AC  0100               	movlb	0	; () banked
  1427  0000AE  51B7               	movf	_keypress& (0+255),w,b	;volatile
  1428  0000B0  B4D8               	btfsc	status,2,c
  1429  0000B2  D7F6               	goto	l4046
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;main.c: 148: }
  1433                           ;main.c: 151: if(keypress == 2){
  1434                           
  1435                           ; BSR set to: 0
  1436  0000B4  0E02               	movlw	2
  1437  0000B6  0100               	movlb	0	; () banked
  1438  0000B8  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  1439  0000BA  A4D8               	btfss	status,2,c
  1440  0000BC  D190               	goto	l4176
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 153: standby = 0;
  1444  0000BE  0E00               	movlw	0
  1445  0000C0  0100               	movlb	0	; () banked
  1446  0000C2  6FA1               	movwf	(main@standby+1)& (0+255),b
  1447  0000C4  0E00               	movlw	0
  1448  0000C6  6FA0               	movwf	main@standby& (0+255),b
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;main.c: 154: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1452  0000C8  C0AC  F04C         	movff	_time+2,??_main
  1453  0000CC  0E0F               	movlw	15
  1454  0000CE  164C               	andwf	??_main,f,c
  1455  0000D0  504C               	movf	??_main,w,c
  1456  0000D2  6E12               	movwf	___wmul@multiplier,c
  1457  0000D4  6A13               	clrf	___wmul@multiplier+1,c
  1458  0000D6  0E0E               	movlw	14
  1459  0000D8  6E15               	movwf	___wmul@multiplicand+1,c
  1460  0000DA  0E10               	movlw	16
  1461  0000DC  6E14               	movwf	___wmul@multiplicand,c
  1462  0000DE  EC52  F013         	call	___wmul	;wreg free
  1463  0000E2  C0AA  F04D         	movff	_time,??_main+1
  1464  0000E6  3A4D               	swapf	??_main+1,f,c
  1465  0000E8  0E0F               	movlw	15
  1466  0000EA  164D               	andwf	??_main+1,f,c
  1467  0000EC  0E0F               	movlw	15
  1468  0000EE  164D               	andwf	??_main+1,f,c
  1469  0000F0  504D               	movf	??_main+1,w,c
  1470  0000F2  0D0A               	mullw	10
  1471  0000F4  0100               	movlb	0	; () banked
  1472  0000F6  51AA               	movf	_time& (0+255),w,b
  1473  0000F8  0B0F               	andlw	15
  1474  0000FA  6E4E               	movwf	(??_main+2)& (0+255),c
  1475  0000FC  6A4F               	clrf	(??_main+3)& (0+255),c
  1476  0000FE  50F3               	movf	prodl,w,c
  1477  000100  264E               	addwf	??_main+2,f,c
  1478  000102  50F4               	movf	prodh,w,c
  1479  000104  224F               	addwfc	??_main+3,f,c
  1480  000106  C0AB  F050         	movff	_time+1,??_main+4
  1481  00010A  0E0F               	movlw	15
  1482  00010C  1650               	andwf	??_main+4,f,c
  1483  00010E  5050               	movf	??_main+4,w,c
  1484  000110  0D3C               	mullw	60
  1485  000112  50F3               	movf	prodl,w,c
  1486  000114  264E               	addwf	??_main+2,f,c
  1487  000116  50F4               	movf	prodh,w,c
  1488  000118  224F               	addwfc	??_main+3,f,c
  1489  00011A  C0AB  F051         	movff	_time+1,??_main+5
  1490  00011E  3A51               	swapf	??_main+5,f,c
  1491  000120  0E0F               	movlw	15
  1492  000122  1651               	andwf	??_main+5,f,c
  1493  000124  0E0F               	movlw	15
  1494  000126  1651               	andwf	??_main+5,f,c
  1495  000128  5051               	movf	??_main+5,w,c
  1496  00012A  0D0A               	mullw	10
  1497  00012C  50F3               	movf	prodl,w,c
  1498  00012E  264E               	addwf	??_main+2,f,c
  1499  000130  50F4               	movf	prodh,w,c
  1500  000132  224F               	addwfc	??_main+3,f,c
  1501  000134  5012               	movf	?___wmul,w,c
  1502  000136  264E               	addwf	??_main+2,f,c
  1503  000138  5013               	movf	?___wmul+1,w,c
  1504  00013A  224F               	addwfc	??_main+3,f,c
  1505  00013C  C0AC  F052         	movff	_time+2,??_main+6
  1506  000140  3A52               	swapf	??_main+6,f,c
  1507  000142  0E0F               	movlw	15
  1508  000144  1652               	andwf	??_main+6,f,c
  1509  000146  0E0F               	movlw	15
  1510  000148  1652               	andwf	??_main+6,f,c
  1511  00014A  5052               	movf	??_main+6,w,c
  1512  00014C  0D0A               	mullw	10
  1513  00014E  50F3               	movf	prodl,w,c
  1514  000150  264E               	addwf	??_main+2,f,c
  1515  000152  50F4               	movf	prodh,w,c
  1516  000154  224F               	addwfc	??_main+3,f,c
  1517  000156  C04E  F086         	movff	??_main+2,main@startTime
  1518  00015A  C04F  F087         	movff	??_main+3,main@startTime+1
  1519  00015E  0100               	movlb	0	; () banked
  1520  000160  0E00               	movlw	0
  1521  000162  BF87               	btfsc	(main@startTime+1)& (0+255),7,b
  1522  000164  0EFF               	movlw	-1
  1523  000166  6F88               	movwf	(main@startTime+2)& (0+255),b
  1524  000168  6F89               	movwf	(main@startTime+3)& (0+255),b
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 155: seconds = 0;
  1528  00016A  0E00               	movlw	0
  1529  00016C  0100               	movlb	0	; () banked
  1530  00016E  6FB6               	movwf	(_seconds+1)& (0+255),b
  1531  000170  0E00               	movlw	0
  1532  000172  6FB5               	movwf	_seconds& (0+255),b
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;main.c: 156: labelState = 0;
  1536  000174  0E00               	movlw	0
  1537  000176  0100               	movlb	0	; () banked
  1538  000178  6FA5               	movwf	(main@labelState+1)& (0+255),b
  1539  00017A  0E00               	movlw	0
  1540  00017C  6FA4               	movwf	main@labelState& (0+255),b
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 157: soupSort = 0;
  1544  00017E  0E00               	movlw	0
  1545  000180  0100               	movlb	0	; () banked
  1546  000182  6F9B               	movwf	(main@soupSort+1)& (0+255),b
  1547  000184  0E00               	movlw	0
  1548  000186  6F9A               	movwf	main@soupSort& (0+255),b
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;main.c: 158: tabState = 0;
  1552  000188  0E00               	movlw	0
  1553  00018A  0100               	movlb	0	; () banked
  1554  00018C  6FA3               	movwf	(main@tabState+1)& (0+255),b
  1555  00018E  0E00               	movlw	0
  1556  000190  6FA2               	movwf	main@tabState& (0+255),b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;main.c: 159: sodaSort = 0;
  1560  000192  0E00               	movlw	0
  1561  000194  0100               	movlb	0	; () banked
  1562  000196  6F9D               	movwf	(main@sodaSort+1)& (0+255),b
  1563  000198  0E00               	movlw	0
  1564  00019A  6F9C               	movwf	main@sodaSort& (0+255),b
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;main.c: 160: soupSteps = 0;
  1568  00019C  0E00               	movlw	0
  1569  00019E  0100               	movlb	0	; () banked
  1570  0001A0  6FB4               	movwf	(_soupSteps+1)& (0+255),b
  1571  0001A2  0E00               	movlw	0
  1572  0001A4  6FB3               	movwf	_soupSteps& (0+255),b
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;main.c: 161: sodaSteps = 0;
  1576  0001A6  0E00               	movlw	0
  1577  0001A8  0100               	movlb	0	; () banked
  1578  0001AA  6FB2               	movwf	(_sodaSteps+1)& (0+255),b
  1579  0001AC  0E00               	movlw	0
  1580  0001AE  6FB1               	movwf	_sodaSteps& (0+255),b
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 162: soupL = 0;
  1584  0001B0  0E00               	movlw	0
  1585  0001B2  0100               	movlb	0	; () banked
  1586  0001B4  6F8F               	movwf	(main@soupL+1)& (0+255),b
  1587  0001B6  0E00               	movlw	0
  1588  0001B8  6F8E               	movwf	main@soupL& (0+255),b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 163: soupNL = 0;
  1592  0001BA  0E00               	movlw	0
  1593  0001BC  0100               	movlb	0	; () banked
  1594  0001BE  6F91               	movwf	(main@soupNL+1)& (0+255),b
  1595  0001C0  0E00               	movlw	0
  1596  0001C2  6F90               	movwf	main@soupNL& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 164: sodaT = 0;
  1600  0001C4  0E00               	movlw	0
  1601  0001C6  0100               	movlb	0	; () banked
  1602  0001C8  6F93               	movwf	(main@sodaT+1)& (0+255),b
  1603  0001CA  0E00               	movlw	0
  1604  0001CC  6F92               	movwf	main@sodaT& (0+255),b
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;main.c: 165: sodaNT = 0;
  1608  0001CE  0E00               	movlw	0
  1609  0001D0  0100               	movlb	0	; () banked
  1610  0001D2  6F95               	movwf	(main@sodaNT+1)& (0+255),b
  1611  0001D4  0E00               	movlw	0
  1612  0001D6  6F94               	movwf	main@sodaNT& (0+255),b
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 166: prevSoupIR = 0;
  1616  0001D8  0E00               	movlw	0
  1617  0001DA  0100               	movlb	0	; () banked
  1618  0001DC  6F9F               	movwf	(main@prevSoupIR+1)& (0+255),b
  1619  0001DE  0E00               	movlw	0
  1620  0001E0  6F9E               	movwf	main@prevSoupIR& (0+255),b
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 167: prevSodaIR = 0;
  1624  0001E2  0E00               	movlw	0
  1625  0001E4  0100               	movlb	0	; () banked
  1626  0001E6  6FA7               	movwf	(main@prevSodaIR+1)& (0+255),b
  1627  0001E8  0E00               	movlw	0
  1628  0001EA  6FA6               	movwf	main@prevSodaIR& (0+255),b
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;main.c: 169: keypress = (0);
  1632  0001EC  0E00               	movlw	0
  1633  0001EE  0100               	movlb	0	; () banked
  1634  0001F0  6FB7               	movwf	_keypress& (0+255),b	;volatile
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 170: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1638  0001F2  0E01               	movlw	1
  1639  0001F4  ECAB  F013         	call	_lcdInst
  1640  0001F8  0E34               	movlw	52
  1641  0001FA  6E4C               	movwf	??_main& (0+255),c
  1642  0001FC  0EF2               	movlw	242
  1643  0001FE                     u5177:
  1644  0001FE  2EE8               	decfsz	wreg,f,c
  1645  000200  D7FE               	bra	u5177
  1646  000202  2E4C               	decfsz	??_main& (0+255),f,c
  1647  000204  D7FC               	bra	u5177
  1648                           
  1649                           ;main.c: 171: printf("Sorting cans...");
  1650  000206  0EDF               	movlw	low STR_1
  1651  000208  6E28               	movwf	printf@f,c
  1652  00020A  0EFE               	movlw	high STR_1
  1653  00020C  6E29               	movwf	printf@f+1,c
  1654  00020E  EC9B  F008         	call	_printf	;wreg free
  1655                           
  1656                           ;main.c: 172: lcdInst(0b11000000);;
  1657  000212  0EC0               	movlw	192
  1658  000214  ECAB  F013         	call	_lcdInst
  1659                           
  1660                           ;main.c: 173: printf("Any key to stop");
  1661  000218  0E0F               	movlw	low STR_2
  1662  00021A  6E28               	movwf	printf@f,c
  1663  00021C  0EFF               	movlw	high STR_2
  1664  00021E  6E29               	movwf	printf@f+1,c
  1665  000220  EC9B  F008         	call	_printf	;wreg free
  1666                           
  1667                           ;main.c: 175: while(soupSteps < 4 ){
  1668  000224  D004               	goto	l4100
  1669  000226                     l4098:
  1670                           
  1671                           ;main.c: 176: S2mode = 2;
  1672  000226  0E00               	movlw	0
  1673  000228  6E68               	movwf	_S2mode+1,c
  1674  00022A  0E02               	movlw	2
  1675  00022C  6E67               	movwf	_S2mode,c
  1676  00022E                     l4100:
  1677  00022E  0100               	movlb	0	; () banked
  1678  000230  BFB4               	btfsc	(_soupSteps+1)& (0+255),7,b
  1679  000232  D7F9               	goto	l4098
  1680  000234  0100               	movlb	0	; () banked
  1681  000236  51B4               	movf	(_soupSteps+1)& (0+255),w,b
  1682  000238  E105               	bnz	l4102
  1683  00023A  0E04               	movlw	4
  1684  00023C  0100               	movlb	0	; () banked
  1685  00023E  5DB3               	subwf	_soupSteps& (0+255),w,b
  1686  000240  A0D8               	btfss	status,0,c
  1687  000242  D7F1               	goto	l4098
  1688  000244                     l4102:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 177: }
  1692                           ;main.c: 178: S2mode = 4;
  1693  000244  0E00               	movlw	0
  1694  000246  6E68               	movwf	_S2mode+1,c
  1695  000248  0E04               	movlw	4
  1696  00024A  6E67               	movwf	_S2mode,c
  1697                           
  1698                           ;main.c: 179: int i;
  1699                           ;main.c: 180: for(i=0; i<70; i++){
  1700  00024C  0E00               	movlw	0
  1701  00024E  0100               	movlb	0	; () banked
  1702  000250  6FA9               	movwf	(main@i+1)& (0+255),b
  1703  000252  0E00               	movlw	0
  1704  000254  6FA8               	movwf	main@i& (0+255),b
  1705  000256                     l4104:
  1706                           
  1707                           ; BSR set to: 0
  1708  000256  0100               	movlb	0	; () banked
  1709  000258  BFA9               	btfsc	(main@i+1)& (0+255),7,b
  1710  00025A  D008               	goto	l4108
  1711  00025C  0100               	movlb	0	; () banked
  1712  00025E  51A9               	movf	(main@i+1)& (0+255),w,b
  1713  000260  E124               	bnz	l4120
  1714  000262  0E46               	movlw	70
  1715  000264  0100               	movlb	0	; () banked
  1716  000266  5DA8               	subwf	main@i& (0+255),w,b
  1717  000268  B0D8               	btfsc	status,0,c
  1718  00026A  D01F               	goto	l4120
  1719  00026C                     l4108:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 181: updateS1(1);
  1723  00026C  0E00               	movlw	0
  1724  00026E  6E13               	movwf	updateS1@mode+1,c
  1725  000270  0E01               	movlw	1
  1726  000272  6E12               	movwf	updateS1@mode,c
  1727  000274  EC52  F00C         	call	_updateS1	;wreg free
  1728                           
  1729                           ;main.c: 182: readADC(1);
  1730  000278  0E01               	movlw	1
  1731  00027A  EC65  F013         	call	_readADC
  1732                           
  1733                           ;main.c: 183: if(ADRES <prevSodaIR && ADRES > 0x3aa){break;}
  1734  00027E  0100               	movlb	0	; () banked
  1735  000280  51A6               	movf	main@prevSodaIR& (0+255),w,b
  1736  000282  5CC3               	subwf	4035,w,c	;volatile
  1737  000284  0100               	movlb	0	; () banked
  1738  000286  51A7               	movf	(main@prevSodaIR+1)& (0+255),w,b
  1739  000288  58C4               	subwfb	4036,w,c	;volatile
  1740  00028A  B0D8               	btfsc	status,0,c
  1741  00028C  D006               	goto	l172
  1742                           
  1743                           ; BSR set to: 0
  1744  00028E  0EAB               	movlw	171
  1745  000290  5CC3               	subwf	4035,w,c	;volatile
  1746  000292  0E03               	movlw	3
  1747  000294  58C4               	subwfb	4036,w,c	;volatile
  1748  000296  B0D8               	btfsc	status,0,c
  1749  000298  D008               	goto	l4120
  1750  00029A                     l172:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 184: prevSodaIR = ADRES;
  1754  00029A  CFC3 F0A6          	movff	4035,main@prevSodaIR	;volatile
  1755  00029E  CFC4 F0A7          	movff	4036,main@prevSodaIR+1	;volatile
  1756                           
  1757                           ; BSR set to: 0
  1758  0002A2  0100               	movlb	0	; () banked
  1759  0002A4  4BA8               	infsnz	main@i& (0+255),f,b
  1760  0002A6  2BA9               	incf	(main@i+1)& (0+255),f,b
  1761  0002A8  D7D6               	goto	l4104
  1762  0002AA                     l4120:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 185: }
  1766                           ;main.c: 186: for(i=0; i<100; i++){
  1767  0002AA  0E00               	movlw	0
  1768  0002AC  0100               	movlb	0	; () banked
  1769  0002AE  6FA9               	movwf	(main@i+1)& (0+255),b
  1770  0002B0  0E00               	movlw	0
  1771  0002B2  6FA8               	movwf	main@i& (0+255),b
  1772  0002B4                     l4122:
  1773                           
  1774                           ; BSR set to: 0
  1775  0002B4  0100               	movlb	0	; () banked
  1776  0002B6  BFA9               	btfsc	(main@i+1)& (0+255),7,b
  1777  0002B8  D008               	goto	l4126
  1778  0002BA  0100               	movlb	0	; () banked
  1779  0002BC  51A9               	movf	(main@i+1)& (0+255),w,b
  1780  0002BE  E124               	bnz	l4138
  1781  0002C0  0E64               	movlw	100
  1782  0002C2  0100               	movlb	0	; () banked
  1783  0002C4  5DA8               	subwf	main@i& (0+255),w,b
  1784  0002C6  B0D8               	btfsc	status,0,c
  1785  0002C8  D01F               	goto	l4138
  1786  0002CA                     l4126:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;main.c: 187: updateS1(2);
  1790  0002CA  0E00               	movlw	0
  1791  0002CC  6E13               	movwf	updateS1@mode+1,c
  1792  0002CE  0E02               	movlw	2
  1793  0002D0  6E12               	movwf	updateS1@mode,c
  1794  0002D2  EC52  F00C         	call	_updateS1	;wreg free
  1795                           
  1796                           ;main.c: 188: readADC(1);
  1797  0002D6  0E01               	movlw	1
  1798  0002D8  EC65  F013         	call	_readADC
  1799                           
  1800                           ;main.c: 189: if(ADRES <prevSodaIR && ADRES > 0x3aa){break;}
  1801  0002DC  0100               	movlb	0	; () banked
  1802  0002DE  51A6               	movf	main@prevSodaIR& (0+255),w,b
  1803  0002E0  5CC3               	subwf	4035,w,c	;volatile
  1804  0002E2  0100               	movlb	0	; () banked
  1805  0002E4  51A7               	movf	(main@prevSodaIR+1)& (0+255),w,b
  1806  0002E6  58C4               	subwfb	4036,w,c	;volatile
  1807  0002E8  B0D8               	btfsc	status,0,c
  1808  0002EA  D006               	goto	l175
  1809                           
  1810                           ; BSR set to: 0
  1811  0002EC  0EAB               	movlw	171
  1812  0002EE  5CC3               	subwf	4035,w,c	;volatile
  1813  0002F0  0E03               	movlw	3
  1814  0002F2  58C4               	subwfb	4036,w,c	;volatile
  1815  0002F4  B0D8               	btfsc	status,0,c
  1816  0002F6  D008               	goto	l4138
  1817  0002F8                     l175:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;main.c: 190: prevSodaIR = ADRES;
  1821  0002F8  CFC3 F0A6          	movff	4035,main@prevSodaIR	;volatile
  1822  0002FC  CFC4 F0A7          	movff	4036,main@prevSodaIR+1	;volatile
  1823                           
  1824                           ; BSR set to: 0
  1825  000300  0100               	movlb	0	; () banked
  1826  000302  4BA8               	infsnz	main@i& (0+255),f,b
  1827  000304  2BA9               	incf	(main@i+1)& (0+255),f,b
  1828  000306  D7D6               	goto	l4122
  1829  000308                     l4138:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 191: }
  1833                           ;main.c: 192: for(i=0; i<70; i++){
  1834  000308  0E00               	movlw	0
  1835  00030A  0100               	movlb	0	; () banked
  1836  00030C  6FA9               	movwf	(main@i+1)& (0+255),b
  1837  00030E  0E00               	movlw	0
  1838  000310  6FA8               	movwf	main@i& (0+255),b
  1839  000312                     l4140:
  1840                           
  1841                           ; BSR set to: 0
  1842  000312  0100               	movlb	0	; () banked
  1843  000314  BFA9               	btfsc	(main@i+1)& (0+255),7,b
  1844  000316  D008               	goto	l4144
  1845  000318  0100               	movlb	0	; () banked
  1846  00031A  51A9               	movf	(main@i+1)& (0+255),w,b
  1847  00031C  E124               	bnz	l4156
  1848  00031E  0E46               	movlw	70
  1849  000320  0100               	movlb	0	; () banked
  1850  000322  5DA8               	subwf	main@i& (0+255),w,b
  1851  000324  B0D8               	btfsc	status,0,c
  1852  000326  D01F               	goto	l4156
  1853  000328                     l4144:
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;main.c: 193: updateS3(1);
  1857  000328  0E00               	movlw	0
  1858  00032A  6E13               	movwf	updateS3@mode+1,c
  1859  00032C  0E01               	movlw	1
  1860  00032E  6E12               	movwf	updateS3@mode,c
  1861  000330  EC28  F00E         	call	_updateS3	;wreg free
  1862                           
  1863                           ;main.c: 194: readADC(5);
  1864  000334  0E05               	movlw	5
  1865  000336  EC65  F013         	call	_readADC
  1866                           
  1867                           ;main.c: 195: if(ADRES <prevSodaIR && ADRES > 0x3aa){break;}
  1868  00033A  0100               	movlb	0	; () banked
  1869  00033C  51A6               	movf	main@prevSodaIR& (0+255),w,b
  1870  00033E  5CC3               	subwf	4035,w,c	;volatile
  1871  000340  0100               	movlb	0	; () banked
  1872  000342  51A7               	movf	(main@prevSodaIR+1)& (0+255),w,b
  1873  000344  58C4               	subwfb	4036,w,c	;volatile
  1874  000346  B0D8               	btfsc	status,0,c
  1875  000348  D006               	goto	l178
  1876                           
  1877                           ; BSR set to: 0
  1878  00034A  0EAB               	movlw	171
  1879  00034C  5CC3               	subwf	4035,w,c	;volatile
  1880  00034E  0E03               	movlw	3
  1881  000350  58C4               	subwfb	4036,w,c	;volatile
  1882  000352  B0D8               	btfsc	status,0,c
  1883  000354  D008               	goto	l4156
  1884  000356                     l178:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 196: prevSodaIR = ADRES;
  1888  000356  CFC3 F0A6          	movff	4035,main@prevSodaIR	;volatile
  1889  00035A  CFC4 F0A7          	movff	4036,main@prevSodaIR+1	;volatile
  1890                           
  1891                           ; BSR set to: 0
  1892  00035E  0100               	movlb	0	; () banked
  1893  000360  4BA8               	infsnz	main@i& (0+255),f,b
  1894  000362  2BA9               	incf	(main@i+1)& (0+255),f,b
  1895  000364  D7D6               	goto	l4140
  1896  000366                     l4156:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 197: }
  1900                           ;main.c: 198: for(i=0; i<100; i++){
  1901  000366  0E00               	movlw	0
  1902  000368  0100               	movlb	0	; () banked
  1903  00036A  6FA9               	movwf	(main@i+1)& (0+255),b
  1904  00036C  0E00               	movlw	0
  1905  00036E  6FA8               	movwf	main@i& (0+255),b
  1906  000370                     l4158:
  1907                           
  1908                           ; BSR set to: 0
  1909  000370  0100               	movlb	0	; () banked
  1910  000372  BFA9               	btfsc	(main@i+1)& (0+255),7,b
  1911  000374  D008               	goto	l4162
  1912  000376  0100               	movlb	0	; () banked
  1913  000378  51A9               	movf	(main@i+1)& (0+255),w,b
  1914  00037A  E124               	bnz	l4174
  1915  00037C  0E64               	movlw	100
  1916  00037E  0100               	movlb	0	; () banked
  1917  000380  5DA8               	subwf	main@i& (0+255),w,b
  1918  000382  B0D8               	btfsc	status,0,c
  1919  000384  D01F               	goto	l4174
  1920  000386                     l4162:
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 199: updateS3(2);
  1924  000386  0E00               	movlw	0
  1925  000388  6E13               	movwf	updateS3@mode+1,c
  1926  00038A  0E02               	movlw	2
  1927  00038C  6E12               	movwf	updateS3@mode,c
  1928  00038E  EC28  F00E         	call	_updateS3	;wreg free
  1929                           
  1930                           ;main.c: 200: readADC(5);
  1931  000392  0E05               	movlw	5
  1932  000394  EC65  F013         	call	_readADC
  1933                           
  1934                           ;main.c: 201: if(ADRES <prevSodaIR && ADRES > 0x3aa){break;}
  1935  000398  0100               	movlb	0	; () banked
  1936  00039A  51A6               	movf	main@prevSodaIR& (0+255),w,b
  1937  00039C  5CC3               	subwf	4035,w,c	;volatile
  1938  00039E  0100               	movlb	0	; () banked
  1939  0003A0  51A7               	movf	(main@prevSodaIR+1)& (0+255),w,b
  1940  0003A2  58C4               	subwfb	4036,w,c	;volatile
  1941  0003A4  B0D8               	btfsc	status,0,c
  1942  0003A6  D006               	goto	l181
  1943                           
  1944                           ; BSR set to: 0
  1945  0003A8  0EAB               	movlw	171
  1946  0003AA  5CC3               	subwf	4035,w,c	;volatile
  1947  0003AC  0E03               	movlw	3
  1948  0003AE  58C4               	subwfb	4036,w,c	;volatile
  1949  0003B0  B0D8               	btfsc	status,0,c
  1950  0003B2  D008               	goto	l4174
  1951  0003B4                     l181:
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 202: prevSodaIR = ADRES;
  1955  0003B4  CFC3 F0A6          	movff	4035,main@prevSodaIR	;volatile
  1956  0003B8  CFC4 F0A7          	movff	4036,main@prevSodaIR+1	;volatile
  1957                           
  1958                           ; BSR set to: 0
  1959  0003BC  0100               	movlb	0	; () banked
  1960  0003BE  4BA8               	infsnz	main@i& (0+255),f,b
  1961  0003C0  2BA9               	incf	(main@i+1)& (0+255),f,b
  1962  0003C2  D7D6               	goto	l4158
  1963  0003C4                     l4174:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;main.c: 203: }
  1967                           ;main.c: 204: PWM2(400);
  1968  0003C4  0E01               	movlw	1
  1969  0003C6  6E13               	movwf	PWM2@duty+1,c
  1970  0003C8  0E90               	movlw	144
  1971  0003CA  6E12               	movwf	PWM2@duty,c
  1972  0003CC  EC8F  F012         	call	_PWM2	;wreg free
  1973                           
  1974                           ;main.c: 205: PWM1(400);
  1975  0003D0  0E01               	movlw	1
  1976  0003D2  6E13               	movwf	PWM1@duty+1,c
  1977  0003D4  0E90               	movlw	144
  1978  0003D6  6E12               	movwf	PWM1@duty,c
  1979  0003D8  ECB4  F012         	call	_PWM1	;wreg free
  1980                           
  1981                           ;main.c: 207: }
  1982  0003DC  D657               	goto	l4042
  1983  0003DE                     l4176:
  1984                           
  1985                           ;main.c: 208: else if(keypress == 3){
  1986  0003DE  0E03               	movlw	3
  1987  0003E0  0100               	movlb	0	; () banked
  1988  0003E2  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  1989  0003E4  A4D8               	btfss	status,2,c
  1990  0003E6  D019               	goto	l4180
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 209: displayLog(1);
  1994  0003E8  0E00               	movlw	0
  1995  0003EA  6E44               	movwf	displayLog@run+1,c
  1996  0003EC  0E01               	movlw	1
  1997  0003EE  6E43               	movwf	displayLog@run,c
  1998  0003F0  ECA4  F00A         	call	_displayLog	;wreg free
  1999                           
  2000                           ;main.c: 210: displayLog(2);
  2001  0003F4  0E00               	movlw	0
  2002  0003F6  6E44               	movwf	displayLog@run+1,c
  2003  0003F8  0E02               	movlw	2
  2004  0003FA  6E43               	movwf	displayLog@run,c
  2005  0003FC  ECA4  F00A         	call	_displayLog	;wreg free
  2006                           
  2007                           ;main.c: 211: displayLog(3);
  2008  000400  0E00               	movlw	0
  2009  000402  6E44               	movwf	displayLog@run+1,c
  2010  000404  0E03               	movlw	3
  2011  000406  6E43               	movwf	displayLog@run,c
  2012  000408  ECA4  F00A         	call	_displayLog	;wreg free
  2013                           
  2014                           ;main.c: 212: displayLog(4);
  2015  00040C  0E00               	movlw	0
  2016  00040E  6E44               	movwf	displayLog@run+1,c
  2017  000410  0E04               	movlw	4
  2018  000412  6E43               	movwf	displayLog@run,c
  2019  000414  ECA4  F00A         	call	_displayLog	;wreg free
  2020                           
  2021                           ;main.c: 213: }
  2022  000418  D639               	goto	l4042
  2023  00041A                     l4180:
  2024                           
  2025                           ;main.c: 214: else if(keypress == 15 ) {
  2026  00041A  0E0F               	movlw	15
  2027  00041C  0100               	movlb	0	; () banked
  2028  00041E  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2029  000420  A4D8               	btfss	status,2,c
  2030  000422  D634               	goto	l4042
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;main.c: 215: standby = 2;
  2034  000424  0E00               	movlw	0
  2035  000426  0100               	movlb	0	; () banked
  2036  000428  6FA1               	movwf	(main@standby+1)& (0+255),b
  2037  00042A  0E02               	movlw	2
  2038  00042C  6FA0               	movwf	main@standby& (0+255),b
  2039                           
  2040                           ;main.c: 216: s = 1;
  2041  00042E  0E00               	movlw	0
  2042  000430  0100               	movlb	0	; () banked
  2043  000432  6F85               	movwf	(main@s+1)& (0+255),b
  2044  000434  0E01               	movlw	1
  2045  000436  6F84               	movwf	main@s& (0+255),b
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 217: }
  2049                           ;main.c: 219: }
  2050                           
  2051                           ; BSR set to: 0
  2052                           
  2053                           ; BSR set to: 0
  2054  000438  D629               	goto	l4042
  2055  00043A                     l4184:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;main.c: 220: else if(standby == 2){
  2059  00043A  0E02               	movlw	2
  2060  00043C  0100               	movlb	0	; () banked
  2061  00043E  19A0               	xorwf	main@standby& (0+255),w,b
  2062  000440  0100               	movlb	0	; () banked
  2063  000442  11A1               	iorwf	(main@standby+1)& (0+255),w,b
  2064  000444  A4D8               	btfss	status,2,c
  2065  000446  D2ED               	goto	l4446
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;main.c: 222: keypress = (0);
  2069  000448  0E00               	movlw	0
  2070  00044A  0100               	movlb	0	; () banked
  2071  00044C  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;main.c: 224: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2075  00044E  0E01               	movlw	1
  2076  000450  ECAB  F013         	call	_lcdInst
  2077  000454  0E34               	movlw	52
  2078  000456  6E4C               	movwf	??_main& (0+255),c
  2079  000458  0EF2               	movlw	242
  2080  00045A                     u5187:
  2081  00045A  2EE8               	decfsz	wreg,f,c
  2082  00045C  D7FE               	bra	u5187
  2083  00045E  2E4C               	decfsz	??_main& (0+255),f,c
  2084  000460  D7FC               	bra	u5187
  2085                           
  2086                           ;main.c: 225: printf("%d %d %d", (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10,(time[1] & 
      +                          0x0F) + ((time[1] & 0xF0)>>4)*10,(time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10);
  2087  000462  0ED3               	movlw	low STR_3
  2088  000464  6E28               	movwf	printf@f,c
  2089  000466  0EFF               	movlw	high STR_3
  2090  000468  6E29               	movwf	printf@f+1,c
  2091  00046A  C0AC  F04C         	movff	_time+2,??_main
  2092  00046E  3A4C               	swapf	??_main,f,c
  2093  000470  0E0F               	movlw	15
  2094  000472  164C               	andwf	??_main,f,c
  2095  000474  0E0F               	movlw	15
  2096  000476  164C               	andwf	??_main,f,c
  2097  000478  504C               	movf	??_main,w,c
  2098  00047A  0D0A               	mullw	10
  2099  00047C  C0AC  F04D         	movff	_time+2,??_main+1
  2100  000480  0E0F               	movlw	15
  2101  000482  164D               	andwf	??_main+1,f,c
  2102  000484  504D               	movf	??_main+1,w,c
  2103  000486  24F3               	addwf	prodl,w,c
  2104  000488  6E2A               	movwf	?_printf+2,c
  2105  00048A  0E00               	movlw	0
  2106  00048C  20F4               	addwfc	prodh,w,c
  2107  00048E  6E2B               	movwf	?_printf+3,c
  2108  000490  C0AB  F04E         	movff	_time+1,??_main+2
  2109  000494  3A4E               	swapf	??_main+2,f,c
  2110  000496  0E0F               	movlw	15
  2111  000498  164E               	andwf	??_main+2,f,c
  2112  00049A  0E0F               	movlw	15
  2113  00049C  164E               	andwf	??_main+2,f,c
  2114  00049E  504E               	movf	??_main+2,w,c
  2115  0004A0  0D0A               	mullw	10
  2116  0004A2  C0AB  F04F         	movff	_time+1,??_main+3
  2117  0004A6  0E0F               	movlw	15
  2118  0004A8  164F               	andwf	??_main+3,f,c
  2119  0004AA  504F               	movf	??_main+3,w,c
  2120  0004AC  24F3               	addwf	prodl,w,c
  2121  0004AE  6E2C               	movwf	?_printf+4,c
  2122  0004B0  0E00               	movlw	0
  2123  0004B2  20F4               	addwfc	prodh,w,c
  2124  0004B4  6E2D               	movwf	?_printf+5,c
  2125  0004B6  C0AA  F050         	movff	_time,??_main+4
  2126  0004BA  3A50               	swapf	??_main+4,f,c
  2127  0004BC  0E0F               	movlw	15
  2128  0004BE  1650               	andwf	??_main+4,f,c
  2129  0004C0  0E0F               	movlw	15
  2130  0004C2  1650               	andwf	??_main+4,f,c
  2131  0004C4  5050               	movf	??_main+4,w,c
  2132  0004C6  0D0A               	mullw	10
  2133  0004C8  C0AA  F051         	movff	_time,??_main+5
  2134  0004CC  0E0F               	movlw	15
  2135  0004CE  1651               	andwf	??_main+5,f,c
  2136  0004D0  5051               	movf	??_main+5,w,c
  2137  0004D2  24F3               	addwf	prodl,w,c
  2138  0004D4  6E2E               	movwf	?_printf+6,c
  2139  0004D6  0E00               	movlw	0
  2140  0004D8  20F4               	addwfc	prodh,w,c
  2141  0004DA  6E2F               	movwf	?_printf+7,c
  2142  0004DC  EC9B  F008         	call	_printf	;wreg free
  2143                           
  2144                           ;main.c: 226: lcdInst(0b11000000);;
  2145  0004E0  0EC0               	movlw	192
  2146  0004E2  ECAB  F013         	call	_lcdInst
  2147                           
  2148                           ;main.c: 227: printf("%lu", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] &
      +                           0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10));
  2149  0004E6  C0AC  F04C         	movff	_time+2,??_main
  2150  0004EA  0E0F               	movlw	15
  2151  0004EC  164C               	andwf	??_main,f,c
  2152  0004EE  504C               	movf	??_main,w,c
  2153  0004F0  6E12               	movwf	___wmul@multiplier,c
  2154  0004F2  6A13               	clrf	___wmul@multiplier+1,c
  2155  0004F4  0E0E               	movlw	14
  2156  0004F6  6E15               	movwf	___wmul@multiplicand+1,c
  2157  0004F8  0E10               	movlw	16
  2158  0004FA  6E14               	movwf	___wmul@multiplicand,c
  2159  0004FC  EC52  F013         	call	___wmul	;wreg free
  2160  000500  C0AA  F04D         	movff	_time,??_main+1
  2161  000504  3A4D               	swapf	??_main+1,f,c
  2162  000506  0E0F               	movlw	15
  2163  000508  164D               	andwf	??_main+1,f,c
  2164  00050A  0E0F               	movlw	15
  2165  00050C  164D               	andwf	??_main+1,f,c
  2166  00050E  504D               	movf	??_main+1,w,c
  2167  000510  0D0A               	mullw	10
  2168  000512  0100               	movlb	0	; () banked
  2169  000514  51AA               	movf	_time& (0+255),w,b
  2170  000516  0B0F               	andlw	15
  2171  000518  6E4E               	movwf	(??_main+2)& (0+255),c
  2172  00051A  6A4F               	clrf	(??_main+3)& (0+255),c
  2173  00051C  50F3               	movf	prodl,w,c
  2174  00051E  264E               	addwf	??_main+2,f,c
  2175  000520  50F4               	movf	prodh,w,c
  2176  000522  224F               	addwfc	??_main+3,f,c
  2177  000524  C0AB  F050         	movff	_time+1,??_main+4
  2178  000528  0E0F               	movlw	15
  2179  00052A  1650               	andwf	??_main+4,f,c
  2180  00052C  5050               	movf	??_main+4,w,c
  2181  00052E  0D3C               	mullw	60
  2182  000530  50F3               	movf	prodl,w,c
  2183  000532  264E               	addwf	??_main+2,f,c
  2184  000534  50F4               	movf	prodh,w,c
  2185  000536  224F               	addwfc	??_main+3,f,c
  2186  000538  C0AB  F051         	movff	_time+1,??_main+5
  2187  00053C  3A51               	swapf	??_main+5,f,c
  2188  00053E  0E0F               	movlw	15
  2189  000540  1651               	andwf	??_main+5,f,c
  2190  000542  0E0F               	movlw	15
  2191  000544  1651               	andwf	??_main+5,f,c
  2192  000546  5051               	movf	??_main+5,w,c
  2193  000548  0D0A               	mullw	10
  2194  00054A  50F3               	movf	prodl,w,c
  2195  00054C  264E               	addwf	??_main+2,f,c
  2196  00054E  50F4               	movf	prodh,w,c
  2197  000550  224F               	addwfc	??_main+3,f,c
  2198  000552  5012               	movf	?___wmul,w,c
  2199  000554  264E               	addwf	??_main+2,f,c
  2200  000556  5013               	movf	?___wmul+1,w,c
  2201  000558  224F               	addwfc	??_main+3,f,c
  2202  00055A  C0AC  F052         	movff	_time+2,??_main+6
  2203  00055E  3A52               	swapf	??_main+6,f,c
  2204  000560  0E0F               	movlw	15
  2205  000562  1652               	andwf	??_main+6,f,c
  2206  000564  0E0F               	movlw	15
  2207  000566  1652               	andwf	??_main+6,f,c
  2208  000568  5052               	movf	??_main+6,w,c
  2209  00056A  0D0A               	mullw	10
  2210  00056C  50F3               	movf	prodl,w,c
  2211  00056E  244E               	addwf	??_main+2,w,c
  2212  000570  0100               	movlb	0	; () banked
  2213  000572  6F8C               	movwf	_main$1791& (0+255),b
  2214  000574  50F4               	movf	prodh,w,c
  2215  000576  204F               	addwfc	??_main+3,w,c
  2216  000578  0100               	movlb	0	; () banked
  2217  00057A  6F8D               	movwf	(_main$1791+1)& (0+255),b
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;main.c: 227: printf("%lu", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] &
      +                           0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10));
  2221  00057C  0EF6               	movlw	low STR_4
  2222  00057E  6E28               	movwf	printf@f,c
  2223  000580  0EFF               	movlw	high STR_4
  2224  000582  6E29               	movwf	printf@f+1,c
  2225  000584  C08C  F02A         	movff	_main$1791,?_printf+2
  2226  000588  C08D  F02B         	movff	_main$1791+1,?_printf+3
  2227  00058C  EC9B  F008         	call	_printf	;wreg free
  2228                           
  2229                           ;main.c: 228: keycheck();
  2230  000590  EC91  F013         	call	_keycheck	;wreg free
  2231                           
  2232                           ;main.c: 230: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2233  000594  0E01               	movlw	1
  2234  000596  ECAB  F013         	call	_lcdInst
  2235  00059A  0E34               	movlw	52
  2236  00059C  6E4C               	movwf	??_main& (0+255),c
  2237  00059E  0EF2               	movlw	242
  2238  0005A0                     u5197:
  2239  0005A0  2EE8               	decfsz	wreg,f,c
  2240  0005A2  D7FE               	bra	u5197
  2241  0005A4  2E4C               	decfsz	??_main& (0+255),f,c
  2242  0005A6  D7FC               	bra	u5197
  2243                           
  2244                           ;main.c: 231: printf("testing S f");
  2245  0005A8  0EA9               	movlw	low STR_5
  2246  0005AA  6E28               	movwf	printf@f,c
  2247  0005AC  0EFF               	movlw	high STR_5
  2248  0005AE  6E29               	movwf	printf@f+1,c
  2249  0005B0  EC9B  F008         	call	_printf	;wreg free
  2250                           
  2251                           ;main.c: 232: S1mode = 1;
  2252  0005B4  0E00               	movlw	0
  2253  0005B6  6E6A               	movwf	_S1mode+1,c
  2254  0005B8  0E01               	movlw	1
  2255  0005BA  6E69               	movwf	_S1mode,c
  2256                           
  2257                           ;main.c: 234: S2mode = 1;
  2258  0005BC  0E00               	movlw	0
  2259  0005BE  6E68               	movwf	_S2mode+1,c
  2260  0005C0  0E01               	movlw	1
  2261  0005C2  6E67               	movwf	_S2mode,c
  2262                           
  2263                           ;main.c: 236: S3mode = 1;
  2264  0005C4  0E00               	movlw	0
  2265  0005C6  6E66               	movwf	_S3mode+1,c
  2266  0005C8  0E01               	movlw	1
  2267  0005CA  6E65               	movwf	_S3mode,c
  2268                           
  2269                           ;main.c: 238: keycheck();
  2270  0005CC  EC91  F013         	call	_keycheck	;wreg free
  2271                           
  2272                           ;main.c: 240: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2273  0005D0  0E01               	movlw	1
  2274  0005D2  ECAB  F013         	call	_lcdInst
  2275  0005D6  0E34               	movlw	52
  2276  0005D8  6E4C               	movwf	??_main& (0+255),c
  2277  0005DA  0EF2               	movlw	242
  2278  0005DC                     u5207:
  2279  0005DC  2EE8               	decfsz	wreg,f,c
  2280  0005DE  D7FE               	bra	u5207
  2281  0005E0  2E4C               	decfsz	??_main& (0+255),f,c
  2282  0005E2  D7FC               	bra	u5207
  2283                           
  2284                           ;main.c: 241: printf("testing S b");
  2285  0005E4  0E91               	movlw	low STR_6
  2286  0005E6  6E28               	movwf	printf@f,c
  2287  0005E8  0EFF               	movlw	high STR_6
  2288  0005EA  6E29               	movwf	printf@f+1,c
  2289  0005EC  EC9B  F008         	call	_printf	;wreg free
  2290                           
  2291                           ;main.c: 242: S1mode = 2;
  2292  0005F0  0E00               	movlw	0
  2293  0005F2  6E6A               	movwf	_S1mode+1,c
  2294  0005F4  0E02               	movlw	2
  2295  0005F6  6E69               	movwf	_S1mode,c
  2296                           
  2297                           ;main.c: 244: S2mode = 2;
  2298  0005F8  0E00               	movlw	0
  2299  0005FA  6E68               	movwf	_S2mode+1,c
  2300  0005FC  0E02               	movlw	2
  2301  0005FE  6E67               	movwf	_S2mode,c
  2302                           
  2303                           ;main.c: 246: S3mode = 2;
  2304  000600  0E00               	movlw	0
  2305  000602  6E66               	movwf	_S3mode+1,c
  2306  000604  0E02               	movlw	2
  2307  000606  6E65               	movwf	_S3mode,c
  2308                           
  2309                           ;main.c: 248: keycheck();
  2310  000608  EC91  F013         	call	_keycheck	;wreg free
  2311                           
  2312                           ;main.c: 250: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2313  00060C  0E01               	movlw	1
  2314  00060E  ECAB  F013         	call	_lcdInst
  2315  000612  0E34               	movlw	52
  2316  000614  6E4C               	movwf	??_main& (0+255),c
  2317  000616  0EF2               	movlw	242
  2318  000618                     u5217:
  2319  000618  2EE8               	decfsz	wreg,f,c
  2320  00061A  D7FE               	bra	u5217
  2321  00061C  2E4C               	decfsz	??_main& (0+255),f,c
  2322  00061E  D7FC               	bra	u5217
  2323                           
  2324                           ;main.c: 251: printf("testing S shake");
  2325  000620  0EEF               	movlw	low STR_7
  2326  000622  6E28               	movwf	printf@f,c
  2327  000624  0EFE               	movlw	high STR_7
  2328  000626  6E29               	movwf	printf@f+1,c
  2329  000628  EC9B  F008         	call	_printf	;wreg free
  2330                           
  2331                           ;main.c: 252: S1mode = 3;
  2332  00062C  0E00               	movlw	0
  2333  00062E  6E6A               	movwf	_S1mode+1,c
  2334  000630  0E03               	movlw	3
  2335  000632  6E69               	movwf	_S1mode,c
  2336                           
  2337                           ;main.c: 254: S2mode = 3;
  2338  000634  0E00               	movlw	0
  2339  000636  6E68               	movwf	_S2mode+1,c
  2340  000638  0E03               	movlw	3
  2341  00063A  6E67               	movwf	_S2mode,c
  2342                           
  2343                           ;main.c: 256: S3mode = 3;
  2344  00063C  0E00               	movlw	0
  2345  00063E  6E66               	movwf	_S3mode+1,c
  2346  000640  0E03               	movlw	3
  2347  000642  6E65               	movwf	_S3mode,c
  2348                           
  2349                           ;main.c: 258: keycheck();
  2350  000644  EC91  F013         	call	_keycheck	;wreg free
  2351                           
  2352                           ;main.c: 260: S1mode = 0;
  2353  000648  0E00               	movlw	0
  2354  00064A  6E6A               	movwf	_S1mode+1,c
  2355  00064C  0E00               	movlw	0
  2356  00064E  6E69               	movwf	_S1mode,c
  2357                           
  2358                           ;main.c: 261: S2mode = 0;
  2359  000650  0E00               	movlw	0
  2360  000652  6E68               	movwf	_S2mode+1,c
  2361  000654  0E00               	movlw	0
  2362  000656  6E67               	movwf	_S2mode,c
  2363                           
  2364                           ;main.c: 262: S3mode = 0;
  2365  000658  0E00               	movlw	0
  2366  00065A  6E66               	movwf	_S3mode+1,c
  2367  00065C  0E00               	movlw	0
  2368  00065E  6E65               	movwf	_S3mode,c
  2369                           
  2370                           ;main.c: 264: keypress = (0);
  2371  000660  0E00               	movlw	0
  2372  000662  0100               	movlb	0	; () banked
  2373  000664  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;main.c: 265: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2377  000666  0E01               	movlw	1
  2378  000668  ECAB  F013         	call	_lcdInst
  2379  00066C  0E34               	movlw	52
  2380  00066E  6E4C               	movwf	??_main& (0+255),c
  2381  000670  0EF2               	movlw	242
  2382  000672                     u5227:
  2383  000672  2EE8               	decfsz	wreg,f,c
  2384  000674  D7FE               	bra	u5227
  2385  000676  2E4C               	decfsz	??_main& (0+255),f,c
  2386  000678  D7FC               	bra	u5227
  2387                           
  2388                           ;main.c: 266: printf("testing S1 pins");
  2389  00067A  0E1F               	movlw	low STR_8
  2390  00067C  6E28               	movwf	printf@f,c
  2391  00067E  0EFF               	movlw	high STR_8
  2392  000680  6E29               	movwf	printf@f+1,c
  2393  000682  EC9B  F008         	call	_printf	;wreg free
  2394                           
  2395                           ;main.c: 267: while(keypress!=3){
  2396  000686  D032               	goto	l4280
  2397  000688                     l4258:
  2398                           
  2399                           ;main.c: 269: keyinterrupt();
  2400  000688  EC86  F013         	call	_keyinterrupt	;wreg free
  2401                           
  2402                           ;main.c: 271: if (keypress == 2){LATDbits.LATD1 = 1;}
  2403  00068C  0E02               	movlw	2
  2404  00068E  0100               	movlb	0	; () banked
  2405  000690  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2406  000692  A4D8               	btfss	status,2,c
  2407  000694  D002               	goto	l190
  2408                           
  2409                           ; BSR set to: 0
  2410  000696  828C               	bsf	3980,1,c	;volatile
  2411  000698  D001               	goto	l4264
  2412  00069A                     l190:
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;main.c: 272: else{LATDbits.LATD1 = 0;}
  2416  00069A  928C               	bcf	3980,1,c	;volatile
  2417  00069C                     l4264:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;main.c: 273: if (keypress == 6){LATBbits.LATB3 = 1;}
  2421  00069C  0E06               	movlw	6
  2422  00069E  0100               	movlb	0	; () banked
  2423  0006A0  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2424  0006A2  A4D8               	btfss	status,2,c
  2425  0006A4  D002               	goto	l192
  2426                           
  2427                           ; BSR set to: 0
  2428  0006A6  868A               	bsf	3978,3,c	;volatile
  2429  0006A8  D001               	goto	l4268
  2430  0006AA                     l192:
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;main.c: 274: else{LATBbits.LATB3 = 0;}
  2434  0006AA  968A               	bcf	3978,3,c	;volatile
  2435  0006AC                     l4268:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 275: if (keypress == 10){LATBbits.LATB2 = 1;}
  2439  0006AC  0E0A               	movlw	10
  2440  0006AE  0100               	movlb	0	; () banked
  2441  0006B0  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2442  0006B2  A4D8               	btfss	status,2,c
  2443  0006B4  D002               	goto	l194
  2444                           
  2445                           ; BSR set to: 0
  2446  0006B6  848A               	bsf	3978,2,c	;volatile
  2447  0006B8  D001               	goto	l4272
  2448  0006BA                     l194:
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;main.c: 276: else{LATBbits.LATB2 = 0;}
  2452  0006BA  948A               	bcf	3978,2,c	;volatile
  2453  0006BC                     l4272:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;main.c: 277: if (keypress == 14){LATBbits.LATB0 = 1;}
  2457  0006BC  0E0E               	movlw	14
  2458  0006BE  0100               	movlb	0	; () banked
  2459  0006C0  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2460  0006C2  A4D8               	btfss	status,2,c
  2461  0006C4  D002               	goto	l196
  2462                           
  2463                           ; BSR set to: 0
  2464  0006C6  808A               	bsf	3978,0,c	;volatile
  2465  0006C8  D001               	goto	l4276
  2466  0006CA                     l196:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 278: else{LATBbits.LATB0 = 0;}
  2470  0006CA  908A               	bcf	3978,0,c	;volatile
  2471  0006CC                     l4276:
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;main.c: 280: readADC(1);
  2475  0006CC  0E01               	movlw	1
  2476  0006CE  EC65  F013         	call	_readADC
  2477                           
  2478                           ;main.c: 281: lcdInst(0b11000000);;
  2479  0006D2  0EC0               	movlw	192
  2480  0006D4  ECAB  F013         	call	_lcdInst
  2481                           
  2482                           ;main.c: 282: printf("%x", ADRES);
  2483  0006D8  0EFB               	movlw	low (STR_26+1)
  2484  0006DA  6E28               	movwf	printf@f,c
  2485  0006DC  0EFF               	movlw	high (STR_26+1)
  2486  0006DE  6E29               	movwf	printf@f+1,c
  2487  0006E0  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  2488  0006E4  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  2489  0006E8  EC9B  F008         	call	_printf	;wreg free
  2490  0006EC                     l4280:
  2491  0006EC  0E03               	movlw	3
  2492  0006EE  0100               	movlb	0	; () banked
  2493  0006F0  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2494  0006F2  A4D8               	btfss	status,2,c
  2495  0006F4  D7C9               	goto	l4258
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;main.c: 283: }
  2499                           ;main.c: 285: keypress = (0);
  2500                           
  2501                           ; BSR set to: 0
  2502  0006F6  0E00               	movlw	0
  2503  0006F8  0100               	movlb	0	; () banked
  2504  0006FA  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 286: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2508  0006FC  0E01               	movlw	1
  2509  0006FE  ECAB  F013         	call	_lcdInst
  2510  000702  0E34               	movlw	52
  2511  000704  6E4C               	movwf	??_main& (0+255),c
  2512  000706  0EF2               	movlw	242
  2513  000708                     u5237:
  2514  000708  2EE8               	decfsz	wreg,f,c
  2515  00070A  D7FE               	bra	u5237
  2516  00070C  2E4C               	decfsz	??_main& (0+255),f,c
  2517  00070E  D7FC               	bra	u5237
  2518                           
  2519                           ;main.c: 287: printf("testing S2 pins");
  2520  000710  0E2F               	movlw	low STR_10
  2521  000712  6E28               	movwf	printf@f,c
  2522  000714  0EFF               	movlw	high STR_10
  2523  000716  6E29               	movwf	printf@f+1,c
  2524  000718  EC9B  F008         	call	_printf	;wreg free
  2525                           
  2526                           ;main.c: 288: while(keypress!=3){
  2527  00071C  D022               	goto	l4308
  2528  00071E                     l4290:
  2529                           
  2530                           ;main.c: 290: keyinterrupt();
  2531  00071E  EC86  F013         	call	_keyinterrupt	;wreg free
  2532                           
  2533                           ;main.c: 292: if (keypress == 2){LATCbits.LATC7 = 1;}
  2534  000722  0E02               	movlw	2
  2535  000724  0100               	movlb	0	; () banked
  2536  000726  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2537  000728  A4D8               	btfss	status,2,c
  2538  00072A  D002               	goto	l201
  2539                           
  2540                           ; BSR set to: 0
  2541  00072C  8E8B               	bsf	3979,7,c	;volatile
  2542  00072E  D001               	goto	l4296
  2543  000730                     l201:
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;main.c: 293: else{LATCbits.LATC7 = 0;}
  2547  000730  9E8B               	bcf	3979,7,c	;volatile
  2548  000732                     l4296:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 294: if (keypress == 6){LATCbits.LATC6 = 1;}
  2552  000732  0E06               	movlw	6
  2553  000734  0100               	movlb	0	; () banked
  2554  000736  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2555  000738  A4D8               	btfss	status,2,c
  2556  00073A  D002               	goto	l203
  2557                           
  2558                           ; BSR set to: 0
  2559  00073C  8C8B               	bsf	3979,6,c	;volatile
  2560  00073E  D001               	goto	l4300
  2561  000740                     l203:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 295: else{LATCbits.LATC6 = 0;}
  2565  000740  9C8B               	bcf	3979,6,c	;volatile
  2566  000742                     l4300:
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 296: if (keypress == 10){LATCbits.LATC0 = 1;}
  2570  000742  0E0A               	movlw	10
  2571  000744  0100               	movlb	0	; () banked
  2572  000746  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2573  000748  A4D8               	btfss	status,2,c
  2574  00074A  D002               	goto	l205
  2575                           
  2576                           ; BSR set to: 0
  2577  00074C  808B               	bsf	3979,0,c	;volatile
  2578  00074E  D001               	goto	l4304
  2579  000750                     l205:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 297: else{LATCbits.LATC0 = 0;}
  2583  000750  908B               	bcf	3979,0,c	;volatile
  2584  000752                     l4304:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;main.c: 298: if (keypress == 14){LATCbits.LATC5 = 1;}
  2588  000752  0E0E               	movlw	14
  2589  000754  0100               	movlb	0	; () banked
  2590  000756  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2591  000758  A4D8               	btfss	status,2,c
  2592  00075A  D002               	goto	l207
  2593                           
  2594                           ; BSR set to: 0
  2595  00075C  8A8B               	bsf	3979,5,c	;volatile
  2596  00075E  D001               	goto	l4308
  2597  000760                     l207:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 299: else{LATCbits.LATC5 = 0;}
  2601  000760  9A8B               	bcf	3979,5,c	;volatile
  2602  000762                     l4308:
  2603  000762  0E03               	movlw	3
  2604  000764  0100               	movlb	0	; () banked
  2605  000766  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2606  000768  A4D8               	btfss	status,2,c
  2607  00076A  D7D9               	goto	l4290
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;main.c: 300: }
  2611                           ;main.c: 302: keypress = (0);
  2612                           
  2613                           ; BSR set to: 0
  2614  00076C  0E00               	movlw	0
  2615  00076E  0100               	movlb	0	; () banked
  2616  000770  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 303: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2620  000772  0E01               	movlw	1
  2621  000774  ECAB  F013         	call	_lcdInst
  2622  000778  0E34               	movlw	52
  2623  00077A  6E4C               	movwf	??_main& (0+255),c
  2624  00077C  0EF2               	movlw	242
  2625  00077E                     u5247:
  2626  00077E  2EE8               	decfsz	wreg,f,c
  2627  000780  D7FE               	bra	u5247
  2628  000782  2E4C               	decfsz	??_main& (0+255),f,c
  2629  000784  D7FC               	bra	u5247
  2630                           
  2631                           ;main.c: 304: printf("testing S3 pins");
  2632  000786  0E3F               	movlw	low STR_11
  2633  000788  6E28               	movwf	printf@f,c
  2634  00078A  0EFF               	movlw	high STR_11
  2635  00078C  6E29               	movwf	printf@f+1,c
  2636  00078E  EC9B  F008         	call	_printf	;wreg free
  2637                           
  2638                           ;main.c: 305: while(keypress!=3){
  2639  000792  D032               	goto	l4340
  2640  000794                     l4318:
  2641                           
  2642                           ;main.c: 307: keyinterrupt();
  2643  000794  EC86  F013         	call	_keyinterrupt	;wreg free
  2644                           
  2645                           ;main.c: 309: if (keypress == 2){LATEbits.LATE2 = 1;}
  2646  000798  0E02               	movlw	2
  2647  00079A  0100               	movlb	0	; () banked
  2648  00079C  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2649  00079E  A4D8               	btfss	status,2,c
  2650  0007A0  D002               	goto	l212
  2651                           
  2652                           ; BSR set to: 0
  2653  0007A2  848D               	bsf	3981,2,c	;volatile
  2654  0007A4  D001               	goto	l4324
  2655  0007A6                     l212:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 310: else{LATEbits.LATE2 = 0;}
  2659  0007A6  948D               	bcf	3981,2,c	;volatile
  2660  0007A8                     l4324:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 311: if (keypress == 6){LATEbits.LATE1 = 1;}
  2664  0007A8  0E06               	movlw	6
  2665  0007AA  0100               	movlb	0	; () banked
  2666  0007AC  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2667  0007AE  A4D8               	btfss	status,2,c
  2668  0007B0  D002               	goto	l214
  2669                           
  2670                           ; BSR set to: 0
  2671  0007B2  828D               	bsf	3981,1,c	;volatile
  2672  0007B4  D001               	goto	l4328
  2673  0007B6                     l214:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 312: else{LATEbits.LATE1 = 0;}
  2677  0007B6  928D               	bcf	3981,1,c	;volatile
  2678  0007B8                     l4328:
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;main.c: 313: if (keypress == 10){LATAbits.LATA4 = 1;}
  2682  0007B8  0E0A               	movlw	10
  2683  0007BA  0100               	movlb	0	; () banked
  2684  0007BC  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2685  0007BE  A4D8               	btfss	status,2,c
  2686  0007C0  D002               	goto	l216
  2687                           
  2688                           ; BSR set to: 0
  2689  0007C2  8889               	bsf	3977,4,c	;volatile
  2690  0007C4  D001               	goto	l4332
  2691  0007C6                     l216:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 314: else{LATAbits.LATA4 = 0;}
  2695  0007C6  9889               	bcf	3977,4,c	;volatile
  2696  0007C8                     l4332:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 315: if (keypress == 14){LATDbits.LATD0 = 1;}
  2700  0007C8  0E0E               	movlw	14
  2701  0007CA  0100               	movlb	0	; () banked
  2702  0007CC  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2703  0007CE  A4D8               	btfss	status,2,c
  2704  0007D0  D002               	goto	l218
  2705                           
  2706                           ; BSR set to: 0
  2707  0007D2  808C               	bsf	3980,0,c	;volatile
  2708  0007D4  D001               	goto	l4336
  2709  0007D6                     l218:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 316: else{LATDbits.LATD0 = 0;}
  2713  0007D6  908C               	bcf	3980,0,c	;volatile
  2714  0007D8                     l4336:
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;main.c: 318: readADC(5);
  2718  0007D8  0E05               	movlw	5
  2719  0007DA  EC65  F013         	call	_readADC
  2720                           
  2721                           ;main.c: 319: lcdInst(0b11000000);;
  2722  0007DE  0EC0               	movlw	192
  2723  0007E0  ECAB  F013         	call	_lcdInst
  2724                           
  2725                           ;main.c: 320: printf("%x", ADRES);
  2726  0007E4  0EFB               	movlw	low (STR_26+1)
  2727  0007E6  6E28               	movwf	printf@f,c
  2728  0007E8  0EFF               	movlw	high (STR_26+1)
  2729  0007EA  6E29               	movwf	printf@f+1,c
  2730  0007EC  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  2731  0007F0  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  2732  0007F4  EC9B  F008         	call	_printf	;wreg free
  2733  0007F8                     l4340:
  2734  0007F8  0E03               	movlw	3
  2735  0007FA  0100               	movlb	0	; () banked
  2736  0007FC  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  2737  0007FE  A4D8               	btfss	status,2,c
  2738  000800  D7C9               	goto	l4318
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 321: }
  2742                           ;main.c: 323: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2743                           
  2744                           ; BSR set to: 0
  2745  000802  0E01               	movlw	1
  2746  000804  ECAB  F013         	call	_lcdInst
  2747  000808  0E34               	movlw	52
  2748  00080A  6E4C               	movwf	??_main& (0+255),c
  2749  00080C  0EF2               	movlw	242
  2750  00080E                     u5257:
  2751  00080E  2EE8               	decfsz	wreg,f,c
  2752  000810  D7FE               	bra	u5257
  2753  000812  2E4C               	decfsz	??_main& (0+255),f,c
  2754  000814  D7FC               	bra	u5257
  2755                           
  2756                           ;main.c: 324: printf("testing PWM2");
  2757  000816  0E78               	movlw	low STR_13
  2758  000818  6E28               	movwf	printf@f,c
  2759  00081A  0EFF               	movlw	high STR_13
  2760  00081C  6E29               	movwf	printf@f+1,c
  2761  00081E  EC9B  F008         	call	_printf	;wreg free
  2762                           
  2763                           ;main.c: 325: PWM2(400);
  2764  000822  0E01               	movlw	1
  2765  000824  6E13               	movwf	PWM2@duty+1,c
  2766  000826  0E90               	movlw	144
  2767  000828  6E12               	movwf	PWM2@duty,c
  2768  00082A  EC8F  F012         	call	_PWM2	;wreg free
  2769                           
  2770                           ;main.c: 326: keycheck();
  2771  00082E  EC91  F013         	call	_keycheck	;wreg free
  2772                           
  2773                           ;main.c: 327: PWM2off();
  2774  000832  ECB6  F013         	call	_PWM2off	;wreg free
  2775                           
  2776                           ;main.c: 329: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2777  000836  0E01               	movlw	1
  2778  000838  ECAB  F013         	call	_lcdInst
  2779  00083C  0E34               	movlw	52
  2780  00083E  6E4C               	movwf	??_main& (0+255),c
  2781  000840  0EF2               	movlw	242
  2782  000842                     u5267:
  2783  000842  2EE8               	decfsz	wreg,f,c
  2784  000844  D7FE               	bra	u5267
  2785  000846  2E4C               	decfsz	??_main& (0+255),f,c
  2786  000848  D7FC               	bra	u5267
  2787                           
  2788                           ;main.c: 330: printf("testing PWM1");
  2789  00084A  0E6B               	movlw	low STR_14
  2790  00084C  6E28               	movwf	printf@f,c
  2791  00084E  0EFF               	movlw	high STR_14
  2792  000850  6E29               	movwf	printf@f+1,c
  2793  000852  EC9B  F008         	call	_printf	;wreg free
  2794                           
  2795                           ;main.c: 331: PWM1(400);
  2796  000856  0E01               	movlw	1
  2797  000858  6E13               	movwf	PWM1@duty+1,c
  2798  00085A  0E90               	movlw	144
  2799  00085C  6E12               	movwf	PWM1@duty,c
  2800  00085E  ECB4  F012         	call	_PWM1	;wreg free
  2801                           
  2802                           ;main.c: 332: keycheck();
  2803  000862  EC91  F013         	call	_keycheck	;wreg free
  2804                           
  2805                           ;main.c: 333: PWM1off();
  2806  000866  ECBB  F013         	call	_PWM1off	;wreg free
  2807                           
  2808                           ;main.c: 335: keypress = (0);
  2809  00086A  0E00               	movlw	0
  2810  00086C  0100               	movlb	0	; () banked
  2811  00086E  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 336: seconds = 0;
  2815  000870  0E00               	movlw	0
  2816  000872  0100               	movlb	0	; () banked
  2817  000874  6FB6               	movwf	(_seconds+1)& (0+255),b
  2818  000876  0E00               	movlw	0
  2819  000878  6FB5               	movwf	_seconds& (0+255),b
  2820                           
  2821                           ;main.c: 337: while(keypress==(0)){
  2822  00087A  D022               	goto	l4382
  2823  00087C                     l4368:
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;main.c: 338: keypress = (0);
  2827  00087C  0E00               	movlw	0
  2828  00087E  0100               	movlb	0	; () banked
  2829  000880  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 340: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2833  000882  0E01               	movlw	1
  2834  000884  ECAB  F013         	call	_lcdInst
  2835  000888  0E34               	movlw	52
  2836  00088A  6E4C               	movwf	??_main& (0+255),c
  2837  00088C  0EF2               	movlw	242
  2838  00088E                     u5277:
  2839  00088E  2EE8               	decfsz	wreg,f,c
  2840  000890  D7FE               	bra	u5277
  2841  000892  2E4C               	decfsz	??_main& (0+255),f,c
  2842  000894  D7FC               	bra	u5277
  2843                           
  2844                           ;main.c: 341: printf("testing TMR0");
  2845  000896  0E5E               	movlw	low STR_15
  2846  000898  6E28               	movwf	printf@f,c
  2847  00089A  0EFF               	movlw	high STR_15
  2848  00089C  6E29               	movwf	printf@f+1,c
  2849  00089E  EC9B  F008         	call	_printf	;wreg free
  2850                           
  2851                           ;main.c: 342: lcdInst(0b11000000);;
  2852  0008A2  0EC0               	movlw	192
  2853  0008A4  ECAB  F013         	call	_lcdInst
  2854                           
  2855                           ;main.c: 343: printf("%d", seconds);
  2856  0008A8  0EBC               	movlw	low (STR_49+13)
  2857  0008AA  6E28               	movwf	printf@f,c
  2858  0008AC  0EFE               	movlw	high (STR_49+13)
  2859  0008AE  6E29               	movwf	printf@f+1,c
  2860  0008B0  C0B5  F02A         	movff	_seconds,?_printf+2
  2861  0008B4  C0B6  F02B         	movff	_seconds+1,?_printf+3
  2862  0008B8  EC9B  F008         	call	_printf	;wreg free
  2863                           
  2864                           ;main.c: 344: keyinterrupt();
  2865  0008BC  EC86  F013         	call	_keyinterrupt	;wreg free
  2866  0008C0                     l4382:
  2867  0008C0  0100               	movlb	0	; () banked
  2868  0008C2  51B7               	movf	_keypress& (0+255),w,b	;volatile
  2869  0008C4  B4D8               	btfsc	status,2,c
  2870  0008C6  D7DA               	goto	l4368
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;main.c: 345: }
  2874                           ;main.c: 347: keypress = (0);
  2875                           
  2876                           ; BSR set to: 0
  2877  0008C8  0E00               	movlw	0
  2878  0008CA  0100               	movlb	0	; () banked
  2879  0008CC  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2880                           
  2881                           ;main.c: 348: while(keypress==(0)){
  2882  0008CE  D058               	goto	l4416
  2883  0008D0                     l4386:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 349: keypress = (0);
  2887  0008D0  0E00               	movlw	0
  2888  0008D2  0100               	movlb	0	; () banked
  2889  0008D4  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 351: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2893  0008D6  0E01               	movlw	1
  2894  0008D8  ECAB  F013         	call	_lcdInst
  2895  0008DC  0E34               	movlw	52
  2896  0008DE  6E4C               	movwf	??_main& (0+255),c
  2897  0008E0  0EF2               	movlw	242
  2898  0008E2                     u5287:
  2899  0008E2  2EE8               	decfsz	wreg,f,c
  2900  0008E4  D7FE               	bra	u5287
  2901  0008E6  2E4C               	decfsz	??_main& (0+255),f,c
  2902  0008E8  D7FC               	bra	u5287
  2903                           
  2904                           ;main.c: 352: printf("testing IR");
  2905  0008EA  0EB5               	movlw	low STR_17
  2906  0008EC  6E28               	movwf	printf@f,c
  2907  0008EE  0EFF               	movlw	high STR_17
  2908  0008F0  6E29               	movwf	printf@f+1,c
  2909  0008F2  EC9B  F008         	call	_printf	;wreg free
  2910                           
  2911                           ;main.c: 353: lcdInst(0b11000000);;
  2912  0008F6  0EC0               	movlw	192
  2913  0008F8  ECAB  F013         	call	_lcdInst
  2914                           
  2915                           ;main.c: 354: readADC(1);
  2916  0008FC  0E01               	movlw	1
  2917  0008FE  EC65  F013         	call	_readADC
  2918                           
  2919                           ;main.c: 355: printf("%x ", ADRES);
  2920  000902  0EF2               	movlw	low STR_18
  2921  000904  6E28               	movwf	printf@f,c
  2922  000906  0EFF               	movlw	high STR_18
  2923  000908  6E29               	movwf	printf@f+1,c
  2924  00090A  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  2925  00090E  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  2926  000912  EC9B  F008         	call	_printf	;wreg free
  2927                           
  2928                           ;main.c: 356: readADC(0);
  2929  000916  0E00               	movlw	0
  2930  000918  EC65  F013         	call	_readADC
  2931                           
  2932                           ;main.c: 357: printf("%x ", ADRES);
  2933  00091C  0EF2               	movlw	low STR_18
  2934  00091E  6E28               	movwf	printf@f,c
  2935  000920  0EFF               	movlw	high STR_18
  2936  000922  6E29               	movwf	printf@f+1,c
  2937  000924  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  2938  000928  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  2939  00092C  EC9B  F008         	call	_printf	;wreg free
  2940                           
  2941                           ;main.c: 358: readADC(2);
  2942  000930  0E02               	movlw	2
  2943  000932  EC65  F013         	call	_readADC
  2944                           
  2945                           ;main.c: 359: printf("%x ", ADRES);
  2946  000936  0EF2               	movlw	low STR_18
  2947  000938  6E28               	movwf	printf@f,c
  2948  00093A  0EFF               	movlw	high STR_18
  2949  00093C  6E29               	movwf	printf@f+1,c
  2950  00093E  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  2951  000942  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  2952  000946  EC9B  F008         	call	_printf	;wreg free
  2953                           
  2954                           ;main.c: 360: readADC(5);
  2955  00094A  0E05               	movlw	5
  2956  00094C  EC65  F013         	call	_readADC
  2957                           
  2958                           ;main.c: 361: printf("%x ", ADRES);
  2959  000950  0EF2               	movlw	low STR_18
  2960  000952  6E28               	movwf	printf@f,c
  2961  000954  0EFF               	movlw	high STR_18
  2962  000956  6E29               	movwf	printf@f+1,c
  2963  000958  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  2964  00095C  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  2965  000960  EC9B  F008         	call	_printf	;wreg free
  2966                           
  2967                           ;main.c: 362: keyinterrupt();
  2968  000964  EC86  F013         	call	_keyinterrupt	;wreg free
  2969                           
  2970                           ;main.c: 363: _delay((unsigned long)((100)*(32000000/4000.0)));
  2971  000968  0E05               	movlw	5
  2972  00096A  6E4D               	movwf	(??_main+1)& (0+255),c
  2973  00096C  0E0F               	movlw	15
  2974  00096E  6E4C               	movwf	??_main& (0+255),c
  2975  000970  0EF1               	movlw	241
  2976  000972                     u5297:
  2977  000972  2EE8               	decfsz	wreg,f,c
  2978  000974  D7FE               	bra	u5297
  2979  000976  2E4C               	decfsz	??_main& (0+255),f,c
  2980  000978  D7FC               	bra	u5297
  2981  00097A  2E4D               	decfsz	(??_main+1)& (0+255),f,c
  2982  00097C  D7FA               	bra	u5297
  2983  00097E  F000               	nop	
  2984  000980                     l4416:
  2985  000980  0100               	movlb	0	; () banked
  2986  000982  51B7               	movf	_keypress& (0+255),w,b	;volatile
  2987  000984  B4D8               	btfsc	status,2,c
  2988  000986  D7A4               	goto	l4386
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;main.c: 364: }
  2992                           ;main.c: 366: keypress = (0);
  2993                           
  2994                           ; BSR set to: 0
  2995  000988  0E00               	movlw	0
  2996  00098A  0100               	movlb	0	; () banked
  2997  00098C  6FB7               	movwf	_keypress& (0+255),b	;volatile
  2998                           
  2999                           ;main.c: 367: while(keypress==(0)){
  3000  00098E  D03E               	goto	l4442
  3001  000990                     l4420:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 368: keypress = (0);
  3005  000990  0E00               	movlw	0
  3006  000992  0100               	movlb	0	; () banked
  3007  000994  6FB7               	movwf	_keypress& (0+255),b	;volatile
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;main.c: 369: _delay((unsigned long)((50)*(32000000/4000.0)));
  3011  000996  0E03               	movlw	3
  3012  000998  6E4D               	movwf	(??_main+1)& (0+255),c
  3013  00099A  0E08               	movlw	8
  3014  00099C  6E4C               	movwf	??_main& (0+255),c
  3015  00099E  0E77               	movlw	119
  3016  0009A0                     u5307:
  3017  0009A0  2EE8               	decfsz	wreg,f,c
  3018  0009A2  D7FE               	bra	u5307
  3019  0009A4  2E4C               	decfsz	??_main& (0+255),f,c
  3020  0009A6  D7FC               	bra	u5307
  3021  0009A8  2E4D               	decfsz	(??_main+1)& (0+255),f,c
  3022  0009AA  D7FA               	bra	u5307
  3023  0009AC  F000               	nop	
  3024                           
  3025                           ;main.c: 370: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3026  0009AE  0E01               	movlw	1
  3027  0009B0  ECAB  F013         	call	_lcdInst
  3028  0009B4  0E34               	movlw	52
  3029  0009B6  6E4C               	movwf	??_main& (0+255),c
  3030  0009B8  0EF2               	movlw	242
  3031  0009BA                     u5317:
  3032  0009BA  2EE8               	decfsz	wreg,f,c
  3033  0009BC  D7FE               	bra	u5317
  3034  0009BE  2E4C               	decfsz	??_main& (0+255),f,c
  3035  0009C0  D7FC               	bra	u5317
  3036                           
  3037                           ;main.c: 371: printf("label   tab");
  3038  0009C2  0E9D               	movlw	low STR_22
  3039  0009C4  6E28               	movwf	printf@f,c
  3040  0009C6  0EFF               	movlw	high STR_22
  3041  0009C8  6E29               	movwf	printf@f+1,c
  3042  0009CA  EC9B  F008         	call	_printf	;wreg free
  3043                           
  3044                           ;main.c: 372: lcdInst(0b11000000);;
  3045  0009CE  0EC0               	movlw	192
  3046  0009D0  ECAB  F013         	call	_lcdInst
  3047                           
  3048                           ;main.c: 373: readADC(4);
  3049  0009D4  0E04               	movlw	4
  3050  0009D6  EC65  F013         	call	_readADC
  3051                           
  3052                           ;main.c: 374: printf("%x      ", ADRES);
  3053  0009DA  0ECA               	movlw	low STR_23
  3054  0009DC  6E28               	movwf	printf@f,c
  3055  0009DE  0EFF               	movlw	high STR_23
  3056  0009E0  6E29               	movwf	printf@f+1,c
  3057  0009E2  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3058  0009E6  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3059  0009EA  EC9B  F008         	call	_printf	;wreg free
  3060                           
  3061                           ;main.c: 375: readADC(3);
  3062  0009EE  0E03               	movlw	3
  3063  0009F0  EC65  F013         	call	_readADC
  3064                           
  3065                           ;main.c: 376: printf("%x      ", ADRES);
  3066  0009F4  0ECA               	movlw	low STR_23
  3067  0009F6  6E28               	movwf	printf@f,c
  3068  0009F8  0EFF               	movlw	high STR_23
  3069  0009FA  6E29               	movwf	printf@f+1,c
  3070  0009FC  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3071  000A00  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3072  000A04  EC9B  F008         	call	_printf	;wreg free
  3073                           
  3074                           ;main.c: 377: keyinterrupt();
  3075  000A08  EC86  F013         	call	_keyinterrupt	;wreg free
  3076  000A0C                     l4442:
  3077  000A0C  0100               	movlb	0	; () banked
  3078  000A0E  51B7               	movf	_keypress& (0+255),w,b	;volatile
  3079  000A10  B4D8               	btfsc	status,2,c
  3080  000A12  D7BE               	goto	l4420
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;main.c: 378: }
  3084                           ;main.c: 380: standby = 1;
  3085                           
  3086                           ; BSR set to: 0
  3087  000A14  0E00               	movlw	0
  3088  000A16  0100               	movlb	0	; () banked
  3089  000A18  6FA1               	movwf	(main@standby+1)& (0+255),b
  3090  000A1A  0E01               	movlw	1
  3091  000A1C  6FA0               	movwf	main@standby& (0+255),b
  3092                           
  3093                           ;main.c: 386: }
  3094  000A1E  EF46  F000         	goto	l4042
  3095  000A22                     l4446:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;main.c: 387: else{
  3099                           ;main.c: 388: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3100  000A22  0E01               	movlw	1
  3101  000A24  ECAB  F013         	call	_lcdInst
  3102  000A28  0E34               	movlw	52
  3103  000A2A  6E4C               	movwf	??_main& (0+255),c
  3104  000A2C  0EF2               	movlw	242
  3105  000A2E                     u5327:
  3106  000A2E  2EE8               	decfsz	wreg,f,c
  3107  000A30  D7FE               	bra	u5327
  3108  000A32  2E4C               	decfsz	??_main& (0+255),f,c
  3109  000A34  D7FC               	bra	u5327
  3110                           
  3111                           ;main.c: 390: readADC(2);
  3112  000A36  0E02               	movlw	2
  3113  000A38  EC65  F013         	call	_readADC
  3114                           
  3115                           ;main.c: 391: if(ADRES <= 0x250){
  3116  000A3C  0E51               	movlw	81
  3117  000A3E  5CC3               	subwf	4035,w,c	;volatile
  3118  000A40  0E02               	movlw	2
  3119  000A42  58C4               	subwfb	4036,w,c	;volatile
  3120  000A44  B0D8               	btfsc	status,0,c
  3121  000A46  D020               	goto	l4462
  3122                           
  3123                           ;main.c: 392: prevSoupLoad = seconds;
  3124  000A48  C0B5  F096         	movff	_seconds,main@prevSoupLoad
  3125  000A4C  C0B6  F097         	movff	_seconds+1,main@prevSoupLoad+1
  3126                           
  3127                           ;main.c: 393: if (!soupSort){
  3128  000A50  0100               	movlb	0	; () banked
  3129  000A52  519A               	movf	main@soupSort& (0+255),w,b
  3130  000A54  0100               	movlb	0	; () banked
  3131  000A56  119B               	iorwf	(main@soupSort+1)& (0+255),w,b
  3132  000A58  A4D8               	btfss	status,2,c
  3133  000A5A  D016               	goto	l4462
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;main.c: 394: soupSort = 1;
  3137  000A5C  0E00               	movlw	0
  3138  000A5E  0100               	movlb	0	; () banked
  3139  000A60  6F9B               	movwf	(main@soupSort+1)& (0+255),b
  3140  000A62  0E01               	movlw	1
  3141  000A64  6F9A               	movwf	main@soupSort& (0+255),b
  3142                           
  3143                           ;main.c: 395: soupSteps = 0;
  3144  000A66  0E00               	movlw	0
  3145  000A68  0100               	movlb	0	; () banked
  3146  000A6A  6FB4               	movwf	(_soupSteps+1)& (0+255),b
  3147  000A6C  0E00               	movlw	0
  3148  000A6E  6FB3               	movwf	_soupSteps& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 396: _delay((unsigned long)((150)*(32000000/4000.0)));
  3152  000A70  0E07               	movlw	7
  3153  000A72  6E4D               	movwf	(??_main+1)& (0+255),c
  3154  000A74  0E17               	movlw	23
  3155  000A76  6E4C               	movwf	??_main& (0+255),c
  3156  000A78  0E6A               	movlw	106
  3157  000A7A                     u5337:
  3158  000A7A  2EE8               	decfsz	wreg,f,c
  3159  000A7C  D7FE               	bra	u5337
  3160  000A7E  2E4C               	decfsz	??_main& (0+255),f,c
  3161  000A80  D7FC               	bra	u5337
  3162  000A82  2E4D               	decfsz	(??_main+1)& (0+255),f,c
  3163  000A84  D7FA               	bra	u5337
  3164  000A86  D000               	nop2	
  3165  000A88                     l4462:
  3166                           
  3167                           ;main.c: 397: }
  3168                           ;main.c: 398: }
  3169                           ;main.c: 400: printf("%x %d", ADRES, soupSteps);
  3170  000A88  0EEC               	movlw	low STR_25
  3171  000A8A  6E28               	movwf	printf@f,c
  3172  000A8C  0EFF               	movlw	high STR_25
  3173  000A8E  6E29               	movwf	printf@f+1,c
  3174  000A90  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3175  000A94  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3176  000A98  C0B3  F02C         	movff	_soupSteps,?_printf+4
  3177  000A9C  C0B4  F02D         	movff	_soupSteps+1,?_printf+5
  3178  000AA0  EC9B  F008         	call	_printf	;wreg free
  3179                           
  3180                           ;main.c: 402: if (soupSort){
  3181  000AA4  0100               	movlb	0	; () banked
  3182  000AA6  519A               	movf	main@soupSort& (0+255),w,b
  3183  000AA8  0100               	movlb	0	; () banked
  3184  000AAA  119B               	iorwf	(main@soupSort+1)& (0+255),w,b
  3185  000AAC  B4D8               	btfsc	status,2,c
  3186  000AAE  D0FE               	goto	l4548
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;main.c: 403: if (soupSteps < 80){
  3190  000AB0  0100               	movlb	0	; () banked
  3191  000AB2  BFB4               	btfsc	(_soupSteps+1)& (0+255),7,b
  3192  000AB4  D008               	goto	l4468
  3193  000AB6  0100               	movlb	0	; () banked
  3194  000AB8  51B4               	movf	(_soupSteps+1)& (0+255),w,b
  3195  000ABA  E120               	bnz	l4478
  3196  000ABC  0E50               	movlw	80
  3197  000ABE  0100               	movlb	0	; () banked
  3198  000AC0  5DB3               	subwf	_soupSteps& (0+255),w,b
  3199  000AC2  B0D8               	btfsc	status,0,c
  3200  000AC4  D01B               	goto	l4478
  3201  000AC6                     l4468:
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 404: S1mode = 3;
  3205  000AC6  0E00               	movlw	0
  3206  000AC8  6E6A               	movwf	_S1mode+1,c
  3207  000ACA  0E03               	movlw	3
  3208  000ACC  6E69               	movwf	_S1mode,c
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;main.c: 405: readADC(4);
  3212  000ACE  0E04               	movlw	4
  3213  000AD0  EC65  F013         	call	_readADC
  3214                           
  3215                           ;main.c: 406: if(ADRES<0x200){labelState = 1;}
  3216  000AD4  0E02               	movlw	2
  3217  000AD6  5CC4               	subwf	4036,w,c	;volatile
  3218  000AD8  B0D8               	btfsc	status,0,c
  3219  000ADA  D005               	goto	l4476
  3220  000ADC  0E00               	movlw	0
  3221  000ADE  0100               	movlb	0	; () banked
  3222  000AE0  6FA5               	movwf	(main@labelState+1)& (0+255),b
  3223  000AE2  0E01               	movlw	1
  3224  000AE4  6FA4               	movwf	main@labelState& (0+255),b
  3225  000AE6                     l4476:
  3226                           
  3227                           ;main.c: 407: printf(" %x",ADRES);
  3228  000AE6  0EFA               	movlw	low STR_26
  3229  000AE8  6E28               	movwf	printf@f,c
  3230  000AEA  0EFF               	movlw	high STR_26
  3231  000AEC  6E29               	movwf	printf@f+1,c
  3232  000AEE  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3233  000AF2  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3234  000AF6  EC9B  F008         	call	_printf	;wreg free
  3235                           
  3236                           ;main.c: 408: }
  3237  000AFA  D0DC               	goto	l4550
  3238  000AFC                     l4478:
  3239                           
  3240                           ;main.c: 409: else if (labelState == 1){
  3241  000AFC  0100               	movlb	0	; () banked
  3242  000AFE  05A4               	decf	main@labelState& (0+255),w,b
  3243  000B00  0100               	movlb	0	; () banked
  3244  000B02  11A5               	iorwf	(main@labelState+1)& (0+255),w,b
  3245  000B04  A4D8               	btfss	status,2,c
  3246  000B06  D049               	goto	l4504
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 410: if(soupSteps < (80+70)){
  3250  000B08  0100               	movlb	0	; () banked
  3251  000B0A  BFB4               	btfsc	(_soupSteps+1)& (0+255),7,b
  3252  000B0C  D008               	goto	l4482
  3253  000B0E  0100               	movlb	0	; () banked
  3254  000B10  51B4               	movf	(_soupSteps+1)& (0+255),w,b
  3255  000B12  E109               	bnz	l4484
  3256  000B14  0E96               	movlw	150
  3257  000B16  0100               	movlb	0	; () banked
  3258  000B18  5DB3               	subwf	_soupSteps& (0+255),w,b
  3259  000B1A  B0D8               	btfsc	status,0,c
  3260  000B1C  D004               	goto	l4484
  3261  000B1E                     l4482:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 411: S1mode = 1;
  3265  000B1E  0E00               	movlw	0
  3266  000B20  6E6A               	movwf	_S1mode+1,c
  3267  000B22  0E01               	movlw	1
  3268  000B24  D04E               	goto	L1
  3269  000B26                     l4484:
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;main.c: 414: else if(soupSteps < (80+70+60)){
  3273  000B26  0100               	movlb	0	; () banked
  3274  000B28  BFB4               	btfsc	(_soupSteps+1)& (0+255),7,b
  3275  000B2A  D008               	goto	l4486
  3276  000B2C  0100               	movlb	0	; () banked
  3277  000B2E  51B4               	movf	(_soupSteps+1)& (0+255),w,b
  3278  000B30  E109               	bnz	l4488
  3279  000B32  0ED2               	movlw	210
  3280  000B34  0100               	movlb	0	; () banked
  3281  000B36  5DB3               	subwf	_soupSteps& (0+255),w,b
  3282  000B38  B0D8               	btfsc	status,0,c
  3283  000B3A  D004               	goto	l4488
  3284  000B3C                     l4486:
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 415: S1mode = 2;
  3288  000B3C  0E00               	movlw	0
  3289  000B3E  6E6A               	movwf	_S1mode+1,c
  3290  000B40  0E02               	movlw	2
  3291  000B42  D0B7               	goto	L3
  3292  000B44                     l4488:
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;main.c: 417: else{
  3296                           ;main.c: 418: S1mode = 0;
  3297  000B44  0E00               	movlw	0
  3298  000B46  6E6A               	movwf	_S1mode+1,c
  3299  000B48  0E00               	movlw	0
  3300  000B4A  6E69               	movwf	_S1mode,c
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 419: updateS1(2);
  3304  000B4C  0E00               	movlw	0
  3305  000B4E  6E13               	movwf	updateS1@mode+1,c
  3306  000B50  0E02               	movlw	2
  3307  000B52  6E12               	movwf	updateS1@mode,c
  3308  000B54  EC52  F00C         	call	_updateS1	;wreg free
  3309                           
  3310                           ;main.c: 420: readADC(1);
  3311  000B58  0E01               	movlw	1
  3312  000B5A  EC65  F013         	call	_readADC
  3313                           
  3314                           ;main.c: 421: printf(" %x", ADRES);
  3315  000B5E  0EFA               	movlw	low STR_26
  3316  000B60  6E28               	movwf	printf@f,c
  3317  000B62  0EFF               	movlw	high STR_26
  3318  000B64  6E29               	movwf	printf@f+1,c
  3319  000B66  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3320  000B6A  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3321  000B6E  EC9B  F008         	call	_printf	;wreg free
  3322                           
  3323                           ;main.c: 422: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  3324  000B72  0100               	movlb	0	; () banked
  3325  000B74  519E               	movf	main@prevSoupIR& (0+255),w,b
  3326  000B76  5CC3               	subwf	4035,w,c	;volatile
  3327  000B78  0100               	movlb	0	; () banked
  3328  000B7A  519F               	movf	(main@prevSoupIR+1)& (0+255),w,b
  3329  000B7C  58C4               	subwfb	4036,w,c	;volatile
  3330  000B7E  B0D8               	btfsc	status,0,c
  3331  000B80  D060               	goto	l4528
  3332                           
  3333                           ; BSR set to: 0
  3334  000B82  0EAB               	movlw	171
  3335  000B84  5CC3               	subwf	4035,w,c	;volatile
  3336  000B86  0E03               	movlw	3
  3337  000B88  58C4               	subwfb	4036,w,c	;volatile
  3338  000B8A  A0D8               	btfss	status,0,c
  3339  000B8C  D05A               	goto	l4528
  3340                           
  3341                           ; BSR set to: 0
  3342  000B8E  0E00               	movlw	0
  3343  000B90  0100               	movlb	0	; () banked
  3344  000B92  6FA5               	movwf	(main@labelState+1)& (0+255),b
  3345  000B94  0E65               	movlw	101
  3346  000B96  6FA4               	movwf	main@labelState& (0+255),b
  3347  000B98  D054               	goto	l4528
  3348  000B9A                     l4504:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 427: else if(labelState == 0){
  3352  000B9A  0100               	movlb	0	; () banked
  3353  000B9C  51A4               	movf	main@labelState& (0+255),w,b
  3354  000B9E  0100               	movlb	0	; () banked
  3355  000BA0  11A5               	iorwf	(main@labelState+1)& (0+255),w,b
  3356  000BA2  A4D8               	btfss	status,2,c
  3357  000BA4  D053               	goto	l4530
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 428: if(soupSteps < (80+70)){
  3361  000BA6  0100               	movlb	0	; () banked
  3362  000BA8  BFB4               	btfsc	(_soupSteps+1)& (0+255),7,b
  3363  000BAA  D008               	goto	l4508
  3364  000BAC  0100               	movlb	0	; () banked
  3365  000BAE  51B4               	movf	(_soupSteps+1)& (0+255),w,b
  3366  000BB0  E10F               	bnz	l4510
  3367  000BB2  0E96               	movlw	150
  3368  000BB4  0100               	movlb	0	; () banked
  3369  000BB6  5DB3               	subwf	_soupSteps& (0+255),w,b
  3370  000BB8  B0D8               	btfsc	status,0,c
  3371  000BBA  D00A               	goto	l4510
  3372  000BBC                     l4508:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;main.c: 429: S1mode = 2;
  3376  000BBC  0E00               	movlw	0
  3377  000BBE  6E6A               	movwf	_S1mode+1,c
  3378  000BC0  0E02               	movlw	2
  3379  000BC2                     L1:
  3380  000BC2  6E69               	movwf	_S1mode,c
  3381                           
  3382                           ;main.c: 430: prevSoupLoad = 0;
  3383  000BC4  0E00               	movlw	0
  3384  000BC6  0100               	movlb	0	; () banked
  3385  000BC8  6F97               	movwf	(main@prevSoupLoad+1)& (0+255),b
  3386  000BCA  0E00               	movlw	0
  3387  000BCC  6F96               	movwf	main@prevSoupLoad& (0+255),b
  3388                           
  3389                           ;main.c: 431: }
  3390  000BCE  D072               	goto	l4550
  3391  000BD0                     l4510:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 432: else if(soupSteps < (80+70+60)){
  3395  000BD0  0100               	movlb	0	; () banked
  3396  000BD2  BFB4               	btfsc	(_soupSteps+1)& (0+255),7,b
  3397  000BD4  D008               	goto	l4512
  3398  000BD6  0100               	movlb	0	; () banked
  3399  000BD8  51B4               	movf	(_soupSteps+1)& (0+255),w,b
  3400  000BDA  E109               	bnz	l4514
  3401  000BDC  0ED2               	movlw	210
  3402  000BDE  0100               	movlb	0	; () banked
  3403  000BE0  5DB3               	subwf	_soupSteps& (0+255),w,b
  3404  000BE2  B0D8               	btfsc	status,0,c
  3405  000BE4  D004               	goto	l4514
  3406  000BE6                     l4512:
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;main.c: 433: S1mode = 1;
  3410  000BE6  0E00               	movlw	0
  3411  000BE8  6E6A               	movwf	_S1mode+1,c
  3412  000BEA  0E01               	movlw	1
  3413  000BEC  D062               	goto	L3
  3414  000BEE                     l4514:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 435: else{
  3418                           ;main.c: 436: S1mode = 0;
  3419  000BEE  0E00               	movlw	0
  3420  000BF0  6E6A               	movwf	_S1mode+1,c
  3421  000BF2  0E00               	movlw	0
  3422  000BF4  6E69               	movwf	_S1mode,c
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 437: updateS1(1);
  3426  000BF6  0E00               	movlw	0
  3427  000BF8  6E13               	movwf	updateS1@mode+1,c
  3428  000BFA  0E01               	movlw	1
  3429  000BFC  6E12               	movwf	updateS1@mode,c
  3430  000BFE  EC52  F00C         	call	_updateS1	;wreg free
  3431                           
  3432                           ;main.c: 438: readADC(1);
  3433  000C02  0E01               	movlw	1
  3434  000C04  EC65  F013         	call	_readADC
  3435                           
  3436                           ;main.c: 439: printf(" %x", ADRES);
  3437  000C08  0EFA               	movlw	low STR_26
  3438  000C0A  6E28               	movwf	printf@f,c
  3439  000C0C  0EFF               	movlw	high STR_26
  3440  000C0E  6E29               	movwf	printf@f+1,c
  3441  000C10  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3442  000C14  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3443  000C18  EC9B  F008         	call	_printf	;wreg free
  3444                           
  3445                           ;main.c: 440: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  3446  000C1C  0100               	movlb	0	; () banked
  3447  000C1E  519E               	movf	main@prevSoupIR& (0+255),w,b
  3448  000C20  5CC3               	subwf	4035,w,c	;volatile
  3449  000C22  0100               	movlb	0	; () banked
  3450  000C24  519F               	movf	(main@prevSoupIR+1)& (0+255),w,b
  3451  000C26  58C4               	subwfb	4036,w,c	;volatile
  3452  000C28  B0D8               	btfsc	status,0,c
  3453  000C2A  D00B               	goto	l4528
  3454                           
  3455                           ; BSR set to: 0
  3456  000C2C  0EAB               	movlw	171
  3457  000C2E  5CC3               	subwf	4035,w,c	;volatile
  3458  000C30  0E03               	movlw	3
  3459  000C32  58C4               	subwfb	4036,w,c	;volatile
  3460  000C34  A0D8               	btfss	status,0,c
  3461  000C36  D005               	goto	l4528
  3462                           
  3463                           ; BSR set to: 0
  3464  000C38  0E00               	movlw	0
  3465  000C3A  0100               	movlb	0	; () banked
  3466  000C3C  6FA5               	movwf	(main@labelState+1)& (0+255),b
  3467  000C3E  0E64               	movlw	100
  3468  000C40  D7AA               	goto	L9
  3469  000C42                     l4528:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 441: prevSoupIR = ADRES;
  3473  000C42  CFC3 F09E          	movff	4035,main@prevSoupIR	;volatile
  3474  000C46  CFC4 F09F          	movff	4036,main@prevSoupIR+1	;volatile
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;main.c: 442: }
  3478                           ;main.c: 443: }
  3479                           
  3480                           ; BSR set to: 0
  3481  000C4A  D034               	goto	l4550
  3482  000C4C                     l4530:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;main.c: 444: else{
  3486                           ;main.c: 445: if(labelState == 101){soupNL++;}
  3487  000C4C  0E65               	movlw	101
  3488  000C4E  0100               	movlb	0	; () banked
  3489  000C50  19A4               	xorwf	main@labelState& (0+255),w,b
  3490  000C52  0100               	movlb	0	; () banked
  3491  000C54  11A5               	iorwf	(main@labelState+1)& (0+255),w,b
  3492  000C56  A4D8               	btfss	status,2,c
  3493  000C58  D004               	goto	l4534
  3494                           
  3495                           ; BSR set to: 0
  3496  000C5A  0100               	movlb	0	; () banked
  3497  000C5C  4B90               	infsnz	main@soupNL& (0+255),f,b
  3498  000C5E  2B91               	incf	(main@soupNL+1)& (0+255),f,b
  3499  000C60  D00A               	goto	l4538
  3500  000C62                     l4534:
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;main.c: 446: else if(labelState == 100){soupL++;}
  3504  000C62  0E64               	movlw	100
  3505  000C64  0100               	movlb	0	; () banked
  3506  000C66  19A4               	xorwf	main@labelState& (0+255),w,b
  3507  000C68  0100               	movlb	0	; () banked
  3508  000C6A  11A5               	iorwf	(main@labelState+1)& (0+255),w,b
  3509  000C6C  A4D8               	btfss	status,2,c
  3510  000C6E  D003               	goto	l4538
  3511                           
  3512                           ; BSR set to: 0
  3513  000C70  0100               	movlb	0	; () banked
  3514  000C72  4B8E               	infsnz	main@soupL& (0+255),f,b
  3515  000C74  2B8F               	incf	(main@soupL+1)& (0+255),f,b
  3516  000C76                     l4538:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;main.c: 447: soupSteps = 0;
  3520  000C76  0E00               	movlw	0
  3521  000C78  0100               	movlb	0	; () banked
  3522  000C7A  6FB4               	movwf	(_soupSteps+1)& (0+255),b
  3523  000C7C  0E00               	movlw	0
  3524  000C7E  6FB3               	movwf	_soupSteps& (0+255),b
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;main.c: 448: prevSoupIR = 0;
  3528  000C80  0E00               	movlw	0
  3529  000C82  0100               	movlb	0	; () banked
  3530  000C84  6F9F               	movwf	(main@prevSoupIR+1)& (0+255),b
  3531  000C86  0E00               	movlw	0
  3532  000C88  6F9E               	movwf	main@prevSoupIR& (0+255),b
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;main.c: 449: labelState = 0;
  3536  000C8A  0E00               	movlw	0
  3537  000C8C  0100               	movlb	0	; () banked
  3538  000C8E  6FA5               	movwf	(main@labelState+1)& (0+255),b
  3539  000C90  0E00               	movlw	0
  3540  000C92  6FA4               	movwf	main@labelState& (0+255),b
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;main.c: 450: if (prevSoupLoad == 0) {soupSort = 0;}
  3544  000C94  0100               	movlb	0	; () banked
  3545  000C96  5196               	movf	main@prevSoupLoad& (0+255),w,b
  3546  000C98  0100               	movlb	0	; () banked
  3547  000C9A  1197               	iorwf	(main@prevSoupLoad+1)& (0+255),w,b
  3548  000C9C  A4D8               	btfss	status,2,c
  3549  000C9E  D00A               	goto	l4550
  3550                           
  3551                           ; BSR set to: 0
  3552  000CA0  0E00               	movlw	0
  3553  000CA2  0100               	movlb	0	; () banked
  3554  000CA4  6F9B               	movwf	(main@soupSort+1)& (0+255),b
  3555  000CA6  0E00               	movlw	0
  3556  000CA8  6F9A               	movwf	main@soupSort& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;main.c: 451: }
  3560                           ;main.c: 452: }
  3561                           
  3562                           ; BSR set to: 0
  3563                           
  3564                           ; BSR set to: 0
  3565                           
  3566                           ; BSR set to: 0
  3567  000CAA  D004               	goto	l4550
  3568  000CAC                     l4548:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;main.c: 453: else{
  3572                           ;main.c: 454: S1mode = 3;
  3573  000CAC  0E00               	movlw	0
  3574  000CAE  6E6A               	movwf	_S1mode+1,c
  3575  000CB0  0E03               	movlw	3
  3576  000CB2                     L3:
  3577  000CB2  6E69               	movwf	_S1mode,c
  3578  000CB4                     l4550:
  3579                           
  3580                           ;main.c: 455: }
  3581                           ;main.c: 458: lcdInst(0b11000000);;
  3582  000CB4  0EC0               	movlw	192
  3583  000CB6  ECAB  F013         	call	_lcdInst
  3584                           
  3585                           ;main.c: 460: readADC(0);
  3586  000CBA  0E00               	movlw	0
  3587  000CBC  EC65  F013         	call	_readADC
  3588                           
  3589                           ;main.c: 461: if(ADRES <= 0x250){
  3590  000CC0  0E51               	movlw	81
  3591  000CC2  5CC3               	subwf	4035,w,c	;volatile
  3592  000CC4  0E02               	movlw	2
  3593  000CC6  58C4               	subwfb	4036,w,c	;volatile
  3594  000CC8  B0D8               	btfsc	status,0,c
  3595  000CCA  D020               	goto	l4564
  3596                           
  3597                           ;main.c: 462: prevSodaLoad = seconds;
  3598  000CCC  C0B5  F098         	movff	_seconds,main@prevSodaLoad
  3599  000CD0  C0B6  F099         	movff	_seconds+1,main@prevSodaLoad+1
  3600                           
  3601                           ;main.c: 463: if (!sodaSort){
  3602  000CD4  0100               	movlb	0	; () banked
  3603  000CD6  519C               	movf	main@sodaSort& (0+255),w,b
  3604  000CD8  0100               	movlb	0	; () banked
  3605  000CDA  119D               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3606  000CDC  A4D8               	btfss	status,2,c
  3607  000CDE  D016               	goto	l4564
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;main.c: 464: sodaSort = 1;
  3611  000CE0  0E00               	movlw	0
  3612  000CE2  0100               	movlb	0	; () banked
  3613  000CE4  6F9D               	movwf	(main@sodaSort+1)& (0+255),b
  3614  000CE6  0E01               	movlw	1
  3615  000CE8  6F9C               	movwf	main@sodaSort& (0+255),b
  3616                           
  3617                           ;main.c: 465: sodaSteps = 0;
  3618  000CEA  0E00               	movlw	0
  3619  000CEC  0100               	movlb	0	; () banked
  3620  000CEE  6FB2               	movwf	(_sodaSteps+1)& (0+255),b
  3621  000CF0  0E00               	movlw	0
  3622  000CF2  6FB1               	movwf	_sodaSteps& (0+255),b
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;main.c: 466: _delay((unsigned long)((150)*(32000000/4000.0)));
  3626  000CF4  0E07               	movlw	7
  3627  000CF6  6E4D               	movwf	(??_main+1)& (0+255),c
  3628  000CF8  0E17               	movlw	23
  3629  000CFA  6E4C               	movwf	??_main& (0+255),c
  3630  000CFC  0E6A               	movlw	106
  3631  000CFE                     u5347:
  3632  000CFE  2EE8               	decfsz	wreg,f,c
  3633  000D00  D7FE               	bra	u5347
  3634  000D02  2E4C               	decfsz	??_main& (0+255),f,c
  3635  000D04  D7FC               	bra	u5347
  3636  000D06  2E4D               	decfsz	(??_main+1)& (0+255),f,c
  3637  000D08  D7FA               	bra	u5347
  3638  000D0A  D000               	nop2	
  3639  000D0C                     l4564:
  3640                           
  3641                           ;main.c: 467: }
  3642                           ;main.c: 468: }
  3643                           ;main.c: 470: printf("%x %d", ADRES, sodaSteps);
  3644  000D0C  0EEC               	movlw	low STR_25
  3645  000D0E  6E28               	movwf	printf@f,c
  3646  000D10  0EFF               	movlw	high STR_25
  3647  000D12  6E29               	movwf	printf@f+1,c
  3648  000D14  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3649  000D18  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3650  000D1C  C0B1  F02C         	movff	_sodaSteps,?_printf+4
  3651  000D20  C0B2  F02D         	movff	_sodaSteps+1,?_printf+5
  3652  000D24  EC9B  F008         	call	_printf	;wreg free
  3653                           
  3654                           ;main.c: 472: if (sodaSort){
  3655  000D28  0100               	movlb	0	; () banked
  3656  000D2A  519C               	movf	main@sodaSort& (0+255),w,b
  3657  000D2C  0100               	movlb	0	; () banked
  3658  000D2E  119D               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3659  000D30  B4D8               	btfsc	status,2,c
  3660  000D32  D155               	goto	l4666
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;main.c: 473: if(sodaSteps < 48){
  3664  000D34  0100               	movlb	0	; () banked
  3665  000D36  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3666  000D38  D152               	goto	l4666
  3667  000D3A  0100               	movlb	0	; () banked
  3668  000D3C  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3669  000D3E  E105               	bnz	l4572
  3670  000D40  0E30               	movlw	48
  3671  000D42  0100               	movlb	0	; () banked
  3672  000D44  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3673  000D46  A0D8               	btfss	status,0,c
  3674  000D48  D14A               	goto	l4666
  3675  000D4A                     l4572:
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 477: else if (sodaSteps < (48+44)){
  3679  000D4A  0100               	movlb	0	; () banked
  3680  000D4C  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3681  000D4E  D008               	goto	l4574
  3682  000D50  0100               	movlb	0	; () banked
  3683  000D52  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3684  000D54  E109               	bnz	l4576
  3685  000D56  0E5C               	movlw	92
  3686  000D58  0100               	movlb	0	; () banked
  3687  000D5A  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3688  000D5C  B0D8               	btfsc	status,0,c
  3689  000D5E  D004               	goto	l4576
  3690  000D60                     l4574:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;main.c: 478: S3mode = 1;
  3694  000D60  0E00               	movlw	0
  3695  000D62  6E66               	movwf	_S3mode+1,c
  3696  000D64  0E01               	movlw	1
  3697  000D66  D0D3               	goto	L8
  3698  000D68                     l4576:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;main.c: 481: else if (sodaSteps < (48+44+16)){
  3702  000D68  0100               	movlb	0	; () banked
  3703  000D6A  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3704  000D6C  D008               	goto	l4578
  3705  000D6E  0100               	movlb	0	; () banked
  3706  000D70  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3707  000D72  E10D               	bnz	l4580
  3708  000D74  0E6C               	movlw	108
  3709  000D76  0100               	movlb	0	; () banked
  3710  000D78  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3711  000D7A  B0D8               	btfsc	status,0,c
  3712  000D7C  D008               	goto	l4580
  3713  000D7E                     l4578:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;main.c: 482: S3mode = 4;
  3717  000D7E  0E00               	movlw	0
  3718  000D80  6E66               	movwf	_S3mode+1,c
  3719  000D82  0E04               	movlw	4
  3720  000D84  6E65               	movwf	_S3mode,c
  3721                           
  3722                           ;main.c: 483: S2mode = 1;
  3723  000D86  0E00               	movlw	0
  3724  000D88  6E68               	movwf	_S2mode+1,c
  3725  000D8A  0E01               	movlw	1
  3726  000D8C  D060               	goto	L6
  3727  000D8E                     l4580:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;main.c: 485: else if (sodaSteps < (48+44+16+12)){
  3731  000D8E  0100               	movlb	0	; () banked
  3732  000D90  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3733  000D92  D008               	goto	l4582
  3734  000D94  0100               	movlb	0	; () banked
  3735  000D96  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3736  000D98  E122               	bnz	l4592
  3737  000D9A  0E78               	movlw	120
  3738  000D9C  0100               	movlb	0	; () banked
  3739  000D9E  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3740  000DA0  B0D8               	btfsc	status,0,c
  3741  000DA2  D01D               	goto	l4592
  3742  000DA4                     l4582:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;main.c: 486: S2mode = 4;
  3746  000DA4  0E00               	movlw	0
  3747  000DA6  6E68               	movwf	_S2mode+1,c
  3748  000DA8  0E04               	movlw	4
  3749  000DAA  6E67               	movwf	_S2mode,c
  3750                           
  3751                           ;main.c: 487: S3mode = 4;
  3752  000DAC  0E00               	movlw	0
  3753  000DAE  6E66               	movwf	_S3mode+1,c
  3754  000DB0  0E04               	movlw	4
  3755  000DB2  6E65               	movwf	_S3mode,c
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;main.c: 488: readADC(3);
  3759  000DB4  0E03               	movlw	3
  3760  000DB6  EC65  F013         	call	_readADC
  3761                           
  3762                           ;main.c: 489: if(ADRESH<=1){tabState = 1;}
  3763  000DBA  0E02               	movlw	2
  3764  000DBC  60C4               	cpfslt	4036,c	;volatile
  3765  000DBE  D005               	goto	l4590
  3766  000DC0  0E00               	movlw	0
  3767  000DC2  0100               	movlb	0	; () banked
  3768  000DC4  6FA3               	movwf	(main@tabState+1)& (0+255),b
  3769  000DC6  0E01               	movlw	1
  3770  000DC8  6FA2               	movwf	main@tabState& (0+255),b
  3771  000DCA                     l4590:
  3772                           
  3773                           ;main.c: 490: printf("%x",ADRESH);
  3774  000DCA  0EFB               	movlw	low (STR_26+1)
  3775  000DCC  6E28               	movwf	printf@f,c
  3776  000DCE  0EFF               	movlw	high (STR_26+1)
  3777  000DD0  6E29               	movwf	printf@f+1,c
  3778  000DD2  CFC4 F02A          	movff	4036,?_printf+2	;volatile
  3779  000DD6  6A2B               	clrf	?_printf+3,c
  3780  000DD8  EC9B  F008         	call	_printf	;wreg free
  3781                           
  3782                           ;main.c: 491: }
  3783  000DDC  D104               	goto	l4668
  3784  000DDE                     l4592:
  3785                           
  3786                           ;main.c: 492: else if (sodaSteps < (48+44+16+12+16)){
  3787  000DDE  0100               	movlb	0	; () banked
  3788  000DE0  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3789  000DE2  D008               	goto	l4594
  3790  000DE4  0100               	movlb	0	; () banked
  3791  000DE6  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3792  000DE8  E10E               	bnz	l4596
  3793  000DEA  0E88               	movlw	136
  3794  000DEC  0100               	movlb	0	; () banked
  3795  000DEE  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3796  000DF0  B0D8               	btfsc	status,0,c
  3797  000DF2  D009               	goto	l4596
  3798  000DF4                     l4594:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;main.c: 493: S2mode = 2;
  3802  000DF4  0E00               	movlw	0
  3803  000DF6  6E68               	movwf	_S2mode+1,c
  3804  000DF8  0E02               	movlw	2
  3805  000DFA  6E67               	movwf	_S2mode,c
  3806                           
  3807                           ;main.c: 494: S3mode = 4;
  3808  000DFC  0E00               	movlw	0
  3809  000DFE  6E66               	movwf	_S3mode+1,c
  3810  000E00  0E04               	movlw	4
  3811  000E02  6E65               	movwf	_S3mode,c
  3812                           
  3813                           ;main.c: 495: }
  3814  000E04  D0F0               	goto	l4668
  3815  000E06                     l4596:
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;main.c: 496: else if (tabState == 1){
  3819  000E06  0100               	movlb	0	; () banked
  3820  000E08  05A2               	decf	main@tabState& (0+255),w,b
  3821  000E0A  0100               	movlb	0	; () banked
  3822  000E0C  11A3               	iorwf	(main@tabState+1)& (0+255),w,b
  3823  000E0E  A4D8               	btfss	status,2,c
  3824  000E10  D053               	goto	l4622
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;main.c: 497: if(sodaSteps < (48+44+16+12+16+30)){
  3828  000E12  0100               	movlb	0	; () banked
  3829  000E14  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3830  000E16  D008               	goto	l4600
  3831  000E18  0100               	movlb	0	; () banked
  3832  000E1A  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3833  000E1C  E109               	bnz	l4602
  3834  000E1E  0EA6               	movlw	166
  3835  000E20  0100               	movlb	0	; () banked
  3836  000E22  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3837  000E24  B0D8               	btfsc	status,0,c
  3838  000E26  D004               	goto	l4602
  3839  000E28                     l4600:
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;main.c: 498: S3mode = 1;
  3843  000E28  0E00               	movlw	0
  3844  000E2A  6E66               	movwf	_S3mode+1,c
  3845  000E2C  0E01               	movlw	1
  3846  000E2E  D058               	goto	L7
  3847  000E30                     l4602:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;main.c: 502: else if(sodaSteps < (48+44+16+12+16+30+57)){
  3851  000E30  0100               	movlb	0	; () banked
  3852  000E32  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3853  000E34  D008               	goto	l4604
  3854  000E36  0100               	movlb	0	; () banked
  3855  000E38  51B2               	movf	(_sodaSteps+1)& (0+255),w,b
  3856  000E3A  E10B               	bnz	l4606
  3857  000E3C  0EDF               	movlw	223
  3858  000E3E  0100               	movlb	0	; () banked
  3859  000E40  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3860  000E42  B0D8               	btfsc	status,0,c
  3861  000E44  D006               	goto	l4606
  3862  000E46                     l4604:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 503: S3mode = 2;
  3866  000E46  0E00               	movlw	0
  3867  000E48  6E66               	movwf	_S3mode+1,c
  3868  000E4A  0E02               	movlw	2
  3869  000E4C  D060               	goto	L8
  3870  000E4E                     L6:
  3871  000E4E  6E67               	movwf	_S2mode,c
  3872                           
  3873                           ;main.c: 505: }
  3874  000E50  D0CA               	goto	l4668
  3875  000E52                     l4606:
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;main.c: 506: else {
  3879                           ;main.c: 507: S2mode = 4;
  3880  000E52  0E00               	movlw	0
  3881  000E54  6E68               	movwf	_S2mode+1,c
  3882  000E56  0E04               	movlw	4
  3883  000E58  6E67               	movwf	_S2mode,c
  3884                           
  3885                           ;main.c: 508: S3mode = 0;
  3886  000E5A  0E00               	movlw	0
  3887  000E5C  6E66               	movwf	_S3mode+1,c
  3888  000E5E  0E00               	movlw	0
  3889  000E60  6E65               	movwf	_S3mode,c
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 509: updateS3(2);
  3893  000E62  0E00               	movlw	0
  3894  000E64  6E13               	movwf	updateS3@mode+1,c
  3895  000E66  0E02               	movlw	2
  3896  000E68  6E12               	movwf	updateS3@mode,c
  3897  000E6A  EC28  F00E         	call	_updateS3	;wreg free
  3898                           
  3899                           ;main.c: 510: readADC(5);
  3900  000E6E  0E05               	movlw	5
  3901  000E70  EC65  F013         	call	_readADC
  3902                           
  3903                           ;main.c: 511: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3904  000E74  0100               	movlb	0	; () banked
  3905  000E76  51A6               	movf	main@prevSodaIR& (0+255),w,b
  3906  000E78  5CC3               	subwf	4035,w,c	;volatile
  3907  000E7A  0100               	movlb	0	; () banked
  3908  000E7C  51A7               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3909  000E7E  58C4               	subwfb	4036,w,c	;volatile
  3910  000E80  B0D8               	btfsc	status,0,c
  3911  000E82  D00B               	goto	l4618
  3912                           
  3913                           ; BSR set to: 0
  3914  000E84  0EAB               	movlw	171
  3915  000E86  5CC3               	subwf	4035,w,c	;volatile
  3916  000E88  0E03               	movlw	3
  3917  000E8A  58C4               	subwfb	4036,w,c	;volatile
  3918  000E8C  A0D8               	btfss	status,0,c
  3919  000E8E  D005               	goto	l4618
  3920                           
  3921                           ; BSR set to: 0
  3922  000E90  0E00               	movlw	0
  3923  000E92  0100               	movlb	0	; () banked
  3924  000E94  6FA3               	movwf	(main@tabState+1)& (0+255),b
  3925  000E96  0E65               	movlw	101
  3926  000E98  6FA2               	movwf	main@tabState& (0+255),b
  3927  000E9A                     l4618:
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;main.c: 512: prevSodaIR = ADRES;
  3931  000E9A  CFC3 F0A6          	movff	4035,main@prevSodaIR	;volatile
  3932  000E9E  CFC4 F0A7          	movff	4036,main@prevSodaIR+1	;volatile
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;main.c: 513: printf(" %x", ADRES);
  3936  000EA2  0EFA               	movlw	low STR_26
  3937  000EA4  6E28               	movwf	printf@f,c
  3938  000EA6  0EFF               	movlw	high STR_26
  3939  000EA8  6E29               	movwf	printf@f+1,c
  3940  000EAA  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  3941  000EAE  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  3942  000EB2  EC9B  F008         	call	_printf	;wreg free
  3943                           
  3944                           ;main.c: 514: }
  3945                           ;main.c: 515: }
  3946  000EB6  D097               	goto	l4668
  3947  000EB8                     l4622:
  3948                           
  3949                           ;main.c: 516: else if(tabState == 0){
  3950  000EB8  0100               	movlb	0	; () banked
  3951  000EBA  51A2               	movf	main@tabState& (0+255),w,b
  3952  000EBC  0100               	movlb	0	; () banked
  3953  000EBE  11A3               	iorwf	(main@tabState+1)& (0+255),w,b
  3954  000EC0  A4D8               	btfss	status,2,c
  3955  000EC2  D05D               	goto	l4648
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;main.c: 517: if(sodaSteps < (48+44+16+12+16+(44+90))){
  3959  000EC4  0100               	movlb	0	; () banked
  3960  000EC6  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  3961  000EC8  D008               	goto	l4626
  3962  000ECA  0E0E               	movlw	14
  3963  000ECC  0100               	movlb	0	; () banked
  3964  000ECE  5DB1               	subwf	_sodaSteps& (0+255),w,b
  3965  000ED0  0E01               	movlw	1
  3966  000ED2  0100               	movlb	0	; () banked
  3967  000ED4  59B2               	subwfb	(_sodaSteps+1)& (0+255),w,b
  3968  000ED6  B0D8               	btfsc	status,0,c
  3969  000ED8  D00E               	goto	l4628
  3970  000EDA                     l4626:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;main.c: 518: S3mode = 2;
  3974  000EDA  0E00               	movlw	0
  3975  000EDC  6E66               	movwf	_S3mode+1,c
  3976  000EDE  0E02               	movlw	2
  3977  000EE0                     L7:
  3978  000EE0  6E65               	movwf	_S3mode,c
  3979                           
  3980                           ;main.c: 519: S2mode = 4;
  3981  000EE2  0E00               	movlw	0
  3982  000EE4  6E68               	movwf	_S2mode+1,c
  3983  000EE6  0E04               	movlw	4
  3984  000EE8  6E67               	movwf	_S2mode,c
  3985                           
  3986                           ;main.c: 520: prevSodaLoad = 0;
  3987  000EEA  0E00               	movlw	0
  3988  000EEC  0100               	movlb	0	; () banked
  3989  000EEE  6F99               	movwf	(main@prevSodaLoad+1)& (0+255),b
  3990  000EF0  0E00               	movlw	0
  3991  000EF2  6F98               	movwf	main@prevSodaLoad& (0+255),b
  3992                           
  3993                           ;main.c: 521: }
  3994  000EF4  D078               	goto	l4668
  3995  000EF6                     l4628:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;main.c: 522: else if(sodaSteps < (48+44+16+12+16+(44+80)+65)){
  3999  000EF6  0100               	movlb	0	; () banked
  4000  000EF8  BFB2               	btfsc	(_sodaSteps+1)& (0+255),7,b
  4001  000EFA  D732               	goto	l4574
  4002  000EFC  0E45               	movlw	69
  4003  000EFE  0100               	movlb	0	; () banked
  4004  000F00  5DB1               	subwf	_sodaSteps& (0+255),w,b
  4005  000F02  0E01               	movlw	1
  4006  000F04  0100               	movlb	0	; () banked
  4007  000F06  59B2               	subwfb	(_sodaSteps+1)& (0+255),w,b
  4008  000F08  B0D8               	btfsc	status,0,c
  4009  000F0A  D006               	goto	l4632
  4010  000F0C  D729               	goto	l4574
  4011  000F0E                     L8:
  4012  000F0E  6E65               	movwf	_S3mode,c
  4013                           
  4014                           ;main.c: 524: S2mode = 4;
  4015  000F10  0E00               	movlw	0
  4016  000F12  6E68               	movwf	_S2mode+1,c
  4017  000F14  0E04               	movlw	4
  4018  000F16  D79B               	goto	L6
  4019  000F18                     l4632:
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;main.c: 526: else {
  4023                           ;main.c: 527: S3mode = 0;
  4024  000F18  0E00               	movlw	0
  4025  000F1A  6E66               	movwf	_S3mode+1,c
  4026  000F1C  0E00               	movlw	0
  4027  000F1E  6E65               	movwf	_S3mode,c
  4028                           
  4029                           ;main.c: 528: S2mode = 4;
  4030  000F20  0E00               	movlw	0
  4031  000F22  6E68               	movwf	_S2mode+1,c
  4032  000F24  0E04               	movlw	4
  4033  000F26  6E67               	movwf	_S2mode,c
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;main.c: 529: updateS3(1);
  4037  000F28  0E00               	movlw	0
  4038  000F2A  6E13               	movwf	updateS3@mode+1,c
  4039  000F2C  0E01               	movlw	1
  4040  000F2E  6E12               	movwf	updateS3@mode,c
  4041  000F30  EC28  F00E         	call	_updateS3	;wreg free
  4042                           
  4043                           ;main.c: 530: readADC(5);
  4044  000F34  0E05               	movlw	5
  4045  000F36  EC65  F013         	call	_readADC
  4046                           
  4047                           ;main.c: 531: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  4048  000F3A  0100               	movlb	0	; () banked
  4049  000F3C  51A6               	movf	main@prevSodaIR& (0+255),w,b
  4050  000F3E  5CC3               	subwf	4035,w,c	;volatile
  4051  000F40  0100               	movlb	0	; () banked
  4052  000F42  51A7               	movf	(main@prevSodaIR+1)& (0+255),w,b
  4053  000F44  58C4               	subwfb	4036,w,c	;volatile
  4054  000F46  B0D8               	btfsc	status,0,c
  4055  000F48  D00B               	goto	l4644
  4056                           
  4057                           ; BSR set to: 0
  4058  000F4A  0EAB               	movlw	171
  4059  000F4C  5CC3               	subwf	4035,w,c	;volatile
  4060  000F4E  0E03               	movlw	3
  4061  000F50  58C4               	subwfb	4036,w,c	;volatile
  4062  000F52  A0D8               	btfss	status,0,c
  4063  000F54  D005               	goto	l4644
  4064                           
  4065                           ; BSR set to: 0
  4066  000F56  0E00               	movlw	0
  4067  000F58  0100               	movlb	0	; () banked
  4068  000F5A  6FA3               	movwf	(main@tabState+1)& (0+255),b
  4069  000F5C  0E64               	movlw	100
  4070  000F5E  6FA2               	movwf	main@tabState& (0+255),b
  4071  000F60                     l4644:
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;main.c: 532: prevSodaIR = ADRES;
  4075  000F60  CFC3 F0A6          	movff	4035,main@prevSodaIR	;volatile
  4076  000F64  CFC4 F0A7          	movff	4036,main@prevSodaIR+1	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;main.c: 533: printf(" %x", ADRES);
  4080  000F68  0EFA               	movlw	low STR_26
  4081  000F6A  6E28               	movwf	printf@f,c
  4082  000F6C  0EFF               	movlw	high STR_26
  4083  000F6E  6E29               	movwf	printf@f+1,c
  4084  000F70  CFC3 F02A          	movff	4035,?_printf+2	;volatile
  4085  000F74  CFC4 F02B          	movff	4036,?_printf+3	;volatile
  4086  000F78  EC9B  F008         	call	_printf	;wreg free
  4087                           
  4088                           ;main.c: 534: }
  4089                           ;main.c: 535: }
  4090  000F7C  D034               	goto	l4668
  4091  000F7E                     l4648:
  4092                           
  4093                           ;main.c: 536: else{
  4094                           ;main.c: 537: if(tabState==101){sodaT++;}
  4095  000F7E  0E65               	movlw	101
  4096  000F80  0100               	movlb	0	; () banked
  4097  000F82  19A2               	xorwf	main@tabState& (0+255),w,b
  4098  000F84  0100               	movlb	0	; () banked
  4099  000F86  11A3               	iorwf	(main@tabState+1)& (0+255),w,b
  4100  000F88  A4D8               	btfss	status,2,c
  4101  000F8A  D004               	goto	l4652
  4102                           
  4103                           ; BSR set to: 0
  4104  000F8C  0100               	movlb	0	; () banked
  4105  000F8E  4B92               	infsnz	main@sodaT& (0+255),f,b
  4106  000F90  2B93               	incf	(main@sodaT+1)& (0+255),f,b
  4107  000F92  D00A               	goto	l4656
  4108  000F94                     l4652:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;main.c: 538: else if(tabState==10){sodaNT++;}
  4112  000F94  0E0A               	movlw	10
  4113  000F96  0100               	movlb	0	; () banked
  4114  000F98  19A2               	xorwf	main@tabState& (0+255),w,b
  4115  000F9A  0100               	movlb	0	; () banked
  4116  000F9C  11A3               	iorwf	(main@tabState+1)& (0+255),w,b
  4117  000F9E  A4D8               	btfss	status,2,c
  4118  000FA0  D003               	goto	l4656
  4119                           
  4120                           ; BSR set to: 0
  4121  000FA2  0100               	movlb	0	; () banked
  4122  000FA4  4B94               	infsnz	main@sodaNT& (0+255),f,b
  4123  000FA6  2B95               	incf	(main@sodaNT+1)& (0+255),f,b
  4124  000FA8                     l4656:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;main.c: 539: sodaSteps = 0;
  4128  000FA8  0E00               	movlw	0
  4129  000FAA  0100               	movlb	0	; () banked
  4130  000FAC  6FB2               	movwf	(_sodaSteps+1)& (0+255),b
  4131  000FAE  0E00               	movlw	0
  4132  000FB0  6FB1               	movwf	_sodaSteps& (0+255),b
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;main.c: 540: tabState = 0;
  4136  000FB2  0E00               	movlw	0
  4137  000FB4  0100               	movlb	0	; () banked
  4138  000FB6  6FA3               	movwf	(main@tabState+1)& (0+255),b
  4139  000FB8  0E00               	movlw	0
  4140  000FBA  6FA2               	movwf	main@tabState& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 541: prevSodaIR = 0;
  4144  000FBC  0E00               	movlw	0
  4145  000FBE  0100               	movlb	0	; () banked
  4146  000FC0  6FA7               	movwf	(main@prevSodaIR+1)& (0+255),b
  4147  000FC2  0E00               	movlw	0
  4148  000FC4  6FA6               	movwf	main@prevSodaIR& (0+255),b
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;main.c: 542: if (prevSodaLoad == 0) {sodaSort = 0;}
  4152  000FC6  0100               	movlb	0	; () banked
  4153  000FC8  5198               	movf	main@prevSodaLoad& (0+255),w,b
  4154  000FCA  0100               	movlb	0	; () banked
  4155  000FCC  1199               	iorwf	(main@prevSodaLoad+1)& (0+255),w,b
  4156  000FCE  A4D8               	btfss	status,2,c
  4157  000FD0  D00A               	goto	l4668
  4158                           
  4159                           ; BSR set to: 0
  4160  000FD2  0E00               	movlw	0
  4161  000FD4  0100               	movlb	0	; () banked
  4162  000FD6  6F9D               	movwf	(main@sodaSort+1)& (0+255),b
  4163  000FD8  0E00               	movlw	0
  4164  000FDA  6F9C               	movwf	main@sodaSort& (0+255),b
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;main.c: 543: }
  4168                           ;main.c: 544: }
  4169                           
  4170                           ; BSR set to: 0
  4171                           
  4172                           ; BSR set to: 0
  4173                           
  4174                           ; BSR set to: 0
  4175                           
  4176                           ; BSR set to: 0
  4177                           
  4178                           ; BSR set to: 0
  4179                           
  4180                           ; BSR set to: 0
  4181                           
  4182                           ; BSR set to: 0
  4183  000FDC  D004               	goto	l4668
  4184  000FDE                     l4666:
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;main.c: 545: else{
  4188                           ;main.c: 546: S3mode = 3;
  4189  000FDE  0E00               	movlw	0
  4190  000FE0  6E66               	movwf	_S3mode+1,c
  4191  000FE2  0E03               	movlw	3
  4192  000FE4  D794               	goto	L8
  4193  000FE6                     l4668:
  4194                           
  4195                           ;main.c: 548: }
  4196                           ;main.c: 551: keyinterrupt();
  4197  000FE6  EC86  F013         	call	_keyinterrupt	;wreg free
  4198                           
  4199                           ;main.c: 552: if ( keypress!=(0)){
  4200  000FEA  0100               	movlb	0	; () banked
  4201  000FEC  51B7               	movf	_keypress& (0+255),w,b	;volatile
  4202  000FEE  B4D8               	btfsc	status,2,c
  4203  000FF0  EF46  F000         	goto	l4042
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;main.c: 553: standby = 1;
  4207  000FF4  0E00               	movlw	0
  4208  000FF6  0100               	movlb	0	; () banked
  4209  000FF8  6FA1               	movwf	(main@standby+1)& (0+255),b
  4210  000FFA  0E01               	movlw	1
  4211  000FFC  6FA0               	movwf	main@standby& (0+255),b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;main.c: 554: PWM2off();
  4215  000FFE  ECB6  F013         	call	_PWM2off	;wreg free
  4216                           
  4217                           ;main.c: 555: PWM1off();
  4218  001002  ECBB  F013         	call	_PWM1off	;wreg free
  4219                           
  4220                           ;main.c: 556: S1mode = 0;
  4221  001006  0E00               	movlw	0
  4222  001008  6E6A               	movwf	_S1mode+1,c
  4223  00100A  0E00               	movlw	0
  4224  00100C  6E69               	movwf	_S1mode,c
  4225                           
  4226                           ;main.c: 557: S2mode = 0;
  4227  00100E  0E00               	movlw	0
  4228  001010  6E68               	movwf	_S2mode+1,c
  4229  001012  0E00               	movlw	0
  4230  001014  6E67               	movwf	_S2mode,c
  4231                           
  4232                           ;main.c: 558: S3mode = 0;
  4233  001016  0E00               	movlw	0
  4234  001018  6E66               	movwf	_S3mode+1,c
  4235  00101A  0E00               	movlw	0
  4236  00101C  6E65               	movwf	_S3mode,c
  4237                           
  4238                           ;main.c: 559: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4239  00101E  0E01               	movlw	1
  4240  001020  ECAB  F013         	call	_lcdInst
  4241  001024  0E34               	movlw	52
  4242  001026  6E4C               	movwf	??_main& (0+255),c
  4243  001028  0EF2               	movlw	242
  4244  00102A                     u5357:
  4245  00102A  2EE8               	decfsz	wreg,f,c
  4246  00102C  D7FE               	bra	u5357
  4247  00102E  2E4C               	decfsz	??_main& (0+255),f,c
  4248  001030  D7FC               	bra	u5357
  4249                           
  4250                           ;main.c: 560: printf("%x", ee);
  4251  001032  0EFB               	movlw	low (STR_26+1)
  4252  001034  6E28               	movwf	printf@f,c
  4253  001036  0EFF               	movlw	high (STR_26+1)
  4254  001038  6E29               	movwf	printf@f+1,c
  4255  00103A  C08A  F02A         	movff	main@ee,?_printf+2
  4256  00103E  C08B  F02B         	movff	main@ee+1,?_printf+3
  4257  001042  EC9B  F008         	call	_printf	;wreg free
  4258                           
  4259                           ;main.c: 561: keycheck();
  4260  001046  EC91  F013         	call	_keycheck	;wreg free
  4261                           
  4262                           ;main.c: 563: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  4263  00104A  C0B5  F016         	movff	_seconds,addRun@dur
  4264  00104E  C0B6  F017         	movff	_seconds+1,addRun@dur+1
  4265  001052  C0B0  F018         	movff	_time+6,addRun@year
  4266  001056  6A19               	clrf	addRun@year+1,c
  4267  001058  C0AF  F01A         	movff	_time+5,addRun@month
  4268  00105C  6A1B               	clrf	addRun@month+1,c
  4269  00105E  C0AE  F01C         	movff	_time+4,addRun@date
  4270  001062  6A1D               	clrf	addRun@date+1,c
  4271  001064  C0AC  F01E         	movff	_time+2,addRun@hours
  4272  001068  6A1F               	clrf	addRun@hours+1,c
  4273  00106A  C0AB  F020         	movff	_time+1,addRun@mins
  4274  00106E  6A21               	clrf	addRun@mins+1,c
  4275  001070  C0AA  F022         	movff	_time,addRun@secs
  4276  001074  6A23               	clrf	addRun@secs+1,c
  4277  001076  C092  F024         	movff	main@sodaT,addRun@sodaT
  4278  00107A  C093  F025         	movff	main@sodaT+1,addRun@sodaT+1
  4279  00107E  C094  F026         	movff	main@sodaNT,addRun@sodaNT
  4280  001082  C095  F027         	movff	main@sodaNT+1,addRun@sodaNT+1
  4281  001086  C08E  F028         	movff	main@soupL,addRun@soupL
  4282  00108A  C08F  F029         	movff	main@soupL+1,addRun@soupL+1
  4283  00108E  C090  F02A         	movff	main@soupNL,addRun@soupNL
  4284  001092  C091  F02B         	movff	main@soupNL+1,addRun@soupNL+1
  4285  001096  EC1A  F010         	call	_addRun	;wreg free
  4286                           
  4287                           ;main.c: 565: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4288  00109A  0E01               	movlw	1
  4289  00109C  ECAB  F013         	call	_lcdInst
  4290  0010A0  0E34               	movlw	52
  4291  0010A2  6E4C               	movwf	??_main& (0+255),c
  4292  0010A4  0EF2               	movlw	242
  4293  0010A6                     u5367:
  4294  0010A6  2EE8               	decfsz	wreg,f,c
  4295  0010A8  D7FE               	bra	u5367
  4296  0010AA  2E4C               	decfsz	??_main& (0+255),f,c
  4297  0010AC  D7FC               	bra	u5367
  4298                           
  4299                           ;main.c: 566: printf("Sort done! A:No");
  4300  0010AE  0EFF               	movlw	low STR_34
  4301  0010B0  6E28               	movwf	printf@f,c
  4302  0010B2  0EFE               	movlw	high STR_34
  4303  0010B4  6E29               	movwf	printf@f+1,c
  4304  0010B6  EC9B  F008         	call	_printf	;wreg free
  4305                           
  4306                           ;main.c: 567: lcdInst(0b11000000);;
  4307  0010BA  0EC0               	movlw	192
  4308  0010BC  ECAB  F013         	call	_lcdInst
  4309                           
  4310                           ;main.c: 568: printf("View Logs? B:Yes");
  4311  0010C0  0E8E               	movlw	low STR_35
  4312  0010C2  6E28               	movwf	printf@f,c
  4313  0010C4  0EFE               	movlw	high STR_35
  4314  0010C6  6E29               	movwf	printf@f+1,c
  4315  0010C8  EC9B  F008         	call	_printf	;wreg free
  4316                           
  4317                           ;main.c: 569: keycheck();
  4318  0010CC  EC91  F013         	call	_keycheck	;wreg free
  4319                           
  4320                           ;main.c: 570: if(keypress == 7){
  4321  0010D0  0E07               	movlw	7
  4322  0010D2  0100               	movlb	0	; () banked
  4323  0010D4  19B7               	xorwf	_keypress& (0+255),w,b	;volatile
  4324  0010D6  A4D8               	btfss	status,2,c
  4325  0010D8  EF46  F000         	goto	l4042
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;main.c: 571: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4329  0010DC  0E01               	movlw	1
  4330  0010DE  ECAB  F013         	call	_lcdInst
  4331  0010E2  0E34               	movlw	52
  4332  0010E4  6E4C               	movwf	??_main& (0+255),c
  4333  0010E6  0EF2               	movlw	242
  4334  0010E8                     u5377:
  4335  0010E8  2EE8               	decfsz	wreg,f,c
  4336  0010EA  D7FE               	bra	u5377
  4337  0010EC  2E4C               	decfsz	??_main& (0+255),f,c
  4338  0010EE  D7FC               	bra	u5377
  4339                           
  4340                           ;main.c: 572: printf("%ld %d %d", startTime, seconds, eepromRead(0));
  4341  0010F0  0EC0               	movlw	low STR_36
  4342  0010F2  6E28               	movwf	printf@f,c
  4343  0010F4  0EFF               	movlw	high STR_36
  4344  0010F6  6E29               	movwf	printf@f+1,c
  4345  0010F8  C086  F02A         	movff	main@startTime,?_printf+2
  4346  0010FC  C087  F02B         	movff	main@startTime+1,?_printf+3
  4347  001100  C088  F02C         	movff	main@startTime+2,?_printf+4
  4348  001104  C089  F02D         	movff	main@startTime+3,?_printf+5
  4349  001108  C0B5  F02E         	movff	_seconds,?_printf+6
  4350  00110C  C0B6  F02F         	movff	_seconds+1,?_printf+7
  4351  001110  0E00               	movlw	0
  4352  001112  EC18  F013         	call	_eepromRead
  4353  001116  6E30               	movwf	?_printf+8,c
  4354  001118  6A31               	clrf	?_printf+9,c
  4355  00111A  BE30               	btfsc	?_printf+8,7,c
  4356  00111C  0631               	decf	?_printf+9,f,c
  4357  00111E  EC9B  F008         	call	_printf	;wreg free
  4358                           
  4359                           ;main.c: 573: keycheck();
  4360  001122  EC91  F013         	call	_keycheck	;wreg free
  4361                           
  4362                           ;main.c: 574: displayLog(1);
  4363  001126  0E00               	movlw	0
  4364  001128  6E44               	movwf	displayLog@run+1,c
  4365  00112A  0E01               	movlw	1
  4366  00112C  6E43               	movwf	displayLog@run,c
  4367  00112E  ECA4  F00A         	call	_displayLog	;wreg free
  4368  001132  EF46  F000         	goto	l4042
  4369  001136                     __end_of_main:
  4370                           	opt stack 0
  4371                           tblptru	equ	0xFF8
  4372                           prodh	equ	0xFF4
  4373                           prodl	equ	0xFF3
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _updateTime *****************
  4379 ;; Defined at:
  4380 ;;		line 89 in file "I2C.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  j               1   20[COMRAM] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;Total ram usage:        1 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    4
  4401 ;; This function calls:
  4402 ;;		_I2C_Master_Read
  4403 ;;		_I2C_Master_Start
  4404 ;;		_I2C_Master_Stop
  4405 ;;		_I2C_Master_Write
  4406 ;; This function is called by:
  4407 ;;		_main
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text1
  4412  00233E                     __ptext1:
  4413                           	opt stack 0
  4414  00233E                     _updateTime:
  4415                           	opt stack 26
  4416                           
  4417                           ;I2C.c: 91: I2C_Master_Start();
  4418                           
  4419                           ;incstack = 0
  4420  00233E  ECC4  F013         	call	_I2C_Master_Start	;wreg free
  4421                           
  4422                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  4423  002342  0E00               	movlw	0
  4424  002344  6E14               	movwf	I2C_Master_Write@d+1,c
  4425  002346  0ED0               	movlw	208
  4426  002348  6E13               	movwf	I2C_Master_Write@d,c
  4427  00234A  ECB1  F013         	call	_I2C_Master_Write	;wreg free
  4428                           
  4429                           ;I2C.c: 93: I2C_Master_Write(0x00);
  4430  00234E  0E00               	movlw	0
  4431  002350  6E14               	movwf	I2C_Master_Write@d+1,c
  4432  002352  0E00               	movlw	0
  4433  002354  6E13               	movwf	I2C_Master_Write@d,c
  4434  002356  ECB1  F013         	call	_I2C_Master_Write	;wreg free
  4435                           
  4436                           ;I2C.c: 94: I2C_Master_Stop();
  4437  00235A  ECC0  F013         	call	_I2C_Master_Stop	;wreg free
  4438                           
  4439                           ;I2C.c: 97: I2C_Master_Start();
  4440  00235E  ECC4  F013         	call	_I2C_Master_Start	;wreg free
  4441                           
  4442                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  4443  002362  0E00               	movlw	0
  4444  002364  6E14               	movwf	I2C_Master_Write@d+1,c
  4445  002366  0ED1               	movlw	209
  4446  002368  6E13               	movwf	I2C_Master_Write@d,c
  4447  00236A  ECB1  F013         	call	_I2C_Master_Write	;wreg free
  4448                           
  4449                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  4450  00236E  0E00               	movlw	0
  4451  002370  6E15               	movwf	updateTime@j,c
  4452  002372                     l3636:
  4453  002372  0E05               	movlw	5
  4454  002374  6415               	cpfsgt	updateTime@j,c
  4455  002376  D001               	goto	l3640
  4456  002378  D00E               	goto	l3646
  4457  00237A                     l3640:
  4458                           
  4459                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  4460  00237A  5015               	movf	updateTime@j,w,c
  4461  00237C  0D01               	mullw	1
  4462  00237E  0EAA               	movlw	low _time
  4463  002380  24F3               	addwf	prodl,w,c
  4464  002382  6ED9               	movwf	fsr2l,c
  4465  002384  0E00               	movlw	high _time
  4466  002386  20F4               	addwfc	prodh,w,c
  4467  002388  6EDA               	movwf	fsr2h,c
  4468  00238A  0E01               	movlw	1
  4469  00238C  EC3F  F013         	call	_I2C_Master_Read
  4470  002390  6EDF               	movwf	indf2,c
  4471  002392  2A15               	incf	updateTime@j,f,c
  4472  002394  D7EE               	goto	l3636
  4473  002396                     l3646:
  4474                           
  4475                           ;I2C.c: 101: }
  4476                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  4477  002396  0E00               	movlw	0
  4478  002398  EC3F  F013         	call	_I2C_Master_Read
  4479  00239C  0100               	movlb	0	; () banked
  4480  00239E  6FB0               	movwf	(_time+6)& (0+255),b
  4481                           
  4482                           ;I2C.c: 103: I2C_Master_Stop();
  4483  0023A0  ECC0  F013         	call	_I2C_Master_Stop	;wreg free
  4484  0023A4  0012               	return		;funcret
  4485  0023A6                     __end_of_updateTime:
  4486                           	opt stack 0
  4487                           tblptru	equ	0xFF8
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           postinc0	equ	0xFEE
  4491                           wreg	equ	0xFE8
  4492                           indf2	equ	0xFDF
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function _I2C_Master_Write *****************
  4498 ;; Defined at:
  4499 ;;		line 54 in file "I2C.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  d               2   18[COMRAM] unsigned int 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;		None
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  1    wreg      void 
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0, cstack
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;Total ram usage:        2 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    3
  4520 ;; This function calls:
  4521 ;;		_I2C_Master_Wait
  4522 ;; This function is called by:
  4523 ;;		_updateTime
  4524 ;;		_set_time
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text2
  4529  002762                     __ptext2:
  4530                           	opt stack 0
  4531  002762                     _I2C_Master_Write:
  4532                           	opt stack 26
  4533                           
  4534                           ;I2C.c: 56: I2C_Master_Wait();
  4535                           
  4536                           ;incstack = 0
  4537  002762  EC9C  F013         	call	_I2C_Master_Wait	;wreg free
  4538                           
  4539                           ;I2C.c: 57: SSPBUF = d;
  4540  002766  C013  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4541  00276A  0012               	return		;funcret
  4542  00276C                     __end_of_I2C_Master_Write:
  4543                           	opt stack 0
  4544                           tblptru	equ	0xFF8
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           indf2	equ	0xFDF
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function _I2C_Master_Stop *****************
  4555 ;; Defined at:
  4556 ;;		line 48 in file "I2C.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    3
  4577 ;; This function calls:
  4578 ;;		_I2C_Master_Wait
  4579 ;; This function is called by:
  4580 ;;		_updateTime
  4581 ;;		_set_time
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text3
  4586  002780                     __ptext3:
  4587                           	opt stack 0
  4588  002780                     _I2C_Master_Stop:
  4589                           	opt stack 26
  4590                           
  4591                           ;I2C.c: 50: I2C_Master_Wait();
  4592                           
  4593                           ;incstack = 0
  4594  002780  EC9C  F013         	call	_I2C_Master_Wait	;wreg free
  4595                           
  4596                           ;I2C.c: 51: PEN = 1;
  4597  002784  84C5               	bsf	4037,2,c	;volatile
  4598  002786  0012               	return		;funcret
  4599  002788                     __end_of_I2C_Master_Stop:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           indf2	equ	0xFDF
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _I2C_Master_Start *****************
  4612 ;; Defined at:
  4613 ;;		line 36 in file "I2C.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;Total ram usage:        0 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    3
  4634 ;; This function calls:
  4635 ;;		_I2C_Master_Wait
  4636 ;; This function is called by:
  4637 ;;		_updateTime
  4638 ;;		_set_time
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text4
  4643  002788                     __ptext4:
  4644                           	opt stack 0
  4645  002788                     _I2C_Master_Start:
  4646                           	opt stack 26
  4647                           
  4648                           ;I2C.c: 38: I2C_Master_Wait();
  4649                           
  4650                           ;incstack = 0
  4651  002788  EC9C  F013         	call	_I2C_Master_Wait	;wreg free
  4652                           
  4653                           ;I2C.c: 39: SEN = 1;
  4654  00278C  80C5               	bsf	4037,0,c	;volatile
  4655  00278E  0012               	return		;funcret
  4656  002790                     __end_of_I2C_Master_Start:
  4657                           	opt stack 0
  4658                           tblptru	equ	0xFF8
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           indf2	equ	0xFDF
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _I2C_Master_Read *****************
  4669 ;; Defined at:
  4670 ;;		line 60 in file "I2C.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  a               1    wreg     unsigned char 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  a               1   18[COMRAM] unsigned char 
  4675 ;;  temp            1   19[COMRAM] unsigned char 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  1    wreg      unsigned char 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;Total ram usage:        2 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    3
  4692 ;; This function calls:
  4693 ;;		_I2C_Master_Wait
  4694 ;; This function is called by:
  4695 ;;		_updateTime
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text5
  4700  00267E                     __ptext5:
  4701                           	opt stack 0
  4702  00267E                     _I2C_Master_Read:
  4703                           	opt stack 26
  4704                           
  4705                           ;incstack = 0
  4706                           ;I2C_Master_Read@a stored from wreg
  4707  00267E  6E13               	movwf	I2C_Master_Read@a,c
  4708                           
  4709                           ;I2C.c: 62: unsigned char temp;
  4710                           ;I2C.c: 63: I2C_Master_Wait();
  4711  002680  EC9C  F013         	call	_I2C_Master_Wait	;wreg free
  4712                           
  4713                           ;I2C.c: 64: RCEN = 1;
  4714  002684  86C5               	bsf	4037,3,c	;volatile
  4715                           
  4716                           ;I2C.c: 65: I2C_Master_Wait();
  4717  002686  EC9C  F013         	call	_I2C_Master_Wait	;wreg free
  4718                           
  4719                           ;I2C.c: 66: temp = SSPBUF;
  4720  00268A  CFC9 F014          	movff	4041,I2C_Master_Read@temp	;volatile
  4721                           
  4722                           ;I2C.c: 67: I2C_Master_Wait();
  4723  00268E  EC9C  F013         	call	_I2C_Master_Wait	;wreg free
  4724                           
  4725                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4726  002692  5013               	movf	I2C_Master_Read@a,w,c
  4727  002694  A4D8               	btfss	status,2,c
  4728  002696  D002               	goto	u2990
  4729  002698  8AC5               	bsf	4037,5,c	;volatile
  4730  00269A  D001               	goto	l3358
  4731  00269C                     u2990:
  4732  00269C  9AC5               	bcf	4037,5,c	;volatile
  4733  00269E                     l3358:
  4734                           
  4735                           ;I2C.c: 69: ACKEN = 1;
  4736  00269E  88C5               	bsf	4037,4,c	;volatile
  4737                           
  4738                           ;I2C.c: 70: return temp;
  4739  0026A0  5014               	movf	I2C_Master_Read@temp,w,c
  4740  0026A2  0012               	return	
  4741  0026A4                     __end_of_I2C_Master_Read:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           indf2	equ	0xFDF
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _I2C_Master_Wait *****************
  4754 ;; Defined at:
  4755 ;;		line 31 in file "I2C.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;Total ram usage:        1 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    2
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_I2C_Master_Start
  4780 ;;		_I2C_Master_Stop
  4781 ;;		_I2C_Master_Write
  4782 ;;		_I2C_Master_Read
  4783 ;;		_I2C_Master_RepeatedStart
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text6
  4788  002738                     __ptext6:
  4789                           	opt stack 0
  4790  002738                     _I2C_Master_Wait:
  4791                           	opt stack 26
  4792  002738                     l353:
  4793  002738  B4C7               	btfsc	4039,2,c	;volatile
  4794  00273A  D7FE               	goto	l353
  4795  00273C  CFC5 F012          	movff	4037,??_I2C_Master_Wait	;volatile
  4796  002740  0E1F               	movlw	31
  4797  002742  1612               	andwf	??_I2C_Master_Wait,f,c
  4798  002744  B4D8               	btfsc	status,2,c
  4799  002746  0012               	return	
  4800  002748  D7F7               	goto	l353
  4801  00274A                     __end_of_I2C_Master_Wait:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           postinc0	equ	0xFEE
  4807                           wreg	equ	0xFE8
  4808                           indf2	equ	0xFDF
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _updateS3 *****************
  4814 ;; Defined at:
  4815 ;;		line 157 in file "motors.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  mode            2   17[COMRAM] int 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;Total ram usage:        3 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		Nothing
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text7
  4844  001C50                     __ptext7:
  4845                           	opt stack 0
  4846  001C50                     _updateS3:
  4847                           	opt stack 28
  4848                           
  4849                           ;motors.c: 158: _delay((unsigned long)((5)*(32000000/4000.0)));
  4850                           
  4851                           ;incstack = 0
  4852  001C50  0E34               	movlw	52
  4853  001C52  6E14               	movwf	??_updateS3& (0+255),c
  4854  001C54  0EF2               	movlw	242
  4855  001C56                     u5387:
  4856  001C56  2EE8               	decfsz	wreg,f,c
  4857  001C58  D7FE               	bra	u5387
  4858  001C5A  2E14               	decfsz	??_updateS3& (0+255),f,c
  4859  001C5C  D7FC               	bra	u5387
  4860                           
  4861                           ;motors.c: 160: if(mode == 0){
  4862  001C5E  5012               	movf	updateS3@mode,w,c
  4863  001C60  1013               	iorwf	updateS3@mode+1,w,c
  4864  001C62  A4D8               	btfss	status,2,c
  4865  001C64  D005               	goto	l3548
  4866                           
  4867                           ;motors.c: 161: LATEbits.LATE2 = 0;
  4868  001C66  948D               	bcf	3981,2,c	;volatile
  4869                           
  4870                           ;motors.c: 162: LATEbits.LATE1 = 0;
  4871  001C68  928D               	bcf	3981,1,c	;volatile
  4872                           
  4873                           ;motors.c: 163: LATAbits.LATA4 = 0;
  4874  001C6A  9889               	bcf	3977,4,c	;volatile
  4875                           
  4876                           ;motors.c: 164: LATDbits.LATD0 = 0;
  4877  001C6C  908C               	bcf	3980,0,c	;volatile
  4878                           
  4879                           ;motors.c: 165: }
  4880  001C6E  0012               	return	
  4881  001C70                     l3548:
  4882                           
  4883                           ;motors.c: 166: else if(mode == 4){
  4884  001C70  0E04               	movlw	4
  4885  001C72  1812               	xorwf	updateS3@mode,w,c
  4886  001C74  1013               	iorwf	updateS3@mode+1,w,c
  4887  001C76  A4D8               	btfss	status,2,c
  4888  001C78  D005               	goto	l3552
  4889                           
  4890                           ;motors.c: 167: LATEbits.LATE2 = 1;
  4891  001C7A  848D               	bsf	3981,2,c	;volatile
  4892                           
  4893                           ;motors.c: 168: LATEbits.LATE1 = 0;
  4894  001C7C  928D               	bcf	3981,1,c	;volatile
  4895                           
  4896                           ;motors.c: 169: LATAbits.LATA4 = 0;
  4897  001C7E  9889               	bcf	3977,4,c	;volatile
  4898                           
  4899                           ;motors.c: 170: LATDbits.LATD0 = 0;
  4900  001C80  908C               	bcf	3980,0,c	;volatile
  4901                           
  4902                           ;motors.c: 171: }
  4903  001C82  0012               	return	
  4904  001C84                     l3552:
  4905                           
  4906                           ;motors.c: 172: else if(mode == 3){
  4907  001C84  0E03               	movlw	3
  4908  001C86  1812               	xorwf	updateS3@mode,w,c
  4909  001C88  1013               	iorwf	updateS3@mode+1,w,c
  4910  001C8A  A4D8               	btfss	status,2,c
  4911  001C8C  D042               	goto	l3576
  4912                           
  4913                           ;motors.c: 173: t3++;
  4914  001C8E  4A57               	infsnz	_t3,f,c
  4915  001C90  2A58               	incf	_t3+1,f,c
  4916                           
  4917                           ;motors.c: 174: if (t3>8) {t3=1;}
  4918  001C92  BE58               	btfsc	_t3+1,7,c
  4919  001C94  D00A               	goto	l3560
  4920  001C96  5058               	movf	_t3+1,w,c
  4921  001C98  E104               	bnz	u3550
  4922  001C9A  0E09               	movlw	9
  4923  001C9C  5C57               	subwf	_t3,w,c
  4924  001C9E  A0D8               	btfss	status,0,c
  4925  001CA0  D004               	goto	l3560
  4926  001CA2                     u3550:
  4927  001CA2  0E00               	movlw	0
  4928  001CA4  6E58               	movwf	_t3+1,c
  4929  001CA6  0E01               	movlw	1
  4930  001CA8  6E57               	movwf	_t3,c
  4931  001CAA                     l3560:
  4932                           
  4933                           ;motors.c: 175: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  4934  001CAA  0457               	decf	_t3,w,c
  4935  001CAC  1058               	iorwf	_t3+1,w,c
  4936  001CAE  B4D8               	btfsc	status,2,c
  4937  001CB0  D005               	goto	l538
  4938  001CB2  0E08               	movlw	8
  4939  001CB4  1857               	xorwf	_t3,w,c
  4940  001CB6  1058               	iorwf	_t3+1,w,c
  4941  001CB8  A4D8               	btfss	status,2,c
  4942  001CBA  D002               	goto	l536
  4943  001CBC                     l538:
  4944  001CBC  848D               	bsf	3981,2,c	;volatile
  4945  001CBE  D001               	goto	l3564
  4946  001CC0                     l536:
  4947                           
  4948                           ;motors.c: 176: else{LATEbits.LATE2 = 0;}
  4949  001CC0  948D               	bcf	3981,2,c	;volatile
  4950  001CC2                     l3564:
  4951                           
  4952                           ;motors.c: 177: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  4953  001CC2  0E02               	movlw	2
  4954  001CC4  1857               	xorwf	_t3,w,c
  4955  001CC6  1058               	iorwf	_t3+1,w,c
  4956  001CC8  B4D8               	btfsc	status,2,c
  4957  001CCA  D005               	goto	l542
  4958  001CCC  0E07               	movlw	7
  4959  001CCE  1857               	xorwf	_t3,w,c
  4960  001CD0  1058               	iorwf	_t3+1,w,c
  4961  001CD2  A4D8               	btfss	status,2,c
  4962  001CD4  D002               	goto	l540
  4963  001CD6                     l542:
  4964  001CD6  828D               	bsf	3981,1,c	;volatile
  4965  001CD8  D001               	goto	l3568
  4966  001CDA                     l540:
  4967                           
  4968                           ;motors.c: 178: else{LATEbits.LATE1 = 0;}
  4969  001CDA  928D               	bcf	3981,1,c	;volatile
  4970  001CDC                     l3568:
  4971                           
  4972                           ;motors.c: 179: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  4973  001CDC  0E03               	movlw	3
  4974  001CDE  1857               	xorwf	_t3,w,c
  4975  001CE0  1058               	iorwf	_t3+1,w,c
  4976  001CE2  B4D8               	btfsc	status,2,c
  4977  001CE4  D005               	goto	l546
  4978  001CE6  0E06               	movlw	6
  4979  001CE8  1857               	xorwf	_t3,w,c
  4980  001CEA  1058               	iorwf	_t3+1,w,c
  4981  001CEC  A4D8               	btfss	status,2,c
  4982  001CEE  D002               	goto	l544
  4983  001CF0                     l546:
  4984  001CF0  8889               	bsf	3977,4,c	;volatile
  4985  001CF2  D001               	goto	l3572
  4986  001CF4                     l544:
  4987                           
  4988                           ;motors.c: 180: else{LATAbits.LATA4 = 0;}
  4989  001CF4  9889               	bcf	3977,4,c	;volatile
  4990  001CF6                     l3572:
  4991                           
  4992                           ;motors.c: 181: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  4993  001CF6  0E04               	movlw	4
  4994  001CF8  1857               	xorwf	_t3,w,c
  4995  001CFA  1058               	iorwf	_t3+1,w,c
  4996  001CFC  B4D8               	btfsc	status,2,c
  4997  001CFE  D005               	goto	l550
  4998  001D00  0E05               	movlw	5
  4999  001D02  1857               	xorwf	_t3,w,c
  5000  001D04  1058               	iorwf	_t3+1,w,c
  5001  001D06  A4D8               	btfss	status,2,c
  5002  001D08  D002               	goto	l548
  5003  001D0A                     l550:
  5004  001D0A  808C               	bsf	3980,0,c	;volatile
  5005  001D0C  0012               	return	
  5006  001D0E                     l548:
  5007                           
  5008                           ;motors.c: 182: else{LATDbits.LATD0 = 0;}
  5009  001D0E  908C               	bcf	3980,0,c	;volatile
  5010                           
  5011                           ;motors.c: 183: }
  5012  001D10  0012               	return	
  5013  001D12                     l3576:
  5014                           
  5015                           ;motors.c: 184: else{
  5016                           ;motors.c: 185: if(mode == 1){
  5017  001D12  0412               	decf	updateS3@mode,w,c
  5018  001D14  1013               	iorwf	updateS3@mode+1,w,c
  5019  001D16  A4D8               	btfss	status,2,c
  5020  001D18  D00E               	goto	l3584
  5021                           
  5022                           ;motors.c: 186: s3 ++;
  5023  001D1A  4A5F               	infsnz	_s3,f,c
  5024  001D1C  2A60               	incf	_s3+1,f,c
  5025                           
  5026                           ;motors.c: 187: if (s3>4) {s3=1;}
  5027  001D1E  BE60               	btfsc	_s3+1,7,c
  5028  001D20  D01D               	goto	l3592
  5029  001D22  5060               	movf	_s3+1,w,c
  5030  001D24  E104               	bnz	u3650
  5031  001D26  0E05               	movlw	5
  5032  001D28  5C5F               	subwf	_s3,w,c
  5033  001D2A  A0D8               	btfss	status,0,c
  5034  001D2C  D017               	goto	l3592
  5035  001D2E                     u3650:
  5036  001D2E  0E00               	movlw	0
  5037  001D30  6E60               	movwf	_s3+1,c
  5038  001D32  0E01               	movlw	1
  5039  001D34  D012               	goto	L10
  5040  001D36                     l3584:
  5041                           
  5042                           ;motors.c: 189: else if(mode == 2){
  5043  001D36  0E02               	movlw	2
  5044  001D38  1812               	xorwf	updateS3@mode,w,c
  5045  001D3A  1013               	iorwf	updateS3@mode+1,w,c
  5046  001D3C  A4D8               	btfss	status,2,c
  5047  001D3E  D00E               	goto	l3592
  5048                           
  5049                           ;motors.c: 190: s3 --;
  5050  001D40  065F               	decf	_s3,f,c
  5051  001D42  A0D8               	btfss	status,0,c
  5052  001D44  0660               	decf	_s3+1,f,c
  5053                           
  5054                           ;motors.c: 191: if (s3<1) {s3=4;}
  5055  001D46  BE60               	btfsc	_s3+1,7,c
  5056  001D48  D005               	goto	l3590
  5057  001D4A  5060               	movf	_s3+1,w,c
  5058  001D4C  E107               	bnz	l3592
  5059  001D4E  045F               	decf	_s3,w,c
  5060  001D50  B0D8               	btfsc	status,0,c
  5061  001D52  D004               	goto	l3592
  5062  001D54                     l3590:
  5063  001D54  0E00               	movlw	0
  5064  001D56  6E60               	movwf	_s3+1,c
  5065  001D58  0E04               	movlw	4
  5066  001D5A                     L10:
  5067  001D5A  6E5F               	movwf	_s3,c
  5068  001D5C                     l3592:
  5069                           
  5070                           ;motors.c: 192: }
  5071                           ;motors.c: 193: if (s3 == 1){LATEbits.LATE2 = 1;}
  5072  001D5C  045F               	decf	_s3,w,c
  5073  001D5E  1060               	iorwf	_s3+1,w,c
  5074  001D60  A4D8               	btfss	status,2,c
  5075  001D62  D002               	goto	l558
  5076  001D64  848D               	bsf	3981,2,c	;volatile
  5077  001D66  D001               	goto	l3596
  5078  001D68                     l558:
  5079                           
  5080                           ;motors.c: 194: else{LATEbits.LATE2 = 0;}
  5081  001D68  948D               	bcf	3981,2,c	;volatile
  5082  001D6A                     l3596:
  5083                           
  5084                           ;motors.c: 195: if (s3 == 2){LATEbits.LATE1 = 1;}
  5085  001D6A  0E02               	movlw	2
  5086  001D6C  185F               	xorwf	_s3,w,c
  5087  001D6E  1060               	iorwf	_s3+1,w,c
  5088  001D70  A4D8               	btfss	status,2,c
  5089  001D72  D002               	goto	l560
  5090  001D74  828D               	bsf	3981,1,c	;volatile
  5091  001D76  D001               	goto	l3600
  5092  001D78                     l560:
  5093                           
  5094                           ;motors.c: 196: else{LATEbits.LATE1 = 0;}
  5095  001D78  928D               	bcf	3981,1,c	;volatile
  5096  001D7A                     l3600:
  5097                           
  5098                           ;motors.c: 197: if (s3 == 3){LATAbits.LATA4 = 1;}
  5099  001D7A  0E03               	movlw	3
  5100  001D7C  185F               	xorwf	_s3,w,c
  5101  001D7E  1060               	iorwf	_s3+1,w,c
  5102  001D80  A4D8               	btfss	status,2,c
  5103  001D82  D002               	goto	l562
  5104  001D84  8889               	bsf	3977,4,c	;volatile
  5105  001D86  D001               	goto	l3604
  5106  001D88                     l562:
  5107                           
  5108                           ;motors.c: 198: else{LATAbits.LATA4 = 0;}
  5109  001D88  9889               	bcf	3977,4,c	;volatile
  5110  001D8A                     l3604:
  5111                           
  5112                           ;motors.c: 199: if (s3 == 4){LATDbits.LATD0 = 1;}
  5113  001D8A  0E04               	movlw	4
  5114  001D8C  185F               	xorwf	_s3,w,c
  5115  001D8E  1060               	iorwf	_s3+1,w,c
  5116  001D90  A4D8               	btfss	status,2,c
  5117  001D92  D002               	goto	l564
  5118  001D94  808C               	bsf	3980,0,c	;volatile
  5119  001D96  0012               	return	
  5120  001D98                     l564:
  5121                           
  5122                           ;motors.c: 200: else{LATDbits.LATD0 = 0;}
  5123  001D98  908C               	bcf	3980,0,c	;volatile
  5124  001D9A  0012               	return	
  5125  001D9C                     __end_of_updateS3:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           indf2	equ	0xFDF
  5133                           fsr2h	equ	0xFDA
  5134                           fsr2l	equ	0xFD9
  5135                           status	equ	0xFD8
  5136                           
  5137 ;; *************** function _updateS1 *****************
  5138 ;; Defined at:
  5139 ;;		line 55 in file "motors.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  mode            2   17[COMRAM] int 
  5142 ;; Auto vars:     Size  Location     Type
  5143 ;;		None
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  1    wreg      void 
  5146 ;; Registers used:
  5147 ;;		wreg, status,2, status,0
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5153 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;Total ram usage:        3 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:    2
  5160 ;; This function calls:
  5161 ;;		Nothing
  5162 ;; This function is called by:
  5163 ;;		_main
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text8
  5168  0018A4                     __ptext8:
  5169                           	opt stack 0
  5170  0018A4                     _updateS1:
  5171                           	opt stack 28
  5172                           
  5173                           ;motors.c: 56: _delay((unsigned long)((5)*(32000000/4000.0)));
  5174                           
  5175                           ;incstack = 0
  5176  0018A4  0E34               	movlw	52
  5177  0018A6  6E14               	movwf	??_updateS1& (0+255),c
  5178  0018A8  0EF2               	movlw	242
  5179  0018AA                     u5397:
  5180  0018AA  2EE8               	decfsz	wreg,f,c
  5181  0018AC  D7FE               	bra	u5397
  5182  0018AE  2E14               	decfsz	??_updateS1& (0+255),f,c
  5183  0018B0  D7FC               	bra	u5397
  5184                           
  5185                           ;motors.c: 58: if(mode == 0){
  5186  0018B2  5012               	movf	updateS1@mode,w,c
  5187  0018B4  1013               	iorwf	updateS1@mode+1,w,c
  5188  0018B6  A4D8               	btfss	status,2,c
  5189  0018B8  D005               	goto	l3388
  5190                           
  5191                           ;motors.c: 59: LATDbits.LATD1 = 0;
  5192  0018BA  928C               	bcf	3980,1,c	;volatile
  5193                           
  5194                           ;motors.c: 60: LATBbits.LATB3 = 0;
  5195  0018BC  968A               	bcf	3978,3,c	;volatile
  5196                           
  5197                           ;motors.c: 61: LATBbits.LATB2 = 0;
  5198  0018BE  948A               	bcf	3978,2,c	;volatile
  5199                           
  5200                           ;motors.c: 62: LATBbits.LATB0 = 0;
  5201  0018C0  908A               	bcf	3978,0,c	;volatile
  5202                           
  5203                           ;motors.c: 63: }
  5204  0018C2  0012               	return	
  5205  0018C4                     l3388:
  5206                           
  5207                           ;motors.c: 64: else if(mode == 3){
  5208  0018C4  0E03               	movlw	3
  5209  0018C6  1812               	xorwf	updateS1@mode,w,c
  5210  0018C8  1013               	iorwf	updateS1@mode+1,w,c
  5211  0018CA  A4D8               	btfss	status,2,c
  5212  0018CC  D049               	goto	l3414
  5213                           
  5214                           ;motors.c: 65: t++;
  5215  0018CE  4A5B               	infsnz	_t,f,c
  5216  0018D0  2A5C               	incf	_t+1,f,c
  5217                           
  5218                           ;motors.c: 66: if (t>8) {t=1;}
  5219  0018D2  BE5C               	btfsc	_t+1,7,c
  5220  0018D4  D00A               	goto	l3396
  5221  0018D6  505C               	movf	_t+1,w,c
  5222  0018D8  E104               	bnz	u3050
  5223  0018DA  0E09               	movlw	9
  5224  0018DC  5C5B               	subwf	_t,w,c
  5225  0018DE  A0D8               	btfss	status,0,c
  5226  0018E0  D004               	goto	l3396
  5227  0018E2                     u3050:
  5228  0018E2  0E00               	movlw	0
  5229  0018E4  6E5C               	movwf	_t+1,c
  5230  0018E6  0E01               	movlw	1
  5231  0018E8  6E5B               	movwf	_t,c
  5232  0018EA                     l3396:
  5233                           
  5234                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  5235  0018EA  0E34               	movlw	52
  5236  0018EC  6E14               	movwf	??_updateS1& (0+255),c
  5237  0018EE  0EF2               	movlw	242
  5238  0018F0                     u5407:
  5239  0018F0  2EE8               	decfsz	wreg,f,c
  5240  0018F2  D7FE               	bra	u5407
  5241  0018F4  2E14               	decfsz	??_updateS1& (0+255),f,c
  5242  0018F6  D7FC               	bra	u5407
  5243                           
  5244                           ;motors.c: 68: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  5245  0018F8  045B               	decf	_t,w,c
  5246  0018FA  105C               	iorwf	_t+1,w,c
  5247  0018FC  B4D8               	btfsc	status,2,c
  5248  0018FE  D005               	goto	l446
  5249  001900  0E08               	movlw	8
  5250  001902  185B               	xorwf	_t,w,c
  5251  001904  105C               	iorwf	_t+1,w,c
  5252  001906  A4D8               	btfss	status,2,c
  5253  001908  D002               	goto	l444
  5254  00190A                     l446:
  5255  00190A  828C               	bsf	3980,1,c	;volatile
  5256  00190C  D001               	goto	l3402
  5257  00190E                     l444:
  5258                           
  5259                           ;motors.c: 69: else{LATDbits.LATD1 = 0;}
  5260  00190E  928C               	bcf	3980,1,c	;volatile
  5261  001910                     l3402:
  5262                           
  5263                           ;motors.c: 70: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  5264  001910  0E02               	movlw	2
  5265  001912  185B               	xorwf	_t,w,c
  5266  001914  105C               	iorwf	_t+1,w,c
  5267  001916  B4D8               	btfsc	status,2,c
  5268  001918  D005               	goto	l450
  5269  00191A  0E07               	movlw	7
  5270  00191C  185B               	xorwf	_t,w,c
  5271  00191E  105C               	iorwf	_t+1,w,c
  5272  001920  A4D8               	btfss	status,2,c
  5273  001922  D002               	goto	l448
  5274  001924                     l450:
  5275  001924  868A               	bsf	3978,3,c	;volatile
  5276  001926  D001               	goto	l3406
  5277  001928                     l448:
  5278                           
  5279                           ;motors.c: 71: else{LATBbits.LATB3 = 0;}
  5280  001928  968A               	bcf	3978,3,c	;volatile
  5281  00192A                     l3406:
  5282                           
  5283                           ;motors.c: 72: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  5284  00192A  0E03               	movlw	3
  5285  00192C  185B               	xorwf	_t,w,c
  5286  00192E  105C               	iorwf	_t+1,w,c
  5287  001930  B4D8               	btfsc	status,2,c
  5288  001932  D005               	goto	l454
  5289  001934  0E06               	movlw	6
  5290  001936  185B               	xorwf	_t,w,c
  5291  001938  105C               	iorwf	_t+1,w,c
  5292  00193A  A4D8               	btfss	status,2,c
  5293  00193C  D002               	goto	l452
  5294  00193E                     l454:
  5295  00193E  848A               	bsf	3978,2,c	;volatile
  5296  001940  D001               	goto	l3410
  5297  001942                     l452:
  5298                           
  5299                           ;motors.c: 73: else{LATBbits.LATB2 = 0;}
  5300  001942  948A               	bcf	3978,2,c	;volatile
  5301  001944                     l3410:
  5302                           
  5303                           ;motors.c: 74: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  5304  001944  0E04               	movlw	4
  5305  001946  185B               	xorwf	_t,w,c
  5306  001948  105C               	iorwf	_t+1,w,c
  5307  00194A  B4D8               	btfsc	status,2,c
  5308  00194C  D005               	goto	l458
  5309  00194E  0E05               	movlw	5
  5310  001950  185B               	xorwf	_t,w,c
  5311  001952  105C               	iorwf	_t+1,w,c
  5312  001954  A4D8               	btfss	status,2,c
  5313  001956  D002               	goto	l456
  5314  001958                     l458:
  5315  001958  808A               	bsf	3978,0,c	;volatile
  5316  00195A  0012               	return	
  5317  00195C                     l456:
  5318                           
  5319                           ;motors.c: 75: else{LATBbits.LATB0 = 0;}
  5320  00195C  908A               	bcf	3978,0,c	;volatile
  5321                           
  5322                           ;motors.c: 76: }
  5323  00195E  0012               	return	
  5324  001960                     l3414:
  5325                           
  5326                           ;motors.c: 77: else{
  5327                           ;motors.c: 78: _delay((unsigned long)((10)*(32000000/4000.0)));
  5328  001960  0E68               	movlw	104
  5329  001962  6E14               	movwf	??_updateS1& (0+255),c
  5330  001964  0EE4               	movlw	228
  5331  001966                     u5417:
  5332  001966  2EE8               	decfsz	wreg,f,c
  5333  001968  D7FE               	bra	u5417
  5334  00196A  2E14               	decfsz	??_updateS1& (0+255),f,c
  5335  00196C  D7FC               	bra	u5417
  5336  00196E  D000               	nop2	
  5337                           
  5338                           ;motors.c: 80: if(mode == 1 || mode == 5){
  5339  001970  0412               	decf	updateS1@mode,w,c
  5340  001972  1013               	iorwf	updateS1@mode+1,w,c
  5341  001974  B4D8               	btfsc	status,2,c
  5342  001976  D005               	goto	l3420
  5343  001978  0E05               	movlw	5
  5344  00197A  1812               	xorwf	updateS1@mode,w,c
  5345  00197C  1013               	iorwf	updateS1@mode+1,w,c
  5346  00197E  A4D8               	btfss	status,2,c
  5347  001980  D00E               	goto	l3426
  5348  001982                     l3420:
  5349                           
  5350                           ;motors.c: 81: s1 ++;
  5351  001982  4A63               	infsnz	_s1,f,c
  5352  001984  2A64               	incf	_s1+1,f,c
  5353                           
  5354                           ;motors.c: 82: if (s1>4) {s1=1;}
  5355  001986  BE64               	btfsc	_s1+1,7,c
  5356  001988  D022               	goto	l3436
  5357  00198A  5064               	movf	_s1+1,w,c
  5358  00198C  E104               	bnz	u3160
  5359  00198E  0E05               	movlw	5
  5360  001990  5C63               	subwf	_s1,w,c
  5361  001992  A0D8               	btfss	status,0,c
  5362  001994  D01C               	goto	l3436
  5363  001996                     u3160:
  5364  001996  0E00               	movlw	0
  5365  001998  6E64               	movwf	_s1+1,c
  5366  00199A  0E01               	movlw	1
  5367  00199C  D017               	goto	L11
  5368  00199E                     l3426:
  5369                           
  5370                           ;motors.c: 85: else if(mode == 2 || mode==6){
  5371  00199E  0E02               	movlw	2
  5372  0019A0  1812               	xorwf	updateS1@mode,w,c
  5373  0019A2  1013               	iorwf	updateS1@mode+1,w,c
  5374  0019A4  B4D8               	btfsc	status,2,c
  5375  0019A6  D005               	goto	l3430
  5376  0019A8  0E06               	movlw	6
  5377  0019AA  1812               	xorwf	updateS1@mode,w,c
  5378  0019AC  1013               	iorwf	updateS1@mode+1,w,c
  5379  0019AE  A4D8               	btfss	status,2,c
  5380  0019B0  D00E               	goto	l3436
  5381  0019B2                     l3430:
  5382                           
  5383                           ;motors.c: 86: s1 --;
  5384  0019B2  0663               	decf	_s1,f,c
  5385  0019B4  A0D8               	btfss	status,0,c
  5386  0019B6  0664               	decf	_s1+1,f,c
  5387                           
  5388                           ;motors.c: 87: if (s1<1) {s1=4;}
  5389  0019B8  BE64               	btfsc	_s1+1,7,c
  5390  0019BA  D005               	goto	l3434
  5391  0019BC  5064               	movf	_s1+1,w,c
  5392  0019BE  E107               	bnz	l3436
  5393  0019C0  0463               	decf	_s1,w,c
  5394  0019C2  B0D8               	btfsc	status,0,c
  5395  0019C4  D004               	goto	l3436
  5396  0019C6                     l3434:
  5397  0019C6  0E00               	movlw	0
  5398  0019C8  6E64               	movwf	_s1+1,c
  5399  0019CA  0E04               	movlw	4
  5400  0019CC                     L11:
  5401  0019CC  6E63               	movwf	_s1,c
  5402  0019CE                     l3436:
  5403                           
  5404                           ;motors.c: 88: }
  5405                           ;motors.c: 90: if(mode == 1 || mode ==2){
  5406  0019CE  0412               	decf	updateS1@mode,w,c
  5407  0019D0  1013               	iorwf	updateS1@mode+1,w,c
  5408  0019D2  B4D8               	btfsc	status,2,c
  5409  0019D4  D005               	goto	l3440
  5410  0019D6  0E02               	movlw	2
  5411  0019D8  1812               	xorwf	updateS1@mode,w,c
  5412  0019DA  1013               	iorwf	updateS1@mode+1,w,c
  5413  0019DC  A4D8               	btfss	status,2,c
  5414  0019DE  D01F               	goto	l3456
  5415  0019E0                     l3440:
  5416                           
  5417                           ;motors.c: 91: if (s1 == 1){LATDbits.LATD1 = 1;}
  5418  0019E0  0463               	decf	_s1,w,c
  5419  0019E2  1064               	iorwf	_s1+1,w,c
  5420  0019E4  A4D8               	btfss	status,2,c
  5421  0019E6  D002               	goto	l473
  5422  0019E8  828C               	bsf	3980,1,c	;volatile
  5423  0019EA  D001               	goto	l3444
  5424  0019EC                     l473:
  5425                           
  5426                           ;motors.c: 92: else{LATDbits.LATD1 = 0;}
  5427  0019EC  928C               	bcf	3980,1,c	;volatile
  5428  0019EE                     l3444:
  5429                           
  5430                           ;motors.c: 93: if (s1 == 2){LATBbits.LATB3 = 1;}
  5431  0019EE  0E02               	movlw	2
  5432  0019F0  1863               	xorwf	_s1,w,c
  5433  0019F2  1064               	iorwf	_s1+1,w,c
  5434  0019F4  A4D8               	btfss	status,2,c
  5435  0019F6  D002               	goto	l475
  5436  0019F8  868A               	bsf	3978,3,c	;volatile
  5437  0019FA  D001               	goto	l3448
  5438  0019FC                     l475:
  5439                           
  5440                           ;motors.c: 94: else{LATBbits.LATB3 = 0;}
  5441  0019FC  968A               	bcf	3978,3,c	;volatile
  5442  0019FE                     l3448:
  5443                           
  5444                           ;motors.c: 95: if (s1 == 3){LATBbits.LATB2 = 1;}
  5445  0019FE  0E03               	movlw	3
  5446  001A00  1863               	xorwf	_s1,w,c
  5447  001A02  1064               	iorwf	_s1+1,w,c
  5448  001A04  A4D8               	btfss	status,2,c
  5449  001A06  D002               	goto	l477
  5450  001A08  848A               	bsf	3978,2,c	;volatile
  5451  001A0A  D001               	goto	l3452
  5452  001A0C                     l477:
  5453                           
  5454                           ;motors.c: 96: else{LATBbits.LATB2 = 0;}
  5455  001A0C  948A               	bcf	3978,2,c	;volatile
  5456  001A0E                     l3452:
  5457                           
  5458                           ;motors.c: 97: if (s1 == 4){LATBbits.LATB0 = 1;}
  5459  001A0E  0E04               	movlw	4
  5460  001A10  1863               	xorwf	_s1,w,c
  5461  001A12  1064               	iorwf	_s1+1,w,c
  5462  001A14  A4D8               	btfss	status,2,c
  5463  001A16  D002               	goto	l479
  5464  001A18  808A               	bsf	3978,0,c	;volatile
  5465  001A1A  D001               	goto	l3456
  5466  001A1C                     l479:
  5467                           
  5468                           ;motors.c: 98: else{LATBbits.LATB0 = 0;}
  5469  001A1C  908A               	bcf	3978,0,c	;volatile
  5470  001A1E                     l3456:
  5471                           
  5472                           ;motors.c: 99: }
  5473                           ;motors.c: 100: if(mode == 5 || mode ==6){
  5474  001A1E  0E05               	movlw	5
  5475  001A20  1812               	xorwf	updateS1@mode,w,c
  5476  001A22  1013               	iorwf	updateS1@mode+1,w,c
  5477  001A24  B4D8               	btfsc	status,2,c
  5478  001A26  D005               	goto	l3460
  5479  001A28  0E06               	movlw	6
  5480  001A2A  1812               	xorwf	updateS1@mode,w,c
  5481  001A2C  1013               	iorwf	updateS1@mode+1,w,c
  5482  001A2E  A4D8               	btfss	status,2,c
  5483  001A30  0012               	return	
  5484  001A32                     l3460:
  5485                           
  5486                           ;motors.c: 101: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  5487  001A32  0463               	decf	_s1,w,c
  5488  001A34  1064               	iorwf	_s1+1,w,c
  5489  001A36  A4D8               	btfss	status,2,c
  5490  001A38  D004               	goto	l3464
  5491  001A3A  828C               	bsf	3980,1,c	;volatile
  5492  001A3C  868A               	bsf	3978,3,c	;volatile
  5493  001A3E  948A               	bcf	3978,2,c	;volatile
  5494  001A40  908A               	bcf	3978,0,c	;volatile
  5495  001A42                     l3464:
  5496                           
  5497                           ;motors.c: 102: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  5498  001A42  0E02               	movlw	2
  5499  001A44  1863               	xorwf	_s1,w,c
  5500  001A46  1064               	iorwf	_s1+1,w,c
  5501  001A48  A4D8               	btfss	status,2,c
  5502  001A4A  D004               	goto	l3468
  5503  001A4C  928C               	bcf	3980,1,c	;volatile
  5504  001A4E  868A               	bsf	3978,3,c	;volatile
  5505  001A50  848A               	bsf	3978,2,c	;volatile
  5506  001A52  908A               	bcf	3978,0,c	;volatile
  5507  001A54                     l3468:
  5508                           
  5509                           ;motors.c: 103: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  5510  001A54  0E03               	movlw	3
  5511  001A56  1863               	xorwf	_s1,w,c
  5512  001A58  1064               	iorwf	_s1+1,w,c
  5513  001A5A  A4D8               	btfss	status,2,c
  5514  001A5C  D004               	goto	l3472
  5515  001A5E  928C               	bcf	3980,1,c	;volatile
  5516  001A60  968A               	bcf	3978,3,c	;volatile
  5517  001A62  848A               	bsf	3978,2,c	;volatile
  5518  001A64  808A               	bsf	3978,0,c	;volatile
  5519  001A66                     l3472:
  5520                           
  5521                           ;motors.c: 104: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  5522  001A66  0E04               	movlw	4
  5523  001A68  1863               	xorwf	_s1,w,c
  5524  001A6A  1064               	iorwf	_s1+1,w,c
  5525  001A6C  A4D8               	btfss	status,2,c
  5526  001A6E  0012               	return	
  5527  001A70  828C               	bsf	3980,1,c	;volatile
  5528  001A72  968A               	bcf	3978,3,c	;volatile
  5529  001A74  948A               	bcf	3978,2,c	;volatile
  5530  001A76  808A               	bsf	3978,0,c	;volatile
  5531  001A78  0012               	return	
  5532  001A7A                     __end_of_updateS1:
  5533                           	opt stack 0
  5534                           tblptru	equ	0xFF8
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           indf2	equ	0xFDF
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function _readADC *****************
  5545 ;; Defined at:
  5546 ;;		line 9 in file "logic.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  channel         1    wreg     unsigned char 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;  channel         1   18[COMRAM] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      void 
  5553 ;; Registers used:
  5554 ;;		wreg, status,2, status,0, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;Total ram usage:        2 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    2
  5567 ;; This function calls:
  5568 ;;		Nothing
  5569 ;; This function is called by:
  5570 ;;		_main
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text9
  5575  0026CA                     __ptext9:
  5576                           	opt stack 0
  5577  0026CA                     _readADC:
  5578                           	opt stack 28
  5579                           
  5580                           ;incstack = 0
  5581                           ;readADC@channel stored from wreg
  5582  0026CA  6E13               	movwf	readADC@channel,c
  5583                           
  5584                           ;logic.c: 11: ADCON0 = ((channel <<2));
  5585  0026CC  4413               	rlncf	readADC@channel,w,c
  5586  0026CE  46E8               	rlncf	wreg,f,c
  5587  0026D0  0BFC               	andlw	252
  5588  0026D2  6EC2               	movwf	4034,c	;volatile
  5589                           
  5590                           ;logic.c: 12: ADCON0bits.ADON = 1;
  5591  0026D4  80C2               	bsf	4034,0,c	;volatile
  5592                           
  5593                           ;logic.c: 13: ADCON0bits.GO = 1;
  5594  0026D6  82C2               	bsf	4034,1,c	;volatile
  5595                           
  5596                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  5597  0026D8  D007               	goto	l3670
  5598  0026DA                     l3668:
  5599  0026DA  0E34               	movlw	52
  5600  0026DC  6E12               	movwf	??_readADC& (0+255),c
  5601  0026DE  0EF2               	movlw	242
  5602  0026E0                     u5427:
  5603  0026E0  2EE8               	decfsz	wreg,f,c
  5604  0026E2  D7FE               	bra	u5427
  5605  0026E4  2E12               	decfsz	??_readADC& (0+255),f,c
  5606  0026E6  D7FC               	bra	u5427
  5607  0026E8                     l3670:
  5608  0026E8  A2C2               	btfss	4034,1,c	;volatile
  5609  0026EA  0012               	return	
  5610  0026EC  D7F6               	goto	l3668
  5611  0026EE                     __end_of_readADC:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           prodh	equ	0xFF4
  5615                           prodl	equ	0xFF3
  5616                           postinc0	equ	0xFEE
  5617                           wreg	equ	0xFE8
  5618                           indf2	equ	0xFDF
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _keyinterrupt *****************
  5624 ;; Defined at:
  5625 ;;		line 19 in file "interface.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    2
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_main
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text10
  5654  00270C                     __ptext10:
  5655                           	opt stack 0
  5656  00270C                     _keyinterrupt:
  5657                           	opt stack 28
  5658                           
  5659                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  5660                           
  5661                           ;incstack = 0
  5662  00270C  A281               	btfss	3969,1,c	;volatile
  5663  00270E  D007               	goto	l609
  5664                           
  5665                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  5666  002710  3881               	swapf	3969,w,c	;volatile
  5667  002712  0B0F               	andlw	15
  5668  002714  0B0F               	andlw	15
  5669  002716  0100               	movlb	0	; () banked
  5670  002718  6FB7               	movwf	_keypress& (0+255),b	;volatile
  5671  00271A                     l610:
  5672  00271A  B281               	btfsc	3969,1,c	;volatile
  5673  00271C  D7FE               	goto	l610
  5674  00271E                     l609:
  5675                           
  5676                           ;interface.c: 23: }
  5677                           ;interface.c: 24: __nop();
  5678  00271E  F000               	nop	
  5679  002720  0012               	return		;funcret
  5680  002722                     __end_of_keyinterrupt:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           prodh	equ	0xFF4
  5684                           prodl	equ	0xFF3
  5685                           postinc0	equ	0xFEE
  5686                           wreg	equ	0xFE8
  5687                           indf2	equ	0xFDF
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _initialize *****************
  5693 ;; Defined at:
  5694 ;;		line 54 in file "main.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    5
  5715 ;; This function calls:
  5716 ;;		_I2C_Master_Init
  5717 ;;		_initLCD
  5718 ;; This function is called by:
  5719 ;;		_main
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text11
  5724  0022C6                     __ptext11:
  5725                           	opt stack 0
  5726  0022C6                     _initialize:
  5727                           	opt stack 25
  5728                           
  5729                           ;main.c: 56: OSCCON = 0xF0;
  5730                           
  5731                           ;incstack = 0
  5732  0022C6  0EF0               	movlw	240
  5733  0022C8  6ED3               	movwf	4051,c	;volatile
  5734                           
  5735                           ;main.c: 57: OSCTUNEbits.PLLEN = 1;
  5736  0022CA  8C9B               	bsf	3995,6,c	;volatile
  5737                           
  5738                           ;main.c: 59: TRISA = 0b11101111;
  5739  0022CC  0EEF               	movlw	239
  5740  0022CE  6E92               	movwf	3986,c	;volatile
  5741                           
  5742                           ;main.c: 60: TRISB = 0b11110010;
  5743  0022D0  0EF2               	movlw	242
  5744  0022D2  6E93               	movwf	3987,c	;volatile
  5745                           
  5746                           ;main.c: 61: TRISC = 0b00000000;
  5747  0022D4  0E00               	movlw	0
  5748  0022D6  6E94               	movwf	3988,c	;volatile
  5749                           
  5750                           ;main.c: 63: TRISD = 0x00;
  5751  0022D8  0E00               	movlw	0
  5752  0022DA  6E95               	movwf	3989,c	;volatile
  5753                           
  5754                           ;main.c: 64: TRISE = 0b00000001;
  5755  0022DC  0E01               	movlw	1
  5756  0022DE  6E96               	movwf	3990,c	;volatile
  5757                           
  5758                           ;main.c: 66: PR2 = 0xff;
  5759  0022E0  68CB               	setf	4043,c	;volatile
  5760                           
  5761                           ;main.c: 67: CCP1CON = 0b00001100;
  5762  0022E2  0E0C               	movlw	12
  5763  0022E4  6EBD               	movwf	4029,c	;volatile
  5764                           
  5765                           ;main.c: 68: CCPR1L = 0x00;
  5766  0022E6  0E00               	movlw	0
  5767  0022E8  6EBE               	movwf	4030,c	;volatile
  5768                           
  5769                           ;main.c: 69: CCP2CON = 0b00001100;
  5770  0022EA  0E0C               	movlw	12
  5771  0022EC  6EBA               	movwf	4026,c	;volatile
  5772                           
  5773                           ;main.c: 70: CCPR2L = 0x00;
  5774  0022EE  0E00               	movlw	0
  5775  0022F0  6EBB               	movwf	4027,c	;volatile
  5776                           
  5777                           ;main.c: 71: T2CON = 0b00000101;
  5778  0022F2  0E05               	movlw	5
  5779  0022F4  6ECA               	movwf	4042,c	;volatile
  5780                           
  5781                           ;main.c: 73: LATA = 0x00;
  5782  0022F6  0E00               	movlw	0
  5783  0022F8  6E89               	movwf	3977,c	;volatile
  5784                           
  5785                           ;main.c: 74: LATB = 0x00;
  5786  0022FA  0E00               	movlw	0
  5787  0022FC  6E8A               	movwf	3978,c	;volatile
  5788                           
  5789                           ;main.c: 75: LATC = 0x00;
  5790  0022FE  0E00               	movlw	0
  5791  002300  6E8B               	movwf	3979,c	;volatile
  5792                           
  5793                           ;main.c: 76: LATD = 0x00;
  5794  002302  0E00               	movlw	0
  5795  002304  6E8C               	movwf	3980,c	;volatile
  5796                           
  5797                           ;main.c: 77: LATE = 0x00;
  5798  002306  0E00               	movlw	0
  5799  002308  6E8D               	movwf	3981,c	;volatile
  5800                           
  5801                           ;main.c: 79: initLCD();
  5802  00230A  ECD9  F012         	call	_initLCD	;wreg free
  5803                           
  5804                           ;main.c: 81: I2C_Master_Init(32000);
  5805  00230E  0E00               	movlw	0
  5806  002310  6E1F               	movwf	I2C_Master_Init@c,c
  5807  002312  0E7D               	movlw	125
  5808  002314  6E20               	movwf	I2C_Master_Init@c+1,c
  5809  002316  0E00               	movlw	0
  5810  002318  6E21               	movwf	I2C_Master_Init@c+2,c
  5811  00231A  0E00               	movlw	0
  5812  00231C  6E22               	movwf	I2C_Master_Init@c+3,c
  5813  00231E  EC37  F012         	call	_I2C_Master_Init	;wreg free
  5814                           
  5815                           ;main.c: 84: nRBPU = 0;
  5816  002322  9EF1               	bcf	intcon2,7,c	;volatile
  5817                           
  5818                           ;main.c: 86: ADCON1 = 0b00001001;
  5819  002324  0E09               	movlw	9
  5820  002326  6EC1               	movwf	4033,c	;volatile
  5821                           
  5822                           ;main.c: 87: ADCON2 = 0b10001001;
  5823  002328  0E89               	movlw	137
  5824  00232A  6EC0               	movwf	4032,c	;volatile
  5825                           
  5826                           ;main.c: 88: CVRCON = 0x00;
  5827  00232C  0E00               	movlw	0
  5828  00232E  6EB5               	movwf	4021,c	;volatile
  5829                           
  5830                           ;main.c: 89: CMCONbits.CIS = 0;
  5831  002330  96B4               	bcf	4020,3,c	;volatile
  5832                           
  5833                           ;main.c: 90: ADFM = 1;
  5834  002332  8EC0               	bsf	4032,7,c	;volatile
  5835                           
  5836                           ;main.c: 92: TMR0IE = 1;
  5837  002334  8AF2               	bsf	intcon,5,c	;volatile
  5838                           
  5839                           ;main.c: 93: TMR1IE = 1;
  5840  002336  809D               	bsf	3997,0,c	;volatile
  5841                           
  5842                           ;main.c: 95: PEIE = 1;
  5843  002338  8CF2               	bsf	intcon,6,c	;volatile
  5844                           
  5845                           ;main.c: 97: (INTCONbits.GIE = 1);
  5846  00233A  8EF2               	bsf	intcon,7,c	;volatile
  5847  00233C  0012               	return		;funcret
  5848  00233E                     __end_of_initialize:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           intcon2	equ	0xFF1
  5855                           postinc0	equ	0xFEE
  5856                           wreg	equ	0xFE8
  5857                           indf2	equ	0xFDF
  5858                           fsr2h	equ	0xFDA
  5859                           fsr2l	equ	0xFD9
  5860                           status	equ	0xFD8
  5861                           
  5862 ;; *************** function _initLCD *****************
  5863 ;; Defined at:
  5864 ;;		line 11 in file "lcd.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;		None
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;		None
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  1    wreg      void 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;Total ram usage:        1 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    4
  5885 ;; This function calls:
  5886 ;;		_lcdInst
  5887 ;; This function is called by:
  5888 ;;		_initialize
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           	psect	text12
  5893  0025B2                     __ptext12:
  5894                           	opt stack 0
  5895  0025B2                     _initLCD:
  5896                           	opt stack 25
  5897                           
  5898                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  5899                           
  5900                           ;incstack = 0
  5901  0025B2  0E9C               	movlw	156
  5902  0025B4  6E15               	movwf	??_initLCD& (0+255),c
  5903  0025B6  0ED7               	movlw	215
  5904  0025B8                     u5437:
  5905  0025B8  2EE8               	decfsz	wreg,f,c
  5906  0025BA  D7FE               	bra	u5437
  5907  0025BC  2E15               	decfsz	??_initLCD& (0+255),f,c
  5908  0025BE  D7FC               	bra	u5437
  5909  0025C0  F000               	nop	
  5910                           
  5911                           ;lcd.c: 13: lcdInst(0b00110011);
  5912  0025C2  0E33               	movlw	51
  5913  0025C4  ECAB  F013         	call	_lcdInst
  5914                           
  5915                           ;lcd.c: 14: lcdInst(0b00110010);
  5916  0025C8  0E32               	movlw	50
  5917  0025CA  ECAB  F013         	call	_lcdInst
  5918                           
  5919                           ;lcd.c: 15: lcdInst(0b00101000);
  5920  0025CE  0E28               	movlw	40
  5921  0025D0  ECAB  F013         	call	_lcdInst
  5922                           
  5923                           ;lcd.c: 16: lcdInst(0b00001111);
  5924  0025D4  0E0F               	movlw	15
  5925  0025D6  ECAB  F013         	call	_lcdInst
  5926                           
  5927                           ;lcd.c: 17: lcdInst(0b00000110);
  5928  0025DA  0E06               	movlw	6
  5929  0025DC  ECAB  F013         	call	_lcdInst
  5930                           
  5931                           ;lcd.c: 18: lcdInst(0b00000001);
  5932  0025E0  0E01               	movlw	1
  5933  0025E2  ECAB  F013         	call	_lcdInst
  5934                           
  5935                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  5936  0025E6  0E9C               	movlw	156
  5937  0025E8  6E15               	movwf	??_initLCD& (0+255),c
  5938  0025EA  0ED7               	movlw	215
  5939  0025EC                     u5447:
  5940  0025EC  2EE8               	decfsz	wreg,f,c
  5941  0025EE  D7FE               	bra	u5447
  5942  0025F0  2E15               	decfsz	??_initLCD& (0+255),f,c
  5943  0025F2  D7FC               	bra	u5447
  5944  0025F4  F000               	nop	
  5945  0025F6  0012               	return		;funcret
  5946  0025F8                     __end_of_initLCD:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           prodh	equ	0xFF4
  5950                           prodl	equ	0xFF3
  5951                           intcon	equ	0xFF2
  5952                           intcon2	equ	0xFF1
  5953                           postinc0	equ	0xFEE
  5954                           wreg	equ	0xFE8
  5955                           indf2	equ	0xFDF
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _I2C_Master_Init *****************
  5961 ;; Defined at:
  5962 ;;		line 20 in file "I2C.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  c               4   30[COMRAM] const unsigned long 
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;		None
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5976 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;Total ram usage:        8 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    3
  5983 ;; This function calls:
  5984 ;;		___lldiv
  5985 ;; This function is called by:
  5986 ;;		_initialize
  5987 ;; This function uses a non-reentrant model
  5988 ;;
  5989                           
  5990                           	psect	text13
  5991  00246E                     __ptext13:
  5992                           	opt stack 0
  5993  00246E                     _I2C_Master_Init:
  5994                           	opt stack 26
  5995                           
  5996                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  5997                           
  5998                           ;incstack = 0
  5999  00246E  0E00               	movlw	0
  6000  002470  6EC7               	movwf	4039,c	;volatile
  6001                           
  6002                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  6003  002472  0E28               	movlw	40
  6004  002474  6EC6               	movwf	4038,c	;volatile
  6005                           
  6006                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  6007  002476  0E00               	movlw	0
  6008  002478  6EC5               	movwf	4037,c	;volatile
  6009                           
  6010                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  6011  00247A  0E00               	movlw	0
  6012  00247C  6E12               	movwf	___lldiv@dividend,c
  6013  00247E  0E48               	movlw	72
  6014  002480  6E13               	movwf	___lldiv@dividend+1,c
  6015  002482  0EE8               	movlw	232
  6016  002484  6E14               	movwf	___lldiv@dividend+2,c
  6017  002486  0E01               	movlw	1
  6018  002488  6E15               	movwf	___lldiv@dividend+3,c
  6019  00248A  C01F  F023         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6020  00248E  C020  F024         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6021  002492  C021  F025         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6022  002496  C022  F026         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6023  00249A  0E02               	movlw	2
  6024  00249C                     u2695:
  6025  00249C  90D8               	bcf	status,0,c
  6026  00249E  3623               	rlcf	??_I2C_Master_Init,f,c
  6027  0024A0  3624               	rlcf	??_I2C_Master_Init+1,f,c
  6028  0024A2  3625               	rlcf	??_I2C_Master_Init+2,f,c
  6029  0024A4  3626               	rlcf	??_I2C_Master_Init+3,f,c
  6030  0024A6  2EE8               	decfsz	wreg,f,c
  6031  0024A8  D7F9               	goto	u2695
  6032  0024AA  C023  F016         	movff	??_I2C_Master_Init,___lldiv@divisor
  6033  0024AE  C024  F017         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6034  0024B2  C025  F018         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6035  0024B6  C026  F019         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6036  0024BA  EC22  F011         	call	___lldiv	;wreg free
  6037  0024BE  0412               	decf	?___lldiv,w,c
  6038  0024C0  6EC8               	movwf	4040,c	;volatile
  6039                           
  6040                           ;I2C.c: 27: TRISC3 = 1;
  6041  0024C2  8694               	bsf	3988,3,c	;volatile
  6042                           
  6043                           ;I2C.c: 28: TRISC4 = 1;
  6044  0024C4  8894               	bsf	3988,4,c	;volatile
  6045  0024C6  0012               	return		;funcret
  6046  0024C8                     __end_of_I2C_Master_Init:
  6047                           	opt stack 0
  6048                           tblptru	equ	0xFF8
  6049                           prodh	equ	0xFF4
  6050                           prodl	equ	0xFF3
  6051                           intcon	equ	0xFF2
  6052                           intcon2	equ	0xFF1
  6053                           postinc0	equ	0xFEE
  6054                           wreg	equ	0xFE8
  6055                           indf2	equ	0xFDF
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _homescreen *****************
  6061 ;; Defined at:
  6062 ;;		line 3 in file "interface.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;		None
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;Total ram usage:        0 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    5
  6083 ;; This function calls:
  6084 ;;		_lcdInst
  6085 ;;		_printf
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text14
  6092  00240C                     __ptext14:
  6093                           	opt stack 0
  6094  00240C                     _homescreen:
  6095                           	opt stack 25
  6096                           
  6097                           ;interface.c: 4: lcdInst(0b10000000);;
  6098                           
  6099                           ;incstack = 0
  6100  00240C  0E80               	movlw	128
  6101  00240E  ECAB  F013         	call	_lcdInst
  6102                           
  6103                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  6104  002412  0E9F               	movlw	low STR_37
  6105  002414  6E28               	movwf	printf@f,c
  6106  002416  0EFE               	movlw	high STR_37
  6107  002418  6E29               	movwf	printf@f+1,c
  6108  00241A  C0B0  F02A         	movff	_time+6,?_printf+2
  6109  00241E  6A2B               	clrf	?_printf+3,c
  6110  002420  C0AF  F02C         	movff	_time+5,?_printf+4
  6111  002424  6A2D               	clrf	?_printf+5,c
  6112  002426  C0AE  F02E         	movff	_time+4,?_printf+6
  6113  00242A  6A2F               	clrf	?_printf+7,c
  6114  00242C  EC9B  F008         	call	_printf	;wreg free
  6115                           
  6116                           ;interface.c: 6: printf("3:Start");
  6117  002430  0EE4               	movlw	low STR_38
  6118  002432  6E28               	movwf	printf@f,c
  6119  002434  0EFF               	movlw	high STR_38
  6120  002436  6E29               	movwf	printf@f+1,c
  6121  002438  EC9B  F008         	call	_printf	;wreg free
  6122                           
  6123                           ;interface.c: 7: lcdInst(0b11000000);;
  6124  00243C  0EC0               	movlw	192
  6125  00243E  ECAB  F013         	call	_lcdInst
  6126                           
  6127                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  6128  002442  0E4F               	movlw	low STR_39
  6129  002444  6E28               	movwf	printf@f,c
  6130  002446  0EFF               	movlw	high STR_39
  6131  002448  6E29               	movwf	printf@f+1,c
  6132  00244A  C0AC  F02A         	movff	_time+2,?_printf+2
  6133  00244E  6A2B               	clrf	?_printf+3,c
  6134  002450  C0AB  F02C         	movff	_time+1,?_printf+4
  6135  002454  6A2D               	clrf	?_printf+5,c
  6136  002456  C0AA  F02E         	movff	_time,?_printf+6
  6137  00245A  6A2F               	clrf	?_printf+7,c
  6138  00245C  EC9B  F008         	call	_printf	;wreg free
  6139                           
  6140                           ;interface.c: 9: printf(" A:Logs");
  6141  002460  0EDC               	movlw	low STR_40
  6142  002462  6E28               	movwf	printf@f,c
  6143  002464  0EFF               	movlw	high STR_40
  6144  002466  6E29               	movwf	printf@f+1,c
  6145  002468  EC9B  F008         	call	_printf	;wreg free
  6146  00246C  0012               	return		;funcret
  6147  00246E                     __end_of_homescreen:
  6148                           	opt stack 0
  6149                           tblptru	equ	0xFF8
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           intcon2	equ	0xFF1
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           indf2	equ	0xFDF
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function _displayLog *****************
  6162 ;; Defined at:
  6163 ;;		line 87 in file "interface.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  run             2   66[COMRAM] int 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  currRun         2   73[COMRAM] int 
  6168 ;;  i               2   71[COMRAM] int 
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      void 
  6171 ;; Registers used:
  6172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;Total ram usage:        9 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    5
  6185 ;; This function calls:
  6186 ;;		_eepromRead
  6187 ;;		_keycheck
  6188 ;;		_lcdInst
  6189 ;;		_printf
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text15
  6196  001548                     __ptext15:
  6197                           	opt stack 0
  6198  001548                     _displayLog:
  6199                           	opt stack 25
  6200                           
  6201                           ;interface.c: 88: int currRun = eepromRead(0);
  6202                           
  6203                           ;incstack = 0
  6204  001548  0E00               	movlw	0
  6205  00154A  EC18  F013         	call	_eepromRead
  6206  00154E  6E4A               	movwf	displayLog@currRun,c
  6207  001550  6A4B               	clrf	displayLog@currRun+1,c
  6208  001552  BE4A               	btfsc	displayLog@currRun,7,c
  6209  001554  064B               	decf	displayLog@currRun+1,f,c
  6210                           
  6211                           ;interface.c: 89: int i;
  6212                           ;interface.c: 90: for (i=1;i<(run);i++){
  6213  001556  0E00               	movlw	0
  6214  001558  6E49               	movwf	displayLog@i+1,c
  6215  00155A  0E01               	movlw	1
  6216  00155C  6E48               	movwf	displayLog@i,c
  6217  00155E  D010               	goto	l3688
  6218  001560                     l3680:
  6219                           
  6220                           ;interface.c: 91: currRun++;
  6221  001560  4A4A               	infsnz	displayLog@currRun,f,c
  6222  001562  2A4B               	incf	displayLog@currRun+1,f,c
  6223                           
  6224                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  6225  001564  BE4B               	btfsc	displayLog@currRun+1,7,c
  6226  001566  D00A               	goto	l3686
  6227  001568  504B               	movf	displayLog@currRun+1,w,c
  6228  00156A  E104               	bnz	u3770
  6229  00156C  0E05               	movlw	5
  6230  00156E  5C4A               	subwf	displayLog@currRun,w,c
  6231  001570  A0D8               	btfss	status,0,c
  6232  001572  D004               	goto	l3686
  6233  001574                     u3770:
  6234  001574  0E00               	movlw	0
  6235  001576  6E4B               	movwf	displayLog@currRun+1,c
  6236  001578  0E01               	movlw	1
  6237  00157A  6E4A               	movwf	displayLog@currRun,c
  6238  00157C                     l3686:
  6239  00157C  4A48               	infsnz	displayLog@i,f,c
  6240  00157E  2A49               	incf	displayLog@i+1,f,c
  6241  001580                     l3688:
  6242  001580  5043               	movf	displayLog@run,w,c
  6243  001582  5C48               	subwf	displayLog@i,w,c
  6244  001584  5049               	movf	displayLog@i+1,w,c
  6245  001586  0A80               	xorlw	128
  6246  001588  6E45               	movwf	??_displayLog& (0+255),c
  6247  00158A  5044               	movf	displayLog@run+1,w,c
  6248  00158C  0A80               	xorlw	128
  6249  00158E  5845               	subwfb	??_displayLog& (0+255),w,c
  6250  001590  A0D8               	btfss	status,0,c
  6251  001592  D7E6               	goto	l3680
  6252                           
  6253                           ;interface.c: 93: }
  6254                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6255  001594  0E01               	movlw	1
  6256  001596  ECAB  F013         	call	_lcdInst
  6257  00159A  0E34               	movlw	52
  6258  00159C  6E45               	movwf	??_displayLog& (0+255),c
  6259  00159E  0EF2               	movlw	242
  6260  0015A0                     u5457:
  6261  0015A0  2EE8               	decfsz	wreg,f,c
  6262  0015A2  D7FE               	bra	u5457
  6263  0015A4  2E45               	decfsz	??_displayLog& (0+255),f,c
  6264  0015A6  D7FC               	bra	u5457
  6265                           
  6266                           ;interface.c: 96: lcdInst(0b10000000);;
  6267  0015A8  0E80               	movlw	128
  6268  0015AA  ECAB  F013         	call	_lcdInst
  6269                           
  6270                           ;interface.c: 97: printf("%d %d", eepromRead(0), currRun);
  6271  0015AE  0ED6               	movlw	low (STR_3+3)
  6272  0015B0  6E28               	movwf	printf@f,c
  6273  0015B2  0EFF               	movlw	high (STR_3+3)
  6274  0015B4  6E29               	movwf	printf@f+1,c
  6275  0015B6  0E00               	movlw	0
  6276  0015B8  EC18  F013         	call	_eepromRead
  6277  0015BC  6E2A               	movwf	?_printf+2,c
  6278  0015BE  6A2B               	clrf	?_printf+3,c
  6279  0015C0  BE2A               	btfsc	?_printf+2,7,c
  6280  0015C2  062B               	decf	?_printf+3,f,c
  6281  0015C4  C04A  F02C         	movff	displayLog@currRun,?_printf+4
  6282  0015C8  C04B  F02D         	movff	displayLog@currRun+1,?_printf+5
  6283  0015CC  EC9B  F008         	call	_printf	;wreg free
  6284                           
  6285                           ;interface.c: 98: keycheck();
  6286  0015D0  EC91  F013         	call	_keycheck	;wreg free
  6287                           
  6288                           ;interface.c: 99: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6289  0015D4  0E01               	movlw	1
  6290  0015D6  ECAB  F013         	call	_lcdInst
  6291  0015DA  0E34               	movlw	52
  6292  0015DC  6E45               	movwf	??_displayLog& (0+255),c
  6293  0015DE  0EF2               	movlw	242
  6294  0015E0                     u5467:
  6295  0015E0  2EE8               	decfsz	wreg,f,c
  6296  0015E2  D7FE               	bra	u5467
  6297  0015E4  2E45               	decfsz	??_displayLog& (0+255),f,c
  6298  0015E6  D7FC               	bra	u5467
  6299                           
  6300                           ;interface.c: 100: printf("Run#%d    A:Next", run);
  6301  0015E8  0E7D               	movlw	low STR_42
  6302  0015EA  6E28               	movwf	printf@f,c
  6303  0015EC  0EFE               	movlw	high STR_42
  6304  0015EE  6E29               	movwf	printf@f+1,c
  6305  0015F0  C043  F02A         	movff	displayLog@run,?_printf+2
  6306  0015F4  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6307  0015F8  EC9B  F008         	call	_printf	;wreg free
  6308                           
  6309                           ;interface.c: 101: lcdInst(0b11000000);;
  6310  0015FC  0EC0               	movlw	192
  6311  0015FE  ECAB  F013         	call	_lcdInst
  6312                           
  6313                           ;interface.c: 102: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  6314  001602  0E85               	movlw	low STR_43
  6315  001604  6E28               	movwf	printf@f,c
  6316  001606  0EFF               	movlw	high STR_43
  6317  001608  6E29               	movwf	printf@f+1,c
  6318  00160A  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6319  00160E  3A45               	swapf	??_displayLog,f,c
  6320  001610  0EF0               	movlw	240
  6321  001612  1645               	andwf	??_displayLog,f,c
  6322  001614  2845               	incf	??_displayLog,w,c
  6323  001616  EC18  F013         	call	_eepromRead
  6324  00161A  6E2A               	movwf	?_printf+2,c
  6325  00161C  6A2B               	clrf	?_printf+3,c
  6326  00161E  BE2A               	btfsc	?_printf+2,7,c
  6327  001620  062B               	decf	?_printf+3,f,c
  6328  001622  EC9B  F008         	call	_printf	;wreg free
  6329                           
  6330                           ;interface.c: 103: keycheck();
  6331  001626  EC91  F013         	call	_keycheck	;wreg free
  6332                           
  6333                           ;interface.c: 104: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6334  00162A  0E01               	movlw	1
  6335  00162C  ECAB  F013         	call	_lcdInst
  6336  001630  0E34               	movlw	52
  6337  001632  6E45               	movwf	??_displayLog& (0+255),c
  6338  001634  0EF2               	movlw	242
  6339  001636                     u5477:
  6340  001636  2EE8               	decfsz	wreg,f,c
  6341  001638  D7FE               	bra	u5477
  6342  00163A  2E45               	decfsz	??_displayLog& (0+255),f,c
  6343  00163C  D7FC               	bra	u5477
  6344                           
  6345                           ;interface.c: 105: printf("Run#%d    A:Next", run);
  6346  00163E  0E7D               	movlw	low STR_42
  6347  001640  6E28               	movwf	printf@f,c
  6348  001642  0EFE               	movlw	high STR_42
  6349  001644  6E29               	movwf	printf@f+1,c
  6350  001646  C043  F02A         	movff	displayLog@run,?_printf+2
  6351  00164A  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6352  00164E  EC9B  F008         	call	_printf	;wreg free
  6353                           
  6354                           ;interface.c: 106: lcdInst(0b11000000);;
  6355  001652  0EC0               	movlw	192
  6356  001654  ECAB  F013         	call	_lcdInst
  6357                           
  6358                           ;interface.c: 107: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  6359  001658  0E35               	movlw	low STR_45
  6360  00165A  6E28               	movwf	printf@f,c
  6361  00165C  0EFE               	movlw	high STR_45
  6362  00165E  6E29               	movwf	printf@f+1,c
  6363  001660  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6364  001664  3A45               	swapf	??_displayLog,f,c
  6365  001666  0EF0               	movlw	240
  6366  001668  1645               	andwf	??_displayLog,f,c
  6367  00166A  5045               	movf	??_displayLog,w,c
  6368  00166C  0F02               	addlw	2
  6369  00166E  EC18  F013         	call	_eepromRead
  6370  001672  6E2A               	movwf	?_printf+2,c
  6371  001674  6A2B               	clrf	?_printf+3,c
  6372  001676  BE2A               	btfsc	?_printf+2,7,c
  6373  001678  062B               	decf	?_printf+3,f,c
  6374  00167A  C04A  F046         	movff	displayLog@currRun,??_displayLog+1
  6375  00167E  3A46               	swapf	??_displayLog+1,f,c
  6376  001680  0EF0               	movlw	240
  6377  001682  1646               	andwf	??_displayLog+1,f,c
  6378  001684  5046               	movf	??_displayLog+1,w,c
  6379  001686  0F03               	addlw	3
  6380  001688  EC18  F013         	call	_eepromRead
  6381  00168C  6E2C               	movwf	?_printf+4,c
  6382  00168E  6A2D               	clrf	?_printf+5,c
  6383  001690  BE2C               	btfsc	?_printf+4,7,c
  6384  001692  062D               	decf	?_printf+5,f,c
  6385  001694  C04A  F047         	movff	displayLog@currRun,??_displayLog+2
  6386  001698  3A47               	swapf	??_displayLog+2,f,c
  6387  00169A  0EF0               	movlw	240
  6388  00169C  1647               	andwf	??_displayLog+2,f,c
  6389  00169E  5047               	movf	??_displayLog+2,w,c
  6390  0016A0  0F04               	addlw	4
  6391  0016A2  EC18  F013         	call	_eepromRead
  6392  0016A6  6E2E               	movwf	?_printf+6,c
  6393  0016A8  6A2F               	clrf	?_printf+7,c
  6394  0016AA  BE2E               	btfsc	?_printf+6,7,c
  6395  0016AC  062F               	decf	?_printf+7,f,c
  6396  0016AE  EC9B  F008         	call	_printf	;wreg free
  6397                           
  6398                           ;interface.c: 108: keycheck();
  6399  0016B2  EC91  F013         	call	_keycheck	;wreg free
  6400                           
  6401                           ;interface.c: 109: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6402  0016B6  0E01               	movlw	1
  6403  0016B8  ECAB  F013         	call	_lcdInst
  6404  0016BC  0E34               	movlw	52
  6405  0016BE  6E45               	movwf	??_displayLog& (0+255),c
  6406  0016C0  0EF2               	movlw	242
  6407  0016C2                     u5487:
  6408  0016C2  2EE8               	decfsz	wreg,f,c
  6409  0016C4  D7FE               	bra	u5487
  6410  0016C6  2E45               	decfsz	??_displayLog& (0+255),f,c
  6411  0016C8  D7FC               	bra	u5487
  6412                           
  6413                           ;interface.c: 110: printf("Run#%d    A:Next", run);
  6414  0016CA  0E7D               	movlw	low STR_42
  6415  0016CC  6E28               	movwf	printf@f,c
  6416  0016CE  0EFE               	movlw	high STR_42
  6417  0016D0  6E29               	movwf	printf@f+1,c
  6418  0016D2  C043  F02A         	movff	displayLog@run,?_printf+2
  6419  0016D6  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6420  0016DA  EC9B  F008         	call	_printf	;wreg free
  6421                           
  6422                           ;interface.c: 111: lcdInst(0b11000000);;
  6423  0016DE  0EC0               	movlw	192
  6424  0016E0  ECAB  F013         	call	_lcdInst
  6425                           
  6426                           ;interface.c: 112: printf("Start: %d:%d:%d", eepromRead(currRun*0x10 + 5), eepromRead(cu
      +                          rrRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  6427  0016E4  0ECF               	movlw	low STR_47
  6428  0016E6  6E28               	movwf	printf@f,c
  6429  0016E8  0EFE               	movlw	high STR_47
  6430  0016EA  6E29               	movwf	printf@f+1,c
  6431  0016EC  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6432  0016F0  3A45               	swapf	??_displayLog,f,c
  6433  0016F2  0EF0               	movlw	240
  6434  0016F4  1645               	andwf	??_displayLog,f,c
  6435  0016F6  5045               	movf	??_displayLog,w,c
  6436  0016F8  0F05               	addlw	5
  6437  0016FA  EC18  F013         	call	_eepromRead
  6438  0016FE  6E2A               	movwf	?_printf+2,c
  6439  001700  6A2B               	clrf	?_printf+3,c
  6440  001702  BE2A               	btfsc	?_printf+2,7,c
  6441  001704  062B               	decf	?_printf+3,f,c
  6442  001706  C04A  F046         	movff	displayLog@currRun,??_displayLog+1
  6443  00170A  3A46               	swapf	??_displayLog+1,f,c
  6444  00170C  0EF0               	movlw	240
  6445  00170E  1646               	andwf	??_displayLog+1,f,c
  6446  001710  5046               	movf	??_displayLog+1,w,c
  6447  001712  0F06               	addlw	6
  6448  001714  EC18  F013         	call	_eepromRead
  6449  001718  6E2C               	movwf	?_printf+4,c
  6450  00171A  6A2D               	clrf	?_printf+5,c
  6451  00171C  BE2C               	btfsc	?_printf+4,7,c
  6452  00171E  062D               	decf	?_printf+5,f,c
  6453  001720  C04A  F047         	movff	displayLog@currRun,??_displayLog+2
  6454  001724  3A47               	swapf	??_displayLog+2,f,c
  6455  001726  0EF0               	movlw	240
  6456  001728  1647               	andwf	??_displayLog+2,f,c
  6457  00172A  5047               	movf	??_displayLog+2,w,c
  6458  00172C  0F07               	addlw	7
  6459  00172E  EC18  F013         	call	_eepromRead
  6460  001732  6E2E               	movwf	?_printf+6,c
  6461  001734  6A2F               	clrf	?_printf+7,c
  6462  001736  BE2E               	btfsc	?_printf+6,7,c
  6463  001738  062F               	decf	?_printf+7,f,c
  6464  00173A  EC9B  F008         	call	_printf	;wreg free
  6465                           
  6466                           ;interface.c: 113: keycheck();
  6467  00173E  EC91  F013         	call	_keycheck	;wreg free
  6468                           
  6469                           ;interface.c: 114: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6470  001742  0E01               	movlw	1
  6471  001744  ECAB  F013         	call	_lcdInst
  6472  001748  0E34               	movlw	52
  6473  00174A  6E45               	movwf	??_displayLog& (0+255),c
  6474  00174C  0EF2               	movlw	242
  6475  00174E                     u5497:
  6476  00174E  2EE8               	decfsz	wreg,f,c
  6477  001750  D7FE               	bra	u5497
  6478  001752  2E45               	decfsz	??_displayLog& (0+255),f,c
  6479  001754  D7FC               	bra	u5497
  6480                           
  6481                           ;interface.c: 115: printf("Run#%d    A:Next", run);
  6482  001756  0E7D               	movlw	low STR_42
  6483  001758  6E28               	movwf	printf@f,c
  6484  00175A  0EFE               	movlw	high STR_42
  6485  00175C  6E29               	movwf	printf@f+1,c
  6486  00175E  C043  F02A         	movff	displayLog@run,?_printf+2
  6487  001762  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6488  001766  EC9B  F008         	call	_printf	;wreg free
  6489                           
  6490                           ;interface.c: 116: lcdInst(0b11000000);;
  6491  00176A  0EC0               	movlw	192
  6492  00176C  ECAB  F013         	call	_lcdInst
  6493                           
  6494                           ;interface.c: 117: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  6495  001770  0EAF               	movlw	low STR_49
  6496  001772  6E28               	movwf	printf@f,c
  6497  001774  0EFE               	movlw	high STR_49
  6498  001776  6E29               	movwf	printf@f+1,c
  6499  001778  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6500  00177C  3A45               	swapf	??_displayLog,f,c
  6501  00177E  0EF0               	movlw	240
  6502  001780  1645               	andwf	??_displayLog,f,c
  6503  001782  5045               	movf	??_displayLog,w,c
  6504  001784  0F08               	addlw	8
  6505  001786  EC18  F013         	call	_eepromRead
  6506  00178A  6E2A               	movwf	?_printf+2,c
  6507  00178C  6A2B               	clrf	?_printf+3,c
  6508  00178E  BE2A               	btfsc	?_printf+2,7,c
  6509  001790  062B               	decf	?_printf+3,f,c
  6510  001792  EC9B  F008         	call	_printf	;wreg free
  6511                           
  6512                           ;interface.c: 118: keycheck();
  6513  001796  EC91  F013         	call	_keycheck	;wreg free
  6514                           
  6515                           ;interface.c: 119: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6516  00179A  0E01               	movlw	1
  6517  00179C  ECAB  F013         	call	_lcdInst
  6518  0017A0  0E34               	movlw	52
  6519  0017A2  6E45               	movwf	??_displayLog& (0+255),c
  6520  0017A4  0EF2               	movlw	242
  6521  0017A6                     u5507:
  6522  0017A6  2EE8               	decfsz	wreg,f,c
  6523  0017A8  D7FE               	bra	u5507
  6524  0017AA  2E45               	decfsz	??_displayLog& (0+255),f,c
  6525  0017AC  D7FC               	bra	u5507
  6526                           
  6527                           ;interface.c: 120: printf("Run#%d    A:Next", run);
  6528  0017AE  0E7D               	movlw	low STR_42
  6529  0017B0  6E28               	movwf	printf@f,c
  6530  0017B2  0EFE               	movlw	high STR_42
  6531  0017B4  6E29               	movwf	printf@f+1,c
  6532  0017B6  C043  F02A         	movff	displayLog@run,?_printf+2
  6533  0017BA  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6534  0017BE  EC9B  F008         	call	_printf	;wreg free
  6535                           
  6536                           ;interface.c: 121: lcdInst(0b11000000);;
  6537  0017C2  0EC0               	movlw	192
  6538  0017C4  ECAB  F013         	call	_lcdInst
  6539                           
  6540                           ;interface.c: 122: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  6541  0017C8  0E5B               	movlw	low STR_51
  6542  0017CA  6E28               	movwf	printf@f,c
  6543  0017CC  0EFE               	movlw	high STR_51
  6544  0017CE  6E29               	movwf	printf@f+1,c
  6545  0017D0  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6546  0017D4  3A45               	swapf	??_displayLog,f,c
  6547  0017D6  0EF0               	movlw	240
  6548  0017D8  1645               	andwf	??_displayLog,f,c
  6549  0017DA  5045               	movf	??_displayLog,w,c
  6550  0017DC  0F09               	addlw	9
  6551  0017DE  EC18  F013         	call	_eepromRead
  6552  0017E2  6E2A               	movwf	?_printf+2,c
  6553  0017E4  6A2B               	clrf	?_printf+3,c
  6554  0017E6  BE2A               	btfsc	?_printf+2,7,c
  6555  0017E8  062B               	decf	?_printf+3,f,c
  6556  0017EA  EC9B  F008         	call	_printf	;wreg free
  6557                           
  6558                           ;interface.c: 123: keycheck();
  6559  0017EE  EC91  F013         	call	_keycheck	;wreg free
  6560                           
  6561                           ;interface.c: 124: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6562  0017F2  0E01               	movlw	1
  6563  0017F4  ECAB  F013         	call	_lcdInst
  6564  0017F8  0E34               	movlw	52
  6565  0017FA  6E45               	movwf	??_displayLog& (0+255),c
  6566  0017FC  0EF2               	movlw	242
  6567  0017FE                     u5517:
  6568  0017FE  2EE8               	decfsz	wreg,f,c
  6569  001800  D7FE               	bra	u5517
  6570  001802  2E45               	decfsz	??_displayLog& (0+255),f,c
  6571  001804  D7FC               	bra	u5517
  6572                           
  6573                           ;interface.c: 125: printf("Run#%d    A:Next", run);
  6574  001806  0E7D               	movlw	low STR_42
  6575  001808  6E28               	movwf	printf@f,c
  6576  00180A  0EFE               	movlw	high STR_42
  6577  00180C  6E29               	movwf	printf@f+1,c
  6578  00180E  C043  F02A         	movff	displayLog@run,?_printf+2
  6579  001812  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6580  001816  EC9B  F008         	call	_printf	;wreg free
  6581                           
  6582                           ;interface.c: 126: lcdInst(0b11000000);;
  6583  00181A  0EC0               	movlw	192
  6584  00181C  ECAB  F013         	call	_lcdInst
  6585                           
  6586                           ;interface.c: 127: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  6587  001820  0EBF               	movlw	low STR_53
  6588  001822  6E28               	movwf	printf@f,c
  6589  001824  0EFE               	movlw	high STR_53
  6590  001826  6E29               	movwf	printf@f+1,c
  6591  001828  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6592  00182C  3A45               	swapf	??_displayLog,f,c
  6593  00182E  0EF0               	movlw	240
  6594  001830  1645               	andwf	??_displayLog,f,c
  6595  001832  5045               	movf	??_displayLog,w,c
  6596  001834  0F0A               	addlw	10
  6597  001836  EC18  F013         	call	_eepromRead
  6598  00183A  6E2A               	movwf	?_printf+2,c
  6599  00183C  6A2B               	clrf	?_printf+3,c
  6600  00183E  BE2A               	btfsc	?_printf+2,7,c
  6601  001840  062B               	decf	?_printf+3,f,c
  6602  001842  EC9B  F008         	call	_printf	;wreg free
  6603                           
  6604                           ;interface.c: 128: keycheck();
  6605  001846  EC91  F013         	call	_keycheck	;wreg free
  6606                           
  6607                           ;interface.c: 129: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  6608  00184A  0E01               	movlw	1
  6609  00184C  ECAB  F013         	call	_lcdInst
  6610  001850  0E34               	movlw	52
  6611  001852  6E45               	movwf	??_displayLog& (0+255),c
  6612  001854  0EF2               	movlw	242
  6613  001856                     u5527:
  6614  001856  2EE8               	decfsz	wreg,f,c
  6615  001858  D7FE               	bra	u5527
  6616  00185A  2E45               	decfsz	??_displayLog& (0+255),f,c
  6617  00185C  D7FC               	bra	u5527
  6618                           
  6619                           ;interface.c: 130: printf("Run#%d    A:Next", run);
  6620  00185E  0E7D               	movlw	low STR_42
  6621  001860  6E28               	movwf	printf@f,c
  6622  001862  0EFE               	movlw	high STR_42
  6623  001864  6E29               	movwf	printf@f+1,c
  6624  001866  C043  F02A         	movff	displayLog@run,?_printf+2
  6625  00186A  C044  F02B         	movff	displayLog@run+1,?_printf+3
  6626  00186E  EC9B  F008         	call	_printf	;wreg free
  6627                           
  6628                           ;interface.c: 131: lcdInst(0b11000000);;
  6629  001872  0EC0               	movlw	192
  6630  001874  ECAB  F013         	call	_lcdInst
  6631                           
  6632                           ;interface.c: 132: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  6633  001878  0E6C               	movlw	low STR_55
  6634  00187A  6E28               	movwf	printf@f,c
  6635  00187C  0EFE               	movlw	high STR_55
  6636  00187E  6E29               	movwf	printf@f+1,c
  6637  001880  C04A  F045         	movff	displayLog@currRun,??_displayLog
  6638  001884  3A45               	swapf	??_displayLog,f,c
  6639  001886  0EF0               	movlw	240
  6640  001888  1645               	andwf	??_displayLog,f,c
  6641  00188A  5045               	movf	??_displayLog,w,c
  6642  00188C  0F0B               	addlw	11
  6643  00188E  EC18  F013         	call	_eepromRead
  6644  001892  6E2A               	movwf	?_printf+2,c
  6645  001894  6A2B               	clrf	?_printf+3,c
  6646  001896  BE2A               	btfsc	?_printf+2,7,c
  6647  001898  062B               	decf	?_printf+3,f,c
  6648  00189A  EC9B  F008         	call	_printf	;wreg free
  6649                           
  6650                           ;interface.c: 133: keycheck();
  6651  00189E  EC91  F013         	call	_keycheck	;wreg free
  6652  0018A2  0012               	return		;funcret
  6653  0018A4                     __end_of_displayLog:
  6654                           	opt stack 0
  6655                           tblptru	equ	0xFF8
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           intcon2	equ	0xFF1
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           indf2	equ	0xFDF
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function _printf *****************
  6668 ;; Defined at:
  6669 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  f               2   39[COMRAM] PTR const unsigned char 
  6672 ;;		 -> STR_55(17), STR_54(17), STR_53(16), STR_52(17), 
  6673 ;;		 -> STR_51(17), STR_50(17), STR_49(16), STR_48(17), 
  6674 ;;		 -> STR_47(16), STR_46(17), STR_45(21), STR_44(17), 
  6675 ;;		 -> STR_43(12), STR_42(17), STR_41(6), STR_40(8), 
  6676 ;;		 -> STR_39(15), STR_38(8), STR_37(16), STR_36(10), 
  6677 ;;		 -> STR_35(17), STR_34(16), STR_33(3), STR_32(4), 
  6678 ;;		 -> STR_31(4), STR_30(3), STR_29(6), STR_28(4), 
  6679 ;;		 -> STR_27(4), STR_26(4), STR_25(6), STR_24(9), 
  6680 ;;		 -> STR_23(9), STR_22(12), STR_21(4), STR_20(4), 
  6681 ;;		 -> STR_19(4), STR_18(4), STR_17(11), STR_16(3), 
  6682 ;;		 -> STR_15(13), STR_14(13), STR_13(13), STR_12(3), 
  6683 ;;		 -> STR_11(16), STR_10(16), STR_9(3), STR_8(16), 
  6684 ;;		 -> STR_7(16), STR_6(12), STR_5(12), STR_4(4), 
  6685 ;;		 -> STR_3(9), STR_2(16), STR_1(16), 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  idx             1   53[COMRAM] unsigned char 
  6688 ;;  val             4   58[COMRAM] unsigned long 
  6689 ;;  tmpval          4    0        struct .
  6690 ;;  cp              3    0        PTR const unsigned char 
  6691 ;;  width           2   62[COMRAM] int 
  6692 ;;  ap              2   56[COMRAM] PTR void [1]
  6693 ;;		 -> ?_printf(2), 
  6694 ;;  prec            2   54[COMRAM] int 
  6695 ;;  len             2    0        unsigned int 
  6696 ;;  c               1   65[COMRAM] char 
  6697 ;;  flag            1   64[COMRAM] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  2   39[COMRAM] int 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6707 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;Total ram usage:       27 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    4
  6714 ;; This function calls:
  6715 ;;		___lldiv
  6716 ;;		___llmod
  6717 ;;		___wmul
  6718 ;;		_isdigit
  6719 ;;		_putch
  6720 ;; This function is called by:
  6721 ;;		_main
  6722 ;;		_homescreen
  6723 ;;		_displayLog
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text16
  6728  001136                     __ptext16:
  6729                           	opt stack 0
  6730  001136                     _printf:
  6731                           	opt stack 26
  6732                           
  6733                           ;doprnt.c: 466: va_list ap;
  6734                           ;doprnt.c: 499: signed char c;
  6735                           ;doprnt.c: 501: int width;
  6736                           ;doprnt.c: 504: int prec;
  6737                           ;doprnt.c: 508: unsigned char flag;
  6738                           ;doprnt.c: 523: union {
  6739                           ;doprnt.c: 524: unsigned long vd;
  6740                           ;doprnt.c: 525: double integ;
  6741                           ;doprnt.c: 526: } tmpval;
  6742                           ;doprnt.c: 528: unsigned long val;
  6743                           ;doprnt.c: 529: unsigned len;
  6744                           ;doprnt.c: 530: const char * cp;
  6745                           ;doprnt.c: 533: *ap = __va_start();
  6746                           
  6747                           ;incstack = 0
  6748  001136  0E2A               	movlw	low (?_printf+2)
  6749  001138  6E39               	movwf	printf@ap,c
  6750  00113A  0E00               	movlw	high (?_printf+2)
  6751  00113C  6E3A               	movwf	printf@ap+1,c
  6752                           
  6753                           ;doprnt.c: 536: while(c = *f++) {
  6754  00113E  D1F7               	goto	l3318
  6755  001140                     l3176:
  6756                           
  6757                           ;doprnt.c: 538: if(c != '%')
  6758  001140  0E25               	movlw	37
  6759  001142  1842               	xorwf	printf@c,w,c
  6760  001144  B4D8               	btfsc	status,2,c
  6761  001146  D004               	goto	l3180
  6762                           
  6763                           ;doprnt.c: 540: {
  6764                           ;doprnt.c: 541: (putch(c) );
  6765  001148  5042               	movf	printf@c,w,c
  6766  00114A  ECA5  F013         	call	_putch
  6767                           
  6768                           ;doprnt.c: 542: continue;
  6769  00114E  D1EF               	goto	l3318
  6770  001150                     l3180:
  6771                           
  6772                           ;doprnt.c: 543: }
  6773                           ;doprnt.c: 546: width = 0;
  6774  001150  0E00               	movlw	0
  6775  001152  6E40               	movwf	printf@width+1,c
  6776  001154  0E00               	movlw	0
  6777  001156  6E3F               	movwf	printf@width,c
  6778                           
  6779                           ;doprnt.c: 548: flag = 0;
  6780  001158  0E00               	movlw	0
  6781  00115A  6E41               	movwf	printf@flag,c
  6782                           
  6783                           ;doprnt.c: 551: switch(*f) {
  6784                           
  6785                           ;doprnt.c: 550: for(;;) {
  6786  00115C  D003               	goto	l3186
  6787  00115E                     l3182:
  6788                           
  6789                           ;doprnt.c: 580: flag |= 0x04;
  6790  00115E  8441               	bsf	printf@flag,2,c
  6791                           
  6792                           ;doprnt.c: 581: f++;
  6793  001160  4A28               	infsnz	printf@f,f,c
  6794  001162  2A29               	incf	printf@f+1,f,c
  6795  001164                     l3186:
  6796  001164  C028  FFF6         	movff	printf@f,tblptrl
  6797  001168  C029  FFF7         	movff	printf@f+1,tblptrh
  6798  00116C                     	if	0	;tblptru may be non-zero
  6799  00116C                     	endif
  6800  00116C                     	if	0	;tblptru may be non-zero
  6801  00116C                     	endif
  6802  00116C  0008               	tblrd		*
  6803  00116E  50F5               	movf	tablat,w,c
  6804                           
  6805                           ; Switch size 1, requested type "space"
  6806                           ; Number of cases is 1, Range of values is 48 to 48
  6807                           ; switch strategies available:
  6808                           ; Name         Instructions Cycles
  6809                           ; simple_byte            4     3 (average)
  6810                           ;	Chosen strategy is simple_byte
  6811  001170  0A30               	xorlw	48	; case 48
  6812  001172  B4D8               	btfsc	status,2,c
  6813  001174  D7F4               	goto	l3182
  6814                           
  6815                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6816                           
  6817                           ;doprnt.c: 586: }
  6818                           
  6819                           ;doprnt.c: 585: break;
  6820  001176  C028  FFF6         	movff	printf@f,tblptrl
  6821  00117A  C029  FFF7         	movff	printf@f+1,tblptrh
  6822  00117E                     	if	0	;tblptru may be non-zero
  6823  00117E                     	endif
  6824  00117E                     	if	0	;tblptru may be non-zero
  6825  00117E                     	endif
  6826  00117E  0008               	tblrd		*
  6827  001180  50F5               	movf	tablat,w,c
  6828  001182  EC77  F013         	call	_isdigit
  6829  001186  A0D8               	btfss	status,0,c
  6830  001188  D03A               	goto	l3208
  6831                           
  6832                           ;doprnt.c: 598: width = 0;
  6833  00118A  0E00               	movlw	0
  6834  00118C  6E40               	movwf	printf@width+1,c
  6835  00118E  0E00               	movlw	0
  6836  001190  6E3F               	movwf	printf@width,c
  6837  001192                     l3192:
  6838                           
  6839                           ;doprnt.c: 600: width *= 10;
  6840  001192  C03F  F012         	movff	printf@width,___wmul@multiplier
  6841  001196  C040  F013         	movff	printf@width+1,___wmul@multiplier+1
  6842  00119A  0E00               	movlw	0
  6843  00119C  6E15               	movwf	___wmul@multiplicand+1,c
  6844  00119E  0E0A               	movlw	10
  6845  0011A0  6E14               	movwf	___wmul@multiplicand,c
  6846  0011A2  EC52  F013         	call	___wmul	;wreg free
  6847  0011A6  C012  F03F         	movff	?___wmul,printf@width
  6848  0011AA  C013  F040         	movff	?___wmul+1,printf@width+1
  6849                           
  6850                           ;doprnt.c: 601: width += *f++ - '0';
  6851  0011AE  0ED0               	movlw	208
  6852  0011B0  6E32               	movwf	??_printf& (0+255),c
  6853  0011B2  0EFF               	movlw	255
  6854  0011B4  6E33               	movwf	(??_printf+1)& (0+255),c
  6855  0011B6  C028  FFF6         	movff	printf@f,tblptrl
  6856  0011BA  C029  FFF7         	movff	printf@f+1,tblptrh
  6857  0011BE                     	if	0	;tblptru may be non-zero
  6858  0011BE                     	endif
  6859  0011BE                     	if	0	;tblptru may be non-zero
  6860  0011BE                     	endif
  6861  0011BE  0008               	tblrd		*
  6862  0011C0  50F5               	movf	tablat,w,c
  6863  0011C2  6E34               	movwf	(??_printf+2)& (0+255),c
  6864  0011C4  6A35               	clrf	(??_printf+3)& (0+255),c
  6865  0011C6  5032               	movf	??_printf,w,c
  6866  0011C8  2634               	addwf	??_printf+2,f,c
  6867  0011CA  5033               	movf	??_printf+1,w,c
  6868  0011CC  2235               	addwfc	??_printf+3,f,c
  6869  0011CE  5034               	movf	??_printf+2,w,c
  6870  0011D0  263F               	addwf	printf@width,f,c
  6871  0011D2  5035               	movf	??_printf+3,w,c
  6872  0011D4  2240               	addwfc	printf@width+1,f,c
  6873  0011D6  4A28               	infsnz	printf@f,f,c
  6874  0011D8  2A29               	incf	printf@f+1,f,c
  6875                           
  6876                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6877  0011DA  C028  FFF6         	movff	printf@f,tblptrl
  6878  0011DE  C029  FFF7         	movff	printf@f+1,tblptrh
  6879  0011E2                     	if	0	;tblptru may be non-zero
  6880  0011E2                     	endif
  6881  0011E2                     	if	0	;tblptru may be non-zero
  6882  0011E2                     	endif
  6883  0011E2  0008               	tblrd		*
  6884  0011E4  50F5               	movf	tablat,w,c
  6885  0011E6  EC77  F013         	call	_isdigit
  6886  0011EA  A0D8               	btfss	status,0,c
  6887  0011EC  D008               	goto	l3208
  6888  0011EE  D7D1               	goto	l3192
  6889  0011F0                     l3200:
  6890                           
  6891                           ;doprnt.c: 643: flag |= 0x10;
  6892  0011F0  8841               	bsf	printf@flag,4,c
  6893                           
  6894                           ;doprnt.c: 644: goto loop;
  6895  0011F2  D005               	goto	l3208
  6896  0011F4                     l3202:
  6897                           
  6898                           ;doprnt.c: 721: flag |= 0x80;
  6899  0011F4  8E41               	bsf	printf@flag,7,c
  6900                           
  6901                           ;doprnt.c: 723: break;
  6902  0011F6  D020               	goto	l3210
  6903  0011F8                     l3204:
  6904                           
  6905                           ;doprnt.c: 818: flag |= 0xC0;
  6906  0011F8  0EC0               	movlw	192
  6907  0011FA  1241               	iorwf	printf@flag,f,c
  6908                           
  6909                           ;doprnt.c: 822: }
  6910                           
  6911                           ;doprnt.c: 819: break;
  6912  0011FC  D01D               	goto	l3210
  6913  0011FE                     l3208:
  6914  0011FE  C028  FFF6         	movff	printf@f,tblptrl
  6915  001202  C029  FFF7         	movff	printf@f+1,tblptrh
  6916  001206  4A28               	infsnz	printf@f,f,c
  6917  001208  2A29               	incf	printf@f+1,f,c
  6918  00120A                     	if	0	;tblptru may be non-zero
  6919  00120A                     	endif
  6920  00120A                     	if	0	;tblptru may be non-zero
  6921  00120A                     	endif
  6922  00120A  0008               	tblrd		*
  6923  00120C  CFF5 F042          	movff	tablat,printf@c
  6924  001210  5042               	movf	printf@c,w,c
  6925                           
  6926                           ; Switch size 1, requested type "space"
  6927                           ; Number of cases is 6, Range of values is 0 to 120
  6928                           ; switch strategies available:
  6929                           ; Name         Instructions Cycles
  6930                           ; simple_byte           19    10 (average)
  6931                           ;	Chosen strategy is simple_byte
  6932  001212  0A00               	xorlw	0	; case 0
  6933  001214  B4D8               	btfsc	status,2,c
  6934  001216  0012               	return	
  6935  001218  0A64               	xorlw	100	; case 100
  6936  00121A  B4D8               	btfsc	status,2,c
  6937  00121C  D00D               	goto	l3210
  6938  00121E  0A0D               	xorlw	13	; case 105
  6939  001220  B4D8               	btfsc	status,2,c
  6940  001222  D00A               	goto	l3210
  6941  001224  0A05               	xorlw	5	; case 108
  6942  001226  B4D8               	btfsc	status,2,c
  6943  001228  D7E3               	goto	l3200
  6944  00122A  0A19               	xorlw	25	; case 117
  6945  00122C  B4D8               	btfsc	status,2,c
  6946  00122E  D7E4               	goto	l3204
  6947  001230  0A0D               	xorlw	13	; case 120
  6948  001232  B4D8               	btfsc	status,2,c
  6949  001234  D7DF               	goto	l3202
  6950  001236  D17B               	goto	l3318
  6951  001238                     l3210:
  6952                           
  6953                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  6954  001238  C041  F032         	movff	printf@flag,??_printf
  6955  00123C  0EC0               	movlw	192
  6956  00123E  1632               	andwf	??_printf,f,c
  6957  001240  A4D8               	btfss	status,2,c
  6958  001242  D02E               	goto	l715
  6959                           
  6960                           ;doprnt.c: 1253: {
  6961                           ;doprnt.c: 1255: if(flag & 0x10)
  6962  001244  A841               	btfss	printf@flag,4,c
  6963  001246  D00E               	goto	l3218
  6964                           
  6965                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6966  001248  C039  FFD9         	movff	printf@ap,fsr2l
  6967  00124C  C03A  FFDA         	movff	printf@ap+1,fsr2h
  6968  001250  CFDE F03B          	movff	postinc2,printf@val
  6969  001254  CFDE F03C          	movff	postinc2,printf@val+1
  6970  001258  CFDE F03D          	movff	postinc2,printf@val+2
  6971  00125C  CFDE F03E          	movff	postinc2,printf@val+3
  6972  001260  0E04               	movlw	4
  6973  001262  D00E               	goto	L12
  6974  001264                     l3218:
  6975                           
  6976                           ;doprnt.c: 1257: else
  6977                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6978  001264  C039  FFD9         	movff	printf@ap,fsr2l
  6979  001268  C03A  FFDA         	movff	printf@ap+1,fsr2h
  6980  00126C  CFDE F03B          	movff	postinc2,printf@val
  6981  001270  CFDD F03C          	movff	postdec2,printf@val+1
  6982  001274  0E00               	movlw	0
  6983  001276  BE3C               	btfsc	printf@val+1,7,c
  6984  001278  0EFF               	movlw	-1
  6985  00127A  6E3D               	movwf	printf@val+2,c
  6986  00127C  6E3E               	movwf	printf@val+3,c
  6987  00127E  0E02               	movlw	2
  6988  001280                     L12:
  6989  001280  2639               	addwf	printf@ap,f,c
  6990  001282  0E00               	movlw	0
  6991  001284  223A               	addwfc	printf@ap+1,f,c
  6992                           
  6993                           ;doprnt.c: 1261: if((long)val < 0) {
  6994  001286  AE3E               	btfss	printf@val+3,7,c
  6995  001288  D06A               	goto	l3266
  6996                           
  6997                           ;doprnt.c: 1262: flag |= 0x03;
  6998  00128A  0E03               	movlw	3
  6999  00128C  1241               	iorwf	printf@flag,f,c
  7000                           
  7001                           ;doprnt.c: 1263: val = -val;
  7002  00128E  1E3E               	comf	printf@val+3,f,c
  7003  001290  1E3D               	comf	printf@val+2,f,c
  7004  001292  1E3C               	comf	printf@val+1,f,c
  7005  001294  6C3B               	negf	printf@val,c
  7006  001296  0E00               	movlw	0
  7007  001298  223C               	addwfc	printf@val+1,f,c
  7008  00129A  223D               	addwfc	printf@val+2,f,c
  7009  00129C  223E               	addwfc	printf@val+3,f,c
  7010                           
  7011                           ;doprnt.c: 1264: }
  7012                           ;doprnt.c: 1266: }
  7013  00129E  D05F               	goto	l3266
  7014  0012A0                     l715:
  7015                           
  7016                           ;doprnt.c: 1268: else
  7017                           ;doprnt.c: 1273: {
  7018                           ;doprnt.c: 1281: if(flag & 0x10)
  7019  0012A0  A841               	btfss	printf@flag,4,c
  7020  0012A2  D00E               	goto	l3232
  7021                           
  7022                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7023  0012A4  C039  FFD9         	movff	printf@ap,fsr2l
  7024  0012A8  C03A  FFDA         	movff	printf@ap+1,fsr2h
  7025  0012AC  CFDE F03B          	movff	postinc2,printf@val
  7026  0012B0  CFDE F03C          	movff	postinc2,printf@val+1
  7027  0012B4  CFDE F03D          	movff	postinc2,printf@val+2
  7028  0012B8  CFDE F03E          	movff	postinc2,printf@val+3
  7029  0012BC  0E04               	movlw	4
  7030  0012BE  D00F               	goto	L13
  7031  0012C0                     l3232:
  7032                           
  7033                           ;doprnt.c: 1283: else
  7034                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7035  0012C0  C039  FFD9         	movff	printf@ap,fsr2l
  7036  0012C4  C03A  FFDA         	movff	printf@ap+1,fsr2h
  7037  0012C8  CFDE F032          	movff	postinc2,??_printf
  7038  0012CC  CFDD F033          	movff	postdec2,??_printf+1
  7039  0012D0  C032  F03B         	movff	??_printf,printf@val
  7040  0012D4  C033  F03C         	movff	??_printf+1,printf@val+1
  7041  0012D8  6A3D               	clrf	printf@val+2,c
  7042  0012DA  6A3E               	clrf	printf@val+3,c
  7043  0012DC  0E02               	movlw	2
  7044  0012DE                     L13:
  7045  0012DE  2639               	addwf	printf@ap,f,c
  7046  0012E0  0E00               	movlw	0
  7047  0012E2  223A               	addwfc	printf@ap+1,f,c
  7048                           
  7049                           ;doprnt.c: 1287: }
  7050                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  7051  0012E4  D03C               	goto	l3266
  7052  0012E6                     l3236:
  7053                           
  7054                           ;doprnt.c: 1302: case 0xC0:
  7055                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7056  0012E6  0E01               	movlw	1
  7057  0012E8  6E42               	movwf	printf@c,c
  7058  0012EA                     l3238:
  7059  0012EA  0E0A               	movlw	10
  7060  0012EC  1842               	xorwf	printf@c,w,c
  7061  0012EE  B4D8               	btfsc	status,2,c
  7062  0012F0  D041               	goto	l3268
  7063                           
  7064                           ;doprnt.c: 1306: if(val < dpowers[c])
  7065  0012F2  5042               	movf	printf@c,w,c
  7066  0012F4  0D04               	mullw	4
  7067  0012F6  0ED5               	movlw	low _dpowers
  7068  0012F8  24F3               	addwf	prodl,w,c
  7069  0012FA  6EF6               	movwf	tblptrl,c
  7070  0012FC  0EFD               	movlw	high _dpowers
  7071  0012FE  20F4               	addwfc	prodh,w,c
  7072  001300  6EF7               	movwf	tblptrh,c
  7073  001302                     	if	0	;There are less than 3 active tblptr bytes
  7074  001302                     	endif
  7075  001302  0009               	tblrd		*+
  7076  001304  50F5               	movf	tablat,w,c
  7077  001306  5C3B               	subwf	printf@val,w,c
  7078  001308  0009               	tblrd		*+
  7079  00130A  50F5               	movf	tablat,w,c
  7080  00130C  583C               	subwfb	printf@val+1,w,c
  7081  00130E  0009               	tblrd		*+
  7082  001310  50F5               	movf	tablat,w,c
  7083  001312  583D               	subwfb	printf@val+2,w,c
  7084  001314  0009               	tblrd		*+
  7085  001316  50F5               	movf	tablat,w,c
  7086  001318  583E               	subwfb	printf@val+3,w,c
  7087  00131A  A0D8               	btfss	status,0,c
  7088  00131C  D02B               	goto	l3268
  7089                           
  7090                           ;doprnt.c: 1307: break;
  7091  00131E  2A42               	incf	printf@c,f,c
  7092  001320  D7E4               	goto	l3238
  7093  001322                     l3250:
  7094                           
  7095                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  7096  001322  0E01               	movlw	1
  7097  001324  6E42               	movwf	printf@c,c
  7098  001326                     l3252:
  7099  001326  0E08               	movlw	8
  7100  001328  1842               	xorwf	printf@c,w,c
  7101  00132A  B4D8               	btfsc	status,2,c
  7102  00132C  D023               	goto	l3268
  7103                           
  7104                           ;doprnt.c: 1317: if(val < hexpowers[c])
  7105  00132E  5042               	movf	printf@c,w,c
  7106  001330  0D04               	mullw	4
  7107  001332  0EFD               	movlw	low _hexpowers
  7108  001334  24F3               	addwf	prodl,w,c
  7109  001336  6EF6               	movwf	tblptrl,c
  7110  001338  0EFD               	movlw	high _hexpowers
  7111  00133A  20F4               	addwfc	prodh,w,c
  7112  00133C  6EF7               	movwf	tblptrh,c
  7113  00133E                     	if	0	;There are less than 3 active tblptr bytes
  7114  00133E                     	endif
  7115  00133E  0009               	tblrd		*+
  7116  001340  50F5               	movf	tablat,w,c
  7117  001342  5C3B               	subwf	printf@val,w,c
  7118  001344  0009               	tblrd		*+
  7119  001346  50F5               	movf	tablat,w,c
  7120  001348  583C               	subwfb	printf@val+1,w,c
  7121  00134A  0009               	tblrd		*+
  7122  00134C  50F5               	movf	tablat,w,c
  7123  00134E  583D               	subwfb	printf@val+2,w,c
  7124  001350  0009               	tblrd		*+
  7125  001352  50F5               	movf	tablat,w,c
  7126  001354  583E               	subwfb	printf@val+3,w,c
  7127  001356  A0D8               	btfss	status,0,c
  7128  001358  D00D               	goto	l3268
  7129                           
  7130                           ;doprnt.c: 1318: break;
  7131  00135A  2A42               	incf	printf@c,f,c
  7132  00135C  D7E4               	goto	l3252
  7133  00135E                     l3266:
  7134  00135E  5041               	movf	printf@flag,w,c
  7135  001360  0BC0               	andlw	192
  7136                           
  7137                           ; Switch size 1, requested type "space"
  7138                           ; Number of cases is 3, Range of values is 0 to 192
  7139                           ; switch strategies available:
  7140                           ; Name         Instructions Cycles
  7141                           ; simple_byte           10     6 (average)
  7142                           ;	Chosen strategy is simple_byte
  7143  001362  0A00               	xorlw	0	; case 0
  7144  001364  B4D8               	btfsc	status,2,c
  7145  001366  D7BF               	goto	l3236
  7146  001368  0A80               	xorlw	128	; case 128
  7147  00136A  B4D8               	btfsc	status,2,c
  7148  00136C  D7DA               	goto	l3250
  7149  00136E  0A40               	xorlw	64	; case 192
  7150  001370  B4D8               	btfsc	status,2,c
  7151  001372  D7B9               	goto	l3236
  7152  001374                     l3268:
  7153                           
  7154                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7155  001374  503F               	movf	printf@width,w,c
  7156  001376  1040               	iorwf	printf@width+1,w,c
  7157  001378  B4D8               	btfsc	status,2,c
  7158  00137A  D009               	goto	l3274
  7159  00137C  C041  F032         	movff	printf@flag,??_printf
  7160  001380  0E03               	movlw	3
  7161  001382  1632               	andwf	??_printf,f,c
  7162  001384  B4D8               	btfsc	status,2,c
  7163  001386  D003               	goto	l3274
  7164                           
  7165                           ;doprnt.c: 1346: width--;
  7166  001388  063F               	decf	printf@width,f,c
  7167  00138A  A0D8               	btfss	status,0,c
  7168  00138C  0640               	decf	printf@width+1,f,c
  7169  00138E                     l3274:
  7170                           
  7171                           ;doprnt.c: 1381: if(width > c)
  7172  00138E  0E80               	movlw	128
  7173  001390  BE42               	btfsc	printf@c,7,c
  7174  001392  0E7F               	movlw	127
  7175  001394  6E32               	movwf	??_printf& (0+255),c
  7176  001396  503F               	movf	printf@width,w,c
  7177  001398  5C42               	subwf	printf@c,w,c
  7178  00139A  5040               	movf	printf@width+1,w,c
  7179  00139C  0A80               	xorlw	128
  7180  00139E  5832               	subwfb	??_printf& (0+255),w,c
  7181  0013A0  B0D8               	btfsc	status,0,c
  7182  0013A2  D007               	goto	l3278
  7183                           
  7184                           ;doprnt.c: 1382: width -= c;
  7185  0013A4  5042               	movf	printf@c,w,c
  7186  0013A6  5E3F               	subwf	printf@width,f,c
  7187  0013A8  0E00               	movlw	0
  7188  0013AA  BE42               	btfsc	printf@c,7,c
  7189  0013AC  0EFF               	movlw	255
  7190  0013AE  5A40               	subwfb	printf@width+1,f,c
  7191  0013B0  D004               	goto	l3280
  7192  0013B2                     l3278:
  7193                           
  7194                           ;doprnt.c: 1383: else
  7195                           ;doprnt.c: 1384: width = 0;
  7196  0013B2  0E00               	movlw	0
  7197  0013B4  6E40               	movwf	printf@width+1,c
  7198  0013B6  0E00               	movlw	0
  7199  0013B8  6E3F               	movwf	printf@width,c
  7200  0013BA                     l3280:
  7201                           
  7202                           ;doprnt.c: 1387: if(flag & 0x04) {
  7203  0013BA  A441               	btfss	printf@flag,2,c
  7204  0013BC  D014               	goto	l3292
  7205                           
  7206                           ;doprnt.c: 1392: if(flag & 0x03)
  7207  0013BE  C041  F032         	movff	printf@flag,??_printf
  7208  0013C2  0E03               	movlw	3
  7209  0013C4  1632               	andwf	??_printf,f,c
  7210  0013C6  B4D8               	btfsc	status,2,c
  7211  0013C8  D003               	goto	l3286
  7212                           
  7213                           ;doprnt.c: 1393: (putch('-') );
  7214  0013CA  0E2D               	movlw	45
  7215  0013CC  ECA5  F013         	call	_putch
  7216  0013D0                     l3286:
  7217                           
  7218                           ;doprnt.c: 1415: if(width)
  7219  0013D0  503F               	movf	printf@width,w,c
  7220  0013D2  1040               	iorwf	printf@width+1,w,c
  7221  0013D4  B4D8               	btfsc	status,2,c
  7222  0013D6  D01E               	goto	l3302
  7223                           
  7224                           ;doprnt.c: 1417: (putch('0') );
  7225                           
  7226                           ;doprnt.c: 1416: do
  7227  0013D8  0E30               	movlw	48
  7228  0013DA  ECA5  F013         	call	_putch
  7229                           
  7230                           ;doprnt.c: 1418: while(--width);
  7231  0013DE  063F               	decf	printf@width,f,c
  7232  0013E0  A0D8               	btfss	status,0,c
  7233  0013E2  0640               	decf	printf@width+1,f,c
  7234  0013E4  D7F5               	goto	l3286
  7235  0013E6                     l3292:
  7236                           
  7237                           ;doprnt.c: 1422: {
  7238                           ;doprnt.c: 1424: if(width
  7239                           ;doprnt.c: 1428: )
  7240  0013E6  503F               	movf	printf@width,w,c
  7241  0013E8  1040               	iorwf	printf@width+1,w,c
  7242  0013EA  B4D8               	btfsc	status,2,c
  7243  0013EC  D00A               	goto	l3298
  7244  0013EE                     l3294:
  7245                           
  7246                           ;doprnt.c: 1430: (putch(' ') );
  7247  0013EE  0E20               	movlw	32
  7248  0013F0  ECA5  F013         	call	_putch
  7249                           
  7250                           ;doprnt.c: 1431: while(--width);
  7251  0013F4  063F               	decf	printf@width,f,c
  7252  0013F6  A0D8               	btfss	status,0,c
  7253  0013F8  0640               	decf	printf@width+1,f,c
  7254  0013FA  503F               	movf	printf@width,w,c
  7255  0013FC  1040               	iorwf	printf@width+1,w,c
  7256  0013FE  A4D8               	btfss	status,2,c
  7257  001400  D7F6               	goto	l3294
  7258  001402                     l3298:
  7259                           
  7260                           ;doprnt.c: 1438: if(flag & 0x03)
  7261  001402  C041  F032         	movff	printf@flag,??_printf
  7262  001406  0E03               	movlw	3
  7263  001408  1632               	andwf	??_printf,f,c
  7264  00140A  B4D8               	btfsc	status,2,c
  7265  00140C  D003               	goto	l3302
  7266                           
  7267                           ;doprnt.c: 1439: (putch('-') );
  7268  00140E  0E2D               	movlw	45
  7269  001410  ECA5  F013         	call	_putch
  7270  001414                     l3302:
  7271                           
  7272                           ;doprnt.c: 1469: }
  7273                           ;doprnt.c: 1472: prec = c;
  7274  001414  5042               	movf	printf@c,w,c
  7275  001416  6E37               	movwf	printf@prec,c
  7276  001418  6A38               	clrf	printf@prec+1,c
  7277  00141A  BE37               	btfsc	printf@prec,7,c
  7278  00141C  0638               	decf	printf@prec+1,f,c
  7279                           
  7280                           ;doprnt.c: 1474: while(prec--) {
  7281  00141E  D07F               	goto	l3316
  7282  001420                     l3304:
  7283                           
  7284                           ;doprnt.c: 1486: case 0xC0:
  7285                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7286  001420  C037  F032         	movff	printf@prec,??_printf
  7287  001424  C038  F033         	movff	printf@prec+1,??_printf+1
  7288  001428  90D8               	bcf	status,0,c
  7289  00142A  3632               	rlcf	??_printf,f,c
  7290  00142C  3633               	rlcf	??_printf+1,f,c
  7291  00142E  90D8               	bcf	status,0,c
  7292  001430  3632               	rlcf	??_printf,f,c
  7293  001432  3633               	rlcf	??_printf+1,f,c
  7294  001434  0ED5               	movlw	low _dpowers
  7295  001436  2432               	addwf	??_printf,w,c
  7296  001438  6EF6               	movwf	tblptrl,c
  7297  00143A  0EFD               	movlw	high _dpowers
  7298  00143C  2033               	addwfc	??_printf+1,w,c
  7299  00143E  6EF7               	movwf	tblptrh,c
  7300  001440                     	if	0	;There are less than 3 active tblptr bytes
  7301  001440                     	endif
  7302  001440  0009               	tblrd		*+
  7303  001442  CFF5 F016          	movff	tablat,___lldiv@divisor
  7304  001446  0009               	tblrd		*+
  7305  001448  CFF5 F017          	movff	tablat,___lldiv@divisor+1
  7306  00144C  0009               	tblrd		*+
  7307  00144E  CFF5 F018          	movff	tablat,___lldiv@divisor+2
  7308  001452  000A               	tblrd		*-
  7309  001454  CFF5 F019          	movff	tablat,___lldiv@divisor+3
  7310  001458  C03B  F012         	movff	printf@val,___lldiv@dividend
  7311  00145C  C03C  F013         	movff	printf@val+1,___lldiv@dividend+1
  7312  001460  C03D  F014         	movff	printf@val+2,___lldiv@dividend+2
  7313  001464  C03E  F015         	movff	printf@val+3,___lldiv@dividend+3
  7314  001468  EC22  F011         	call	___lldiv	;wreg free
  7315  00146C  C012  F01F         	movff	?___lldiv,___llmod@dividend
  7316  001470  C013  F020         	movff	?___lldiv+1,___llmod@dividend+1
  7317  001474  C014  F021         	movff	?___lldiv+2,___llmod@dividend+2
  7318  001478  C015  F022         	movff	?___lldiv+3,___llmod@dividend+3
  7319  00147C  0E0A               	movlw	10
  7320  00147E  6E23               	movwf	___llmod@divisor,c
  7321  001480  0E00               	movlw	0
  7322  001482  6E24               	movwf	___llmod@divisor+1,c
  7323  001484  0E00               	movlw	0
  7324  001486  6E25               	movwf	___llmod@divisor+2,c
  7325  001488  0E00               	movlw	0
  7326  00148A  6E26               	movwf	___llmod@divisor+3,c
  7327  00148C  ECD3  F011         	call	___llmod	;wreg free
  7328  001490  501F               	movf	?___llmod,w,c
  7329  001492  0F30               	addlw	48
  7330  001494  6E42               	movwf	printf@c,c
  7331                           
  7332                           ;doprnt.c: 1491: break;
  7333  001496  D040               	goto	l3314
  7334  001498                     l3306:
  7335                           
  7336                           ;doprnt.c: 1499: {
  7337                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  7338  001498  C03B  F012         	movff	printf@val,___lldiv@dividend
  7339  00149C  C03C  F013         	movff	printf@val+1,___lldiv@dividend+1
  7340  0014A0  C03D  F014         	movff	printf@val+2,___lldiv@dividend+2
  7341  0014A4  C03E  F015         	movff	printf@val+3,___lldiv@dividend+3
  7342  0014A8  C037  F032         	movff	printf@prec,??_printf
  7343  0014AC  C038  F033         	movff	printf@prec+1,??_printf+1
  7344  0014B0  90D8               	bcf	status,0,c
  7345  0014B2  3632               	rlcf	??_printf,f,c
  7346  0014B4  3633               	rlcf	??_printf+1,f,c
  7347  0014B6  90D8               	bcf	status,0,c
  7348  0014B8  3632               	rlcf	??_printf,f,c
  7349  0014BA  3633               	rlcf	??_printf+1,f,c
  7350  0014BC  0EFD               	movlw	low _hexpowers
  7351  0014BE  2432               	addwf	??_printf,w,c
  7352  0014C0  6EF6               	movwf	tblptrl,c
  7353  0014C2  0EFD               	movlw	high _hexpowers
  7354  0014C4  2033               	addwfc	??_printf+1,w,c
  7355  0014C6  6EF7               	movwf	tblptrh,c
  7356  0014C8                     	if	0	;There are less than 3 active tblptr bytes
  7357  0014C8                     	endif
  7358  0014C8  0009               	tblrd		*+
  7359  0014CA  CFF5 F016          	movff	tablat,___lldiv@divisor
  7360  0014CE  0009               	tblrd		*+
  7361  0014D0  CFF5 F017          	movff	tablat,___lldiv@divisor+1
  7362  0014D4  0009               	tblrd		*+
  7363  0014D6  CFF5 F018          	movff	tablat,___lldiv@divisor+2
  7364  0014DA  000A               	tblrd		*-
  7365  0014DC  CFF5 F019          	movff	tablat,___lldiv@divisor+3
  7366  0014E0  EC22  F011         	call	___lldiv	;wreg free
  7367  0014E4  5012               	movf	?___lldiv,w,c
  7368  0014E6  0B0F               	andlw	15
  7369  0014E8  6E36               	movwf	printf@idx,c
  7370                           
  7371                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  7372  0014EA  5036               	movf	printf@idx,w,c
  7373  0014EC  0D01               	mullw	1
  7374  0014EE  0E4A               	movlw	low STR_56
  7375  0014F0  24F3               	addwf	prodl,w,c
  7376  0014F2  6EF6               	movwf	tblptrl,c
  7377  0014F4  0EFE               	movlw	high STR_56
  7378  0014F6  20F4               	addwfc	prodh,w,c
  7379  0014F8  6EF7               	movwf	tblptrh,c
  7380  0014FA                     	if	0	;There are less than 3 active tblptr bytes
  7381  0014FA                     	endif
  7382  0014FA  0008               	tblrd		*
  7383  0014FC  CFF5 F042          	movff	tablat,printf@c
  7384                           
  7385                           ;doprnt.c: 1523: }
  7386                           
  7387                           ;doprnt.c: 1508: }
  7388                           ;doprnt.c: 1510: break;
  7389  001500  D00B               	goto	l3314
  7390  001502                     l3312:
  7391  001502  5041               	movf	printf@flag,w,c
  7392  001504  0BC0               	andlw	192
  7393                           
  7394                           ; Switch size 1, requested type "space"
  7395                           ; Number of cases is 3, Range of values is 0 to 192
  7396                           ; switch strategies available:
  7397                           ; Name         Instructions Cycles
  7398                           ; simple_byte           10     6 (average)
  7399                           ;	Chosen strategy is simple_byte
  7400  001506  0A00               	xorlw	0	; case 0
  7401  001508  B4D8               	btfsc	status,2,c
  7402  00150A  D78A               	goto	l3304
  7403  00150C  0A80               	xorlw	128	; case 128
  7404  00150E  B4D8               	btfsc	status,2,c
  7405  001510  D7C3               	goto	l3306
  7406  001512  0A40               	xorlw	64	; case 192
  7407  001514  B4D8               	btfsc	status,2,c
  7408  001516  D784               	goto	l3304
  7409  001518                     l3314:
  7410                           
  7411                           ;doprnt.c: 1524: (putch(c) );
  7412  001518  5042               	movf	printf@c,w,c
  7413  00151A  ECA5  F013         	call	_putch
  7414  00151E                     l3316:
  7415  00151E  0637               	decf	printf@prec,f,c
  7416  001520  A0D8               	btfss	status,0,c
  7417  001522  0638               	decf	printf@prec+1,f,c
  7418  001524  2837               	incf	printf@prec,w,c
  7419  001526  E1ED               	bnz	l3312
  7420  001528  2838               	incf	printf@prec+1,w,c
  7421  00152A  A4D8               	btfss	status,2,c
  7422  00152C  D7EA               	goto	l3312
  7423  00152E                     l3318:
  7424  00152E  C028  FFF6         	movff	printf@f,tblptrl
  7425  001532  C029  FFF7         	movff	printf@f+1,tblptrh
  7426  001536  4A28               	infsnz	printf@f,f,c
  7427  001538  2A29               	incf	printf@f+1,f,c
  7428  00153A                     	if	0	;tblptru may be non-zero
  7429  00153A                     	endif
  7430  00153A                     	if	0	;tblptru may be non-zero
  7431  00153A                     	endif
  7432  00153A  0008               	tblrd		*
  7433  00153C  CFF5 F042          	movff	tablat,printf@c
  7434  001540  5042               	movf	printf@c,w,c
  7435  001542  B4D8               	btfsc	status,2,c
  7436  001544  0012               	return	
  7437  001546  D5FC               	goto	l3176
  7438  001548                     __end_of_printf:
  7439                           	opt stack 0
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           intcon2	equ	0xFF1
  7448                           postinc0	equ	0xFEE
  7449                           wreg	equ	0xFE8
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _putch *****************
  7458 ;; Defined at:
  7459 ;;		line 27 in file "lcd.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  data            1    wreg     unsigned char 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  data            1   19[COMRAM] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;Total ram usage:        1 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    3
  7480 ;; This function calls:
  7481 ;;		_lcdNibble
  7482 ;; This function is called by:
  7483 ;;		_printf
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text17
  7488  00274A                     __ptext17:
  7489                           	opt stack 0
  7490  00274A                     _putch:
  7491                           	opt stack 26
  7492                           
  7493                           ;incstack = 0
  7494                           ;putch@data stored from wreg
  7495  00274A  6E14               	movwf	putch@data,c
  7496                           
  7497                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  7498  00274C  848C               	bsf	3980,2,c	;volatile
  7499                           
  7500                           ;lcd.c: 29: lcdNibble(data);
  7501  00274E  5014               	movf	putch@data,w,c
  7502  002750  EC64  F012         	call	_lcdNibble
  7503  002754  0012               	return		;funcret
  7504  002756                     __end_of_putch:
  7505                           	opt stack 0
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           intcon	equ	0xFF2
  7513                           intcon2	equ	0xFF1
  7514                           postinc0	equ	0xFEE
  7515                           wreg	equ	0xFE8
  7516                           indf2	equ	0xFDF
  7517                           postinc2	equ	0xFDE
  7518                           postdec2	equ	0xFDD
  7519                           fsr2h	equ	0xFDA
  7520                           fsr2l	equ	0xFD9
  7521                           status	equ	0xFD8
  7522                           
  7523 ;; *************** function _isdigit *****************
  7524 ;; Defined at:
  7525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;  c               1    wreg     unsigned char 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  c               1   19[COMRAM] unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;		None               void
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;Total ram usage:        3 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    2
  7546 ;; This function calls:
  7547 ;;		Nothing
  7548 ;; This function is called by:
  7549 ;;		_printf
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           	psect	text18
  7554  0026EE                     __ptext18:
  7555                           	opt stack 0
  7556  0026EE                     _isdigit:
  7557                           	opt stack 27
  7558                           
  7559                           ;incstack = 0
  7560                           ;isdigit@c stored from wreg
  7561  0026EE  6E14               	movwf	isdigit@c,c
  7562  0026F0  0E00               	movlw	0
  7563  0026F2  6E13               	movwf	_isdigit$1443,c
  7564  0026F4  0E3A               	movlw	58
  7565  0026F6  6014               	cpfslt	isdigit@c,c
  7566  0026F8  D005               	goto	l3104
  7567  0026FA  0E2F               	movlw	47
  7568  0026FC  6414               	cpfsgt	isdigit@c,c
  7569  0026FE  D002               	goto	l3104
  7570  002700  0E01               	movlw	1
  7571  002702  6E13               	movwf	_isdigit$1443,c
  7572  002704                     l3104:
  7573  002704  C013  F012         	movff	_isdigit$1443,??_isdigit
  7574  002708  3012               	rrcf	??_isdigit,w,c
  7575  00270A  0012               	return	
  7576  00270C                     __end_of_isdigit:
  7577                           	opt stack 0
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           intcon2	equ	0xFF1
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function ___wmul *****************
  7596 ;; Defined at:
  7597 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  multiplier      2   17[COMRAM] unsigned int 
  7600 ;;  multiplicand    2   19[COMRAM] unsigned int 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  product         2   21[COMRAM] unsigned int 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  2   17[COMRAM] unsigned int 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, prodl, prodh
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:        6 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    2
  7619 ;; This function calls:
  7620 ;;		Nothing
  7621 ;; This function is called by:
  7622 ;;		_main
  7623 ;;		_printf
  7624 ;;		_timePassed
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text19
  7629  0026A4                     __ptext19:
  7630                           	opt stack 0
  7631  0026A4                     ___wmul:
  7632                           	opt stack 27
  7633                           
  7634                           ;incstack = 0
  7635  0026A4  5012               	movf	___wmul@multiplier,w,c
  7636  0026A6  0214               	mulwf	___wmul@multiplicand,c
  7637  0026A8  CFF3 F016          	movff	prodl,___wmul@product
  7638  0026AC  CFF4 F017          	movff	prodh,___wmul@product+1
  7639  0026B0  5012               	movf	___wmul@multiplier,w,c
  7640  0026B2  0215               	mulwf	___wmul@multiplicand+1,c
  7641  0026B4  50F3               	movf	prodl,w,c
  7642  0026B6  2617               	addwf	___wmul@product+1,f,c
  7643  0026B8  5013               	movf	___wmul@multiplier+1,w,c
  7644  0026BA  0214               	mulwf	___wmul@multiplicand,c
  7645  0026BC  50F3               	movf	prodl,w,c
  7646  0026BE  2617               	addwf	___wmul@product+1,f,c
  7647  0026C0  C016  F012         	movff	___wmul@product,?___wmul
  7648  0026C4  C017  F013         	movff	___wmul@product+1,?___wmul+1
  7649  0026C8  0012               	return	
  7650  0026CA                     __end_of___wmul:
  7651                           	opt stack 0
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           intcon	equ	0xFF2
  7659                           intcon2	equ	0xFF1
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           indf2	equ	0xFDF
  7663                           postinc2	equ	0xFDE
  7664                           postdec2	equ	0xFDD
  7665                           fsr2h	equ	0xFDA
  7666                           fsr2l	equ	0xFD9
  7667                           status	equ	0xFD8
  7668                           
  7669 ;; *************** function ___llmod *****************
  7670 ;; Defined at:
  7671 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;  dividend        4   30[COMRAM] unsigned long 
  7674 ;;  divisor         4   34[COMRAM] unsigned long 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  counter         1   38[COMRAM] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;                  4   30[COMRAM] unsigned long 
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, status,0
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7686 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;Total ram usage:        9 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    2
  7693 ;; This function calls:
  7694 ;;		Nothing
  7695 ;; This function is called by:
  7696 ;;		_printf
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           	psect	text20
  7701  0023A6                     __ptext20:
  7702                           	opt stack 0
  7703  0023A6                     ___llmod:
  7704                           	opt stack 27
  7705                           
  7706                           ;incstack = 0
  7707  0023A6  5023               	movf	___llmod@divisor,w,c
  7708  0023A8  1024               	iorwf	___llmod@divisor+1,w,c
  7709  0023AA  1025               	iorwf	___llmod@divisor+2,w,c
  7710  0023AC  1026               	iorwf	___llmod@divisor+3,w,c
  7711  0023AE  B4D8               	btfsc	status,2,c
  7712  0023B0  D024               	goto	l1120
  7713  0023B2  0E01               	movlw	1
  7714  0023B4  6E27               	movwf	___llmod@counter,c
  7715  0023B6  D006               	goto	l3142
  7716  0023B8                     l3140:
  7717  0023B8  90D8               	bcf	status,0,c
  7718  0023BA  3623               	rlcf	___llmod@divisor,f,c
  7719  0023BC  3624               	rlcf	___llmod@divisor+1,f,c
  7720  0023BE  3625               	rlcf	___llmod@divisor+2,f,c
  7721  0023C0  3626               	rlcf	___llmod@divisor+3,f,c
  7722  0023C2  2A27               	incf	___llmod@counter,f,c
  7723  0023C4                     l3142:
  7724  0023C4  AE26               	btfss	___llmod@divisor+3,7,c
  7725  0023C6  D7F8               	goto	l3140
  7726  0023C8                     l3144:
  7727  0023C8  5023               	movf	___llmod@divisor,w,c
  7728  0023CA  5C1F               	subwf	___llmod@dividend,w,c
  7729  0023CC  5024               	movf	___llmod@divisor+1,w,c
  7730  0023CE  5820               	subwfb	___llmod@dividend+1,w,c
  7731  0023D0  5025               	movf	___llmod@divisor+2,w,c
  7732  0023D2  5821               	subwfb	___llmod@dividend+2,w,c
  7733  0023D4  5026               	movf	___llmod@divisor+3,w,c
  7734  0023D6  5822               	subwfb	___llmod@dividend+3,w,c
  7735  0023D8  A0D8               	btfss	status,0,c
  7736  0023DA  D008               	goto	l3148
  7737  0023DC  5023               	movf	___llmod@divisor,w,c
  7738  0023DE  5E1F               	subwf	___llmod@dividend,f,c
  7739  0023E0  5024               	movf	___llmod@divisor+1,w,c
  7740  0023E2  5A20               	subwfb	___llmod@dividend+1,f,c
  7741  0023E4  5025               	movf	___llmod@divisor+2,w,c
  7742  0023E6  5A21               	subwfb	___llmod@dividend+2,f,c
  7743  0023E8  5026               	movf	___llmod@divisor+3,w,c
  7744  0023EA  5A22               	subwfb	___llmod@dividend+3,f,c
  7745  0023EC                     l3148:
  7746  0023EC  90D8               	bcf	status,0,c
  7747  0023EE  3226               	rrcf	___llmod@divisor+3,f,c
  7748  0023F0  3225               	rrcf	___llmod@divisor+2,f,c
  7749  0023F2  3224               	rrcf	___llmod@divisor+1,f,c
  7750  0023F4  3223               	rrcf	___llmod@divisor,f,c
  7751  0023F6  2E27               	decfsz	___llmod@counter,f,c
  7752  0023F8  D7E7               	goto	l3144
  7753  0023FA                     l1120:
  7754  0023FA  C01F  F01F         	movff	___llmod@dividend,?___llmod
  7755  0023FE  C020  F020         	movff	___llmod@dividend+1,?___llmod+1
  7756  002402  C021  F021         	movff	___llmod@dividend+2,?___llmod+2
  7757  002406  C022  F022         	movff	___llmod@dividend+3,?___llmod+3
  7758  00240A  0012               	return		;funcret
  7759  00240C                     __end_of___llmod:
  7760                           	opt stack 0
  7761                           tblptru	equ	0xFF8
  7762                           tblptrh	equ	0xFF7
  7763                           tblptrl	equ	0xFF6
  7764                           tablat	equ	0xFF5
  7765                           prodh	equ	0xFF4
  7766                           prodl	equ	0xFF3
  7767                           intcon	equ	0xFF2
  7768                           intcon2	equ	0xFF1
  7769                           postinc0	equ	0xFEE
  7770                           wreg	equ	0xFE8
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           postdec2	equ	0xFDD
  7774                           fsr2h	equ	0xFDA
  7775                           fsr2l	equ	0xFD9
  7776                           status	equ	0xFD8
  7777                           
  7778 ;; *************** function ___lldiv *****************
  7779 ;; Defined at:
  7780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  dividend        4   17[COMRAM] unsigned long 
  7783 ;;  divisor         4   21[COMRAM] unsigned long 
  7784 ;; Auto vars:     Size  Location     Type
  7785 ;;  quotient        4   25[COMRAM] unsigned long 
  7786 ;;  counter         1   29[COMRAM] unsigned char 
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  4   17[COMRAM] unsigned long 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7796 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;Total ram usage:       13 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; Hardware stack levels required when called:    2
  7803 ;; This function calls:
  7804 ;;		Nothing
  7805 ;; This function is called by:
  7806 ;;		_I2C_Master_Init
  7807 ;;		_printf
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           	psect	text21
  7812  002244                     __ptext21:
  7813                           	opt stack 0
  7814  002244                     ___lldiv:
  7815                           	opt stack 27
  7816                           
  7817                           ;incstack = 0
  7818  002244  0E00               	movlw	0
  7819  002246  6E1A               	movwf	___lldiv@quotient,c
  7820  002248  0E00               	movlw	0
  7821  00224A  6E1B               	movwf	___lldiv@quotient+1,c
  7822  00224C  0E00               	movlw	0
  7823  00224E  6E1C               	movwf	___lldiv@quotient+2,c
  7824  002250  0E00               	movlw	0
  7825  002252  6E1D               	movwf	___lldiv@quotient+3,c
  7826  002254  5016               	movf	___lldiv@divisor,w,c
  7827  002256  1017               	iorwf	___lldiv@divisor+1,w,c
  7828  002258  1018               	iorwf	___lldiv@divisor+2,w,c
  7829  00225A  1019               	iorwf	___lldiv@divisor+3,w,c
  7830  00225C  B4D8               	btfsc	status,2,c
  7831  00225E  D02A               	goto	l1110
  7832  002260  0E01               	movlw	1
  7833  002262  6E1E               	movwf	___lldiv@counter,c
  7834  002264  D006               	goto	l3122
  7835  002266                     l3120:
  7836  002266  90D8               	bcf	status,0,c
  7837  002268  3616               	rlcf	___lldiv@divisor,f,c
  7838  00226A  3617               	rlcf	___lldiv@divisor+1,f,c
  7839  00226C  3618               	rlcf	___lldiv@divisor+2,f,c
  7840  00226E  3619               	rlcf	___lldiv@divisor+3,f,c
  7841  002270  2A1E               	incf	___lldiv@counter,f,c
  7842  002272                     l3122:
  7843  002272  AE19               	btfss	___lldiv@divisor+3,7,c
  7844  002274  D7F8               	goto	l3120
  7845  002276                     l3124:
  7846  002276  90D8               	bcf	status,0,c
  7847  002278  361A               	rlcf	___lldiv@quotient,f,c
  7848  00227A  361B               	rlcf	___lldiv@quotient+1,f,c
  7849  00227C  361C               	rlcf	___lldiv@quotient+2,f,c
  7850  00227E  361D               	rlcf	___lldiv@quotient+3,f,c
  7851  002280  5016               	movf	___lldiv@divisor,w,c
  7852  002282  5C12               	subwf	___lldiv@dividend,w,c
  7853  002284  5017               	movf	___lldiv@divisor+1,w,c
  7854  002286  5813               	subwfb	___lldiv@dividend+1,w,c
  7855  002288  5018               	movf	___lldiv@divisor+2,w,c
  7856  00228A  5814               	subwfb	___lldiv@dividend+2,w,c
  7857  00228C  5019               	movf	___lldiv@divisor+3,w,c
  7858  00228E  5815               	subwfb	___lldiv@dividend+3,w,c
  7859  002290  A0D8               	btfss	status,0,c
  7860  002292  D009               	goto	l3132
  7861  002294  5016               	movf	___lldiv@divisor,w,c
  7862  002296  5E12               	subwf	___lldiv@dividend,f,c
  7863  002298  5017               	movf	___lldiv@divisor+1,w,c
  7864  00229A  5A13               	subwfb	___lldiv@dividend+1,f,c
  7865  00229C  5018               	movf	___lldiv@divisor+2,w,c
  7866  00229E  5A14               	subwfb	___lldiv@dividend+2,f,c
  7867  0022A0  5019               	movf	___lldiv@divisor+3,w,c
  7868  0022A2  5A15               	subwfb	___lldiv@dividend+3,f,c
  7869  0022A4  801A               	bsf	___lldiv@quotient,0,c
  7870  0022A6                     l3132:
  7871  0022A6  90D8               	bcf	status,0,c
  7872  0022A8  3219               	rrcf	___lldiv@divisor+3,f,c
  7873  0022AA  3218               	rrcf	___lldiv@divisor+2,f,c
  7874  0022AC  3217               	rrcf	___lldiv@divisor+1,f,c
  7875  0022AE  3216               	rrcf	___lldiv@divisor,f,c
  7876  0022B0  2E1E               	decfsz	___lldiv@counter,f,c
  7877  0022B2  D7E1               	goto	l3124
  7878  0022B4                     l1110:
  7879  0022B4  C01A  F012         	movff	___lldiv@quotient,?___lldiv
  7880  0022B8  C01B  F013         	movff	___lldiv@quotient+1,?___lldiv+1
  7881  0022BC  C01C  F014         	movff	___lldiv@quotient+2,?___lldiv+2
  7882  0022C0  C01D  F015         	movff	___lldiv@quotient+3,?___lldiv+3
  7883  0022C4  0012               	return		;funcret
  7884  0022C6                     __end_of___lldiv:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon	equ	0xFF2
  7893                           intcon2	equ	0xFF1
  7894                           postinc0	equ	0xFEE
  7895                           wreg	equ	0xFE8
  7896                           indf2	equ	0xFDF
  7897                           postinc2	equ	0xFDE
  7898                           postdec2	equ	0xFDD
  7899                           fsr2h	equ	0xFDA
  7900                           fsr2l	equ	0xFD9
  7901                           status	equ	0xFD8
  7902                           
  7903 ;; *************** function _lcdInst *****************
  7904 ;; Defined at:
  7905 ;;		line 22 in file "lcd.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  data            1    wreg     unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  data            1   19[COMRAM] unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      void 
  7912 ;; Registers used:
  7913 ;;		wreg, status,2, status,0, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;Total ram usage:        1 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    3
  7926 ;; This function calls:
  7927 ;;		_lcdNibble
  7928 ;; This function is called by:
  7929 ;;		_main
  7930 ;;		_initLCD
  7931 ;;		_homescreen
  7932 ;;		_displayLog
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text22
  7937  002756                     __ptext22:
  7938                           	opt stack 0
  7939  002756                     _lcdInst:
  7940                           	opt stack 27
  7941                           
  7942                           ;incstack = 0
  7943                           ;lcdInst@data stored from wreg
  7944  002756  6E14               	movwf	lcdInst@data,c
  7945                           
  7946                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  7947  002758  948C               	bcf	3980,2,c	;volatile
  7948                           
  7949                           ;lcd.c: 24: lcdNibble(data);
  7950  00275A  5014               	movf	lcdInst@data,w,c
  7951  00275C  EC64  F012         	call	_lcdNibble
  7952  002760  0012               	return		;funcret
  7953  002762                     __end_of_lcdInst:
  7954                           	opt stack 0
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           intcon2	equ	0xFF1
  7963                           postinc0	equ	0xFEE
  7964                           wreg	equ	0xFE8
  7965                           indf2	equ	0xFDF
  7966                           postinc2	equ	0xFDE
  7967                           postdec2	equ	0xFDD
  7968                           fsr2h	equ	0xFDA
  7969                           fsr2l	equ	0xFD9
  7970                           status	equ	0xFD8
  7971                           
  7972 ;; *************** function _lcdNibble *****************
  7973 ;; Defined at:
  7974 ;;		line 32 in file "lcd.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  data            1    wreg     unsigned char 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  data            1   18[COMRAM] unsigned char 
  7979 ;;  temp            1   17[COMRAM] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, status,2, status,0
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;Total ram usage:        2 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    2
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_lcdInst
  8000 ;;		_putch
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text23
  8005  0024C8                     __ptext23:
  8006                           	opt stack 0
  8007  0024C8                     _lcdNibble:
  8008                           	opt stack 26
  8009                           
  8010                           ;incstack = 0
  8011                           ;lcdNibble@data stored from wreg
  8012  0024C8  6E13               	movwf	lcdNibble@data,c
  8013                           
  8014                           ;lcd.c: 34: char temp = data & 0xF0;
  8015  0024CA  5013               	movf	lcdNibble@data,w,c
  8016  0024CC  0BF0               	andlw	240
  8017  0024CE  6E12               	movwf	lcdNibble@temp,c
  8018                           
  8019                           ;lcd.c: 35: LATD = LATD & 0x0F;
  8020  0024D0  508C               	movf	3980,w,c	;volatile
  8021  0024D2  0B0F               	andlw	15
  8022  0024D4  6E8C               	movwf	3980,c	;volatile
  8023                           
  8024                           ;lcd.c: 36: LATD = temp | LATD;
  8025  0024D6  5012               	movf	lcdNibble@temp,w,c
  8026  0024D8  108C               	iorwf	3980,w,c	;volatile
  8027  0024DA  6E8C               	movwf	3980,c	;volatile
  8028                           
  8029                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  8030  0024DC  968C               	bcf	3980,3,c	;volatile
  8031                           
  8032                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8033  0024DE  0E42               	movlw	66
  8034  0024E0                     u5537:
  8035  0024E0  2EE8               	decfsz	wreg,f,c
  8036  0024E2  D7FE               	bra	u5537
  8037  0024E4  D000               	nop2	
  8038                           
  8039                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  8040  0024E6  868C               	bsf	3980,3,c	;volatile
  8041                           
  8042                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8043  0024E8  0E42               	movlw	66
  8044  0024EA                     u5547:
  8045  0024EA  2EE8               	decfsz	wreg,f,c
  8046  0024EC  D7FE               	bra	u5547
  8047  0024EE  D000               	nop2	
  8048                           
  8049                           ;lcd.c: 43: data = data << 4;
  8050  0024F0  3813               	swapf	lcdNibble@data,w,c
  8051  0024F2  0BF0               	andlw	240
  8052  0024F4  6E13               	movwf	lcdNibble@data,c
  8053                           
  8054                           ;lcd.c: 45: temp = data & 0xF0;
  8055  0024F6  5013               	movf	lcdNibble@data,w,c
  8056  0024F8  0BF0               	andlw	240
  8057  0024FA  6E12               	movwf	lcdNibble@temp,c
  8058                           
  8059                           ;lcd.c: 46: LATD = LATD & 0x0F;
  8060  0024FC  508C               	movf	3980,w,c	;volatile
  8061  0024FE  0B0F               	andlw	15
  8062  002500  6E8C               	movwf	3980,c	;volatile
  8063                           
  8064                           ;lcd.c: 47: LATD = temp | LATD;
  8065  002502  5012               	movf	lcdNibble@temp,w,c
  8066  002504  108C               	iorwf	3980,w,c	;volatile
  8067  002506  6E8C               	movwf	3980,c	;volatile
  8068                           
  8069                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  8070  002508  968C               	bcf	3980,3,c	;volatile
  8071                           
  8072                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8073  00250A  0E42               	movlw	66
  8074  00250C                     u5557:
  8075  00250C  2EE8               	decfsz	wreg,f,c
  8076  00250E  D7FE               	bra	u5557
  8077  002510  D000               	nop2	
  8078                           
  8079                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  8080  002512  868C               	bsf	3980,3,c	;volatile
  8081                           
  8082                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8083  002514  0E42               	movlw	66
  8084  002516                     u5567:
  8085  002516  2EE8               	decfsz	wreg,f,c
  8086  002518  D7FE               	bra	u5567
  8087  00251A  D000               	nop2	
  8088  00251C  0012               	return		;funcret
  8089  00251E                     __end_of_lcdNibble:
  8090                           	opt stack 0
  8091                           tblptru	equ	0xFF8
  8092                           tblptrh	equ	0xFF7
  8093                           tblptrl	equ	0xFF6
  8094                           tablat	equ	0xFF5
  8095                           prodh	equ	0xFF4
  8096                           prodl	equ	0xFF3
  8097                           intcon	equ	0xFF2
  8098                           intcon2	equ	0xFF1
  8099                           postinc0	equ	0xFEE
  8100                           wreg	equ	0xFE8
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _keycheck *****************
  8109 ;; Defined at:
  8110 ;;		line 12 in file "interface.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, status,2, status,0
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;Total ram usage:        0 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    2
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		_main
  8135 ;;		_displayLog
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text24
  8140  002722                     __ptext24:
  8141                           	opt stack 0
  8142  002722                     _keycheck:
  8143                           	opt stack 28
  8144  002722                     l600:
  8145  002722  A281               	btfss	3969,1,c	;volatile
  8146  002724  D7FE               	goto	l600
  8147                           
  8148                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  8149  002726  3881               	swapf	3969,w,c	;volatile
  8150  002728  0B0F               	andlw	15
  8151  00272A  0B0F               	andlw	15
  8152  00272C  0100               	movlb	0	; () banked
  8153  00272E  6FB7               	movwf	_keypress& (0+255),b	;volatile
  8154  002730                     l603:
  8155  002730  B281               	btfsc	3969,1,c	;volatile
  8156  002732  D7FE               	goto	l603
  8157                           
  8158                           ;interface.c: 16: __nop();
  8159  002734  F000               	nop	
  8160                           
  8161                           ;interface.c: 17: return;
  8162  002736  0012               	return		;funcret
  8163  002738                     __end_of_keycheck:
  8164                           	opt stack 0
  8165                           tblptru	equ	0xFF8
  8166                           tblptrh	equ	0xFF7
  8167                           tblptrl	equ	0xFF6
  8168                           tablat	equ	0xFF5
  8169                           prodh	equ	0xFF4
  8170                           prodl	equ	0xFF3
  8171                           intcon	equ	0xFF2
  8172                           intcon2	equ	0xFF1
  8173                           postinc0	equ	0xFEE
  8174                           wreg	equ	0xFE8
  8175                           indf2	equ	0xFDF
  8176                           postinc2	equ	0xFDE
  8177                           postdec2	equ	0xFDD
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _addRun *****************
  8183 ;; Defined at:
  8184 ;;		line 69 in file "interface.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;  dur             2   21[COMRAM] int 
  8187 ;;  year            2   23[COMRAM] int 
  8188 ;;  month           2   25[COMRAM] int 
  8189 ;;  date            2   27[COMRAM] int 
  8190 ;;  hours           2   29[COMRAM] int 
  8191 ;;  mins            2   31[COMRAM] int 
  8192 ;;  secs            2   33[COMRAM] int 
  8193 ;;  sodaT           2   35[COMRAM] int 
  8194 ;;  sodaNT          2   37[COMRAM] int 
  8195 ;;  soupL           2   39[COMRAM] int 
  8196 ;;  soupNL          2   41[COMRAM] int 
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  currRun         2   46[COMRAM] int 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;                  1    wreg      void 
  8201 ;; Registers used:
  8202 ;;		wreg, status,2, status,0, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8208 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;Total ram usage:       27 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    3
  8215 ;; This function calls:
  8216 ;;		_eepromRead
  8217 ;;		_eepromWrite
  8218 ;; This function is called by:
  8219 ;;		_main
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text25
  8224  002034                     __ptext25:
  8225                           	opt stack 0
  8226  002034                     _addRun:
  8227                           	opt stack 27
  8228                           
  8229                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  8230                           
  8231                           ;incstack = 0
  8232  002034  0EFF               	movlw	255
  8233  002036  6E2C               	movwf	??_addRun& (0+255),c
  8234  002038  0EFF               	movlw	255
  8235  00203A  6E2D               	movwf	(??_addRun+1)& (0+255),c
  8236  00203C  0E00               	movlw	0
  8237  00203E  EC18  F013         	call	_eepromRead
  8238  002042  6E2E               	movwf	(??_addRun+2)& (0+255),c
  8239  002044  502C               	movf	??_addRun,w,c
  8240  002046  242E               	addwf	??_addRun+2,w,c
  8241  002048  6E2F               	movwf	addRun@currRun,c
  8242  00204A  0E00               	movlw	0
  8243  00204C  BE2E               	btfsc	??_addRun+2,7,c
  8244  00204E  0EFF               	movlw	255
  8245  002050  202D               	addwfc	??_addRun+1,w,c
  8246  002052  6E30               	movwf	addRun@currRun+1,c
  8247                           
  8248                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  8249  002054  BE30               	btfsc	addRun@currRun+1,7,c
  8250  002056  D005               	goto	l3784
  8251  002058  5030               	movf	addRun@currRun+1,w,c
  8252  00205A  E107               	bnz	l3786
  8253  00205C  042F               	decf	addRun@currRun,w,c
  8254  00205E  B0D8               	btfsc	status,0,c
  8255  002060  D004               	goto	l3786
  8256  002062                     l3784:
  8257  002062  0E00               	movlw	0
  8258  002064  6E30               	movwf	addRun@currRun+1,c
  8259  002066  0E04               	movlw	4
  8260  002068  6E2F               	movwf	addRun@currRun,c
  8261  00206A                     l3786:
  8262                           
  8263                           ;interface.c: 72: eepromWrite(0, currRun);
  8264  00206A  C02F  F012         	movff	addRun@currRun,eepromWrite@data
  8265  00206E  0E00               	movlw	0
  8266  002070  ECFC  F012         	call	_eepromWrite
  8267                           
  8268                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  8269  002074  C016  F012         	movff	addRun@dur,eepromWrite@data
  8270  002078  C02F  F02C         	movff	addRun@currRun,??_addRun
  8271  00207C  3A2C               	swapf	??_addRun,f,c
  8272  00207E  0EF0               	movlw	240
  8273  002080  162C               	andwf	??_addRun,f,c
  8274  002082  282C               	incf	??_addRun,w,c
  8275  002084  ECFC  F012         	call	_eepromWrite
  8276                           
  8277                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  8278  002088  C018  F012         	movff	addRun@year,eepromWrite@data
  8279  00208C  C02F  F02C         	movff	addRun@currRun,??_addRun
  8280  002090  3A2C               	swapf	??_addRun,f,c
  8281  002092  0EF0               	movlw	240
  8282  002094  162C               	andwf	??_addRun,f,c
  8283  002096  502C               	movf	??_addRun,w,c
  8284  002098  0F02               	addlw	2
  8285  00209A  ECFC  F012         	call	_eepromWrite
  8286                           
  8287                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  8288  00209E  C01A  F012         	movff	addRun@month,eepromWrite@data
  8289  0020A2  C02F  F02C         	movff	addRun@currRun,??_addRun
  8290  0020A6  3A2C               	swapf	??_addRun,f,c
  8291  0020A8  0EF0               	movlw	240
  8292  0020AA  162C               	andwf	??_addRun,f,c
  8293  0020AC  502C               	movf	??_addRun,w,c
  8294  0020AE  0F03               	addlw	3
  8295  0020B0  ECFC  F012         	call	_eepromWrite
  8296                           
  8297                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8298  0020B4  C01C  F012         	movff	addRun@date,eepromWrite@data
  8299  0020B8  C02F  F02C         	movff	addRun@currRun,??_addRun
  8300  0020BC  3A2C               	swapf	??_addRun,f,c
  8301  0020BE  0EF0               	movlw	240
  8302  0020C0  162C               	andwf	??_addRun,f,c
  8303  0020C2  502C               	movf	??_addRun,w,c
  8304  0020C4  0F04               	addlw	4
  8305  0020C6  ECFC  F012         	call	_eepromWrite
  8306                           
  8307                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8308  0020CA  C01E  F012         	movff	addRun@hours,eepromWrite@data
  8309  0020CE  C02F  F02C         	movff	addRun@currRun,??_addRun
  8310  0020D2  3A2C               	swapf	??_addRun,f,c
  8311  0020D4  0EF0               	movlw	240
  8312  0020D6  162C               	andwf	??_addRun,f,c
  8313  0020D8  502C               	movf	??_addRun,w,c
  8314  0020DA  0F05               	addlw	5
  8315  0020DC  ECFC  F012         	call	_eepromWrite
  8316                           
  8317                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8318  0020E0  C020  F012         	movff	addRun@mins,eepromWrite@data
  8319  0020E4  C02F  F02C         	movff	addRun@currRun,??_addRun
  8320  0020E8  3A2C               	swapf	??_addRun,f,c
  8321  0020EA  0EF0               	movlw	240
  8322  0020EC  162C               	andwf	??_addRun,f,c
  8323  0020EE  502C               	movf	??_addRun,w,c
  8324  0020F0  0F06               	addlw	6
  8325  0020F2  ECFC  F012         	call	_eepromWrite
  8326                           
  8327                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8328  0020F6  C022  F012         	movff	addRun@secs,eepromWrite@data
  8329  0020FA  C02F  F02C         	movff	addRun@currRun,??_addRun
  8330  0020FE  3A2C               	swapf	??_addRun,f,c
  8331  002100  0EF0               	movlw	240
  8332  002102  162C               	andwf	??_addRun,f,c
  8333  002104  502C               	movf	??_addRun,w,c
  8334  002106  0F07               	addlw	7
  8335  002108  ECFC  F012         	call	_eepromWrite
  8336                           
  8337                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8338  00210C  C024  F012         	movff	addRun@sodaT,eepromWrite@data
  8339  002110  C02F  F02C         	movff	addRun@currRun,??_addRun
  8340  002114  3A2C               	swapf	??_addRun,f,c
  8341  002116  0EF0               	movlw	240
  8342  002118  162C               	andwf	??_addRun,f,c
  8343  00211A  502C               	movf	??_addRun,w,c
  8344  00211C  0F08               	addlw	8
  8345  00211E  ECFC  F012         	call	_eepromWrite
  8346                           
  8347                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8348  002122  C026  F012         	movff	addRun@sodaNT,eepromWrite@data
  8349  002126  C02F  F02C         	movff	addRun@currRun,??_addRun
  8350  00212A  3A2C               	swapf	??_addRun,f,c
  8351  00212C  0EF0               	movlw	240
  8352  00212E  162C               	andwf	??_addRun,f,c
  8353  002130  502C               	movf	??_addRun,w,c
  8354  002132  0F09               	addlw	9
  8355  002134  ECFC  F012         	call	_eepromWrite
  8356                           
  8357                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8358  002138  C028  F012         	movff	addRun@soupL,eepromWrite@data
  8359  00213C  C02F  F02C         	movff	addRun@currRun,??_addRun
  8360  002140  3A2C               	swapf	??_addRun,f,c
  8361  002142  0EF0               	movlw	240
  8362  002144  162C               	andwf	??_addRun,f,c
  8363  002146  502C               	movf	??_addRun,w,c
  8364  002148  0F0A               	addlw	10
  8365  00214A  ECFC  F012         	call	_eepromWrite
  8366                           
  8367                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8368  00214E  C02A  F012         	movff	addRun@soupNL,eepromWrite@data
  8369  002152  C02F  F02C         	movff	addRun@currRun,??_addRun
  8370  002156  3A2C               	swapf	??_addRun,f,c
  8371  002158  0EF0               	movlw	240
  8372  00215A  162C               	andwf	??_addRun,f,c
  8373  00215C  502C               	movf	??_addRun,w,c
  8374  00215E  0F0B               	addlw	11
  8375  002160  ECFC  F012         	call	_eepromWrite
  8376  002164  0012               	return		;funcret
  8377  002166                     __end_of_addRun:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           intcon2	equ	0xFF1
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           indf2	equ	0xFDF
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _eepromWrite *****************
  8397 ;; Defined at:
  8398 ;;		line 43 in file "interface.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  address         1    wreg     char 
  8401 ;;  data            1   17[COMRAM] char 
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  address         1   20[COMRAM] char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      void 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:        4 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    2
  8420 ;; This function calls:
  8421 ;;		Nothing
  8422 ;; This function is called by:
  8423 ;;		_addRun
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text26
  8428  0025F8                     __ptext26:
  8429                           	opt stack 0
  8430  0025F8                     _eepromWrite:
  8431                           	opt stack 27
  8432                           
  8433                           ;incstack = 0
  8434                           ;eepromWrite@address stored from wreg
  8435  0025F8  6E15               	movwf	eepromWrite@address,c
  8436                           
  8437                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8438  0025FA  C015  F013         	movff	eepromWrite@address,??_eepromWrite
  8439  0025FE  0E08               	movlw	8
  8440  002600  6E14               	movwf	(??_eepromWrite+1)& (0+255),c
  8441  002602                     u3015:
  8442  002602  3413               	rlcf	??_eepromWrite,w,c
  8443  002604  3213               	rrcf	??_eepromWrite,f,c
  8444  002606  2E14               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8445  002608  D7FC               	goto	u3015
  8446  00260A  5013               	movf	??_eepromWrite,w,c
  8447  00260C  6EAA               	movwf	4010,c	;volatile
  8448                           
  8449                           ;interface.c: 46: EEADR = (signed char)address;
  8450  00260E  C015  FFA9         	movff	eepromWrite@address,4009	;volatile
  8451                           
  8452                           ;interface.c: 48: EEDATA = data;
  8453  002612  C012  FFA8         	movff	eepromWrite@data,4008	;volatile
  8454                           
  8455                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8456  002616  9EA6               	bcf	4006,7,c	;volatile
  8457                           
  8458                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8459  002618  9CA6               	bcf	4006,6,c	;volatile
  8460                           
  8461                           ;interface.c: 51: EECON1bits.WREN = 1;
  8462  00261A  84A6               	bsf	4006,2,c	;volatile
  8463                           
  8464                           ;interface.c: 55: EECON2 = 0x55;
  8465  00261C  0E55               	movlw	85
  8466  00261E  6EA7               	movwf	4007,c	;volatile
  8467                           
  8468                           ;interface.c: 56: EECON2 = 0xAA;
  8469  002620  0EAA               	movlw	170
  8470  002622  6EA7               	movwf	4007,c	;volatile
  8471                           
  8472                           ;interface.c: 57: EECON1bits.WR = 1;
  8473  002624  82A6               	bsf	4006,1,c	;volatile
  8474  002626                     l622:
  8475  002626  A8A1               	btfss	4001,4,c	;volatile
  8476  002628  D7FE               	goto	l622
  8477                           
  8478                           ;interface.c: 63: }
  8479                           ;interface.c: 65: PIR2bits.EEIF = 0;
  8480  00262A  98A1               	bcf	4001,4,c	;volatile
  8481                           
  8482                           ;interface.c: 66: EECON1bits.WREN = 0;
  8483  00262C  94A6               	bcf	4006,2,c	;volatile
  8484  00262E  0012               	return		;funcret
  8485  002630                     __end_of_eepromWrite:
  8486                           	opt stack 0
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon2	equ	0xFF1
  8495                           postinc0	equ	0xFEE
  8496                           wreg	equ	0xFE8
  8497                           indf2	equ	0xFDF
  8498                           postinc2	equ	0xFDE
  8499                           postdec2	equ	0xFDD
  8500                           fsr2h	equ	0xFDA
  8501                           fsr2l	equ	0xFD9
  8502                           status	equ	0xFD8
  8503                           
  8504 ;; *************** function _eepromRead *****************
  8505 ;; Defined at:
  8506 ;;		line 27 in file "interface.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  address         1    wreg     char 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  address         1   19[COMRAM] char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  1    wreg      char 
  8513 ;; Registers used:
  8514 ;;		wreg, status,2, status,0
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;Total ram usage:        3 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    2
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_main
  8531 ;;		_addRun
  8532 ;;		_displayLog
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           	psect	text27
  8537  002630                     __ptext27:
  8538                           	opt stack 0
  8539  002630                     _eepromRead:
  8540                           	opt stack 28
  8541                           
  8542                           ;incstack = 0
  8543                           ;eepromRead@address stored from wreg
  8544  002630  6E14               	movwf	eepromRead@address,c
  8545                           
  8546                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  8547  002632  C014  F012         	movff	eepromRead@address,??_eepromRead
  8548  002636  0E08               	movlw	8
  8549  002638  6E13               	movwf	(??_eepromRead+1)& (0+255),c
  8550  00263A                     u2975:
  8551  00263A  3412               	rlcf	??_eepromRead,w,c
  8552  00263C  3212               	rrcf	??_eepromRead,f,c
  8553  00263E  2E13               	decfsz	(??_eepromRead+1)& (0+255),f,c
  8554  002640  D7FC               	goto	u2975
  8555  002642  5012               	movf	??_eepromRead,w,c
  8556  002644  6EAA               	movwf	4010,c	;volatile
  8557                           
  8558                           ;interface.c: 30: EEADR = (signed char)address;
  8559  002646  C014  FFA9         	movff	eepromRead@address,4009	;volatile
  8560                           
  8561                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  8562  00264A  9EA6               	bcf	4006,7,c	;volatile
  8563                           
  8564                           ;interface.c: 33: EECON1bits.CFGS = 0;
  8565  00264C  9CA6               	bcf	4006,6,c	;volatile
  8566                           
  8567                           ;interface.c: 34: EECON1bits.RD = 1;
  8568  00264E  80A6               	bsf	4006,0,c	;volatile
  8569  002650                     l616:
  8570  002650  B0A6               	btfsc	4006,0,c	;volatile
  8571  002652  D7FE               	goto	l616
  8572                           
  8573                           ;interface.c: 40: return EEDATA;
  8574  002654  50A8               	movf	4008,w,c	;volatile
  8575  002656  0012               	return	
  8576  002658                     __end_of_eepromRead:
  8577                           	opt stack 0
  8578                           tblptru	equ	0xFF8
  8579                           tblptrh	equ	0xFF7
  8580                           tblptrl	equ	0xFF6
  8581                           tablat	equ	0xFF5
  8582                           prodh	equ	0xFF4
  8583                           prodl	equ	0xFF3
  8584                           intcon	equ	0xFF2
  8585                           intcon2	equ	0xFF1
  8586                           postinc0	equ	0xFEE
  8587                           wreg	equ	0xFE8
  8588                           indf2	equ	0xFDF
  8589                           postinc2	equ	0xFDE
  8590                           postdec2	equ	0xFDD
  8591                           fsr2h	equ	0xFDA
  8592                           fsr2l	equ	0xFD9
  8593                           status	equ	0xFD8
  8594                           
  8595 ;; *************** function _PWM2off *****************
  8596 ;; Defined at:
  8597 ;;		line 48 in file "motors.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;		None
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;		None
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  1    wreg      void 
  8604 ;; Registers used:
  8605 ;;		wreg, status,2
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;Total ram usage:        0 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    2
  8618 ;; This function calls:
  8619 ;;		Nothing
  8620 ;; This function is called by:
  8621 ;;		_main
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           	psect	text28
  8626  00276C                     __ptext28:
  8627                           	opt stack 0
  8628  00276C                     _PWM2off:
  8629                           	opt stack 28
  8630                           
  8631                           ;motors.c: 49: CCP2CONbits.DC2B0 = 0;
  8632                           
  8633                           ;incstack = 0
  8634  00276C  98BA               	bcf	4026,4,c	;volatile
  8635                           
  8636                           ;motors.c: 50: CCP2CONbits.DC2B1 = 0;
  8637  00276E  9ABA               	bcf	4026,5,c	;volatile
  8638                           
  8639                           ;motors.c: 52: CCPR2L = 0;
  8640  002770  0E00               	movlw	0
  8641  002772  6EBB               	movwf	4027,c	;volatile
  8642  002774  0012               	return		;funcret
  8643  002776                     __end_of_PWM2off:
  8644                           	opt stack 0
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodh	equ	0xFF4
  8650                           prodl	equ	0xFF3
  8651                           intcon	equ	0xFF2
  8652                           intcon2	equ	0xFF1
  8653                           postinc0	equ	0xFEE
  8654                           wreg	equ	0xFE8
  8655                           indf2	equ	0xFDF
  8656                           postinc2	equ	0xFDE
  8657                           postdec2	equ	0xFDD
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662 ;; *************** function _PWM2 *****************
  8663 ;; Defined at:
  8664 ;;		line 34 in file "motors.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;  duty            2   17[COMRAM] int 
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      void 
  8671 ;; Registers used:
  8672 ;;		wreg, status,2, status,0
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8678 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;Total ram usage:        4 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    2
  8685 ;; This function calls:
  8686 ;;		Nothing
  8687 ;; This function is called by:
  8688 ;;		_main
  8689 ;; This function uses a non-reentrant model
  8690 ;;
  8691                           
  8692                           	psect	text29
  8693  00251E                     __ptext29:
  8694                           	opt stack 0
  8695  00251E                     _PWM2:
  8696                           	opt stack 28
  8697                           
  8698                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  8699                           
  8700                           ;incstack = 0
  8701  00251E  C012  F014         	movff	PWM2@duty,??_PWM2
  8702  002522  0E01               	movlw	1
  8703  002524  1614               	andwf	??_PWM2,f,c
  8704  002526  3A14               	swapf	??_PWM2,f,c
  8705  002528  50BA               	movf	4026,w,c	;volatile
  8706  00252A  1814               	xorwf	??_PWM2,w,c
  8707  00252C  0BEF               	andlw	-17
  8708  00252E  1814               	xorwf	??_PWM2,w,c
  8709  002530  6EBA               	movwf	4026,c	;volatile
  8710                           
  8711                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  8712  002532  3413               	rlcf	PWM2@duty+1,w,c
  8713  002534  3013               	rrcf	PWM2@duty+1,w,c
  8714  002536  6E15               	movwf	(??_PWM2+1)& (0+255),c
  8715  002538  3012               	rrcf	PWM2@duty,w,c
  8716  00253A  6E14               	movwf	??_PWM2& (0+255),c
  8717  00253C  0E01               	movlw	1
  8718  00253E  1614               	andwf	??_PWM2,f,c
  8719  002540  3A14               	swapf	??_PWM2,f,c
  8720  002542  4614               	rlncf	??_PWM2,f,c
  8721  002544  50BA               	movf	4026,w,c	;volatile
  8722  002546  1814               	xorwf	??_PWM2,w,c
  8723  002548  0BDF               	andlw	-33
  8724  00254A  1814               	xorwf	??_PWM2,w,c
  8725  00254C  6EBA               	movwf	4026,c	;volatile
  8726                           
  8727                           ;motors.c: 44: CCPR2L = (duty >> 2);
  8728  00254E  C012  F014         	movff	PWM2@duty,??_PWM2
  8729  002552  C013  F015         	movff	PWM2@duty+1,??_PWM2+1
  8730  002556  3415               	rlcf	??_PWM2+1,w,c
  8731  002558  3215               	rrcf	??_PWM2+1,f,c
  8732  00255A  3214               	rrcf	??_PWM2,f,c
  8733  00255C  3415               	rlcf	??_PWM2+1,w,c
  8734  00255E  3215               	rrcf	??_PWM2+1,f,c
  8735  002560  3214               	rrcf	??_PWM2,f,c
  8736  002562  5014               	movf	??_PWM2,w,c
  8737  002564  6EBB               	movwf	4027,c	;volatile
  8738  002566  0012               	return		;funcret
  8739  002568                     __end_of_PWM2:
  8740                           	opt stack 0
  8741                           tblptru	equ	0xFF8
  8742                           tblptrh	equ	0xFF7
  8743                           tblptrl	equ	0xFF6
  8744                           tablat	equ	0xFF5
  8745                           prodh	equ	0xFF4
  8746                           prodl	equ	0xFF3
  8747                           intcon	equ	0xFF2
  8748                           intcon2	equ	0xFF1
  8749                           postinc0	equ	0xFEE
  8750                           wreg	equ	0xFE8
  8751                           indf2	equ	0xFDF
  8752                           postinc2	equ	0xFDE
  8753                           postdec2	equ	0xFDD
  8754                           fsr2h	equ	0xFDA
  8755                           fsr2l	equ	0xFD9
  8756                           status	equ	0xFD8
  8757                           
  8758 ;; *************** function _PWM1off *****************
  8759 ;; Defined at:
  8760 ;;		line 28 in file "motors.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;		None
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;		None
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  1    wreg      void 
  8767 ;; Registers used:
  8768 ;;		wreg, status,2
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;Total ram usage:        0 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; Hardware stack levels required when called:    2
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_main
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text30
  8789  002776                     __ptext30:
  8790                           	opt stack 0
  8791  002776                     _PWM1off:
  8792                           	opt stack 28
  8793                           
  8794                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  8795                           
  8796                           ;incstack = 0
  8797  002776  98BD               	bcf	4029,4,c	;volatile
  8798                           
  8799                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  8800  002778  9ABD               	bcf	4029,5,c	;volatile
  8801                           
  8802                           ;motors.c: 31: CCPR1L = 0;
  8803  00277A  0E00               	movlw	0
  8804  00277C  6EBE               	movwf	4030,c	;volatile
  8805  00277E  0012               	return		;funcret
  8806  002780                     __end_of_PWM1off:
  8807                           	opt stack 0
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           intcon2	equ	0xFF1
  8816                           postinc0	equ	0xFEE
  8817                           wreg	equ	0xFE8
  8818                           indf2	equ	0xFDF
  8819                           postinc2	equ	0xFDE
  8820                           postdec2	equ	0xFDD
  8821                           fsr2h	equ	0xFDA
  8822                           fsr2l	equ	0xFD9
  8823                           status	equ	0xFD8
  8824                           
  8825 ;; *************** function _PWM1 *****************
  8826 ;; Defined at:
  8827 ;;		line 14 in file "motors.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;  duty            2   17[COMRAM] int 
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;		None
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  1    wreg      void 
  8834 ;; Registers used:
  8835 ;;		wreg, status,2, status,0
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8841 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8843 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;Total ram usage:        4 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    2
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_main
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           	psect	text31
  8856  002568                     __ptext31:
  8857                           	opt stack 0
  8858  002568                     _PWM1:
  8859                           	opt stack 28
  8860                           
  8861                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  8862                           
  8863                           ;incstack = 0
  8864  002568  C012  F014         	movff	PWM1@duty,??_PWM1
  8865  00256C  0E01               	movlw	1
  8866  00256E  1614               	andwf	??_PWM1,f,c
  8867  002570  3A14               	swapf	??_PWM1,f,c
  8868  002572  50BD               	movf	4029,w,c	;volatile
  8869  002574  1814               	xorwf	??_PWM1,w,c
  8870  002576  0BEF               	andlw	-17
  8871  002578  1814               	xorwf	??_PWM1,w,c
  8872  00257A  6EBD               	movwf	4029,c	;volatile
  8873                           
  8874                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  8875  00257C  3413               	rlcf	PWM1@duty+1,w,c
  8876  00257E  3013               	rrcf	PWM1@duty+1,w,c
  8877  002580  6E15               	movwf	(??_PWM1+1)& (0+255),c
  8878  002582  3012               	rrcf	PWM1@duty,w,c
  8879  002584  6E14               	movwf	??_PWM1& (0+255),c
  8880  002586  0E01               	movlw	1
  8881  002588  1614               	andwf	??_PWM1,f,c
  8882  00258A  3A14               	swapf	??_PWM1,f,c
  8883  00258C  4614               	rlncf	??_PWM1,f,c
  8884  00258E  50BD               	movf	4029,w,c	;volatile
  8885  002590  1814               	xorwf	??_PWM1,w,c
  8886  002592  0BDF               	andlw	-33
  8887  002594  1814               	xorwf	??_PWM1,w,c
  8888  002596  6EBD               	movwf	4029,c	;volatile
  8889                           
  8890                           ;motors.c: 24: CCPR1L = (duty >> 2);
  8891  002598  C012  F014         	movff	PWM1@duty,??_PWM1
  8892  00259C  C013  F015         	movff	PWM1@duty+1,??_PWM1+1
  8893  0025A0  3415               	rlcf	??_PWM1+1,w,c
  8894  0025A2  3215               	rrcf	??_PWM1+1,f,c
  8895  0025A4  3214               	rrcf	??_PWM1,f,c
  8896  0025A6  3415               	rlcf	??_PWM1+1,w,c
  8897  0025A8  3215               	rrcf	??_PWM1+1,f,c
  8898  0025AA  3214               	rrcf	??_PWM1,f,c
  8899  0025AC  5014               	movf	??_PWM1,w,c
  8900  0025AE  6EBE               	movwf	4030,c	;volatile
  8901  0025B0  0012               	return		;funcret
  8902  0025B2                     __end_of_PWM1:
  8903                           	opt stack 0
  8904                           tblptru	equ	0xFF8
  8905                           tblptrh	equ	0xFF7
  8906                           tblptrl	equ	0xFF6
  8907                           tablat	equ	0xFF5
  8908                           prodh	equ	0xFF4
  8909                           prodl	equ	0xFF3
  8910                           intcon	equ	0xFF2
  8911                           intcon2	equ	0xFF1
  8912                           postinc0	equ	0xFEE
  8913                           wreg	equ	0xFE8
  8914                           indf2	equ	0xFDF
  8915                           postinc2	equ	0xFDE
  8916                           postdec2	equ	0xFDD
  8917                           fsr2h	equ	0xFDA
  8918                           fsr2l	equ	0xFD9
  8919                           status	equ	0xFD8
  8920                           
  8921 ;; *************** function _handler *****************
  8922 ;; Defined at:
  8923 ;;		line 22 in file "main.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;		None
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;		None
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      void 
  8930 ;; Registers used:
  8931 ;;		wreg, status,2, status,0, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;Total ram usage:       14 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    1
  8944 ;; This function calls:
  8945 ;;		_updateS2
  8946 ;;		i2_updateS1
  8947 ;;		i2_updateS3
  8948 ;; This function is called by:
  8949 ;;		Interrupt level 2
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	intcode
  8954  000008                     __pintcode:
  8955                           	opt stack 0
  8956  000008                     _handler:
  8957                           	opt stack 25
  8958                           
  8959                           ;incstack = 0
  8960  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8961  00000A  EDB3  F010         	call	int_func,f	;refresh shadow registers
  8962                           tblptru	equ	0xFF8
  8963                           tblptrh	equ	0xFF7
  8964                           tblptrl	equ	0xFF6
  8965                           tablat	equ	0xFF5
  8966                           prodh	equ	0xFF4
  8967                           prodl	equ	0xFF3
  8968                           intcon	equ	0xFF2
  8969                           intcon2	equ	0xFF1
  8970                           postinc0	equ	0xFEE
  8971                           wreg	equ	0xFE8
  8972                           indf2	equ	0xFDF
  8973                           postinc2	equ	0xFDE
  8974                           postdec2	equ	0xFDD
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979                           	psect	intcode_body
  8980  002166                     __pintcode_body:
  8981                           	opt stack 25
  8982  002166                     int_func:
  8983                           	opt stack 25
  8984  002166  0006               	pop		; remove dummy address from shadow register refresh
  8985  002168  CFFA F004          	movff	pclath,??_handler
  8986  00216C  CFFB F005          	movff	pclatu,??_handler+1
  8987  002170  CFE9 F006          	movff	fsr0l,??_handler+2
  8988  002174  CFEA F007          	movff	fsr0h,??_handler+3
  8989  002178  CFE1 F008          	movff	fsr1l,??_handler+4
  8990  00217C  CFE2 F009          	movff	fsr1h,??_handler+5
  8991  002180  CFD9 F00A          	movff	fsr2l,??_handler+6
  8992  002184  CFDA F00B          	movff	fsr2h,??_handler+7
  8993  002188  CFF3 F00C          	movff	prodl,??_handler+8
  8994  00218C  CFF4 F00D          	movff	prodh,??_handler+9
  8995  002190  CFF6 F00E          	movff	tblptrl,??_handler+10
  8996  002194  CFF7 F00F          	movff	tblptrh,??_handler+11
  8997  002198  CFF8 F010          	movff	tblptru,??_handler+12
  8998  00219C  CFF5 F011          	movff	tablat,??_handler+13
  8999                           
  9000                           ;main.c: 24: (INTCONbits.GIE = 0);
  9001  0021A0  9EF2               	bcf	intcon,7,c	;volatile
  9002                           
  9003                           ;main.c: 25: if(TMR0IF){
  9004  0021A2  A4F2               	btfss	intcon,2,c	;volatile
  9005  0021A4  D00E               	goto	i2l3986
  9006                           
  9007                           ;main.c: 26: TMR0IF = 0;
  9008  0021A6  94F2               	bcf	intcon,2,c	;volatile
  9009                           
  9010                           ;main.c: 27: seconds++;
  9011  0021A8  0100               	movlb	0	; () banked
  9012  0021AA  4BB5               	infsnz	_seconds& (0+255),f,b
  9013  0021AC  2BB6               	incf	(_seconds+1)& (0+255),f,b
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;main.c: 28: TMR0ON = 0;
  9017  0021AE  9ED5               	bcf	4053,7,c	;volatile
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;main.c: 31: T0CON = 0b00010111;
  9021  0021B0  0E17               	movlw	23
  9022  0021B2  6ED5               	movwf	4053,c	;volatile
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;main.c: 32: TMR0H = 0b10000101;
  9026  0021B4  0E85               	movlw	133
  9027  0021B6  6ED7               	movwf	4055,c	;volatile
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;main.c: 33: TMR0L = 0b10101110;
  9031  0021B8  0EAE               	movlw	174
  9032  0021BA  6ED6               	movwf	4054,c	;volatile
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;main.c: 34: T0CON = T0CON | 0b10000000;
  9036  0021BC  50D5               	movf	4053,w,c	;volatile
  9037  0021BE  0980               	iorlw	128
  9038  0021C0  6ED5               	movwf	4053,c	;volatile
  9039  0021C2                     i2l3986:
  9040                           
  9041                           ;main.c: 35: }
  9042                           ;main.c: 37: if(TMR1IF){
  9043  0021C2  A09E               	btfss	3998,0,c	;volatile
  9044  0021C4  D021               	goto	i2l155
  9045                           
  9046                           ;main.c: 38: TMR1IF = 0;
  9047  0021C6  909E               	bcf	3998,0,c	;volatile
  9048                           
  9049                           ;main.c: 39: updateS1(S1mode);
  9050  0021C8  C069  F001         	movff	_S1mode,i2updateS1@mode
  9051  0021CC  C06A  F002         	movff	_S1mode+1,i2updateS1@mode+1
  9052  0021D0  EC3D  F00D         	call	i2_updateS1	;wreg free
  9053                           
  9054                           ;main.c: 40: updateS2(S2mode);
  9055  0021D4  C067  F001         	movff	_S2mode,updateS2@mode
  9056  0021D8  C068  F002         	movff	_S2mode+1,updateS2@mode+1
  9057  0021DC  EC74  F00F         	call	_updateS2	;wreg free
  9058                           
  9059                           ;main.c: 41: updateS3(S3mode);
  9060  0021E0  C065  F001         	movff	_S3mode,i2updateS3@mode
  9061  0021E4  C066  F002         	movff	_S3mode+1,i2updateS3@mode+1
  9062  0021E8  ECCE  F00E         	call	i2_updateS3	;wreg free
  9063                           
  9064                           ;main.c: 42: soupSteps ++;
  9065  0021EC  0100               	movlb	0	; () banked
  9066  0021EE  4BB3               	infsnz	_soupSteps& (0+255),f,b
  9067  0021F0  2BB4               	incf	(_soupSteps+1)& (0+255),f,b
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;main.c: 43: sodaSteps ++;
  9071  0021F2  0100               	movlb	0	; () banked
  9072  0021F4  4BB1               	infsnz	_sodaSteps& (0+255),f,b
  9073  0021F6  2BB2               	incf	(_sodaSteps+1)& (0+255),f,b
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 44: TMR1ON = 0;
  9077  0021F8  90CD               	bcf	4045,0,c	;volatile
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;main.c: 47: T1CON = 0b10110000;
  9081  0021FA  0EB0               	movlw	176
  9082  0021FC  6ECD               	movwf	4045,c	;volatile
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;main.c: 48: TMR1H = 0b11101001;
  9086  0021FE  0EE9               	movlw	233
  9087  002200  6ECF               	movwf	4047,c	;volatile
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;main.c: 49: TMR1L = 0b01011011;
  9091  002202  0E5B               	movlw	91
  9092  002204  6ECE               	movwf	4046,c	;volatile
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;main.c: 50: TMR1ON = 1;
  9096  002206  80CD               	bsf	4045,0,c	;volatile
  9097  002208                     i2l155:
  9098  002208  C011  FFF5         	movff	??_handler+13,tablat
  9099  00220C  C010  FFF8         	movff	??_handler+12,tblptru
  9100  002210  C00F  FFF7         	movff	??_handler+11,tblptrh
  9101  002214  C00E  FFF6         	movff	??_handler+10,tblptrl
  9102  002218  C00D  FFF4         	movff	??_handler+9,prodh
  9103  00221C  C00C  FFF3         	movff	??_handler+8,prodl
  9104  002220  C00B  FFDA         	movff	??_handler+7,fsr2h
  9105  002224  C00A  FFD9         	movff	??_handler+6,fsr2l
  9106  002228  C009  FFE2         	movff	??_handler+5,fsr1h
  9107  00222C  C008  FFE1         	movff	??_handler+4,fsr1l
  9108  002230  C007  FFEA         	movff	??_handler+3,fsr0h
  9109  002234  C006  FFE9         	movff	??_handler+2,fsr0l
  9110  002238  C005  FFFB         	movff	??_handler+1,pclatu
  9111  00223C  C004  FFFA         	movff	??_handler,pclath
  9112  002240  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9113  002242  0011               	retfie		f
  9114  002244                     __end_of_handler:
  9115                           	opt stack 0
  9116                           pclatu	equ	0xFFB
  9117                           pclath	equ	0xFFA
  9118                           tblptru	equ	0xFF8
  9119                           tblptrh	equ	0xFF7
  9120                           tblptrl	equ	0xFF6
  9121                           tablat	equ	0xFF5
  9122                           prodh	equ	0xFF4
  9123                           prodl	equ	0xFF3
  9124                           intcon	equ	0xFF2
  9125                           intcon2	equ	0xFF1
  9126                           postinc0	equ	0xFEE
  9127                           fsr0h	equ	0xFEA
  9128                           fsr0l	equ	0xFE9
  9129                           wreg	equ	0xFE8
  9130                           fsr1h	equ	0xFE2
  9131                           fsr1l	equ	0xFE1
  9132                           indf2	equ	0xFDF
  9133                           postinc2	equ	0xFDE
  9134                           postdec2	equ	0xFDD
  9135                           fsr2h	equ	0xFDA
  9136                           fsr2l	equ	0xFD9
  9137                           status	equ	0xFD8
  9138                           
  9139 ;; *************** function i2_updateS3 *****************
  9140 ;; Defined at:
  9141 ;;		line 157 in file "motors.c"
  9142 ;; Parameters:    Size  Location     Type
  9143 ;;  mode            2    0[COMRAM] int 
  9144 ;; Auto vars:     Size  Location     Type
  9145 ;;		None
  9146 ;; Return value:  Size  Location     Type
  9147 ;;                  1    wreg      void 
  9148 ;; Registers used:
  9149 ;;		wreg, status,2, status,0
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;Total ram usage:        3 bytes
  9160 ;; Hardware stack levels used:    1
  9161 ;; This function calls:
  9162 ;;		Nothing
  9163 ;; This function is called by:
  9164 ;;		_handler
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text33
  9169  001D9C                     __ptext33:
  9170                           	opt stack 0
  9171  001D9C                     i2_updateS3:
  9172                           	opt stack 25
  9173                           
  9174                           ;motors.c: 158: _delay((unsigned long)((5)*(32000000/4000.0)));
  9175                           
  9176                           ;incstack = 0
  9177  001D9C  0E34               	movlw	52
  9178  001D9E  6E03               	movwf	??i2_updateS3& (0+255),c
  9179  001DA0  0EF2               	movlw	242
  9180  001DA2                     i2u557_47:
  9181  001DA2  2EE8               	decfsz	wreg,f,c
  9182  001DA4  D7FE               	bra	i2u557_47
  9183  001DA6  2E03               	decfsz	??i2_updateS3& (0+255),f,c
  9184  001DA8  D7FC               	bra	i2u557_47
  9185                           
  9186                           ;motors.c: 160: if(mode == 0){
  9187  001DAA  5001               	movf	i2updateS3@mode,w,c
  9188  001DAC  1002               	iorwf	i2updateS3@mode+1,w,c
  9189  001DAE  A4D8               	btfss	status,2,c
  9190  001DB0  D005               	goto	i2l3910
  9191                           
  9192                           ;motors.c: 161: LATEbits.LATE2 = 0;
  9193  001DB2  948D               	bcf	3981,2,c	;volatile
  9194                           
  9195                           ;motors.c: 162: LATEbits.LATE1 = 0;
  9196  001DB4  928D               	bcf	3981,1,c	;volatile
  9197                           
  9198                           ;motors.c: 163: LATAbits.LATA4 = 0;
  9199  001DB6  9889               	bcf	3977,4,c	;volatile
  9200                           
  9201                           ;motors.c: 164: LATDbits.LATD0 = 0;
  9202  001DB8  908C               	bcf	3980,0,c	;volatile
  9203                           
  9204                           ;motors.c: 165: }
  9205  001DBA  0012               	return	
  9206  001DBC                     i2l3910:
  9207                           
  9208                           ;motors.c: 166: else if(mode == 4){
  9209  001DBC  0E04               	movlw	4
  9210  001DBE  1801               	xorwf	i2updateS3@mode,w,c
  9211  001DC0  1002               	iorwf	i2updateS3@mode+1,w,c
  9212  001DC2  A4D8               	btfss	status,2,c
  9213  001DC4  D005               	goto	i2l3914
  9214                           
  9215                           ;motors.c: 167: LATEbits.LATE2 = 1;
  9216  001DC6  848D               	bsf	3981,2,c	;volatile
  9217                           
  9218                           ;motors.c: 168: LATEbits.LATE1 = 0;
  9219  001DC8  928D               	bcf	3981,1,c	;volatile
  9220                           
  9221                           ;motors.c: 169: LATAbits.LATA4 = 0;
  9222  001DCA  9889               	bcf	3977,4,c	;volatile
  9223                           
  9224                           ;motors.c: 170: LATDbits.LATD0 = 0;
  9225  001DCC  908C               	bcf	3980,0,c	;volatile
  9226                           
  9227                           ;motors.c: 171: }
  9228  001DCE  0012               	return	
  9229  001DD0                     i2l3914:
  9230                           
  9231                           ;motors.c: 172: else if(mode == 3){
  9232  001DD0  0E03               	movlw	3
  9233  001DD2  1801               	xorwf	i2updateS3@mode,w,c
  9234  001DD4  1002               	iorwf	i2updateS3@mode+1,w,c
  9235  001DD6  A4D8               	btfss	status,2,c
  9236  001DD8  D042               	goto	i2l3938
  9237                           
  9238                           ;motors.c: 173: t3++;
  9239  001DDA  4A57               	infsnz	_t3,f,c
  9240  001DDC  2A58               	incf	_t3+1,f,c
  9241                           
  9242                           ;motors.c: 174: if (t3>8) {t3=1;}
  9243  001DDE  BE58               	btfsc	_t3+1,7,c
  9244  001DE0  D00A               	goto	i2l3922
  9245  001DE2  5058               	movf	_t3+1,w,c
  9246  001DE4  E104               	bnz	i2u412_40
  9247  001DE6  0E09               	movlw	9
  9248  001DE8  5C57               	subwf	_t3,w,c
  9249  001DEA  A0D8               	btfss	status,0,c
  9250  001DEC  D004               	goto	i2l3922
  9251  001DEE                     i2u412_40:
  9252  001DEE  0E00               	movlw	0
  9253  001DF0  6E58               	movwf	_t3+1,c
  9254  001DF2  0E01               	movlw	1
  9255  001DF4  6E57               	movwf	_t3,c
  9256  001DF6                     i2l3922:
  9257                           
  9258                           ;motors.c: 175: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  9259  001DF6  0457               	decf	_t3,w,c
  9260  001DF8  1058               	iorwf	_t3+1,w,c
  9261  001DFA  B4D8               	btfsc	status,2,c
  9262  001DFC  D005               	goto	i2l538
  9263  001DFE  0E08               	movlw	8
  9264  001E00  1857               	xorwf	_t3,w,c
  9265  001E02  1058               	iorwf	_t3+1,w,c
  9266  001E04  A4D8               	btfss	status,2,c
  9267  001E06  D002               	goto	i2l536
  9268  001E08                     i2l538:
  9269  001E08  848D               	bsf	3981,2,c	;volatile
  9270  001E0A  D001               	goto	i2l3926
  9271  001E0C                     i2l536:
  9272                           
  9273                           ;motors.c: 176: else{LATEbits.LATE2 = 0;}
  9274  001E0C  948D               	bcf	3981,2,c	;volatile
  9275  001E0E                     i2l3926:
  9276                           
  9277                           ;motors.c: 177: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  9278  001E0E  0E02               	movlw	2
  9279  001E10  1857               	xorwf	_t3,w,c
  9280  001E12  1058               	iorwf	_t3+1,w,c
  9281  001E14  B4D8               	btfsc	status,2,c
  9282  001E16  D005               	goto	i2l542
  9283  001E18  0E07               	movlw	7
  9284  001E1A  1857               	xorwf	_t3,w,c
  9285  001E1C  1058               	iorwf	_t3+1,w,c
  9286  001E1E  A4D8               	btfss	status,2,c
  9287  001E20  D002               	goto	i2l540
  9288  001E22                     i2l542:
  9289  001E22  828D               	bsf	3981,1,c	;volatile
  9290  001E24  D001               	goto	i2l3930
  9291  001E26                     i2l540:
  9292                           
  9293                           ;motors.c: 178: else{LATEbits.LATE1 = 0;}
  9294  001E26  928D               	bcf	3981,1,c	;volatile
  9295  001E28                     i2l3930:
  9296                           
  9297                           ;motors.c: 179: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  9298  001E28  0E03               	movlw	3
  9299  001E2A  1857               	xorwf	_t3,w,c
  9300  001E2C  1058               	iorwf	_t3+1,w,c
  9301  001E2E  B4D8               	btfsc	status,2,c
  9302  001E30  D005               	goto	i2l546
  9303  001E32  0E06               	movlw	6
  9304  001E34  1857               	xorwf	_t3,w,c
  9305  001E36  1058               	iorwf	_t3+1,w,c
  9306  001E38  A4D8               	btfss	status,2,c
  9307  001E3A  D002               	goto	i2l544
  9308  001E3C                     i2l546:
  9309  001E3C  8889               	bsf	3977,4,c	;volatile
  9310  001E3E  D001               	goto	i2l3934
  9311  001E40                     i2l544:
  9312                           
  9313                           ;motors.c: 180: else{LATAbits.LATA4 = 0;}
  9314  001E40  9889               	bcf	3977,4,c	;volatile
  9315  001E42                     i2l3934:
  9316                           
  9317                           ;motors.c: 181: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  9318  001E42  0E04               	movlw	4
  9319  001E44  1857               	xorwf	_t3,w,c
  9320  001E46  1058               	iorwf	_t3+1,w,c
  9321  001E48  B4D8               	btfsc	status,2,c
  9322  001E4A  D005               	goto	i2l550
  9323  001E4C  0E05               	movlw	5
  9324  001E4E  1857               	xorwf	_t3,w,c
  9325  001E50  1058               	iorwf	_t3+1,w,c
  9326  001E52  A4D8               	btfss	status,2,c
  9327  001E54  D002               	goto	i2l548
  9328  001E56                     i2l550:
  9329  001E56  808C               	bsf	3980,0,c	;volatile
  9330  001E58  0012               	return	
  9331  001E5A                     i2l548:
  9332                           
  9333                           ;motors.c: 182: else{LATDbits.LATD0 = 0;}
  9334  001E5A  908C               	bcf	3980,0,c	;volatile
  9335                           
  9336                           ;motors.c: 183: }
  9337  001E5C  0012               	return	
  9338  001E5E                     i2l3938:
  9339                           
  9340                           ;motors.c: 184: else{
  9341                           ;motors.c: 185: if(mode == 1){
  9342  001E5E  0401               	decf	i2updateS3@mode,w,c
  9343  001E60  1002               	iorwf	i2updateS3@mode+1,w,c
  9344  001E62  A4D8               	btfss	status,2,c
  9345  001E64  D00E               	goto	i2l3946
  9346                           
  9347                           ;motors.c: 186: s3 ++;
  9348  001E66  4A5F               	infsnz	_s3,f,c
  9349  001E68  2A60               	incf	_s3+1,f,c
  9350                           
  9351                           ;motors.c: 187: if (s3>4) {s3=1;}
  9352  001E6A  BE60               	btfsc	_s3+1,7,c
  9353  001E6C  D01D               	goto	i2l3954
  9354  001E6E  5060               	movf	_s3+1,w,c
  9355  001E70  E104               	bnz	i2u422_40
  9356  001E72  0E05               	movlw	5
  9357  001E74  5C5F               	subwf	_s3,w,c
  9358  001E76  A0D8               	btfss	status,0,c
  9359  001E78  D017               	goto	i2l3954
  9360  001E7A                     i2u422_40:
  9361  001E7A  0E00               	movlw	0
  9362  001E7C  6E60               	movwf	_s3+1,c
  9363  001E7E  0E01               	movlw	1
  9364  001E80  D012               	goto	L14
  9365  001E82                     i2l3946:
  9366                           
  9367                           ;motors.c: 189: else if(mode == 2){
  9368  001E82  0E02               	movlw	2
  9369  001E84  1801               	xorwf	i2updateS3@mode,w,c
  9370  001E86  1002               	iorwf	i2updateS3@mode+1,w,c
  9371  001E88  A4D8               	btfss	status,2,c
  9372  001E8A  D00E               	goto	i2l3954
  9373                           
  9374                           ;motors.c: 190: s3 --;
  9375  001E8C  065F               	decf	_s3,f,c
  9376  001E8E  A0D8               	btfss	status,0,c
  9377  001E90  0660               	decf	_s3+1,f,c
  9378                           
  9379                           ;motors.c: 191: if (s3<1) {s3=4;}
  9380  001E92  BE60               	btfsc	_s3+1,7,c
  9381  001E94  D005               	goto	i2l3952
  9382  001E96  5060               	movf	_s3+1,w,c
  9383  001E98  E107               	bnz	i2l3954
  9384  001E9A  045F               	decf	_s3,w,c
  9385  001E9C  B0D8               	btfsc	status,0,c
  9386  001E9E  D004               	goto	i2l3954
  9387  001EA0                     i2l3952:
  9388  001EA0  0E00               	movlw	0
  9389  001EA2  6E60               	movwf	_s3+1,c
  9390  001EA4  0E04               	movlw	4
  9391  001EA6                     L14:
  9392  001EA6  6E5F               	movwf	_s3,c
  9393  001EA8                     i2l3954:
  9394                           
  9395                           ;motors.c: 192: }
  9396                           ;motors.c: 193: if (s3 == 1){LATEbits.LATE2 = 1;}
  9397  001EA8  045F               	decf	_s3,w,c
  9398  001EAA  1060               	iorwf	_s3+1,w,c
  9399  001EAC  A4D8               	btfss	status,2,c
  9400  001EAE  D002               	goto	i2l558
  9401  001EB0  848D               	bsf	3981,2,c	;volatile
  9402  001EB2  D001               	goto	i2l3958
  9403  001EB4                     i2l558:
  9404                           
  9405                           ;motors.c: 194: else{LATEbits.LATE2 = 0;}
  9406  001EB4  948D               	bcf	3981,2,c	;volatile
  9407  001EB6                     i2l3958:
  9408                           
  9409                           ;motors.c: 195: if (s3 == 2){LATEbits.LATE1 = 1;}
  9410  001EB6  0E02               	movlw	2
  9411  001EB8  185F               	xorwf	_s3,w,c
  9412  001EBA  1060               	iorwf	_s3+1,w,c
  9413  001EBC  A4D8               	btfss	status,2,c
  9414  001EBE  D002               	goto	i2l560
  9415  001EC0  828D               	bsf	3981,1,c	;volatile
  9416  001EC2  D001               	goto	i2l3962
  9417  001EC4                     i2l560:
  9418                           
  9419                           ;motors.c: 196: else{LATEbits.LATE1 = 0;}
  9420  001EC4  928D               	bcf	3981,1,c	;volatile
  9421  001EC6                     i2l3962:
  9422                           
  9423                           ;motors.c: 197: if (s3 == 3){LATAbits.LATA4 = 1;}
  9424  001EC6  0E03               	movlw	3
  9425  001EC8  185F               	xorwf	_s3,w,c
  9426  001ECA  1060               	iorwf	_s3+1,w,c
  9427  001ECC  A4D8               	btfss	status,2,c
  9428  001ECE  D002               	goto	i2l562
  9429  001ED0  8889               	bsf	3977,4,c	;volatile
  9430  001ED2  D001               	goto	i2l3966
  9431  001ED4                     i2l562:
  9432                           
  9433                           ;motors.c: 198: else{LATAbits.LATA4 = 0;}
  9434  001ED4  9889               	bcf	3977,4,c	;volatile
  9435  001ED6                     i2l3966:
  9436                           
  9437                           ;motors.c: 199: if (s3 == 4){LATDbits.LATD0 = 1;}
  9438  001ED6  0E04               	movlw	4
  9439  001ED8  185F               	xorwf	_s3,w,c
  9440  001EDA  1060               	iorwf	_s3+1,w,c
  9441  001EDC  A4D8               	btfss	status,2,c
  9442  001EDE  D002               	goto	i2l564
  9443  001EE0  808C               	bsf	3980,0,c	;volatile
  9444  001EE2  0012               	return	
  9445  001EE4                     i2l564:
  9446                           
  9447                           ;motors.c: 200: else{LATDbits.LATD0 = 0;}
  9448  001EE4  908C               	bcf	3980,0,c	;volatile
  9449  001EE6  0012               	return	
  9450  001EE8                     __end_ofi2_updateS3:
  9451                           	opt stack 0
  9452                           pclatu	equ	0xFFB
  9453                           pclath	equ	0xFFA
  9454                           tblptru	equ	0xFF8
  9455                           tblptrh	equ	0xFF7
  9456                           tblptrl	equ	0xFF6
  9457                           tablat	equ	0xFF5
  9458                           prodh	equ	0xFF4
  9459                           prodl	equ	0xFF3
  9460                           intcon	equ	0xFF2
  9461                           intcon2	equ	0xFF1
  9462                           postinc0	equ	0xFEE
  9463                           fsr0h	equ	0xFEA
  9464                           fsr0l	equ	0xFE9
  9465                           wreg	equ	0xFE8
  9466                           fsr1h	equ	0xFE2
  9467                           fsr1l	equ	0xFE1
  9468                           indf2	equ	0xFDF
  9469                           postinc2	equ	0xFDE
  9470                           postdec2	equ	0xFDD
  9471                           fsr2h	equ	0xFDA
  9472                           fsr2l	equ	0xFD9
  9473                           status	equ	0xFD8
  9474                           
  9475 ;; *************** function i2_updateS1 *****************
  9476 ;; Defined at:
  9477 ;;		line 55 in file "motors.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  mode            2    0[COMRAM] int 
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;		None
  9482 ;; Return value:  Size  Location     Type
  9483 ;;                  1    wreg      void 
  9484 ;; Registers used:
  9485 ;;		wreg, status,2, status,0
  9486 ;; Tracked objects:
  9487 ;;		On entry : 0/0
  9488 ;;		On exit  : 0/0
  9489 ;;		Unchanged: 0/0
  9490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;Total ram usage:        3 bytes
  9496 ;; Hardware stack levels used:    1
  9497 ;; This function calls:
  9498 ;;		Nothing
  9499 ;; This function is called by:
  9500 ;;		_handler
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           	psect	text34
  9505  001A7A                     __ptext34:
  9506                           	opt stack 0
  9507  001A7A                     i2_updateS1:
  9508                           	opt stack 25
  9509                           
  9510                           ;motors.c: 56: _delay((unsigned long)((5)*(32000000/4000.0)));
  9511                           
  9512                           ;incstack = 0
  9513  001A7A  0E34               	movlw	52
  9514  001A7C  6E03               	movwf	??i2_updateS1& (0+255),c
  9515  001A7E  0EF2               	movlw	242
  9516  001A80                     i2u558_47:
  9517  001A80  2EE8               	decfsz	wreg,f,c
  9518  001A82  D7FE               	bra	i2u558_47
  9519  001A84  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9520  001A86  D7FC               	bra	i2u558_47
  9521                           
  9522                           ;motors.c: 58: if(mode == 0){
  9523  001A88  5001               	movf	i2updateS1@mode,w,c
  9524  001A8A  1002               	iorwf	i2updateS1@mode+1,w,c
  9525  001A8C  A4D8               	btfss	status,2,c
  9526  001A8E  D005               	goto	i2l3816
  9527                           
  9528                           ;motors.c: 59: LATDbits.LATD1 = 0;
  9529  001A90  928C               	bcf	3980,1,c	;volatile
  9530                           
  9531                           ;motors.c: 60: LATBbits.LATB3 = 0;
  9532  001A92  968A               	bcf	3978,3,c	;volatile
  9533                           
  9534                           ;motors.c: 61: LATBbits.LATB2 = 0;
  9535  001A94  948A               	bcf	3978,2,c	;volatile
  9536                           
  9537                           ;motors.c: 62: LATBbits.LATB0 = 0;
  9538  001A96  908A               	bcf	3978,0,c	;volatile
  9539                           
  9540                           ;motors.c: 63: }
  9541  001A98  0012               	return	
  9542  001A9A                     i2l3816:
  9543                           
  9544                           ;motors.c: 64: else if(mode == 3){
  9545  001A9A  0E03               	movlw	3
  9546  001A9C  1801               	xorwf	i2updateS1@mode,w,c
  9547  001A9E  1002               	iorwf	i2updateS1@mode+1,w,c
  9548  001AA0  A4D8               	btfss	status,2,c
  9549  001AA2  D049               	goto	i2l3842
  9550                           
  9551                           ;motors.c: 65: t++;
  9552  001AA4  4A5B               	infsnz	_t,f,c
  9553  001AA6  2A5C               	incf	_t+1,f,c
  9554                           
  9555                           ;motors.c: 66: if (t>8) {t=1;}
  9556  001AA8  BE5C               	btfsc	_t+1,7,c
  9557  001AAA  D00A               	goto	i2l3824
  9558  001AAC  505C               	movf	_t+1,w,c
  9559  001AAE  E104               	bnz	i2u382_40
  9560  001AB0  0E09               	movlw	9
  9561  001AB2  5C5B               	subwf	_t,w,c
  9562  001AB4  A0D8               	btfss	status,0,c
  9563  001AB6  D004               	goto	i2l3824
  9564  001AB8                     i2u382_40:
  9565  001AB8  0E00               	movlw	0
  9566  001ABA  6E5C               	movwf	_t+1,c
  9567  001ABC  0E01               	movlw	1
  9568  001ABE  6E5B               	movwf	_t,c
  9569  001AC0                     i2l3824:
  9570                           
  9571                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  9572  001AC0  0E34               	movlw	52
  9573  001AC2  6E03               	movwf	??i2_updateS1& (0+255),c
  9574  001AC4  0EF2               	movlw	242
  9575  001AC6                     i2u559_47:
  9576  001AC6  2EE8               	decfsz	wreg,f,c
  9577  001AC8  D7FE               	bra	i2u559_47
  9578  001ACA  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9579  001ACC  D7FC               	bra	i2u559_47
  9580                           
  9581                           ;motors.c: 68: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  9582  001ACE  045B               	decf	_t,w,c
  9583  001AD0  105C               	iorwf	_t+1,w,c
  9584  001AD2  B4D8               	btfsc	status,2,c
  9585  001AD4  D005               	goto	i2l446
  9586  001AD6  0E08               	movlw	8
  9587  001AD8  185B               	xorwf	_t,w,c
  9588  001ADA  105C               	iorwf	_t+1,w,c
  9589  001ADC  A4D8               	btfss	status,2,c
  9590  001ADE  D002               	goto	i2l444
  9591  001AE0                     i2l446:
  9592  001AE0  828C               	bsf	3980,1,c	;volatile
  9593  001AE2  D001               	goto	i2l3830
  9594  001AE4                     i2l444:
  9595                           
  9596                           ;motors.c: 69: else{LATDbits.LATD1 = 0;}
  9597  001AE4  928C               	bcf	3980,1,c	;volatile
  9598  001AE6                     i2l3830:
  9599                           
  9600                           ;motors.c: 70: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  9601  001AE6  0E02               	movlw	2
  9602  001AE8  185B               	xorwf	_t,w,c
  9603  001AEA  105C               	iorwf	_t+1,w,c
  9604  001AEC  B4D8               	btfsc	status,2,c
  9605  001AEE  D005               	goto	i2l450
  9606  001AF0  0E07               	movlw	7
  9607  001AF2  185B               	xorwf	_t,w,c
  9608  001AF4  105C               	iorwf	_t+1,w,c
  9609  001AF6  A4D8               	btfss	status,2,c
  9610  001AF8  D002               	goto	i2l448
  9611  001AFA                     i2l450:
  9612  001AFA  868A               	bsf	3978,3,c	;volatile
  9613  001AFC  D001               	goto	i2l3834
  9614  001AFE                     i2l448:
  9615                           
  9616                           ;motors.c: 71: else{LATBbits.LATB3 = 0;}
  9617  001AFE  968A               	bcf	3978,3,c	;volatile
  9618  001B00                     i2l3834:
  9619                           
  9620                           ;motors.c: 72: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  9621  001B00  0E03               	movlw	3
  9622  001B02  185B               	xorwf	_t,w,c
  9623  001B04  105C               	iorwf	_t+1,w,c
  9624  001B06  B4D8               	btfsc	status,2,c
  9625  001B08  D005               	goto	i2l454
  9626  001B0A  0E06               	movlw	6
  9627  001B0C  185B               	xorwf	_t,w,c
  9628  001B0E  105C               	iorwf	_t+1,w,c
  9629  001B10  A4D8               	btfss	status,2,c
  9630  001B12  D002               	goto	i2l452
  9631  001B14                     i2l454:
  9632  001B14  848A               	bsf	3978,2,c	;volatile
  9633  001B16  D001               	goto	i2l3838
  9634  001B18                     i2l452:
  9635                           
  9636                           ;motors.c: 73: else{LATBbits.LATB2 = 0;}
  9637  001B18  948A               	bcf	3978,2,c	;volatile
  9638  001B1A                     i2l3838:
  9639                           
  9640                           ;motors.c: 74: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  9641  001B1A  0E04               	movlw	4
  9642  001B1C  185B               	xorwf	_t,w,c
  9643  001B1E  105C               	iorwf	_t+1,w,c
  9644  001B20  B4D8               	btfsc	status,2,c
  9645  001B22  D005               	goto	i2l458
  9646  001B24  0E05               	movlw	5
  9647  001B26  185B               	xorwf	_t,w,c
  9648  001B28  105C               	iorwf	_t+1,w,c
  9649  001B2A  A4D8               	btfss	status,2,c
  9650  001B2C  D002               	goto	i2l456
  9651  001B2E                     i2l458:
  9652  001B2E  808A               	bsf	3978,0,c	;volatile
  9653  001B30  0012               	return	
  9654  001B32                     i2l456:
  9655                           
  9656                           ;motors.c: 75: else{LATBbits.LATB0 = 0;}
  9657  001B32  908A               	bcf	3978,0,c	;volatile
  9658                           
  9659                           ;motors.c: 76: }
  9660  001B34  0012               	return	
  9661  001B36                     i2l3842:
  9662                           
  9663                           ;motors.c: 77: else{
  9664                           ;motors.c: 78: _delay((unsigned long)((10)*(32000000/4000.0)));
  9665  001B36  0E68               	movlw	104
  9666  001B38  6E03               	movwf	??i2_updateS1& (0+255),c
  9667  001B3A  0EE4               	movlw	228
  9668  001B3C                     i2u560_47:
  9669  001B3C  2EE8               	decfsz	wreg,f,c
  9670  001B3E  D7FE               	bra	i2u560_47
  9671  001B40  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9672  001B42  D7FC               	bra	i2u560_47
  9673  001B44  D000               	nop2	
  9674                           
  9675                           ;motors.c: 80: if(mode == 1 || mode == 5){
  9676  001B46  0401               	decf	i2updateS1@mode,w,c
  9677  001B48  1002               	iorwf	i2updateS1@mode+1,w,c
  9678  001B4A  B4D8               	btfsc	status,2,c
  9679  001B4C  D005               	goto	i2l3848
  9680  001B4E  0E05               	movlw	5
  9681  001B50  1801               	xorwf	i2updateS1@mode,w,c
  9682  001B52  1002               	iorwf	i2updateS1@mode+1,w,c
  9683  001B54  A4D8               	btfss	status,2,c
  9684  001B56  D00E               	goto	i2l3854
  9685  001B58                     i2l3848:
  9686                           
  9687                           ;motors.c: 81: s1 ++;
  9688  001B58  4A63               	infsnz	_s1,f,c
  9689  001B5A  2A64               	incf	_s1+1,f,c
  9690                           
  9691                           ;motors.c: 82: if (s1>4) {s1=1;}
  9692  001B5C  BE64               	btfsc	_s1+1,7,c
  9693  001B5E  D022               	goto	i2l3864
  9694  001B60  5064               	movf	_s1+1,w,c
  9695  001B62  E104               	bnz	i2u393_40
  9696  001B64  0E05               	movlw	5
  9697  001B66  5C63               	subwf	_s1,w,c
  9698  001B68  A0D8               	btfss	status,0,c
  9699  001B6A  D01C               	goto	i2l3864
  9700  001B6C                     i2u393_40:
  9701  001B6C  0E00               	movlw	0
  9702  001B6E  6E64               	movwf	_s1+1,c
  9703  001B70  0E01               	movlw	1
  9704  001B72  D017               	goto	L15
  9705  001B74                     i2l3854:
  9706                           
  9707                           ;motors.c: 85: else if(mode == 2 || mode==6){
  9708  001B74  0E02               	movlw	2
  9709  001B76  1801               	xorwf	i2updateS1@mode,w,c
  9710  001B78  1002               	iorwf	i2updateS1@mode+1,w,c
  9711  001B7A  B4D8               	btfsc	status,2,c
  9712  001B7C  D005               	goto	i2l3858
  9713  001B7E  0E06               	movlw	6
  9714  001B80  1801               	xorwf	i2updateS1@mode,w,c
  9715  001B82  1002               	iorwf	i2updateS1@mode+1,w,c
  9716  001B84  A4D8               	btfss	status,2,c
  9717  001B86  D00E               	goto	i2l3864
  9718  001B88                     i2l3858:
  9719                           
  9720                           ;motors.c: 86: s1 --;
  9721  001B88  0663               	decf	_s1,f,c
  9722  001B8A  A0D8               	btfss	status,0,c
  9723  001B8C  0664               	decf	_s1+1,f,c
  9724                           
  9725                           ;motors.c: 87: if (s1<1) {s1=4;}
  9726  001B8E  BE64               	btfsc	_s1+1,7,c
  9727  001B90  D005               	goto	i2l3862
  9728  001B92  5064               	movf	_s1+1,w,c
  9729  001B94  E107               	bnz	i2l3864
  9730  001B96  0463               	decf	_s1,w,c
  9731  001B98  B0D8               	btfsc	status,0,c
  9732  001B9A  D004               	goto	i2l3864
  9733  001B9C                     i2l3862:
  9734  001B9C  0E00               	movlw	0
  9735  001B9E  6E64               	movwf	_s1+1,c
  9736  001BA0  0E04               	movlw	4
  9737  001BA2                     L15:
  9738  001BA2  6E63               	movwf	_s1,c
  9739  001BA4                     i2l3864:
  9740                           
  9741                           ;motors.c: 88: }
  9742                           ;motors.c: 90: if(mode == 1 || mode ==2){
  9743  001BA4  0401               	decf	i2updateS1@mode,w,c
  9744  001BA6  1002               	iorwf	i2updateS1@mode+1,w,c
  9745  001BA8  B4D8               	btfsc	status,2,c
  9746  001BAA  D005               	goto	i2l3868
  9747  001BAC  0E02               	movlw	2
  9748  001BAE  1801               	xorwf	i2updateS1@mode,w,c
  9749  001BB0  1002               	iorwf	i2updateS1@mode+1,w,c
  9750  001BB2  A4D8               	btfss	status,2,c
  9751  001BB4  D01F               	goto	i2l3884
  9752  001BB6                     i2l3868:
  9753                           
  9754                           ;motors.c: 91: if (s1 == 1){LATDbits.LATD1 = 1;}
  9755  001BB6  0463               	decf	_s1,w,c
  9756  001BB8  1064               	iorwf	_s1+1,w,c
  9757  001BBA  A4D8               	btfss	status,2,c
  9758  001BBC  D002               	goto	i2l473
  9759  001BBE  828C               	bsf	3980,1,c	;volatile
  9760  001BC0  D001               	goto	i2l3872
  9761  001BC2                     i2l473:
  9762                           
  9763                           ;motors.c: 92: else{LATDbits.LATD1 = 0;}
  9764  001BC2  928C               	bcf	3980,1,c	;volatile
  9765  001BC4                     i2l3872:
  9766                           
  9767                           ;motors.c: 93: if (s1 == 2){LATBbits.LATB3 = 1;}
  9768  001BC4  0E02               	movlw	2
  9769  001BC6  1863               	xorwf	_s1,w,c
  9770  001BC8  1064               	iorwf	_s1+1,w,c
  9771  001BCA  A4D8               	btfss	status,2,c
  9772  001BCC  D002               	goto	i2l475
  9773  001BCE  868A               	bsf	3978,3,c	;volatile
  9774  001BD0  D001               	goto	i2l3876
  9775  001BD2                     i2l475:
  9776                           
  9777                           ;motors.c: 94: else{LATBbits.LATB3 = 0;}
  9778  001BD2  968A               	bcf	3978,3,c	;volatile
  9779  001BD4                     i2l3876:
  9780                           
  9781                           ;motors.c: 95: if (s1 == 3){LATBbits.LATB2 = 1;}
  9782  001BD4  0E03               	movlw	3
  9783  001BD6  1863               	xorwf	_s1,w,c
  9784  001BD8  1064               	iorwf	_s1+1,w,c
  9785  001BDA  A4D8               	btfss	status,2,c
  9786  001BDC  D002               	goto	i2l477
  9787  001BDE  848A               	bsf	3978,2,c	;volatile
  9788  001BE0  D001               	goto	i2l3880
  9789  001BE2                     i2l477:
  9790                           
  9791                           ;motors.c: 96: else{LATBbits.LATB2 = 0;}
  9792  001BE2  948A               	bcf	3978,2,c	;volatile
  9793  001BE4                     i2l3880:
  9794                           
  9795                           ;motors.c: 97: if (s1 == 4){LATBbits.LATB0 = 1;}
  9796  001BE4  0E04               	movlw	4
  9797  001BE6  1863               	xorwf	_s1,w,c
  9798  001BE8  1064               	iorwf	_s1+1,w,c
  9799  001BEA  A4D8               	btfss	status,2,c
  9800  001BEC  D002               	goto	i2l479
  9801  001BEE  808A               	bsf	3978,0,c	;volatile
  9802  001BF0  D001               	goto	i2l3884
  9803  001BF2                     i2l479:
  9804                           
  9805                           ;motors.c: 98: else{LATBbits.LATB0 = 0;}
  9806  001BF2  908A               	bcf	3978,0,c	;volatile
  9807  001BF4                     i2l3884:
  9808                           
  9809                           ;motors.c: 99: }
  9810                           ;motors.c: 100: if(mode == 5 || mode ==6){
  9811  001BF4  0E05               	movlw	5
  9812  001BF6  1801               	xorwf	i2updateS1@mode,w,c
  9813  001BF8  1002               	iorwf	i2updateS1@mode+1,w,c
  9814  001BFA  B4D8               	btfsc	status,2,c
  9815  001BFC  D005               	goto	i2l3888
  9816  001BFE  0E06               	movlw	6
  9817  001C00  1801               	xorwf	i2updateS1@mode,w,c
  9818  001C02  1002               	iorwf	i2updateS1@mode+1,w,c
  9819  001C04  A4D8               	btfss	status,2,c
  9820  001C06  0012               	return	
  9821  001C08                     i2l3888:
  9822                           
  9823                           ;motors.c: 101: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  9824  001C08  0463               	decf	_s1,w,c
  9825  001C0A  1064               	iorwf	_s1+1,w,c
  9826  001C0C  A4D8               	btfss	status,2,c
  9827  001C0E  D004               	goto	i2l3892
  9828  001C10  828C               	bsf	3980,1,c	;volatile
  9829  001C12  868A               	bsf	3978,3,c	;volatile
  9830  001C14  948A               	bcf	3978,2,c	;volatile
  9831  001C16  908A               	bcf	3978,0,c	;volatile
  9832  001C18                     i2l3892:
  9833                           
  9834                           ;motors.c: 102: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  9835  001C18  0E02               	movlw	2
  9836  001C1A  1863               	xorwf	_s1,w,c
  9837  001C1C  1064               	iorwf	_s1+1,w,c
  9838  001C1E  A4D8               	btfss	status,2,c
  9839  001C20  D004               	goto	i2l3896
  9840  001C22  928C               	bcf	3980,1,c	;volatile
  9841  001C24  868A               	bsf	3978,3,c	;volatile
  9842  001C26  848A               	bsf	3978,2,c	;volatile
  9843  001C28  908A               	bcf	3978,0,c	;volatile
  9844  001C2A                     i2l3896:
  9845                           
  9846                           ;motors.c: 103: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  9847  001C2A  0E03               	movlw	3
  9848  001C2C  1863               	xorwf	_s1,w,c
  9849  001C2E  1064               	iorwf	_s1+1,w,c
  9850  001C30  A4D8               	btfss	status,2,c
  9851  001C32  D004               	goto	i2l3900
  9852  001C34  928C               	bcf	3980,1,c	;volatile
  9853  001C36  968A               	bcf	3978,3,c	;volatile
  9854  001C38  848A               	bsf	3978,2,c	;volatile
  9855  001C3A  808A               	bsf	3978,0,c	;volatile
  9856  001C3C                     i2l3900:
  9857                           
  9858                           ;motors.c: 104: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  9859  001C3C  0E04               	movlw	4
  9860  001C3E  1863               	xorwf	_s1,w,c
  9861  001C40  1064               	iorwf	_s1+1,w,c
  9862  001C42  A4D8               	btfss	status,2,c
  9863  001C44  0012               	return	
  9864  001C46  828C               	bsf	3980,1,c	;volatile
  9865  001C48  968A               	bcf	3978,3,c	;volatile
  9866  001C4A  948A               	bcf	3978,2,c	;volatile
  9867  001C4C  808A               	bsf	3978,0,c	;volatile
  9868  001C4E  0012               	return	
  9869  001C50                     __end_ofi2_updateS1:
  9870                           	opt stack 0
  9871                           pclatu	equ	0xFFB
  9872                           pclath	equ	0xFFA
  9873                           tblptru	equ	0xFF8
  9874                           tblptrh	equ	0xFF7
  9875                           tblptrl	equ	0xFF6
  9876                           tablat	equ	0xFF5
  9877                           prodh	equ	0xFF4
  9878                           prodl	equ	0xFF3
  9879                           intcon	equ	0xFF2
  9880                           intcon2	equ	0xFF1
  9881                           postinc0	equ	0xFEE
  9882                           fsr0h	equ	0xFEA
  9883                           fsr0l	equ	0xFE9
  9884                           wreg	equ	0xFE8
  9885                           fsr1h	equ	0xFE2
  9886                           fsr1l	equ	0xFE1
  9887                           indf2	equ	0xFDF
  9888                           postinc2	equ	0xFDE
  9889                           postdec2	equ	0xFDD
  9890                           fsr2h	equ	0xFDA
  9891                           fsr2l	equ	0xFD9
  9892                           status	equ	0xFD8
  9893                           
  9894 ;; *************** function _updateS2 *****************
  9895 ;; Defined at:
  9896 ;;		line 110 in file "motors.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;  mode            2    0[COMRAM] int 
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;		None
  9901 ;; Return value:  Size  Location     Type
  9902 ;;                  1    wreg      void 
  9903 ;; Registers used:
  9904 ;;		wreg, status,2, status,0
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9910 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9913 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;Total ram usage:        3 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; This function calls:
  9917 ;;		Nothing
  9918 ;; This function is called by:
  9919 ;;		_handler
  9920 ;; This function uses a non-reentrant model
  9921 ;;
  9922                           
  9923                           	psect	text35
  9924  001EE8                     __ptext35:
  9925                           	opt stack 0
  9926  001EE8                     _updateS2:
  9927                           	opt stack 25
  9928                           
  9929                           ;motors.c: 111: _delay((unsigned long)((5)*(32000000/4000.0)));
  9930                           
  9931                           ;incstack = 0
  9932  001EE8  0E34               	movlw	52
  9933  001EEA  6E03               	movwf	??_updateS2& (0+255),c
  9934  001EEC  0EF2               	movlw	242
  9935  001EEE                     i2u561_47:
  9936  001EEE  2EE8               	decfsz	wreg,f,c
  9937  001EF0  D7FE               	bra	i2u561_47
  9938  001EF2  2E03               	decfsz	??_updateS2& (0+255),f,c
  9939  001EF4  D7FC               	bra	i2u561_47
  9940                           
  9941                           ;motors.c: 113: if(mode == 0){
  9942  001EF6  5001               	movf	updateS2@mode,w,c
  9943  001EF8  1002               	iorwf	updateS2@mode+1,w,c
  9944  001EFA  A4D8               	btfss	status,2,c
  9945  001EFC  D005               	goto	i2l3482
  9946                           
  9947                           ;motors.c: 114: LATCbits.LATC7 = 0;
  9948  001EFE  9E8B               	bcf	3979,7,c	;volatile
  9949                           
  9950                           ;motors.c: 115: LATCbits.LATC6 = 0;
  9951  001F00  9C8B               	bcf	3979,6,c	;volatile
  9952                           
  9953                           ;motors.c: 116: LATCbits.LATC0 = 0;
  9954  001F02  908B               	bcf	3979,0,c	;volatile
  9955                           
  9956                           ;motors.c: 117: LATCbits.LATC5 = 0;
  9957  001F04  9A8B               	bcf	3979,5,c	;volatile
  9958                           
  9959                           ;motors.c: 118: }
  9960  001F06  0012               	return	
  9961  001F08                     i2l3482:
  9962                           
  9963                           ;motors.c: 119: else if(mode == 4){
  9964  001F08  0E04               	movlw	4
  9965  001F0A  1801               	xorwf	updateS2@mode,w,c
  9966  001F0C  1002               	iorwf	updateS2@mode+1,w,c
  9967  001F0E  A4D8               	btfss	status,2,c
  9968  001F10  D005               	goto	i2l3486
  9969                           
  9970                           ;motors.c: 120: LATCbits.LATC7 = 1;
  9971  001F12  8E8B               	bsf	3979,7,c	;volatile
  9972                           
  9973                           ;motors.c: 121: LATCbits.LATC6 = 0;
  9974  001F14  9C8B               	bcf	3979,6,c	;volatile
  9975                           
  9976                           ;motors.c: 122: LATCbits.LATC0 = 0;
  9977  001F16  908B               	bcf	3979,0,c	;volatile
  9978                           
  9979                           ;motors.c: 123: LATCbits.LATC5 = 0;
  9980  001F18  9A8B               	bcf	3979,5,c	;volatile
  9981                           
  9982                           ;motors.c: 124: }
  9983  001F1A  0012               	return	
  9984  001F1C                     i2l3486:
  9985                           
  9986                           ;motors.c: 125: else if(mode == 3){
  9987  001F1C  0E03               	movlw	3
  9988  001F1E  1801               	xorwf	updateS2@mode,w,c
  9989  001F20  1002               	iorwf	updateS2@mode+1,w,c
  9990  001F22  A4D8               	btfss	status,2,c
  9991  001F24  D042               	goto	i2l3510
  9992                           
  9993                           ;motors.c: 126: t2++;
  9994  001F26  4A59               	infsnz	_t2,f,c
  9995  001F28  2A5A               	incf	_t2+1,f,c
  9996                           
  9997                           ;motors.c: 127: if (t2>8) {t2=1;}
  9998  001F2A  BE5A               	btfsc	_t2+1,7,c
  9999  001F2C  D00A               	goto	i2l3494
 10000  001F2E  505A               	movf	_t2+1,w,c
 10001  001F30  E104               	bnz	i2u335_40
 10002  001F32  0E09               	movlw	9
 10003  001F34  5C59               	subwf	_t2,w,c
 10004  001F36  A0D8               	btfss	status,0,c
 10005  001F38  D004               	goto	i2l3494
 10006  001F3A                     i2u335_40:
 10007  001F3A  0E00               	movlw	0
 10008  001F3C  6E5A               	movwf	_t2+1,c
 10009  001F3E  0E01               	movlw	1
 10010  001F40  6E59               	movwf	_t2,c
 10011  001F42                     i2l3494:
 10012                           
 10013                           ;motors.c: 128: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
 10014  001F42  0459               	decf	_t2,w,c
 10015  001F44  105A               	iorwf	_t2+1,w,c
 10016  001F46  B4D8               	btfsc	status,2,c
 10017  001F48  D005               	goto	i2l499
 10018  001F4A  0E08               	movlw	8
 10019  001F4C  1859               	xorwf	_t2,w,c
 10020  001F4E  105A               	iorwf	_t2+1,w,c
 10021  001F50  A4D8               	btfss	status,2,c
 10022  001F52  D002               	goto	i2l497
 10023  001F54                     i2l499:
 10024  001F54  8E8B               	bsf	3979,7,c	;volatile
 10025  001F56  D001               	goto	i2l3498
 10026  001F58                     i2l497:
 10027                           
 10028                           ;motors.c: 129: else{LATCbits.LATC7 = 0;}
 10029  001F58  9E8B               	bcf	3979,7,c	;volatile
 10030  001F5A                     i2l3498:
 10031                           
 10032                           ;motors.c: 130: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
 10033  001F5A  0E02               	movlw	2
 10034  001F5C  1859               	xorwf	_t2,w,c
 10035  001F5E  105A               	iorwf	_t2+1,w,c
 10036  001F60  B4D8               	btfsc	status,2,c
 10037  001F62  D005               	goto	i2l503
 10038  001F64  0E07               	movlw	7
 10039  001F66  1859               	xorwf	_t2,w,c
 10040  001F68  105A               	iorwf	_t2+1,w,c
 10041  001F6A  A4D8               	btfss	status,2,c
 10042  001F6C  D002               	goto	i2l501
 10043  001F6E                     i2l503:
 10044  001F6E  8C8B               	bsf	3979,6,c	;volatile
 10045  001F70  D001               	goto	i2l3502
 10046  001F72                     i2l501:
 10047                           
 10048                           ;motors.c: 131: else{LATCbits.LATC6 = 0;}
 10049  001F72  9C8B               	bcf	3979,6,c	;volatile
 10050  001F74                     i2l3502:
 10051                           
 10052                           ;motors.c: 132: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
 10053  001F74  0E03               	movlw	3
 10054  001F76  1859               	xorwf	_t2,w,c
 10055  001F78  105A               	iorwf	_t2+1,w,c
 10056  001F7A  B4D8               	btfsc	status,2,c
 10057  001F7C  D005               	goto	i2l507
 10058  001F7E  0E06               	movlw	6
 10059  001F80  1859               	xorwf	_t2,w,c
 10060  001F82  105A               	iorwf	_t2+1,w,c
 10061  001F84  A4D8               	btfss	status,2,c
 10062  001F86  D002               	goto	i2l505
 10063  001F88                     i2l507:
 10064  001F88  808B               	bsf	3979,0,c	;volatile
 10065  001F8A  D001               	goto	i2l3506
 10066  001F8C                     i2l505:
 10067                           
 10068                           ;motors.c: 133: else{LATCbits.LATC0 = 0;}
 10069  001F8C  908B               	bcf	3979,0,c	;volatile
 10070  001F8E                     i2l3506:
 10071                           
 10072                           ;motors.c: 134: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
 10073  001F8E  0E04               	movlw	4
 10074  001F90  1859               	xorwf	_t2,w,c
 10075  001F92  105A               	iorwf	_t2+1,w,c
 10076  001F94  B4D8               	btfsc	status,2,c
 10077  001F96  D005               	goto	i2l511
 10078  001F98  0E05               	movlw	5
 10079  001F9A  1859               	xorwf	_t2,w,c
 10080  001F9C  105A               	iorwf	_t2+1,w,c
 10081  001F9E  A4D8               	btfss	status,2,c
 10082  001FA0  D002               	goto	i2l509
 10083  001FA2                     i2l511:
 10084  001FA2  8A8B               	bsf	3979,5,c	;volatile
 10085  001FA4  0012               	return	
 10086  001FA6                     i2l509:
 10087                           
 10088                           ;motors.c: 135: else{LATCbits.LATC5 = 0;}
 10089  001FA6  9A8B               	bcf	3979,5,c	;volatile
 10090                           
 10091                           ;motors.c: 136: }
 10092  001FA8  0012               	return	
 10093  001FAA                     i2l3510:
 10094                           
 10095                           ;motors.c: 137: else{
 10096                           ;motors.c: 138: if(mode == 1){
 10097  001FAA  0401               	decf	updateS2@mode,w,c
 10098  001FAC  1002               	iorwf	updateS2@mode+1,w,c
 10099  001FAE  A4D8               	btfss	status,2,c
 10100  001FB0  D00E               	goto	i2l3518
 10101                           
 10102                           ;motors.c: 139: s2 ++;
 10103  001FB2  4A61               	infsnz	_s2,f,c
 10104  001FB4  2A62               	incf	_s2+1,f,c
 10105                           
 10106                           ;motors.c: 140: if (s2>4) {s2=1;}
 10107  001FB6  BE62               	btfsc	_s2+1,7,c
 10108  001FB8  D01D               	goto	i2l3526
 10109  001FBA  5062               	movf	_s2+1,w,c
 10110  001FBC  E104               	bnz	i2u345_40
 10111  001FBE  0E05               	movlw	5
 10112  001FC0  5C61               	subwf	_s2,w,c
 10113  001FC2  A0D8               	btfss	status,0,c
 10114  001FC4  D017               	goto	i2l3526
 10115  001FC6                     i2u345_40:
 10116  001FC6  0E00               	movlw	0
 10117  001FC8  6E62               	movwf	_s2+1,c
 10118  001FCA  0E01               	movlw	1
 10119  001FCC  D012               	goto	L16
 10120  001FCE                     i2l3518:
 10121                           
 10122                           ;motors.c: 142: else if(mode == 2){
 10123  001FCE  0E02               	movlw	2
 10124  001FD0  1801               	xorwf	updateS2@mode,w,c
 10125  001FD2  1002               	iorwf	updateS2@mode+1,w,c
 10126  001FD4  A4D8               	btfss	status,2,c
 10127  001FD6  D00E               	goto	i2l3526
 10128                           
 10129                           ;motors.c: 143: s2 --;
 10130  001FD8  0661               	decf	_s2,f,c
 10131  001FDA  A0D8               	btfss	status,0,c
 10132  001FDC  0662               	decf	_s2+1,f,c
 10133                           
 10134                           ;motors.c: 144: if (s2<1) {s2=4;}
 10135  001FDE  BE62               	btfsc	_s2+1,7,c
 10136  001FE0  D005               	goto	i2l3524
 10137  001FE2  5062               	movf	_s2+1,w,c
 10138  001FE4  E107               	bnz	i2l3526
 10139  001FE6  0461               	decf	_s2,w,c
 10140  001FE8  B0D8               	btfsc	status,0,c
 10141  001FEA  D004               	goto	i2l3526
 10142  001FEC                     i2l3524:
 10143  001FEC  0E00               	movlw	0
 10144  001FEE  6E62               	movwf	_s2+1,c
 10145  001FF0  0E04               	movlw	4
 10146  001FF2                     L16:
 10147  001FF2  6E61               	movwf	_s2,c
 10148  001FF4                     i2l3526:
 10149                           
 10150                           ;motors.c: 145: }
 10151                           ;motors.c: 146: if (s2 == 1){LATCbits.LATC7 = 1;}
 10152  001FF4  0461               	decf	_s2,w,c
 10153  001FF6  1062               	iorwf	_s2+1,w,c
 10154  001FF8  A4D8               	btfss	status,2,c
 10155  001FFA  D002               	goto	i2l519
 10156  001FFC  8E8B               	bsf	3979,7,c	;volatile
 10157  001FFE  D001               	goto	i2l3530
 10158  002000                     i2l519:
 10159                           
 10160                           ;motors.c: 147: else{LATCbits.LATC7 = 0;}
 10161  002000  9E8B               	bcf	3979,7,c	;volatile
 10162  002002                     i2l3530:
 10163                           
 10164                           ;motors.c: 148: if (s2 == 2){LATCbits.LATC6 = 1;}
 10165  002002  0E02               	movlw	2
 10166  002004  1861               	xorwf	_s2,w,c
 10167  002006  1062               	iorwf	_s2+1,w,c
 10168  002008  A4D8               	btfss	status,2,c
 10169  00200A  D002               	goto	i2l521
 10170  00200C  8C8B               	bsf	3979,6,c	;volatile
 10171  00200E  D001               	goto	i2l3534
 10172  002010                     i2l521:
 10173                           
 10174                           ;motors.c: 149: else{LATCbits.LATC6 = 0;}
 10175  002010  9C8B               	bcf	3979,6,c	;volatile
 10176  002012                     i2l3534:
 10177                           
 10178                           ;motors.c: 150: if (s2 == 3){LATCbits.LATC0 = 1;}
 10179  002012  0E03               	movlw	3
 10180  002014  1861               	xorwf	_s2,w,c
 10181  002016  1062               	iorwf	_s2+1,w,c
 10182  002018  A4D8               	btfss	status,2,c
 10183  00201A  D002               	goto	i2l523
 10184  00201C  808B               	bsf	3979,0,c	;volatile
 10185  00201E  D001               	goto	i2l3538
 10186  002020                     i2l523:
 10187                           
 10188                           ;motors.c: 151: else{LATCbits.LATC0 = 0;}
 10189  002020  908B               	bcf	3979,0,c	;volatile
 10190  002022                     i2l3538:
 10191                           
 10192                           ;motors.c: 152: if (s2 == 4){LATCbits.LATC5 = 1;}
 10193  002022  0E04               	movlw	4
 10194  002024  1861               	xorwf	_s2,w,c
 10195  002026  1062               	iorwf	_s2+1,w,c
 10196  002028  A4D8               	btfss	status,2,c
 10197  00202A  D002               	goto	i2l525
 10198  00202C  8A8B               	bsf	3979,5,c	;volatile
 10199  00202E  0012               	return	
 10200  002030                     i2l525:
 10201                           
 10202                           ;motors.c: 153: else{LATCbits.LATC5 = 0;}
 10203  002030  9A8B               	bcf	3979,5,c	;volatile
 10204  002032  0012               	return	
 10205  002034                     __end_of_updateS2:
 10206                           	opt stack 0
 10207                           pclatu	equ	0xFFB
 10208                           pclath	equ	0xFFA
 10209                           tblptru	equ	0xFF8
 10210                           tblptrh	equ	0xFF7
 10211                           tblptrl	equ	0xFF6
 10212                           tablat	equ	0xFF5
 10213                           prodh	equ	0xFF4
 10214                           prodl	equ	0xFF3
 10215                           intcon	equ	0xFF2
 10216                           intcon2	equ	0xFF1
 10217                           postinc0	equ	0xFEE
 10218                           fsr0h	equ	0xFEA
 10219                           fsr0l	equ	0xFE9
 10220                           wreg	equ	0xFE8
 10221                           fsr1h	equ	0xFE2
 10222                           fsr1l	equ	0xFE1
 10223                           indf2	equ	0xFDF
 10224                           postinc2	equ	0xFDE
 10225                           postdec2	equ	0xFDD
 10226                           fsr2h	equ	0xFDA
 10227                           fsr2l	equ	0xFD9
 10228                           status	equ	0xFD8
 10229                           pclatu	equ	0xFFB
 10230                           pclath	equ	0xFFA
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           intcon2	equ	0xFF1
 10239                           postinc0	equ	0xFEE
 10240                           fsr0h	equ	0xFEA
 10241                           fsr0l	equ	0xFE9
 10242                           wreg	equ	0xFE8
 10243                           fsr1h	equ	0xFE2
 10244                           fsr1l	equ	0xFE1
 10245                           indf2	equ	0xFDF
 10246                           postinc2	equ	0xFDE
 10247                           postdec2	equ	0xFDD
 10248                           fsr2h	equ	0xFDA
 10249                           fsr2l	equ	0xFD9
 10250                           status	equ	0xFD8
 10251                           
 10252                           	psect	rparam
 10253  0000                     pclatu	equ	0xFFB
 10254                           pclath	equ	0xFFA
 10255                           tblptru	equ	0xFF8
 10256                           tblptrh	equ	0xFF7
 10257                           tblptrl	equ	0xFF6
 10258                           tablat	equ	0xFF5
 10259                           prodh	equ	0xFF4
 10260                           prodl	equ	0xFF3
 10261                           intcon	equ	0xFF2
 10262                           intcon2	equ	0xFF1
 10263                           postinc0	equ	0xFEE
 10264                           fsr0h	equ	0xFEA
 10265                           fsr0l	equ	0xFE9
 10266                           wreg	equ	0xFE8
 10267                           fsr1h	equ	0xFE2
 10268                           fsr1l	equ	0xFE1
 10269                           indf2	equ	0xFDF
 10270                           postinc2	equ	0xFDE
 10271                           postdec2	equ	0xFDD
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276                           	psect	temp
 10277  00006B                     btemp:
 10278                           	opt stack 0
 10279  00006B                     	ds	1
 10280  0000                     int$flags	set	btemp
 10281                           pclatu	equ	0xFFB
 10282                           pclath	equ	0xFFA
 10283                           tblptru	equ	0xFF8
 10284                           tblptrh	equ	0xFF7
 10285                           tblptrl	equ	0xFF6
 10286                           tablat	equ	0xFF5
 10287                           prodh	equ	0xFF4
 10288                           prodl	equ	0xFF3
 10289                           intcon	equ	0xFF2
 10290                           intcon2	equ	0xFF1
 10291                           postinc0	equ	0xFEE
 10292                           fsr0h	equ	0xFEA
 10293                           fsr0l	equ	0xFE9
 10294                           wreg	equ	0xFE8
 10295                           fsr1h	equ	0xFE2
 10296                           fsr1l	equ	0xFE1
 10297                           indf2	equ	0xFDF
 10298                           postinc2	equ	0xFDE
 10299                           postdec2	equ	0xFDD
 10300                           fsr2h	equ	0xFDA
 10301                           fsr2l	equ	0xFD9
 10302                           status	equ	0xFD8


Data Sizes:
    Strings     457
    Constant    96
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82     106
    BANK0           128     42      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_55(CODE[17]), STR_54(CODE[17]), STR_53(CODE[16]), STR_52(CODE[17]), 
		 -> STR_51(CODE[17]), STR_50(CODE[17]), STR_49(CODE[16]), STR_48(CODE[17]), 
		 -> STR_47(CODE[16]), STR_46(CODE[17]), STR_45(CODE[21]), STR_44(CODE[17]), 
		 -> STR_43(CODE[12]), STR_42(CODE[17]), STR_41(CODE[6]), STR_40(CODE[8]), 
		 -> STR_39(CODE[15]), STR_38(CODE[8]), STR_37(CODE[16]), STR_36(CODE[10]), 
		 -> STR_35(CODE[17]), STR_34(CODE[16]), STR_33(CODE[3]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[6]), STR_28(CODE[4]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[6]), STR_24(CODE[9]), 
		 -> STR_23(CODE[9]), STR_22(CODE[12]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[11]), STR_16(CODE[3]), 
		 -> STR_15(CODE[13]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), 
		 -> STR_11(CODE[16]), STR_10(CODE[16]), STR_9(CODE[3]), STR_8(CODE[16]), 
		 -> STR_7(CODE[16]), STR_6(CODE[12]), STR_5(CODE[12]), STR_4(CODE[4]), 
		 -> STR_3(CODE[9]), STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLog
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___llmod
    _putch->_lcdNibble
    ___llmod->___lldiv
    _lcdInst->_lcdNibble
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->_updateS2
    _handler->i2_updateS1
    _handler->i2_updateS3

Critical Paths under _main in BANK0

    None.

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                49    49      0   27087
                                             75 COMRAM     7     7      0
                                              0 BANK0     42    42      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                             ___wmul
                             _addRun
                         _displayLog
                         _eepromRead
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                             20 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             18 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             18 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     404
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     514
                                             17 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     767
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             20 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     632
                                             30 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    6581
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    7434
                                             66 COMRAM     9     7      2
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              36    26     10    6446
                                             39 COMRAM    27    17     10
                            ___lldiv
                            ___llmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                             19 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     799
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     287
                                             30 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             17 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                             19 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2112
                                             21 COMRAM    27     5     22
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     834
                                             17 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _eepromRead                                           3     3      0      44
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 4     2      2     194
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             14    14      0     556
                                              3 COMRAM    14    14      0
                           _updateS2
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     136
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     246
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   ___wmul
   _addRun
     _eepromRead
     _eepromWrite
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _eepromRead
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   _updateS2
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      38       5       43.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     52      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      34        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr 09 02:30:19 2017

                        _s 005D                          _t 005B                         _s1 0063  
                       _s2 0061                         _s3 005F                         _t2 0059  
                       _t3 0057        ___wmul@multiplicand 0014                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                        l201 0730                        l203 0740  
                      l212 07A6                        l205 0750                        l214 07B6  
                      l207 0760                        l216 07C6                        l218 07D6  
                      l172 029A                        l181 03B4                        l190 069A  
                      l175 02F8                        l600 2722                        l192 06AA  
                      l353 2738                        l610 271A                        l450 1924  
                      l194 06BA                        l178 0356                        l603 2730  
                      l452 1942                        l444 190E                        l540 1CDA  
                      l196 06CA                        l622 2626                        l454 193E  
                      l446 190A                        l550 1D0A                        l542 1CD6  
                      l616 2650                        l456 195C                        l448 1928  
                      l560 1D78                        l544 1CF4                        l536 1CC0  
                      l609 271E                        l473 19EC                        l458 1958  
                      l562 1D88                        l546 1CF0                        l538 1CBC  
                      l715 12A0                        l475 19FC                        l564 1D98  
                      l548 1D0E                        l477 1A0C                        l558 1D68  
                      l479 1A1C               __CFG_CPB$OFF 000000                        _PR2 000FCB  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1110 22B4                       l1120 23FA  
                     l3120 2266                       l3104 2704                       l3200 11F0  
                     l3122 2272                       l3202 11F4                       l3210 1238  
                     l3132 22A6                       l3124 2276                       l3140 23B8  
                     l3204 11F8                       l4100 022E                       l3142 23C4  
                     l3302 1414                       l4102 0244                       l3144 23C8  
                     l3304 1420                       l3312 1502                       l3232 12C0  
                     l3208 11FE                       l4120 02AA                       l4104 0256  
                     l3306 1498                       l3314 1518                       l3250 1322  
                     l3218 1264                       l3410 1944                       l3402 1910  
                     l4122 02B4                       l4042 008C                       l3148 23EC  
                     l3316 151E                       l3252 1326                       l3236 12E6  
                     l3180 1150                       l3420 1982                       l4300 0742  
                     l4140 0312                       l4108 026C                       l4052 00AC  
                     l3238 12EA                       l3182 115E                       l3318 152E  
                     l3430 19B2                       l3406 192A                       l3414 1960  
                     l4126 02CA                       l4046 00A0                       l3280 13BA  
                     l3192 1192                       l3176 1140                       l3440 19E0  
                     l3600 1D7A                       l4304 0752                       l4144 0328  
                     l3274 138E                       l3266 135E                       l3186 1164  
                     l3434 19C6                       l3426 199E                       l4162 0386  
                     l4138 0308                       l3292 13E6                       l3268 1374  
                     l3460 1A32                       l3452 1A0E                       l3444 19EE  
                     l3436 19CE                       l3604 1D8A                       l4420 0990  
                     l4332 07C8                       l4324 07A8                       l4340 07F8  
                     l4308 0762                       l4180 041A                       l4156 0366  
                     l3294 13EE                       l3286 13D0                       l3278 13B2  
                     l3358 269E                       l4510 0BD0                       l4318 0794  
                     l4174 03C4                       l4158 0370                       l3472 1A66  
                     l3464 1A42                       l3448 19FE                       l3456 1A1E  
                     l3560 1CAA                       l3552 1C84                       l3640 237A  
                     l4600 0E28                       l4512 0BE6                       l4504 0B9A  
                     l4416 0980                       l4336 07D8                       l4328 07B8  
                     l4272 06BC                       l4264 069C                       l4280 06EC  
                     l4176 03DE                       l4184 043A                       l3298 1402  
                     l4602 0E30                       l4514 0BEE                       l4530 0C4C  
                     l4442 0A0C                       l4290 071E                       l4258 0688  
                     l4098 0226                       l3468 1A54                       l3396 18EA  
                     l3388 18C4                       l3572 1CF6                       l3564 1CC2  
                     l3548 1C70                       l3636 2372                       l4604 0E46  
                     l4508 0BBC                       l4276 06CC                       l4268 06AC  
                     l3670 26E8                       l3590 1D54                       l3646 2396  
                     l4606 0E52                       l4622 0EB8                       l4534 0C62  
                     l4550 0CB4                       l4462 0A88                       l4382 08C0  
                     l4446 0A22                       l3680 1560                       l3592 1D5C  
                     l3584 1D36                       l3568 1CDC                       l3576 1D12  
                     l4632 0F18                       l4528 0C42                       l4368 087C  
                     l4296 0732                       l4626 0EDA                       l4618 0E9A  
                     l4538 0C76                       l4482 0B1E                       l4386 08D0  
                     l3668 26DA                       l3596 1D6A                       l4652 0F94  
                     l4644 0F60                       l4628 0EF6                       l4580 0D8E  
                     l4572 0D4A                       l4564 0D0C                       l4484 0B26  
                     l4476 0AE6                       l4468 0AC6                       l4548 0CAC  
                     l3686 157C                       l4590 0DCA                       l4582 0DA4  
                     l4574 0D60                       l4486 0B3C                       l4478 0AFC  
                     l3784 2062                       l3688 1580                       l4656 0FA8  
                     l4648 0F7E                       l4592 0DDE                       l4576 0D68  
                     l4488 0B44                       l3786 206A                       l4594 0DF4  
                     l4578 0D7E                       l4666 0FDE                       l4596 0E06  
                     l4668 0FE6                       _ADFM 007E07                       STR_1 FEDF  
                     STR_2 FF0F                       STR_3 FFD3                       STR_4 FFF6  
                     STR_5 FFA9                       STR_6 FF91                       STR_7 FEEF  
                     STR_8 FF1F                       STR_9 FFFB                       _LATA 000F89  
                     _LATB 000F8A                       u3015 2602                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u3050 18E2  
                     u3160 1996                       u3550 1CA2                       u5207 05DC  
                     u5217 0618                       u3650 1D2E                       u5307 09A0  
                     u5227 0672                       _PEIE 007F96                       u5317 09BA  
                     u5237 0708                       u2695 249C                       u5407 18F0  
                     u5327 0A2E                       u5247 077E                       u5167 0082  
                     u5417 1966                       u5337 0A7A                       u5257 080E  
                     u5177 01FE                       u3770 1574                       u5507 17A6  
                     u5427 26E0                       u5347 0CFE                       u5267 0842  
                     u5187 045A                       _RCEN 007E2B                       u5517 17FE  
                     u5437 25B8                       u5357 102A                       u5277 088E  
                     u5197 05A0                       u2990 269C                       u2975 263A  
                     u5527 1856                       u5447 25EC                       u5367 10A6  
                     u5287 08E2                       u5537 24E0                       u5457 15A0  
                     u5377 10E8                       u5297 0972                       u5547 24EA  
                     u5467 15E0                       u5387 1C56                       u5557 250C  
                     u5477 1636                       u5397 18AA                       u5567 2516  
                     u5487 16C2                       u5497 174E                       _PWM1 2568  
                     _PWM2 251E                       _RSEN 007E29                displayLog@i 0048  
          __end_of_PWM1off 2780            __end_of_PWM2off 2776                       _main 0012  
                     _curr 0053                       _keys FE1D                       _time 00AA  
                     _prev 0055                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 006B  
              main@standby 00A0                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                 i2_updateS1 1A7A                 i2_updateS3 1D9C  
                    ?_PWM1 0012                      ?_PWM2 0012           ?_I2C_Master_Init 001F  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    _ADRES 000FC3                      _EEADR 000FA9                      STR_10 FF2F  
                    STR_11 FF3F                      STR_20 FFF2                      STR_12 FFFB  
                    STR_21 FFF2                      STR_13 FF78                      STR_30 FFFB  
                    STR_22 FF9D                      STR_14 FF6B                      STR_31 FFFA  
                    STR_23 FFCA                      STR_15 FF5E                      STR_24 FFCA  
                    STR_16 FEBC                      STR_32 FFFA                      STR_40 FFDC  
                    STR_41 FFD6                      STR_33 FFFB                      STR_25 FFEC  
                    STR_17 FFB5                      STR_50 FE7D                      STR_26 FFFA  
                    STR_18 FFF2                      STR_34 FEFF                      STR_42 FE7D  
                    STR_19 FFF2                      STR_27 FFFA                      STR_43 FF85  
                    STR_35 FE8E                      STR_51 FE5B                      STR_52 FE7D  
                    STR_44 FE7D                      STR_28 FFFA                      STR_36 FFC0  
                    STR_29 FFEC                      STR_53 FEBF                      STR_37 FE9F  
                    STR_45 FE35                      STR_54 FE7D                      STR_46 FE7D  
                    STR_38 FFE4                      STR_39 FF4F                      STR_47 FECF  
                    STR_55 FE6C                      STR_48 FE7D                      STR_56 FE4A  
                    STR_49 FEAF            __end_of___lldiv 22C6                      _T0CON 000FD5  
                    _T1CON 000FCD            __end_of___llmod 240C                      _T2CON 000FCA  
                    _T3CON 000FB1                      i2l155 2208                      i2l501 1F72  
                    i2l511 1FA2                      i2l503 1F6E                      i2l521 2010  
                    i2l505 1F8C                      i2l450 1AFA                      i2l523 2020  
                    i2l507 1F88                      i2l452 1B18                      i2l444 1AE4  
                    i2l540 1E26                      i2l525 2030                      i2l509 1FA6  
                    i2l454 1B14                      i2l446 1AE0                      i2l550 1E56  
                    i2l542 1E22                      i2l519 2000                      i2l456 1B32  
                    i2l448 1AFE                      i2l560 1EC4                      i2l544 1E40  
                    i2l536 1E0C                      i2l473 1BC2                      i2l458 1B2E  
                    i2l562 1ED4                      i2l546 1E3C                      i2l538 1E08  
                    i2l475 1BD2                      i2l564 1EE4                      i2l548 1E5A  
                    i2l477 1BE2                      i2l558 1EB4                      i2l479 1BF2  
                    i2l497 1F58                      i2l499 1F54               updateS1@mode 0012  
             updateS2@mode 0001               updateS3@mode 0012                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _TMR3H 000FB3                      _TMR3L 000FB2                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96               main@tabState 00A2  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 2762  
          __end_of_handler 2244             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 26EE            __end_of_initLCD 25F8  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers FDFD               main@sodaLoad 0082  
          __end_of_isdigit 270C               main@sodaSort 009C                      _putch 274A  
                    main@i 00A8                      main@s 0084                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8               main@soupLoad 0080  
             main@soupSort 009A             __CFG_PBADEN$ON 000000               __end_of_PWM1 25B2  
             __end_of_PWM2 2568            __initialization 2658               __end_of_main 1136  
             __end_of_keys FE2E                     ??_PWM1 0014                     ??_PWM2 0014  
                   ??_main 004C              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0013         ??_I2C_Master_Start 0013                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0015                     _ADCON2 000FC0  
                ??_PWM1off 0012                  ??_PWM2off 0012           ___llmod@dividend 001F  
                   _ADRESH 000FC4                     _EEADRH 000FAA                     _EEDATA 000FA8  
                   _CCPR1L 000FBE                     _CCPR2L 000FBB                     _EECON2 000FA7  
                   ?_putch 0001                     _CVRCON 000FB5                     i2l3502 1F74  
                   i2l3510 1FAA                     i2l3530 2002                     i2l3506 1F8E  
                   i2l3524 1FEC                     i2l3534 2012                     i2l3526 1FF4  
                   i2l3518 1FCE                     i2l3538 2022                     i2l3482 1F08  
                   i2l3900 1C3C                     i2l3494 1F42                     i2l3486 1F1C  
                   i2l3830 1AE6                     i2l3910 1DBC                     i2l3824 1AC0  
                   i2l3816 1A9A                     i2l3498 1F5A                     i2l3834 1B00  
                   i2l3842 1B36                     i2l3930 1E28                     i2l3922 1DF6  
                   i2l3914 1DD0                     i2l3862 1B9C                     i2l3854 1B74  
                   i2l3838 1B1A                     i2l3934 1E42                     i2l3926 1E0E  
                   i2l3880 1BE4                     i2l3872 1BC4                     i2l3864 1BA4  
                   i2l3848 1B58                     i2l3952 1EA0                     i2l3858 1B88  
                   i2l3962 1EC6                     i2l3954 1EA8                     i2l3946 1E82  
                   i2l3938 1E5E                     i2l3892 1C18                     i2l3876 1BD4  
                   i2l3884 1BF4                     i2l3868 1BB6                     i2l3966 1ED6  
                   i2l3958 1EB6                     i2l3896 1C2A                     i2l3888 1C08  
                   i2l3986 21C2                     _OSCCON 000FD3                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _TMR1IE 007CE8                     _TMR1IF 007CF0  
                   _TMR0ON 007EAF                     _TMR1ON 007E68                     _TMR3ON 007D88  
                   _S1mode 0069                     _S2mode 0067                     _SSPADD 000FC8  
                   _S3mode 0065                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038  
                   _addRun 2034                     ___wmul 26A4             __CFG_STVREN$ON 000000  
              ?i2_updateS1 0001                ?i2_updateS3 0001                  ??___lldiv 001A  
                ??___llmod 0027              displayLog@run 0043           __end_of_keycheck 2738  
                   clear_0 265E                     clear_1 266A            eepromWrite@data 0012  
         __end_of_currtime FE35                  ??_lcdInst 0014                     _printf 1136  
                ??_handler 0004                     main@ee 008A                  ??_readADC 0012  
                ??_initLCD 0015                  ??_isdigit 0012               __mediumconst FDD4  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            ?_keyinterrupt 0001           __end_of_updateS1 1A7A           __end_of_updateS2 2034  
         __end_of_updateS3 1D9C              main@startTime 0086                 __accesstop 0080  
  __end_of__initialization 2670               addRun@sodaNT 0026               addRun@soupNL 002A  
            ___rparam_used 000001             __pcstackCOMRAM 0001              __end_of_putch 2756  
       __size_of_lcdNibble 0056          eepromRead@address 0014             ??_keyinterrupt 0012  
           i2updateS1@mode 0001             i2updateS3@mode 0001                    ??_putch 0014  
               addRun@date 001C        __size_ofi2_updateS1 01D6        __size_ofi2_updateS3 014C  
               __pbssBANK0 00AA                 addRun@mins 0020                 addRun@secs 0022  
               addRun@year 0018             main@labelState 00A4                    ?_addRun 0016  
                  ?___wmul 0012                    _CCP1CON 000FBD                    _CCP2CON 000FBA  
                  ?_printf 0028                 _eepromRead 2630          displayLog@currRun 004A  
               _displayLog 1548                    _PWM1off 2776                    _PWM2off 276C  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                ?_keycheck 0001          __end_of_lcdNibble 251E                    __Hparam 0000  
                  __Lparam 0000            __size_of_addRun 0132                  ?_updateS1 0012  
                ?_updateS2 0001                  ?_updateS3 0012                    ___lldiv 2244  
          __size_of___wmul 0026                    ___llmod 23A6                  _CMCONbits 000FB4  
               _homescreen 240C                    __pcinit 2658                    __ramtop 1000  
               _initialize 22C6                    _lcdInst 2756                    _handler 0008  
                  __ptext0 0012                    __ptext1 233E                    __ptext2 2762  
                  __ptext3 2780                    __ptext4 2788                    __ptext5 267E  
                  __ptext6 2738                    __ptext7 1C50                    __ptext8 18A4  
                  __ptext9 26CA            __size_of_printf 0412                  _T0CONbits 000FD5  
                  _readADC 26CA                    _initLCD 25B2          __end_of_hexpowers FE1D  
                  _dpowers FDD5                    _isdigit 26EE                    _seconds 00B5  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008             main@prevSodaIR 00A6             __pintcode_body 2166  
     end_of_initialization 2670             main@prevSoupIR 009E                 ??_keycheck 0012  
            __Lmediumconst FDD4                    int_func 2166  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0016            ___lldiv@counter 001E  
     __end_of_keyinterrupt 2722                    printf@c 0042                    printf@f 0028  
         I2C_Master_Init@c 001F           I2C_Master_Read@a 0013                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE               ??i2_updateS1 0003  
             ??i2_updateS3 0003                 ??_updateS1 0014                 ??_updateS2 0003  
               ??_updateS3 0014                  _PORTBbits 000F81                ?_eepromRead 0001  
            addRun@currRun 002F                 _updateTime 233E                ?_displayLog 0043  
       __end_ofi2_updateS1 1C50         __end_ofi2_updateS3 1EE8                _CCP1CONbits 000FBD  
            ??_eepromWrite 0013                printf@width 003F                _CCP2CONbits 000FBA  
               main@sodaNT 0094                 main@soupNL 0090                ?_homescreen 0001  
           __end_of_addRun 2166             __end_of___wmul 26CA                ?_initialize 0001  
           __end_of_printf 1548        start_initialization 2658                updateTime@j 0015  
        ??_I2C_Master_Init 0023          ??_I2C_Master_Read 0013          ??_I2C_Master_Wait 0012  
        ??_I2C_Master_Stop 0013            ___llmod@divisor 0023           __CFG_OSC$INTIO67 000000  
          ___llmod@counter 0027        __size_of_eepromRead 0028                   ??_addRun 002C  
      __end_of_eepromWrite 2630                   ??___wmul 0016        __size_of_displayLog 035C  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0032                addRun@hours 001E  
              addRun@sodaT 0024                addRun@month 001A                addRun@soupL 0028  
              __pbssCOMRAM 0053              __pcstackBANK0 0080                ?_updateTime 0001  
             _isdigit$1443 0013                   ?_PWM1off 0001                   ?_PWM2off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0016        __size_of_initialize 0078  
                addRun@dur 0016           _I2C_Master_Start 2788           _I2C_Master_Write 2762  
        __size_of_keycheck 0016                  _main$1791 008C          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008              __pmediumconst FDD4                  _lcdNibble 24C8  
                 ?___lldiv 0012                   PWM1@duty 0012                   ?___llmod 001F  
                 PWM2@duty 0012          __size_of_updateS1 01D6          __size_of_updateS2 014C  
        __size_of_updateS3 014C                   ?_lcdInst 0001                   ?_handler 0001  
                 ?_readADC 0001                   ?_initLCD 0001                   ?_isdigit 0001  
             _keyinterrupt 270C                  _hexpowers FDFD             __size_of_putch 000C  
       eepromWrite@address 0015             ___wmul@product 0016                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite 25F8                   i2u412_40 1DEE  
                 i2u422_40 1E7A                   i2u335_40 1F3A                   i2u345_40 1FC6  
                 _PIR2bits 000FA1                   i2u382_40 1AB8                   i2u560_47 1B3C  
                 i2u393_40 1B6C                   i2u561_47 1EEE                   i2u557_47 1DA2  
                _sodaSteps 00B1                   i2u558_47 1A80                   i2u559_47 1AC6  
         __CFG_WDTPS$32768 000000        __size_of_updateTime 0068                 ?_lcdNibble 0001  
               _ADCON0bits 000FC2          ___wmul@multiplier 0012              lcdNibble@data 0013  
             ??_eepromRead 0012                 printf@flag 0041              lcdNibble@temp 0012  
                _soupSteps 00B3                 printf@prec 0037                  main@sodaT 0092  
                main@soupL 008E           main@prevSodaLoad 0098               ??_displayLog 0045  
      I2C_Master_Read@temp 0014           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
         main@prevSoupLoad 0096                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead 2658         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0043         __end_of_displayLog 18A4           __size_of___lldiv 0082  
         __size_of___llmod 0066             readADC@channel 0013               ??_initialize 0027  
         __size_of_lcdInst 000C           __size_of_handler 223C            _I2C_Master_Init 246E  
         __size_of_readADC 0024            _I2C_Master_Read 267E           __size_of_initLCD 0046  
          _I2C_Master_Wait 2738            _I2C_Master_Stop 2780           __size_of_isdigit 001E  
                 __ptext10 270C                   __ptext11 22C6                   __ptext20 23A6  
                 __ptext12 25B2                   __ptext21 2244                   __ptext13 246E  
                 __ptext30 2776                   __ptext22 2756                   __ptext14 240C  
                 __ptext31 2568                   __ptext23 24C8                   __ptext15 1548  
                 __ptext24 2722                   __ptext16 1136                   __ptext33 1D9C  
                 __ptext25 2034                   __ptext17 274A                   __ptext34 1A7A  
                 __ptext26 25F8                   __ptext18 26EE                   __ptext35 1EE8  
                 __ptext27 2630                   __ptext19 26A4                   __ptext28 276C  
                 __ptext29 251E              __size_of_PWM1 004A              __size_of_PWM2 004A  
       __end_of_homescreen 246E                   _keycheck 2722              __size_of_main 1124  
                 _currtime FE2E                   _keypress 00B7         __end_of_initialize 233E  
              ??_lcdNibble 0012                   int$flags 006B                   _updateS1 18A4  
                 _updateS2 1EE8                   _updateS3 1C50                  printf@idx 0036  
                printf@val 003B                  putch@data 0014   __end_of_I2C_Master_Start 2790  
              _OSCTUNEbits 000F9B   __end_of_I2C_Master_Write 276C                 _INTCONbits 000FF2  
             ??_updateTime 0015                   isdigit@c 0014                   intlevel2 0000  
         ___lldiv@dividend 0012                   printf@ap 0039         __end_of_updateTime 23A6  
  __end_of_I2C_Master_Init 24C8    __end_of_I2C_Master_Read 26A4    __end_of_I2C_Master_Wait 274A  
  __end_of_I2C_Master_Stop 2788                lcdInst@data 0014           ___lldiv@quotient 001A  
        I2C_Master_Write@d 0013               ?_eepromWrite 0012  
