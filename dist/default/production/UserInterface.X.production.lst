

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 01 15:39:53 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4620 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  001000                     __psmallconst:
    80                           	opt stack 0
    81  001000  00                 	db	0
    82  001001                     _keys:
    83                           	opt stack 0
    84  001001  31                 	db	49
    85  001002  32                 	db	50
    86  001003  33                 	db	51
    87  001004  41                 	db	65
    88  001005  34                 	db	52
    89  001006  35                 	db	53
    90  001007  36                 	db	54
    91  001008  42                 	db	66
    92  001009  37                 	db	55
    93  00100A  38                 	db	56
    94  00100B  39                 	db	57
    95  00100C  43                 	db	67
    96  00100D  2A                 	db	42
    97  00100E  30                 	db	48
    98  00100F  23                 	db	35
    99  001010  44                 	db	68
   100  001011  00                 	db	0
   101  001012                     __end_of_keys:
   102                           	opt stack 0
   103  001012                     _dpowers:
   104                           	opt stack 0
   105  001012  0001               	dw	1
   106  001014  000A               	dw	10
   107  001016  0064               	dw	100
   108  001018  03E8               	dw	1000
   109  00101A  2710               	dw	10000
   110  00101C                     __end_of_dpowers:
   111                           	opt stack 0
   112  00101C                     _hexpowers:
   113                           	opt stack 0
   114  00101C  0001               	dw	1
   115  00101E  0010               	dw	16
   116  001020  0100               	dw	256
   117  001022  1000               	dw	4096
   118  001024                     __end_of_hexpowers:
   119                           	opt stack 0
   120  001024                     _currtime:
   121                           	opt stack 0
   122  001024  30                 	db	48
   123  001025  26                 	db	38
   124  001026  13                 	db	19
   125  001027  04                 	db	4
   126  001028  01                 	db	1
   127  001029  03                 	db	3
   128  00102A  17                 	db	23
   129  00102B                     __end_of_currtime:
   130                           	opt stack 0
   131  0000                     _PIR2bits	set	4001
   132  0000                     _EECON2	set	4007
   133  0000                     _EEDATA	set	4008
   134  0000                     _EECON1bits	set	4006
   135  0000                     _EEADR	set	4009
   136  0000                     _EEADRH	set	4010
   137  0000                     _CCP1CONbits	set	4029
   138  0000                     _SSPBUF	set	4041
   139  0000                     _SSPADD	set	4040
   140  0000                     _SSPCON2	set	4037
   141  0000                     _SSPCON1	set	4038
   142  0000                     _SSPSTAT	set	4039
   143  0000                     _ADRESH	set	4036
   144  0000                     _CMCONbits	set	4020
   145  0000                     _CVRCON	set	4021
   146  0000                     _ADCON1	set	4033
   147  0000                     _LATEbits	set	3981
   148  0000                     _LATDbits	set	3980
   149  0000                     _LATE	set	3981
   150  0000                     _LATD	set	3980
   151  0000                     _LATC	set	3979
   152  0000                     _LATB	set	3978
   153  0000                     _LATA	set	3977
   154  0000                     _T2CON	set	4042
   155  0000                     _CCPR1L	set	4030
   156  0000                     _CCP1CON	set	4029
   157  0000                     _PR2	set	4043
   158  0000                     _TRISE	set	3990
   159  0000                     _TRISD	set	3989
   160  0000                     _TRISC	set	3988
   161  0000                     _TRISB	set	3987
   162  0000                     _TRISA	set	3986
   163  0000                     _OSCTUNEbits	set	3995
   164  0000                     _OSCCON	set	4051
   165  0000                     _PORTB	set	3969
   166  0000                     _PORTBbits	set	3969
   167  0000                     _ADCON0bits	set	4034
   168  0000                     _ADCON0	set	4034
   169  0000                     _ACKEN	set	32300
   170  0000                     _ACKDT	set	32301
   171  0000                     _RCEN	set	32299
   172  0000                     _PEN	set	32298
   173  0000                     _RSEN	set	32297
   174  0000                     _SEN	set	32296
   175  0000                     _TRISC4	set	31908
   176  0000                     _TRISC3	set	31907
   177  0000                     _ADFM	set	32263
   178  0000                     _nRBPU	set	32655
   179  00102B                     STR_4:
   180  00102B  46                 	db	70	;'F'
   181  00102C  69                 	db	105	;'i'
   182  00102D  6E                 	db	110	;'n'
   183  00102E  69                 	db	105	;'i'
   184  00102F  73                 	db	115	;'s'
   185  001030  68                 	db	104	;'h'
   186  001031  65                 	db	101	;'e'
   187  001032  64                 	db	100	;'d'
   188  001033  20                 	db	32
   189  001034  73                 	db	115	;'s'
   190  001035  6F                 	db	111	;'o'
   191  001036  72                 	db	114	;'r'
   192  001037  74                 	db	116	;'t'
   193  001038  69                 	db	105	;'i'
   194  001039  6E                 	db	110	;'n'
   195  00103A  67                 	db	103	;'g'
   196  00103B  21                 	db	33
   197  00103C  20                 	db	32
   198  00103D  00                 	db	0
   199  00103E                     STR_15:
   200  00103E  30                 	db	48	;'0'
   201  00103F  31                 	db	49	;'1'
   202  001040  32                 	db	50	;'2'
   203  001041  33                 	db	51	;'3'
   204  001042  34                 	db	52	;'4'
   205  001043  35                 	db	53	;'5'
   206  001044  36                 	db	54	;'6'
   207  001045  37                 	db	55	;'7'
   208  001046  38                 	db	56	;'8'
   209  001047  39                 	db	57	;'9'
   210  001048  61                 	db	97	;'a'
   211  001049  62                 	db	98	;'b'
   212  00104A  63                 	db	99	;'c'
   213  00104B  64                 	db	100	;'d'
   214  00104C  65                 	db	101	;'e'
   215  00104D  66                 	db	102	;'f'
   216  00104E  00                 	db	0
   217  00104F                     STR_5:
   218  00104F  25                 	db	37
   219  001050  30                 	db	48	;'0'
   220  001051  32                 	db	50	;'2'
   221  001052  78                 	db	120	;'x'
   222  001053  2F                 	db	47
   223  001054  25                 	db	37
   224  001055  30                 	db	48	;'0'
   225  001056  32                 	db	50	;'2'
   226  001057  78                 	db	120	;'x'
   227  001058  2F                 	db	47
   228  001059  25                 	db	37
   229  00105A  30                 	db	48	;'0'
   230  00105B  32                 	db	50	;'2'
   231  00105C  78                 	db	120	;'x'
   232  00105D  20                 	db	32
   233  00105E  00                 	db	0
   234  00105F                     STR_12:
   235  00105F  23                 	db	35
   236  001060  20                 	db	32
   237  001061  73                 	db	115	;'s'
   238  001062  6F                 	db	111	;'o'
   239  001063  64                 	db	100	;'d'
   240  001064  61                 	db	97	;'a'
   241  001065  20                 	db	32
   242  001066  63                 	db	99	;'c'
   243  001067  61                 	db	97	;'a'
   244  001068  6E                 	db	110	;'n'
   245  001069  73                 	db	115	;'s'
   246  00106A  3A                 	db	58	;':'
   247  00106B  20                 	db	32
   248  00106C  25                 	db	37
   249  00106D  64                 	db	100	;'d'
   250  00106E  00                 	db	0
   251  00106F                     STR_9:
   252  00106F  52                 	db	82	;'R'
   253  001070  75                 	db	117	;'u'
   254  001071  6E                 	db	110	;'n'
   255  001072  23                 	db	35
   256  001073  31                 	db	49	;'1'
   257  001074  20                 	db	32
   258  001075  20                 	db	32
   259  001076  20                 	db	32
   260  001077  20                 	db	32
   261  001078  41                 	db	65	;'A'
   262  001079  3A                 	db	58	;':'
   263  00107A  4E                 	db	78	;'N'
   264  00107B  65                 	db	101	;'e'
   265  00107C  78                 	db	120	;'x'
   266  00107D  74                 	db	116	;'t'
   267  00107E  00                 	db	0
   268  00107F                     STR_1:
   269  00107F  53                 	db	83	;'S'
   270  001080  6F                 	db	111	;'o'
   271  001081  72                 	db	114	;'r'
   272  001082  74                 	db	116	;'t'
   273  001083  69                 	db	105	;'i'
   274  001084  6E                 	db	110	;'n'
   275  001085  67                 	db	103	;'g'
   276  001086  20                 	db	32
   277  001087  63                 	db	99	;'c'
   278  001088  61                 	db	97	;'a'
   279  001089  6E                 	db	110	;'n'
   280  00108A  73                 	db	115	;'s'
   281  00108B  2E                 	db	46
   282  00108C  2E                 	db	46
   283  00108D  2E                 	db	46
   284  00108E  00                 	db	0
   285  00108F                     STR_2:
   286  00108F  41                 	db	65	;'A'
   287  001090  6E                 	db	110	;'n'
   288  001091  79                 	db	121	;'y'
   289  001092  20                 	db	32
   290  001093  6B                 	db	107	;'k'
   291  001094  65                 	db	101	;'e'
   292  001095  79                 	db	121	;'y'
   293  001096  20                 	db	32
   294  001097  74                 	db	116	;'t'
   295  001098  6F                 	db	111	;'o'
   296  001099  20                 	db	32
   297  00109A  73                 	db	115	;'s'
   298  00109B  74                 	db	116	;'t'
   299  00109C  6F                 	db	111	;'o'
   300  00109D  70                 	db	112	;'p'
   301  00109E  00                 	db	0
   302  00109F                     STR_14:
   303  00109F  23                 	db	35
   304  0010A0  20                 	db	32
   305  0010A1  73                 	db	115	;'s'
   306  0010A2  6F                 	db	111	;'o'
   307  0010A3  75                 	db	117	;'u'
   308  0010A4  70                 	db	112	;'p'
   309  0010A5  20                 	db	32
   310  0010A6  63                 	db	99	;'c'
   311  0010A7  61                 	db	97	;'a'
   312  0010A8  6E                 	db	110	;'n'
   313  0010A9  73                 	db	115	;'s'
   314  0010AA  3A                 	db	58	;':'
   315  0010AB  20                 	db	32
   316  0010AC  34                 	db	52	;'4'
   317  0010AD  00                 	db	0
   318  0010AE                     STR_7:
   319  0010AE  25                 	db	37
   320  0010AF  30                 	db	48	;'0'
   321  0010B0  32                 	db	50	;'2'
   322  0010B1  78                 	db	120	;'x'
   323  0010B2  3A                 	db	58	;':'
   324  0010B3  25                 	db	37
   325  0010B4  30                 	db	48	;'0'
   326  0010B5  32                 	db	50	;'2'
   327  0010B6  78                 	db	120	;'x'
   328  0010B7  3A                 	db	58	;':'
   329  0010B8  25                 	db	37
   330  0010B9  30                 	db	48	;'0'
   331  0010BA  32                 	db	50	;'2'
   332  0010BB  78                 	db	120	;'x'
   333  0010BC  00                 	db	0
   334  0010BD                     STR_10:
   335  0010BD  23                 	db	35
   336  0010BE  20                 	db	32
   337  0010BF  6F                 	db	111	;'o'
   338  0010C0  66                 	db	102	;'f'
   339  0010C1  20                 	db	32
   340  0010C2  63                 	db	99	;'c'
   341  0010C3  61                 	db	97	;'a'
   342  0010C4  6E                 	db	110	;'n'
   343  0010C5  73                 	db	115	;'s'
   344  0010C6  3A                 	db	58	;':'
   345  0010C7  20                 	db	32
   346  0010C8  25                 	db	37
   347  0010C9  64                 	db	100	;'d'
   348  0010CA  00                 	db	0
   349  0010CB                     STR_8:
   350  0010CB  20                 	db	32
   351  0010CC  32                 	db	50	;'2'
   352  0010CD  3A                 	db	58	;':'
   353  0010CE  4C                 	db	76	;'L'
   354  0010CF  6F                 	db	111	;'o'
   355  0010D0  67                 	db	103	;'g'
   356  0010D1  73                 	db	115	;'s'
   357  0010D2  00                 	db	0
   358  0010D3                     STR_6:
   359  0010D3  33                 	db	51	;'3'
   360  0010D4  3A                 	db	58	;':'
   361  0010D5  53                 	db	83	;'S'
   362  0010D6  74                 	db	116	;'t'
   363  0010D7  61                 	db	97	;'a'
   364  0010D8  72                 	db	114	;'r'
   365  0010D9  74                 	db	116	;'t'
   366  0010DA  00                 	db	0
   367  0010DB                     STR_3:
   368  0010DB  61                 	db	97	;'a'
   369  0010DC  73                 	db	115	;'s'
   370  0010DD  64                 	db	100	;'d'
   371  0010DE  66                 	db	102	;'f'
   372  0010DF  00                 	db	0
   373  0000                     
   374                           ; #config settings
   375  0010E0  00                 	db	0	; dummy byte at the end
   376  0000                     
   377                           	psect	cinit
   378  001CBC                     __pcinit:
   379                           	opt stack 0
   380  001CBC                     start_initialization:
   381                           	opt stack 0
   382  001CBC                     __initialization:
   383                           	opt stack 0
   384                           
   385                           ; Clear objects allocated to COMRAM (8 bytes)
   386  001CBC  EE00  F036         	lfsr	0,__pbssCOMRAM
   387  001CC0  0E08               	movlw	8
   388  001CC2                     clear_0:
   389  001CC2  6AEE               	clrf	postinc0,c
   390  001CC4  06E8               	decf	wreg,f,c
   391  001CC6  E1FD               	bnz	clear_0
   392  001CC8                     end_of_initialization:
   393                           	opt stack 0
   394  001CC8                     __end_of__initialization:
   395                           	opt stack 0
   396  001CC8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   397  001CCA  6EF8               	movwf	tblptru,c
   398  001CCC  0100               	movlb	0
   399  001CCE  EFF7  F009         	goto	_main	;jump to C main() function
   400                           tblptru	equ	0xFF8
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           
   404                           	psect	bssCOMRAM
   405  000036                     __pbssCOMRAM:
   406                           	opt stack 0
   407  000036                     _time:
   408                           	opt stack 0
   409  000036                     	ds	7
   410  00003D                     _keypress:
   411                           	opt stack 0
   412  00003D                     	ds	1
   413                           tblptru	equ	0xFF8
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           
   417                           	psect	cstackCOMRAM
   418  000001                     __pcstackCOMRAM:
   419                           	opt stack 0
   420  000001                     ??_eepromRead:
   421  000001                     ??_isdigit:
   422  000001                     ??_readADC:
   423  000001                     ??_I2C_Master_Wait:
   424  000001                     ?___wmul:
   425                           	opt stack 0
   426  000001                     ?___lwdiv:
   427                           	opt stack 0
   428  000001                     ?___lldiv:
   429                           	opt stack 0
   430  000001                     lcdNibble@temp:
   431                           	opt stack 0
   432  000001                     PWM1@duty:
   433                           	opt stack 0
   434  000001                     ___wmul@multiplier:
   435                           	opt stack 0
   436  000001                     ___lwdiv@dividend:
   437                           	opt stack 0
   438  000001                     ___lldiv@dividend:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x0
   442  000001                     	ds	1
   443  000002                     readADC@channel:
   444                           	opt stack 0
   445  000002                     lcdNibble@data:
   446                           	opt stack 0
   447  000002                     I2C_Master_Read@a:
   448                           	opt stack 0
   449  000002                     _isdigit$913:
   450                           	opt stack 0
   451  000002                     I2C_Master_Write@d:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x1
   455  000002                     	ds	1
   456  000003                     ??_PWM1:
   457  000003                     lcdInst@data:
   458                           	opt stack 0
   459  000003                     putch@data:
   460                           	opt stack 0
   461  000003                     I2C_Master_Read@temp:
   462                           	opt stack 0
   463  000003                     eepromRead@address:
   464                           	opt stack 0
   465  000003                     isdigit@c:
   466                           	opt stack 0
   467  000003                     ___wmul@multiplicand:
   468                           	opt stack 0
   469  000003                     ___lwdiv@divisor:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x2
   473  000003                     	ds	1
   474  000004                     ??_initLCD:
   475  000004                     updateTime@j:
   476                           	opt stack 0
   477  000004                     eepromWrite@data:
   478                           	opt stack 0
   479                           
   480                           ; 1 bytes @ 0x3
   481  000004                     	ds	1
   482  000005                     ??_eepromWrite:
   483  000005                     ___wmul@product:
   484                           	opt stack 0
   485  000005                     ___lwdiv@quotient:
   486                           	opt stack 0
   487  000005                     ___lldiv@divisor:
   488                           	opt stack 0
   489                           
   490                           ; 4 bytes @ 0x4
   491  000005                     	ds	2
   492  000007                     ?_backlogTest:
   493                           	opt stack 0
   494  000007                     ?_timePassed:
   495                           	opt stack 0
   496  000007                     eepromWrite@address:
   497                           	opt stack 0
   498  000007                     ___lwdiv@counter:
   499                           	opt stack 0
   500  000007                     backlogTest@blockedStart:
   501                           	opt stack 0
   502  000007                     timePassed@start:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x6
   506  000007                     	ds	1
   507  000008                     ?___lwmod:
   508                           	opt stack 0
   509  000008                     ___lwmod@dividend:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x7
   513  000008                     	ds	1
   514  000009                     ??_timePassed:
   515  000009                     backlogTest@motorStatus:
   516                           	opt stack 0
   517  000009                     ___lldiv@quotient:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0x8
   521  000009                     	ds	1
   522  00000A                     ___lwmod@divisor:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x9
   526  00000A                     	ds	1
   527  00000B                     ??_backlogTest:
   528                           
   529                           ; 1 bytes @ 0xA
   530  00000B                     	ds	1
   531  00000C                     ___lwmod@counter:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xB
   535  00000C                     	ds	1
   536  00000D                     ?_printf:
   537                           	opt stack 0
   538  00000D                     ___lldiv@counter:
   539                           	opt stack 0
   540  00000D                     updateEEPROM@time:
   541                           	opt stack 0
   542  00000D                     printf@f:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0xC
   546  00000D                     	ds	1
   547  00000E                     I2C_Master_Init@c:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0xD
   551  00000E                     	ds	1
   552  00000F                     
   553                           ; 1 bytes @ 0xE
   554  00000F                     	ds	3
   555  000012                     ??_I2C_Master_Init:
   556                           
   557                           ; 1 bytes @ 0x11
   558  000012                     	ds	3
   559  000015                     ??_printf:
   560                           
   561                           ; 1 bytes @ 0x14
   562  000015                     	ds	1
   563  000016                     
   564                           ; 1 bytes @ 0x15
   565  000016                     	ds	3
   566  000019                     printf@idx:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x18
   570  000019                     	ds	1
   571  00001A                     printf@ap:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x19
   575  00001A                     	ds	2
   576  00001C                     printf@prec:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x1B
   580  00001C                     	ds	1
   581  00001D                     printf@val:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x1C
   585  00001D                     	ds	2
   586  00001F                     printf@flag:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x1E
   590  00001F                     	ds	1
   591  000020                     printf@width:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x1F
   595  000020                     	ds	2
   596  000022                     printf@c:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x21
   600  000022                     	ds	1
   601  000023                     ??_displayLogs:
   602                           
   603                           ; 1 bytes @ 0x22
   604  000023                     	ds	1
   605  000024                     ??_main:
   606                           
   607                           ; 1 bytes @ 0x23
   608  000024                     	ds	2
   609  000026                     main@s:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x25
   613  000026                     	ds	2
   614  000028                     main@soupLoad:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x27
   618  000028                     	ds	2
   619  00002A                     main@sodaLoad:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x29
   623  00002A                     	ds	2
   624  00002C                     main@canCheck:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x2B
   628  00002C                     	ds	2
   629  00002E                     main@startTime:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x2D
   633  00002E                     	ds	2
   634  000030                     main@prevUnblock:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2F
   638  000030                     	ds	2
   639  000032                     main@standby:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x31
   643  000032                     	ds	2
   644  000034                     main@dc:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x33
   648  000034                     	ds	2
   649                           tblptru	equ	0xFF8
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           
   653 ;;
   654 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   655 ;;
   656 ;; *************** function _main *****************
   657 ;; Defined at:
   658 ;;		line 97 in file "main.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;  dc              2   51[COMRAM] int 
   663 ;;  standby         2   49[COMRAM] int 
   664 ;;  prevUnblock     2   47[COMRAM] int 
   665 ;;  startTime       2   45[COMRAM] int 
   666 ;;  canCheck        2   43[COMRAM] int 
   667 ;;  sodaLoad        2   41[COMRAM] int 
   668 ;;  soupLoad        2   39[COMRAM] int 
   669 ;;  s               2   37[COMRAM] int 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  2  117[None  ] int 
   672 ;; Registers used:
   673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;Total ram usage:       18 bytes
   684 ;; Hardware stack levels required when called:    4
   685 ;; This function calls:
   686 ;;		_PWM1
   687 ;;		_PWM1off
   688 ;;		___wmul
   689 ;;		_backlogTest
   690 ;;		_displayLogs
   691 ;;		_homescreen
   692 ;;		_initialize
   693 ;;		_keyinterrupt
   694 ;;		_lcdInst
   695 ;;		_printf
   696 ;;		_readADC
   697 ;;		_timePassed
   698 ;;		_updateEEPROM
   699 ;;		_updateTime
   700 ;; This function is called by:
   701 ;;		Startup code after reset
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text0
   706  0013EE                     __ptext0:
   707                           	opt stack 0
   708  0013EE                     _main:
   709                           	opt stack 27
   710                           
   711                           ;main.c: 98: initialize();
   712                           
   713                           ;incstack = 0
   714  0013EE  EC1F  F00C         	call	_initialize	;wreg free
   715                           
   716                           ;main.c: 99: int standby = 1;
   717  0013F2  0E00               	movlw	0
   718  0013F4  6E33               	movwf	main@standby+1,c
   719  0013F6  0E01               	movlw	1
   720  0013F8  6E32               	movwf	main@standby,c
   721                           
   722                           ;main.c: 100: int s = 0;
   723  0013FA  0E00               	movlw	0
   724  0013FC  6E27               	movwf	main@s+1,c
   725  0013FE  0E00               	movlw	0
   726  001400  6E26               	movwf	main@s,c
   727                           
   728                           ;main.c: 101: int dc = 0;
   729  001402  0E00               	movlw	0
   730  001404  6E35               	movwf	main@dc+1,c
   731  001406  0E00               	movlw	0
   732  001408  6E34               	movwf	main@dc,c
   733                           
   734                           ;main.c: 102: int startTime;
   735                           ;main.c: 103: int prevUnblock = 0;
   736  00140A  0E00               	movlw	0
   737  00140C  6E31               	movwf	main@prevUnblock+1,c
   738  00140E  0E00               	movlw	0
   739  001410  6E30               	movwf	main@prevUnblock,c
   740                           
   741                           ;main.c: 104: int soupLoad = 1;
   742  001412  0E00               	movlw	0
   743  001414  6E29               	movwf	main@soupLoad+1,c
   744  001416  0E01               	movlw	1
   745  001418  6E28               	movwf	main@soupLoad,c
   746                           
   747                           ;main.c: 105: int sodaLoad = 1;
   748  00141A  0E00               	movlw	0
   749  00141C  6E2B               	movwf	main@sodaLoad+1,c
   750  00141E  0E01               	movlw	1
   751  001420  6E2A               	movwf	main@sodaLoad,c
   752                           
   753                           ;main.c: 106: int canCheck;
   754                           ;main.c: 109: _delay((unsigned long)((10)*(32000000/4000.0)));
   755  001422  0E68               	movlw	104
   756  001424  6E24               	movwf	??_main& (0+255),c
   757  001426  0EE4               	movlw	228
   758  001428                     u1197:
   759  001428  2EE8               	decfsz	wreg,f,c
   760  00142A  D7FE               	bra	u1197
   761  00142C  2E24               	decfsz	??_main& (0+255),f,c
   762  00142E  D7FC               	bra	u1197
   763  001430  D000               	nop2	
   764  001432                     l1950:
   765                           
   766                           ;main.c: 113: updateTime();
   767  001432  EC5A  F00C         	call	_updateTime	;wreg free
   768                           
   769                           ;main.c: 115: if (standby){
   770  001436  5032               	movf	main@standby,w,c
   771  001438  1033               	iorwf	main@standby+1,w,c
   772  00143A  B4D8               	btfsc	status,2,c
   773  00143C  D05B               	goto	l1986
   774                           
   775                           ;main.c: 116: keypress = (0);
   776  00143E  0E00               	movlw	0
   777  001440  6E3D               	movwf	_keypress,c	;volatile
   778                           
   779                           ;main.c: 117: homescreen();
   780  001442  EC8D  F00C         	call	_homescreen	;wreg free
   781                           
   782                           ;main.c: 118: keyinterrupt();
   783  001446  EC69  F00E         	call	_keyinterrupt	;wreg free
   784                           
   785                           ;main.c: 127: if(keypress == 2){
   786  00144A  0E02               	movlw	2
   787  00144C  183D               	xorwf	_keypress,w,c	;volatile
   788  00144E  A4D8               	btfss	status,2,c
   789  001450  D045               	goto	l1982
   790                           
   791                           ;main.c: 128: standby = 0;
   792  001452  0E00               	movlw	0
   793  001454  6E33               	movwf	main@standby+1,c
   794  001456  0E00               	movlw	0
   795  001458  6E32               	movwf	main@standby,c
   796                           
   797                           ;main.c: 129: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
   798  00145A  0E01               	movlw	1
   799  00145C  EC8C  F00E         	call	_lcdInst
   800  001460  0E68               	movlw	104
   801  001462  6E24               	movwf	??_main& (0+255),c
   802  001464  0EE4               	movlw	228
   803  001466                     u1207:
   804  001466  2EE8               	decfsz	wreg,f,c
   805  001468  D7FE               	bra	u1207
   806  00146A  2E24               	decfsz	??_main& (0+255),f,c
   807  00146C  D7FC               	bra	u1207
   808  00146E  D000               	nop2	
   809                           
   810                           ;main.c: 130: printf("Sorting cans...");
   811  001470  0E7F               	movlw	low STR_1
   812  001472  6E0D               	movwf	printf@f,c
   813  001474  0E10               	movlw	high STR_1
   814  001476  6E0E               	movwf	printf@f+1,c
   815  001478  EC71  F008         	call	_printf	;wreg free
   816                           
   817                           ;main.c: 131: lcdInst(0b11000000);;
   818  00147C  0EC0               	movlw	192
   819  00147E  EC8C  F00E         	call	_lcdInst
   820                           
   821                           ;main.c: 132: printf("Any key to stop");
   822  001482  0E8F               	movlw	low STR_2
   823  001484  6E0D               	movwf	printf@f,c
   824  001486  0E10               	movlw	high STR_2
   825  001488  6E0E               	movwf	printf@f+1,c
   826  00148A  EC71  F008         	call	_printf	;wreg free
   827                           
   828                           ;main.c: 133: PWM1(100);
   829  00148E  0E00               	movlw	0
   830  001490  6E02               	movwf	PWM1@duty+1,c
   831  001492  0E64               	movlw	100
   832  001494  6E01               	movwf	PWM1@duty,c
   833  001496  EC64  F00D         	call	_PWM1	;wreg free
   834                           
   835                           ;main.c: 134: dc = 1;
   836  00149A  0E00               	movlw	0
   837  00149C  6E35               	movwf	main@dc+1,c
   838  00149E  0E01               	movlw	1
   839  0014A0  6E34               	movwf	main@dc,c
   840                           
   841                           ;main.c: 135: startTime = time[0] + 60*time[1] + 3600*time[2];
   842  0014A2  C038  F001         	movff	_time+2,___wmul@multiplier
   843  0014A6  6A02               	clrf	___wmul@multiplier+1,c
   844  0014A8  0E0E               	movlw	14
   845  0014AA  6E04               	movwf	___wmul@multiplicand+1,c
   846  0014AC  0E10               	movlw	16
   847  0014AE  6E03               	movwf	___wmul@multiplicand,c
   848  0014B0  EC2B  F00E         	call	___wmul	;wreg free
   849  0014B4  5037               	movf	_time+1,w,c
   850  0014B6  0D3C               	mullw	60
   851  0014B8  5036               	movf	_time,w,c
   852  0014BA  6E24               	movwf	??_main& (0+255),c
   853  0014BC  6A25               	clrf	(??_main+1)& (0+255),c
   854  0014BE  50F3               	movf	prodl,w,c
   855  0014C0  2624               	addwf	??_main,f,c
   856  0014C2  50F4               	movf	prodh,w,c
   857  0014C4  2225               	addwfc	??_main+1,f,c
   858  0014C6  5001               	movf	?___wmul,w,c
   859  0014C8  2424               	addwf	??_main,w,c
   860  0014CA  6E2E               	movwf	main@startTime,c
   861  0014CC  5002               	movf	?___wmul+1,w,c
   862  0014CE  2025               	addwfc	??_main+1,w,c
   863  0014D0  6E2F               	movwf	main@startTime+1,c
   864                           
   865                           ;main.c: 136: canCheck = startTime;
   866  0014D2  C02E  F02C         	movff	main@startTime,main@canCheck
   867  0014D6  C02F  F02D         	movff	main@startTime+1,main@canCheck+1
   868                           
   869                           ;main.c: 138: }
   870  0014DA  D7AB               	goto	l1950
   871  0014DC                     l1982:
   872                           
   873                           ;main.c: 139: else if(keypress == 1){
   874  0014DC  043D               	decf	_keypress,w,c	;volatile
   875  0014DE  A4D8               	btfss	status,2,c
   876  0014E0  D7A8               	goto	l1950
   877                           
   878                           ;main.c: 140: printf("asdf");
   879  0014E2  0EDB               	movlw	low STR_3
   880  0014E4  6E0D               	movwf	printf@f,c
   881  0014E6  0E10               	movlw	high STR_3
   882  0014E8  6E0E               	movwf	printf@f+1,c
   883  0014EA  EC71  F008         	call	_printf	;wreg free
   884                           
   885                           ;main.c: 141: displayLogs();
   886  0014EE  EC3F  F00B         	call	_displayLogs	;wreg free
   887                           
   888                           ;main.c: 142: }
   889                           ;main.c: 144: }
   890  0014F2  D79F               	goto	l1950
   891  0014F4                     l1986:
   892                           
   893                           ;main.c: 145: else{
   894                           ;main.c: 146: keypress = (0);
   895  0014F4  0E00               	movlw	0
   896  0014F6  6E3D               	movwf	_keypress,c	;volatile
   897                           
   898                           ;main.c: 147: keyinterrupt();
   899  0014F8  EC69  F00E         	call	_keyinterrupt	;wreg free
   900                           
   901                           ;main.c: 148: if (keypress != (0)) {
   902  0014FC  503D               	movf	_keypress,w,c	;volatile
   903  0014FE  B4D8               	btfsc	status,2,c
   904  001500  D004               	goto	l1994
   905                           
   906                           ;main.c: 149: standby = 1;
   907  001502  0E00               	movlw	0
   908  001504  6E33               	movwf	main@standby+1,c
   909  001506  0E01               	movlw	1
   910  001508  6E32               	movwf	main@standby,c
   911  00150A                     l1994:
   912                           
   913                           ;main.c: 150: }
   914                           ;main.c: 152: readADC(2);
   915  00150A  0E02               	movlw	2
   916  00150C  EC3E  F00E         	call	_readADC
   917                           
   918                           ;main.c: 153: if (dc ^ backlogTest(prevUnblock, dc)){
   919  001510  C030  F007         	movff	main@prevUnblock,backlogTest@blockedStart
   920  001514  C031  F008         	movff	main@prevUnblock+1,backlogTest@blockedStart+1
   921  001518  C034  F009         	movff	main@dc,backlogTest@motorStatus
   922  00151C  C035  F00A         	movff	main@dc+1,backlogTest@motorStatus+1
   923  001520  ECE3  F00B         	call	_backlogTest	;wreg free
   924  001524  5034               	movf	main@dc,w,c
   925  001526  1A07               	xorwf	?_backlogTest,f,c
   926  001528  5035               	movf	main@dc+1,w,c
   927  00152A  1A08               	xorwf	?_backlogTest+1,f,c
   928  00152C  5007               	movf	?_backlogTest,w,c
   929  00152E  1008               	iorwf	?_backlogTest+1,w,c
   930  001530  B4D8               	btfsc	status,2,c
   931  001532  D033               	goto	l2008
   932                           
   933                           ;main.c: 154: dc = backlogTest(prevUnblock, dc);
   934  001534  C030  F007         	movff	main@prevUnblock,backlogTest@blockedStart
   935  001538  C031  F008         	movff	main@prevUnblock+1,backlogTest@blockedStart+1
   936  00153C  C034  F009         	movff	main@dc,backlogTest@motorStatus
   937  001540  C035  F00A         	movff	main@dc+1,backlogTest@motorStatus+1
   938  001544  ECE3  F00B         	call	_backlogTest	;wreg free
   939  001548  C007  F034         	movff	?_backlogTest,main@dc
   940  00154C  C008  F035         	movff	?_backlogTest+1,main@dc+1
   941                           
   942                           ;main.c: 155: if (dc){PWM1(500);}
   943  001550  5034               	movf	main@dc,w,c
   944  001552  1035               	iorwf	main@dc+1,w,c
   945  001554  B4D8               	btfsc	status,2,c
   946  001556  D007               	goto	l2004
   947  001558  0E01               	movlw	1
   948  00155A  6E02               	movwf	PWM1@duty+1,c
   949  00155C  0EF4               	movlw	244
   950  00155E  6E01               	movwf	PWM1@duty,c
   951  001560  EC64  F00D         	call	_PWM1	;wreg free
   952  001564  D01A               	goto	l2008
   953  001566                     l2004:
   954                           
   955                           ;main.c: 156: else {
   956                           ;main.c: 157: PWM1off();
   957  001566  EC97  F00E         	call	_PWM1off	;wreg free
   958                           
   959                           ;main.c: 158: prevUnblock = time[0] + 60*time[1] + 3600*time[2];
   960  00156A  C038  F001         	movff	_time+2,___wmul@multiplier
   961  00156E  6A02               	clrf	___wmul@multiplier+1,c
   962  001570  0E0E               	movlw	14
   963  001572  6E04               	movwf	___wmul@multiplicand+1,c
   964  001574  0E10               	movlw	16
   965  001576  6E03               	movwf	___wmul@multiplicand,c
   966  001578  EC2B  F00E         	call	___wmul	;wreg free
   967  00157C  5037               	movf	_time+1,w,c
   968  00157E  0D3C               	mullw	60
   969  001580  5036               	movf	_time,w,c
   970  001582  6E24               	movwf	??_main& (0+255),c
   971  001584  6A25               	clrf	(??_main+1)& (0+255),c
   972  001586  50F3               	movf	prodl,w,c
   973  001588  2624               	addwf	??_main,f,c
   974  00158A  50F4               	movf	prodh,w,c
   975  00158C  2225               	addwfc	??_main+1,f,c
   976  00158E  5001               	movf	?___wmul,w,c
   977  001590  2424               	addwf	??_main,w,c
   978  001592  6E30               	movwf	main@prevUnblock,c
   979  001594  5002               	movf	?___wmul+1,w,c
   980  001596  2025               	addwfc	??_main+1,w,c
   981  001598  6E31               	movwf	main@prevUnblock+1,c
   982  00159A                     l2008:
   983                           
   984                           ;main.c: 159: }
   985                           ;main.c: 160: }
   986                           ;main.c: 162: if(timePassed(canCheck) > 10){
   987  00159A  C02C  F007         	movff	main@canCheck,timePassed@start
   988  00159E  C02D  F008         	movff	main@canCheck+1,timePassed@start+1
   989  0015A2  EC3F  F00D         	call	_timePassed	;wreg free
   990  0015A6  BE08               	btfsc	?_timePassed+1,7,c
   991  0015A8  D036               	goto	l2024
   992  0015AA  5008               	movf	?_timePassed+1,w,c
   993  0015AC  E104               	bnz	u1130
   994  0015AE  0E0B               	movlw	11
   995  0015B0  5C07               	subwf	?_timePassed,w,c
   996  0015B2  A0D8               	btfss	status,0,c
   997  0015B4  D030               	goto	l2024
   998  0015B6                     u1130:
   999                           
  1000                           ;main.c: 163: readADC(3);
  1001  0015B6  0E03               	movlw	3
  1002  0015B8  EC3E  F00E         	call	_readADC
  1003                           
  1004                           ;main.c: 164: soupLoad = ADRESH;
  1005  0015BC  CFC4 F028          	movff	4036,main@soupLoad	;volatile
  1006  0015C0  6A29               	clrf	main@soupLoad+1,c
  1007                           
  1008                           ;main.c: 165: readADC(4);
  1009  0015C2  0E04               	movlw	4
  1010  0015C4  EC3E  F00E         	call	_readADC
  1011                           
  1012                           ;main.c: 166: sodaLoad = ADRESH;
  1013  0015C8  CFC4 F02A          	movff	4036,main@sodaLoad	;volatile
  1014  0015CC  6A2B               	clrf	main@sodaLoad+1,c
  1015                           
  1016                           ;main.c: 167: if (!soupLoad & !sodaLoad){
  1017  0015CE  5028               	movf	main@soupLoad,w,c
  1018  0015D0  1029               	iorwf	main@soupLoad+1,w,c
  1019  0015D2  A4D8               	btfss	status,2,c
  1020  0015D4  D008               	goto	l2022
  1021  0015D6  502A               	movf	main@sodaLoad,w,c
  1022  0015D8  102B               	iorwf	main@sodaLoad+1,w,c
  1023  0015DA  A4D8               	btfss	status,2,c
  1024  0015DC  D004               	goto	l2022
  1025                           
  1026                           ;main.c: 168: standby = 1;
  1027  0015DE  0E00               	movlw	0
  1028  0015E0  6E33               	movwf	main@standby+1,c
  1029  0015E2  0E01               	movlw	1
  1030  0015E4  6E32               	movwf	main@standby,c
  1031  0015E6                     l2022:
  1032                           
  1033                           ;main.c: 169: }
  1034                           ;main.c: 170: canCheck = time[0] + 60*time[1] + 3600*time[2];
  1035  0015E6  C038  F001         	movff	_time+2,___wmul@multiplier
  1036  0015EA  6A02               	clrf	___wmul@multiplier+1,c
  1037  0015EC  0E0E               	movlw	14
  1038  0015EE  6E04               	movwf	___wmul@multiplicand+1,c
  1039  0015F0  0E10               	movlw	16
  1040  0015F2  6E03               	movwf	___wmul@multiplicand,c
  1041  0015F4  EC2B  F00E         	call	___wmul	;wreg free
  1042  0015F8  5037               	movf	_time+1,w,c
  1043  0015FA  0D3C               	mullw	60
  1044  0015FC  5036               	movf	_time,w,c
  1045  0015FE  6E24               	movwf	??_main& (0+255),c
  1046  001600  6A25               	clrf	(??_main+1)& (0+255),c
  1047  001602  50F3               	movf	prodl,w,c
  1048  001604  2624               	addwf	??_main,f,c
  1049  001606  50F4               	movf	prodh,w,c
  1050  001608  2225               	addwfc	??_main+1,f,c
  1051  00160A  5001               	movf	?___wmul,w,c
  1052  00160C  2424               	addwf	??_main,w,c
  1053  00160E  6E2C               	movwf	main@canCheck,c
  1054  001610  5002               	movf	?___wmul+1,w,c
  1055  001612  2025               	addwfc	??_main+1,w,c
  1056  001614  6E2D               	movwf	main@canCheck+1,c
  1057  001616                     l2024:
  1058                           
  1059                           ;main.c: 171: }
  1060                           ;main.c: 174: if(standby){
  1061  001616  5032               	movf	main@standby,w,c
  1062  001618  1033               	iorwf	main@standby+1,w,c
  1063  00161A  B4D8               	btfsc	status,2,c
  1064  00161C  D70A               	goto	l1950
  1065                           
  1066                           ;main.c: 175: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1067  00161E  0E01               	movlw	1
  1068  001620  EC8C  F00E         	call	_lcdInst
  1069  001624  0E68               	movlw	104
  1070  001626  6E24               	movwf	??_main& (0+255),c
  1071  001628  0EE4               	movlw	228
  1072  00162A                     u1217:
  1073  00162A  2EE8               	decfsz	wreg,f,c
  1074  00162C  D7FE               	bra	u1217
  1075  00162E  2E24               	decfsz	??_main& (0+255),f,c
  1076  001630  D7FC               	bra	u1217
  1077  001632  D000               	nop2	
  1078                           
  1079                           ;main.c: 176: printf("Finished sorting! ");
  1080  001634  0E2B               	movlw	low STR_4
  1081  001636  6E0D               	movwf	printf@f,c
  1082  001638  0E10               	movlw	high STR_4
  1083  00163A  6E0E               	movwf	printf@f+1,c
  1084  00163C  EC71  F008         	call	_printf	;wreg free
  1085                           
  1086                           ;main.c: 177: _delay((unsigned long)((500)*(32000000/4000.0)));
  1087  001640  0E15               	movlw	21
  1088  001642  6E25               	movwf	(??_main+1)& (0+255),c
  1089  001644  0E4B               	movlw	75
  1090  001646  6E24               	movwf	??_main& (0+255),c
  1091  001648  0EBE               	movlw	190
  1092  00164A                     u1227:
  1093  00164A  2EE8               	decfsz	wreg,f,c
  1094  00164C  D7FE               	bra	u1227
  1095  00164E  2E24               	decfsz	??_main& (0+255),f,c
  1096  001650  D7FC               	bra	u1227
  1097  001652  2E25               	decfsz	(??_main+1)& (0+255),f,c
  1098  001654  D7FA               	bra	u1227
  1099  001656  D000               	nop2	
  1100                           
  1101                           ;main.c: 178: PWM1off();
  1102  001658  EC97  F00E         	call	_PWM1off	;wreg free
  1103                           
  1104                           ;main.c: 179: dc = 0;
  1105  00165C  0E00               	movlw	0
  1106  00165E  6E35               	movwf	main@dc+1,c
  1107  001660  0E00               	movlw	0
  1108  001662  6E34               	movwf	main@dc,c
  1109                           
  1110                           ;main.c: 180: updateEEPROM(timePassed(startTime));
  1111  001664  C02E  F007         	movff	main@startTime,timePassed@start
  1112  001668  C02F  F008         	movff	main@startTime+1,timePassed@start+1
  1113  00166C  EC3F  F00D         	call	_timePassed	;wreg free
  1114  001670  C007  F00D         	movff	?_timePassed,updateEEPROM@time
  1115  001674  C008  F00E         	movff	?_timePassed+1,updateEEPROM@time+1
  1116  001678  ECE9  F00D         	call	_updateEEPROM	;wreg free
  1117  00167C  D6DA               	goto	l1950
  1118  00167E                     __end_of_main:
  1119                           	opt stack 0
  1120                           tblptru	equ	0xFF8
  1121                           prodh	equ	0xFF4
  1122                           prodl	equ	0xFF3
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function _updateTime *****************
  1128 ;; Defined at:
  1129 ;;		line 89 in file "I2C.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  j               1    3[COMRAM] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;Total ram usage:        1 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    2
  1150 ;; This function calls:
  1151 ;;		_I2C_Master_Read
  1152 ;;		_I2C_Master_Start
  1153 ;;		_I2C_Master_Stop
  1154 ;;		_I2C_Master_Write
  1155 ;; This function is called by:
  1156 ;;		_main
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text1
  1161  0018B4                     __ptext1:
  1162                           	opt stack 0
  1163  0018B4                     _updateTime:
  1164                           	opt stack 28
  1165                           
  1166                           ;I2C.c: 91: I2C_Master_Start();
  1167                           
  1168                           ;incstack = 0
  1169  0018B4  ECA0  F00E         	call	_I2C_Master_Start	;wreg free
  1170                           
  1171                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  1172  0018B8  0E00               	movlw	0
  1173  0018BA  6E03               	movwf	I2C_Master_Write@d+1,c
  1174  0018BC  0ED0               	movlw	208
  1175  0018BE  6E02               	movwf	I2C_Master_Write@d,c
  1176  0018C0  EC92  F00E         	call	_I2C_Master_Write	;wreg free
  1177                           
  1178                           ;I2C.c: 93: I2C_Master_Write(0x00);
  1179  0018C4  0E00               	movlw	0
  1180  0018C6  6E03               	movwf	I2C_Master_Write@d+1,c
  1181  0018C8  0E00               	movlw	0
  1182  0018CA  6E02               	movwf	I2C_Master_Write@d,c
  1183  0018CC  EC92  F00E         	call	_I2C_Master_Write	;wreg free
  1184                           
  1185                           ;I2C.c: 94: I2C_Master_Stop();
  1186  0018D0  EC9C  F00E         	call	_I2C_Master_Stop	;wreg free
  1187                           
  1188                           ;I2C.c: 97: I2C_Master_Start();
  1189  0018D4  ECA0  F00E         	call	_I2C_Master_Start	;wreg free
  1190                           
  1191                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  1192  0018D8  0E00               	movlw	0
  1193  0018DA  6E03               	movwf	I2C_Master_Write@d+1,c
  1194  0018DC  0ED1               	movlw	209
  1195  0018DE  6E02               	movwf	I2C_Master_Write@d,c
  1196  0018E0  EC92  F00E         	call	_I2C_Master_Write	;wreg free
  1197                           
  1198                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  1199  0018E4  0E00               	movlw	0
  1200  0018E6  6E04               	movwf	updateTime@j,c
  1201  0018E8                     l1844:
  1202  0018E8  0E05               	movlw	5
  1203  0018EA  6404               	cpfsgt	updateTime@j,c
  1204  0018EC  D001               	goto	l1848
  1205  0018EE  D00E               	goto	l1854
  1206  0018F0                     l1848:
  1207                           
  1208                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  1209  0018F0  5004               	movf	updateTime@j,w,c
  1210  0018F2  0D01               	mullw	1
  1211  0018F4  0E36               	movlw	low _time
  1212  0018F6  24F3               	addwf	prodl,w,c
  1213  0018F8  6ED9               	movwf	fsr2l,c
  1214  0018FA  0E00               	movlw	high _time
  1215  0018FC  20F4               	addwfc	prodh,w,c
  1216  0018FE  6EDA               	movwf	fsr2h,c
  1217  001900  0E01               	movlw	1
  1218  001902  EC18  F00E         	call	_I2C_Master_Read
  1219  001906  6EDF               	movwf	indf2,c
  1220  001908  2A04               	incf	updateTime@j,f,c
  1221  00190A  D7EE               	goto	l1844
  1222  00190C                     l1854:
  1223                           
  1224                           ;I2C.c: 101: }
  1225                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  1226  00190C  0E00               	movlw	0
  1227  00190E  EC18  F00E         	call	_I2C_Master_Read
  1228  001912  6E3C               	movwf	_time+6,c
  1229                           
  1230                           ;I2C.c: 103: I2C_Master_Stop();
  1231  001914  EC9C  F00E         	call	_I2C_Master_Stop	;wreg free
  1232  001918  0012               	return		;funcret
  1233  00191A                     __end_of_updateTime:
  1234                           	opt stack 0
  1235                           tblptru	equ	0xFF8
  1236                           prodh	equ	0xFF4
  1237                           prodl	equ	0xFF3
  1238                           postinc0	equ	0xFEE
  1239                           wreg	equ	0xFE8
  1240                           indf2	equ	0xFDF
  1241                           fsr2h	equ	0xFDA
  1242                           fsr2l	equ	0xFD9
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _I2C_Master_Write *****************
  1246 ;; Defined at:
  1247 ;;		line 54 in file "I2C.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  d               2    1[COMRAM] unsigned int 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    1
  1268 ;; This function calls:
  1269 ;;		_I2C_Master_Wait
  1270 ;; This function is called by:
  1271 ;;		_updateTime
  1272 ;;		_set_time
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text2
  1277  001D24                     __ptext2:
  1278                           	opt stack 0
  1279  001D24                     _I2C_Master_Write:
  1280                           	opt stack 28
  1281                           
  1282                           ;I2C.c: 56: I2C_Master_Wait();
  1283                           
  1284                           ;incstack = 0
  1285  001D24  EC7D  F00E         	call	_I2C_Master_Wait	;wreg free
  1286                           
  1287                           ;I2C.c: 57: SSPBUF = d;
  1288  001D28  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1289  001D2C  0012               	return		;funcret
  1290  001D2E                     __end_of_I2C_Master_Write:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           prodh	equ	0xFF4
  1294                           prodl	equ	0xFF3
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           indf2	equ	0xFDF
  1298                           fsr2h	equ	0xFDA
  1299                           fsr2l	equ	0xFD9
  1300                           status	equ	0xFD8
  1301                           
  1302 ;; *************** function _I2C_Master_Stop *****************
  1303 ;; Defined at:
  1304 ;;		line 48 in file "I2C.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;		None
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      void 
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:        0 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    1
  1325 ;; This function calls:
  1326 ;;		_I2C_Master_Wait
  1327 ;; This function is called by:
  1328 ;;		_updateTime
  1329 ;;		_set_time
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text3
  1334  001D38                     __ptext3:
  1335                           	opt stack 0
  1336  001D38                     _I2C_Master_Stop:
  1337                           	opt stack 28
  1338                           
  1339                           ;I2C.c: 50: I2C_Master_Wait();
  1340                           
  1341                           ;incstack = 0
  1342  001D38  EC7D  F00E         	call	_I2C_Master_Wait	;wreg free
  1343                           
  1344                           ;I2C.c: 51: PEN = 1;
  1345  001D3C  84C5               	bsf	4037,2,c	;volatile
  1346  001D3E  0012               	return		;funcret
  1347  001D40                     __end_of_I2C_Master_Stop:
  1348                           	opt stack 0
  1349                           tblptru	equ	0xFF8
  1350                           prodh	equ	0xFF4
  1351                           prodl	equ	0xFF3
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           indf2	equ	0xFDF
  1355                           fsr2h	equ	0xFDA
  1356                           fsr2l	equ	0xFD9
  1357                           status	equ	0xFD8
  1358                           
  1359 ;; *************** function _I2C_Master_Start *****************
  1360 ;; Defined at:
  1361 ;;		line 36 in file "I2C.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		_I2C_Master_Wait
  1384 ;; This function is called by:
  1385 ;;		_updateTime
  1386 ;;		_set_time
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           	psect	text4
  1391  001D40                     __ptext4:
  1392                           	opt stack 0
  1393  001D40                     _I2C_Master_Start:
  1394                           	opt stack 28
  1395                           
  1396                           ;I2C.c: 38: I2C_Master_Wait();
  1397                           
  1398                           ;incstack = 0
  1399  001D40  EC7D  F00E         	call	_I2C_Master_Wait	;wreg free
  1400                           
  1401                           ;I2C.c: 39: SEN = 1;
  1402  001D44  80C5               	bsf	4037,0,c	;volatile
  1403  001D46  0012               	return		;funcret
  1404  001D48                     __end_of_I2C_Master_Start:
  1405                           	opt stack 0
  1406                           tblptru	equ	0xFF8
  1407                           prodh	equ	0xFF4
  1408                           prodl	equ	0xFF3
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           indf2	equ	0xFDF
  1412                           fsr2h	equ	0xFDA
  1413                           fsr2l	equ	0xFD9
  1414                           status	equ	0xFD8
  1415                           
  1416 ;; *************** function _I2C_Master_Read *****************
  1417 ;; Defined at:
  1418 ;;		line 60 in file "I2C.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;  a               1    wreg     unsigned char 
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  a               1    1[COMRAM] unsigned char 
  1423 ;;  temp            1    2[COMRAM] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      unsigned char 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;Total ram usage:        2 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    1
  1440 ;; This function calls:
  1441 ;;		_I2C_Master_Wait
  1442 ;; This function is called by:
  1443 ;;		_updateTime
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text5
  1448  001C30                     __ptext5:
  1449                           	opt stack 0
  1450  001C30                     _I2C_Master_Read:
  1451                           	opt stack 28
  1452                           
  1453                           ;incstack = 0
  1454                           ;I2C_Master_Read@a stored from wreg
  1455  001C30  6E02               	movwf	I2C_Master_Read@a,c
  1456                           
  1457                           ;I2C.c: 62: unsigned char temp;
  1458                           ;I2C.c: 63: I2C_Master_Wait();
  1459  001C32  EC7D  F00E         	call	_I2C_Master_Wait	;wreg free
  1460                           
  1461                           ;I2C.c: 64: RCEN = 1;
  1462  001C36  86C5               	bsf	4037,3,c	;volatile
  1463                           
  1464                           ;I2C.c: 65: I2C_Master_Wait();
  1465  001C38  EC7D  F00E         	call	_I2C_Master_Wait	;wreg free
  1466                           
  1467                           ;I2C.c: 66: temp = SSPBUF;
  1468  001C3C  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  1469                           
  1470                           ;I2C.c: 67: I2C_Master_Wait();
  1471  001C40  EC7D  F00E         	call	_I2C_Master_Wait	;wreg free
  1472                           
  1473                           ;I2C.c: 68: ACKDT = (a)?0:1;
  1474  001C44  5002               	movf	I2C_Master_Read@a,w,c
  1475  001C46  A4D8               	btfss	status,2,c
  1476  001C48  D002               	goto	u400
  1477  001C4A  8AC5               	bsf	4037,5,c	;volatile
  1478  001C4C  D001               	goto	l1270
  1479  001C4E                     u400:
  1480  001C4E  9AC5               	bcf	4037,5,c	;volatile
  1481  001C50                     l1270:
  1482                           
  1483                           ;I2C.c: 69: ACKEN = 1;
  1484  001C50  88C5               	bsf	4037,4,c	;volatile
  1485                           
  1486                           ;I2C.c: 70: return temp;
  1487  001C52  5003               	movf	I2C_Master_Read@temp,w,c
  1488  001C54  0012               	return	
  1489  001C56                     __end_of_I2C_Master_Read:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           prodh	equ	0xFF4
  1493                           prodl	equ	0xFF3
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           indf2	equ	0xFDF
  1497                           fsr2h	equ	0xFDA
  1498                           fsr2l	equ	0xFD9
  1499                           status	equ	0xFD8
  1500                           
  1501 ;; *************** function _I2C_Master_Wait *****************
  1502 ;; Defined at:
  1503 ;;		line 31 in file "I2C.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;		None
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;		None
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2, status,0
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;Total ram usage:        1 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_I2C_Master_Start
  1527 ;;		_I2C_Master_Stop
  1528 ;;		_I2C_Master_Write
  1529 ;;		_I2C_Master_Read
  1530 ;;		_I2C_Master_RepeatedStart
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text6
  1535  001CFA                     __ptext6:
  1536                           	opt stack 0
  1537  001CFA                     _I2C_Master_Wait:
  1538                           	opt stack 28
  1539  001CFA                     l193:
  1540  001CFA  B4C7               	btfsc	4039,2,c	;volatile
  1541  001CFC  D7FE               	goto	l193
  1542  001CFE  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1543  001D02  0E1F               	movlw	31
  1544  001D04  1601               	andwf	??_I2C_Master_Wait,f,c
  1545  001D06  B4D8               	btfsc	status,2,c
  1546  001D08  0012               	return	
  1547  001D0A  D7F7               	goto	l193
  1548  001D0C                     __end_of_I2C_Master_Wait:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           prodh	equ	0xFF4
  1552                           prodl	equ	0xFF3
  1553                           postinc0	equ	0xFEE
  1554                           wreg	equ	0xFE8
  1555                           indf2	equ	0xFDF
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function _updateEEPROM *****************
  1561 ;; Defined at:
  1562 ;;		line 72 in file "interface.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  time            2   12[COMRAM] int 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;		None
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1576 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;Total ram usage:        2 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    1
  1583 ;; This function calls:
  1584 ;;		_eepromRead
  1585 ;;		_eepromWrite
  1586 ;; This function is called by:
  1587 ;;		_main
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text7
  1592  001BD2                     __ptext7:
  1593                           	opt stack 0
  1594  001BD2                     _updateEEPROM:
  1595                           	opt stack 29
  1596                           
  1597                           ;interface.c: 73: eepromWrite(40, eepromRead(30));
  1598                           
  1599                           ;incstack = 0
  1600  001BD2  0E1E               	movlw	30
  1601  001BD4  EC04  F00E         	call	_eepromRead
  1602  001BD8  6E04               	movwf	eepromWrite@data,c
  1603  001BDA  0E28               	movlw	40
  1604  001BDC  ECCD  F00D         	call	_eepromWrite
  1605                           
  1606                           ;interface.c: 74: eepromWrite(30, eepromRead(20));
  1607  001BE0  0E14               	movlw	20
  1608  001BE2  EC04  F00E         	call	_eepromRead
  1609  001BE6  6E04               	movwf	eepromWrite@data,c
  1610  001BE8  0E1E               	movlw	30
  1611  001BEA  ECCD  F00D         	call	_eepromWrite
  1612                           
  1613                           ;interface.c: 75: eepromWrite(20, eepromRead(10));
  1614  001BEE  0E0A               	movlw	10
  1615  001BF0  EC04  F00E         	call	_eepromRead
  1616  001BF4  6E04               	movwf	eepromWrite@data,c
  1617  001BF6  0E14               	movlw	20
  1618  001BF8  ECCD  F00D         	call	_eepromWrite
  1619                           
  1620                           ;interface.c: 76: eepromWrite(10, time);
  1621  001BFC  C00D  F004         	movff	updateEEPROM@time,eepromWrite@data
  1622  001C00  0E0A               	movlw	10
  1623  001C02  ECCD  F00D         	call	_eepromWrite
  1624  001C06  0012               	return		;funcret
  1625  001C08                     __end_of_updateEEPROM:
  1626                           	opt stack 0
  1627                           tblptru	equ	0xFF8
  1628                           prodh	equ	0xFF4
  1629                           prodl	equ	0xFF3
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           indf2	equ	0xFDF
  1633                           fsr2h	equ	0xFDA
  1634                           fsr2l	equ	0xFD9
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _eepromWrite *****************
  1638 ;; Defined at:
  1639 ;;		line 46 in file "interface.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  address         1    wreg     char 
  1642 ;;  data            1    3[COMRAM] char 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  address         1    6[COMRAM] char 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1654 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;Total ram usage:        4 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; This function calls:
  1661 ;;		Nothing
  1662 ;; This function is called by:
  1663 ;;		_updateEEPROM
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text8
  1668  001B9A                     __ptext8:
  1669                           	opt stack 0
  1670  001B9A                     _eepromWrite:
  1671                           	opt stack 29
  1672                           
  1673                           ;incstack = 0
  1674                           ;eepromWrite@address stored from wreg
  1675  001B9A  6E07               	movwf	eepromWrite@address,c
  1676                           
  1677                           ;interface.c: 48: EEADRH = (signed char)(address >> 8);
  1678  001B9C  C007  F005         	movff	eepromWrite@address,??_eepromWrite
  1679  001BA0  0E08               	movlw	8
  1680  001BA2  6E06               	movwf	(??_eepromWrite+1)& (0+255),c
  1681  001BA4                     u1015:
  1682  001BA4  3405               	rlcf	??_eepromWrite,w,c
  1683  001BA6  3205               	rrcf	??_eepromWrite,f,c
  1684  001BA8  2E06               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  1685  001BAA  D7FC               	goto	u1015
  1686  001BAC  5005               	movf	??_eepromWrite,w,c
  1687  001BAE  6EAA               	movwf	4010,c	;volatile
  1688                           
  1689                           ;interface.c: 49: EEADR = (signed char)address;
  1690  001BB0  C007  FFA9         	movff	eepromWrite@address,4009	;volatile
  1691                           
  1692                           ;interface.c: 51: EEDATA = data;
  1693  001BB4  C004  FFA8         	movff	eepromWrite@data,4008	;volatile
  1694                           
  1695                           ;interface.c: 52: EECON1bits.EEPGD = 0;
  1696  001BB8  9EA6               	bcf	4006,7,c	;volatile
  1697                           
  1698                           ;interface.c: 53: EECON1bits.CFGS = 0;
  1699  001BBA  9CA6               	bcf	4006,6,c	;volatile
  1700                           
  1701                           ;interface.c: 54: EECON1bits.WREN = 1;
  1702  001BBC  84A6               	bsf	4006,2,c	;volatile
  1703                           
  1704                           ;interface.c: 58: EECON2 = 0x55;
  1705  001BBE  0E55               	movlw	85
  1706  001BC0  6EA7               	movwf	4007,c	;volatile
  1707                           
  1708                           ;interface.c: 59: EECON2 = 0xAA;
  1709  001BC2  0EAA               	movlw	170
  1710  001BC4  6EA7               	movwf	4007,c	;volatile
  1711                           
  1712                           ;interface.c: 60: EECON1bits.WR = 1;
  1713  001BC6  82A6               	bsf	4006,1,c	;volatile
  1714  001BC8                     l276:
  1715  001BC8  A8A1               	btfss	4001,4,c	;volatile
  1716  001BCA  D7FE               	goto	l276
  1717                           
  1718                           ;interface.c: 66: }
  1719                           ;interface.c: 68: PIR2bits.EEIF = 0;
  1720  001BCC  98A1               	bcf	4001,4,c	;volatile
  1721                           
  1722                           ;interface.c: 69: EECON1bits.WREN = 0;
  1723  001BCE  94A6               	bcf	4006,2,c	;volatile
  1724  001BD0  0012               	return		;funcret
  1725  001BD2                     __end_of_eepromWrite:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           prodh	equ	0xFF4
  1729                           prodl	equ	0xFF3
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           indf2	equ	0xFDF
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _timePassed *****************
  1738 ;; Defined at:
  1739 ;;		line 19 in file "logic.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  start           2    6[COMRAM] int 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  2    6[COMRAM] int 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        6 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    1
  1760 ;; This function calls:
  1761 ;;		___wmul
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text9
  1768  001A7E                     __ptext9:
  1769                           	opt stack 0
  1770  001A7E                     _timePassed:
  1771                           	opt stack 29
  1772                           
  1773                           ;logic.c: 21: else{return time[0] + 60*time[1] + 3600*time[2] - start;}
  1774                           
  1775                           ;logic.c: 20: if(time[0] + 60*time[1] + 3600*time[2] >= 86400){return time[0] + 60*time[
      +                          1] + 3600*time[2] + 86400 - start;}
  1776                           
  1777                           ;incstack = 0
  1778  001A7E  C007  F009         	movff	timePassed@start,??_timePassed
  1779  001A82  C008  F00A         	movff	timePassed@start+1,??_timePassed+1
  1780  001A86  1E09               	comf	??_timePassed,f,c
  1781  001A88  1E0A               	comf	??_timePassed+1,f,c
  1782  001A8A  4A09               	infsnz	??_timePassed,f,c
  1783  001A8C  2A0A               	incf	??_timePassed+1,f,c
  1784  001A8E  C038  F001         	movff	_time+2,___wmul@multiplier
  1785  001A92  6A02               	clrf	___wmul@multiplier+1,c
  1786  001A94  0E0E               	movlw	14
  1787  001A96  6E04               	movwf	___wmul@multiplicand+1,c
  1788  001A98  0E10               	movlw	16
  1789  001A9A  6E03               	movwf	___wmul@multiplicand,c
  1790  001A9C  EC2B  F00E         	call	___wmul	;wreg free
  1791  001AA0  5037               	movf	_time+1,w,c
  1792  001AA2  0D3C               	mullw	60
  1793  001AA4  5036               	movf	_time,w,c
  1794  001AA6  6E0B               	movwf	(??_timePassed+2)& (0+255),c
  1795  001AA8  6A0C               	clrf	(??_timePassed+3)& (0+255),c
  1796  001AAA  50F3               	movf	prodl,w,c
  1797  001AAC  260B               	addwf	??_timePassed+2,f,c
  1798  001AAE  50F4               	movf	prodh,w,c
  1799  001AB0  220C               	addwfc	??_timePassed+3,f,c
  1800  001AB2  5001               	movf	?___wmul,w,c
  1801  001AB4  260B               	addwf	??_timePassed+2,f,c
  1802  001AB6  5002               	movf	?___wmul+1,w,c
  1803  001AB8  220C               	addwfc	??_timePassed+3,f,c
  1804  001ABA  5009               	movf	??_timePassed,w,c
  1805  001ABC  240B               	addwf	??_timePassed+2,w,c
  1806  001ABE  6E07               	movwf	?_timePassed,c
  1807  001AC0  500A               	movf	??_timePassed+1,w,c
  1808  001AC2  200C               	addwfc	??_timePassed+3,w,c
  1809  001AC4  6E08               	movwf	?_timePassed+1,c
  1810  001AC6  0012               	return	
  1811  001AC8                     __end_of_timePassed:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           prodh	equ	0xFF4
  1815                           prodl	equ	0xFF3
  1816                           postinc0	equ	0xFEE
  1817                           wreg	equ	0xFE8
  1818                           indf2	equ	0xFDF
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           status	equ	0xFD8
  1822                           
  1823 ;; *************** function _readADC *****************
  1824 ;; Defined at:
  1825 ;;		line 16 in file "main.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  channel         1    wreg     unsigned char 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  channel         1    1[COMRAM] unsigned char 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  1    wreg      void 
  1832 ;; Registers used:
  1833 ;;		wreg, status,2, status,0, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;Total ram usage:        2 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; This function calls:
  1846 ;;		Nothing
  1847 ;; This function is called by:
  1848 ;;		_main
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text10
  1853  001C7C                     __ptext10:
  1854                           	opt stack 0
  1855  001C7C                     _readADC:
  1856                           	opt stack 30
  1857                           
  1858                           ;incstack = 0
  1859                           ;readADC@channel stored from wreg
  1860  001C7C  6E02               	movwf	readADC@channel,c
  1861                           
  1862                           ;main.c: 18: ADCON0 = ((channel <<2));
  1863  001C7E  4402               	rlncf	readADC@channel,w,c
  1864  001C80  46E8               	rlncf	wreg,f,c
  1865  001C82  0BFC               	andlw	252
  1866  001C84  6EC2               	movwf	4034,c	;volatile
  1867                           
  1868                           ;main.c: 19: ADCON0bits.GO = 1;
  1869  001C86  82C2               	bsf	4034,1,c	;volatile
  1870                           
  1871                           ;main.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0))
      +                          );}
  1872  001C88  D007               	goto	l1314
  1873  001C8A                     l1312:
  1874  001C8A  0E34               	movlw	52
  1875  001C8C  6E01               	movwf	??_readADC& (0+255),c
  1876  001C8E  0EF2               	movlw	242
  1877  001C90                     u1237:
  1878  001C90  2EE8               	decfsz	wreg,f,c
  1879  001C92  D7FE               	bra	u1237
  1880  001C94  2E01               	decfsz	??_readADC& (0+255),f,c
  1881  001C96  D7FC               	bra	u1237
  1882  001C98                     l1314:
  1883  001C98  A2C2               	btfss	4034,1,c	;volatile
  1884  001C9A  0012               	return	
  1885  001C9C  D7F6               	goto	l1312
  1886  001C9E                     __end_of_readADC:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           prodh	equ	0xFF4
  1890                           prodl	equ	0xFF3
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           indf2	equ	0xFDF
  1894                           fsr2h	equ	0xFDA
  1895                           fsr2l	equ	0xFD9
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _keyinterrupt *****************
  1899 ;; Defined at:
  1900 ;;		line 36 in file "main.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text11
  1928  001CD2                     __ptext11:
  1929                           	opt stack 0
  1930  001CD2                     _keyinterrupt:
  1931                           	opt stack 30
  1932                           
  1933                           ;main.c: 37: if(PORTBbits.RB1 == 1){
  1934                           
  1935                           ;incstack = 0
  1936  001CD2  A281               	btfss	3969,1,c	;volatile
  1937  001CD4  D006               	goto	l108
  1938                           
  1939                           ;main.c: 38: keypress = (PORTB & 0xF0)>>4;
  1940  001CD6  3881               	swapf	3969,w,c	;volatile
  1941  001CD8  0B0F               	andlw	15
  1942  001CDA  0B0F               	andlw	15
  1943  001CDC  6E3D               	movwf	_keypress,c	;volatile
  1944  001CDE                     l109:
  1945  001CDE  B281               	btfsc	3969,1,c	;volatile
  1946  001CE0  D7FE               	goto	l109
  1947  001CE2                     l108:
  1948                           
  1949                           ;main.c: 44: }
  1950                           ;main.c: 50: }
  1951                           ;main.c: 51: __nop();
  1952  001CE2  F000               	nop	
  1953  001CE4  0012               	return		;funcret
  1954  001CE6                     __end_of_keyinterrupt:
  1955                           	opt stack 0
  1956                           tblptru	equ	0xFF8
  1957                           prodh	equ	0xFF4
  1958                           prodl	equ	0xFF3
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           indf2	equ	0xFDF
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _initialize *****************
  1967 ;; Defined at:
  1968 ;;		line 55 in file "main.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;		None
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:        0 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    3
  1989 ;; This function calls:
  1990 ;;		_I2C_Master_Init
  1991 ;;		_initLCD
  1992 ;; This function is called by:
  1993 ;;		_main
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text12
  1998  00183E                     __ptext12:
  1999                           	opt stack 0
  2000  00183E                     _initialize:
  2001                           	opt stack 27
  2002                           
  2003                           ;main.c: 56: OSCCON = 0xF2;
  2004                           
  2005                           ;incstack = 0
  2006  00183E  0EF2               	movlw	242
  2007  001840  6ED3               	movwf	4051,c	;volatile
  2008                           
  2009                           ;main.c: 57: OSCTUNEbits.PLLEN = 1;
  2010  001842  8C9B               	bsf	3995,6,c	;volatile
  2011                           
  2012                           ;main.c: 59: TRISA = 0x11000000;
  2013  001844  0E00               	movlw	0
  2014  001846  6E92               	movwf	3986,c	;volatile
  2015                           
  2016                           ;main.c: 60: TRISB = 0b11110010;
  2017  001848  0EF2               	movlw	242
  2018  00184A  6E93               	movwf	3987,c	;volatile
  2019                           
  2020                           ;main.c: 61: TRISC = 0x00011100;
  2021  00184C  0E00               	movlw	0
  2022  00184E  6E94               	movwf	3988,c	;volatile
  2023                           
  2024                           ;main.c: 63: TRISD = 0x00;
  2025  001850  0E00               	movlw	0
  2026  001852  6E95               	movwf	3989,c	;volatile
  2027                           
  2028                           ;main.c: 64: TRISE = 0x00;
  2029  001854  0E00               	movlw	0
  2030  001856  6E96               	movwf	3990,c	;volatile
  2031                           
  2032                           ;main.c: 66: PR2 = 0xff;
  2033  001858  68CB               	setf	4043,c	;volatile
  2034                           
  2035                           ;main.c: 67: CCP1CON = 0b00001100;
  2036  00185A  0E0C               	movlw	12
  2037  00185C  6EBD               	movwf	4029,c	;volatile
  2038                           
  2039                           ;main.c: 68: CCPR1L = 0x00;
  2040  00185E  0E00               	movlw	0
  2041  001860  6EBE               	movwf	4030,c	;volatile
  2042                           
  2043                           ;main.c: 69: T2CON = 0b00000101;
  2044  001862  0E05               	movlw	5
  2045  001864  6ECA               	movwf	4042,c	;volatile
  2046                           
  2047                           ;main.c: 71: LATA = 0b01010101;
  2048  001866  0E55               	movlw	85
  2049  001868  6E89               	movwf	3977,c	;volatile
  2050                           
  2051                           ;main.c: 72: LATB = 0b01010101;
  2052  00186A  0E55               	movlw	85
  2053  00186C  6E8A               	movwf	3978,c	;volatile
  2054                           
  2055                           ;main.c: 73: LATC = 0b01010101;
  2056  00186E  0E55               	movlw	85
  2057  001870  6E8B               	movwf	3979,c	;volatile
  2058                           
  2059                           ;main.c: 74: LATD = 0x00;
  2060  001872  0E00               	movlw	0
  2061  001874  6E8C               	movwf	3980,c	;volatile
  2062                           
  2063                           ;main.c: 75: LATE = 0x00;
  2064  001876  0E00               	movlw	0
  2065  001878  6E8D               	movwf	3981,c	;volatile
  2066                           
  2067                           ;main.c: 76: LATDbits.LATD0 = 1;
  2068  00187A  808C               	bsf	3980,0,c	;volatile
  2069                           
  2070                           ;main.c: 77: LATDbits.LATD1 = 0;
  2071  00187C  928C               	bcf	3980,1,c	;volatile
  2072                           
  2073                           ;main.c: 78: LATEbits.LATE0 = 1;
  2074  00187E  808D               	bsf	3981,0,c	;volatile
  2075                           
  2076                           ;main.c: 79: LATEbits.LATE1 = 0;
  2077  001880  928D               	bcf	3981,1,c	;volatile
  2078                           
  2079                           ;main.c: 81: ADCON0 = 0x00;
  2080  001882  0E00               	movlw	0
  2081  001884  6EC2               	movwf	4034,c	;volatile
  2082                           
  2083                           ;main.c: 82: ADCON1 = 0xFF;
  2084  001886  68C1               	setf	4033,c	;volatile
  2085                           
  2086                           ;main.c: 84: initLCD();
  2087  001888  EC89  F00D         	call	_initLCD	;wreg free
  2088                           
  2089                           ;main.c: 86: I2C_Master_Init(10000);
  2090  00188C  0E10               	movlw	16
  2091  00188E  6E0E               	movwf	I2C_Master_Init@c,c
  2092  001890  0E27               	movlw	39
  2093  001892  6E0F               	movwf	I2C_Master_Init@c+1,c
  2094  001894  0E00               	movlw	0
  2095  001896  6E10               	movwf	I2C_Master_Init@c+2,c
  2096  001898  0E00               	movlw	0
  2097  00189A  6E11               	movwf	I2C_Master_Init@c+3,c
  2098  00189C  ECBE  F00C         	call	_I2C_Master_Init	;wreg free
  2099                           
  2100                           ;main.c: 89: nRBPU = 0;
  2101  0018A0  9EF1               	bcf	intcon2,7,c	;volatile
  2102                           
  2103                           ;main.c: 90: ADCON0 = 00000001;
  2104  0018A2  0E01               	movlw	1
  2105  0018A4  6EC2               	movwf	4034,c	;volatile
  2106                           
  2107                           ;main.c: 91: ADCON1 = 0x0B;
  2108  0018A6  0E0B               	movlw	11
  2109  0018A8  6EC1               	movwf	4033,c	;volatile
  2110                           
  2111                           ;main.c: 92: CVRCON = 0x00;
  2112  0018AA  0E00               	movlw	0
  2113  0018AC  6EB5               	movwf	4021,c	;volatile
  2114                           
  2115                           ;main.c: 93: CMCONbits.CIS = 0;
  2116  0018AE  96B4               	bcf	4020,3,c	;volatile
  2117                           
  2118                           ;main.c: 94: ADFM = 1;
  2119  0018B0  8EC0               	bsf	4032,7,c	;volatile
  2120  0018B2  0012               	return		;funcret
  2121  0018B4                     __end_of_initialize:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           prodh	equ	0xFF4
  2125                           prodl	equ	0xFF3
  2126                           intcon2	equ	0xFF1
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           indf2	equ	0xFDF
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _initLCD *****************
  2135 ;; Defined at:
  2136 ;;		line 11 in file "lcd.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;Total ram usage:        1 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    2
  2157 ;; This function calls:
  2158 ;;		_lcdInst
  2159 ;; This function is called by:
  2160 ;;		_initialize
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text13
  2165  001B12                     __ptext13:
  2166                           	opt stack 0
  2167  001B12                     _initLCD:
  2168                           	opt stack 27
  2169                           
  2170                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  2171                           
  2172                           ;incstack = 0
  2173  001B12  0E9C               	movlw	156
  2174  001B14  6E04               	movwf	??_initLCD& (0+255),c
  2175  001B16  0ED7               	movlw	215
  2176  001B18                     u1247:
  2177  001B18  2EE8               	decfsz	wreg,f,c
  2178  001B1A  D7FE               	bra	u1247
  2179  001B1C  2E04               	decfsz	??_initLCD& (0+255),f,c
  2180  001B1E  D7FC               	bra	u1247
  2181  001B20  F000               	nop	
  2182                           
  2183                           ;lcd.c: 13: lcdInst(0b00110011);
  2184  001B22  0E33               	movlw	51
  2185  001B24  EC8C  F00E         	call	_lcdInst
  2186                           
  2187                           ;lcd.c: 14: lcdInst(0b00110010);
  2188  001B28  0E32               	movlw	50
  2189  001B2A  EC8C  F00E         	call	_lcdInst
  2190                           
  2191                           ;lcd.c: 15: lcdInst(0b00101000);
  2192  001B2E  0E28               	movlw	40
  2193  001B30  EC8C  F00E         	call	_lcdInst
  2194                           
  2195                           ;lcd.c: 16: lcdInst(0b00001111);
  2196  001B34  0E0F               	movlw	15
  2197  001B36  EC8C  F00E         	call	_lcdInst
  2198                           
  2199                           ;lcd.c: 17: lcdInst(0b00000110);
  2200  001B3A  0E06               	movlw	6
  2201  001B3C  EC8C  F00E         	call	_lcdInst
  2202                           
  2203                           ;lcd.c: 18: lcdInst(0b00000001);
  2204  001B40  0E01               	movlw	1
  2205  001B42  EC8C  F00E         	call	_lcdInst
  2206                           
  2207                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  2208  001B46  0E9C               	movlw	156
  2209  001B48  6E04               	movwf	??_initLCD& (0+255),c
  2210  001B4A  0ED7               	movlw	215
  2211  001B4C                     u1257:
  2212  001B4C  2EE8               	decfsz	wreg,f,c
  2213  001B4E  D7FE               	bra	u1257
  2214  001B50  2E04               	decfsz	??_initLCD& (0+255),f,c
  2215  001B52  D7FC               	bra	u1257
  2216  001B54  F000               	nop	
  2217  001B56  0012               	return		;funcret
  2218  001B58                     __end_of_initLCD:
  2219                           	opt stack 0
  2220                           tblptru	equ	0xFF8
  2221                           prodh	equ	0xFF4
  2222                           prodl	equ	0xFF3
  2223                           intcon2	equ	0xFF1
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           indf2	equ	0xFDF
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _I2C_Master_Init *****************
  2232 ;; Defined at:
  2233 ;;		line 20 in file "I2C.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  c               4   13[COMRAM] const unsigned long 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;Total ram usage:        8 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    1
  2254 ;; This function calls:
  2255 ;;		___lldiv
  2256 ;; This function is called by:
  2257 ;;		_initialize
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text14
  2262  00197C                     __ptext14:
  2263                           	opt stack 0
  2264  00197C                     _I2C_Master_Init:
  2265                           	opt stack 28
  2266                           
  2267                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  2268                           
  2269                           ;incstack = 0
  2270  00197C  0E00               	movlw	0
  2271  00197E  6EC7               	movwf	4039,c	;volatile
  2272                           
  2273                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  2274  001980  0E28               	movlw	40
  2275  001982  6EC6               	movwf	4038,c	;volatile
  2276                           
  2277                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  2278  001984  0E00               	movlw	0
  2279  001986  6EC5               	movwf	4037,c	;volatile
  2280                           
  2281                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  2282  001988  0E00               	movlw	0
  2283  00198A  6E01               	movwf	___lldiv@dividend,c
  2284  00198C  0E48               	movlw	72
  2285  00198E  6E02               	movwf	___lldiv@dividend+1,c
  2286  001990  0EE8               	movlw	232
  2287  001992  6E03               	movwf	___lldiv@dividend+2,c
  2288  001994  0E01               	movlw	1
  2289  001996  6E04               	movwf	___lldiv@dividend+3,c
  2290  001998  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2291  00199C  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2292  0019A0  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2293  0019A4  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2294  0019A8  0E02               	movlw	2
  2295  0019AA                     u775:
  2296  0019AA  90D8               	bcf	status,0,c
  2297  0019AC  3612               	rlcf	??_I2C_Master_Init,f,c
  2298  0019AE  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2299  0019B0  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2300  0019B2  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2301  0019B4  2EE8               	decfsz	wreg,f,c
  2302  0019B6  D7F9               	goto	u775
  2303  0019B8  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2304  0019BC  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2305  0019C0  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2306  0019C4  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2307  0019C8  ECA2  F00B         	call	___lldiv	;wreg free
  2308  0019CC  0401               	decf	?___lldiv,w,c
  2309  0019CE  6EC8               	movwf	4040,c	;volatile
  2310                           
  2311                           ;I2C.c: 27: TRISC3 = 1;
  2312  0019D0  8694               	bsf	3988,3,c	;volatile
  2313                           
  2314                           ;I2C.c: 28: TRISC4 = 1;
  2315  0019D2  8894               	bsf	3988,4,c	;volatile
  2316  0019D4  0012               	return		;funcret
  2317  0019D6                     __end_of_I2C_Master_Init:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           prodh	equ	0xFF4
  2321                           prodl	equ	0xFF3
  2322                           intcon2	equ	0xFF1
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           indf2	equ	0xFDF
  2326                           fsr2h	equ	0xFDA
  2327                           fsr2l	equ	0xFD9
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function ___lldiv *****************
  2331 ;; Defined at:
  2332 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  dividend        4    0[COMRAM] unsigned long 
  2335 ;;  divisor         4    4[COMRAM] unsigned long 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  quotient        4    8[COMRAM] unsigned long 
  2338 ;;  counter         1   12[COMRAM] unsigned char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  4    0[COMRAM] unsigned long 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2348 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;Total ram usage:       13 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; This function calls:
  2355 ;;		Nothing
  2356 ;; This function is called by:
  2357 ;;		_I2C_Master_Init
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text15
  2362  001744                     __ptext15:
  2363                           	opt stack 0
  2364  001744                     ___lldiv:
  2365                           	opt stack 28
  2366                           
  2367                           ;incstack = 0
  2368  001744  0E00               	movlw	0
  2369  001746  6E09               	movwf	___lldiv@quotient,c
  2370  001748  0E00               	movlw	0
  2371  00174A  6E0A               	movwf	___lldiv@quotient+1,c
  2372  00174C  0E00               	movlw	0
  2373  00174E  6E0B               	movwf	___lldiv@quotient+2,c
  2374  001750  0E00               	movlw	0
  2375  001752  6E0C               	movwf	___lldiv@quotient+3,c
  2376  001754  5005               	movf	___lldiv@divisor,w,c
  2377  001756  1006               	iorwf	___lldiv@divisor+1,w,c
  2378  001758  1007               	iorwf	___lldiv@divisor+2,w,c
  2379  00175A  1008               	iorwf	___lldiv@divisor+3,w,c
  2380  00175C  B4D8               	btfsc	status,2,c
  2381  00175E  D02A               	goto	l722
  2382  001760  0E01               	movlw	1
  2383  001762  6E0D               	movwf	___lldiv@counter,c
  2384  001764  D006               	goto	l1602
  2385  001766                     l1600:
  2386  001766  90D8               	bcf	status,0,c
  2387  001768  3605               	rlcf	___lldiv@divisor,f,c
  2388  00176A  3606               	rlcf	___lldiv@divisor+1,f,c
  2389  00176C  3607               	rlcf	___lldiv@divisor+2,f,c
  2390  00176E  3608               	rlcf	___lldiv@divisor+3,f,c
  2391  001770  2A0D               	incf	___lldiv@counter,f,c
  2392  001772                     l1602:
  2393  001772  AE08               	btfss	___lldiv@divisor+3,7,c
  2394  001774  D7F8               	goto	l1600
  2395  001776                     l1604:
  2396  001776  90D8               	bcf	status,0,c
  2397  001778  3609               	rlcf	___lldiv@quotient,f,c
  2398  00177A  360A               	rlcf	___lldiv@quotient+1,f,c
  2399  00177C  360B               	rlcf	___lldiv@quotient+2,f,c
  2400  00177E  360C               	rlcf	___lldiv@quotient+3,f,c
  2401  001780  5005               	movf	___lldiv@divisor,w,c
  2402  001782  5C01               	subwf	___lldiv@dividend,w,c
  2403  001784  5006               	movf	___lldiv@divisor+1,w,c
  2404  001786  5802               	subwfb	___lldiv@dividend+1,w,c
  2405  001788  5007               	movf	___lldiv@divisor+2,w,c
  2406  00178A  5803               	subwfb	___lldiv@dividend+2,w,c
  2407  00178C  5008               	movf	___lldiv@divisor+3,w,c
  2408  00178E  5804               	subwfb	___lldiv@dividend+3,w,c
  2409  001790  A0D8               	btfss	status,0,c
  2410  001792  D009               	goto	l1612
  2411  001794  5005               	movf	___lldiv@divisor,w,c
  2412  001796  5E01               	subwf	___lldiv@dividend,f,c
  2413  001798  5006               	movf	___lldiv@divisor+1,w,c
  2414  00179A  5A02               	subwfb	___lldiv@dividend+1,f,c
  2415  00179C  5007               	movf	___lldiv@divisor+2,w,c
  2416  00179E  5A03               	subwfb	___lldiv@dividend+2,f,c
  2417  0017A0  5008               	movf	___lldiv@divisor+3,w,c
  2418  0017A2  5A04               	subwfb	___lldiv@dividend+3,f,c
  2419  0017A4  8009               	bsf	___lldiv@quotient,0,c
  2420  0017A6                     l1612:
  2421  0017A6  90D8               	bcf	status,0,c
  2422  0017A8  3208               	rrcf	___lldiv@divisor+3,f,c
  2423  0017AA  3207               	rrcf	___lldiv@divisor+2,f,c
  2424  0017AC  3206               	rrcf	___lldiv@divisor+1,f,c
  2425  0017AE  3205               	rrcf	___lldiv@divisor,f,c
  2426  0017B0  2E0D               	decfsz	___lldiv@counter,f,c
  2427  0017B2  D7E1               	goto	l1604
  2428  0017B4                     l722:
  2429  0017B4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2430  0017B8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2431  0017BC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2432  0017C0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2433  0017C4  0012               	return		;funcret
  2434  0017C6                     __end_of___lldiv:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           intcon2	equ	0xFF1
  2440                           postinc0	equ	0xFEE
  2441                           wreg	equ	0xFE8
  2442                           indf2	equ	0xFDF
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function _homescreen *****************
  2448 ;; Defined at:
  2449 ;;		line 3 in file "interface.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;		None
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;		None
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  1    wreg      void 
  2456 ;; Registers used:
  2457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;Total ram usage:        0 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    3
  2470 ;; This function calls:
  2471 ;;		_lcdInst
  2472 ;;		_printf
  2473 ;; This function is called by:
  2474 ;;		_main
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text16
  2479  00191A                     __ptext16:
  2480                           	opt stack 0
  2481  00191A                     _homescreen:
  2482                           	opt stack 27
  2483                           
  2484                           ;interface.c: 4: lcdInst(0b10000000);;
  2485                           
  2486                           ;incstack = 0
  2487  00191A  0E80               	movlw	128
  2488  00191C  EC8C  F00E         	call	_lcdInst
  2489                           
  2490                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  2491  001920  0E4F               	movlw	low STR_5
  2492  001922  6E0D               	movwf	printf@f,c
  2493  001924  0E10               	movlw	high STR_5
  2494  001926  6E0E               	movwf	printf@f+1,c
  2495  001928  C03C  F00F         	movff	_time+6,?_printf+2
  2496  00192C  6A10               	clrf	?_printf+3,c
  2497  00192E  C03B  F011         	movff	_time+5,?_printf+4
  2498  001932  6A12               	clrf	?_printf+5,c
  2499  001934  C03A  F013         	movff	_time+4,?_printf+6
  2500  001938  6A14               	clrf	?_printf+7,c
  2501  00193A  EC71  F008         	call	_printf	;wreg free
  2502                           
  2503                           ;interface.c: 6: printf("3:Start");
  2504  00193E  0ED3               	movlw	low STR_6
  2505  001940  6E0D               	movwf	printf@f,c
  2506  001942  0E10               	movlw	high STR_6
  2507  001944  6E0E               	movwf	printf@f+1,c
  2508  001946  EC71  F008         	call	_printf	;wreg free
  2509                           
  2510                           ;interface.c: 7: lcdInst(0b11000000);;
  2511  00194A  0EC0               	movlw	192
  2512  00194C  EC8C  F00E         	call	_lcdInst
  2513                           
  2514                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2515  001950  0EAE               	movlw	low STR_7
  2516  001952  6E0D               	movwf	printf@f,c
  2517  001954  0E10               	movlw	high STR_7
  2518  001956  6E0E               	movwf	printf@f+1,c
  2519  001958  C038  F00F         	movff	_time+2,?_printf+2
  2520  00195C  6A10               	clrf	?_printf+3,c
  2521  00195E  C037  F011         	movff	_time+1,?_printf+4
  2522  001962  6A12               	clrf	?_printf+5,c
  2523  001964  C036  F013         	movff	_time,?_printf+6
  2524  001968  6A14               	clrf	?_printf+7,c
  2525  00196A  EC71  F008         	call	_printf	;wreg free
  2526                           
  2527                           ;interface.c: 9: printf(" 2:Logs");
  2528  00196E  0ECB               	movlw	low STR_8
  2529  001970  6E0D               	movwf	printf@f,c
  2530  001972  0E10               	movlw	high STR_8
  2531  001974  6E0E               	movwf	printf@f+1,c
  2532  001976  EC71  F008         	call	_printf	;wreg free
  2533  00197A  0012               	return		;funcret
  2534  00197C                     __end_of_homescreen:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon2	equ	0xFF1
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           indf2	equ	0xFDF
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _displayLogs *****************
  2548 ;; Defined at:
  2549 ;;		line 12 in file "interface.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2567 ;;Total ram usage:        1 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    3
  2570 ;; This function calls:
  2571 ;;		_eepromRead
  2572 ;;		_keycheck
  2573 ;;		_lcdInst
  2574 ;;		_printf
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text17
  2581  00167E                     __ptext17:
  2582                           	opt stack 0
  2583  00167E                     _displayLogs:
  2584                           	opt stack 27
  2585                           
  2586                           ;interface.c: 13: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2587                           
  2588                           ;incstack = 0
  2589  00167E  0E01               	movlw	1
  2590  001680  EC8C  F00E         	call	_lcdInst
  2591  001684  0E68               	movlw	104
  2592  001686  6E23               	movwf	??_displayLogs& (0+255),c
  2593  001688  0EE4               	movlw	228
  2594  00168A                     u1267:
  2595  00168A  2EE8               	decfsz	wreg,f,c
  2596  00168C  D7FE               	bra	u1267
  2597  00168E  2E23               	decfsz	??_displayLogs& (0+255),f,c
  2598  001690  D7FC               	bra	u1267
  2599  001692  D000               	nop2	
  2600                           
  2601                           ;interface.c: 14: printf("Run#1    A:Next");
  2602  001694  0E6F               	movlw	low STR_9
  2603  001696  6E0D               	movwf	printf@f,c
  2604  001698  0E10               	movlw	high STR_9
  2605  00169A  6E0E               	movwf	printf@f+1,c
  2606  00169C  EC71  F008         	call	_printf	;wreg free
  2607                           
  2608                           ;interface.c: 15: lcdInst(0b11000000);;
  2609  0016A0  0EC0               	movlw	192
  2610  0016A2  EC8C  F00E         	call	_lcdInst
  2611                           
  2612                           ;interface.c: 16: printf("# of cans: %d", eepromRead(10));
  2613  0016A6  0EBD               	movlw	low STR_10
  2614  0016A8  6E0D               	movwf	printf@f,c
  2615  0016AA  0E10               	movlw	high STR_10
  2616  0016AC  6E0E               	movwf	printf@f+1,c
  2617  0016AE  0E0A               	movlw	10
  2618  0016B0  EC04  F00E         	call	_eepromRead
  2619  0016B4  6E0F               	movwf	?_printf+2,c
  2620  0016B6  6A10               	clrf	?_printf+3,c
  2621  0016B8  BE0F               	btfsc	?_printf+2,7,c
  2622  0016BA  0610               	decf	?_printf+3,f,c
  2623  0016BC  EC71  F008         	call	_printf	;wreg free
  2624                           
  2625                           ;interface.c: 17: keycheck();
  2626  0016C0  EC73  F00E         	call	_keycheck	;wreg free
  2627                           
  2628                           ;interface.c: 18: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2629  0016C4  0E01               	movlw	1
  2630  0016C6  EC8C  F00E         	call	_lcdInst
  2631  0016CA  0E68               	movlw	104
  2632  0016CC  6E23               	movwf	??_displayLogs& (0+255),c
  2633  0016CE  0EE4               	movlw	228
  2634  0016D0                     u1277:
  2635  0016D0  2EE8               	decfsz	wreg,f,c
  2636  0016D2  D7FE               	bra	u1277
  2637  0016D4  2E23               	decfsz	??_displayLogs& (0+255),f,c
  2638  0016D6  D7FC               	bra	u1277
  2639  0016D8  D000               	nop2	
  2640                           
  2641                           ;interface.c: 19: printf("Run#1    A:Next");
  2642  0016DA  0E6F               	movlw	low STR_9
  2643  0016DC  6E0D               	movwf	printf@f,c
  2644  0016DE  0E10               	movlw	high STR_9
  2645  0016E0  6E0E               	movwf	printf@f+1,c
  2646  0016E2  EC71  F008         	call	_printf	;wreg free
  2647                           
  2648                           ;interface.c: 20: lcdInst(0b11000000);;
  2649  0016E6  0EC0               	movlw	192
  2650  0016E8  EC8C  F00E         	call	_lcdInst
  2651                           
  2652                           ;interface.c: 21: printf("# soda cans: %d", eepromRead(20));
  2653  0016EC  0E5F               	movlw	low STR_12
  2654  0016EE  6E0D               	movwf	printf@f,c
  2655  0016F0  0E10               	movlw	high STR_12
  2656  0016F2  6E0E               	movwf	printf@f+1,c
  2657  0016F4  0E14               	movlw	20
  2658  0016F6  EC04  F00E         	call	_eepromRead
  2659  0016FA  6E0F               	movwf	?_printf+2,c
  2660  0016FC  6A10               	clrf	?_printf+3,c
  2661  0016FE  BE0F               	btfsc	?_printf+2,7,c
  2662  001700  0610               	decf	?_printf+3,f,c
  2663  001702  EC71  F008         	call	_printf	;wreg free
  2664                           
  2665                           ;interface.c: 22: keycheck();
  2666  001706  EC73  F00E         	call	_keycheck	;wreg free
  2667                           
  2668                           ;interface.c: 23: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2669  00170A  0E01               	movlw	1
  2670  00170C  EC8C  F00E         	call	_lcdInst
  2671  001710  0E68               	movlw	104
  2672  001712  6E23               	movwf	??_displayLogs& (0+255),c
  2673  001714  0EE4               	movlw	228
  2674  001716                     u1287:
  2675  001716  2EE8               	decfsz	wreg,f,c
  2676  001718  D7FE               	bra	u1287
  2677  00171A  2E23               	decfsz	??_displayLogs& (0+255),f,c
  2678  00171C  D7FC               	bra	u1287
  2679  00171E  D000               	nop2	
  2680                           
  2681                           ;interface.c: 24: printf("Run#1    A:Next");
  2682  001720  0E6F               	movlw	low STR_9
  2683  001722  6E0D               	movwf	printf@f,c
  2684  001724  0E10               	movlw	high STR_9
  2685  001726  6E0E               	movwf	printf@f+1,c
  2686  001728  EC71  F008         	call	_printf	;wreg free
  2687                           
  2688                           ;interface.c: 25: lcdInst(0b11000000);;
  2689  00172C  0EC0               	movlw	192
  2690  00172E  EC8C  F00E         	call	_lcdInst
  2691                           
  2692                           ;interface.c: 26: printf("# soup cans: 4");
  2693  001732  0E9F               	movlw	low STR_14
  2694  001734  6E0D               	movwf	printf@f,c
  2695  001736  0E10               	movlw	high STR_14
  2696  001738  6E0E               	movwf	printf@f+1,c
  2697  00173A  EC71  F008         	call	_printf	;wreg free
  2698                           
  2699                           ;interface.c: 27: keycheck();
  2700  00173E  EC73  F00E         	call	_keycheck	;wreg free
  2701  001742  0012               	return		;funcret
  2702  001744                     __end_of_displayLogs:
  2703                           	opt stack 0
  2704                           tblptru	equ	0xFF8
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           intcon2	equ	0xFF1
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           indf2	equ	0xFDF
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _printf *****************
  2716 ;; Defined at:
  2717 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2720 ;;		 -> STR_14(15), STR_13(16), STR_12(16), STR_11(16), 
  2721 ;;		 -> STR_10(14), STR_9(16), STR_8(8), STR_7(15), 
  2722 ;;		 -> STR_6(8), STR_5(16), STR_4(19), STR_3(5), 
  2723 ;;		 -> STR_2(16), STR_1(16), 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  idx             1   24[COMRAM] unsigned char 
  2726 ;;  tmpval          4    0        struct .
  2727 ;;  cp              3    0        PTR const unsigned char 
  2728 ;;  width           2   31[COMRAM] int 
  2729 ;;  val             2   28[COMRAM] unsigned int 
  2730 ;;  ap              2   25[COMRAM] PTR void [1]
  2731 ;;		 -> ?_printf(2), 
  2732 ;;  len             2    0        unsigned int 
  2733 ;;  c               1   33[COMRAM] char 
  2734 ;;  flag            1   30[COMRAM] unsigned char 
  2735 ;;  prec            1   27[COMRAM] char 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  2   12[COMRAM] int 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2745 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;Total ram usage:       22 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    2
  2752 ;; This function calls:
  2753 ;;		___lwdiv
  2754 ;;		___lwmod
  2755 ;;		___wmul
  2756 ;;		_isdigit
  2757 ;;		_putch
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;;		_homescreen
  2761 ;;		_displayLogs
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text18
  2766  0010E2                     __ptext18:
  2767                           	opt stack 0
  2768  0010E2                     _printf:
  2769                           	opt stack 28
  2770                           
  2771                           ;doprnt.c: 466: va_list ap;
  2772                           ;doprnt.c: 499: signed char c;
  2773                           ;doprnt.c: 501: int width;
  2774                           ;doprnt.c: 506: signed char prec;
  2775                           ;doprnt.c: 508: unsigned char flag;
  2776                           ;doprnt.c: 523: union {
  2777                           ;doprnt.c: 524: unsigned long vd;
  2778                           ;doprnt.c: 525: double integ;
  2779                           ;doprnt.c: 526: } tmpval;
  2780                           ;doprnt.c: 528: unsigned int val;
  2781                           ;doprnt.c: 529: unsigned len;
  2782                           ;doprnt.c: 530: const char * cp;
  2783                           ;doprnt.c: 533: *ap = __va_start();
  2784                           
  2785                           ;incstack = 0
  2786  0010E2  0E0F               	movlw	low (?_printf+2)
  2787  0010E4  6E1A               	movwf	printf@ap,c
  2788  0010E6  0E00               	movlw	high (?_printf+2)
  2789  0010E8  6E1B               	movwf	printf@ap+1,c
  2790                           
  2791                           ;doprnt.c: 536: while(c = *f++) {
  2792  0010EA  D174               	goto	l1790
  2793  0010EC                     l1664:
  2794                           
  2795                           ;doprnt.c: 538: if(c != '%')
  2796  0010EC  0E25               	movlw	37
  2797  0010EE  1822               	xorwf	printf@c,w,c
  2798  0010F0  B4D8               	btfsc	status,2,c
  2799  0010F2  D004               	goto	l1668
  2800                           
  2801                           ;doprnt.c: 540: {
  2802                           ;doprnt.c: 541: (putch(c) );
  2803  0010F4  5022               	movf	printf@c,w,c
  2804  0010F6  EC86  F00E         	call	_putch
  2805                           
  2806                           ;doprnt.c: 542: continue;
  2807  0010FA  D16C               	goto	l1790
  2808  0010FC                     l1668:
  2809                           
  2810                           ;doprnt.c: 543: }
  2811                           ;doprnt.c: 546: width = 0;
  2812  0010FC  0E00               	movlw	0
  2813  0010FE  6E21               	movwf	printf@width+1,c
  2814  001100  0E00               	movlw	0
  2815  001102  6E20               	movwf	printf@width,c
  2816                           
  2817                           ;doprnt.c: 548: flag = 0;
  2818  001104  0E00               	movlw	0
  2819  001106  6E1F               	movwf	printf@flag,c
  2820                           
  2821                           ;doprnt.c: 551: switch(*f) {
  2822                           
  2823                           ;doprnt.c: 550: for(;;) {
  2824  001108  D003               	goto	l1674
  2825  00110A                     l1670:
  2826                           
  2827                           ;doprnt.c: 580: flag |= 0x04;
  2828  00110A  841F               	bsf	printf@flag,2,c
  2829                           
  2830                           ;doprnt.c: 581: f++;
  2831  00110C  4A0D               	infsnz	printf@f,f,c
  2832  00110E  2A0E               	incf	printf@f+1,f,c
  2833  001110                     l1674:
  2834  001110  C00D  FFF6         	movff	printf@f,tblptrl
  2835  001114  C00E  FFF7         	movff	printf@f+1,tblptrh
  2836  001118                     	if	0	;tblptru may be non-zero
  2837  001118                     	endif
  2838  001118                     	if	0	;tblptru may be non-zero
  2839  001118                     	endif
  2840  001118  0008               	tblrd		*
  2841  00111A  50F5               	movf	tablat,w,c
  2842                           
  2843                           ; Switch size 1, requested type "space"
  2844                           ; Number of cases is 1, Range of values is 48 to 48
  2845                           ; switch strategies available:
  2846                           ; Name         Instructions Cycles
  2847                           ; simple_byte            4     3 (average)
  2848                           ;	Chosen strategy is simple_byte
  2849  00111C  0A30               	xorlw	48	; case 48
  2850  00111E  B4D8               	btfsc	status,2,c
  2851  001120  D7F4               	goto	l1670
  2852                           
  2853                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2854                           
  2855                           ;doprnt.c: 586: }
  2856                           
  2857                           ;doprnt.c: 585: break;
  2858  001122  C00D  FFF6         	movff	printf@f,tblptrl
  2859  001126  C00E  FFF7         	movff	printf@f+1,tblptrh
  2860  00112A                     	if	0	;tblptru may be non-zero
  2861  00112A                     	endif
  2862  00112A                     	if	0	;tblptru may be non-zero
  2863  00112A                     	endif
  2864  00112A  0008               	tblrd		*
  2865  00112C  50F5               	movf	tablat,w,c
  2866  00112E  EC4F  F00E         	call	_isdigit
  2867  001132  A0D8               	btfss	status,0,c
  2868  001134  D035               	goto	l1692
  2869                           
  2870                           ;doprnt.c: 598: width = 0;
  2871  001136  0E00               	movlw	0
  2872  001138  6E21               	movwf	printf@width+1,c
  2873  00113A  0E00               	movlw	0
  2874  00113C  6E20               	movwf	printf@width,c
  2875  00113E                     l1680:
  2876                           
  2877                           ;doprnt.c: 600: width *= 10;
  2878  00113E  C020  F001         	movff	printf@width,___wmul@multiplier
  2879  001142  C021  F002         	movff	printf@width+1,___wmul@multiplier+1
  2880  001146  0E00               	movlw	0
  2881  001148  6E04               	movwf	___wmul@multiplicand+1,c
  2882  00114A  0E0A               	movlw	10
  2883  00114C  6E03               	movwf	___wmul@multiplicand,c
  2884  00114E  EC2B  F00E         	call	___wmul	;wreg free
  2885  001152  C001  F020         	movff	?___wmul,printf@width
  2886  001156  C002  F021         	movff	?___wmul+1,printf@width+1
  2887                           
  2888                           ;doprnt.c: 601: width += *f++ - '0';
  2889  00115A  0ED0               	movlw	208
  2890  00115C  6E15               	movwf	??_printf& (0+255),c
  2891  00115E  0EFF               	movlw	255
  2892  001160  6E16               	movwf	(??_printf+1)& (0+255),c
  2893  001162  C00D  FFF6         	movff	printf@f,tblptrl
  2894  001166  C00E  FFF7         	movff	printf@f+1,tblptrh
  2895  00116A                     	if	0	;tblptru may be non-zero
  2896  00116A                     	endif
  2897  00116A                     	if	0	;tblptru may be non-zero
  2898  00116A                     	endif
  2899  00116A  0008               	tblrd		*
  2900  00116C  50F5               	movf	tablat,w,c
  2901  00116E  6E17               	movwf	(??_printf+2)& (0+255),c
  2902  001170  6A18               	clrf	(??_printf+3)& (0+255),c
  2903  001172  5015               	movf	??_printf,w,c
  2904  001174  2617               	addwf	??_printf+2,f,c
  2905  001176  5016               	movf	??_printf+1,w,c
  2906  001178  2218               	addwfc	??_printf+3,f,c
  2907  00117A  5017               	movf	??_printf+2,w,c
  2908  00117C  2620               	addwf	printf@width,f,c
  2909  00117E  5018               	movf	??_printf+3,w,c
  2910  001180  2221               	addwfc	printf@width+1,f,c
  2911  001182  4A0D               	infsnz	printf@f,f,c
  2912  001184  2A0E               	incf	printf@f+1,f,c
  2913                           
  2914                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2915  001186  C00D  FFF6         	movff	printf@f,tblptrl
  2916  00118A  C00E  FFF7         	movff	printf@f+1,tblptrh
  2917  00118E                     	if	0	;tblptru may be non-zero
  2918  00118E                     	endif
  2919  00118E                     	if	0	;tblptru may be non-zero
  2920  00118E                     	endif
  2921  00118E  0008               	tblrd		*
  2922  001190  50F5               	movf	tablat,w,c
  2923  001192  EC4F  F00E         	call	_isdigit
  2924  001196  A0D8               	btfss	status,0,c
  2925  001198  D003               	goto	l1692
  2926  00119A  D7D1               	goto	l1680
  2927  00119C                     l1688:
  2928                           
  2929                           ;doprnt.c: 721: flag |= 0x80;
  2930  00119C  8E1F               	bsf	printf@flag,7,c
  2931                           
  2932                           ;doprnt.c: 723: break;
  2933  00119E  D017               	goto	l330
  2934  0011A0                     l1692:
  2935  0011A0  C00D  FFF6         	movff	printf@f,tblptrl
  2936  0011A4  C00E  FFF7         	movff	printf@f+1,tblptrh
  2937  0011A8  4A0D               	infsnz	printf@f,f,c
  2938  0011AA  2A0E               	incf	printf@f+1,f,c
  2939  0011AC                     	if	0	;tblptru may be non-zero
  2940  0011AC                     	endif
  2941  0011AC                     	if	0	;tblptru may be non-zero
  2942  0011AC                     	endif
  2943  0011AC  0008               	tblrd		*
  2944  0011AE  CFF5 F022          	movff	tablat,printf@c
  2945  0011B2  5022               	movf	printf@c,w,c
  2946                           
  2947                           ; Switch size 1, requested type "space"
  2948                           ; Number of cases is 4, Range of values is 0 to 120
  2949                           ; switch strategies available:
  2950                           ; Name         Instructions Cycles
  2951                           ; simple_byte           13     7 (average)
  2952                           ;	Chosen strategy is simple_byte
  2953  0011B4  0A00               	xorlw	0	; case 0
  2954  0011B6  B4D8               	btfsc	status,2,c
  2955  0011B8  0012               	return	
  2956  0011BA  0A64               	xorlw	100	; case 100
  2957  0011BC  B4D8               	btfsc	status,2,c
  2958  0011BE  D007               	goto	l330
  2959  0011C0  0A0D               	xorlw	13	; case 105
  2960  0011C2  B4D8               	btfsc	status,2,c
  2961  0011C4  D004               	goto	l330
  2962  0011C6  0A11               	xorlw	17	; case 120
  2963  0011C8  B4D8               	btfsc	status,2,c
  2964  0011CA  D7E8               	goto	l1688
  2965  0011CC  D103               	goto	l1790
  2966  0011CE                     l330:
  2967                           
  2968                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2969  0011CE  BE1F               	btfsc	printf@flag,7,c
  2970  0011D0  D015               	goto	l1704
  2971                           
  2972                           ;doprnt.c: 1253: {
  2973                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2974  0011D2  C01A  FFD9         	movff	printf@ap,fsr2l
  2975  0011D6  C01B  FFDA         	movff	printf@ap+1,fsr2h
  2976  0011DA  CFDE F01D          	movff	postinc2,printf@val
  2977  0011DE  CFDD F01E          	movff	postdec2,printf@val+1
  2978  0011E2  0E02               	movlw	2
  2979  0011E4  261A               	addwf	printf@ap,f,c
  2980  0011E6  0E00               	movlw	0
  2981  0011E8  221B               	addwfc	printf@ap+1,f,c
  2982                           
  2983                           ;doprnt.c: 1261: if((int)val < 0) {
  2984  0011EA  AE1E               	btfss	printf@val+1,7,c
  2985  0011EC  D044               	goto	l1738
  2986                           
  2987                           ;doprnt.c: 1262: flag |= 0x03;
  2988  0011EE  0E03               	movlw	3
  2989  0011F0  121F               	iorwf	printf@flag,f,c
  2990                           
  2991                           ;doprnt.c: 1263: val = -val;
  2992  0011F2  6C1D               	negf	printf@val,c
  2993  0011F4  1E1E               	comf	printf@val+1,f,c
  2994  0011F6  B0D8               	btfsc	status,0,c
  2995  0011F8  2A1E               	incf	printf@val+1,f,c
  2996                           
  2997                           ;doprnt.c: 1264: }
  2998                           ;doprnt.c: 1266: }
  2999  0011FA  D03D               	goto	l1738
  3000  0011FC                     l1704:
  3001                           
  3002                           ;doprnt.c: 1268: else
  3003                           ;doprnt.c: 1273: {
  3004                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3005  0011FC  C01A  FFD9         	movff	printf@ap,fsr2l
  3006  001200  C01B  FFDA         	movff	printf@ap+1,fsr2h
  3007  001204  CFDE F01D          	movff	postinc2,printf@val
  3008  001208  CFDD F01E          	movff	postdec2,printf@val+1
  3009  00120C  0E02               	movlw	2
  3010  00120E  261A               	addwf	printf@ap,f,c
  3011  001210  0E00               	movlw	0
  3012  001212  221B               	addwfc	printf@ap+1,f,c
  3013                           
  3014                           ;doprnt.c: 1287: }
  3015                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3016  001214  D030               	goto	l1738
  3017  001216                     l1708:
  3018                           
  3019                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3020  001216  0E01               	movlw	1
  3021  001218  6E22               	movwf	printf@c,c
  3022  00121A                     l1710:
  3023  00121A  0E05               	movlw	5
  3024  00121C  1822               	xorwf	printf@c,w,c
  3025  00121E  B4D8               	btfsc	status,2,c
  3026  001220  D032               	goto	l1740
  3027                           
  3028                           ;doprnt.c: 1306: if(val < dpowers[c])
  3029  001222  5022               	movf	printf@c,w,c
  3030  001224  0D02               	mullw	2
  3031  001226  0E12               	movlw	low _dpowers
  3032  001228  24F3               	addwf	prodl,w,c
  3033  00122A  6EF6               	movwf	tblptrl,c
  3034  00122C  0E10               	movlw	high _dpowers
  3035  00122E  20F4               	addwfc	prodh,w,c
  3036  001230  6EF7               	movwf	tblptrh,c
  3037  001232                     	if	0	;There are less than 3 active tblptr bytes
  3038  001232                     	endif
  3039  001232  0009               	tblrd		*+
  3040  001234  50F5               	movf	tablat,w,c
  3041  001236  5C1D               	subwf	printf@val,w,c
  3042  001238  0009               	tblrd		*+
  3043  00123A  50F5               	movf	tablat,w,c
  3044  00123C  581E               	subwfb	printf@val+1,w,c
  3045  00123E  A0D8               	btfss	status,0,c
  3046  001240  D022               	goto	l1740
  3047                           
  3048                           ;doprnt.c: 1307: break;
  3049  001242  2A22               	incf	printf@c,f,c
  3050  001244  D7EA               	goto	l1710
  3051  001246                     l1722:
  3052                           
  3053                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3054  001246  0E01               	movlw	1
  3055  001248  6E22               	movwf	printf@c,c
  3056  00124A                     l1724:
  3057  00124A  0E04               	movlw	4
  3058  00124C  1822               	xorwf	printf@c,w,c
  3059  00124E  B4D8               	btfsc	status,2,c
  3060  001250  D01A               	goto	l1740
  3061                           
  3062                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3063  001252  5022               	movf	printf@c,w,c
  3064  001254  0D02               	mullw	2
  3065  001256  0E1C               	movlw	low _hexpowers
  3066  001258  24F3               	addwf	prodl,w,c
  3067  00125A  6EF6               	movwf	tblptrl,c
  3068  00125C  0E10               	movlw	high _hexpowers
  3069  00125E  20F4               	addwfc	prodh,w,c
  3070  001260  6EF7               	movwf	tblptrh,c
  3071  001262                     	if	0	;There are less than 3 active tblptr bytes
  3072  001262                     	endif
  3073  001262  0009               	tblrd		*+
  3074  001264  50F5               	movf	tablat,w,c
  3075  001266  5C1D               	subwf	printf@val,w,c
  3076  001268  0009               	tblrd		*+
  3077  00126A  50F5               	movf	tablat,w,c
  3078  00126C  581E               	subwfb	printf@val+1,w,c
  3079  00126E  A0D8               	btfss	status,0,c
  3080  001270  D00A               	goto	l1740
  3081                           
  3082                           ;doprnt.c: 1318: break;
  3083  001272  2A22               	incf	printf@c,f,c
  3084  001274  D7EA               	goto	l1724
  3085  001276                     l1738:
  3086  001276  501F               	movf	printf@flag,w,c
  3087  001278  0B80               	andlw	128
  3088                           
  3089                           ; Switch size 1, requested type "space"
  3090                           ; Number of cases is 2, Range of values is 0 to 128
  3091                           ; switch strategies available:
  3092                           ; Name         Instructions Cycles
  3093                           ; simple_byte            7     4 (average)
  3094                           ;	Chosen strategy is simple_byte
  3095  00127A  0A00               	xorlw	0	; case 0
  3096  00127C  B4D8               	btfsc	status,2,c
  3097  00127E  D7CB               	goto	l1708
  3098  001280  0A80               	xorlw	128	; case 128
  3099  001282  B4D8               	btfsc	status,2,c
  3100  001284  D7E0               	goto	l1722
  3101  001286                     l1740:
  3102                           
  3103                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3104  001286  5020               	movf	printf@width,w,c
  3105  001288  1021               	iorwf	printf@width+1,w,c
  3106  00128A  B4D8               	btfsc	status,2,c
  3107  00128C  D009               	goto	l1746
  3108  00128E  C01F  F015         	movff	printf@flag,??_printf
  3109  001292  0E03               	movlw	3
  3110  001294  1615               	andwf	??_printf,f,c
  3111  001296  B4D8               	btfsc	status,2,c
  3112  001298  D003               	goto	l1746
  3113                           
  3114                           ;doprnt.c: 1346: width--;
  3115  00129A  0620               	decf	printf@width,f,c
  3116  00129C  A0D8               	btfss	status,0,c
  3117  00129E  0621               	decf	printf@width+1,f,c
  3118  0012A0                     l1746:
  3119                           
  3120                           ;doprnt.c: 1381: if(width > c)
  3121  0012A0  0E80               	movlw	128
  3122  0012A2  BE22               	btfsc	printf@c,7,c
  3123  0012A4  0E7F               	movlw	127
  3124  0012A6  6E15               	movwf	??_printf& (0+255),c
  3125  0012A8  5020               	movf	printf@width,w,c
  3126  0012AA  5C22               	subwf	printf@c,w,c
  3127  0012AC  5021               	movf	printf@width+1,w,c
  3128  0012AE  0A80               	xorlw	128
  3129  0012B0  5815               	subwfb	??_printf& (0+255),w,c
  3130  0012B2  B0D8               	btfsc	status,0,c
  3131  0012B4  D007               	goto	l1750
  3132                           
  3133                           ;doprnt.c: 1382: width -= c;
  3134  0012B6  5022               	movf	printf@c,w,c
  3135  0012B8  5E20               	subwf	printf@width,f,c
  3136  0012BA  0E00               	movlw	0
  3137  0012BC  BE22               	btfsc	printf@c,7,c
  3138  0012BE  0EFF               	movlw	255
  3139  0012C0  5A21               	subwfb	printf@width+1,f,c
  3140  0012C2  D004               	goto	l1752
  3141  0012C4                     l1750:
  3142                           
  3143                           ;doprnt.c: 1383: else
  3144                           ;doprnt.c: 1384: width = 0;
  3145  0012C4  0E00               	movlw	0
  3146  0012C6  6E21               	movwf	printf@width+1,c
  3147  0012C8  0E00               	movlw	0
  3148  0012CA  6E20               	movwf	printf@width,c
  3149  0012CC                     l1752:
  3150                           
  3151                           ;doprnt.c: 1387: if(flag & 0x04) {
  3152  0012CC  A41F               	btfss	printf@flag,2,c
  3153  0012CE  D014               	goto	l1764
  3154                           
  3155                           ;doprnt.c: 1392: if(flag & 0x03)
  3156  0012D0  C01F  F015         	movff	printf@flag,??_printf
  3157  0012D4  0E03               	movlw	3
  3158  0012D6  1615               	andwf	??_printf,f,c
  3159  0012D8  B4D8               	btfsc	status,2,c
  3160  0012DA  D003               	goto	l1758
  3161                           
  3162                           ;doprnt.c: 1393: (putch('-') );
  3163  0012DC  0E2D               	movlw	45
  3164  0012DE  EC86  F00E         	call	_putch
  3165  0012E2                     l1758:
  3166                           
  3167                           ;doprnt.c: 1415: if(width)
  3168  0012E2  5020               	movf	printf@width,w,c
  3169  0012E4  1021               	iorwf	printf@width+1,w,c
  3170  0012E6  B4D8               	btfsc	status,2,c
  3171  0012E8  D01E               	goto	l1774
  3172                           
  3173                           ;doprnt.c: 1417: (putch('0') );
  3174                           
  3175                           ;doprnt.c: 1416: do
  3176  0012EA  0E30               	movlw	48
  3177  0012EC  EC86  F00E         	call	_putch
  3178                           
  3179                           ;doprnt.c: 1418: while(--width);
  3180  0012F0  0620               	decf	printf@width,f,c
  3181  0012F2  A0D8               	btfss	status,0,c
  3182  0012F4  0621               	decf	printf@width+1,f,c
  3183  0012F6  D7F5               	goto	l1758
  3184  0012F8                     l1764:
  3185                           
  3186                           ;doprnt.c: 1422: {
  3187                           ;doprnt.c: 1424: if(width
  3188                           ;doprnt.c: 1428: )
  3189  0012F8  5020               	movf	printf@width,w,c
  3190  0012FA  1021               	iorwf	printf@width+1,w,c
  3191  0012FC  B4D8               	btfsc	status,2,c
  3192  0012FE  D00A               	goto	l1770
  3193  001300                     l1766:
  3194                           
  3195                           ;doprnt.c: 1430: (putch(' ') );
  3196  001300  0E20               	movlw	32
  3197  001302  EC86  F00E         	call	_putch
  3198                           
  3199                           ;doprnt.c: 1431: while(--width);
  3200  001306  0620               	decf	printf@width,f,c
  3201  001308  A0D8               	btfss	status,0,c
  3202  00130A  0621               	decf	printf@width+1,f,c
  3203  00130C  5020               	movf	printf@width,w,c
  3204  00130E  1021               	iorwf	printf@width+1,w,c
  3205  001310  A4D8               	btfss	status,2,c
  3206  001312  D7F6               	goto	l1766
  3207  001314                     l1770:
  3208                           
  3209                           ;doprnt.c: 1438: if(flag & 0x03)
  3210  001314  C01F  F015         	movff	printf@flag,??_printf
  3211  001318  0E03               	movlw	3
  3212  00131A  1615               	andwf	??_printf,f,c
  3213  00131C  B4D8               	btfsc	status,2,c
  3214  00131E  D003               	goto	l1774
  3215                           
  3216                           ;doprnt.c: 1439: (putch('-') );
  3217  001320  0E2D               	movlw	45
  3218  001322  EC86  F00E         	call	_putch
  3219  001326                     l1774:
  3220                           
  3221                           ;doprnt.c: 1469: }
  3222                           ;doprnt.c: 1472: prec = c;
  3223  001326  C022  F01C         	movff	printf@c,printf@prec
  3224                           
  3225                           ;doprnt.c: 1474: while(prec--) {
  3226  00132A  D050               	goto	l1788
  3227  00132C                     l1776:
  3228                           
  3229                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3230  00132C  501C               	movf	printf@prec,w,c
  3231  00132E  0D02               	mullw	2
  3232  001330  0E12               	movlw	low _dpowers
  3233  001332  24F3               	addwf	prodl,w,c
  3234  001334  6EF6               	movwf	tblptrl,c
  3235  001336  0E10               	movlw	high _dpowers
  3236  001338  20F4               	addwfc	prodh,w,c
  3237  00133A  6EF7               	movwf	tblptrh,c
  3238  00133C                     	if	0	;There are less than 3 active tblptr bytes
  3239  00133C                     	endif
  3240  00133C  0009               	tblrd		*+
  3241  00133E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3242  001342  000A               	tblrd		*-
  3243  001344  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3244  001348  C01D  F001         	movff	printf@val,___lwdiv@dividend
  3245  00134C  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3246  001350  EC16  F00D         	call	___lwdiv	;wreg free
  3247  001354  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3248  001358  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3249  00135C  0E00               	movlw	0
  3250  00135E  6E0B               	movwf	___lwmod@divisor+1,c
  3251  001360  0E0A               	movlw	10
  3252  001362  6E0A               	movwf	___lwmod@divisor,c
  3253  001364  ECAC  F00D         	call	___lwmod	;wreg free
  3254  001368  5008               	movf	?___lwmod,w,c
  3255  00136A  0F30               	addlw	48
  3256  00136C  6E22               	movwf	printf@c,c
  3257                           
  3258                           ;doprnt.c: 1491: break;
  3259  00136E  D02B               	goto	l1786
  3260  001370                     l1778:
  3261                           
  3262                           ;doprnt.c: 1499: {
  3263                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3264  001370  C01D  F001         	movff	printf@val,___lwdiv@dividend
  3265  001374  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3266  001378  501C               	movf	printf@prec,w,c
  3267  00137A  0D02               	mullw	2
  3268  00137C  0E1C               	movlw	low _hexpowers
  3269  00137E  24F3               	addwf	prodl,w,c
  3270  001380  6EF6               	movwf	tblptrl,c
  3271  001382  0E10               	movlw	high _hexpowers
  3272  001384  20F4               	addwfc	prodh,w,c
  3273  001386  6EF7               	movwf	tblptrh,c
  3274  001388                     	if	0	;There are less than 3 active tblptr bytes
  3275  001388                     	endif
  3276  001388  0009               	tblrd		*+
  3277  00138A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3278  00138E  000A               	tblrd		*-
  3279  001390  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3280  001394  EC16  F00D         	call	___lwdiv	;wreg free
  3281  001398  5001               	movf	?___lwdiv,w,c
  3282  00139A  0B0F               	andlw	15
  3283  00139C  6E19               	movwf	printf@idx,c
  3284                           
  3285                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3286  00139E  5019               	movf	printf@idx,w,c
  3287  0013A0  0D01               	mullw	1
  3288  0013A2  0E3E               	movlw	low STR_15
  3289  0013A4  24F3               	addwf	prodl,w,c
  3290  0013A6  6EF6               	movwf	tblptrl,c
  3291  0013A8  0E10               	movlw	high STR_15
  3292  0013AA  20F4               	addwfc	prodh,w,c
  3293  0013AC  6EF7               	movwf	tblptrh,c
  3294  0013AE                     	if	0	;There are less than 3 active tblptr bytes
  3295  0013AE                     	endif
  3296  0013AE  0008               	tblrd		*
  3297  0013B0  CFF5 F022          	movff	tablat,printf@c
  3298                           
  3299                           ;doprnt.c: 1523: }
  3300                           
  3301                           ;doprnt.c: 1508: }
  3302                           ;doprnt.c: 1510: break;
  3303  0013B4  D008               	goto	l1786
  3304  0013B6                     l1784:
  3305  0013B6  501F               	movf	printf@flag,w,c
  3306  0013B8  0B80               	andlw	128
  3307                           
  3308                           ; Switch size 1, requested type "space"
  3309                           ; Number of cases is 2, Range of values is 0 to 128
  3310                           ; switch strategies available:
  3311                           ; Name         Instructions Cycles
  3312                           ; simple_byte            7     4 (average)
  3313                           ;	Chosen strategy is simple_byte
  3314  0013BA  0A00               	xorlw	0	; case 0
  3315  0013BC  B4D8               	btfsc	status,2,c
  3316  0013BE  D7B6               	goto	l1776
  3317  0013C0  0A80               	xorlw	128	; case 128
  3318  0013C2  B4D8               	btfsc	status,2,c
  3319  0013C4  D7D5               	goto	l1778
  3320  0013C6                     l1786:
  3321                           
  3322                           ;doprnt.c: 1524: (putch(c) );
  3323  0013C6  5022               	movf	printf@c,w,c
  3324  0013C8  EC86  F00E         	call	_putch
  3325  0013CC                     l1788:
  3326  0013CC  061C               	decf	printf@prec,f,c
  3327  0013CE  281C               	incf	printf@prec,w,c
  3328  0013D0  A4D8               	btfss	status,2,c
  3329  0013D2  D7F1               	goto	l1784
  3330  0013D4                     l1790:
  3331  0013D4  C00D  FFF6         	movff	printf@f,tblptrl
  3332  0013D8  C00E  FFF7         	movff	printf@f+1,tblptrh
  3333  0013DC  4A0D               	infsnz	printf@f,f,c
  3334  0013DE  2A0E               	incf	printf@f+1,f,c
  3335  0013E0                     	if	0	;tblptru may be non-zero
  3336  0013E0                     	endif
  3337  0013E0                     	if	0	;tblptru may be non-zero
  3338  0013E0                     	endif
  3339  0013E0  0008               	tblrd		*
  3340  0013E2  CFF5 F022          	movff	tablat,printf@c
  3341  0013E6  5022               	movf	printf@c,w,c
  3342  0013E8  B4D8               	btfsc	status,2,c
  3343  0013EA  0012               	return	
  3344  0013EC  D67F               	goto	l1664
  3345  0013EE                     __end_of_printf:
  3346                           	opt stack 0
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           prodh	equ	0xFF4
  3352                           prodl	equ	0xFF3
  3353                           intcon2	equ	0xFF1
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           indf2	equ	0xFDF
  3357                           postinc2	equ	0xFDE
  3358                           postdec2	equ	0xFDD
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _putch *****************
  3364 ;; Defined at:
  3365 ;;		line 27 in file "lcd.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  data            1    wreg     unsigned char 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  data            1    2[COMRAM] unsigned char 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      void 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2, status,0, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;Total ram usage:        1 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    1
  3386 ;; This function calls:
  3387 ;;		_lcdNibble
  3388 ;; This function is called by:
  3389 ;;		_printf
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text19
  3394  001D0C                     __ptext19:
  3395                           	opt stack 0
  3396  001D0C                     _putch:
  3397                           	opt stack 28
  3398                           
  3399                           ;incstack = 0
  3400                           ;putch@data stored from wreg
  3401  001D0C  6E03               	movwf	putch@data,c
  3402                           
  3403                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  3404  001D0E  848C               	bsf	3980,2,c	;volatile
  3405                           
  3406                           ;lcd.c: 29: lcdNibble(data);
  3407  001D10  5003               	movf	putch@data,w,c
  3408  001D12  ECEB  F00C         	call	_lcdNibble
  3409  001D16  0012               	return		;funcret
  3410  001D18                     __end_of_putch:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           prodh	equ	0xFF4
  3417                           prodl	equ	0xFF3
  3418                           intcon2	equ	0xFF1
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           postdec2	equ	0xFDD
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _isdigit *****************
  3429 ;; Defined at:
  3430 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  c               1    wreg     unsigned char 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  c               1    2[COMRAM] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;		None               void
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;Total ram usage:        3 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_printf
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text20
  3458  001C9E                     __ptext20:
  3459                           	opt stack 0
  3460  001C9E                     _isdigit:
  3461                           	opt stack 29
  3462                           
  3463                           ;incstack = 0
  3464                           ;isdigit@c stored from wreg
  3465  001C9E  6E03               	movwf	isdigit@c,c
  3466  001CA0  0E00               	movlw	0
  3467  001CA2  6E02               	movwf	_isdigit$913,c
  3468  001CA4  0E3A               	movlw	58
  3469  001CA6  6003               	cpfslt	isdigit@c,c
  3470  001CA8  D005               	goto	l1584
  3471  001CAA  0E2F               	movlw	47
  3472  001CAC  6403               	cpfsgt	isdigit@c,c
  3473  001CAE  D002               	goto	l1584
  3474  001CB0  0E01               	movlw	1
  3475  001CB2  6E02               	movwf	_isdigit$913,c
  3476  001CB4                     l1584:
  3477  001CB4  C002  F001         	movff	_isdigit$913,??_isdigit
  3478  001CB8  3001               	rrcf	??_isdigit,w,c
  3479  001CBA  0012               	return	
  3480  001CBC                     __end_of_isdigit:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon2	equ	0xFF1
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function ___lwmod *****************
  3499 ;; Defined at:
  3500 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  dividend        2    7[COMRAM] unsigned int 
  3503 ;;  divisor         2    9[COMRAM] unsigned int 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  counter         1   11[COMRAM] unsigned char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  2    7[COMRAM] unsigned int 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3515 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;Total ram usage:        5 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; This function calls:
  3522 ;;		Nothing
  3523 ;; This function is called by:
  3524 ;;		_printf
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text21
  3529  001B58                     __ptext21:
  3530                           	opt stack 0
  3531  001B58                     ___lwmod:
  3532                           	opt stack 29
  3533                           
  3534                           ;incstack = 0
  3535  001B58  500A               	movf	___lwmod@divisor,w,c
  3536  001B5A  100B               	iorwf	___lwmod@divisor+1,w,c
  3537  001B5C  B4D8               	btfsc	status,2,c
  3538  001B5E  D018               	goto	l785
  3539  001B60  0E01               	movlw	1
  3540  001B62  6E0C               	movwf	___lwmod@counter,c
  3541  001B64  D004               	goto	l1644
  3542  001B66                     l1642:
  3543  001B66  90D8               	bcf	status,0,c
  3544  001B68  360A               	rlcf	___lwmod@divisor,f,c
  3545  001B6A  360B               	rlcf	___lwmod@divisor+1,f,c
  3546  001B6C  2A0C               	incf	___lwmod@counter,f,c
  3547  001B6E                     l1644:
  3548  001B6E  AE0B               	btfss	___lwmod@divisor+1,7,c
  3549  001B70  D7FA               	goto	l1642
  3550  001B72                     l1646:
  3551  001B72  500A               	movf	___lwmod@divisor,w,c
  3552  001B74  5C08               	subwf	___lwmod@dividend,w,c
  3553  001B76  500B               	movf	___lwmod@divisor+1,w,c
  3554  001B78  5809               	subwfb	___lwmod@dividend+1,w,c
  3555  001B7A  A0D8               	btfss	status,0,c
  3556  001B7C  D004               	goto	l1650
  3557  001B7E  500A               	movf	___lwmod@divisor,w,c
  3558  001B80  5E08               	subwf	___lwmod@dividend,f,c
  3559  001B82  500B               	movf	___lwmod@divisor+1,w,c
  3560  001B84  5A09               	subwfb	___lwmod@dividend+1,f,c
  3561  001B86                     l1650:
  3562  001B86  90D8               	bcf	status,0,c
  3563  001B88  320B               	rrcf	___lwmod@divisor+1,f,c
  3564  001B8A  320A               	rrcf	___lwmod@divisor,f,c
  3565  001B8C  2E0C               	decfsz	___lwmod@counter,f,c
  3566  001B8E  D7F1               	goto	l1646
  3567  001B90                     l785:
  3568  001B90  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3569  001B94  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3570  001B98  0012               	return		;funcret
  3571  001B9A                     __end_of___lwmod:
  3572                           	opt stack 0
  3573                           tblptru	equ	0xFF8
  3574                           tblptrh	equ	0xFF7
  3575                           tblptrl	equ	0xFF6
  3576                           tablat	equ	0xFF5
  3577                           prodh	equ	0xFF4
  3578                           prodl	equ	0xFF3
  3579                           intcon2	equ	0xFF1
  3580                           postinc0	equ	0xFEE
  3581                           wreg	equ	0xFE8
  3582                           indf2	equ	0xFDF
  3583                           postinc2	equ	0xFDE
  3584                           postdec2	equ	0xFDD
  3585                           fsr2h	equ	0xFDA
  3586                           fsr2l	equ	0xFD9
  3587                           status	equ	0xFD8
  3588                           
  3589 ;; *************** function ___lwdiv *****************
  3590 ;; Defined at:
  3591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  dividend        2    0[COMRAM] unsigned int 
  3594 ;;  divisor         2    2[COMRAM] unsigned int 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  quotient        2    4[COMRAM] unsigned int 
  3597 ;;  counter         1    6[COMRAM] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  2    0[COMRAM] unsigned int 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;Total ram usage:        7 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; This function calls:
  3614 ;;		Nothing
  3615 ;; This function is called by:
  3616 ;;		_printf
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text22
  3621  001A2C                     __ptext22:
  3622                           	opt stack 0
  3623  001A2C                     ___lwdiv:
  3624                           	opt stack 29
  3625                           
  3626                           ;incstack = 0
  3627  001A2C  0E00               	movlw	0
  3628  001A2E  6E06               	movwf	___lwdiv@quotient+1,c
  3629  001A30  0E00               	movlw	0
  3630  001A32  6E05               	movwf	___lwdiv@quotient,c
  3631  001A34  5003               	movf	___lwdiv@divisor,w,c
  3632  001A36  1004               	iorwf	___lwdiv@divisor+1,w,c
  3633  001A38  B4D8               	btfsc	status,2,c
  3634  001A3A  D01C               	goto	l775
  3635  001A3C  0E01               	movlw	1
  3636  001A3E  6E07               	movwf	___lwdiv@counter,c
  3637  001A40  D004               	goto	l1624
  3638  001A42                     l1622:
  3639  001A42  90D8               	bcf	status,0,c
  3640  001A44  3603               	rlcf	___lwdiv@divisor,f,c
  3641  001A46  3604               	rlcf	___lwdiv@divisor+1,f,c
  3642  001A48  2A07               	incf	___lwdiv@counter,f,c
  3643  001A4A                     l1624:
  3644  001A4A  AE04               	btfss	___lwdiv@divisor+1,7,c
  3645  001A4C  D7FA               	goto	l1622
  3646  001A4E                     l1626:
  3647  001A4E  90D8               	bcf	status,0,c
  3648  001A50  3605               	rlcf	___lwdiv@quotient,f,c
  3649  001A52  3606               	rlcf	___lwdiv@quotient+1,f,c
  3650  001A54  5003               	movf	___lwdiv@divisor,w,c
  3651  001A56  5C01               	subwf	___lwdiv@dividend,w,c
  3652  001A58  5004               	movf	___lwdiv@divisor+1,w,c
  3653  001A5A  5802               	subwfb	___lwdiv@dividend+1,w,c
  3654  001A5C  A0D8               	btfss	status,0,c
  3655  001A5E  D005               	goto	l1634
  3656  001A60  5003               	movf	___lwdiv@divisor,w,c
  3657  001A62  5E01               	subwf	___lwdiv@dividend,f,c
  3658  001A64  5004               	movf	___lwdiv@divisor+1,w,c
  3659  001A66  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3660  001A68  8005               	bsf	___lwdiv@quotient,0,c
  3661  001A6A                     l1634:
  3662  001A6A  90D8               	bcf	status,0,c
  3663  001A6C  3204               	rrcf	___lwdiv@divisor+1,f,c
  3664  001A6E  3203               	rrcf	___lwdiv@divisor,f,c
  3665  001A70  2E07               	decfsz	___lwdiv@counter,f,c
  3666  001A72  D7ED               	goto	l1626
  3667  001A74                     l775:
  3668  001A74  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3669  001A78  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3670  001A7C  0012               	return		;funcret
  3671  001A7E                     __end_of___lwdiv:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon2	equ	0xFF1
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _lcdInst *****************
  3690 ;; Defined at:
  3691 ;;		line 22 in file "lcd.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  data            1    wreg     unsigned char 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  data            1    2[COMRAM] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;Total ram usage:        1 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    1
  3712 ;; This function calls:
  3713 ;;		_lcdNibble
  3714 ;; This function is called by:
  3715 ;;		_main
  3716 ;;		_initLCD
  3717 ;;		_homescreen
  3718 ;;		_displayLogs
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text23
  3723  001D18                     __ptext23:
  3724                           	opt stack 0
  3725  001D18                     _lcdInst:
  3726                           	opt stack 29
  3727                           
  3728                           ;incstack = 0
  3729                           ;lcdInst@data stored from wreg
  3730  001D18  6E03               	movwf	lcdInst@data,c
  3731                           
  3732                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  3733  001D1A  948C               	bcf	3980,2,c	;volatile
  3734                           
  3735                           ;lcd.c: 24: lcdNibble(data);
  3736  001D1C  5003               	movf	lcdInst@data,w,c
  3737  001D1E  ECEB  F00C         	call	_lcdNibble
  3738  001D22  0012               	return		;funcret
  3739  001D24                     __end_of_lcdInst:
  3740                           	opt stack 0
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           prodh	equ	0xFF4
  3746                           prodl	equ	0xFF3
  3747                           intcon2	equ	0xFF1
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           indf2	equ	0xFDF
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _lcdNibble *****************
  3758 ;; Defined at:
  3759 ;;		line 32 in file "lcd.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;  data            1    wreg     unsigned char 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  data            1    1[COMRAM] unsigned char 
  3764 ;;  temp            1    0[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_lcdInst
  3784 ;;		_putch
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text24
  3789  0019D6                     __ptext24:
  3790                           	opt stack 0
  3791  0019D6                     _lcdNibble:
  3792                           	opt stack 28
  3793                           
  3794                           ;incstack = 0
  3795                           ;lcdNibble@data stored from wreg
  3796  0019D6  6E02               	movwf	lcdNibble@data,c
  3797                           
  3798                           ;lcd.c: 34: char temp = data & 0xF0;
  3799  0019D8  5002               	movf	lcdNibble@data,w,c
  3800  0019DA  0BF0               	andlw	240
  3801  0019DC  6E01               	movwf	lcdNibble@temp,c
  3802                           
  3803                           ;lcd.c: 35: LATD = LATD & 0x0F;
  3804  0019DE  508C               	movf	3980,w,c	;volatile
  3805  0019E0  0B0F               	andlw	15
  3806  0019E2  6E8C               	movwf	3980,c	;volatile
  3807                           
  3808                           ;lcd.c: 36: LATD = temp | LATD;
  3809  0019E4  5001               	movf	lcdNibble@temp,w,c
  3810  0019E6  108C               	iorwf	3980,w,c	;volatile
  3811  0019E8  6E8C               	movwf	3980,c	;volatile
  3812                           
  3813                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  3814  0019EA  968C               	bcf	3980,3,c	;volatile
  3815                           
  3816                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3817  0019EC  0E42               	movlw	66
  3818  0019EE                     u1297:
  3819  0019EE  2EE8               	decfsz	wreg,f,c
  3820  0019F0  D7FE               	bra	u1297
  3821  0019F2  D000               	nop2	
  3822                           
  3823                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  3824  0019F4  868C               	bsf	3980,3,c	;volatile
  3825                           
  3826                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3827  0019F6  0E42               	movlw	66
  3828  0019F8                     u1307:
  3829  0019F8  2EE8               	decfsz	wreg,f,c
  3830  0019FA  D7FE               	bra	u1307
  3831  0019FC  D000               	nop2	
  3832                           
  3833                           ;lcd.c: 43: data = data << 4;
  3834  0019FE  3802               	swapf	lcdNibble@data,w,c
  3835  001A00  0BF0               	andlw	240
  3836  001A02  6E02               	movwf	lcdNibble@data,c
  3837                           
  3838                           ;lcd.c: 45: temp = data & 0xF0;
  3839  001A04  5002               	movf	lcdNibble@data,w,c
  3840  001A06  0BF0               	andlw	240
  3841  001A08  6E01               	movwf	lcdNibble@temp,c
  3842                           
  3843                           ;lcd.c: 46: LATD = LATD & 0x0F;
  3844  001A0A  508C               	movf	3980,w,c	;volatile
  3845  001A0C  0B0F               	andlw	15
  3846  001A0E  6E8C               	movwf	3980,c	;volatile
  3847                           
  3848                           ;lcd.c: 47: LATD = temp | LATD;
  3849  001A10  5001               	movf	lcdNibble@temp,w,c
  3850  001A12  108C               	iorwf	3980,w,c	;volatile
  3851  001A14  6E8C               	movwf	3980,c	;volatile
  3852                           
  3853                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  3854  001A16  968C               	bcf	3980,3,c	;volatile
  3855                           
  3856                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3857  001A18  0E42               	movlw	66
  3858  001A1A                     u1317:
  3859  001A1A  2EE8               	decfsz	wreg,f,c
  3860  001A1C  D7FE               	bra	u1317
  3861  001A1E  D000               	nop2	
  3862                           
  3863                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  3864  001A20  868C               	bsf	3980,3,c	;volatile
  3865                           
  3866                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3867  001A22  0E42               	movlw	66
  3868  001A24                     u1327:
  3869  001A24  2EE8               	decfsz	wreg,f,c
  3870  001A26  D7FE               	bra	u1327
  3871  001A28  D000               	nop2	
  3872  001A2A  0012               	return		;funcret
  3873  001A2C                     __end_of_lcdNibble:
  3874                           	opt stack 0
  3875                           tblptru	equ	0xFF8
  3876                           tblptrh	equ	0xFF7
  3877                           tblptrl	equ	0xFF6
  3878                           tablat	equ	0xFF5
  3879                           prodh	equ	0xFF4
  3880                           prodl	equ	0xFF3
  3881                           intcon2	equ	0xFF1
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           postdec2	equ	0xFDD
  3887                           fsr2h	equ	0xFDA
  3888                           fsr2l	equ	0xFD9
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _keycheck *****************
  3892 ;; Defined at:
  3893 ;;		line 24 in file "main.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;		None
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;		None
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, status,2, status,0
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;Total ram usage:        0 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; This function calls:
  3914 ;;		Nothing
  3915 ;; This function is called by:
  3916 ;;		_displayLogs
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text25
  3921  001CE6                     __ptext25:
  3922                           	opt stack 0
  3923  001CE6                     _keycheck:
  3924                           	opt stack 29
  3925  001CE6                     l99:
  3926  001CE6  A281               	btfss	3969,1,c	;volatile
  3927  001CE8  D7FE               	goto	l99
  3928                           
  3929                           ;main.c: 28: }
  3930                           ;main.c: 29: keypress = (PORTB & 0xF0)>>4;
  3931  001CEA  3881               	swapf	3969,w,c	;volatile
  3932  001CEC  0B0F               	andlw	15
  3933  001CEE  0B0F               	andlw	15
  3934  001CF0  6E3D               	movwf	_keypress,c	;volatile
  3935  001CF2                     l102:
  3936  001CF2  B281               	btfsc	3969,1,c	;volatile
  3937  001CF4  D7FE               	goto	l102
  3938                           
  3939                           ;main.c: 32: }
  3940                           ;main.c: 33: __nop();
  3941  001CF6  F000               	nop	
  3942                           
  3943                           ;main.c: 34: return;
  3944  001CF8  0012               	return		;funcret
  3945  001CFA                     __end_of_keycheck:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           intcon2	equ	0xFF1
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _eepromRead *****************
  3964 ;; Defined at:
  3965 ;;		line 30 in file "interface.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  address         1    wreg     char 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  address         1    2[COMRAM] char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      char 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;Total ram usage:        3 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; This function calls:
  3986 ;;		Nothing
  3987 ;; This function is called by:
  3988 ;;		_displayLogs
  3989 ;;		_updateEEPROM
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text26
  3994  001C08                     __ptext26:
  3995                           	opt stack 0
  3996  001C08                     _eepromRead:
  3997                           	opt stack 29
  3998                           
  3999                           ;incstack = 0
  4000                           ;eepromRead@address stored from wreg
  4001  001C08  6E03               	movwf	eepromRead@address,c
  4002                           
  4003                           ;interface.c: 32: EEADRH = (signed char)(address >> 8);
  4004  001C0A  C003  F001         	movff	eepromRead@address,??_eepromRead
  4005  001C0E  0E08               	movlw	8
  4006  001C10  6E02               	movwf	(??_eepromRead+1)& (0+255),c
  4007  001C12                     u425:
  4008  001C12  3401               	rlcf	??_eepromRead,w,c
  4009  001C14  3201               	rrcf	??_eepromRead,f,c
  4010  001C16  2E02               	decfsz	(??_eepromRead+1)& (0+255),f,c
  4011  001C18  D7FC               	goto	u425
  4012  001C1A  5001               	movf	??_eepromRead,w,c
  4013  001C1C  6EAA               	movwf	4010,c	;volatile
  4014                           
  4015                           ;interface.c: 33: EEADR = (signed char)address;
  4016  001C1E  C003  FFA9         	movff	eepromRead@address,4009	;volatile
  4017                           
  4018                           ;interface.c: 35: EECON1bits.EEPGD = 0;
  4019  001C22  9EA6               	bcf	4006,7,c	;volatile
  4020                           
  4021                           ;interface.c: 36: EECON1bits.CFGS = 0;
  4022  001C24  9CA6               	bcf	4006,6,c	;volatile
  4023                           
  4024                           ;interface.c: 37: EECON1bits.RD = 1;
  4025  001C26  80A6               	bsf	4006,0,c	;volatile
  4026  001C28                     l270:
  4027  001C28  B0A6               	btfsc	4006,0,c	;volatile
  4028  001C2A  D7FE               	goto	l270
  4029                           
  4030                           ;interface.c: 43: return EEDATA;
  4031  001C2C  50A8               	movf	4008,w,c	;volatile
  4032  001C2E  0012               	return	
  4033  001C30                     __end_of_eepromRead:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon2	equ	0xFF1
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _backlogTest *****************
  4052 ;; Defined at:
  4053 ;;		line 3 in file "logic.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  blockedStart    2    6[COMRAM] int 
  4056 ;;  motorStatus     2    8[COMRAM] int 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;		None
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  2    6[COMRAM] int 
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;Total ram usage:        8 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    1
  4075 ;; This function calls:
  4076 ;;		___wmul
  4077 ;; This function is called by:
  4078 ;;		_main
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text27
  4083  0017C6                     __ptext27:
  4084                           	opt stack 0
  4085  0017C6                     _backlogTest:
  4086                           	opt stack 29
  4087                           
  4088                           ;logic.c: 4: if (ADRESH == 0){
  4089                           
  4090                           ;incstack = 0
  4091  0017C6  50C4               	movf	4036,w,c	;volatile
  4092  0017C8  A4D8               	btfss	status,2,c
  4093  0017CA  D005               	goto	l1908
  4094                           
  4095                           ;logic.c: 5: return 1;
  4096  0017CC  0E00               	movlw	0
  4097  0017CE  6E08               	movwf	?_backlogTest+1,c
  4098  0017D0  0E01               	movlw	1
  4099  0017D2  6E07               	movwf	?_backlogTest,c
  4100                           
  4101                           ;logic.c: 6: }
  4102  0017D4  0012               	return	
  4103  0017D6                     l1908:
  4104                           
  4105                           ;logic.c: 7: else{
  4106                           ;logic.c: 8: if (time[0] + 60*time[1] + 3600*time[2] - blockedStart > 3){
  4107  0017D6  C007  F00B         	movff	backlogTest@blockedStart,??_backlogTest
  4108  0017DA  C008  F00C         	movff	backlogTest@blockedStart+1,??_backlogTest+1
  4109  0017DE  1E0B               	comf	??_backlogTest,f,c
  4110  0017E0  1E0C               	comf	??_backlogTest+1,f,c
  4111  0017E2  4A0B               	infsnz	??_backlogTest,f,c
  4112  0017E4  2A0C               	incf	??_backlogTest+1,f,c
  4113  0017E6  C038  F001         	movff	_time+2,___wmul@multiplier
  4114  0017EA  6A02               	clrf	___wmul@multiplier+1,c
  4115  0017EC  0E0E               	movlw	14
  4116  0017EE  6E04               	movwf	___wmul@multiplicand+1,c
  4117  0017F0  0E10               	movlw	16
  4118  0017F2  6E03               	movwf	___wmul@multiplicand,c
  4119  0017F4  EC2B  F00E         	call	___wmul	;wreg free
  4120  0017F8  5037               	movf	_time+1,w,c
  4121  0017FA  0D3C               	mullw	60
  4122  0017FC  5036               	movf	_time,w,c
  4123  0017FE  6E0D               	movwf	(??_backlogTest+2)& (0+255),c
  4124  001800  6A0E               	clrf	(??_backlogTest+3)& (0+255),c
  4125  001802  50F3               	movf	prodl,w,c
  4126  001804  260D               	addwf	??_backlogTest+2,f,c
  4127  001806  50F4               	movf	prodh,w,c
  4128  001808  220E               	addwfc	??_backlogTest+3,f,c
  4129  00180A  5001               	movf	?___wmul,w,c
  4130  00180C  260D               	addwf	??_backlogTest+2,f,c
  4131  00180E  5002               	movf	?___wmul+1,w,c
  4132  001810  220E               	addwfc	??_backlogTest+3,f,c
  4133  001812  500B               	movf	??_backlogTest,w,c
  4134  001814  260D               	addwf	??_backlogTest+2,f,c
  4135  001816  500C               	movf	??_backlogTest+1,w,c
  4136  001818  220E               	addwfc	??_backlogTest+3,f,c
  4137  00181A  BE0E               	btfsc	??_backlogTest+3,7,c
  4138  00181C  D00B               	goto	l1916
  4139  00181E  500E               	movf	??_backlogTest+3,w,c
  4140  001820  E104               	bnz	u1060
  4141  001822  0E04               	movlw	4
  4142  001824  5C0D               	subwf	??_backlogTest+2,w,c
  4143  001826  A0D8               	btfss	status,0,c
  4144  001828  D005               	goto	l1916
  4145  00182A                     u1060:
  4146                           
  4147                           ;logic.c: 10: return 1;
  4148  00182A  0E00               	movlw	0
  4149  00182C  6E08               	movwf	?_backlogTest+1,c
  4150  00182E  0E01               	movlw	1
  4151  001830  6E07               	movwf	?_backlogTest,c
  4152                           
  4153                           ;logic.c: 11: }
  4154  001832  0012               	return	
  4155  001834                     l1916:
  4156                           
  4157                           ;logic.c: 12: else{
  4158                           ;logic.c: 14: return 0;
  4159  001834  0E00               	movlw	0
  4160  001836  6E08               	movwf	?_backlogTest+1,c
  4161  001838  0E00               	movlw	0
  4162  00183A  6E07               	movwf	?_backlogTest,c
  4163  00183C  0012               	return	
  4164  00183E                     __end_of_backlogTest:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon2	equ	0xFF1
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           postdec2	equ	0xFDD
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function ___wmul *****************
  4183 ;; Defined at:
  4184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  multiplier      2    0[COMRAM] unsigned int 
  4187 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  product         2    4[COMRAM] unsigned int 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  2    0[COMRAM] unsigned int 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0, prodl, prodh
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;Total ram usage:        6 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_main
  4209 ;;		_backlogTest
  4210 ;;		_timePassed
  4211 ;;		_printf
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text28
  4216  001C56                     __ptext28:
  4217                           	opt stack 0
  4218  001C56                     ___wmul:
  4219                           	opt stack 29
  4220                           
  4221                           ;incstack = 0
  4222  001C56  5001               	movf	___wmul@multiplier,w,c
  4223  001C58  0203               	mulwf	___wmul@multiplicand,c
  4224  001C5A  CFF3 F005          	movff	prodl,___wmul@product
  4225  001C5E  CFF4 F006          	movff	prodh,___wmul@product+1
  4226  001C62  5001               	movf	___wmul@multiplier,w,c
  4227  001C64  0204               	mulwf	___wmul@multiplicand+1,c
  4228  001C66  50F3               	movf	prodl,w,c
  4229  001C68  2606               	addwf	___wmul@product+1,f,c
  4230  001C6A  5002               	movf	___wmul@multiplier+1,w,c
  4231  001C6C  0203               	mulwf	___wmul@multiplicand,c
  4232  001C6E  50F3               	movf	prodl,w,c
  4233  001C70  2606               	addwf	___wmul@product+1,f,c
  4234  001C72  C005  F001         	movff	___wmul@product,?___wmul
  4235  001C76  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4236  001C7A  0012               	return	
  4237  001C7C                     __end_of___wmul:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon2	equ	0xFF1
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _PWM1off *****************
  4256 ;; Defined at:
  4257 ;;		line 19 in file "motors.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      void 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;Total ram usage:        0 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_main
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text29
  4285  001D2E                     __ptext29:
  4286                           	opt stack 0
  4287  001D2E                     _PWM1off:
  4288                           	opt stack 30
  4289                           
  4290                           ;motors.c: 20: CCP1CONbits.DC1B0 = 0;
  4291                           
  4292                           ;incstack = 0
  4293  001D2E  98BD               	bcf	4029,4,c	;volatile
  4294                           
  4295                           ;motors.c: 21: CCP1CONbits.DC1B1 = 0;
  4296  001D30  9ABD               	bcf	4029,5,c	;volatile
  4297                           
  4298                           ;motors.c: 22: CCPR1L = 0;
  4299  001D32  0E00               	movlw	0
  4300  001D34  6EBE               	movwf	4030,c	;volatile
  4301  001D36  0012               	return		;funcret
  4302  001D38                     __end_of_PWM1off:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon2	equ	0xFF1
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           indf2	equ	0xFDF
  4314                           postinc2	equ	0xFDE
  4315                           postdec2	equ	0xFDD
  4316                           fsr2h	equ	0xFDA
  4317                           fsr2l	equ	0xFD9
  4318                           status	equ	0xFD8
  4319                           
  4320 ;; *************** function _PWM1 *****************
  4321 ;; Defined at:
  4322 ;;		line 5 in file "motors.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;  duty            2    0[COMRAM] int 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;		None
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, status,2, status,0
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;Total ram usage:        4 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_main
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text30
  4350  001AC8                     __ptext30:
  4351                           	opt stack 0
  4352  001AC8                     _PWM1:
  4353                           	opt stack 30
  4354                           
  4355                           ;motors.c: 13: CCP1CONbits.DC1B0 = duty & 1;
  4356                           
  4357                           ;incstack = 0
  4358  001AC8  C001  F003         	movff	PWM1@duty,??_PWM1
  4359  001ACC  0E01               	movlw	1
  4360  001ACE  1603               	andwf	??_PWM1,f,c
  4361  001AD0  3A03               	swapf	??_PWM1,f,c
  4362  001AD2  50BD               	movf	4029,w,c	;volatile
  4363  001AD4  1803               	xorwf	??_PWM1,w,c
  4364  001AD6  0BEF               	andlw	-17
  4365  001AD8  1803               	xorwf	??_PWM1,w,c
  4366  001ADA  6EBD               	movwf	4029,c	;volatile
  4367                           
  4368                           ;motors.c: 14: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  4369  001ADC  3402               	rlcf	PWM1@duty+1,w,c
  4370  001ADE  3002               	rrcf	PWM1@duty+1,w,c
  4371  001AE0  6E04               	movwf	(??_PWM1+1)& (0+255),c
  4372  001AE2  3001               	rrcf	PWM1@duty,w,c
  4373  001AE4  6E03               	movwf	??_PWM1& (0+255),c
  4374  001AE6  0E01               	movlw	1
  4375  001AE8  1603               	andwf	??_PWM1,f,c
  4376  001AEA  3A03               	swapf	??_PWM1,f,c
  4377  001AEC  4603               	rlncf	??_PWM1,f,c
  4378  001AEE  50BD               	movf	4029,w,c	;volatile
  4379  001AF0  1803               	xorwf	??_PWM1,w,c
  4380  001AF2  0BDF               	andlw	-33
  4381  001AF4  1803               	xorwf	??_PWM1,w,c
  4382  001AF6  6EBD               	movwf	4029,c	;volatile
  4383                           
  4384                           ;motors.c: 15: CCPR1L = (duty >> 2);
  4385  001AF8  C001  F003         	movff	PWM1@duty,??_PWM1
  4386  001AFC  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  4387  001B00  3404               	rlcf	??_PWM1+1,w,c
  4388  001B02  3204               	rrcf	??_PWM1+1,f,c
  4389  001B04  3203               	rrcf	??_PWM1,f,c
  4390  001B06  3404               	rlcf	??_PWM1+1,w,c
  4391  001B08  3204               	rrcf	??_PWM1+1,f,c
  4392  001B0A  3203               	rrcf	??_PWM1,f,c
  4393  001B0C  5003               	movf	??_PWM1,w,c
  4394  001B0E  6EBE               	movwf	4030,c	;volatile
  4395  001B10  0012               	return		;funcret
  4396  001B12                     __end_of_PWM1:
  4397                           	opt stack 0
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           intcon2	equ	0xFF1
  4405                           postinc0	equ	0xFEE
  4406                           wreg	equ	0xFE8
  4407                           indf2	equ	0xFDF
  4408                           postinc2	equ	0xFDE
  4409                           postdec2	equ	0xFDD
  4410                           fsr2h	equ	0xFDA
  4411                           fsr2l	equ	0xFD9
  4412                           status	equ	0xFD8
  4413                           tblptru	equ	0xFF8
  4414                           tblptrh	equ	0xFF7
  4415                           tblptrl	equ	0xFF6
  4416                           tablat	equ	0xFF5
  4417                           prodh	equ	0xFF4
  4418                           prodl	equ	0xFF3
  4419                           intcon2	equ	0xFF1
  4420                           postinc0	equ	0xFEE
  4421                           wreg	equ	0xFE8
  4422                           indf2	equ	0xFDF
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429                           	psect	rparam
  4430  0000                     tblptru	equ	0xFF8
  4431                           tblptrh	equ	0xFF7
  4432                           tblptrl	equ	0xFF6
  4433                           tablat	equ	0xFF5
  4434                           prodh	equ	0xFF4
  4435                           prodl	equ	0xFF3
  4436                           intcon2	equ	0xFF1
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8


Data Sizes:
    Strings     181
    Constant    42
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     53      61
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_14(CODE[15]), STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), 
		 -> STR_10(CODE[14]), STR_9(CODE[16]), STR_8(CODE[8]), STR_7(CODE[15]), 
		 -> STR_6(CODE[8]), STR_5(CODE[16]), STR_4(CODE[19]), STR_3(CODE[5]), 
		 -> STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLogs
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _updateEEPROM->_timePassed
    _eepromWrite->_eepromRead
    _timePassed->___wmul
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _backlogTest->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   17269
                                             35 COMRAM    18    18      0
                               _PWM1
                            _PWM1off
                             ___wmul
                        _backlogTest
                        _displayLogs
                         _homescreen
                         _initialize
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _timePassed
                       _updateEEPROM
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     504
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateEEPROM                                         2     0      2     438
                                             12 COMRAM     2     0      2
                         _eepromRead
                        _eepromWrite
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     322
                                              3 COMRAM     4     3      1
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _timePassed                                           6     4      2    1227
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     466
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    3901
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    3931
                                             34 COMRAM     1     1      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3811
                                             12 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _backlogTest                                          8     4      4    1333
                                              6 COMRAM     8     4      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1055
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   ___wmul
   _backlogTest
     ___wmul
   _displayLogs
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _timePassed
     ___wmul
   _updateEEPROM
     _eepromRead
     _eepromWrite
       _eepromRead (ARG)
     _timePassed (ARG)
       ___wmul
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     35      3D       1       48.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3D      34        0.0%
DATA                 0      0      3D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 01 15:39:53 2017

             ?_displayLogs 0001                         l99 1CE6        ___wmul@multiplicand 0003  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l102 1CF2                        l108 1CE2                        l109 1CDE  
                      l330 11CE                        l270 1C28                        l193 1CFA  
                      l276 1BC8                        l722 17B4                        l775 1A74  
                      l785 1B90               __CFG_CPB$OFF 000000                        u400 1C4E  
                      _PR2 000FCB                        _PEN 007E2A                        u425 1C12  
             __CFG_CPD$OFF 000000                        _SEN 007E28                        u775 19AA  
                      prod 000FF3                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000       __size_of_backlogTest 0078                       l2004 1566  
                     l2022 15E6                       l1312 1C8A                       l2024 1616  
                     l2008 159A                       l1314 1C98                       l1270 1C50  
                     l1600 1766                       l1602 1772                       l1612 17A6  
                     l1604 1776                       l1622 1A42                       l1710 121A  
                     l1624 1A4A                       l1704 11FC                       l1634 1A6A  
                     l1626 1A4E                       l1650 1B86                       l1642 1B66  
                     l1722 1246                       l1644 1B6E                       l1724 124A  
                     l1740 1286                       l1708 1216                       l1646 1B72  
                     l1750 12C4                       l1670 110A                       l1584 1CB4  
                     l1752 12CC                       l1680 113E                       l1664 10EC  
                     l1770 1314                       l1746 12A0                       l1738 1276  
                     l1674 1110                       l1916 1834                       l1908 17D6  
                     l1764 12F8                       l1692 11A0                       l1668 10FC  
                     l1844 18E8                       l1766 1300                       l1774 1326  
                     l1758 12E2                       l1790 13D4                       l1854 190C  
                     l1950 1432                       l1776 132C                       l1784 13B6  
                     l1688 119C                       l1848 18F0                       l1778 1370  
                     l1786 13C6                       l1788 13CC                       l1982 14DC  
                     l1994 150A                       l1986 14F4                       _ADFM 007E07  
                     STR_1 107F                       STR_2 108F                       STR_3 10DB  
                     STR_4 102B                       STR_5 104F                       STR_6 10D3  
                     STR_7 10AE                       STR_8 10CB                       STR_9 106F  
                     u1015 1BA4                       u1130 15B6                       u1060 182A  
                     u1207 1466                       u1217 162A                       u1307 19F8  
                     u1227 164A                       u1317 1A1A                       u1237 1C90  
                     _LATA 000F89                       _LATB 000F8A                       u1327 1A24  
                     u1247 1B18                       _LATC 000F8B                       _LATD 000F8C  
                     u1257 1B4C                       _LATE 000F8D                       u1267 168A  
                     u1277 16D0                       u1197 1428                       u1287 1716  
                     u1297 19EE                       _RCEN 007E2B                       _PWM1 1AC8  
                     _RSEN 007E29            __end_of_PWM1off 1D38                       _main 13EE  
                     _keys 1001                       _time 0036                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                main@standby 0032  
                     prodh 000FF4               main@canCheck 002C                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ?_PWM1 0001           ?_I2C_Master_Init 000E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    _EEADR 000FA9                      STR_10 10BD                      STR_11 106F  
                    STR_12 105F                      STR_13 106F                      STR_14 109F  
                    STR_15 103E            __end_of___lldiv 17C6                      _T2CON 000FCA  
          __end_of___lwdiv 1A7E            __end_of___lwmod 1B9A                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
          timePassed@start 0007              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1D24  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 1C9E            __end_of_initLCD 1B58             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers 101C               main@sodaLoad 002A            __end_of_isdigit 1CBC  
                    _putch 1D0C                      main@s 0026                      tablat 000FF5  
                    status 000FD8               main@soupLoad 0028             __CFG_PBADEN$ON 000000  
             __end_of_PWM1 1B12            __initialization 1CBC               __end_of_main 167E  
             __end_of_keys 1012    backlogTest@blockedStart 0007                     ??_PWM1 0003  
                   ??_main 0024              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0002         ??_I2C_Master_Start 0002                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0004                  ??_PWM1off 0001  
                   _ADRESH 000FC4                     _EEADRH 000FAA                     _EEDATA 000FA8  
                   _CCPR1L 000FBE                     _EECON2 000FA7                     ?_putch 0001  
                   _CVRCON 000FB5                     _OSCCON 000FD3                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038                     ___wmul 1C56  
           __CFG_STVREN$ON 000000                  ??___lldiv 0009                  ??___lwdiv 0005  
                ??___lwmod 000C           __end_of_keycheck 1CFA                     clear_0 1CC2  
          eepromWrite@data 0004           __end_of_currtime 102B                  ??_lcdInst 0003  
                   _printf 10E2       __size_of_displayLogs 00C6                     main@dc 0034  
                ??_readADC 0001                  ??_initLCD 0004                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8              ?_keyinterrupt 0001              main@startTime 002E  
               __accesstop 0080    __end_of__initialization 1CC8              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 1D18         __size_of_lcdNibble 0056  
        eepromRead@address 0003             ??_keyinterrupt 0001                    ??_putch 0003  
   backlogTest@motorStatus 0009                    ?___wmul 0001                    _CCP1CON 000FBD  
         updateEEPROM@time 000D                    ?_printf 000D                 _eepromRead 1C08  
            ??_backlogTest 000B                    _PWM1off 1D2E                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7                  ?_keycheck 0001  
        __end_of_lcdNibble 1A2C                    __Hparam 0000                    __Lparam 0000  
                  ___lldiv 1744            __size_of___wmul 0026                    ___lwdiv 1A2C  
                  ___lwmod 1B58                  _CMCONbits 000FB4                 _homescreen 191A  
             __psmallconst 1000                    __pcinit 1CBC                    __ramtop 1000  
               _initialize 183E                    _lcdInst 1D18                    __ptext0 13EE  
                  __ptext1 18B4                    __ptext2 1D24                    __ptext3 1D38  
                  __ptext4 1D40                    __ptext5 1C30                    __ptext6 1CFA  
                  __ptext7 1BD2                    __ptext8 1B9A                    __ptext9 1A7E  
          __size_of_printf 030C                    _readADC 1C7C                    _initLCD 1B12  
        __end_of_hexpowers 1024                    _dpowers 1012                    _isdigit 1C9E  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008       end_of_initialization 1CC8        __end_of_backlogTest 183E  
               ??_keycheck 0001              __Lmediumconst 0000  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
     __end_of_keyinterrupt 1CE6                 _timePassed 1A7E                    printf@c 0022  
                  printf@f 000D           I2C_Master_Init@c 000E           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                _PORTBbits 000F81                ?_eepromRead 0001                 _updateTime 18B4  
            ?_updateEEPROM 000D                _CCP1CONbits 000FBD              ??_eepromWrite 0005  
              printf@width 0020              ??_displayLogs 0023                ?_homescreen 0001  
           __end_of___wmul 1C7C                ?_initialize 0001             __end_of_printf 13EE  
      start_initialization 1CBC                updateTime@j 0004                _backlogTest 17C6  
           ??_updateEEPROM 000F          ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002  
        ??_I2C_Master_Wait 0001          ??_I2C_Master_Stop 0002        __size_of_eepromRead 0028  
              ?_timePassed 0007        __end_of_eepromWrite 1BD2                   ??___wmul 0005  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0015        __end_of_displayLogs 1744  
              __pbssCOMRAM 0036                ?_updateTime 0001                   ?_PWM1off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0014        __size_of_initialize 0076  
         _I2C_Master_Start 1D40           _I2C_Master_Write 1D24          __size_of_keycheck 0014  
         ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000                  _lcdNibble 19D6  
                 ?___lldiv 0001                   PWM1@duty 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                   ?_lcdInst 0001                   ?_readADC 0001  
                 ?_initLCD 0001                __smallconst 1000                   ?_isdigit 0001  
             _keyinterrupt 1CD2                  _hexpowers 101C           ___lwdiv@quotient 0005  
      __size_of_timePassed 004A             __size_of_putch 000C         eepromWrite@address 0007  
           ___wmul@product 0005                   _LATDbits 000F8C                   _LATEbits 000F8D  
              _eepromWrite 1B9A                   _PIR2bits 000FA1           __CFG_WDTPS$32768 000000  
      __size_of_updateTime 0066                 ?_lcdNibble 0001       __end_of_updateEEPROM 1C08  
              _displayLogs 167E                 _ADCON0bits 000FC2          ___wmul@multiplier 0001  
            lcdNibble@data 0002               ??_eepromRead 0001                 printf@flag 001F  
            lcdNibble@temp 0001                 printf@prec 001C        I2C_Master_Read@temp 0003  
         __size_of_PWM1off 000A                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead 1C30         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0023           __size_of___lldiv 0082           __size_of___lwdiv 0052  
         __size_of___lwmod 0042             readADC@channel 0002               ??_initialize 0016  
              _isdigit$913 0002           __size_of_lcdInst 000C            _I2C_Master_Init 197C  
         __size_of_readADC 0022            _I2C_Master_Read 1C30           __size_of_initLCD 0046  
          _I2C_Master_Wait 1CFA            _I2C_Master_Stop 1D38           __size_of_isdigit 001E  
             ?_backlogTest 0007            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 1C7C                   __ptext11 1CD2                   __ptext20 1C9E  
                 __ptext12 183E                   __ptext21 1B58                   __ptext13 1B12  
                 __ptext30 1AC8                   __ptext22 1A2C                   __ptext14 197C  
                 __ptext23 1D18                   __ptext15 1744                   __ptext24 19D6  
                 __ptext16 191A                   __ptext25 1CE6                   __ptext17 167E  
                 __ptext26 1C08                   __ptext18 10E2                   __ptext27 17C6  
                 __ptext19 1D0C                   __ptext28 1C56                   __ptext29 1D2E  
            __size_of_PWM1 004A         __end_of_homescreen 197C                   _keycheck 1CE6  
            __size_of_main 0290                   _currtime 1024                   _keypress 003D  
       __end_of_initialize 18B4               ??_timePassed 0009                ??_lcdNibble 0001  
                printf@idx 0019                  printf@val 001D            main@prevUnblock 0030  
                putch@data 0003   __end_of_I2C_Master_Start 1D48                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write 1D2E               ??_updateTime 0004                   isdigit@c 0003  
       __end_of_timePassed 1AC8           ___lwmod@dividend 0008           ___lldiv@dividend 0001  
    __size_of_updateEEPROM 0036                   printf@ap 001A         __end_of_updateTime 191A  
  __end_of_I2C_Master_Init 19D6    __end_of_I2C_Master_Read 1C56    __end_of_I2C_Master_Wait 1D0C  
  __end_of_I2C_Master_Stop 1D40                lcdInst@data 0003           ___lldiv@quotient 0009  
        I2C_Master_Write@d 0002            ___lwmod@divisor 000A            ___lwmod@counter 000C  
             _updateEEPROM 1BD2               ?_eepromWrite 0004  
