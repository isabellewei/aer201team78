

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Apr 13 00:26:09 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.41
    61                           ; Generated 25/01/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4620 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	mediumconst
    96  00FE2A                     __pmediumconst:
    97                           	opt stack 0
    98  00FE2A  00                 	db	0
    99  00FE2B                     _keys:
   100                           	opt stack 0
   101  00FE2B  31                 	db	49
   102  00FE2C  32                 	db	50
   103  00FE2D  33                 	db	51
   104  00FE2E  41                 	db	65
   105  00FE2F  34                 	db	52
   106  00FE30  35                 	db	53
   107  00FE31  36                 	db	54
   108  00FE32  42                 	db	66
   109  00FE33  37                 	db	55
   110  00FE34  38                 	db	56
   111  00FE35  39                 	db	57
   112  00FE36  43                 	db	67
   113  00FE37  2A                 	db	42
   114  00FE38  30                 	db	48
   115  00FE39  23                 	db	35
   116  00FE3A  44                 	db	68
   117  00FE3B  00                 	db	0
   118  00FE3C                     __end_of_keys:
   119                           	opt stack 0
   120  00FE3C                     _dpowers:
   121                           	opt stack 0
   122  00FE3C  0001               	dw	1
   123  00FE3E  000A               	dw	10
   124  00FE40  0064               	dw	100
   125  00FE42  03E8               	dw	1000
   126  00FE44  2710               	dw	10000
   127  00FE46                     __end_of_dpowers:
   128                           	opt stack 0
   129  00FE46                     _hexpowers:
   130                           	opt stack 0
   131  00FE46  0001               	dw	1
   132  00FE48  0010               	dw	16
   133  00FE4A  0100               	dw	256
   134  00FE4C  1000               	dw	4096
   135  00FE4E                     __end_of_hexpowers:
   136                           	opt stack 0
   137  00FE4E                     _currtime:
   138                           	opt stack 0
   139  00FE4E  30                 	db	48
   140  00FE4F  03                 	db	3
   141  00FE50  01                 	db	1
   142  00FE51  04                 	db	4
   143  00FE52  12                 	db	18
   144  00FE53  04                 	db	4
   145  00FE54  17                 	db	23
   146  00FE55                     __end_of_currtime:
   147                           	opt stack 0
   148  0000                     _ADRES	set	4035
   149  0000                     _TMR1L	set	4046
   150  0000                     _TMR1H	set	4047
   151  0000                     _T1CON	set	4045
   152  0000                     _TMR3L	set	4018
   153  0000                     _TMR3H	set	4019
   154  0000                     _T3CON	set	4017
   155  0000                     _ADCON0bits	set	4034
   156  0000                     _ADCON0	set	4034
   157  0000                     _PIR2bits	set	4001
   158  0000                     _EECON2	set	4007
   159  0000                     _EEDATA	set	4008
   160  0000                     _EECON1bits	set	4006
   161  0000                     _EEADR	set	4009
   162  0000                     _EEADRH	set	4010
   163  0000                     _PORTB	set	3969
   164  0000                     _PORTBbits	set	3969
   165  0000                     _CCP2CONbits	set	4026
   166  0000                     _CCP1CONbits	set	4029
   167  0000                     _SSPBUF	set	4041
   168  0000                     _SSPADD	set	4040
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPCON1	set	4038
   171  0000                     _SSPSTAT	set	4039
   172  0000                     _ADRESH	set	4036
   173  0000                     _LATAbits	set	3977
   174  0000                     _LATEbits	set	3981
   175  0000                     _LATCbits	set	3979
   176  0000                     _LATBbits	set	3978
   177  0000                     _LATDbits	set	3980
   178  0000                     _T0CONbits	set	4053
   179  0000                     _CMCONbits	set	4020
   180  0000                     _CVRCON	set	4021
   181  0000                     _ADCON2	set	4032
   182  0000                     _ADCON1	set	4033
   183  0000                     _LATE	set	3981
   184  0000                     _LATD	set	3980
   185  0000                     _LATC	set	3979
   186  0000                     _LATB	set	3978
   187  0000                     _LATA	set	3977
   188  0000                     _T2CON	set	4042
   189  0000                     _CCPR2L	set	4027
   190  0000                     _CCP2CON	set	4026
   191  0000                     _CCPR1L	set	4030
   192  0000                     _CCP1CON	set	4029
   193  0000                     _PR2	set	4043
   194  0000                     _TRISE	set	3990
   195  0000                     _TRISD	set	3989
   196  0000                     _TRISC	set	3988
   197  0000                     _TRISB	set	3987
   198  0000                     _TRISA	set	3986
   199  0000                     _OSCTUNEbits	set	3995
   200  0000                     _OSCCON	set	4051
   201  0000                     _TMR0L	set	4054
   202  0000                     _TMR0H	set	4055
   203  0000                     _T0CON	set	4053
   204  0000                     _INTCONbits	set	4082
   205  0000                     _TMR3ON	set	32136
   206  0000                     _ACKEN	set	32300
   207  0000                     _ACKDT	set	32301
   208  0000                     _RCEN	set	32299
   209  0000                     _PEN	set	32298
   210  0000                     _RSEN	set	32297
   211  0000                     _SEN	set	32296
   212  0000                     _TRISC4	set	31908
   213  0000                     _TRISC3	set	31907
   214  0000                     _PEIE	set	32662
   215  0000                     _TMR1IE	set	31976
   216  0000                     _TMR0IE	set	32661
   217  0000                     _ADFM	set	32263
   218  0000                     _nRBPU	set	32655
   219  0000                     _TMR1ON	set	32360
   220  0000                     _TMR1IF	set	31984
   221  0000                     _TMR0ON	set	32431
   222  0000                     _TMR0IF	set	32658
   223  00FE55                     STR_33:
   224  00FE55  53                 	db	83	;'S'
   225  00FE56  74                 	db	116	;'t'
   226  00FE57  61                 	db	97	;'a'
   227  00FE58  72                 	db	114	;'r'
   228  00FE59  74                 	db	116	;'t'
   229  00FE5A  3A                 	db	58	;':'
   230  00FE5B  20                 	db	32
   231  00FE5C  25                 	db	37
   232  00FE5D  30                 	db	48	;'0'
   233  00FE5E  32                 	db	50	;'2'
   234  00FE5F  78                 	db	120	;'x'
   235  00FE60  3A                 	db	58	;':'
   236  00FE61  25                 	db	37
   237  00FE62  30                 	db	48	;'0'
   238  00FE63  32                 	db	50	;'2'
   239  00FE64  78                 	db	120	;'x'
   240  00FE65  3A                 	db	58	;':'
   241  00FE66  25                 	db	37
   242  00FE67  30                 	db	48	;'0'
   243  00FE68  32                 	db	50	;'2'
   244  00FE69  78                 	db	120	;'x'
   245  00FE6A  00                 	db	0
   246  00FE6B                     STR_31:
   247  00FE6B  44                 	db	68	;'D'
   248  00FE6C  61                 	db	97	;'a'
   249  00FE6D  74                 	db	116	;'t'
   250  00FE6E  65                 	db	101	;'e'
   251  00FE6F  3A                 	db	58	;':'
   252  00FE70  20                 	db	32
   253  00FE71  25                 	db	37
   254  00FE72  30                 	db	48	;'0'
   255  00FE73  32                 	db	50	;'2'
   256  00FE74  78                 	db	120	;'x'
   257  00FE75  2F                 	db	47
   258  00FE76  25                 	db	37
   259  00FE77  30                 	db	48	;'0'
   260  00FE78  32                 	db	50	;'2'
   261  00FE79  78                 	db	120	;'x'
   262  00FE7A  2F                 	db	47
   263  00FE7B  25                 	db	37
   264  00FE7C  30                 	db	48	;'0'
   265  00FE7D  32                 	db	50	;'2'
   266  00FE7E  78                 	db	120	;'x'
   267  00FE7F  00                 	db	0
   268  00FE80                     STR_42:
   269  00FE80  30                 	db	48	;'0'
   270  00FE81  31                 	db	49	;'1'
   271  00FE82  32                 	db	50	;'2'
   272  00FE83  33                 	db	51	;'3'
   273  00FE84  34                 	db	52	;'4'
   274  00FE85  35                 	db	53	;'5'
   275  00FE86  36                 	db	54	;'6'
   276  00FE87  37                 	db	55	;'7'
   277  00FE88  38                 	db	56	;'8'
   278  00FE89  39                 	db	57	;'9'
   279  00FE8A  61                 	db	97	;'a'
   280  00FE8B  62                 	db	98	;'b'
   281  00FE8C  63                 	db	99	;'c'
   282  00FE8D  64                 	db	100	;'d'
   283  00FE8E  65                 	db	101	;'e'
   284  00FE8F  66                 	db	102	;'f'
   285  00FE90  00                 	db	0
   286  00FE91                     STR_37:
   287  00FE91  53                 	db	83	;'S'
   288  00FE92  6F                 	db	111	;'o'
   289  00FE93  64                 	db	100	;'d'
   290  00FE94  61                 	db	97	;'a'
   291  00FE95  20                 	db	32
   292  00FE96  77                 	db	119	;'w'
   293  00FE97  2F                 	db	47
   294  00FE98  6F                 	db	111	;'o'
   295  00FE99  20                 	db	32
   296  00FE9A  74                 	db	116	;'t'
   297  00FE9B  61                 	db	97	;'a'
   298  00FE9C  62                 	db	98	;'b'
   299  00FE9D  3A                 	db	58	;':'
   300  00FE9E  20                 	db	32
   301  00FE9F  25                 	db	37
   302  00FEA0  64                 	db	100	;'d'
   303  00FEA1  00                 	db	0
   304  00FEA2                     STR_41:
   305  00FEA2  53                 	db	83	;'S'
   306  00FEA3  6F                 	db	111	;'o'
   307  00FEA4  75                 	db	117	;'u'
   308  00FEA5  70                 	db	112	;'p'
   309  00FEA6  20                 	db	32
   310  00FEA7  77                 	db	119	;'w'
   311  00FEA8  2F                 	db	47
   312  00FEA9  6F                 	db	111	;'o'
   313  00FEAA  20                 	db	32
   314  00FEAB  6C                 	db	108	;'l'
   315  00FEAC  62                 	db	98	;'b'
   316  00FEAD  6C                 	db	108	;'l'
   317  00FEAE  3A                 	db	58	;':'
   318  00FEAF  20                 	db	32
   319  00FEB0  25                 	db	37
   320  00FEB1  64                 	db	100	;'d'
   321  00FEB2  00                 	db	0
   322  00FEB3                     STR_28:
   323  00FEB3  52                 	db	82	;'R'
   324  00FEB4  75                 	db	117	;'u'
   325  00FEB5  6E                 	db	110	;'n'
   326  00FEB6  23                 	db	35
   327  00FEB7  25                 	db	37
   328  00FEB8  64                 	db	100	;'d'
   329  00FEB9  20                 	db	32
   330  00FEBA  20                 	db	32
   331  00FEBB  20                 	db	32
   332  00FEBC  20                 	db	32
   333  00FEBD  41                 	db	65	;'A'
   334  00FEBE  3A                 	db	58	;':'
   335  00FEBF  4E                 	db	78	;'N'
   336  00FEC0  65                 	db	101	;'e'
   337  00FEC1  78                 	db	120	;'x'
   338  00FEC2  74                 	db	116	;'t'
   339  00FEC3  00                 	db	0
   340  00FEC4                     STR_4:
   341  00FEC4  74                 	db	116	;'t'
   342  00FEC5  65                 	db	101	;'e'
   343  00FEC6  73                 	db	115	;'s'
   344  00FEC7  74                 	db	116	;'t'
   345  00FEC8  69                 	db	105	;'i'
   346  00FEC9  6E                 	db	110	;'n'
   347  00FECA  67                 	db	103	;'g'
   348  00FECB  20                 	db	32
   349  00FECC  50                 	db	80	;'P'
   350  00FECD  57                 	db	87	;'W'
   351  00FECE  4D                 	db	77	;'M'
   352  00FECF  32                 	db	50	;'2'
   353  00FED0  20                 	db	32
   354  00FED1  43                 	db	67	;'C'
   355  00FED2  43                 	db	67	;'C'
   356  00FED3  57                 	db	87	;'W'
   357  00FED4  00                 	db	0
   358  00FED5                     STR_23:
   359  00FED5  56                 	db	86	;'V'
   360  00FED6  69                 	db	105	;'i'
   361  00FED7  65                 	db	101	;'e'
   362  00FED8  77                 	db	119	;'w'
   363  00FED9  20                 	db	32
   364  00FEDA  4C                 	db	76	;'L'
   365  00FEDB  6F                 	db	111	;'o'
   366  00FEDC  67                 	db	103	;'g'
   367  00FEDD  73                 	db	115	;'s'
   368  00FEDE  3F                 	db	63	;'?'
   369  00FEDF  20                 	db	32
   370  00FEE0  42                 	db	66	;'B'
   371  00FEE1  3A                 	db	58	;':'
   372  00FEE2  59                 	db	89	;'Y'
   373  00FEE3  65                 	db	101	;'e'
   374  00FEE4  73                 	db	115	;'s'
   375  00FEE5  00                 	db	0
   376  00FEE6                     STR_24:
   377  00FEE6  25                 	db	37
   378  00FEE7  30                 	db	48	;'0'
   379  00FEE8  32                 	db	50	;'2'
   380  00FEE9  78                 	db	120	;'x'
   381  00FEEA  2F                 	db	47
   382  00FEEB  25                 	db	37
   383  00FEEC  30                 	db	48	;'0'
   384  00FEED  32                 	db	50	;'2'
   385  00FEEE  78                 	db	120	;'x'
   386  00FEEF  2F                 	db	47
   387  00FEF0  25                 	db	37
   388  00FEF1  30                 	db	48	;'0'
   389  00FEF2  32                 	db	50	;'2'
   390  00FEF3  78                 	db	120	;'x'
   391  00FEF4  20                 	db	32
   392  00FEF5  00                 	db	0
   393  00FEF6                     STR_35:
   394  00FEF6  53                 	db	83	;'S'
   395  00FEF7  6F                 	db	111	;'o'
   396  00FEF8  64                 	db	100	;'d'
   397  00FEF9  61                 	db	97	;'a'
   398  00FEFA  20                 	db	32
   399  00FEFB  77                 	db	119	;'w'
   400  00FEFC  2F                 	db	47
   401  00FEFD  20                 	db	32
   402  00FEFE  74                 	db	116	;'t'
   403  00FEFF  61                 	db	97	;'a'
   404  00FF00  62                 	db	98	;'b'
   405  00FF01  3A                 	db	58	;':'
   406  00FF02  20                 	db	32
   407  00FF03  25                 	db	37
   408  00FF04  64                 	db	100	;'d'
   409  00FF05  00                 	db	0
   410  00FF06                     STR_39:
   411  00FF06  53                 	db	83	;'S'
   412  00FF07  6F                 	db	111	;'o'
   413  00FF08  75                 	db	117	;'u'
   414  00FF09  70                 	db	112	;'p'
   415  00FF0A  20                 	db	32
   416  00FF0B  77                 	db	119	;'w'
   417  00FF0C  2F                 	db	47
   418  00FF0D  20                 	db	32
   419  00FF0E  6C                 	db	108	;'l'
   420  00FF0F  62                 	db	98	;'b'
   421  00FF10  6C                 	db	108	;'l'
   422  00FF11  3A                 	db	58	;':'
   423  00FF12  20                 	db	32
   424  00FF13  25                 	db	37
   425  00FF14  64                 	db	100	;'d'
   426  00FF15  00                 	db	0
   427  00FF16                     STR_1:
   428  00FF16  53                 	db	83	;'S'
   429  00FF17  6F                 	db	111	;'o'
   430  00FF18  72                 	db	114	;'r'
   431  00FF19  74                 	db	116	;'t'
   432  00FF1A  69                 	db	105	;'i'
   433  00FF1B  6E                 	db	110	;'n'
   434  00FF1C  67                 	db	103	;'g'
   435  00FF1D  20                 	db	32
   436  00FF1E  63                 	db	99	;'c'
   437  00FF1F  61                 	db	97	;'a'
   438  00FF20  6E                 	db	110	;'n'
   439  00FF21  73                 	db	115	;'s'
   440  00FF22  2E                 	db	46
   441  00FF23  2E                 	db	46
   442  00FF24  2E                 	db	46
   443  00FF25  00                 	db	0
   444  00FF26                     STR_3:
   445  00FF26  74                 	db	116	;'t'
   446  00FF27  65                 	db	101	;'e'
   447  00FF28  73                 	db	115	;'s'
   448  00FF29  74                 	db	116	;'t'
   449  00FF2A  69                 	db	105	;'i'
   450  00FF2B  6E                 	db	110	;'n'
   451  00FF2C  67                 	db	103	;'g'
   452  00FF2D  20                 	db	32
   453  00FF2E  50                 	db	80	;'P'
   454  00FF2F  57                 	db	87	;'W'
   455  00FF30  4D                 	db	77	;'M'
   456  00FF31  32                 	db	50	;'2'
   457  00FF32  20                 	db	32
   458  00FF33  43                 	db	67	;'C'
   459  00FF34  57                 	db	87	;'W'
   460  00FF35  00                 	db	0
   461  00FF36                     STR_7:
   462  00FF36  74                 	db	116	;'t'
   463  00FF37  65                 	db	101	;'e'
   464  00FF38  73                 	db	115	;'s'
   465  00FF39  74                 	db	116	;'t'
   466  00FF3A  69                 	db	105	;'i'
   467  00FF3B  6E                 	db	110	;'n'
   468  00FF3C  67                 	db	103	;'g'
   469  00FF3D  20                 	db	32
   470  00FF3E  53                 	db	83	;'S'
   471  00FF3F  20                 	db	32
   472  00FF40  73                 	db	115	;'s'
   473  00FF41  68                 	db	104	;'h'
   474  00FF42  61                 	db	97	;'a'
   475  00FF43  6B                 	db	107	;'k'
   476  00FF44  65                 	db	101	;'e'
   477  00FF45  00                 	db	0
   478  00FF46                     STR_22:
   479  00FF46  53                 	db	83	;'S'
   480  00FF47  6F                 	db	111	;'o'
   481  00FF48  72                 	db	114	;'r'
   482  00FF49  74                 	db	116	;'t'
   483  00FF4A  20                 	db	32
   484  00FF4B  64                 	db	100	;'d'
   485  00FF4C  6F                 	db	111	;'o'
   486  00FF4D  6E                 	db	110	;'n'
   487  00FF4E  65                 	db	101	;'e'
   488  00FF4F  21                 	db	33
   489  00FF50  20                 	db	32
   490  00FF51  41                 	db	65	;'A'
   491  00FF52  3A                 	db	58	;':'
   492  00FF53  4E                 	db	78	;'N'
   493  00FF54  6F                 	db	111	;'o'
   494  00FF55  00                 	db	0
   495  00FF56                     STR_2:
   496  00FF56  41                 	db	65	;'A'
   497  00FF57  6E                 	db	110	;'n'
   498  00FF58  79                 	db	121	;'y'
   499  00FF59  20                 	db	32
   500  00FF5A  6B                 	db	107	;'k'
   501  00FF5B  65                 	db	101	;'e'
   502  00FF5C  79                 	db	121	;'y'
   503  00FF5D  20                 	db	32
   504  00FF5E  74                 	db	116	;'t'
   505  00FF5F  6F                 	db	111	;'o'
   506  00FF60  20                 	db	32
   507  00FF61  73                 	db	115	;'s'
   508  00FF62  74                 	db	116	;'t'
   509  00FF63  6F                 	db	111	;'o'
   510  00FF64  70                 	db	112	;'p'
   511  00FF65  00                 	db	0
   512  00FF66                     STR_8:
   513  00FF66  74                 	db	116	;'t'
   514  00FF67  65                 	db	101	;'e'
   515  00FF68  73                 	db	115	;'s'
   516  00FF69  74                 	db	116	;'t'
   517  00FF6A  69                 	db	105	;'i'
   518  00FF6B  6E                 	db	110	;'n'
   519  00FF6C  67                 	db	103	;'g'
   520  00FF6D  20                 	db	32
   521  00FF6E  53                 	db	83	;'S'
   522  00FF6F  31                 	db	49	;'1'
   523  00FF70  20                 	db	32
   524  00FF71  70                 	db	112	;'p'
   525  00FF72  69                 	db	105	;'i'
   526  00FF73  6E                 	db	110	;'n'
   527  00FF74  73                 	db	115	;'s'
   528  00FF75  00                 	db	0
   529  00FF76                     STR_10:
   530  00FF76  74                 	db	116	;'t'
   531  00FF77  65                 	db	101	;'e'
   532  00FF78  73                 	db	115	;'s'
   533  00FF79  74                 	db	116	;'t'
   534  00FF7A  69                 	db	105	;'i'
   535  00FF7B  6E                 	db	110	;'n'
   536  00FF7C  67                 	db	103	;'g'
   537  00FF7D  20                 	db	32
   538  00FF7E  53                 	db	83	;'S'
   539  00FF7F  32                 	db	50	;'2'
   540  00FF80  20                 	db	32
   541  00FF81  70                 	db	112	;'p'
   542  00FF82  69                 	db	105	;'i'
   543  00FF83  6E                 	db	110	;'n'
   544  00FF84  73                 	db	115	;'s'
   545  00FF85  00                 	db	0
   546  00FF86                     STR_11:
   547  00FF86  74                 	db	116	;'t'
   548  00FF87  65                 	db	101	;'e'
   549  00FF88  73                 	db	115	;'s'
   550  00FF89  74                 	db	116	;'t'
   551  00FF8A  69                 	db	105	;'i'
   552  00FF8B  6E                 	db	110	;'n'
   553  00FF8C  67                 	db	103	;'g'
   554  00FF8D  20                 	db	32
   555  00FF8E  53                 	db	83	;'S'
   556  00FF8F  33                 	db	51	;'3'
   557  00FF90  20                 	db	32
   558  00FF91  70                 	db	112	;'p'
   559  00FF92  69                 	db	105	;'i'
   560  00FF93  6E                 	db	110	;'n'
   561  00FF94  73                 	db	115	;'s'
   562  00FF95  00                 	db	0
   563  00FF96                     STR_13:
   564  00FF96  74                 	db	116	;'t'
   565  00FF97  65                 	db	101	;'e'
   566  00FF98  73                 	db	115	;'s'
   567  00FF99  74                 	db	116	;'t'
   568  00FF9A  69                 	db	105	;'i'
   569  00FF9B  6E                 	db	110	;'n'
   570  00FF9C  67                 	db	103	;'g'
   571  00FF9D  20                 	db	32
   572  00FF9E  50                 	db	80	;'P'
   573  00FF9F  57                 	db	87	;'W'
   574  00FFA0  4D                 	db	77	;'M'
   575  00FFA1  31                 	db	49	;'1'
   576  00FFA2  00                 	db	0
   577  00FFA3                     STR_29:
   578  00FFA3  52                 	db	82	;'R'
   579  00FFA4  75                 	db	117	;'u'
   580  00FFA5  6E                 	db	110	;'n'
   581  00FFA6  74                 	db	116	;'t'
   582  00FFA7  69                 	db	105	;'i'
   583  00FFA8  6D                 	db	109	;'m'
   584  00FFA9  65                 	db	101	;'e'
   585  00FFAA  3A                 	db	58	;':'
   586  00FFAB  20                 	db	32
   587  00FFAC  25                 	db	37
   588  00FFAD  64                 	db	100	;'d'
   589  00FFAE  00                 	db	0
   590  00FFAF                     STR_6:
   591  00FFAF  74                 	db	116	;'t'
   592  00FFB0  65                 	db	101	;'e'
   593  00FFB1  73                 	db	115	;'s'
   594  00FFB2  74                 	db	116	;'t'
   595  00FFB3  69                 	db	105	;'i'
   596  00FFB4  6E                 	db	110	;'n'
   597  00FFB5  67                 	db	103	;'g'
   598  00FFB6  20                 	db	32
   599  00FFB7  53                 	db	83	;'S'
   600  00FFB8  20                 	db	32
   601  00FFB9  62                 	db	98	;'b'
   602  00FFBA  00                 	db	0
   603  00FFBB                     STR_19:
   604  00FFBB  6C                 	db	108	;'l'
   605  00FFBC  61                 	db	97	;'a'
   606  00FFBD  62                 	db	98	;'b'
   607  00FFBE  65                 	db	101	;'e'
   608  00FFBF  6C                 	db	108	;'l'
   609  00FFC0  20                 	db	32
   610  00FFC1  20                 	db	32
   611  00FFC2  20                 	db	32
   612  00FFC3  74                 	db	116	;'t'
   613  00FFC4  61                 	db	97	;'a'
   614  00FFC5  62                 	db	98	;'b'
   615  00FFC6  00                 	db	0
   616  00FFC7                     STR_5:
   617  00FFC7  74                 	db	116	;'t'
   618  00FFC8  65                 	db	101	;'e'
   619  00FFC9  73                 	db	115	;'s'
   620  00FFCA  74                 	db	116	;'t'
   621  00FFCB  69                 	db	105	;'i'
   622  00FFCC  6E                 	db	110	;'n'
   623  00FFCD  67                 	db	103	;'g'
   624  00FFCE  20                 	db	32
   625  00FFCF  53                 	db	83	;'S'
   626  00FFD0  20                 	db	32
   627  00FFD1  66                 	db	102	;'f'
   628  00FFD2  00                 	db	0
   629  00FFD3                     STR_14:
   630  00FFD3  74                 	db	116	;'t'
   631  00FFD4  65                 	db	101	;'e'
   632  00FFD5  73                 	db	115	;'s'
   633  00FFD6  74                 	db	116	;'t'
   634  00FFD7  69                 	db	105	;'i'
   635  00FFD8  6E                 	db	110	;'n'
   636  00FFD9  67                 	db	103	;'g'
   637  00FFDA  20                 	db	32
   638  00FFDB  49                 	db	73	;'I'
   639  00FFDC  52                 	db	82	;'R'
   640  00FFDD  00                 	db	0
   641  00FFDE                     STR_20:
   642  00FFDE  25                 	db	37
   643  00FFDF  78                 	db	120	;'x'
   644  00FFE0  20                 	db	32
   645  00FFE1  20                 	db	32
   646  00FFE2  20                 	db	32
   647  00FFE3  20                 	db	32
   648  00FFE4  20                 	db	32
   649  00FFE5  20                 	db	32
   650  00FFE6  00                 	db	0
   651  00FFE7                     STR_27:
   652  00FFE7  20                 	db	32
   653  00FFE8  41                 	db	65	;'A'
   654  00FFE9  3A                 	db	58	;':'
   655  00FFEA  4C                 	db	76	;'L'
   656  00FFEB  6F                 	db	111	;'o'
   657  00FFEC  67                 	db	103	;'g'
   658  00FFED  73                 	db	115	;'s'
   659  00FFEE  00                 	db	0
   660  00FFEF                     STR_25:
   661  00FFEF  33                 	db	51	;'3'
   662  00FFF0  3A                 	db	58	;':'
   663  00FFF1  53                 	db	83	;'S'
   664  00FFF2  74                 	db	116	;'t'
   665  00FFF3  61                 	db	97	;'a'
   666  00FFF4  72                 	db	114	;'r'
   667  00FFF5  74                 	db	116	;'t'
   668  00FFF6  00                 	db	0
   669  00FFF7                     STR_15:
   670  00FFF7  25                 	db	37
   671  00FFF8  78                 	db	120	;'x'
   672  00FFF9  20                 	db	32
   673  00FFFA  00                 	db	0
   674  00FFFB                     STR_9:
   675  00FFFB  25                 	db	37
   676  00FFFC  78                 	db	120	;'x'
   677  00FFFD  00                 	db	0
   678  0000                     
   679                           ; #config settings
   680  00FFFE  00                 	db	0	; dummy byte at the end
   681  0000                     
   682                           	psect	cinit
   683  002A4C                     __pcinit:
   684                           	opt stack 0
   685  002A4C                     start_initialization:
   686                           	opt stack 0
   687  002A4C                     __initialization:
   688                           	opt stack 0
   689                           
   690                           ; Clear objects allocated to BANK0 (20 bytes)
   691  002A4C  EE00  F0A7         	lfsr	0,__pbssBANK0
   692  002A50  0E14               	movlw	20
   693  002A52                     clear_0:
   694  002A52  6AEE               	clrf	postinc0,c
   695  002A54  06E8               	decf	wreg,f,c
   696  002A56  E1FD               	bnz	clear_0
   697                           
   698                           ; Clear objects allocated to COMRAM (28 bytes)
   699  002A58  EE00  F043         	lfsr	0,__pbssCOMRAM
   700  002A5C  0E1C               	movlw	28
   701  002A5E                     clear_1:
   702  002A5E  6AEE               	clrf	postinc0,c
   703  002A60  06E8               	decf	wreg,f,c
   704  002A62  E1FD               	bnz	clear_1
   705  002A64                     end_of_initialization:
   706                           	opt stack 0
   707  002A64                     __end_of__initialization:
   708                           	opt stack 0
   709  002A64  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   710  002A66  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   711  002A68  0E00               	movlw	low (__Lmediumconst shr (0+16))
   712  002A6A  6EF8               	movwf	tblptru,c
   713  002A6C  0100               	movlb	0
   714  002A6E  EF09  F000         	goto	_main	;jump to C main() function
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           	psect	bssCOMRAM
   720  000043                     __pbssCOMRAM:
   721                           	opt stack 0
   722  000043                     _t3:
   723                           	opt stack 0
   724  000043                     	ds	2
   725  000045                     _t2:
   726                           	opt stack 0
   727  000045                     	ds	2
   728  000047                     _t:
   729                           	opt stack 0
   730  000047                     	ds	2
   731  000049                     _sodaI:
   732                           	opt stack 0
   733  000049                     	ds	2
   734  00004B                     _soupI:
   735                           	opt stack 0
   736  00004B                     	ds	2
   737  00004D                     _soupAlign:
   738                           	opt stack 0
   739  00004D                     	ds	2
   740  00004F                     _sodaAlign:
   741                           	opt stack 0
   742  00004F                     	ds	2
   743  000051                     _tabState:
   744                           	opt stack 0
   745  000051                     	ds	2
   746  000053                     _sodaSteps:
   747                           	opt stack 0
   748  000053                     	ds	2
   749  000055                     _soupSteps:
   750                           	opt stack 0
   751  000055                     	ds	2
   752  000057                     _S3mode:
   753                           	opt stack 0
   754  000057                     	ds	2
   755  000059                     _S2mode:
   756                           	opt stack 0
   757  000059                     	ds	2
   758  00005B                     _S1mode:
   759                           	opt stack 0
   760  00005B                     	ds	2
   761  00005D                     _s2:
   762                           	opt stack 0
   763  00005D                     	ds	2
   764                           tblptru	equ	0xFF8
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           
   768                           	psect	bssBANK0
   769  0000A7                     __pbssBANK0:
   770                           	opt stack 0
   771  0000A7                     _time:
   772                           	opt stack 0
   773  0000A7                     	ds	7
   774  0000AE                     _sodaCnt:
   775                           	opt stack 0
   776  0000AE                     	ds	2
   777  0000B0                     _soupCnt:
   778                           	opt stack 0
   779  0000B0                     	ds	2
   780  0000B2                     _labelState:
   781                           	opt stack 0
   782  0000B2                     	ds	2
   783  0000B4                     _seconds:
   784                           	opt stack 0
   785  0000B4                     	ds	2
   786  0000B6                     _s3:
   787                           	opt stack 0
   788  0000B6                     	ds	2
   789  0000B8                     _s1:
   790                           	opt stack 0
   791  0000B8                     	ds	2
   792  0000BA                     _keypress:
   793                           	opt stack 0
   794  0000BA                     	ds	1
   795                           tblptru	equ	0xFF8
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           
   799                           	psect	cstackBANK0
   800  000080                     __pcstackBANK0:
   801                           	opt stack 0
   802  000080                     displayLog@run:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x0
   806  000080                     	ds	2
   807  000082                     ??_displayLog:
   808                           
   809                           ; 1 bytes @ 0x2
   810  000082                     	ds	3
   811  000085                     displayLog@i:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x5
   815  000085                     	ds	2
   816  000087                     displayLog@currRun:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x7
   820  000087                     	ds	2
   821  000089                     ??_main:
   822                           
   823                           ; 1 bytes @ 0x9
   824  000089                     	ds	2
   825  00008B                     main@soupLoad:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0xB
   829  00008B                     	ds	2
   830  00008D                     main@sodaLoad:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0xD
   834  00008D                     	ds	2
   835  00008F                     main@s:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0xF
   839  00008F                     	ds	2
   840  000091                     main@prevSoupLoad:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x11
   844  000091                     	ds	2
   845  000093                     main@prevSodaLoad:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x13
   849  000093                     	ds	2
   850  000095                     main@soupL:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x15
   854  000095                     	ds	2
   855  000097                     main@soupNL:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x17
   859  000097                     	ds	2
   860  000099                     main@sodaT:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x19
   864  000099                     	ds	2
   865  00009B                     main@sodaNT:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x1B
   869  00009B                     	ds	2
   870  00009D                     main@soupSort:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x1D
   874  00009D                     	ds	2
   875  00009F                     main@sodaSort:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x1F
   879  00009F                     	ds	2
   880  0000A1                     main@prevSodaIR:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x21
   884  0000A1                     	ds	2
   885  0000A3                     main@prevSoupIR:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x23
   889  0000A3                     	ds	2
   890  0000A5                     main@standby:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x25
   894  0000A5                     	ds	2
   895                           tblptru	equ	0xFF8
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           
   899                           	psect	cstackCOMRAM
   900  000001                     __pcstackCOMRAM:
   901                           	opt stack 0
   902  000001                     ?i2___wmul:
   903                           	opt stack 0
   904  000001                     updateS2@mode:
   905                           	opt stack 0
   906  000001                     i2updateS1@mode:
   907                           	opt stack 0
   908  000001                     i2updateS3@mode:
   909                           	opt stack 0
   910  000001                     i2___wmul@multiplier:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x0
   914  000001                     	ds	2
   915  000003                     ??_updateS2:
   916  000003                     ??i2_updateS1:
   917  000003                     ??i2_updateS3:
   918  000003                     i2___wmul@multiplicand:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x2
   922  000003                     	ds	2
   923  000005                     i2___wmul@product:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x4
   927  000005                     	ds	2
   928  000007                     ?___awdiv:
   929                           	opt stack 0
   930  000007                     ___awdiv@dividend:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x6
   934  000007                     	ds	2
   935  000009                     ___awdiv@divisor:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x8
   939  000009                     	ds	2
   940  00000B                     ___awdiv@counter:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0xA
   944  00000B                     	ds	1
   945  00000C                     ___awdiv@sign:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0xB
   949  00000C                     	ds	1
   950  00000D                     ___awdiv@quotient:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0xC
   954  00000D                     	ds	2
   955  00000F                     ??_handler:
   956                           
   957                           ; 1 bytes @ 0xE
   958  00000F                     	ds	16
   959  00001F                     _handler$1818:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x1E
   963  00001F                     	ds	2
   964  000021                     ??_readADC:
   965  000021                     ??_isdigit:
   966  000021                     ??_I2C_Master_Wait:
   967  000021                     ??_eepromRead:
   968  000021                     ?___wmul:
   969                           	opt stack 0
   970  000021                     ?___awmod:
   971                           	opt stack 0
   972  000021                     ?___lwdiv:
   973                           	opt stack 0
   974  000021                     ?___lldiv:
   975                           	opt stack 0
   976  000021                     lcdNibble@temp:
   977                           	opt stack 0
   978  000021                     eepromWrite@data:
   979                           	opt stack 0
   980  000021                     PWM1@duty:
   981                           	opt stack 0
   982  000021                     PWM2@duty:
   983                           	opt stack 0
   984  000021                     PWM2slow@duty:
   985                           	opt stack 0
   986  000021                     updateS1@mode:
   987                           	opt stack 0
   988  000021                     updateS3@mode:
   989                           	opt stack 0
   990  000021                     ___wmul@multiplier:
   991                           	opt stack 0
   992  000021                     ___awmod@dividend:
   993                           	opt stack 0
   994  000021                     ___lwdiv@dividend:
   995                           	opt stack 0
   996  000021                     ___lldiv@dividend:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x20
  1000  000021                     	ds	1
  1001  000022                     ??_eepromWrite:
  1002  000022                     lcdNibble@data:
  1003                           	opt stack 0
  1004  000022                     I2C_Master_Read@a:
  1005                           	opt stack 0
  1006  000022                     readADC@channel:
  1007                           	opt stack 0
  1008  000022                     _isdigit$1448:
  1009                           	opt stack 0
  1010  000022                     I2C_Master_Write@d:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x21
  1014  000022                     	ds	1
  1015  000023                     ??_updateS1:
  1016  000023                     ??_updateS3:
  1017  000023                     ??_PWM1:
  1018  000023                     ??_PWM2slow:
  1019  000023                     lcdInst@data:
  1020                           	opt stack 0
  1021  000023                     putch@data:
  1022                           	opt stack 0
  1023  000023                     I2C_Master_Read@temp:
  1024                           	opt stack 0
  1025  000023                     eepromRead@address:
  1026                           	opt stack 0
  1027  000023                     isdigit@c:
  1028                           	opt stack 0
  1029  000023                     PWM2@dir:
  1030                           	opt stack 0
  1031  000023                     ___wmul@multiplicand:
  1032                           	opt stack 0
  1033  000023                     ___awmod@divisor:
  1034                           	opt stack 0
  1035  000023                     ___lwdiv@divisor:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x22
  1039  000023                     	ds	1
  1040  000024                     ??_initLCD:
  1041  000024                     updateTime@j:
  1042                           	opt stack 0
  1043  000024                     eepromWrite@address:
  1044                           	opt stack 0
  1045  000024                     calibrateWheels@prev:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x23
  1049  000024                     	ds	1
  1050  000025                     ??_PWM2:
  1051  000025                     ___awmod@counter:
  1052                           	opt stack 0
  1053  000025                     ___lwdiv@counter:
  1054                           	opt stack 0
  1055  000025                     addRun@dur:
  1056                           	opt stack 0
  1057  000025                     ___wmul@product:
  1058                           	opt stack 0
  1059  000025                     ___lldiv@divisor:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x24
  1063  000025                     	ds	1
  1064  000026                     ___awmod@sign:
  1065                           	opt stack 0
  1066  000026                     calibrateWheels@i:
  1067                           	opt stack 0
  1068  000026                     ___lwdiv@quotient:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x25
  1072  000026                     	ds	1
  1073  000027                     addRun@year:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x26
  1077  000027                     	ds	1
  1078  000028                     ?___lwmod:
  1079                           	opt stack 0
  1080  000028                     ___lwmod@dividend:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x27
  1084  000028                     	ds	1
  1085  000029                     addRun@month:
  1086                           	opt stack 0
  1087  000029                     ___lldiv@quotient:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x28
  1091  000029                     	ds	1
  1092  00002A                     ___lwmod@divisor:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x29
  1096  00002A                     	ds	1
  1097  00002B                     addRun@date:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x2A
  1101  00002B                     	ds	1
  1102  00002C                     ___lwmod@counter:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x2B
  1106  00002C                     	ds	1
  1107  00002D                     ?_printf:
  1108                           	opt stack 0
  1109  00002D                     ___lldiv@counter:
  1110                           	opt stack 0
  1111  00002D                     addRun@hours:
  1112                           	opt stack 0
  1113  00002D                     printf@f:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x2C
  1117  00002D                     	ds	1
  1118  00002E                     I2C_Master_Init@c:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0x2D
  1122  00002E                     	ds	1
  1123  00002F                     addRun@mins:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x2E
  1127  00002F                     	ds	2
  1128  000031                     addRun@secs:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x30
  1132  000031                     	ds	1
  1133  000032                     ??_I2C_Master_Init:
  1134                           
  1135                           ; 1 bytes @ 0x31
  1136  000032                     	ds	1
  1137  000033                     addRun@sodaT:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x32
  1141  000033                     	ds	2
  1142  000035                     ??_printf:
  1143  000035                     addRun@sodaNT:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x34
  1147  000035                     	ds	1
  1148  000036                     
  1149                           ; 1 bytes @ 0x35
  1150  000036                     	ds	1
  1151  000037                     addRun@soupL:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x36
  1155  000037                     	ds	2
  1156  000039                     printf@idx:
  1157                           	opt stack 0
  1158  000039                     addRun@soupNL:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x38
  1162  000039                     	ds	1
  1163  00003A                     printf@ap:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x39
  1167  00003A                     	ds	1
  1168  00003B                     ??_addRun:
  1169                           
  1170                           ; 1 bytes @ 0x3A
  1171  00003B                     	ds	1
  1172  00003C                     printf@prec:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x3B
  1176  00003C                     	ds	1
  1177  00003D                     printf@val:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x3C
  1181  00003D                     	ds	1
  1182  00003E                     addRun@currRun:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x3D
  1186  00003E                     	ds	1
  1187  00003F                     printf@flag:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x3E
  1191  00003F                     	ds	1
  1192  000040                     printf@width:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x3F
  1196  000040                     	ds	2
  1197  000042                     printf@c:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x41
  1201  000042                     	ds	1
  1202  000043                     tblptru	equ	0xFF8
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           
  1206                           ; 1 bytes @ 0x42
  1207 ;;
  1208 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1209 ;;
  1210 ;; *************** function _main *****************
  1211 ;; Defined at:
  1212 ;;		line 118 in file "main.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;		None
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  standby         2   37[BANK0 ] int 
  1217 ;;  prevSoupIR      2   35[BANK0 ] int 
  1218 ;;  prevSodaIR      2   33[BANK0 ] int 
  1219 ;;  sodaSort        2   31[BANK0 ] int 
  1220 ;;  soupSort        2   29[BANK0 ] int 
  1221 ;;  sodaNT          2   27[BANK0 ] int 
  1222 ;;  sodaT           2   25[BANK0 ] int 
  1223 ;;  soupNL          2   23[BANK0 ] int 
  1224 ;;  soupL           2   21[BANK0 ] int 
  1225 ;;  prevSodaLoad    2   19[BANK0 ] int 
  1226 ;;  prevSoupLoad    2   17[BANK0 ] int 
  1227 ;;  s               2   15[BANK0 ] int 
  1228 ;;  sodaLoad        2   13[BANK0 ] int 
  1229 ;;  soupLoad        2   11[BANK0 ] int 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  2  190[None  ] int 
  1232 ;; Registers used:
  1233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;Total ram usage:       30 bytes
  1244 ;; Hardware stack levels required when called:    6
  1245 ;; This function calls:
  1246 ;;		_PWM1
  1247 ;;		_PWM1off
  1248 ;;		_PWM2
  1249 ;;		_PWM2off
  1250 ;;		_PWM2slow
  1251 ;;		___awmod
  1252 ;;		_addRun
  1253 ;;		_calibrateWheels
  1254 ;;		_displayLog
  1255 ;;		_homescreen
  1256 ;;		_initialize
  1257 ;;		_keycheck
  1258 ;;		_keyinterrupt
  1259 ;;		_lcdInst
  1260 ;;		_printf
  1261 ;;		_readADC
  1262 ;;		_startTMR1
  1263 ;;		_updateS1
  1264 ;;		_updateS3
  1265 ;;		_updateTime
  1266 ;; This function is called by:
  1267 ;;		Startup code after reset
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text0
  1272  000012                     __ptext0:
  1273                           	opt stack 0
  1274  000012                     _main:
  1275                           	opt stack 25
  1276                           
  1277                           ;main.c: 119: LATA = 0;
  1278                           
  1279                           ;incstack = 0
  1280  000012  0E00               	movlw	0
  1281  000014  6E89               	movwf	3977,c	;volatile
  1282                           
  1283                           ;main.c: 121: initialize();
  1284  000016  ECD0  F012         	call	_initialize	;wreg free
  1285                           
  1286                           ;main.c: 122: int standby = 1;
  1287  00001A  0E00               	movlw	0
  1288  00001C  0100               	movlb	0	; () banked
  1289  00001E  6FA6               	movwf	(main@standby+1)& (0+255),b
  1290  000020  0E01               	movlw	1
  1291  000022  6FA5               	movwf	main@standby& (0+255),b
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 123: int s = 0;
  1295  000024  0E00               	movlw	0
  1296  000026  0100               	movlb	0	; () banked
  1297  000028  6F90               	movwf	(main@s+1)& (0+255),b
  1298  00002A  0E00               	movlw	0
  1299  00002C  6F8F               	movwf	main@s& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;main.c: 124: int prevSodaIR;
  1303                           ;main.c: 125: int prevSoupIR;
  1304                           ;main.c: 127: int soupLoad = 1;
  1305  00002E  0E00               	movlw	0
  1306  000030  0100               	movlb	0	; () banked
  1307  000032  6F8C               	movwf	(main@soupLoad+1)& (0+255),b
  1308  000034  0E01               	movlw	1
  1309  000036  6F8B               	movwf	main@soupLoad& (0+255),b
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;main.c: 128: int sodaLoad = 1;
  1313  000038  0E00               	movlw	0
  1314  00003A  0100               	movlb	0	; () banked
  1315  00003C  6F8E               	movwf	(main@sodaLoad+1)& (0+255),b
  1316  00003E  0E01               	movlw	1
  1317  000040  6F8D               	movwf	main@sodaLoad& (0+255),b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 131: int soupSort;
  1321                           ;main.c: 132: int prevSoupLoad;
  1322                           ;main.c: 133: int sodaSort;
  1323                           ;main.c: 134: int prevSodaLoad;
  1324                           ;main.c: 136: int soupL;
  1325                           ;main.c: 137: int soupNL ;
  1326                           ;main.c: 138: int sodaT;
  1327                           ;main.c: 139: int sodaNT;
  1328                           ;main.c: 141: T0CON = 0b00010111;
  1329  000042  0E17               	movlw	23
  1330  000044  6ED5               	movwf	4053,c	;volatile
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;main.c: 142: TMR0H = 0b10000101;
  1334  000046  0E85               	movlw	133
  1335  000048  6ED7               	movwf	4055,c	;volatile
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 143: TMR0L = 0b10101110;
  1339  00004A  0EAE               	movlw	174
  1340  00004C  6ED6               	movwf	4054,c	;volatile
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 144: T0CONbits.TMR0ON = 1;
  1344  00004E  8ED5               	bsf	4053,7,c	;volatile
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 145: startTMR1();
  1348  000050  ECB2  F015         	call	_startTMR1	;wreg free
  1349                           
  1350                           ;main.c: 148: _delay((unsigned long)((10)*(32000000/4000.0)));
  1351  000054  0E68               	movlw	104
  1352  000056  0100               	movlb	0	; () banked
  1353  000058  6F89               	movwf	??_main& (0+255),b
  1354  00005A  0EE4               	movlw	228
  1355  00005C                     u7887:
  1356  00005C  2EE8               	decfsz	wreg,f,c
  1357  00005E  D7FE               	bra	u7887
  1358  000060  2F89               	decfsz	??_main& (0+255),f,b
  1359  000062  D7FC               	bra	u7887
  1360  000064  F000               	nop	
  1361  000066                     l5640:
  1362                           
  1363                           ;main.c: 151: if (standby == 1){
  1364  000066  0100               	movlb	0	; () banked
  1365  000068  05A5               	decf	main@standby& (0+255),w,b
  1366  00006A  0100               	movlb	0	; () banked
  1367  00006C  11A6               	iorwf	(main@standby+1)& (0+255),w,b
  1368  00006E  A4D8               	btfss	status,2,c
  1369  000070  D0F6               	goto	l5702
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 152: keypress = (0);
  1373  000072  0E00               	movlw	0
  1374  000074  0100               	movlb	0	; () banked
  1375  000076  6FBA               	movwf	_keypress& (0+255),b	;volatile
  1376                           
  1377                           ;main.c: 153: while(keypress == (0)){
  1378  000078  D006               	goto	l5650
  1379  00007A                     l5644:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 154: updateTime();
  1383  00007A  EC80  F013         	call	_updateTime	;wreg free
  1384                           
  1385                           ;main.c: 155: homescreen();
  1386  00007E  ECB4  F013         	call	_homescreen	;wreg free
  1387                           
  1388                           ;main.c: 156: keyinterrupt();
  1389  000082  EC93  F015         	call	_keyinterrupt	;wreg free
  1390  000086                     l5650:
  1391  000086  0100               	movlb	0	; () banked
  1392  000088  51BA               	movf	_keypress& (0+255),w,b	;volatile
  1393  00008A  B4D8               	btfsc	status,2,c
  1394  00008C  D7F6               	goto	l5644
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 157: }
  1398                           ;main.c: 159: if(keypress == 2){
  1399                           
  1400                           ; BSR set to: 0
  1401  00008E  0E02               	movlw	2
  1402  000090  0100               	movlb	0	; () banked
  1403  000092  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  1404  000094  A4D8               	btfss	status,2,c
  1405  000096  D0B1               	goto	l5694
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;main.c: 161: standby = 0;
  1409  000098  0E00               	movlw	0
  1410  00009A  0100               	movlb	0	; () banked
  1411  00009C  6FA6               	movwf	(main@standby+1)& (0+255),b
  1412  00009E  0E00               	movlw	0
  1413  0000A0  6FA5               	movwf	main@standby& (0+255),b
  1414                           
  1415                           ;main.c: 162: seconds = 0;
  1416  0000A2  0E00               	movlw	0
  1417  0000A4  0100               	movlb	0	; () banked
  1418  0000A6  6FB5               	movwf	(_seconds+1)& (0+255),b
  1419  0000A8  0E00               	movlw	0
  1420  0000AA  6FB4               	movwf	_seconds& (0+255),b
  1421                           
  1422                           ;main.c: 163: labelState = 0;
  1423  0000AC  0E00               	movlw	0
  1424  0000AE  0100               	movlb	0	; () banked
  1425  0000B0  6FB3               	movwf	(_labelState+1)& (0+255),b
  1426  0000B2  0E00               	movlw	0
  1427  0000B4  6FB2               	movwf	_labelState& (0+255),b
  1428                           
  1429                           ;main.c: 164: soupSort = 0;
  1430  0000B6  0E00               	movlw	0
  1431  0000B8  0100               	movlb	0	; () banked
  1432  0000BA  6F9E               	movwf	(main@soupSort+1)& (0+255),b
  1433  0000BC  0E00               	movlw	0
  1434  0000BE  6F9D               	movwf	main@soupSort& (0+255),b
  1435                           
  1436                           ;main.c: 165: tabState = 0;
  1437  0000C0  0E00               	movlw	0
  1438  0000C2  6E52               	movwf	_tabState+1,c
  1439  0000C4  0E00               	movlw	0
  1440  0000C6  6E51               	movwf	_tabState,c
  1441                           
  1442                           ;main.c: 166: sodaSort = 0;
  1443  0000C8  0E00               	movlw	0
  1444  0000CA  0100               	movlb	0	; () banked
  1445  0000CC  6FA0               	movwf	(main@sodaSort+1)& (0+255),b
  1446  0000CE  0E00               	movlw	0
  1447  0000D0  6F9F               	movwf	main@sodaSort& (0+255),b
  1448                           
  1449                           ;main.c: 167: soupSteps = 0;
  1450  0000D2  0E00               	movlw	0
  1451  0000D4  6E56               	movwf	_soupSteps+1,c
  1452  0000D6  0E00               	movlw	0
  1453  0000D8  6E55               	movwf	_soupSteps,c
  1454                           
  1455                           ;main.c: 168: sodaSteps = 0;
  1456  0000DA  0E00               	movlw	0
  1457  0000DC  6E54               	movwf	_sodaSteps+1,c
  1458  0000DE  0E00               	movlw	0
  1459  0000E0  6E53               	movwf	_sodaSteps,c
  1460                           
  1461                           ;main.c: 169: soupL = 0;
  1462  0000E2  0E00               	movlw	0
  1463  0000E4  0100               	movlb	0	; () banked
  1464  0000E6  6F96               	movwf	(main@soupL+1)& (0+255),b
  1465  0000E8  0E00               	movlw	0
  1466  0000EA  6F95               	movwf	main@soupL& (0+255),b
  1467                           
  1468                           ;main.c: 170: soupNL = 0;
  1469  0000EC  0E00               	movlw	0
  1470  0000EE  0100               	movlb	0	; () banked
  1471  0000F0  6F98               	movwf	(main@soupNL+1)& (0+255),b
  1472  0000F2  0E00               	movlw	0
  1473  0000F4  6F97               	movwf	main@soupNL& (0+255),b
  1474                           
  1475                           ;main.c: 171: sodaT = 0;
  1476  0000F6  0E00               	movlw	0
  1477  0000F8  0100               	movlb	0	; () banked
  1478  0000FA  6F9A               	movwf	(main@sodaT+1)& (0+255),b
  1479  0000FC  0E00               	movlw	0
  1480  0000FE  6F99               	movwf	main@sodaT& (0+255),b
  1481                           
  1482                           ;main.c: 172: sodaNT = 0;
  1483  000100  0E00               	movlw	0
  1484  000102  0100               	movlb	0	; () banked
  1485  000104  6F9C               	movwf	(main@sodaNT+1)& (0+255),b
  1486  000106  0E00               	movlw	0
  1487  000108  6F9B               	movwf	main@sodaNT& (0+255),b
  1488                           
  1489                           ;main.c: 173: prevSoupIR = 0;
  1490  00010A  0E00               	movlw	0
  1491  00010C  0100               	movlb	0	; () banked
  1492  00010E  6FA4               	movwf	(main@prevSoupIR+1)& (0+255),b
  1493  000110  0E00               	movlw	0
  1494  000112  6FA3               	movwf	main@prevSoupIR& (0+255),b
  1495                           
  1496                           ;main.c: 174: prevSodaIR = 0;
  1497  000114  0E00               	movlw	0
  1498  000116  0100               	movlb	0	; () banked
  1499  000118  6FA2               	movwf	(main@prevSodaIR+1)& (0+255),b
  1500  00011A  0E00               	movlw	0
  1501  00011C  6FA1               	movwf	main@prevSodaIR& (0+255),b
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 176: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1505  00011E  0E01               	movlw	1
  1506  000120  ECC8  F015         	call	_lcdInst
  1507  000124  0E34               	movlw	52
  1508  000126  0100               	movlb	0	; () banked
  1509  000128  6F89               	movwf	??_main& (0+255),b
  1510  00012A  0EF1               	movlw	241
  1511  00012C                     u7897:
  1512  00012C  2EE8               	decfsz	wreg,f,c
  1513  00012E  D7FE               	bra	u7897
  1514  000130  2F89               	decfsz	??_main& (0+255),f,b
  1515  000132  D7FC               	bra	u7897
  1516  000134  D000               	nop2	
  1517                           
  1518                           ;main.c: 177: printf("Sorting cans...");
  1519  000136  0E16               	movlw	low STR_1
  1520  000138  6E2D               	movwf	printf@f,c
  1521  00013A  0EFF               	movlw	high STR_1
  1522  00013C  6E2E               	movwf	printf@f+1,c
  1523  00013E  EC00  F009         	call	_printf	;wreg free
  1524                           
  1525                           ;main.c: 178: lcdInst(0b11000000);;
  1526  000142  0EC0               	movlw	192
  1527  000144  ECC8  F015         	call	_lcdInst
  1528                           
  1529                           ;main.c: 179: printf("Any key to stop");
  1530  000148  0E56               	movlw	low STR_2
  1531  00014A  6E2D               	movwf	printf@f,c
  1532  00014C  0EFF               	movlw	high STR_2
  1533  00014E  6E2E               	movwf	printf@f+1,c
  1534  000150  EC00  F009         	call	_printf	;wreg free
  1535                           
  1536                           ;main.c: 181: while(soupSteps < 14){
  1537  000154  D004               	goto	l5668
  1538  000156                     l5666:
  1539                           
  1540                           ;main.c: 182: S2mode = 2;
  1541  000156  0E00               	movlw	0
  1542  000158  6E5A               	movwf	_S2mode+1,c
  1543  00015A  0E02               	movlw	2
  1544  00015C  6E59               	movwf	_S2mode,c
  1545  00015E                     l5668:
  1546  00015E  BE56               	btfsc	_soupSteps+1,7,c
  1547  000160  D7FA               	goto	l5666
  1548  000162  5056               	movf	_soupSteps+1,w,c
  1549  000164  E104               	bnz	l5670
  1550  000166  0E0E               	movlw	14
  1551  000168  5C55               	subwf	_soupSteps,w,c
  1552  00016A  A0D8               	btfss	status,0,c
  1553  00016C  D7F4               	goto	l5666
  1554  00016E                     l5670:
  1555                           
  1556                           ;main.c: 183: }
  1557                           ;main.c: 184: S2mode = 4;
  1558  00016E  0E00               	movlw	0
  1559  000170  6E5A               	movwf	_S2mode+1,c
  1560  000172  0E04               	movlw	4
  1561  000174  6E59               	movwf	_S2mode,c
  1562                           
  1563                           ;main.c: 185: calibrateWheels();
  1564  000176  EC4F  F010         	call	_calibrateWheels	;wreg free
  1565                           
  1566                           ;main.c: 186: if(s1 == 2 || s1 == 3){S1mode = 3;}
  1567  00017A  0E02               	movlw	2
  1568  00017C  0100               	movlb	0	; () banked
  1569  00017E  19B8               	xorwf	_s1& (0+255),w,b
  1570  000180  0100               	movlb	0	; () banked
  1571  000182  11B9               	iorwf	(_s1+1)& (0+255),w,b
  1572  000184  B4D8               	btfsc	status,2,c
  1573  000186  D007               	goto	l5678
  1574                           
  1575                           ; BSR set to: 0
  1576  000188  0E03               	movlw	3
  1577  00018A  0100               	movlb	0	; () banked
  1578  00018C  19B8               	xorwf	_s1& (0+255),w,b
  1579  00018E  0100               	movlb	0	; () banked
  1580  000190  11B9               	iorwf	(_s1+1)& (0+255),w,b
  1581  000192  A4D8               	btfss	status,2,c
  1582  000194  D004               	goto	l5680
  1583  000196                     l5678:
  1584                           
  1585                           ; BSR set to: 0
  1586  000196  0E00               	movlw	0
  1587  000198  6E5C               	movwf	_S1mode+1,c
  1588  00019A  0E03               	movlw	3
  1589  00019C  D003               	goto	L1
  1590  00019E                     l5680:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 187: else{S1mode = 5;}
  1594  00019E  0E00               	movlw	0
  1595  0001A0  6E5C               	movwf	_S1mode+1,c
  1596  0001A2  0E05               	movlw	5
  1597  0001A4                     L1:
  1598  0001A4  6E5B               	movwf	_S1mode,c
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 188: if(s3 == 2 || s3 == 3){S3mode = 3;}
  1602                           
  1603                           ; BSR set to: 0
  1604  0001A6  0E02               	movlw	2
  1605  0001A8  0100               	movlb	0	; () banked
  1606  0001AA  19B6               	xorwf	_s3& (0+255),w,b
  1607  0001AC  0100               	movlb	0	; () banked
  1608  0001AE  11B7               	iorwf	(_s3+1)& (0+255),w,b
  1609  0001B0  B4D8               	btfsc	status,2,c
  1610  0001B2  D007               	goto	l5686
  1611                           
  1612                           ; BSR set to: 0
  1613  0001B4  0E03               	movlw	3
  1614  0001B6  0100               	movlb	0	; () banked
  1615  0001B8  19B6               	xorwf	_s3& (0+255),w,b
  1616  0001BA  0100               	movlb	0	; () banked
  1617  0001BC  11B7               	iorwf	(_s3+1)& (0+255),w,b
  1618  0001BE  A4D8               	btfss	status,2,c
  1619  0001C0  D004               	goto	l5688
  1620  0001C2                     l5686:
  1621                           
  1622                           ; BSR set to: 0
  1623  0001C2  0E00               	movlw	0
  1624  0001C4  6E58               	movwf	_S3mode+1,c
  1625  0001C6  0E03               	movlw	3
  1626  0001C8  D003               	goto	L2
  1627  0001CA                     l5688:
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;main.c: 189: else{S3mode = 5;}
  1631  0001CA  0E00               	movlw	0
  1632  0001CC  6E58               	movwf	_S3mode+1,c
  1633  0001CE  0E05               	movlw	5
  1634  0001D0                     L2:
  1635  0001D0  6E57               	movwf	_S3mode,c
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;main.c: 190: PWM2(900, 1);
  1639                           
  1640                           ; BSR set to: 0
  1641  0001D2  0E03               	movlw	3
  1642  0001D4  6E22               	movwf	PWM2@duty+1,c
  1643  0001D6  0E84               	movlw	132
  1644  0001D8  6E21               	movwf	PWM2@duty,c
  1645  0001DA  0E00               	movlw	0
  1646  0001DC  6E24               	movwf	PWM2@dir+1,c
  1647  0001DE  0E01               	movlw	1
  1648  0001E0  6E23               	movwf	PWM2@dir,c
  1649  0001E2  EC0C  F013         	call	_PWM2	;wreg free
  1650                           
  1651                           ;main.c: 191: PWM1(400);
  1652  0001E6  0E01               	movlw	1
  1653  0001E8  6E22               	movwf	PWM1@duty+1,c
  1654  0001EA  0E90               	movlw	144
  1655  0001EC  6E21               	movwf	PWM1@duty,c
  1656  0001EE  EC8D  F014         	call	_PWM1	;wreg free
  1657                           
  1658                           ;main.c: 193: keypress = (0);
  1659  0001F2  0E00               	movlw	0
  1660  0001F4  0100               	movlb	0	; () banked
  1661  0001F6  6FBA               	movwf	_keypress& (0+255),b	;volatile
  1662                           
  1663                           ;main.c: 195: }
  1664  0001F8  D736               	goto	l5640
  1665  0001FA                     l5694:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 196: else if(keypress == 3){
  1669  0001FA  0E03               	movlw	3
  1670  0001FC  0100               	movlb	0	; () banked
  1671  0001FE  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  1672  000200  A4D8               	btfss	status,2,c
  1673  000202  D01D               	goto	l5698
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 197: displayLog(1);
  1677  000204  0E00               	movlw	0
  1678  000206  0100               	movlb	0	; () banked
  1679  000208  6F81               	movwf	(displayLog@run+1)& (0+255),b
  1680  00020A  0E01               	movlw	1
  1681  00020C  6F80               	movwf	displayLog@run& (0+255),b
  1682  00020E  EC40  F007         	call	_displayLog	;wreg free
  1683                           
  1684                           ;main.c: 198: displayLog(2);
  1685  000212  0E00               	movlw	0
  1686  000214  0100               	movlb	0	; () banked
  1687  000216  6F81               	movwf	(displayLog@run+1)& (0+255),b
  1688  000218  0E02               	movlw	2
  1689  00021A  6F80               	movwf	displayLog@run& (0+255),b
  1690  00021C  EC40  F007         	call	_displayLog	;wreg free
  1691                           
  1692                           ;main.c: 199: displayLog(3);
  1693  000220  0E00               	movlw	0
  1694  000222  0100               	movlb	0	; () banked
  1695  000224  6F81               	movwf	(displayLog@run+1)& (0+255),b
  1696  000226  0E03               	movlw	3
  1697  000228  6F80               	movwf	displayLog@run& (0+255),b
  1698  00022A  EC40  F007         	call	_displayLog	;wreg free
  1699                           
  1700                           ;main.c: 200: displayLog(4);
  1701  00022E  0E00               	movlw	0
  1702  000230  0100               	movlb	0	; () banked
  1703  000232  6F81               	movwf	(displayLog@run+1)& (0+255),b
  1704  000234  0E04               	movlw	4
  1705  000236  6F80               	movwf	displayLog@run& (0+255),b
  1706  000238  EC40  F007         	call	_displayLog	;wreg free
  1707                           
  1708                           ;main.c: 201: }
  1709  00023C  D714               	goto	l5640
  1710  00023E                     l5698:
  1711                           
  1712                           ;main.c: 202: else if(keypress == 15 ) {
  1713  00023E  0E0F               	movlw	15
  1714  000240  0100               	movlb	0	; () banked
  1715  000242  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  1716  000244  A4D8               	btfss	status,2,c
  1717  000246  D70F               	goto	l5640
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 203: standby = 2;
  1721  000248  0E00               	movlw	0
  1722  00024A  0100               	movlb	0	; () banked
  1723  00024C  6FA6               	movwf	(main@standby+1)& (0+255),b
  1724  00024E  0E02               	movlw	2
  1725  000250  6FA5               	movwf	main@standby& (0+255),b
  1726                           
  1727                           ;main.c: 204: s = 1;
  1728  000252  0E00               	movlw	0
  1729  000254  0100               	movlb	0	; () banked
  1730  000256  6F90               	movwf	(main@s+1)& (0+255),b
  1731  000258  0E01               	movlw	1
  1732  00025A  6F8F               	movwf	main@s& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 205: }
  1736                           ;main.c: 207: }
  1737                           
  1738                           ; BSR set to: 0
  1739                           
  1740                           ; BSR set to: 0
  1741  00025C  D704               	goto	l5640
  1742  00025E                     l5702:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 208: else if(standby == 2){
  1746  00025E  0E02               	movlw	2
  1747  000260  0100               	movlb	0	; () banked
  1748  000262  19A5               	xorwf	main@standby& (0+255),w,b
  1749  000264  0100               	movlb	0	; () banked
  1750  000266  11A6               	iorwf	(main@standby+1)& (0+255),w,b
  1751  000268  A4D8               	btfss	status,2,c
  1752  00026A  D25B               	goto	l5940
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 211: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1756  00026C  0E01               	movlw	1
  1757  00026E  ECC8  F015         	call	_lcdInst
  1758  000272  0E34               	movlw	52
  1759  000274  0100               	movlb	0	; () banked
  1760  000276  6F89               	movwf	??_main& (0+255),b
  1761  000278  0EF1               	movlw	241
  1762  00027A                     u7907:
  1763  00027A  2EE8               	decfsz	wreg,f,c
  1764  00027C  D7FE               	bra	u7907
  1765  00027E  2F89               	decfsz	??_main& (0+255),f,b
  1766  000280  D7FC               	bra	u7907
  1767  000282  D000               	nop2	
  1768                           
  1769                           ;main.c: 212: printf("testing PWM2 CW");
  1770  000284  0E26               	movlw	low STR_3
  1771  000286  6E2D               	movwf	printf@f,c
  1772  000288  0EFF               	movlw	high STR_3
  1773  00028A  6E2E               	movwf	printf@f+1,c
  1774  00028C  EC00  F009         	call	_printf	;wreg free
  1775                           
  1776                           ;main.c: 213: PWM2(900, 1);
  1777  000290  0E03               	movlw	3
  1778  000292  6E22               	movwf	PWM2@duty+1,c
  1779  000294  0E84               	movlw	132
  1780  000296  6E21               	movwf	PWM2@duty,c
  1781  000298  0E00               	movlw	0
  1782  00029A  6E24               	movwf	PWM2@dir+1,c
  1783  00029C  0E01               	movlw	1
  1784  00029E  6E23               	movwf	PWM2@dir,c
  1785  0002A0  EC0C  F013         	call	_PWM2	;wreg free
  1786                           
  1787                           ;main.c: 214: keycheck();
  1788  0002A4  EC9E  F015         	call	_keycheck	;wreg free
  1789                           
  1790                           ;main.c: 216: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1791  0002A8  0E01               	movlw	1
  1792  0002AA  ECC8  F015         	call	_lcdInst
  1793  0002AE  0E34               	movlw	52
  1794  0002B0  0100               	movlb	0	; () banked
  1795  0002B2  6F89               	movwf	??_main& (0+255),b
  1796  0002B4  0EF1               	movlw	241
  1797  0002B6                     u7917:
  1798  0002B6  2EE8               	decfsz	wreg,f,c
  1799  0002B8  D7FE               	bra	u7917
  1800  0002BA  2F89               	decfsz	??_main& (0+255),f,b
  1801  0002BC  D7FC               	bra	u7917
  1802  0002BE  D000               	nop2	
  1803                           
  1804                           ;main.c: 217: printf("testing PWM2 CCW");
  1805  0002C0  0EC4               	movlw	low STR_4
  1806  0002C2  6E2D               	movwf	printf@f,c
  1807  0002C4  0EFE               	movlw	high STR_4
  1808  0002C6  6E2E               	movwf	printf@f+1,c
  1809  0002C8  EC00  F009         	call	_printf	;wreg free
  1810                           
  1811                           ;main.c: 218: PWM2(900, 2);
  1812  0002CC  0E03               	movlw	3
  1813  0002CE  6E22               	movwf	PWM2@duty+1,c
  1814  0002D0  0E84               	movlw	132
  1815  0002D2  6E21               	movwf	PWM2@duty,c
  1816  0002D4  0E00               	movlw	0
  1817  0002D6  6E24               	movwf	PWM2@dir+1,c
  1818  0002D8  0E02               	movlw	2
  1819  0002DA  6E23               	movwf	PWM2@dir,c
  1820  0002DC  EC0C  F013         	call	_PWM2	;wreg free
  1821                           
  1822                           ;main.c: 219: keycheck();
  1823  0002E0  EC9E  F015         	call	_keycheck	;wreg free
  1824                           
  1825                           ;main.c: 221: PWM2off();
  1826  0002E4  ECD3  F015         	call	_PWM2off	;wreg free
  1827                           
  1828                           ;main.c: 223: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1829  0002E8  0E01               	movlw	1
  1830  0002EA  ECC8  F015         	call	_lcdInst
  1831  0002EE  0E34               	movlw	52
  1832  0002F0  0100               	movlb	0	; () banked
  1833  0002F2  6F89               	movwf	??_main& (0+255),b
  1834  0002F4  0EF1               	movlw	241
  1835  0002F6                     u7927:
  1836  0002F6  2EE8               	decfsz	wreg,f,c
  1837  0002F8  D7FE               	bra	u7927
  1838  0002FA  2F89               	decfsz	??_main& (0+255),f,b
  1839  0002FC  D7FC               	bra	u7927
  1840  0002FE  D000               	nop2	
  1841                           
  1842                           ;main.c: 224: printf("testing S f");
  1843  000300  0EC7               	movlw	low STR_5
  1844  000302  6E2D               	movwf	printf@f,c
  1845  000304  0EFF               	movlw	high STR_5
  1846  000306  6E2E               	movwf	printf@f+1,c
  1847  000308  EC00  F009         	call	_printf	;wreg free
  1848                           
  1849                           ;main.c: 225: S1mode = 1;
  1850  00030C  0E00               	movlw	0
  1851  00030E  6E5C               	movwf	_S1mode+1,c
  1852  000310  0E01               	movlw	1
  1853  000312  6E5B               	movwf	_S1mode,c
  1854                           
  1855                           ;main.c: 226: S2mode = 1;
  1856  000314  0E00               	movlw	0
  1857  000316  6E5A               	movwf	_S2mode+1,c
  1858  000318  0E01               	movlw	1
  1859  00031A  6E59               	movwf	_S2mode,c
  1860                           
  1861                           ;main.c: 227: S3mode = 1;
  1862  00031C  0E00               	movlw	0
  1863  00031E  6E58               	movwf	_S3mode+1,c
  1864  000320  0E01               	movlw	1
  1865  000322  6E57               	movwf	_S3mode,c
  1866                           
  1867                           ;main.c: 228: keycheck();
  1868  000324  EC9E  F015         	call	_keycheck	;wreg free
  1869                           
  1870                           ;main.c: 230: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1871  000328  0E01               	movlw	1
  1872  00032A  ECC8  F015         	call	_lcdInst
  1873  00032E  0E34               	movlw	52
  1874  000330  0100               	movlb	0	; () banked
  1875  000332  6F89               	movwf	??_main& (0+255),b
  1876  000334  0EF1               	movlw	241
  1877  000336                     u7937:
  1878  000336  2EE8               	decfsz	wreg,f,c
  1879  000338  D7FE               	bra	u7937
  1880  00033A  2F89               	decfsz	??_main& (0+255),f,b
  1881  00033C  D7FC               	bra	u7937
  1882  00033E  D000               	nop2	
  1883                           
  1884                           ;main.c: 231: printf("testing S b");
  1885  000340  0EAF               	movlw	low STR_6
  1886  000342  6E2D               	movwf	printf@f,c
  1887  000344  0EFF               	movlw	high STR_6
  1888  000346  6E2E               	movwf	printf@f+1,c
  1889  000348  EC00  F009         	call	_printf	;wreg free
  1890                           
  1891                           ;main.c: 232: S1mode = 2;
  1892  00034C  0E00               	movlw	0
  1893  00034E  6E5C               	movwf	_S1mode+1,c
  1894  000350  0E02               	movlw	2
  1895  000352  6E5B               	movwf	_S1mode,c
  1896                           
  1897                           ;main.c: 233: S2mode = 2;
  1898  000354  0E00               	movlw	0
  1899  000356  6E5A               	movwf	_S2mode+1,c
  1900  000358  0E02               	movlw	2
  1901  00035A  6E59               	movwf	_S2mode,c
  1902                           
  1903                           ;main.c: 234: S3mode = 2;
  1904  00035C  0E00               	movlw	0
  1905  00035E  6E58               	movwf	_S3mode+1,c
  1906  000360  0E02               	movlw	2
  1907  000362  6E57               	movwf	_S3mode,c
  1908                           
  1909                           ;main.c: 235: keycheck();
  1910  000364  EC9E  F015         	call	_keycheck	;wreg free
  1911                           
  1912                           ;main.c: 237: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1913  000368  0E01               	movlw	1
  1914  00036A  ECC8  F015         	call	_lcdInst
  1915  00036E  0E34               	movlw	52
  1916  000370  0100               	movlb	0	; () banked
  1917  000372  6F89               	movwf	??_main& (0+255),b
  1918  000374  0EF1               	movlw	241
  1919  000376                     u7947:
  1920  000376  2EE8               	decfsz	wreg,f,c
  1921  000378  D7FE               	bra	u7947
  1922  00037A  2F89               	decfsz	??_main& (0+255),f,b
  1923  00037C  D7FC               	bra	u7947
  1924  00037E  D000               	nop2	
  1925                           
  1926                           ;main.c: 238: printf("testing S shake");
  1927  000380  0E36               	movlw	low STR_7
  1928  000382  6E2D               	movwf	printf@f,c
  1929  000384  0EFF               	movlw	high STR_7
  1930  000386  6E2E               	movwf	printf@f+1,c
  1931  000388  EC00  F009         	call	_printf	;wreg free
  1932                           
  1933                           ;main.c: 239: S1mode = 3;
  1934  00038C  0E00               	movlw	0
  1935  00038E  6E5C               	movwf	_S1mode+1,c
  1936  000390  0E03               	movlw	3
  1937  000392  6E5B               	movwf	_S1mode,c
  1938                           
  1939                           ;main.c: 240: S2mode = 3;
  1940  000394  0E00               	movlw	0
  1941  000396  6E5A               	movwf	_S2mode+1,c
  1942  000398  0E03               	movlw	3
  1943  00039A  6E59               	movwf	_S2mode,c
  1944                           
  1945                           ;main.c: 241: S3mode = 3;
  1946  00039C  0E00               	movlw	0
  1947  00039E  6E58               	movwf	_S3mode+1,c
  1948  0003A0  0E03               	movlw	3
  1949  0003A2  6E57               	movwf	_S3mode,c
  1950                           
  1951                           ;main.c: 242: keycheck();
  1952  0003A4  EC9E  F015         	call	_keycheck	;wreg free
  1953                           
  1954                           ;main.c: 244: S1mode = 4;
  1955  0003A8  0E00               	movlw	0
  1956  0003AA  6E5C               	movwf	_S1mode+1,c
  1957  0003AC  0E04               	movlw	4
  1958  0003AE  6E5B               	movwf	_S1mode,c
  1959                           
  1960                           ;main.c: 245: S2mode = 4;
  1961  0003B0  0E00               	movlw	0
  1962  0003B2  6E5A               	movwf	_S2mode+1,c
  1963  0003B4  0E04               	movlw	4
  1964  0003B6  6E59               	movwf	_S2mode,c
  1965                           
  1966                           ;main.c: 246: S3mode = 4;
  1967  0003B8  0E00               	movlw	0
  1968  0003BA  6E58               	movwf	_S3mode+1,c
  1969  0003BC  0E04               	movlw	4
  1970  0003BE  6E57               	movwf	_S3mode,c
  1971                           
  1972                           ;main.c: 248: keypress = (0);
  1973  0003C0  0E00               	movlw	0
  1974  0003C2  0100               	movlb	0	; () banked
  1975  0003C4  6FBA               	movwf	_keypress& (0+255),b	;volatile
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 249: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1979  0003C6  0E01               	movlw	1
  1980  0003C8  ECC8  F015         	call	_lcdInst
  1981  0003CC  0E34               	movlw	52
  1982  0003CE  0100               	movlb	0	; () banked
  1983  0003D0  6F89               	movwf	??_main& (0+255),b
  1984  0003D2  0EF1               	movlw	241
  1985  0003D4                     u7957:
  1986  0003D4  2EE8               	decfsz	wreg,f,c
  1987  0003D6  D7FE               	bra	u7957
  1988  0003D8  2F89               	decfsz	??_main& (0+255),f,b
  1989  0003DA  D7FC               	bra	u7957
  1990  0003DC  D000               	nop2	
  1991                           
  1992                           ;main.c: 250: printf("testing S1 pins");
  1993  0003DE  0E66               	movlw	low STR_8
  1994  0003E0  6E2D               	movwf	printf@f,c
  1995  0003E2  0EFF               	movlw	high STR_8
  1996  0003E4  6E2E               	movwf	printf@f+1,c
  1997  0003E6  EC00  F009         	call	_printf	;wreg free
  1998                           
  1999                           ;main.c: 251: while(keypress!=3){
  2000  0003EA  D032               	goto	l5802
  2001  0003EC                     l5780:
  2002                           
  2003                           ;main.c: 253: keyinterrupt();
  2004  0003EC  EC93  F015         	call	_keyinterrupt	;wreg free
  2005                           
  2006                           ;main.c: 255: if (keypress == 2){LATDbits.LATD1 = 1;}
  2007  0003F0  0E02               	movlw	2
  2008  0003F2  0100               	movlb	0	; () banked
  2009  0003F4  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2010  0003F6  A4D8               	btfss	status,2,c
  2011  0003F8  D002               	goto	l216
  2012                           
  2013                           ; BSR set to: 0
  2014  0003FA  828C               	bsf	3980,1,c	;volatile
  2015  0003FC  D001               	goto	l5786
  2016  0003FE                     l216:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 256: else{LATDbits.LATD1 = 0;}
  2020  0003FE  928C               	bcf	3980,1,c	;volatile
  2021  000400                     l5786:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;main.c: 257: if (keypress == 6){LATBbits.LATB3 = 1;}
  2025  000400  0E06               	movlw	6
  2026  000402  0100               	movlb	0	; () banked
  2027  000404  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2028  000406  A4D8               	btfss	status,2,c
  2029  000408  D002               	goto	l218
  2030                           
  2031                           ; BSR set to: 0
  2032  00040A  868A               	bsf	3978,3,c	;volatile
  2033  00040C  D001               	goto	l5790
  2034  00040E                     l218:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;main.c: 258: else{LATBbits.LATB3 = 0;}
  2038  00040E  968A               	bcf	3978,3,c	;volatile
  2039  000410                     l5790:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 259: if (keypress == 10){LATBbits.LATB2 = 1;}
  2043  000410  0E0A               	movlw	10
  2044  000412  0100               	movlb	0	; () banked
  2045  000414  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2046  000416  A4D8               	btfss	status,2,c
  2047  000418  D002               	goto	l220
  2048                           
  2049                           ; BSR set to: 0
  2050  00041A  848A               	bsf	3978,2,c	;volatile
  2051  00041C  D001               	goto	l5794
  2052  00041E                     l220:
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;main.c: 260: else{LATBbits.LATB2 = 0;}
  2056  00041E  948A               	bcf	3978,2,c	;volatile
  2057  000420                     l5794:
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 261: if (keypress == 14){LATBbits.LATB0 = 1;}
  2061  000420  0E0E               	movlw	14
  2062  000422  0100               	movlb	0	; () banked
  2063  000424  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2064  000426  A4D8               	btfss	status,2,c
  2065  000428  D002               	goto	l222
  2066                           
  2067                           ; BSR set to: 0
  2068  00042A  808A               	bsf	3978,0,c	;volatile
  2069  00042C  D001               	goto	l5798
  2070  00042E                     l222:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;main.c: 262: else{LATBbits.LATB0 = 0;}
  2074  00042E  908A               	bcf	3978,0,c	;volatile
  2075  000430                     l5798:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 264: readADC(1);
  2079  000430  0E01               	movlw	1
  2080  000432  EC72  F015         	call	_readADC
  2081                           
  2082                           ;main.c: 265: lcdInst(0b11000000);;
  2083  000436  0EC0               	movlw	192
  2084  000438  ECC8  F015         	call	_lcdInst
  2085                           
  2086                           ;main.c: 266: printf("%x", ADRES);
  2087  00043C  0EFB               	movlw	low STR_9
  2088  00043E  6E2D               	movwf	printf@f,c
  2089  000440  0EFF               	movlw	high STR_9
  2090  000442  6E2E               	movwf	printf@f+1,c
  2091  000444  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2092  000448  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2093  00044C  EC00  F009         	call	_printf	;wreg free
  2094  000450                     l5802:
  2095  000450  0E03               	movlw	3
  2096  000452  0100               	movlb	0	; () banked
  2097  000454  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2098  000456  A4D8               	btfss	status,2,c
  2099  000458  D7C9               	goto	l5780
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;main.c: 267: }
  2103                           ;main.c: 269: keypress = (0);
  2104                           
  2105                           ; BSR set to: 0
  2106  00045A  0E00               	movlw	0
  2107  00045C  0100               	movlb	0	; () banked
  2108  00045E  6FBA               	movwf	_keypress& (0+255),b	;volatile
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;main.c: 270: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2112  000460  0E01               	movlw	1
  2113  000462  ECC8  F015         	call	_lcdInst
  2114  000466  0E34               	movlw	52
  2115  000468  0100               	movlb	0	; () banked
  2116  00046A  6F89               	movwf	??_main& (0+255),b
  2117  00046C  0EF1               	movlw	241
  2118  00046E                     u7967:
  2119  00046E  2EE8               	decfsz	wreg,f,c
  2120  000470  D7FE               	bra	u7967
  2121  000472  2F89               	decfsz	??_main& (0+255),f,b
  2122  000474  D7FC               	bra	u7967
  2123  000476  D000               	nop2	
  2124                           
  2125                           ;main.c: 271: printf("testing S2 pins");
  2126  000478  0E76               	movlw	low STR_10
  2127  00047A  6E2D               	movwf	printf@f,c
  2128  00047C  0EFF               	movlw	high STR_10
  2129  00047E  6E2E               	movwf	printf@f+1,c
  2130  000480  EC00  F009         	call	_printf	;wreg free
  2131                           
  2132                           ;main.c: 272: while(keypress!=3){
  2133  000484  D022               	goto	l5830
  2134  000486                     l5812:
  2135                           
  2136                           ;main.c: 274: keyinterrupt();
  2137  000486  EC93  F015         	call	_keyinterrupt	;wreg free
  2138                           
  2139                           ;main.c: 276: if (keypress == 2){LATCbits.LATC7 = 1;}
  2140  00048A  0E02               	movlw	2
  2141  00048C  0100               	movlb	0	; () banked
  2142  00048E  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2143  000490  A4D8               	btfss	status,2,c
  2144  000492  D002               	goto	l227
  2145                           
  2146                           ; BSR set to: 0
  2147  000494  8E8B               	bsf	3979,7,c	;volatile
  2148  000496  D001               	goto	l5818
  2149  000498                     l227:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;main.c: 277: else{LATCbits.LATC7 = 0;}
  2153  000498  9E8B               	bcf	3979,7,c	;volatile
  2154  00049A                     l5818:
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;main.c: 278: if (keypress == 6){LATCbits.LATC6 = 1;}
  2158  00049A  0E06               	movlw	6
  2159  00049C  0100               	movlb	0	; () banked
  2160  00049E  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2161  0004A0  A4D8               	btfss	status,2,c
  2162  0004A2  D002               	goto	l229
  2163                           
  2164                           ; BSR set to: 0
  2165  0004A4  8C8B               	bsf	3979,6,c	;volatile
  2166  0004A6  D001               	goto	l5822
  2167  0004A8                     l229:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;main.c: 279: else{LATCbits.LATC6 = 0;}
  2171  0004A8  9C8B               	bcf	3979,6,c	;volatile
  2172  0004AA                     l5822:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;main.c: 280: if (keypress == 10){LATCbits.LATC0 = 1;}
  2176  0004AA  0E0A               	movlw	10
  2177  0004AC  0100               	movlb	0	; () banked
  2178  0004AE  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2179  0004B0  A4D8               	btfss	status,2,c
  2180  0004B2  D002               	goto	l231
  2181                           
  2182                           ; BSR set to: 0
  2183  0004B4  808B               	bsf	3979,0,c	;volatile
  2184  0004B6  D001               	goto	l5826
  2185  0004B8                     l231:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;main.c: 281: else{LATCbits.LATC0 = 0;}
  2189  0004B8  908B               	bcf	3979,0,c	;volatile
  2190  0004BA                     l5826:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 282: if (keypress == 14){LATCbits.LATC5 = 1;}
  2194  0004BA  0E0E               	movlw	14
  2195  0004BC  0100               	movlb	0	; () banked
  2196  0004BE  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2197  0004C0  A4D8               	btfss	status,2,c
  2198  0004C2  D002               	goto	l233
  2199                           
  2200                           ; BSR set to: 0
  2201  0004C4  8A8B               	bsf	3979,5,c	;volatile
  2202  0004C6  D001               	goto	l5830
  2203  0004C8                     l233:
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;main.c: 283: else{LATCbits.LATC5 = 0;}
  2207  0004C8  9A8B               	bcf	3979,5,c	;volatile
  2208  0004CA                     l5830:
  2209  0004CA  0E03               	movlw	3
  2210  0004CC  0100               	movlb	0	; () banked
  2211  0004CE  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2212  0004D0  A4D8               	btfss	status,2,c
  2213  0004D2  D7D9               	goto	l5812
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;main.c: 284: }
  2217                           ;main.c: 286: keypress = (0);
  2218                           
  2219                           ; BSR set to: 0
  2220  0004D4  0E00               	movlw	0
  2221  0004D6  0100               	movlb	0	; () banked
  2222  0004D8  6FBA               	movwf	_keypress& (0+255),b	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;main.c: 287: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2226  0004DA  0E01               	movlw	1
  2227  0004DC  ECC8  F015         	call	_lcdInst
  2228  0004E0  0E34               	movlw	52
  2229  0004E2  0100               	movlb	0	; () banked
  2230  0004E4  6F89               	movwf	??_main& (0+255),b
  2231  0004E6  0EF1               	movlw	241
  2232  0004E8                     u7977:
  2233  0004E8  2EE8               	decfsz	wreg,f,c
  2234  0004EA  D7FE               	bra	u7977
  2235  0004EC  2F89               	decfsz	??_main& (0+255),f,b
  2236  0004EE  D7FC               	bra	u7977
  2237  0004F0  D000               	nop2	
  2238                           
  2239                           ;main.c: 288: printf("testing S3 pins");
  2240  0004F2  0E86               	movlw	low STR_11
  2241  0004F4  6E2D               	movwf	printf@f,c
  2242  0004F6  0EFF               	movlw	high STR_11
  2243  0004F8  6E2E               	movwf	printf@f+1,c
  2244  0004FA  EC00  F009         	call	_printf	;wreg free
  2245                           
  2246                           ;main.c: 289: while(keypress!=3){
  2247  0004FE  D032               	goto	l5862
  2248  000500                     l5840:
  2249                           
  2250                           ;main.c: 291: keyinterrupt();
  2251  000500  EC93  F015         	call	_keyinterrupt	;wreg free
  2252                           
  2253                           ;main.c: 293: if (keypress == 2){LATEbits.LATE2 = 1;}
  2254  000504  0E02               	movlw	2
  2255  000506  0100               	movlb	0	; () banked
  2256  000508  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2257  00050A  A4D8               	btfss	status,2,c
  2258  00050C  D002               	goto	l238
  2259                           
  2260                           ; BSR set to: 0
  2261  00050E  848D               	bsf	3981,2,c	;volatile
  2262  000510  D001               	goto	l5846
  2263  000512                     l238:
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;main.c: 294: else{LATEbits.LATE2 = 0;}
  2267  000512  948D               	bcf	3981,2,c	;volatile
  2268  000514                     l5846:
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;main.c: 295: if (keypress == 6){LATEbits.LATE1 = 1;}
  2272  000514  0E06               	movlw	6
  2273  000516  0100               	movlb	0	; () banked
  2274  000518  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2275  00051A  A4D8               	btfss	status,2,c
  2276  00051C  D002               	goto	l240
  2277                           
  2278                           ; BSR set to: 0
  2279  00051E  828D               	bsf	3981,1,c	;volatile
  2280  000520  D001               	goto	l5850
  2281  000522                     l240:
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;main.c: 296: else{LATEbits.LATE1 = 0;}
  2285  000522  928D               	bcf	3981,1,c	;volatile
  2286  000524                     l5850:
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;main.c: 297: if (keypress == 10){LATAbits.LATA4 = 1;}
  2290  000524  0E0A               	movlw	10
  2291  000526  0100               	movlb	0	; () banked
  2292  000528  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2293  00052A  A4D8               	btfss	status,2,c
  2294  00052C  D002               	goto	l242
  2295                           
  2296                           ; BSR set to: 0
  2297  00052E  8889               	bsf	3977,4,c	;volatile
  2298  000530  D001               	goto	l5854
  2299  000532                     l242:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 298: else{LATAbits.LATA4 = 0;}
  2303  000532  9889               	bcf	3977,4,c	;volatile
  2304  000534                     l5854:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 299: if (keypress == 14){LATDbits.LATD0 = 1;}
  2308  000534  0E0E               	movlw	14
  2309  000536  0100               	movlb	0	; () banked
  2310  000538  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2311  00053A  A4D8               	btfss	status,2,c
  2312  00053C  D002               	goto	l244
  2313                           
  2314                           ; BSR set to: 0
  2315  00053E  808C               	bsf	3980,0,c	;volatile
  2316  000540  D001               	goto	l5858
  2317  000542                     l244:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;main.c: 300: else{LATDbits.LATD0 = 0;}
  2321  000542  908C               	bcf	3980,0,c	;volatile
  2322  000544                     l5858:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;main.c: 302: readADC(5);
  2326  000544  0E05               	movlw	5
  2327  000546  EC72  F015         	call	_readADC
  2328                           
  2329                           ;main.c: 303: lcdInst(0b11000000);;
  2330  00054A  0EC0               	movlw	192
  2331  00054C  ECC8  F015         	call	_lcdInst
  2332                           
  2333                           ;main.c: 304: printf("%x", ADRES);
  2334  000550  0EFB               	movlw	low STR_9
  2335  000552  6E2D               	movwf	printf@f,c
  2336  000554  0EFF               	movlw	high STR_9
  2337  000556  6E2E               	movwf	printf@f+1,c
  2338  000558  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2339  00055C  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2340  000560  EC00  F009         	call	_printf	;wreg free
  2341  000564                     l5862:
  2342  000564  0E03               	movlw	3
  2343  000566  0100               	movlb	0	; () banked
  2344  000568  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  2345  00056A  A4D8               	btfss	status,2,c
  2346  00056C  D7C9               	goto	l5840
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;main.c: 305: }
  2350                           ;main.c: 307: S1mode = 0;
  2351                           
  2352                           ; BSR set to: 0
  2353  00056E  0E00               	movlw	0
  2354  000570  6E5C               	movwf	_S1mode+1,c
  2355  000572  0E00               	movlw	0
  2356  000574  6E5B               	movwf	_S1mode,c
  2357                           
  2358                           ;main.c: 308: S2mode = 0;
  2359  000576  0E00               	movlw	0
  2360  000578  6E5A               	movwf	_S2mode+1,c
  2361  00057A  0E00               	movlw	0
  2362  00057C  6E59               	movwf	_S2mode,c
  2363                           
  2364                           ;main.c: 309: S3mode = 0;
  2365  00057E  0E00               	movlw	0
  2366  000580  6E58               	movwf	_S3mode+1,c
  2367  000582  0E00               	movlw	0
  2368  000584  6E57               	movwf	_S3mode,c
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;main.c: 311: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2372  000586  0E01               	movlw	1
  2373  000588  ECC8  F015         	call	_lcdInst
  2374  00058C  0E34               	movlw	52
  2375  00058E  0100               	movlb	0	; () banked
  2376  000590  6F89               	movwf	??_main& (0+255),b
  2377  000592  0EF1               	movlw	241
  2378  000594                     u7987:
  2379  000594  2EE8               	decfsz	wreg,f,c
  2380  000596  D7FE               	bra	u7987
  2381  000598  2F89               	decfsz	??_main& (0+255),f,b
  2382  00059A  D7FC               	bra	u7987
  2383  00059C  D000               	nop2	
  2384                           
  2385                           ;main.c: 312: printf("testing PWM1");
  2386  00059E  0E96               	movlw	low STR_13
  2387  0005A0  6E2D               	movwf	printf@f,c
  2388  0005A2  0EFF               	movlw	high STR_13
  2389  0005A4  6E2E               	movwf	printf@f+1,c
  2390  0005A6  EC00  F009         	call	_printf	;wreg free
  2391                           
  2392                           ;main.c: 313: PWM1(400);
  2393  0005AA  0E01               	movlw	1
  2394  0005AC  6E22               	movwf	PWM1@duty+1,c
  2395  0005AE  0E90               	movlw	144
  2396  0005B0  6E21               	movwf	PWM1@duty,c
  2397  0005B2  EC8D  F014         	call	_PWM1	;wreg free
  2398                           
  2399                           ;main.c: 314: keycheck();
  2400  0005B6  EC9E  F015         	call	_keycheck	;wreg free
  2401                           
  2402                           ;main.c: 315: PWM1off();
  2403  0005BA  ECD8  F015         	call	_PWM1off	;wreg free
  2404                           
  2405                           ;main.c: 317: keypress = (0);
  2406  0005BE  0E00               	movlw	0
  2407  0005C0  0100               	movlb	0	; () banked
  2408  0005C2  6FBA               	movwf	_keypress& (0+255),b	;volatile
  2409                           
  2410                           ;main.c: 318: while(keypress==(0)){
  2411  0005C4  D05B               	goto	l5910
  2412  0005C6                     l5880:
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;main.c: 319: keypress = (0);
  2416  0005C6  0E00               	movlw	0
  2417  0005C8  0100               	movlb	0	; () banked
  2418  0005CA  6FBA               	movwf	_keypress& (0+255),b	;volatile
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 321: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2422  0005CC  0E01               	movlw	1
  2423  0005CE  ECC8  F015         	call	_lcdInst
  2424  0005D2  0E34               	movlw	52
  2425  0005D4  0100               	movlb	0	; () banked
  2426  0005D6  6F89               	movwf	??_main& (0+255),b
  2427  0005D8  0EF1               	movlw	241
  2428  0005DA                     u7997:
  2429  0005DA  2EE8               	decfsz	wreg,f,c
  2430  0005DC  D7FE               	bra	u7997
  2431  0005DE  2F89               	decfsz	??_main& (0+255),f,b
  2432  0005E0  D7FC               	bra	u7997
  2433  0005E2  D000               	nop2	
  2434                           
  2435                           ;main.c: 322: printf("testing IR");
  2436  0005E4  0ED3               	movlw	low STR_14
  2437  0005E6  6E2D               	movwf	printf@f,c
  2438  0005E8  0EFF               	movlw	high STR_14
  2439  0005EA  6E2E               	movwf	printf@f+1,c
  2440  0005EC  EC00  F009         	call	_printf	;wreg free
  2441                           
  2442                           ;main.c: 323: lcdInst(0b11000000);;
  2443  0005F0  0EC0               	movlw	192
  2444  0005F2  ECC8  F015         	call	_lcdInst
  2445                           
  2446                           ;main.c: 324: readADC(1);
  2447  0005F6  0E01               	movlw	1
  2448  0005F8  EC72  F015         	call	_readADC
  2449                           
  2450                           ;main.c: 325: printf("%x ", ADRES);
  2451  0005FC  0EF7               	movlw	low STR_15
  2452  0005FE  6E2D               	movwf	printf@f,c
  2453  000600  0EFF               	movlw	high STR_15
  2454  000602  6E2E               	movwf	printf@f+1,c
  2455  000604  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2456  000608  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2457  00060C  EC00  F009         	call	_printf	;wreg free
  2458                           
  2459                           ;main.c: 326: readADC(0);
  2460  000610  0E00               	movlw	0
  2461  000612  EC72  F015         	call	_readADC
  2462                           
  2463                           ;main.c: 327: printf("%x ", ADRES);
  2464  000616  0EF7               	movlw	low STR_15
  2465  000618  6E2D               	movwf	printf@f,c
  2466  00061A  0EFF               	movlw	high STR_15
  2467  00061C  6E2E               	movwf	printf@f+1,c
  2468  00061E  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2469  000622  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2470  000626  EC00  F009         	call	_printf	;wreg free
  2471                           
  2472                           ;main.c: 328: readADC(2);
  2473  00062A  0E02               	movlw	2
  2474  00062C  EC72  F015         	call	_readADC
  2475                           
  2476                           ;main.c: 329: printf("%x ", ADRES);
  2477  000630  0EF7               	movlw	low STR_15
  2478  000632  6E2D               	movwf	printf@f,c
  2479  000634  0EFF               	movlw	high STR_15
  2480  000636  6E2E               	movwf	printf@f+1,c
  2481  000638  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2482  00063C  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2483  000640  EC00  F009         	call	_printf	;wreg free
  2484                           
  2485                           ;main.c: 330: readADC(5);
  2486  000644  0E05               	movlw	5
  2487  000646  EC72  F015         	call	_readADC
  2488                           
  2489                           ;main.c: 331: printf("%x ", ADRES);
  2490  00064A  0EF7               	movlw	low STR_15
  2491  00064C  6E2D               	movwf	printf@f,c
  2492  00064E  0EFF               	movlw	high STR_15
  2493  000650  6E2E               	movwf	printf@f+1,c
  2494  000652  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2495  000656  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2496  00065A  EC00  F009         	call	_printf	;wreg free
  2497                           
  2498                           ;main.c: 332: keyinterrupt();
  2499  00065E  EC93  F015         	call	_keyinterrupt	;wreg free
  2500                           
  2501                           ;main.c: 333: _delay((unsigned long)((100)*(32000000/4000.0)));
  2502  000662  0E05               	movlw	5
  2503  000664  0100               	movlb	0	; () banked
  2504  000666  6F8A               	movwf	(??_main+1)& (0+255),b
  2505  000668  0E0F               	movlw	15
  2506  00066A  0100               	movlb	0	; () banked
  2507  00066C  6F89               	movwf	??_main& (0+255),b
  2508  00066E  0EF1               	movlw	241
  2509  000670                     u8007:
  2510  000670  2EE8               	decfsz	wreg,f,c
  2511  000672  D7FE               	bra	u8007
  2512  000674  2F89               	decfsz	??_main& (0+255),f,b
  2513  000676  D7FC               	bra	u8007
  2514  000678  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2515  00067A  D7FA               	bra	u8007
  2516  00067C                     l5910:
  2517  00067C  0100               	movlb	0	; () banked
  2518  00067E  51BA               	movf	_keypress& (0+255),w,b	;volatile
  2519  000680  B4D8               	btfsc	status,2,c
  2520  000682  D7A1               	goto	l5880
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;main.c: 334: }
  2524                           ;main.c: 336: keypress = (0);
  2525                           
  2526                           ; BSR set to: 0
  2527  000684  0E00               	movlw	0
  2528  000686  0100               	movlb	0	; () banked
  2529  000688  6FBA               	movwf	_keypress& (0+255),b	;volatile
  2530                           
  2531                           ;main.c: 337: while(keypress==(0)){
  2532  00068A  D041               	goto	l5936
  2533  00068C                     l5914:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;main.c: 338: keypress = (0);
  2537  00068C  0E00               	movlw	0
  2538  00068E  0100               	movlb	0	; () banked
  2539  000690  6FBA               	movwf	_keypress& (0+255),b	;volatile
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;main.c: 339: _delay((unsigned long)((50)*(32000000/4000.0)));
  2543  000692  0E03               	movlw	3
  2544  000694  0100               	movlb	0	; () banked
  2545  000696  6F8A               	movwf	(??_main+1)& (0+255),b
  2546  000698  0E08               	movlw	8
  2547  00069A  0100               	movlb	0	; () banked
  2548  00069C  6F89               	movwf	??_main& (0+255),b
  2549  00069E  0E77               	movlw	119
  2550  0006A0                     u8017:
  2551  0006A0  2EE8               	decfsz	wreg,f,c
  2552  0006A2  D7FE               	bra	u8017
  2553  0006A4  2F89               	decfsz	??_main& (0+255),f,b
  2554  0006A6  D7FC               	bra	u8017
  2555  0006A8  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2556  0006AA  D7FA               	bra	u8017
  2557                           
  2558                           ;main.c: 340: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2559  0006AC  0E01               	movlw	1
  2560  0006AE  ECC8  F015         	call	_lcdInst
  2561  0006B2  0E34               	movlw	52
  2562  0006B4  0100               	movlb	0	; () banked
  2563  0006B6  6F89               	movwf	??_main& (0+255),b
  2564  0006B8  0EF1               	movlw	241
  2565  0006BA                     u8027:
  2566  0006BA  2EE8               	decfsz	wreg,f,c
  2567  0006BC  D7FE               	bra	u8027
  2568  0006BE  2F89               	decfsz	??_main& (0+255),f,b
  2569  0006C0  D7FC               	bra	u8027
  2570  0006C2  D000               	nop2	
  2571                           
  2572                           ;main.c: 341: printf("label   tab");
  2573  0006C4  0EBB               	movlw	low STR_19
  2574  0006C6  6E2D               	movwf	printf@f,c
  2575  0006C8  0EFF               	movlw	high STR_19
  2576  0006CA  6E2E               	movwf	printf@f+1,c
  2577  0006CC  EC00  F009         	call	_printf	;wreg free
  2578                           
  2579                           ;main.c: 342: lcdInst(0b11000000);;
  2580  0006D0  0EC0               	movlw	192
  2581  0006D2  ECC8  F015         	call	_lcdInst
  2582                           
  2583                           ;main.c: 343: readADC(4);
  2584  0006D6  0E04               	movlw	4
  2585  0006D8  EC72  F015         	call	_readADC
  2586                           
  2587                           ;main.c: 344: printf("%x      ", ADRES);
  2588  0006DC  0EDE               	movlw	low STR_20
  2589  0006DE  6E2D               	movwf	printf@f,c
  2590  0006E0  0EFF               	movlw	high STR_20
  2591  0006E2  6E2E               	movwf	printf@f+1,c
  2592  0006E4  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2593  0006E8  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2594  0006EC  EC00  F009         	call	_printf	;wreg free
  2595                           
  2596                           ;main.c: 345: readADC(3);
  2597  0006F0  0E03               	movlw	3
  2598  0006F2  EC72  F015         	call	_readADC
  2599                           
  2600                           ;main.c: 346: printf("%x      ", ADRES);
  2601  0006F6  0EDE               	movlw	low STR_20
  2602  0006F8  6E2D               	movwf	printf@f,c
  2603  0006FA  0EFF               	movlw	high STR_20
  2604  0006FC  6E2E               	movwf	printf@f+1,c
  2605  0006FE  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2606  000702  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2607  000706  EC00  F009         	call	_printf	;wreg free
  2608                           
  2609                           ;main.c: 347: keyinterrupt();
  2610  00070A  EC93  F015         	call	_keyinterrupt	;wreg free
  2611  00070E                     l5936:
  2612  00070E  0100               	movlb	0	; () banked
  2613  000710  51BA               	movf	_keypress& (0+255),w,b	;volatile
  2614  000712  B4D8               	btfsc	status,2,c
  2615  000714  D7BB               	goto	l5914
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 348: }
  2619                           ;main.c: 350: standby = 1;
  2620                           
  2621                           ; BSR set to: 0
  2622  000716  0E00               	movlw	0
  2623  000718  0100               	movlb	0	; () banked
  2624  00071A  6FA6               	movwf	(main@standby+1)& (0+255),b
  2625  00071C  0E01               	movlw	1
  2626  00071E  6FA5               	movwf	main@standby& (0+255),b
  2627                           
  2628                           ;main.c: 356: }
  2629  000720  D4A2               	goto	l5640
  2630  000722                     l5940:
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;main.c: 361: readADC(2);
  2634  000722  0E02               	movlw	2
  2635  000724  EC72  F015         	call	_readADC
  2636                           
  2637                           ;main.c: 362: if(ADRES <= 0x130){
  2638  000728  0E31               	movlw	49
  2639  00072A  5CC3               	subwf	4035,w,c	;volatile
  2640  00072C  0E01               	movlw	1
  2641  00072E  58C4               	subwfb	4036,w,c	;volatile
  2642  000730  B0D8               	btfsc	status,0,c
  2643  000732  D026               	goto	l5954
  2644                           
  2645                           ;main.c: 363: prevSoupLoad = seconds;
  2646  000734  C0B4  F091         	movff	_seconds,main@prevSoupLoad
  2647  000738  C0B5  F092         	movff	_seconds+1,main@prevSoupLoad+1
  2648                           
  2649                           ;main.c: 364: soupCnt = 1;
  2650  00073C  0E00               	movlw	0
  2651  00073E  0100               	movlb	0	; () banked
  2652  000740  6FB1               	movwf	(_soupCnt+1)& (0+255),b
  2653  000742  0E01               	movlw	1
  2654  000744  6FB0               	movwf	_soupCnt& (0+255),b
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 365: if (!soupSort){
  2658  000746  0100               	movlb	0	; () banked
  2659  000748  519D               	movf	main@soupSort& (0+255),w,b
  2660  00074A  0100               	movlb	0	; () banked
  2661  00074C  119E               	iorwf	(main@soupSort+1)& (0+255),w,b
  2662  00074E  A4D8               	btfss	status,2,c
  2663  000750  D017               	goto	l5954
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 366: soupSort = 1;
  2667  000752  0E00               	movlw	0
  2668  000754  0100               	movlb	0	; () banked
  2669  000756  6F9E               	movwf	(main@soupSort+1)& (0+255),b
  2670  000758  0E01               	movlw	1
  2671  00075A  6F9D               	movwf	main@soupSort& (0+255),b
  2672                           
  2673                           ;main.c: 367: soupSteps = 0;
  2674  00075C  0E00               	movlw	0
  2675  00075E  6E56               	movwf	_soupSteps+1,c
  2676  000760  0E00               	movlw	0
  2677  000762  6E55               	movwf	_soupSteps,c
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 368: _delay((unsigned long)((150)*(32000000/4000.0)));
  2681  000764  0E07               	movlw	7
  2682  000766  0100               	movlb	0	; () banked
  2683  000768  6F8A               	movwf	(??_main+1)& (0+255),b
  2684  00076A  0E17               	movlw	23
  2685  00076C  0100               	movlb	0	; () banked
  2686  00076E  6F89               	movwf	??_main& (0+255),b
  2687  000770  0E6A               	movlw	106
  2688  000772                     u8037:
  2689  000772  2EE8               	decfsz	wreg,f,c
  2690  000774  D7FE               	bra	u8037
  2691  000776  2F89               	decfsz	??_main& (0+255),f,b
  2692  000778  D7FC               	bra	u8037
  2693  00077A  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  2694  00077C  D7FA               	bra	u8037
  2695  00077E  F000               	nop	
  2696  000780                     l5954:
  2697                           
  2698                           ;main.c: 369: }
  2699                           ;main.c: 370: }
  2700                           ;main.c: 374: if (soupSort){
  2701  000780  0100               	movlb	0	; () banked
  2702  000782  519D               	movf	main@soupSort& (0+255),w,b
  2703  000784  0100               	movlb	0	; () banked
  2704  000786  119E               	iorwf	(main@soupSort+1)& (0+255),w,b
  2705  000788  B4D8               	btfsc	status,2,c
  2706  00078A  D0EE               	goto	l6038
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;main.c: 375: if (soupSteps < 120){
  2710  00078C  BE56               	btfsc	_soupSteps+1,7,c
  2711  00078E  D006               	goto	l5958
  2712  000790  5056               	movf	_soupSteps+1,w,c
  2713  000792  E111               	bnz	l5964
  2714  000794  0E78               	movlw	120
  2715  000796  5C55               	subwf	_soupSteps,w,c
  2716  000798  B0D8               	btfsc	status,0,c
  2717  00079A  D00D               	goto	l5964
  2718  00079C                     l5958:
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;main.c: 376: readADC(4);
  2722  00079C  0E04               	movlw	4
  2723  00079E  EC72  F015         	call	_readADC
  2724                           
  2725                           ;main.c: 377: if(ADRES<0x200){labelState = 1;}
  2726  0007A2  0E02               	movlw	2
  2727  0007A4  5CC4               	subwf	4036,w,c	;volatile
  2728  0007A6  B0D8               	btfsc	status,0,c
  2729  0007A8  D0DF               	goto	l6038
  2730  0007AA  0E00               	movlw	0
  2731  0007AC  0100               	movlb	0	; () banked
  2732  0007AE  6FB3               	movwf	(_labelState+1)& (0+255),b
  2733  0007B0  0E01               	movlw	1
  2734  0007B2  6FB2               	movwf	_labelState& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 379: }
  2738  0007B4  D0D9               	goto	l6038
  2739  0007B6                     l5964:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 380: else if (labelState == 1){
  2743  0007B6  0100               	movlb	0	; () banked
  2744  0007B8  05B2               	decf	_labelState& (0+255),w,b
  2745  0007BA  0100               	movlb	0	; () banked
  2746  0007BC  11B3               	iorwf	(_labelState+1)& (0+255),w,b
  2747  0007BE  A4D8               	btfss	status,2,c
  2748  0007C0  D03D               	goto	l5988
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 381: if(soupSteps < (120+70)){
  2752  0007C2  BE56               	btfsc	_soupSteps+1,7,c
  2753  0007C4  D006               	goto	l5968
  2754  0007C6  5056               	movf	_soupSteps+1,w,c
  2755  0007C8  E108               	bnz	l5970
  2756  0007CA  0EBE               	movlw	190
  2757  0007CC  5C55               	subwf	_soupSteps,w,c
  2758  0007CE  B0D8               	btfsc	status,0,c
  2759  0007D0  D004               	goto	l5970
  2760  0007D2                     l5968:
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;main.c: 382: S1mode = 1;
  2764  0007D2  0E00               	movlw	0
  2765  0007D4  6E5C               	movwf	_S1mode+1,c
  2766  0007D6  0E01               	movlw	1
  2767  0007D8  D042               	goto	L3
  2768  0007DA                     l5970:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 385: else if(soupSteps < (120+70+55)){
  2772  0007DA  BE56               	btfsc	_soupSteps+1,7,c
  2773  0007DC  D006               	goto	l5972
  2774  0007DE  5056               	movf	_soupSteps+1,w,c
  2775  0007E0  E10C               	bnz	l5974
  2776  0007E2  0EF5               	movlw	245
  2777  0007E4  5C55               	subwf	_soupSteps,w,c
  2778  0007E6  B0D8               	btfsc	status,0,c
  2779  0007E8  D008               	goto	l5974
  2780  0007EA                     l5972:
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 386: S1mode = 2;
  2784  0007EA  0E00               	movlw	0
  2785  0007EC  6E5C               	movwf	_S1mode+1,c
  2786  0007EE  0E02               	movlw	2
  2787  0007F0  6E5B               	movwf	_S1mode,c
  2788                           
  2789                           ;main.c: 387: soupAlign = 2;
  2790  0007F2  0E00               	movlw	0
  2791  0007F4  6E4E               	movwf	_soupAlign+1,c
  2792  0007F6  0E02               	movlw	2
  2793  0007F8  D048               	goto	L4
  2794  0007FA                     l5974:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 390: else{
  2798                           ;main.c: 391: S1mode = 4;
  2799  0007FA  0E00               	movlw	0
  2800  0007FC  6E5C               	movwf	_S1mode+1,c
  2801  0007FE  0E04               	movlw	4
  2802  000800  6E5B               	movwf	_S1mode,c
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;main.c: 393: updateS1(soupAlign);
  2806  000802  C04D  F021         	movff	_soupAlign,updateS1@mode
  2807  000806  C04E  F022         	movff	_soupAlign+1,updateS1@mode+1
  2808  00080A  EC86  F00A         	call	_updateS1	;wreg free
  2809                           
  2810                           ;main.c: 394: readADC(1);
  2811  00080E  0E01               	movlw	1
  2812  000810  EC72  F015         	call	_readADC
  2813                           
  2814                           ;main.c: 396: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  2815  000814  0100               	movlb	0	; () banked
  2816  000816  51A3               	movf	main@prevSoupIR& (0+255),w,b
  2817  000818  5CC3               	subwf	4035,w,c	;volatile
  2818  00081A  0100               	movlb	0	; () banked
  2819  00081C  51A4               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2820  00081E  58C4               	subwfb	4036,w,c	;volatile
  2821  000820  B0D8               	btfsc	status,0,c
  2822  000822  D059               	goto	l6010
  2823                           
  2824                           ; BSR set to: 0
  2825  000824  0EAB               	movlw	171
  2826  000826  5CC3               	subwf	4035,w,c	;volatile
  2827  000828  0E03               	movlw	3
  2828  00082A  58C4               	subwfb	4036,w,c	;volatile
  2829  00082C  A0D8               	btfss	status,0,c
  2830  00082E  D053               	goto	l6010
  2831                           
  2832                           ; BSR set to: 0
  2833  000830  0E00               	movlw	0
  2834  000832  0100               	movlb	0	; () banked
  2835  000834  6FB3               	movwf	(_labelState+1)& (0+255),b
  2836  000836  0E65               	movlw	101
  2837  000838  6FB2               	movwf	_labelState& (0+255),b
  2838  00083A  D04D               	goto	l6010
  2839  00083C                     l5988:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;main.c: 401: else if(labelState == 0){
  2843  00083C  0100               	movlb	0	; () banked
  2844  00083E  51B2               	movf	_labelState& (0+255),w,b
  2845  000840  0100               	movlb	0	; () banked
  2846  000842  11B3               	iorwf	(_labelState+1)& (0+255),w,b
  2847  000844  A4D8               	btfss	status,2,c
  2848  000846  D04C               	goto	l6012
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;main.c: 402: if(soupSteps < (120+70)){
  2852  000848  BE56               	btfsc	_soupSteps+1,7,c
  2853  00084A  D006               	goto	l5992
  2854  00084C  5056               	movf	_soupSteps+1,w,c
  2855  00084E  E10E               	bnz	l5994
  2856  000850  0EBE               	movlw	190
  2857  000852  5C55               	subwf	_soupSteps,w,c
  2858  000854  B0D8               	btfsc	status,0,c
  2859  000856  D00A               	goto	l5994
  2860  000858                     l5992:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 403: S1mode = 2;
  2864  000858  0E00               	movlw	0
  2865  00085A  6E5C               	movwf	_S1mode+1,c
  2866  00085C  0E02               	movlw	2
  2867  00085E                     L3:
  2868  00085E  6E5B               	movwf	_S1mode,c
  2869                           
  2870                           ;main.c: 404: soupCnt = 0;
  2871  000860  0E00               	movlw	0
  2872  000862  0100               	movlb	0	; () banked
  2873  000864  6FB1               	movwf	(_soupCnt+1)& (0+255),b
  2874  000866  0E00               	movlw	0
  2875  000868  6FB0               	movwf	_soupCnt& (0+255),b
  2876                           
  2877                           ;main.c: 405: }
  2878  00086A  D07E               	goto	l6038
  2879  00086C                     l5994:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 406: else if(soupSteps < (120+70+58)){
  2883  00086C  BE56               	btfsc	_soupSteps+1,7,c
  2884  00086E  D006               	goto	l5996
  2885  000870  5056               	movf	_soupSteps+1,w,c
  2886  000872  E111               	bnz	l5998
  2887  000874  0EF8               	movlw	248
  2888  000876  5C55               	subwf	_soupSteps,w,c
  2889  000878  B0D8               	btfsc	status,0,c
  2890  00087A  D00D               	goto	l5998
  2891  00087C                     l5996:
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;main.c: 407: S1mode = 1;
  2895  00087C  0E00               	movlw	0
  2896  00087E  6E5C               	movwf	_S1mode+1,c
  2897  000880  0E01               	movlw	1
  2898  000882  6E5B               	movwf	_S1mode,c
  2899                           
  2900                           ;main.c: 408: soupAlign = 1;
  2901  000884  0E00               	movlw	0
  2902  000886  6E4E               	movwf	_soupAlign+1,c
  2903  000888  0E01               	movlw	1
  2904  00088A                     L4:
  2905  00088A  6E4D               	movwf	_soupAlign,c
  2906                           
  2907                           ;main.c: 409: soupI = 1;
  2908  00088C  0E00               	movlw	0
  2909  00088E  6E4C               	movwf	_soupI+1,c
  2910  000890  0E01               	movlw	1
  2911  000892  6E4B               	movwf	_soupI,c
  2912                           
  2913                           ;main.c: 410: }
  2914  000894  D069               	goto	l6038
  2915  000896                     l5998:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 411: else{
  2919                           ;main.c: 412: S1mode = 4;
  2920  000896  0E00               	movlw	0
  2921  000898  6E5C               	movwf	_S1mode+1,c
  2922  00089A  0E04               	movlw	4
  2923  00089C  6E5B               	movwf	_S1mode,c
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;main.c: 414: updateS1(soupAlign);
  2927  00089E  C04D  F021         	movff	_soupAlign,updateS1@mode
  2928  0008A2  C04E  F022         	movff	_soupAlign+1,updateS1@mode+1
  2929  0008A6  EC86  F00A         	call	_updateS1	;wreg free
  2930                           
  2931                           ;main.c: 415: readADC(1);
  2932  0008AA  0E01               	movlw	1
  2933  0008AC  EC72  F015         	call	_readADC
  2934                           
  2935                           ;main.c: 417: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  2936  0008B0  0100               	movlb	0	; () banked
  2937  0008B2  51A3               	movf	main@prevSoupIR& (0+255),w,b
  2938  0008B4  5CC3               	subwf	4035,w,c	;volatile
  2939  0008B6  0100               	movlb	0	; () banked
  2940  0008B8  51A4               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2941  0008BA  58C4               	subwfb	4036,w,c	;volatile
  2942  0008BC  B0D8               	btfsc	status,0,c
  2943  0008BE  D00B               	goto	l6010
  2944                           
  2945                           ; BSR set to: 0
  2946  0008C0  0EAB               	movlw	171
  2947  0008C2  5CC3               	subwf	4035,w,c	;volatile
  2948  0008C4  0E03               	movlw	3
  2949  0008C6  58C4               	subwfb	4036,w,c	;volatile
  2950  0008C8  A0D8               	btfss	status,0,c
  2951  0008CA  D005               	goto	l6010
  2952                           
  2953                           ; BSR set to: 0
  2954  0008CC  0E00               	movlw	0
  2955  0008CE  0100               	movlb	0	; () banked
  2956  0008D0  6FB3               	movwf	(_labelState+1)& (0+255),b
  2957  0008D2  0E64               	movlw	100
  2958  0008D4  D7B1               	goto	L12
  2959  0008D6                     l6010:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 418: prevSoupIR = ADRES;
  2963  0008D6  CFC3 F0A3          	movff	4035,main@prevSoupIR	;volatile
  2964  0008DA  CFC4 F0A4          	movff	4036,main@prevSoupIR+1	;volatile
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 419: }
  2968                           ;main.c: 420: }
  2969                           
  2970                           ; BSR set to: 0
  2971  0008DE  D044               	goto	l6038
  2972  0008E0                     l6012:
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 421: else{
  2976                           ;main.c: 422: if(labelState == 101){soupNL++;}
  2977  0008E0  0E65               	movlw	101
  2978  0008E2  0100               	movlb	0	; () banked
  2979  0008E4  19B2               	xorwf	_labelState& (0+255),w,b
  2980  0008E6  0100               	movlb	0	; () banked
  2981  0008E8  11B3               	iorwf	(_labelState+1)& (0+255),w,b
  2982  0008EA  A4D8               	btfss	status,2,c
  2983  0008EC  D004               	goto	l6016
  2984                           
  2985                           ; BSR set to: 0
  2986  0008EE  0100               	movlb	0	; () banked
  2987  0008F0  4B97               	infsnz	main@soupNL& (0+255),f,b
  2988  0008F2  2B98               	incf	(main@soupNL+1)& (0+255),f,b
  2989  0008F4  D00A               	goto	l6020
  2990  0008F6                     l6016:
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 423: else if(labelState == 100){soupL++;}
  2994  0008F6  0E64               	movlw	100
  2995  0008F8  0100               	movlb	0	; () banked
  2996  0008FA  19B2               	xorwf	_labelState& (0+255),w,b
  2997  0008FC  0100               	movlb	0	; () banked
  2998  0008FE  11B3               	iorwf	(_labelState+1)& (0+255),w,b
  2999  000900  A4D8               	btfss	status,2,c
  3000  000902  D003               	goto	l6020
  3001                           
  3002                           ; BSR set to: 0
  3003  000904  0100               	movlb	0	; () banked
  3004  000906  4B95               	infsnz	main@soupL& (0+255),f,b
  3005  000908  2B96               	incf	(main@soupL+1)& (0+255),f,b
  3006  00090A                     l6020:
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;main.c: 424: soupSteps = 0;
  3010  00090A  0E00               	movlw	0
  3011  00090C  6E56               	movwf	_soupSteps+1,c
  3012  00090E  0E00               	movlw	0
  3013  000910  6E55               	movwf	_soupSteps,c
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;main.c: 425: prevSoupIR = 0;
  3017  000912  0E00               	movlw	0
  3018  000914  0100               	movlb	0	; () banked
  3019  000916  6FA4               	movwf	(main@prevSoupIR+1)& (0+255),b
  3020  000918  0E00               	movlw	0
  3021  00091A  6FA3               	movwf	main@prevSoupIR& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 426: labelState = 0;
  3025  00091C  0E00               	movlw	0
  3026  00091E  0100               	movlb	0	; () banked
  3027  000920  6FB3               	movwf	(_labelState+1)& (0+255),b
  3028  000922  0E00               	movlw	0
  3029  000924  6FB2               	movwf	_labelState& (0+255),b
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;main.c: 427: if (soupCnt == 0) {soupSort = 0;}
  3033  000926  0100               	movlb	0	; () banked
  3034  000928  51B0               	movf	_soupCnt& (0+255),w,b
  3035  00092A  0100               	movlb	0	; () banked
  3036  00092C  11B1               	iorwf	(_soupCnt+1)& (0+255),w,b
  3037  00092E  A4D8               	btfss	status,2,c
  3038  000930  D005               	goto	l6030
  3039                           
  3040                           ; BSR set to: 0
  3041  000932  0E00               	movlw	0
  3042  000934  0100               	movlb	0	; () banked
  3043  000936  6F9E               	movwf	(main@soupSort+1)& (0+255),b
  3044  000938  0E00               	movlw	0
  3045  00093A  6F9D               	movwf	main@soupSort& (0+255),b
  3046  00093C                     l6030:
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 429: if(s1 == 2 || s1 == 3){S1mode = 3;}
  3050  00093C  0E02               	movlw	2
  3051  00093E  0100               	movlb	0	; () banked
  3052  000940  19B8               	xorwf	_s1& (0+255),w,b
  3053  000942  0100               	movlb	0	; () banked
  3054  000944  11B9               	iorwf	(_s1+1)& (0+255),w,b
  3055  000946  B4D8               	btfsc	status,2,c
  3056  000948  D007               	goto	l6034
  3057                           
  3058                           ; BSR set to: 0
  3059  00094A  0E03               	movlw	3
  3060  00094C  0100               	movlb	0	; () banked
  3061  00094E  19B8               	xorwf	_s1& (0+255),w,b
  3062  000950  0100               	movlb	0	; () banked
  3063  000952  11B9               	iorwf	(_s1+1)& (0+255),w,b
  3064  000954  A4D8               	btfss	status,2,c
  3065  000956  D004               	goto	l6036
  3066  000958                     l6034:
  3067                           
  3068                           ; BSR set to: 0
  3069  000958  0E00               	movlw	0
  3070  00095A  6E5C               	movwf	_S1mode+1,c
  3071  00095C  0E03               	movlw	3
  3072  00095E  D003               	goto	L5
  3073  000960                     l6036:
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;main.c: 430: else{S1mode = 5;}
  3077  000960  0E00               	movlw	0
  3078  000962  6E5C               	movwf	_S1mode+1,c
  3079  000964  0E05               	movlw	5
  3080  000966                     L5:
  3081  000966  6E5B               	movwf	_S1mode,c
  3082  000968                     l6038:
  3083                           
  3084                           ;main.c: 431: }
  3085                           ;main.c: 432: }
  3086                           ;main.c: 436: lcdInst(0b11000000);;
  3087  000968  0EC0               	movlw	192
  3088  00096A  ECC8  F015         	call	_lcdInst
  3089                           
  3090                           ;main.c: 438: readADC(0);
  3091  00096E  0E00               	movlw	0
  3092  000970  EC72  F015         	call	_readADC
  3093                           
  3094                           ;main.c: 439: if(ADRES <= 0x130){
  3095  000974  0E31               	movlw	49
  3096  000976  5CC3               	subwf	4035,w,c	;volatile
  3097  000978  0E01               	movlw	1
  3098  00097A  58C4               	subwfb	4036,w,c	;volatile
  3099  00097C  B0D8               	btfsc	status,0,c
  3100  00097E  D026               	goto	l6054
  3101                           
  3102                           ;main.c: 440: prevSodaLoad = seconds;
  3103  000980  C0B4  F093         	movff	_seconds,main@prevSodaLoad
  3104  000984  C0B5  F094         	movff	_seconds+1,main@prevSodaLoad+1
  3105                           
  3106                           ;main.c: 441: sodaCnt = 1;
  3107  000988  0E00               	movlw	0
  3108  00098A  0100               	movlb	0	; () banked
  3109  00098C  6FAF               	movwf	(_sodaCnt+1)& (0+255),b
  3110  00098E  0E01               	movlw	1
  3111  000990  6FAE               	movwf	_sodaCnt& (0+255),b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;main.c: 442: if (!sodaSort){
  3115  000992  0100               	movlb	0	; () banked
  3116  000994  519F               	movf	main@sodaSort& (0+255),w,b
  3117  000996  0100               	movlb	0	; () banked
  3118  000998  11A0               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3119  00099A  A4D8               	btfss	status,2,c
  3120  00099C  D017               	goto	l6054
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;main.c: 443: sodaSort = 1;
  3124  00099E  0E00               	movlw	0
  3125  0009A0  0100               	movlb	0	; () banked
  3126  0009A2  6FA0               	movwf	(main@sodaSort+1)& (0+255),b
  3127  0009A4  0E01               	movlw	1
  3128  0009A6  6F9F               	movwf	main@sodaSort& (0+255),b
  3129                           
  3130                           ;main.c: 444: sodaSteps = 0;
  3131  0009A8  0E00               	movlw	0
  3132  0009AA  6E54               	movwf	_sodaSteps+1,c
  3133  0009AC  0E00               	movlw	0
  3134  0009AE  6E53               	movwf	_sodaSteps,c
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 445: _delay((unsigned long)((150)*(32000000/4000.0)));
  3138  0009B0  0E07               	movlw	7
  3139  0009B2  0100               	movlb	0	; () banked
  3140  0009B4  6F8A               	movwf	(??_main+1)& (0+255),b
  3141  0009B6  0E17               	movlw	23
  3142  0009B8  0100               	movlb	0	; () banked
  3143  0009BA  6F89               	movwf	??_main& (0+255),b
  3144  0009BC  0E6A               	movlw	106
  3145  0009BE                     u8047:
  3146  0009BE  2EE8               	decfsz	wreg,f,c
  3147  0009C0  D7FE               	bra	u8047
  3148  0009C2  2F89               	decfsz	??_main& (0+255),f,b
  3149  0009C4  D7FC               	bra	u8047
  3150  0009C6  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  3151  0009C8  D7FA               	bra	u8047
  3152  0009CA  F000               	nop	
  3153  0009CC                     l6054:
  3154                           
  3155                           ;main.c: 446: }
  3156                           ;main.c: 447: }
  3157                           ;main.c: 451: if (sodaSort){
  3158  0009CC  0100               	movlb	0	; () banked
  3159  0009CE  519F               	movf	main@sodaSort& (0+255),w,b
  3160  0009D0  0100               	movlb	0	; () banked
  3161  0009D2  11A0               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3162  0009D4  B4D8               	btfsc	status,2,c
  3163  0009D6  D13A               	goto	l6156
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;main.c: 452: if(sodaSteps < 48){
  3167  0009D8  BE54               	btfsc	_sodaSteps+1,7,c
  3168  0009DA  D006               	goto	l6058
  3169  0009DC  5054               	movf	_sodaSteps+1,w,c
  3170  0009DE  E108               	bnz	l6060
  3171  0009E0  0E30               	movlw	48
  3172  0009E2  5C53               	subwf	_sodaSteps,w,c
  3173  0009E4  B0D8               	btfsc	status,0,c
  3174  0009E6  D004               	goto	l6060
  3175  0009E8                     l6058:
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;main.c: 454: S2mode = 4;
  3179  0009E8  0E00               	movlw	0
  3180  0009EA  6E5A               	movwf	_S2mode+1,c
  3181  0009EC  0E04               	movlw	4
  3182  0009EE  D04A               	goto	L8
  3183  0009F0                     l6060:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;main.c: 456: else if (sodaSteps < (48+43)){
  3187  0009F0  BE54               	btfsc	_sodaSteps+1,7,c
  3188  0009F2  D006               	goto	l6062
  3189  0009F4  5054               	movf	_sodaSteps+1,w,c
  3190  0009F6  E108               	bnz	l6064
  3191  0009F8  0E5B               	movlw	91
  3192  0009FA  5C53               	subwf	_sodaSteps,w,c
  3193  0009FC  B0D8               	btfsc	status,0,c
  3194  0009FE  D004               	goto	l6064
  3195  000A00                     l6062:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 457: S3mode = 1;
  3199  000A00  0E00               	movlw	0
  3200  000A02  6E58               	movwf	_S3mode+1,c
  3201  000A04  0E01               	movlw	1
  3202  000A06  D121               	goto	L11
  3203  000A08                     l6064:
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 460: else if (sodaSteps < (48+43+10)){
  3207  000A08  BE54               	btfsc	_sodaSteps+1,7,c
  3208  000A0A  D006               	goto	l6066
  3209  000A0C  5054               	movf	_sodaSteps+1,w,c
  3210  000A0E  E10C               	bnz	l6068
  3211  000A10  0E65               	movlw	101
  3212  000A12  5C53               	subwf	_sodaSteps,w,c
  3213  000A14  B0D8               	btfsc	status,0,c
  3214  000A16  D008               	goto	l6068
  3215  000A18                     l6066:
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 461: S3mode = 4;
  3219  000A18  0E00               	movlw	0
  3220  000A1A  6E58               	movwf	_S3mode+1,c
  3221  000A1C  0E04               	movlw	4
  3222  000A1E  6E57               	movwf	_S3mode,c
  3223                           
  3224                           ;main.c: 462: S2mode = 1;
  3225  000A20  0E00               	movlw	0
  3226  000A22  6E5A               	movwf	_S2mode+1,c
  3227  000A24  0E01               	movlw	1
  3228  000A26  D02E               	goto	L8
  3229  000A28                     l6068:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 464: else if (sodaSteps < (48+43+10+15)){
  3233  000A28  BE54               	btfsc	_sodaSteps+1,7,c
  3234  000A2A  D006               	goto	l6070
  3235  000A2C  5054               	movf	_sodaSteps+1,w,c
  3236  000A2E  E11B               	bnz	l6078
  3237  000A30  0E74               	movlw	116
  3238  000A32  5C53               	subwf	_sodaSteps,w,c
  3239  000A34  B0D8               	btfsc	status,0,c
  3240  000A36  D017               	goto	l6078
  3241  000A38                     l6070:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 465: S3mode = 4;
  3245  000A38  0E00               	movlw	0
  3246  000A3A  6E58               	movwf	_S3mode+1,c
  3247  000A3C  0E04               	movlw	4
  3248  000A3E  6E57               	movwf	_S3mode,c
  3249                           
  3250                           ;main.c: 466: S2mode = 0;
  3251  000A40  0E00               	movlw	0
  3252  000A42  6E5A               	movwf	_S2mode+1,c
  3253  000A44  0E00               	movlw	0
  3254  000A46  6E59               	movwf	_S2mode,c
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 467: readADC(3);
  3258  000A48  0E03               	movlw	3
  3259  000A4A  EC72  F015         	call	_readADC
  3260                           
  3261                           ;main.c: 468: if(ADRESH<=1){tabState = 1;}
  3262  000A4E  0E02               	movlw	2
  3263  000A50  60C4               	cpfslt	4036,c	;volatile
  3264  000A52  D004               	goto	l293
  3265  000A54  0E00               	movlw	0
  3266  000A56  6E52               	movwf	_tabState+1,c
  3267  000A58  0E01               	movlw	1
  3268  000A5A  6E51               	movwf	_tabState,c
  3269  000A5C                     l293:
  3270                           
  3271                           ;main.c: 470: s2 = 1;
  3272  000A5C  0E00               	movlw	0
  3273  000A5E  6E5E               	movwf	_s2+1,c
  3274  000A60  0E01               	movlw	1
  3275  000A62  6E5D               	movwf	_s2,c
  3276                           
  3277                           ;main.c: 471: }
  3278  000A64  D0F3               	goto	l6156
  3279  000A66                     l6078:
  3280                           
  3281                           ;main.c: 479: else if (sodaSteps < (48+43+10+15+20)){
  3282  000A66  BE54               	btfsc	_sodaSteps+1,7,c
  3283  000A68  D006               	goto	l6080
  3284  000A6A  5054               	movf	_sodaSteps+1,w,c
  3285  000A6C  E10D               	bnz	l6082
  3286  000A6E  0E88               	movlw	136
  3287  000A70  5C53               	subwf	_sodaSteps,w,c
  3288  000A72  B0D8               	btfsc	status,0,c
  3289  000A74  D009               	goto	l6082
  3290  000A76                     l6080:
  3291                           
  3292                           ;main.c: 480: S3mode = 4;
  3293  000A76  0E00               	movlw	0
  3294  000A78  6E58               	movwf	_S3mode+1,c
  3295  000A7A  0E04               	movlw	4
  3296  000A7C  6E57               	movwf	_S3mode,c
  3297                           
  3298                           ;main.c: 481: S2mode = 2;
  3299  000A7E  0E00               	movlw	0
  3300  000A80  6E5A               	movwf	_S2mode+1,c
  3301  000A82  0E02               	movlw	2
  3302  000A84                     L8:
  3303  000A84  6E59               	movwf	_S2mode,c
  3304                           
  3305                           ;main.c: 482: }
  3306  000A86  D0E2               	goto	l6156
  3307  000A88                     l6082:
  3308                           
  3309                           ;main.c: 483: else if (tabState == 1){
  3310  000A88  0451               	decf	_tabState,w,c
  3311  000A8A  1052               	iorwf	_tabState+1,w,c
  3312  000A8C  A4D8               	btfss	status,2,c
  3313  000A8E  D044               	goto	l6106
  3314                           
  3315                           ;main.c: 484: if(sodaSteps < (48+43+10+15+20+30)){
  3316  000A90  BE54               	btfsc	_sodaSteps+1,7,c
  3317  000A92  D006               	goto	l6086
  3318  000A94  5054               	movf	_sodaSteps+1,w,c
  3319  000A96  E108               	bnz	l6088
  3320  000A98  0EA6               	movlw	166
  3321  000A9A  5C53               	subwf	_sodaSteps,w,c
  3322  000A9C  B0D8               	btfsc	status,0,c
  3323  000A9E  D004               	goto	l6088
  3324  000AA0                     l6086:
  3325                           
  3326                           ;main.c: 485: S3mode = 1;
  3327  000AA0  0E00               	movlw	0
  3328  000AA2  6E58               	movwf	_S3mode+1,c
  3329  000AA4  0E01               	movlw	1
  3330  000AA6  D047               	goto	L9
  3331  000AA8                     l6088:
  3332                           
  3333                           ;main.c: 489: else if(sodaSteps < (48+43+10+15+20+30+55)){
  3334  000AA8  BE54               	btfsc	_sodaSteps+1,7,c
  3335  000AAA  D006               	goto	l6090
  3336  000AAC  5054               	movf	_sodaSteps+1,w,c
  3337  000AAE  E110               	bnz	l6092
  3338  000AB0  0EDD               	movlw	221
  3339  000AB2  5C53               	subwf	_sodaSteps,w,c
  3340  000AB4  B0D8               	btfsc	status,0,c
  3341  000AB6  D00C               	goto	l6092
  3342  000AB8                     l6090:
  3343                           
  3344                           ;main.c: 490: S3mode = 2;
  3345  000AB8  0E00               	movlw	0
  3346  000ABA  6E58               	movwf	_S3mode+1,c
  3347  000ABC  0E02               	movlw	2
  3348  000ABE  6E57               	movwf	_S3mode,c
  3349                           
  3350                           ;main.c: 491: S2mode = 4;
  3351  000AC0  0E00               	movlw	0
  3352  000AC2  6E5A               	movwf	_S2mode+1,c
  3353  000AC4  0E04               	movlw	4
  3354  000AC6  6E59               	movwf	_S2mode,c
  3355                           
  3356                           ;main.c: 492: sodaAlign = 2;
  3357  000AC8  0E00               	movlw	0
  3358  000ACA  6E50               	movwf	_sodaAlign+1,c
  3359  000ACC  0E02               	movlw	2
  3360  000ACE  D051               	goto	L10
  3361  000AD0                     l6092:
  3362                           
  3363                           ;main.c: 495: else {
  3364                           ;main.c: 496: S2mode = 4;
  3365  000AD0  0E00               	movlw	0
  3366  000AD2  6E5A               	movwf	_S2mode+1,c
  3367  000AD4  0E04               	movlw	4
  3368  000AD6  6E59               	movwf	_S2mode,c
  3369                           
  3370                           ;main.c: 497: S3mode = 4;
  3371  000AD8  0E00               	movlw	0
  3372  000ADA  6E58               	movwf	_S3mode+1,c
  3373  000ADC  0E04               	movlw	4
  3374  000ADE  6E57               	movwf	_S3mode,c
  3375                           
  3376                           ;main.c: 498: updateS3(sodaAlign);
  3377  000AE0  C04F  F021         	movff	_sodaAlign,updateS3@mode
  3378  000AE4  C050  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3379  000AE8  EC5B  F00E         	call	_updateS3	;wreg free
  3380                           
  3381                           ;main.c: 499: readADC(5);
  3382  000AEC  0E05               	movlw	5
  3383  000AEE  EC72  F015         	call	_readADC
  3384                           
  3385                           ;main.c: 500: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3386  000AF2  0100               	movlb	0	; () banked
  3387  000AF4  51A1               	movf	main@prevSodaIR& (0+255),w,b
  3388  000AF6  5CC3               	subwf	4035,w,c	;volatile
  3389  000AF8  0100               	movlb	0	; () banked
  3390  000AFA  51A2               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3391  000AFC  58C4               	subwfb	4036,w,c	;volatile
  3392  000AFE  B0D8               	btfsc	status,0,c
  3393  000B00  D061               	goto	l6128
  3394                           
  3395                           ; BSR set to: 0
  3396  000B02  0EAB               	movlw	171
  3397  000B04  5CC3               	subwf	4035,w,c	;volatile
  3398  000B06  0E03               	movlw	3
  3399  000B08  58C4               	subwfb	4036,w,c	;volatile
  3400  000B0A  A0D8               	btfss	status,0,c
  3401  000B0C  D05B               	goto	l6128
  3402                           
  3403                           ; BSR set to: 0
  3404  000B0E  0E00               	movlw	0
  3405  000B10  6E52               	movwf	_tabState+1,c
  3406  000B12  0E65               	movlw	101
  3407  000B14  6E51               	movwf	_tabState,c
  3408  000B16  D056               	goto	l6128
  3409  000B18                     l6106:
  3410                           
  3411                           ;main.c: 505: else if(tabState == 0){
  3412  000B18  5051               	movf	_tabState,w,c
  3413  000B1A  1052               	iorwf	_tabState+1,w,c
  3414  000B1C  A4D8               	btfss	status,2,c
  3415  000B1E  D057               	goto	l6130
  3416                           
  3417                           ;main.c: 506: if(sodaSteps < (48+43+10+15+20+(43+75))){
  3418  000B20  BE54               	btfsc	_sodaSteps+1,7,c
  3419  000B22  D006               	goto	l6110
  3420  000B24  5054               	movf	_sodaSteps+1,w,c
  3421  000B26  E112               	bnz	l6112
  3422  000B28  0EFE               	movlw	254
  3423  000B2A  5C53               	subwf	_sodaSteps,w,c
  3424  000B2C  B0D8               	btfsc	status,0,c
  3425  000B2E  D00E               	goto	l6112
  3426  000B30                     l6110:
  3427                           
  3428                           ;main.c: 507: S3mode = 2;
  3429  000B30  0E00               	movlw	0
  3430  000B32  6E58               	movwf	_S3mode+1,c
  3431  000B34  0E02               	movlw	2
  3432  000B36                     L9:
  3433  000B36  6E57               	movwf	_S3mode,c
  3434                           
  3435                           ;main.c: 508: S2mode = 4;
  3436  000B38  0E00               	movlw	0
  3437  000B3A  6E5A               	movwf	_S2mode+1,c
  3438  000B3C  0E04               	movlw	4
  3439  000B3E  6E59               	movwf	_S2mode,c
  3440                           
  3441                           ;main.c: 509: sodaCnt = 0;
  3442  000B40  0E00               	movlw	0
  3443  000B42  0100               	movlb	0	; () banked
  3444  000B44  6FAF               	movwf	(_sodaCnt+1)& (0+255),b
  3445  000B46  0E00               	movlw	0
  3446  000B48  6FAE               	movwf	_sodaCnt& (0+255),b
  3447                           
  3448                           ;main.c: 510: }
  3449  000B4A  D080               	goto	l6156
  3450  000B4C                     l6112:
  3451                           
  3452                           ;main.c: 511: else if(sodaSteps < (48+43+10+15+20+(43+75)+65)){
  3453  000B4C  BE54               	btfsc	_sodaSteps+1,7,c
  3454  000B4E  D006               	goto	l6114
  3455  000B50  0E3F               	movlw	63
  3456  000B52  5C53               	subwf	_sodaSteps,w,c
  3457  000B54  0E01               	movlw	1
  3458  000B56  5854               	subwfb	_sodaSteps+1,w,c
  3459  000B58  B0D8               	btfsc	status,0,c
  3460  000B5A  D011               	goto	l6116
  3461  000B5C                     l6114:
  3462                           
  3463                           ;main.c: 512: S3mode = 1;
  3464  000B5C  0E00               	movlw	0
  3465  000B5E  6E58               	movwf	_S3mode+1,c
  3466  000B60  0E01               	movlw	1
  3467  000B62  6E57               	movwf	_S3mode,c
  3468                           
  3469                           ;main.c: 513: S2mode = 4;
  3470  000B64  0E00               	movlw	0
  3471  000B66  6E5A               	movwf	_S2mode+1,c
  3472  000B68  0E04               	movlw	4
  3473  000B6A  6E59               	movwf	_S2mode,c
  3474                           
  3475                           ;main.c: 514: sodaAlign = 1;
  3476  000B6C  0E00               	movlw	0
  3477  000B6E  6E50               	movwf	_sodaAlign+1,c
  3478  000B70  0E01               	movlw	1
  3479  000B72                     L10:
  3480  000B72  6E4F               	movwf	_sodaAlign,c
  3481                           
  3482                           ;main.c: 515: sodaI = 1;
  3483  000B74  0E00               	movlw	0
  3484  000B76  6E4A               	movwf	_sodaI+1,c
  3485  000B78  0E01               	movlw	1
  3486  000B7A  6E49               	movwf	_sodaI,c
  3487                           
  3488                           ;main.c: 516: }
  3489  000B7C  D067               	goto	l6156
  3490  000B7E                     l6116:
  3491                           
  3492                           ;main.c: 517: else {
  3493                           ;main.c: 518: S3mode = 4;
  3494  000B7E  0E00               	movlw	0
  3495  000B80  6E58               	movwf	_S3mode+1,c
  3496  000B82  0E04               	movlw	4
  3497  000B84  6E57               	movwf	_S3mode,c
  3498                           
  3499                           ;main.c: 519: S2mode = 4;
  3500  000B86  0E00               	movlw	0
  3501  000B88  6E5A               	movwf	_S2mode+1,c
  3502  000B8A  0E04               	movlw	4
  3503  000B8C  6E59               	movwf	_S2mode,c
  3504                           
  3505                           ;main.c: 520: updateS3(sodaAlign);
  3506  000B8E  C04F  F021         	movff	_sodaAlign,updateS3@mode
  3507  000B92  C050  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3508  000B96  EC5B  F00E         	call	_updateS3	;wreg free
  3509                           
  3510                           ;main.c: 521: readADC(5);
  3511  000B9A  0E05               	movlw	5
  3512  000B9C  EC72  F015         	call	_readADC
  3513                           
  3514                           ;main.c: 522: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  3515  000BA0  0100               	movlb	0	; () banked
  3516  000BA2  51A1               	movf	main@prevSodaIR& (0+255),w,b
  3517  000BA4  5CC3               	subwf	4035,w,c	;volatile
  3518  000BA6  0100               	movlb	0	; () banked
  3519  000BA8  51A2               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3520  000BAA  58C4               	subwfb	4036,w,c	;volatile
  3521  000BAC  B0D8               	btfsc	status,0,c
  3522  000BAE  D00A               	goto	l6128
  3523                           
  3524                           ; BSR set to: 0
  3525  000BB0  0EAB               	movlw	171
  3526  000BB2  5CC3               	subwf	4035,w,c	;volatile
  3527  000BB4  0E03               	movlw	3
  3528  000BB6  58C4               	subwfb	4036,w,c	;volatile
  3529  000BB8  A0D8               	btfss	status,0,c
  3530  000BBA  D004               	goto	l6128
  3531                           
  3532                           ; BSR set to: 0
  3533  000BBC  0E00               	movlw	0
  3534  000BBE  6E52               	movwf	_tabState+1,c
  3535  000BC0  0E64               	movlw	100
  3536  000BC2  D7A8               	goto	L13
  3537  000BC4                     l6128:
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;main.c: 523: prevSodaIR = ADRES;
  3541  000BC4  CFC3 F0A1          	movff	4035,main@prevSodaIR	;volatile
  3542  000BC8  CFC4 F0A2          	movff	4036,main@prevSodaIR+1	;volatile
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;main.c: 525: }
  3546                           ;main.c: 526: }
  3547                           
  3548                           ; BSR set to: 0
  3549  000BCC  D03F               	goto	l6156
  3550  000BCE                     l6130:
  3551                           
  3552                           ;main.c: 527: else{
  3553                           ;main.c: 528: if(tabState==101){sodaT++;}
  3554  000BCE  0E65               	movlw	101
  3555  000BD0  1851               	xorwf	_tabState,w,c
  3556  000BD2  1052               	iorwf	_tabState+1,w,c
  3557  000BD4  A4D8               	btfss	status,2,c
  3558  000BD6  D004               	goto	l6134
  3559  000BD8  0100               	movlb	0	; () banked
  3560  000BDA  4B99               	infsnz	main@sodaT& (0+255),f,b
  3561  000BDC  2B9A               	incf	(main@sodaT+1)& (0+255),f,b
  3562  000BDE  D008               	goto	l6138
  3563  000BE0                     l6134:
  3564                           
  3565                           ;main.c: 529: else if(tabState==100){sodaNT++;}
  3566  000BE0  0E64               	movlw	100
  3567  000BE2  1851               	xorwf	_tabState,w,c
  3568  000BE4  1052               	iorwf	_tabState+1,w,c
  3569  000BE6  A4D8               	btfss	status,2,c
  3570  000BE8  D003               	goto	l6138
  3571  000BEA  0100               	movlb	0	; () banked
  3572  000BEC  4B9B               	infsnz	main@sodaNT& (0+255),f,b
  3573  000BEE  2B9C               	incf	(main@sodaNT+1)& (0+255),f,b
  3574  000BF0                     l6138:
  3575                           
  3576                           ;main.c: 530: sodaSteps = 0;
  3577  000BF0  0E00               	movlw	0
  3578  000BF2  6E54               	movwf	_sodaSteps+1,c
  3579  000BF4  0E00               	movlw	0
  3580  000BF6  6E53               	movwf	_sodaSteps,c
  3581                           
  3582                           ;main.c: 531: tabState = 0;
  3583  000BF8  0E00               	movlw	0
  3584  000BFA  6E52               	movwf	_tabState+1,c
  3585  000BFC  0E00               	movlw	0
  3586  000BFE  6E51               	movwf	_tabState,c
  3587                           
  3588                           ;main.c: 532: prevSodaIR = 0;
  3589  000C00  0E00               	movlw	0
  3590  000C02  0100               	movlb	0	; () banked
  3591  000C04  6FA2               	movwf	(main@prevSodaIR+1)& (0+255),b
  3592  000C06  0E00               	movlw	0
  3593  000C08  6FA1               	movwf	main@prevSodaIR& (0+255),b
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;main.c: 533: if (sodaCnt == 0) {sodaSort = 0;}
  3597  000C0A  0100               	movlb	0	; () banked
  3598  000C0C  51AE               	movf	_sodaCnt& (0+255),w,b
  3599  000C0E  0100               	movlb	0	; () banked
  3600  000C10  11AF               	iorwf	(_sodaCnt+1)& (0+255),w,b
  3601  000C12  A4D8               	btfss	status,2,c
  3602  000C14  D005               	goto	l6148
  3603                           
  3604                           ; BSR set to: 0
  3605  000C16  0E00               	movlw	0
  3606  000C18  0100               	movlb	0	; () banked
  3607  000C1A  6FA0               	movwf	(main@sodaSort+1)& (0+255),b
  3608  000C1C  0E00               	movlw	0
  3609  000C1E  6F9F               	movwf	main@sodaSort& (0+255),b
  3610  000C20                     l6148:
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;main.c: 535: if(s3 == 2 || s3 == 3){S3mode = 3;}
  3614  000C20  0E02               	movlw	2
  3615  000C22  0100               	movlb	0	; () banked
  3616  000C24  19B6               	xorwf	_s3& (0+255),w,b
  3617  000C26  0100               	movlb	0	; () banked
  3618  000C28  11B7               	iorwf	(_s3+1)& (0+255),w,b
  3619  000C2A  B4D8               	btfsc	status,2,c
  3620  000C2C  D007               	goto	l6152
  3621                           
  3622                           ; BSR set to: 0
  3623  000C2E  0E03               	movlw	3
  3624  000C30  0100               	movlb	0	; () banked
  3625  000C32  19B6               	xorwf	_s3& (0+255),w,b
  3626  000C34  0100               	movlb	0	; () banked
  3627  000C36  11B7               	iorwf	(_s3+1)& (0+255),w,b
  3628  000C38  A4D8               	btfss	status,2,c
  3629  000C3A  D004               	goto	l6154
  3630  000C3C                     l6152:
  3631                           
  3632                           ; BSR set to: 0
  3633  000C3C  0E00               	movlw	0
  3634  000C3E  6E58               	movwf	_S3mode+1,c
  3635  000C40  0E03               	movlw	3
  3636  000C42  D003               	goto	L11
  3637  000C44                     l6154:
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;main.c: 536: else{S3mode = 5;}
  3641  000C44  0E00               	movlw	0
  3642  000C46  6E58               	movwf	_S3mode+1,c
  3643  000C48  0E05               	movlw	5
  3644  000C4A                     L11:
  3645  000C4A  6E57               	movwf	_S3mode,c
  3646  000C4C                     l6156:
  3647                           
  3648                           ;main.c: 537: }
  3649                           ;main.c: 538: }
  3650                           ;main.c: 541: if(seconds%7==1 && seconds <7){PWM2slow(750);}
  3651  000C4C  C0B4  F021         	movff	_seconds,___awmod@dividend
  3652  000C50  C0B5  F022         	movff	_seconds+1,___awmod@dividend+1
  3653  000C54  0E00               	movlw	0
  3654  000C56  6E24               	movwf	___awmod@divisor+1,c
  3655  000C58  0E07               	movlw	7
  3656  000C5A  6E23               	movwf	___awmod@divisor,c
  3657  000C5C  EC48  F013         	call	___awmod	;wreg free
  3658  000C60  0421               	decf	?___awmod,w,c
  3659  000C62  1022               	iorwf	?___awmod+1,w,c
  3660  000C64  A4D8               	btfss	status,2,c
  3661  000C66  D012               	goto	l6162
  3662  000C68  0100               	movlb	0	; () banked
  3663  000C6A  BFB5               	btfsc	(_seconds+1)& (0+255),7,b
  3664  000C6C  D008               	goto	l6160
  3665  000C6E  0100               	movlb	0	; () banked
  3666  000C70  51B5               	movf	(_seconds+1)& (0+255),w,b
  3667  000C72  E10C               	bnz	l6162
  3668  000C74  0E07               	movlw	7
  3669  000C76  0100               	movlb	0	; () banked
  3670  000C78  5DB4               	subwf	_seconds& (0+255),w,b
  3671  000C7A  B0D8               	btfsc	status,0,c
  3672  000C7C  D007               	goto	l6162
  3673  000C7E                     l6160:
  3674                           
  3675                           ; BSR set to: 0
  3676  000C7E  0E02               	movlw	2
  3677  000C80  6E22               	movwf	PWM2slow@duty+1,c
  3678  000C82  0EEE               	movlw	238
  3679  000C84  6E21               	movwf	PWM2slow@duty,c
  3680  000C86  EC66  F014         	call	_PWM2slow	;wreg free
  3681  000C8A  D048               	goto	l320
  3682  000C8C                     l6162:
  3683                           
  3684                           ;main.c: 542: else if(seconds%7==2){PWM2slow(750);}
  3685  000C8C  C0B4  F021         	movff	_seconds,___awmod@dividend
  3686  000C90  C0B5  F022         	movff	_seconds+1,___awmod@dividend+1
  3687  000C94  0E00               	movlw	0
  3688  000C96  6E24               	movwf	___awmod@divisor+1,c
  3689  000C98  0E07               	movlw	7
  3690  000C9A  6E23               	movwf	___awmod@divisor,c
  3691  000C9C  EC48  F013         	call	___awmod	;wreg free
  3692  000CA0  0E02               	movlw	2
  3693  000CA2  1821               	xorwf	?___awmod,w,c
  3694  000CA4  1022               	iorwf	?___awmod+1,w,c
  3695  000CA6  A4D8               	btfss	status,2,c
  3696  000CA8  D007               	goto	l6166
  3697  000CAA  0E02               	movlw	2
  3698  000CAC  6E22               	movwf	PWM2slow@duty+1,c
  3699  000CAE  0EEE               	movlw	238
  3700  000CB0  6E21               	movwf	PWM2slow@duty,c
  3701  000CB2  EC66  F014         	call	_PWM2slow	;wreg free
  3702  000CB6  D032               	goto	l320
  3703  000CB8                     l6166:
  3704                           
  3705                           ;main.c: 543: else if(seconds%7==5){PWM2(900,2);}
  3706  000CB8  C0B4  F021         	movff	_seconds,___awmod@dividend
  3707  000CBC  C0B5  F022         	movff	_seconds+1,___awmod@dividend+1
  3708  000CC0  0E00               	movlw	0
  3709  000CC2  6E24               	movwf	___awmod@divisor+1,c
  3710  000CC4  0E07               	movlw	7
  3711  000CC6  6E23               	movwf	___awmod@divisor,c
  3712  000CC8  EC48  F013         	call	___awmod	;wreg free
  3713  000CCC  0E05               	movlw	5
  3714  000CCE  1821               	xorwf	?___awmod,w,c
  3715  000CD0  1022               	iorwf	?___awmod+1,w,c
  3716  000CD2  A4D8               	btfss	status,2,c
  3717  000CD4  D00B               	goto	l6170
  3718  000CD6  0E03               	movlw	3
  3719  000CD8  6E22               	movwf	PWM2@duty+1,c
  3720  000CDA  0E84               	movlw	132
  3721  000CDC  6E21               	movwf	PWM2@duty,c
  3722  000CDE  0E00               	movlw	0
  3723  000CE0  6E24               	movwf	PWM2@dir+1,c
  3724  000CE2  0E02               	movlw	2
  3725  000CE4  6E23               	movwf	PWM2@dir,c
  3726  000CE6  EC0C  F013         	call	_PWM2	;wreg free
  3727  000CEA  D018               	goto	l320
  3728  000CEC                     l6170:
  3729                           
  3730                           ;main.c: 544: else if(seconds%7 == 0){PWM2(900, 1);}
  3731  000CEC  C0B4  F021         	movff	_seconds,___awmod@dividend
  3732  000CF0  C0B5  F022         	movff	_seconds+1,___awmod@dividend+1
  3733  000CF4  0E00               	movlw	0
  3734  000CF6  6E24               	movwf	___awmod@divisor+1,c
  3735  000CF8  0E07               	movlw	7
  3736  000CFA  6E23               	movwf	___awmod@divisor,c
  3737  000CFC  EC48  F013         	call	___awmod	;wreg free
  3738  000D00  5021               	movf	?___awmod,w,c
  3739  000D02  1022               	iorwf	?___awmod+1,w,c
  3740  000D04  A4D8               	btfss	status,2,c
  3741  000D06  D00A               	goto	l320
  3742  000D08  0E03               	movlw	3
  3743  000D0A  6E22               	movwf	PWM2@duty+1,c
  3744  000D0C  0E84               	movlw	132
  3745  000D0E  6E21               	movwf	PWM2@duty,c
  3746  000D10  0E00               	movlw	0
  3747  000D12  6E24               	movwf	PWM2@dir+1,c
  3748  000D14  0E01               	movlw	1
  3749  000D16  6E23               	movwf	PWM2@dir,c
  3750  000D18  EC0C  F013         	call	_PWM2	;wreg free
  3751  000D1C                     l320:
  3752                           
  3753                           ;main.c: 546: keyinterrupt();
  3754  000D1C  EC93  F015         	call	_keyinterrupt	;wreg free
  3755                           
  3756                           ;main.c: 547: }while(keypress==(0) &&
  3757                           ;main.c: 548: ((seconds -prevSoupLoad) < 13 || (seconds-prevSodaLoad) < 13)
  3758                           ;main.c: 549: && seconds < 180);
  3759  000D20  0100               	movlb	0	; () banked
  3760  000D22  51BA               	movf	_keypress& (0+255),w,b	;volatile
  3761  000D24  A4D8               	btfss	status,2,c
  3762  000D26  D043               	goto	l6182
  3763                           
  3764                           ; BSR set to: 0
  3765  000D28  C091  F089         	movff	main@prevSoupLoad,??_main
  3766  000D2C  C092  F08A         	movff	main@prevSoupLoad+1,??_main+1
  3767  000D30  0100               	movlb	0	; () banked
  3768  000D32  1F89               	comf	??_main& (0+255),f,b
  3769  000D34  1F8A               	comf	(??_main+1)& (0+255),f,b
  3770  000D36  4B89               	infsnz	??_main& (0+255),f,b
  3771  000D38  2B8A               	incf	(??_main+1)& (0+255),f,b
  3772  000D3A  0100               	movlb	0	; () banked
  3773  000D3C  51B4               	movf	_seconds& (0+255),w,b
  3774  000D3E  0100               	movlb	0	; () banked
  3775  000D40  2789               	addwf	??_main& (0+255),f,b
  3776  000D42  0100               	movlb	0	; () banked
  3777  000D44  51B5               	movf	(_seconds+1)& (0+255),w,b
  3778  000D46  0100               	movlb	0	; () banked
  3779  000D48  238A               	addwfc	(??_main+1)& (0+255),f,b
  3780  000D4A  0100               	movlb	0	; () banked
  3781  000D4C  BF8A               	btfsc	(??_main+1)& (0+255),7,b
  3782  000D4E  D024               	goto	l6180
  3783  000D50  0100               	movlb	0	; () banked
  3784  000D52  518A               	movf	(??_main+1)& (0+255),w,b
  3785  000D54  E105               	bnz	u7840
  3786  000D56  0E0D               	movlw	13
  3787  000D58  0100               	movlb	0	; () banked
  3788  000D5A  5D89               	subwf	??_main& (0+255),w,b
  3789  000D5C  A0D8               	btfss	status,0,c
  3790  000D5E  D01C               	goto	l6180
  3791  000D60                     u7840:
  3792                           
  3793                           ; BSR set to: 0
  3794  000D60  C093  F089         	movff	main@prevSodaLoad,??_main
  3795  000D64  C094  F08A         	movff	main@prevSodaLoad+1,??_main+1
  3796  000D68  0100               	movlb	0	; () banked
  3797  000D6A  1F89               	comf	??_main& (0+255),f,b
  3798  000D6C  1F8A               	comf	(??_main+1)& (0+255),f,b
  3799  000D6E  4B89               	infsnz	??_main& (0+255),f,b
  3800  000D70  2B8A               	incf	(??_main+1)& (0+255),f,b
  3801  000D72  0100               	movlb	0	; () banked
  3802  000D74  51B4               	movf	_seconds& (0+255),w,b
  3803  000D76  0100               	movlb	0	; () banked
  3804  000D78  2789               	addwf	??_main& (0+255),f,b
  3805  000D7A  0100               	movlb	0	; () banked
  3806  000D7C  51B5               	movf	(_seconds+1)& (0+255),w,b
  3807  000D7E  0100               	movlb	0	; () banked
  3808  000D80  238A               	addwfc	(??_main+1)& (0+255),f,b
  3809  000D82  0100               	movlb	0	; () banked
  3810  000D84  BF8A               	btfsc	(??_main+1)& (0+255),7,b
  3811  000D86  D008               	goto	l6180
  3812  000D88  0100               	movlb	0	; () banked
  3813  000D8A  518A               	movf	(??_main+1)& (0+255),w,b
  3814  000D8C  E110               	bnz	l6182
  3815  000D8E  0E0D               	movlw	13
  3816  000D90  0100               	movlb	0	; () banked
  3817  000D92  5D89               	subwf	??_main& (0+255),w,b
  3818  000D94  B0D8               	btfsc	status,0,c
  3819  000D96  D00B               	goto	l6182
  3820  000D98                     l6180:
  3821                           
  3822                           ; BSR set to: 0
  3823  000D98  0100               	movlb	0	; () banked
  3824  000D9A  BFB5               	btfsc	(_seconds+1)& (0+255),7,b
  3825  000D9C  D4C2               	goto	l5940
  3826  000D9E  0100               	movlb	0	; () banked
  3827  000DA0  51B5               	movf	(_seconds+1)& (0+255),w,b
  3828  000DA2  E105               	bnz	l6182
  3829  000DA4  0EB4               	movlw	180
  3830  000DA6  0100               	movlb	0	; () banked
  3831  000DA8  5DB4               	subwf	_seconds& (0+255),w,b
  3832  000DAA  A0D8               	btfss	status,0,c
  3833  000DAC  D4BA               	goto	l5940
  3834  000DAE                     l6182:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main.c: 551: standby = 1;
  3838  000DAE  0E00               	movlw	0
  3839  000DB0  0100               	movlb	0	; () banked
  3840  000DB2  6FA6               	movwf	(main@standby+1)& (0+255),b
  3841  000DB4  0E01               	movlw	1
  3842  000DB6  6FA5               	movwf	main@standby& (0+255),b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 552: PWM2off();
  3846  000DB8  ECD3  F015         	call	_PWM2off	;wreg free
  3847                           
  3848                           ;main.c: 553: PWM1off();
  3849  000DBC  ECD8  F015         	call	_PWM1off	;wreg free
  3850                           
  3851                           ;main.c: 554: S1mode = 0;
  3852  000DC0  0E00               	movlw	0
  3853  000DC2  6E5C               	movwf	_S1mode+1,c
  3854  000DC4  0E00               	movlw	0
  3855  000DC6  6E5B               	movwf	_S1mode,c
  3856                           
  3857                           ;main.c: 555: S2mode = 0;
  3858  000DC8  0E00               	movlw	0
  3859  000DCA  6E5A               	movwf	_S2mode+1,c
  3860  000DCC  0E00               	movlw	0
  3861  000DCE  6E59               	movwf	_S2mode,c
  3862                           
  3863                           ;main.c: 556: S3mode = 0;
  3864  000DD0  0E00               	movlw	0
  3865  000DD2  6E58               	movwf	_S3mode+1,c
  3866  000DD4  0E00               	movlw	0
  3867  000DD6  6E57               	movwf	_S3mode,c
  3868                           
  3869                           ;main.c: 559: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  3870  000DD8  C0B4  F025         	movff	_seconds,addRun@dur
  3871  000DDC  C0B5  F026         	movff	_seconds+1,addRun@dur+1
  3872  000DE0  C0AD  F027         	movff	_time+6,addRun@year
  3873  000DE4  6A28               	clrf	addRun@year+1,c
  3874  000DE6  C0AC  F029         	movff	_time+5,addRun@month
  3875  000DEA  6A2A               	clrf	addRun@month+1,c
  3876  000DEC  C0AB  F02B         	movff	_time+4,addRun@date
  3877  000DF0  6A2C               	clrf	addRun@date+1,c
  3878  000DF2  C0A9  F02D         	movff	_time+2,addRun@hours
  3879  000DF6  6A2E               	clrf	addRun@hours+1,c
  3880  000DF8  C0A8  F02F         	movff	_time+1,addRun@mins
  3881  000DFC  6A30               	clrf	addRun@mins+1,c
  3882  000DFE  C0A7  F031         	movff	_time,addRun@secs
  3883  000E02  6A32               	clrf	addRun@secs+1,c
  3884  000E04  C099  F033         	movff	main@sodaT,addRun@sodaT
  3885  000E08  C09A  F034         	movff	main@sodaT+1,addRun@sodaT+1
  3886  000E0C  C09B  F035         	movff	main@sodaNT,addRun@sodaNT
  3887  000E10  C09C  F036         	movff	main@sodaNT+1,addRun@sodaNT+1
  3888  000E14  C095  F037         	movff	main@soupL,addRun@soupL
  3889  000E18  C096  F038         	movff	main@soupL+1,addRun@soupL+1
  3890  000E1C  C097  F039         	movff	main@soupNL,addRun@soupNL
  3891  000E20  C098  F03A         	movff	main@soupNL+1,addRun@soupNL+1
  3892  000E24  ECB4  F011         	call	_addRun	;wreg free
  3893                           
  3894                           ;main.c: 561: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3895  000E28  0E01               	movlw	1
  3896  000E2A  ECC8  F015         	call	_lcdInst
  3897  000E2E  0E34               	movlw	52
  3898  000E30  0100               	movlb	0	; () banked
  3899  000E32  6F89               	movwf	??_main& (0+255),b
  3900  000E34  0EF1               	movlw	241
  3901  000E36                     u8057:
  3902  000E36  2EE8               	decfsz	wreg,f,c
  3903  000E38  D7FE               	bra	u8057
  3904  000E3A  2F89               	decfsz	??_main& (0+255),f,b
  3905  000E3C  D7FC               	bra	u8057
  3906  000E3E  D000               	nop2	
  3907                           
  3908                           ;main.c: 562: printf("Sort done! A:No");
  3909  000E40  0E46               	movlw	low STR_22
  3910  000E42  6E2D               	movwf	printf@f,c
  3911  000E44  0EFF               	movlw	high STR_22
  3912  000E46  6E2E               	movwf	printf@f+1,c
  3913  000E48  EC00  F009         	call	_printf	;wreg free
  3914                           
  3915                           ;main.c: 563: lcdInst(0b11000000);;
  3916  000E4C  0EC0               	movlw	192
  3917  000E4E  ECC8  F015         	call	_lcdInst
  3918                           
  3919                           ;main.c: 564: printf("View Logs? B:Yes");
  3920  000E52  0ED5               	movlw	low STR_23
  3921  000E54  6E2D               	movwf	printf@f,c
  3922  000E56  0EFE               	movlw	high STR_23
  3923  000E58  6E2E               	movwf	printf@f+1,c
  3924  000E5A  EC00  F009         	call	_printf	;wreg free
  3925                           
  3926                           ;main.c: 565: keycheck();
  3927  000E5E  EC9E  F015         	call	_keycheck	;wreg free
  3928                           
  3929                           ;main.c: 566: if(keypress == 7){
  3930  000E62  0E07               	movlw	7
  3931  000E64  0100               	movlb	0	; () banked
  3932  000E66  19BA               	xorwf	_keypress& (0+255),w,b	;volatile
  3933  000E68  A4D8               	btfss	status,2,c
  3934  000E6A  EF33  F000         	goto	l5640
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;main.c: 567: displayLog(1);
  3938  000E6E  0E00               	movlw	0
  3939  000E70  0100               	movlb	0	; () banked
  3940  000E72  6F81               	movwf	(displayLog@run+1)& (0+255),b
  3941  000E74  0E01               	movlw	1
  3942  000E76  6F80               	movwf	displayLog@run& (0+255),b
  3943  000E78  EC40  F007         	call	_displayLog	;wreg free
  3944  000E7C  EF33  F000         	goto	l5640
  3945  000E80                     __end_of_main:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           status	equ	0xFD8
  3951                           
  3952 ;; *************** function _updateTime *****************
  3953 ;; Defined at:
  3954 ;;		line 89 in file "I2C.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  j               1   35[COMRAM] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;Total ram usage:        1 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    4
  3975 ;; This function calls:
  3976 ;;		_I2C_Master_Read
  3977 ;;		_I2C_Master_Start
  3978 ;;		_I2C_Master_Stop
  3979 ;;		_I2C_Master_Write
  3980 ;; This function is called by:
  3981 ;;		_main
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text1
  3986  002700                     __ptext1:
  3987                           	opt stack 0
  3988  002700                     _updateTime:
  3989                           	opt stack 26
  3990                           
  3991                           ;I2C.c: 91: I2C_Master_Start();
  3992                           
  3993                           ;incstack = 0
  3994  002700  ECE1  F015         	call	_I2C_Master_Start	;wreg free
  3995                           
  3996                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  3997  002704  0E00               	movlw	0
  3998  002706  6E23               	movwf	I2C_Master_Write@d+1,c
  3999  002708  0ED0               	movlw	208
  4000  00270A  6E22               	movwf	I2C_Master_Write@d,c
  4001  00270C  ECCE  F015         	call	_I2C_Master_Write	;wreg free
  4002                           
  4003                           ;I2C.c: 93: I2C_Master_Write(0x00);
  4004  002710  0E00               	movlw	0
  4005  002712  6E23               	movwf	I2C_Master_Write@d+1,c
  4006  002714  0E00               	movlw	0
  4007  002716  6E22               	movwf	I2C_Master_Write@d,c
  4008  002718  ECCE  F015         	call	_I2C_Master_Write	;wreg free
  4009                           
  4010                           ;I2C.c: 94: I2C_Master_Stop();
  4011  00271C  ECDD  F015         	call	_I2C_Master_Stop	;wreg free
  4012                           
  4013                           ;I2C.c: 97: I2C_Master_Start();
  4014  002720  ECE1  F015         	call	_I2C_Master_Start	;wreg free
  4015                           
  4016                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  4017  002724  0E00               	movlw	0
  4018  002726  6E23               	movwf	I2C_Master_Write@d+1,c
  4019  002728  0ED1               	movlw	209
  4020  00272A  6E22               	movwf	I2C_Master_Write@d,c
  4021  00272C  ECCE  F015         	call	_I2C_Master_Write	;wreg free
  4022                           
  4023                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  4024  002730  0E00               	movlw	0
  4025  002732  6E24               	movwf	updateTime@j,c
  4026  002734                     l3998:
  4027  002734  0E05               	movlw	5
  4028  002736  6424               	cpfsgt	updateTime@j,c
  4029  002738  D001               	goto	l4002
  4030  00273A  D00E               	goto	l4008
  4031  00273C                     l4002:
  4032                           
  4033                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  4034  00273C  5024               	movf	updateTime@j,w,c
  4035  00273E  0D01               	mullw	1
  4036  002740  0EA7               	movlw	low _time
  4037  002742  24F3               	addwf	prodl,w,c
  4038  002744  6ED9               	movwf	fsr2l,c
  4039  002746  0E00               	movlw	high _time
  4040  002748  20F4               	addwfc	prodh,w,c
  4041  00274A  6EDA               	movwf	fsr2h,c
  4042  00274C  0E01               	movlw	1
  4043  00274E  EC39  F015         	call	_I2C_Master_Read
  4044  002752  6EDF               	movwf	indf2,c
  4045  002754  2A24               	incf	updateTime@j,f,c
  4046  002756  D7EE               	goto	l3998
  4047  002758                     l4008:
  4048                           
  4049                           ;I2C.c: 101: }
  4050                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  4051  002758  0E00               	movlw	0
  4052  00275A  EC39  F015         	call	_I2C_Master_Read
  4053  00275E  0100               	movlb	0	; () banked
  4054  002760  6FAD               	movwf	(_time+6)& (0+255),b
  4055                           
  4056                           ;I2C.c: 103: I2C_Master_Stop();
  4057  002762  ECDD  F015         	call	_I2C_Master_Stop	;wreg free
  4058  002766  0012               	return		;funcret
  4059  002768                     __end_of_updateTime:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           prodh	equ	0xFF4
  4063                           prodl	equ	0xFF3
  4064                           postinc0	equ	0xFEE
  4065                           wreg	equ	0xFE8
  4066                           indf2	equ	0xFDF
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _I2C_Master_Write *****************
  4072 ;; Defined at:
  4073 ;;		line 54 in file "I2C.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  d               2   33[COMRAM] unsigned int 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    3
  4094 ;; This function calls:
  4095 ;;		_I2C_Master_Wait
  4096 ;; This function is called by:
  4097 ;;		_updateTime
  4098 ;;		_set_time
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text2
  4103  002B9C                     __ptext2:
  4104                           	opt stack 0
  4105  002B9C                     _I2C_Master_Write:
  4106                           	opt stack 26
  4107                           
  4108                           ;I2C.c: 56: I2C_Master_Wait();
  4109                           
  4110                           ;incstack = 0
  4111  002B9C  ECA9  F015         	call	_I2C_Master_Wait	;wreg free
  4112                           
  4113                           ;I2C.c: 57: SSPBUF = d;
  4114  002BA0  C022  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4115  002BA4  0012               	return		;funcret
  4116  002BA6                     __end_of_I2C_Master_Write:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           prodh	equ	0xFF4
  4120                           prodl	equ	0xFF3
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           indf2	equ	0xFDF
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _I2C_Master_Stop *****************
  4129 ;; Defined at:
  4130 ;;		line 48 in file "I2C.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    3
  4151 ;; This function calls:
  4152 ;;		_I2C_Master_Wait
  4153 ;; This function is called by:
  4154 ;;		_updateTime
  4155 ;;		_set_time
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text3
  4160  002BBA                     __ptext3:
  4161                           	opt stack 0
  4162  002BBA                     _I2C_Master_Stop:
  4163                           	opt stack 26
  4164                           
  4165                           ;I2C.c: 50: I2C_Master_Wait();
  4166                           
  4167                           ;incstack = 0
  4168  002BBA  ECA9  F015         	call	_I2C_Master_Wait	;wreg free
  4169                           
  4170                           ;I2C.c: 51: PEN = 1;
  4171  002BBE  84C5               	bsf	4037,2,c	;volatile
  4172  002BC0  0012               	return		;funcret
  4173  002BC2                     __end_of_I2C_Master_Stop:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf2	equ	0xFDF
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _I2C_Master_Start *****************
  4186 ;; Defined at:
  4187 ;;		line 36 in file "I2C.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    3
  4208 ;; This function calls:
  4209 ;;		_I2C_Master_Wait
  4210 ;; This function is called by:
  4211 ;;		_updateTime
  4212 ;;		_set_time
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text4
  4217  002BC2                     __ptext4:
  4218                           	opt stack 0
  4219  002BC2                     _I2C_Master_Start:
  4220                           	opt stack 26
  4221                           
  4222                           ;I2C.c: 38: I2C_Master_Wait();
  4223                           
  4224                           ;incstack = 0
  4225  002BC2  ECA9  F015         	call	_I2C_Master_Wait	;wreg free
  4226                           
  4227                           ;I2C.c: 39: SEN = 1;
  4228  002BC6  80C5               	bsf	4037,0,c	;volatile
  4229  002BC8  0012               	return		;funcret
  4230  002BCA                     __end_of_I2C_Master_Start:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           indf2	equ	0xFDF
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _I2C_Master_Read *****************
  4243 ;; Defined at:
  4244 ;;		line 60 in file "I2C.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  a               1    wreg     unsigned char 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  a               1   33[COMRAM] unsigned char 
  4249 ;;  temp            1   34[COMRAM] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      unsigned char 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        2 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    3
  4266 ;; This function calls:
  4267 ;;		_I2C_Master_Wait
  4268 ;; This function is called by:
  4269 ;;		_updateTime
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text5
  4274  002A72                     __ptext5:
  4275                           	opt stack 0
  4276  002A72                     _I2C_Master_Read:
  4277                           	opt stack 26
  4278                           
  4279                           ;incstack = 0
  4280                           ;I2C_Master_Read@a stored from wreg
  4281  002A72  6E22               	movwf	I2C_Master_Read@a,c
  4282                           
  4283                           ;I2C.c: 62: unsigned char temp;
  4284                           ;I2C.c: 63: I2C_Master_Wait();
  4285  002A74  ECA9  F015         	call	_I2C_Master_Wait	;wreg free
  4286                           
  4287                           ;I2C.c: 64: RCEN = 1;
  4288  002A78  86C5               	bsf	4037,3,c	;volatile
  4289                           
  4290                           ;I2C.c: 65: I2C_Master_Wait();
  4291  002A7A  ECA9  F015         	call	_I2C_Master_Wait	;wreg free
  4292                           
  4293                           ;I2C.c: 66: temp = SSPBUF;
  4294  002A7E  CFC9 F023          	movff	4041,I2C_Master_Read@temp	;volatile
  4295                           
  4296                           ;I2C.c: 67: I2C_Master_Wait();
  4297  002A82  ECA9  F015         	call	_I2C_Master_Wait	;wreg free
  4298                           
  4299                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4300  002A86  5022               	movf	I2C_Master_Read@a,w,c
  4301  002A88  A4D8               	btfss	status,2,c
  4302  002A8A  D002               	goto	u4450
  4303  002A8C  8AC5               	bsf	4037,5,c	;volatile
  4304  002A8E  D001               	goto	l3866
  4305  002A90                     u4450:
  4306  002A90  9AC5               	bcf	4037,5,c	;volatile
  4307  002A92                     l3866:
  4308                           
  4309                           ;I2C.c: 69: ACKEN = 1;
  4310  002A92  88C5               	bsf	4037,4,c	;volatile
  4311                           
  4312                           ;I2C.c: 70: return temp;
  4313  002A94  5023               	movf	I2C_Master_Read@temp,w,c
  4314  002A96  0012               	return	
  4315  002A98                     __end_of_I2C_Master_Read:
  4316                           	opt stack 0
  4317                           tblptru	equ	0xFF8
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           indf2	equ	0xFDF
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _I2C_Master_Wait *****************
  4328 ;; Defined at:
  4329 ;;		line 31 in file "I2C.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;Total ram usage:        1 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		Nothing
  4352 ;; This function is called by:
  4353 ;;		_I2C_Master_Start
  4354 ;;		_I2C_Master_Stop
  4355 ;;		_I2C_Master_Write
  4356 ;;		_I2C_Master_Read
  4357 ;;		_I2C_Master_RepeatedStart
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text6
  4362  002B52                     __ptext6:
  4363                           	opt stack 0
  4364  002B52                     _I2C_Master_Wait:
  4365                           	opt stack 26
  4366  002B52                     l394:
  4367  002B52  B4C7               	btfsc	4039,2,c	;volatile
  4368  002B54  D7FE               	goto	l394
  4369  002B56  CFC5 F021          	movff	4037,??_I2C_Master_Wait	;volatile
  4370  002B5A  0E1F               	movlw	31
  4371  002B5C  1621               	andwf	??_I2C_Master_Wait,f,c
  4372  002B5E  B4D8               	btfsc	status,2,c
  4373  002B60  0012               	return	
  4374  002B62  D7F7               	goto	l394
  4375  002B64                     __end_of_I2C_Master_Wait:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           postinc0	equ	0xFEE
  4381                           wreg	equ	0xFE8
  4382                           indf2	equ	0xFDF
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _keyinterrupt *****************
  4388 ;; Defined at:
  4389 ;;		line 19 in file "interface.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, status,0
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    2
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		_main
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text7
  4418  002B26                     __ptext7:
  4419                           	opt stack 0
  4420  002B26                     _keyinterrupt:
  4421                           	opt stack 28
  4422                           
  4423                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  4424                           
  4425                           ;incstack = 0
  4426  002B26  A281               	btfss	3969,1,c	;volatile
  4427  002B28  D007               	goto	l689
  4428                           
  4429                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  4430  002B2A  3881               	swapf	3969,w,c	;volatile
  4431  002B2C  0B0F               	andlw	15
  4432  002B2E  0B0F               	andlw	15
  4433  002B30  0100               	movlb	0	; () banked
  4434  002B32  6FBA               	movwf	_keypress& (0+255),b	;volatile
  4435  002B34                     l690:
  4436  002B34  B281               	btfsc	3969,1,c	;volatile
  4437  002B36  D7FE               	goto	l690
  4438  002B38                     l689:
  4439                           
  4440                           ;interface.c: 23: }
  4441                           ;interface.c: 24: __nop();
  4442  002B38  F000               	nop	
  4443  002B3A  0012               	return		;funcret
  4444  002B3C                     __end_of_keyinterrupt:
  4445                           	opt stack 0
  4446                           tblptru	equ	0xFF8
  4447                           prodh	equ	0xFF4
  4448                           prodl	equ	0xFF3
  4449                           postinc0	equ	0xFEE
  4450                           wreg	equ	0xFE8
  4451                           indf2	equ	0xFDF
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _initialize *****************
  4457 ;; Defined at:
  4458 ;;		line 72 in file "main.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    5
  4479 ;; This function calls:
  4480 ;;		_I2C_Master_Init
  4481 ;;		_initLCD
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text8
  4488  0025A0                     __ptext8:
  4489                           	opt stack 0
  4490  0025A0                     _initialize:
  4491                           	opt stack 25
  4492                           
  4493                           ;main.c: 74: OSCCON = 0xF0;
  4494                           
  4495                           ;incstack = 0
  4496  0025A0  0EF0               	movlw	240
  4497  0025A2  6ED3               	movwf	4051,c	;volatile
  4498                           
  4499                           ;main.c: 75: OSCTUNEbits.PLLEN = 1;
  4500  0025A4  8C9B               	bsf	3995,6,c	;volatile
  4501                           
  4502                           ;main.c: 77: TRISA = 0b00101111;
  4503  0025A6  0E2F               	movlw	47
  4504  0025A8  6E92               	movwf	3986,c	;volatile
  4505                           
  4506                           ;main.c: 78: TRISB = 0b11110010;
  4507  0025AA  0EF2               	movlw	242
  4508  0025AC  6E93               	movwf	3987,c	;volatile
  4509                           
  4510                           ;main.c: 79: TRISC = 0b00000000;
  4511  0025AE  0E00               	movlw	0
  4512  0025B0  6E94               	movwf	3988,c	;volatile
  4513                           
  4514                           ;main.c: 81: TRISD = 0x00;
  4515  0025B2  0E00               	movlw	0
  4516  0025B4  6E95               	movwf	3989,c	;volatile
  4517                           
  4518                           ;main.c: 82: TRISE = 0b00000001;
  4519  0025B6  0E01               	movlw	1
  4520  0025B8  6E96               	movwf	3990,c	;volatile
  4521                           
  4522                           ;main.c: 84: PR2 = 0xff;
  4523  0025BA  68CB               	setf	4043,c	;volatile
  4524                           
  4525                           ;main.c: 85: CCP1CON = 0b00001100;
  4526  0025BC  0E0C               	movlw	12
  4527  0025BE  6EBD               	movwf	4029,c	;volatile
  4528                           
  4529                           ;main.c: 86: CCPR1L = 0x00;
  4530  0025C0  0E00               	movlw	0
  4531  0025C2  6EBE               	movwf	4030,c	;volatile
  4532                           
  4533                           ;main.c: 87: CCP2CON = 0b00001100;
  4534  0025C4  0E0C               	movlw	12
  4535  0025C6  6EBA               	movwf	4026,c	;volatile
  4536                           
  4537                           ;main.c: 88: CCPR2L = 0x00;
  4538  0025C8  0E00               	movlw	0
  4539  0025CA  6EBB               	movwf	4027,c	;volatile
  4540                           
  4541                           ;main.c: 89: T2CON = 0b00000101;
  4542  0025CC  0E05               	movlw	5
  4543  0025CE  6ECA               	movwf	4042,c	;volatile
  4544                           
  4545                           ;main.c: 91: LATA = 0x00;
  4546  0025D0  0E00               	movlw	0
  4547  0025D2  6E89               	movwf	3977,c	;volatile
  4548                           
  4549                           ;main.c: 92: LATB = 0x00;
  4550  0025D4  0E00               	movlw	0
  4551  0025D6  6E8A               	movwf	3978,c	;volatile
  4552                           
  4553                           ;main.c: 93: LATC = 0x00;
  4554  0025D8  0E00               	movlw	0
  4555  0025DA  6E8B               	movwf	3979,c	;volatile
  4556                           
  4557                           ;main.c: 94: LATD = 0x00;
  4558  0025DC  0E00               	movlw	0
  4559  0025DE  6E8C               	movwf	3980,c	;volatile
  4560                           
  4561                           ;main.c: 95: LATE = 0x00;
  4562  0025E0  0E00               	movlw	0
  4563  0025E2  6E8D               	movwf	3981,c	;volatile
  4564                           
  4565                           ;main.c: 97: initLCD();
  4566  0025E4  ECB2  F014         	call	_initLCD	;wreg free
  4567                           
  4568                           ;main.c: 99: I2C_Master_Init(32000);
  4569  0025E8  0E00               	movlw	0
  4570  0025EA  6E2E               	movwf	I2C_Master_Init@c,c
  4571  0025EC  0E7D               	movlw	125
  4572  0025EE  6E2F               	movwf	I2C_Master_Init@c+1,c
  4573  0025F0  0E00               	movlw	0
  4574  0025F2  6E30               	movwf	I2C_Master_Init@c+2,c
  4575  0025F4  0E00               	movlw	0
  4576  0025F6  6E31               	movwf	I2C_Master_Init@c+3,c
  4577  0025F8  ECE5  F013         	call	_I2C_Master_Init	;wreg free
  4578                           
  4579                           ;main.c: 102: nRBPU = 0;
  4580  0025FC  9EF1               	bcf	intcon2,7,c	;volatile
  4581                           
  4582                           ;main.c: 104: ADCON1 = 0b00001001;
  4583  0025FE  0E09               	movlw	9
  4584  002600  6EC1               	movwf	4033,c	;volatile
  4585                           
  4586                           ;main.c: 105: ADCON2 = 0b10001001;
  4587  002602  0E89               	movlw	137
  4588  002604  6EC0               	movwf	4032,c	;volatile
  4589                           
  4590                           ;main.c: 106: CVRCON = 0x00;
  4591  002606  0E00               	movlw	0
  4592  002608  6EB5               	movwf	4021,c	;volatile
  4593                           
  4594                           ;main.c: 107: CMCONbits.CIS = 0;
  4595  00260A  96B4               	bcf	4020,3,c	;volatile
  4596                           
  4597                           ;main.c: 108: ADFM = 1;
  4598  00260C  8EC0               	bsf	4032,7,c	;volatile
  4599                           
  4600                           ;main.c: 110: TMR0IE = 1;
  4601  00260E  8AF2               	bsf	intcon,5,c	;volatile
  4602                           
  4603                           ;main.c: 111: TMR1IE = 1;
  4604  002610  809D               	bsf	3997,0,c	;volatile
  4605                           
  4606                           ;main.c: 113: PEIE = 1;
  4607  002612  8CF2               	bsf	intcon,6,c	;volatile
  4608                           
  4609                           ;main.c: 115: (INTCONbits.GIE = 1);
  4610  002614  8EF2               	bsf	intcon,7,c	;volatile
  4611  002616  0012               	return		;funcret
  4612  002618                     __end_of_initialize:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           indf2	equ	0xFDF
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _initLCD *****************
  4627 ;; Defined at:
  4628 ;;		line 11 in file "lcd.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        1 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    4
  4649 ;; This function calls:
  4650 ;;		_lcdInst
  4651 ;; This function is called by:
  4652 ;;		_initialize
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text9
  4657  002964                     __ptext9:
  4658                           	opt stack 0
  4659  002964                     _initLCD:
  4660                           	opt stack 25
  4661                           
  4662                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  4663                           
  4664                           ;incstack = 0
  4665  002964  0E9C               	movlw	156
  4666  002966  6E24               	movwf	??_initLCD& (0+255),c
  4667  002968  0ED7               	movlw	215
  4668  00296A                     u8067:
  4669  00296A  2EE8               	decfsz	wreg,f,c
  4670  00296C  D7FE               	bra	u8067
  4671  00296E  2E24               	decfsz	??_initLCD& (0+255),f,c
  4672  002970  D7FC               	bra	u8067
  4673  002972  F000               	nop	
  4674                           
  4675                           ;lcd.c: 13: lcdInst(0b00110011);
  4676  002974  0E33               	movlw	51
  4677  002976  ECC8  F015         	call	_lcdInst
  4678                           
  4679                           ;lcd.c: 14: lcdInst(0b00110010);
  4680  00297A  0E32               	movlw	50
  4681  00297C  ECC8  F015         	call	_lcdInst
  4682                           
  4683                           ;lcd.c: 15: lcdInst(0b00101000);
  4684  002980  0E28               	movlw	40
  4685  002982  ECC8  F015         	call	_lcdInst
  4686                           
  4687                           ;lcd.c: 16: lcdInst(0b00001111);
  4688  002986  0E0F               	movlw	15
  4689  002988  ECC8  F015         	call	_lcdInst
  4690                           
  4691                           ;lcd.c: 17: lcdInst(0b00000110);
  4692  00298C  0E06               	movlw	6
  4693  00298E  ECC8  F015         	call	_lcdInst
  4694                           
  4695                           ;lcd.c: 18: lcdInst(0b00000001);
  4696  002992  0E01               	movlw	1
  4697  002994  ECC8  F015         	call	_lcdInst
  4698                           
  4699                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  4700  002998  0E9C               	movlw	156
  4701  00299A  6E24               	movwf	??_initLCD& (0+255),c
  4702  00299C  0ED7               	movlw	215
  4703  00299E                     u8077:
  4704  00299E  2EE8               	decfsz	wreg,f,c
  4705  0029A0  D7FE               	bra	u8077
  4706  0029A2  2E24               	decfsz	??_initLCD& (0+255),f,c
  4707  0029A4  D7FC               	bra	u8077
  4708  0029A6  F000               	nop	
  4709  0029A8  0012               	return		;funcret
  4710  0029AA                     __end_of_initLCD:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           prodh	equ	0xFF4
  4714                           prodl	equ	0xFF3
  4715                           intcon	equ	0xFF2
  4716                           intcon2	equ	0xFF1
  4717                           postinc0	equ	0xFEE
  4718                           wreg	equ	0xFE8
  4719                           indf2	equ	0xFDF
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _I2C_Master_Init *****************
  4725 ;; Defined at:
  4726 ;;		line 20 in file "I2C.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  c               4   45[COMRAM] const unsigned long 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      void 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;Total ram usage:        8 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    3
  4747 ;; This function calls:
  4748 ;;		___lldiv
  4749 ;; This function is called by:
  4750 ;;		_initialize
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text10
  4755  0027CA                     __ptext10:
  4756                           	opt stack 0
  4757  0027CA                     _I2C_Master_Init:
  4758                           	opt stack 26
  4759                           
  4760                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  4761                           
  4762                           ;incstack = 0
  4763  0027CA  0E00               	movlw	0
  4764  0027CC  6EC7               	movwf	4039,c	;volatile
  4765                           
  4766                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  4767  0027CE  0E28               	movlw	40
  4768  0027D0  6EC6               	movwf	4038,c	;volatile
  4769                           
  4770                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  4771  0027D2  0E00               	movlw	0
  4772  0027D4  6EC5               	movwf	4037,c	;volatile
  4773                           
  4774                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  4775  0027D6  0E00               	movlw	0
  4776  0027D8  6E21               	movwf	___lldiv@dividend,c
  4777  0027DA  0E48               	movlw	72
  4778  0027DC  6E22               	movwf	___lldiv@dividend+1,c
  4779  0027DE  0EE8               	movlw	232
  4780  0027E0  6E23               	movwf	___lldiv@dividend+2,c
  4781  0027E2  0E01               	movlw	1
  4782  0027E4  6E24               	movwf	___lldiv@dividend+3,c
  4783  0027E6  C02E  F032         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4784  0027EA  C02F  F033         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4785  0027EE  C030  F034         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4786  0027F2  C031  F035         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4787  0027F6  0E02               	movlw	2
  4788  0027F8                     u4185:
  4789  0027F8  90D8               	bcf	status,0,c
  4790  0027FA  3632               	rlcf	??_I2C_Master_Init,f,c
  4791  0027FC  3633               	rlcf	??_I2C_Master_Init+1,f,c
  4792  0027FE  3634               	rlcf	??_I2C_Master_Init+2,f,c
  4793  002800  3635               	rlcf	??_I2C_Master_Init+3,f,c
  4794  002802  2EE8               	decfsz	wreg,f,c
  4795  002804  D7F9               	goto	u4185
  4796  002806  C032  F025         	movff	??_I2C_Master_Init,___lldiv@divisor
  4797  00280A  C033  F026         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4798  00280E  C034  F027         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4799  002812  C035  F028         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4800  002816  EC8F  F012         	call	___lldiv	;wreg free
  4801  00281A  0421               	decf	?___lldiv,w,c
  4802  00281C  6EC8               	movwf	4040,c	;volatile
  4803                           
  4804                           ;I2C.c: 27: TRISC3 = 1;
  4805  00281E  8694               	bsf	3988,3,c	;volatile
  4806                           
  4807                           ;I2C.c: 28: TRISC4 = 1;
  4808  002820  8894               	bsf	3988,4,c	;volatile
  4809  002822  0012               	return		;funcret
  4810  002824                     __end_of_I2C_Master_Init:
  4811                           	opt stack 0
  4812                           tblptru	equ	0xFF8
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           intcon	equ	0xFF2
  4816                           intcon2	equ	0xFF1
  4817                           postinc0	equ	0xFEE
  4818                           wreg	equ	0xFE8
  4819                           indf2	equ	0xFDF
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function ___lldiv *****************
  4825 ;; Defined at:
  4826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  dividend        4   32[COMRAM] unsigned long 
  4829 ;;  divisor         4   36[COMRAM] unsigned long 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  quotient        4   40[COMRAM] unsigned long 
  4832 ;;  counter         1   44[COMRAM] unsigned char 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  4   32[COMRAM] unsigned long 
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4842 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;Total ram usage:       13 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    2
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_I2C_Master_Init
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text11
  4857  00251E                     __ptext11:
  4858                           	opt stack 0
  4859  00251E                     ___lldiv:
  4860                           	opt stack 26
  4861                           
  4862                           ;incstack = 0
  4863  00251E  0E00               	movlw	0
  4864  002520  6E29               	movwf	___lldiv@quotient,c
  4865  002522  0E00               	movlw	0
  4866  002524  6E2A               	movwf	___lldiv@quotient+1,c
  4867  002526  0E00               	movlw	0
  4868  002528  6E2B               	movwf	___lldiv@quotient+2,c
  4869  00252A  0E00               	movlw	0
  4870  00252C  6E2C               	movwf	___lldiv@quotient+3,c
  4871  00252E  5025               	movf	___lldiv@divisor,w,c
  4872  002530  1026               	iorwf	___lldiv@divisor+1,w,c
  4873  002532  1027               	iorwf	___lldiv@divisor+2,w,c
  4874  002534  1028               	iorwf	___lldiv@divisor+3,w,c
  4875  002536  B4D8               	btfsc	status,2,c
  4876  002538  D02A               	goto	l1214
  4877  00253A  0E01               	movlw	1
  4878  00253C  6E2D               	movwf	___lldiv@counter,c
  4879  00253E  D006               	goto	l3410
  4880  002540                     l3408:
  4881  002540  90D8               	bcf	status,0,c
  4882  002542  3625               	rlcf	___lldiv@divisor,f,c
  4883  002544  3626               	rlcf	___lldiv@divisor+1,f,c
  4884  002546  3627               	rlcf	___lldiv@divisor+2,f,c
  4885  002548  3628               	rlcf	___lldiv@divisor+3,f,c
  4886  00254A  2A2D               	incf	___lldiv@counter,f,c
  4887  00254C                     l3410:
  4888  00254C  AE28               	btfss	___lldiv@divisor+3,7,c
  4889  00254E  D7F8               	goto	l3408
  4890  002550                     l3412:
  4891  002550  90D8               	bcf	status,0,c
  4892  002552  3629               	rlcf	___lldiv@quotient,f,c
  4893  002554  362A               	rlcf	___lldiv@quotient+1,f,c
  4894  002556  362B               	rlcf	___lldiv@quotient+2,f,c
  4895  002558  362C               	rlcf	___lldiv@quotient+3,f,c
  4896  00255A  5025               	movf	___lldiv@divisor,w,c
  4897  00255C  5C21               	subwf	___lldiv@dividend,w,c
  4898  00255E  5026               	movf	___lldiv@divisor+1,w,c
  4899  002560  5822               	subwfb	___lldiv@dividend+1,w,c
  4900  002562  5027               	movf	___lldiv@divisor+2,w,c
  4901  002564  5823               	subwfb	___lldiv@dividend+2,w,c
  4902  002566  5028               	movf	___lldiv@divisor+3,w,c
  4903  002568  5824               	subwfb	___lldiv@dividend+3,w,c
  4904  00256A  A0D8               	btfss	status,0,c
  4905  00256C  D009               	goto	l3420
  4906  00256E  5025               	movf	___lldiv@divisor,w,c
  4907  002570  5E21               	subwf	___lldiv@dividend,f,c
  4908  002572  5026               	movf	___lldiv@divisor+1,w,c
  4909  002574  5A22               	subwfb	___lldiv@dividend+1,f,c
  4910  002576  5027               	movf	___lldiv@divisor+2,w,c
  4911  002578  5A23               	subwfb	___lldiv@dividend+2,f,c
  4912  00257A  5028               	movf	___lldiv@divisor+3,w,c
  4913  00257C  5A24               	subwfb	___lldiv@dividend+3,f,c
  4914  00257E  8029               	bsf	___lldiv@quotient,0,c
  4915  002580                     l3420:
  4916  002580  90D8               	bcf	status,0,c
  4917  002582  3228               	rrcf	___lldiv@divisor+3,f,c
  4918  002584  3227               	rrcf	___lldiv@divisor+2,f,c
  4919  002586  3226               	rrcf	___lldiv@divisor+1,f,c
  4920  002588  3225               	rrcf	___lldiv@divisor,f,c
  4921  00258A  2E2D               	decfsz	___lldiv@counter,f,c
  4922  00258C  D7E1               	goto	l3412
  4923  00258E                     l1214:
  4924  00258E  C029  F021         	movff	___lldiv@quotient,?___lldiv
  4925  002592  C02A  F022         	movff	___lldiv@quotient+1,?___lldiv+1
  4926  002596  C02B  F023         	movff	___lldiv@quotient+2,?___lldiv+2
  4927  00259A  C02C  F024         	movff	___lldiv@quotient+3,?___lldiv+3
  4928  00259E  0012               	return		;funcret
  4929  0025A0                     __end_of___lldiv:
  4930                           	opt stack 0
  4931                           tblptru	equ	0xFF8
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           intcon2	equ	0xFF1
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           indf2	equ	0xFDF
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _homescreen *****************
  4944 ;; Defined at:
  4945 ;;		line 3 in file "interface.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;		None
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      void 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;Total ram usage:        0 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:    5
  4966 ;; This function calls:
  4967 ;;		_lcdInst
  4968 ;;		_printf
  4969 ;; This function is called by:
  4970 ;;		_main
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text12
  4975  002768                     __ptext12:
  4976                           	opt stack 0
  4977  002768                     _homescreen:
  4978                           	opt stack 25
  4979                           
  4980                           ;interface.c: 4: lcdInst(0b10000000);;
  4981                           
  4982                           ;incstack = 0
  4983  002768  0E80               	movlw	128
  4984  00276A  ECC8  F015         	call	_lcdInst
  4985                           
  4986                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  4987  00276E  0EE6               	movlw	low STR_24
  4988  002770  6E2D               	movwf	printf@f,c
  4989  002772  0EFE               	movlw	high STR_24
  4990  002774  6E2E               	movwf	printf@f+1,c
  4991  002776  C0AD  F02F         	movff	_time+6,?_printf+2
  4992  00277A  6A30               	clrf	?_printf+3,c
  4993  00277C  C0AC  F031         	movff	_time+5,?_printf+4
  4994  002780  6A32               	clrf	?_printf+5,c
  4995  002782  C0AB  F033         	movff	_time+4,?_printf+6
  4996  002786  6A34               	clrf	?_printf+7,c
  4997  002788  EC00  F009         	call	_printf	;wreg free
  4998                           
  4999                           ;interface.c: 6: printf("3:Start");
  5000  00278C  0EEF               	movlw	low STR_25
  5001  00278E  6E2D               	movwf	printf@f,c
  5002  002790  0EFF               	movlw	high STR_25
  5003  002792  6E2E               	movwf	printf@f+1,c
  5004  002794  EC00  F009         	call	_printf	;wreg free
  5005                           
  5006                           ;interface.c: 7: lcdInst(0b11000000);;
  5007  002798  0EC0               	movlw	192
  5008  00279A  ECC8  F015         	call	_lcdInst
  5009                           
  5010                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5011  00279E  0E5C               	movlw	low (STR_33+7)
  5012  0027A0  6E2D               	movwf	printf@f,c
  5013  0027A2  0EFE               	movlw	high (STR_33+7)
  5014  0027A4  6E2E               	movwf	printf@f+1,c
  5015  0027A6  C0A9  F02F         	movff	_time+2,?_printf+2
  5016  0027AA  6A30               	clrf	?_printf+3,c
  5017  0027AC  C0A8  F031         	movff	_time+1,?_printf+4
  5018  0027B0  6A32               	clrf	?_printf+5,c
  5019  0027B2  C0A7  F033         	movff	_time,?_printf+6
  5020  0027B6  6A34               	clrf	?_printf+7,c
  5021  0027B8  EC00  F009         	call	_printf	;wreg free
  5022                           
  5023                           ;interface.c: 9: printf(" A:Logs");
  5024  0027BC  0EE7               	movlw	low STR_27
  5025  0027BE  6E2D               	movwf	printf@f,c
  5026  0027C0  0EFF               	movlw	high STR_27
  5027  0027C2  6E2E               	movwf	printf@f+1,c
  5028  0027C4  EC00  F009         	call	_printf	;wreg free
  5029  0027C8  0012               	return		;funcret
  5030  0027CA                     __end_of_homescreen:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           prodh	equ	0xFF4
  5034                           prodl	equ	0xFF3
  5035                           intcon	equ	0xFF2
  5036                           intcon2	equ	0xFF1
  5037                           postinc0	equ	0xFEE
  5038                           wreg	equ	0xFE8
  5039                           indf2	equ	0xFDF
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _displayLog *****************
  5045 ;; Defined at:
  5046 ;;		line 87 in file "interface.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  run             2    0[BANK0 ] int 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  currRun         2    7[BANK0 ] int 
  5051 ;;  i               2    5[BANK0 ] int 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5061 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;Total ram usage:        9 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    5
  5068 ;; This function calls:
  5069 ;;		_eepromRead
  5070 ;;		_keycheck
  5071 ;;		_lcdInst
  5072 ;;		_printf
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text13
  5079  000E80                     __ptext13:
  5080                           	opt stack 0
  5081  000E80                     _displayLog:
  5082                           	opt stack 25
  5083                           
  5084                           ;interface.c: 88: int currRun = eepromRead(0);
  5085                           
  5086                           ;incstack = 0
  5087  000E80  0E00               	movlw	0
  5088  000E82  EC12  F015         	call	_eepromRead
  5089  000E86  0100               	movlb	0	; () banked
  5090  000E88  6F87               	movwf	displayLog@currRun& (0+255),b
  5091  000E8A  6B88               	clrf	(displayLog@currRun+1)& (0+255),b
  5092  000E8C  BF87               	btfsc	displayLog@currRun& (0+255),7,b
  5093  000E8E  0788               	decf	(displayLog@currRun+1)& (0+255),f,b
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;interface.c: 89: int i;
  5097                           ;interface.c: 90: for (i=1;i<(run);i++){
  5098  000E90  0E00               	movlw	0
  5099  000E92  0100               	movlb	0	; () banked
  5100  000E94  6F86               	movwf	(displayLog@i+1)& (0+255),b
  5101  000E96  0E01               	movlw	1
  5102  000E98  6F85               	movwf	displayLog@i& (0+255),b
  5103  000E9A  D016               	goto	l5510
  5104  000E9C                     l5502:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;interface.c: 91: currRun++;
  5108  000E9C  0100               	movlb	0	; () banked
  5109  000E9E  4B87               	infsnz	displayLog@currRun& (0+255),f,b
  5110  000EA0  2B88               	incf	(displayLog@currRun+1)& (0+255),f,b
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  5114  000EA2  0100               	movlb	0	; () banked
  5115  000EA4  BF88               	btfsc	(displayLog@currRun+1)& (0+255),7,b
  5116  000EA6  D00D               	goto	l5508
  5117  000EA8  0100               	movlb	0	; () banked
  5118  000EAA  5188               	movf	(displayLog@currRun+1)& (0+255),w,b
  5119  000EAC  E105               	bnz	u7030
  5120  000EAE  0E05               	movlw	5
  5121  000EB0  0100               	movlb	0	; () banked
  5122  000EB2  5D87               	subwf	displayLog@currRun& (0+255),w,b
  5123  000EB4  A0D8               	btfss	status,0,c
  5124  000EB6  D005               	goto	l5508
  5125  000EB8                     u7030:
  5126                           
  5127                           ; BSR set to: 0
  5128  000EB8  0E00               	movlw	0
  5129  000EBA  0100               	movlb	0	; () banked
  5130  000EBC  6F88               	movwf	(displayLog@currRun+1)& (0+255),b
  5131  000EBE  0E01               	movlw	1
  5132  000EC0  6F87               	movwf	displayLog@currRun& (0+255),b
  5133  000EC2                     l5508:
  5134                           
  5135                           ; BSR set to: 0
  5136  000EC2  0100               	movlb	0	; () banked
  5137  000EC4  4B85               	infsnz	displayLog@i& (0+255),f,b
  5138  000EC6  2B86               	incf	(displayLog@i+1)& (0+255),f,b
  5139  000EC8                     l5510:
  5140                           
  5141                           ; BSR set to: 0
  5142  000EC8  0100               	movlb	0	; () banked
  5143  000ECA  5180               	movf	displayLog@run& (0+255),w,b
  5144  000ECC  0100               	movlb	0	; () banked
  5145  000ECE  5D85               	subwf	displayLog@i& (0+255),w,b
  5146  000ED0  0100               	movlb	0	; () banked
  5147  000ED2  5186               	movf	(displayLog@i+1)& (0+255),w,b
  5148  000ED4  0A80               	xorlw	128
  5149  000ED6  0100               	movlb	0	; () banked
  5150  000ED8  6F82               	movwf	??_displayLog& (0+255),b
  5151  000EDA  0100               	movlb	0	; () banked
  5152  000EDC  5181               	movf	(displayLog@run+1)& (0+255),w,b
  5153  000EDE  0A80               	xorlw	128
  5154  000EE0  0100               	movlb	0	; () banked
  5155  000EE2  5982               	subwfb	??_displayLog& (0+255),w,b
  5156  000EE4  A0D8               	btfss	status,0,c
  5157  000EE6  D7DA               	goto	l5502
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;interface.c: 93: }
  5161                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5162                           
  5163                           ; BSR set to: 0
  5164  000EE8  0E01               	movlw	1
  5165  000EEA  ECC8  F015         	call	_lcdInst
  5166  000EEE  0E34               	movlw	52
  5167  000EF0  0100               	movlb	0	; () banked
  5168  000EF2  6F82               	movwf	??_displayLog& (0+255),b
  5169  000EF4  0EF1               	movlw	241
  5170  000EF6                     u8087:
  5171  000EF6  2EE8               	decfsz	wreg,f,c
  5172  000EF8  D7FE               	bra	u8087
  5173  000EFA  2F82               	decfsz	??_displayLog& (0+255),f,b
  5174  000EFC  D7FC               	bra	u8087
  5175  000EFE  D000               	nop2	
  5176                           
  5177                           ;interface.c: 96: printf("Run#%d    A:Next", run);
  5178  000F00  0EB3               	movlw	low STR_28
  5179  000F02  6E2D               	movwf	printf@f,c
  5180  000F04  0EFE               	movlw	high STR_28
  5181  000F06  6E2E               	movwf	printf@f+1,c
  5182  000F08  C080  F02F         	movff	displayLog@run,?_printf+2
  5183  000F0C  C081  F030         	movff	displayLog@run+1,?_printf+3
  5184  000F10  EC00  F009         	call	_printf	;wreg free
  5185                           
  5186                           ;interface.c: 97: lcdInst(0b11000000);;
  5187  000F14  0EC0               	movlw	192
  5188  000F16  ECC8  F015         	call	_lcdInst
  5189                           
  5190                           ;interface.c: 98: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  5191  000F1A  0EA3               	movlw	low STR_29
  5192  000F1C  6E2D               	movwf	printf@f,c
  5193  000F1E  0EFF               	movlw	high STR_29
  5194  000F20  6E2E               	movwf	printf@f+1,c
  5195  000F22  C087  F082         	movff	displayLog@currRun,??_displayLog
  5196  000F26  0100               	movlb	0	; () banked
  5197  000F28  3B82               	swapf	??_displayLog& (0+255),f,b
  5198  000F2A  0EF0               	movlw	240
  5199  000F2C  1782               	andwf	??_displayLog& (0+255),f,b
  5200  000F2E  0100               	movlb	0	; () banked
  5201  000F30  2982               	incf	??_displayLog& (0+255),w,b
  5202  000F32  EC12  F015         	call	_eepromRead
  5203  000F36  6E2F               	movwf	?_printf+2,c
  5204  000F38  6A30               	clrf	?_printf+3,c
  5205  000F3A  BE2F               	btfsc	?_printf+2,7,c
  5206  000F3C  0630               	decf	?_printf+3,f,c
  5207  000F3E  EC00  F009         	call	_printf	;wreg free
  5208                           
  5209                           ;interface.c: 99: keycheck();
  5210  000F42  EC9E  F015         	call	_keycheck	;wreg free
  5211                           
  5212                           ;interface.c: 100: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5213  000F46  0E01               	movlw	1
  5214  000F48  ECC8  F015         	call	_lcdInst
  5215  000F4C  0E34               	movlw	52
  5216  000F4E  0100               	movlb	0	; () banked
  5217  000F50  6F82               	movwf	??_displayLog& (0+255),b
  5218  000F52  0EF1               	movlw	241
  5219  000F54                     u8097:
  5220  000F54  2EE8               	decfsz	wreg,f,c
  5221  000F56  D7FE               	bra	u8097
  5222  000F58  2F82               	decfsz	??_displayLog& (0+255),f,b
  5223  000F5A  D7FC               	bra	u8097
  5224  000F5C  D000               	nop2	
  5225                           
  5226                           ;interface.c: 101: printf("Run#%d    A:Next", run);
  5227  000F5E  0EB3               	movlw	low STR_28
  5228  000F60  6E2D               	movwf	printf@f,c
  5229  000F62  0EFE               	movlw	high STR_28
  5230  000F64  6E2E               	movwf	printf@f+1,c
  5231  000F66  C080  F02F         	movff	displayLog@run,?_printf+2
  5232  000F6A  C081  F030         	movff	displayLog@run+1,?_printf+3
  5233  000F6E  EC00  F009         	call	_printf	;wreg free
  5234                           
  5235                           ;interface.c: 102: lcdInst(0b11000000);;
  5236  000F72  0EC0               	movlw	192
  5237  000F74  ECC8  F015         	call	_lcdInst
  5238                           
  5239                           ;interface.c: 103: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  5240  000F78  0E6B               	movlw	low STR_31
  5241  000F7A  6E2D               	movwf	printf@f,c
  5242  000F7C  0EFE               	movlw	high STR_31
  5243  000F7E  6E2E               	movwf	printf@f+1,c
  5244  000F80  C087  F082         	movff	displayLog@currRun,??_displayLog
  5245  000F84  0100               	movlb	0	; () banked
  5246  000F86  3B82               	swapf	??_displayLog& (0+255),f,b
  5247  000F88  0EF0               	movlw	240
  5248  000F8A  1782               	andwf	??_displayLog& (0+255),f,b
  5249  000F8C  0100               	movlb	0	; () banked
  5250  000F8E  5182               	movf	??_displayLog& (0+255),w,b
  5251  000F90  0F02               	addlw	2
  5252  000F92  EC12  F015         	call	_eepromRead
  5253  000F96  6E2F               	movwf	?_printf+2,c
  5254  000F98  6A30               	clrf	?_printf+3,c
  5255  000F9A  BE2F               	btfsc	?_printf+2,7,c
  5256  000F9C  0630               	decf	?_printf+3,f,c
  5257  000F9E  C087  F083         	movff	displayLog@currRun,??_displayLog+1
  5258  000FA2  0100               	movlb	0	; () banked
  5259  000FA4  3B83               	swapf	(??_displayLog+1)& (0+255),f,b
  5260  000FA6  0EF0               	movlw	240
  5261  000FA8  1783               	andwf	(??_displayLog+1)& (0+255),f,b
  5262  000FAA  0100               	movlb	0	; () banked
  5263  000FAC  5183               	movf	(??_displayLog+1)& (0+255),w,b
  5264  000FAE  0F03               	addlw	3
  5265  000FB0  EC12  F015         	call	_eepromRead
  5266  000FB4  6E31               	movwf	?_printf+4,c
  5267  000FB6  6A32               	clrf	?_printf+5,c
  5268  000FB8  BE31               	btfsc	?_printf+4,7,c
  5269  000FBA  0632               	decf	?_printf+5,f,c
  5270  000FBC  C087  F084         	movff	displayLog@currRun,??_displayLog+2
  5271  000FC0  0100               	movlb	0	; () banked
  5272  000FC2  3B84               	swapf	(??_displayLog+2)& (0+255),f,b
  5273  000FC4  0EF0               	movlw	240
  5274  000FC6  1784               	andwf	(??_displayLog+2)& (0+255),f,b
  5275  000FC8  0100               	movlb	0	; () banked
  5276  000FCA  5184               	movf	(??_displayLog+2)& (0+255),w,b
  5277  000FCC  0F04               	addlw	4
  5278  000FCE  EC12  F015         	call	_eepromRead
  5279  000FD2  6E33               	movwf	?_printf+6,c
  5280  000FD4  6A34               	clrf	?_printf+7,c
  5281  000FD6  BE33               	btfsc	?_printf+6,7,c
  5282  000FD8  0634               	decf	?_printf+7,f,c
  5283  000FDA  EC00  F009         	call	_printf	;wreg free
  5284                           
  5285                           ;interface.c: 104: keycheck();
  5286  000FDE  EC9E  F015         	call	_keycheck	;wreg free
  5287                           
  5288                           ;interface.c: 105: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5289  000FE2  0E01               	movlw	1
  5290  000FE4  ECC8  F015         	call	_lcdInst
  5291  000FE8  0E34               	movlw	52
  5292  000FEA  0100               	movlb	0	; () banked
  5293  000FEC  6F82               	movwf	??_displayLog& (0+255),b
  5294  000FEE  0EF1               	movlw	241
  5295  000FF0                     u8107:
  5296  000FF0  2EE8               	decfsz	wreg,f,c
  5297  000FF2  D7FE               	bra	u8107
  5298  000FF4  2F82               	decfsz	??_displayLog& (0+255),f,b
  5299  000FF6  D7FC               	bra	u8107
  5300  000FF8  D000               	nop2	
  5301                           
  5302                           ;interface.c: 106: printf("Run#%d    A:Next", run);
  5303  000FFA  0EB3               	movlw	low STR_28
  5304  000FFC  6E2D               	movwf	printf@f,c
  5305  000FFE  0EFE               	movlw	high STR_28
  5306  001000  6E2E               	movwf	printf@f+1,c
  5307  001002  C080  F02F         	movff	displayLog@run,?_printf+2
  5308  001006  C081  F030         	movff	displayLog@run+1,?_printf+3
  5309  00100A  EC00  F009         	call	_printf	;wreg free
  5310                           
  5311                           ;interface.c: 107: lcdInst(0b11000000);;
  5312  00100E  0EC0               	movlw	192
  5313  001010  ECC8  F015         	call	_lcdInst
  5314                           
  5315                           ;interface.c: 108: printf("Start: %02x:%02x:%02x", eepromRead(currRun*0x10 + 5), eepromR
      +                          ead(currRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  5316  001014  0E55               	movlw	low STR_33
  5317  001016  6E2D               	movwf	printf@f,c
  5318  001018  0EFE               	movlw	high STR_33
  5319  00101A  6E2E               	movwf	printf@f+1,c
  5320  00101C  C087  F082         	movff	displayLog@currRun,??_displayLog
  5321  001020  0100               	movlb	0	; () banked
  5322  001022  3B82               	swapf	??_displayLog& (0+255),f,b
  5323  001024  0EF0               	movlw	240
  5324  001026  1782               	andwf	??_displayLog& (0+255),f,b
  5325  001028  0100               	movlb	0	; () banked
  5326  00102A  5182               	movf	??_displayLog& (0+255),w,b
  5327  00102C  0F05               	addlw	5
  5328  00102E  EC12  F015         	call	_eepromRead
  5329  001032  6E2F               	movwf	?_printf+2,c
  5330  001034  6A30               	clrf	?_printf+3,c
  5331  001036  BE2F               	btfsc	?_printf+2,7,c
  5332  001038  0630               	decf	?_printf+3,f,c
  5333  00103A  C087  F083         	movff	displayLog@currRun,??_displayLog+1
  5334  00103E  0100               	movlb	0	; () banked
  5335  001040  3B83               	swapf	(??_displayLog+1)& (0+255),f,b
  5336  001042  0EF0               	movlw	240
  5337  001044  1783               	andwf	(??_displayLog+1)& (0+255),f,b
  5338  001046  0100               	movlb	0	; () banked
  5339  001048  5183               	movf	(??_displayLog+1)& (0+255),w,b
  5340  00104A  0F06               	addlw	6
  5341  00104C  EC12  F015         	call	_eepromRead
  5342  001050  6E31               	movwf	?_printf+4,c
  5343  001052  6A32               	clrf	?_printf+5,c
  5344  001054  BE31               	btfsc	?_printf+4,7,c
  5345  001056  0632               	decf	?_printf+5,f,c
  5346  001058  C087  F084         	movff	displayLog@currRun,??_displayLog+2
  5347  00105C  0100               	movlb	0	; () banked
  5348  00105E  3B84               	swapf	(??_displayLog+2)& (0+255),f,b
  5349  001060  0EF0               	movlw	240
  5350  001062  1784               	andwf	(??_displayLog+2)& (0+255),f,b
  5351  001064  0100               	movlb	0	; () banked
  5352  001066  5184               	movf	(??_displayLog+2)& (0+255),w,b
  5353  001068  0F07               	addlw	7
  5354  00106A  EC12  F015         	call	_eepromRead
  5355  00106E  6E33               	movwf	?_printf+6,c
  5356  001070  6A34               	clrf	?_printf+7,c
  5357  001072  BE33               	btfsc	?_printf+6,7,c
  5358  001074  0634               	decf	?_printf+7,f,c
  5359  001076  EC00  F009         	call	_printf	;wreg free
  5360                           
  5361                           ;interface.c: 109: keycheck();
  5362  00107A  EC9E  F015         	call	_keycheck	;wreg free
  5363                           
  5364                           ;interface.c: 110: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5365  00107E  0E01               	movlw	1
  5366  001080  ECC8  F015         	call	_lcdInst
  5367  001084  0E34               	movlw	52
  5368  001086  0100               	movlb	0	; () banked
  5369  001088  6F82               	movwf	??_displayLog& (0+255),b
  5370  00108A  0EF1               	movlw	241
  5371  00108C                     u8117:
  5372  00108C  2EE8               	decfsz	wreg,f,c
  5373  00108E  D7FE               	bra	u8117
  5374  001090  2F82               	decfsz	??_displayLog& (0+255),f,b
  5375  001092  D7FC               	bra	u8117
  5376  001094  D000               	nop2	
  5377                           
  5378                           ;interface.c: 111: printf("Run#%d    A:Next", run);
  5379  001096  0EB3               	movlw	low STR_28
  5380  001098  6E2D               	movwf	printf@f,c
  5381  00109A  0EFE               	movlw	high STR_28
  5382  00109C  6E2E               	movwf	printf@f+1,c
  5383  00109E  C080  F02F         	movff	displayLog@run,?_printf+2
  5384  0010A2  C081  F030         	movff	displayLog@run+1,?_printf+3
  5385  0010A6  EC00  F009         	call	_printf	;wreg free
  5386                           
  5387                           ;interface.c: 112: lcdInst(0b11000000);;
  5388  0010AA  0EC0               	movlw	192
  5389  0010AC  ECC8  F015         	call	_lcdInst
  5390                           
  5391                           ;interface.c: 113: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  5392  0010B0  0EF6               	movlw	low STR_35
  5393  0010B2  6E2D               	movwf	printf@f,c
  5394  0010B4  0EFE               	movlw	high STR_35
  5395  0010B6  6E2E               	movwf	printf@f+1,c
  5396  0010B8  C087  F082         	movff	displayLog@currRun,??_displayLog
  5397  0010BC  0100               	movlb	0	; () banked
  5398  0010BE  3B82               	swapf	??_displayLog& (0+255),f,b
  5399  0010C0  0EF0               	movlw	240
  5400  0010C2  1782               	andwf	??_displayLog& (0+255),f,b
  5401  0010C4  0100               	movlb	0	; () banked
  5402  0010C6  5182               	movf	??_displayLog& (0+255),w,b
  5403  0010C8  0F08               	addlw	8
  5404  0010CA  EC12  F015         	call	_eepromRead
  5405  0010CE  6E2F               	movwf	?_printf+2,c
  5406  0010D0  6A30               	clrf	?_printf+3,c
  5407  0010D2  BE2F               	btfsc	?_printf+2,7,c
  5408  0010D4  0630               	decf	?_printf+3,f,c
  5409  0010D6  EC00  F009         	call	_printf	;wreg free
  5410                           
  5411                           ;interface.c: 114: keycheck();
  5412  0010DA  EC9E  F015         	call	_keycheck	;wreg free
  5413                           
  5414                           ;interface.c: 115: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5415  0010DE  0E01               	movlw	1
  5416  0010E0  ECC8  F015         	call	_lcdInst
  5417  0010E4  0E34               	movlw	52
  5418  0010E6  0100               	movlb	0	; () banked
  5419  0010E8  6F82               	movwf	??_displayLog& (0+255),b
  5420  0010EA  0EF1               	movlw	241
  5421  0010EC                     u8127:
  5422  0010EC  2EE8               	decfsz	wreg,f,c
  5423  0010EE  D7FE               	bra	u8127
  5424  0010F0  2F82               	decfsz	??_displayLog& (0+255),f,b
  5425  0010F2  D7FC               	bra	u8127
  5426  0010F4  D000               	nop2	
  5427                           
  5428                           ;interface.c: 116: printf("Run#%d    A:Next", run);
  5429  0010F6  0EB3               	movlw	low STR_28
  5430  0010F8  6E2D               	movwf	printf@f,c
  5431  0010FA  0EFE               	movlw	high STR_28
  5432  0010FC  6E2E               	movwf	printf@f+1,c
  5433  0010FE  C080  F02F         	movff	displayLog@run,?_printf+2
  5434  001102  C081  F030         	movff	displayLog@run+1,?_printf+3
  5435  001106  EC00  F009         	call	_printf	;wreg free
  5436                           
  5437                           ;interface.c: 117: lcdInst(0b11000000);;
  5438  00110A  0EC0               	movlw	192
  5439  00110C  ECC8  F015         	call	_lcdInst
  5440                           
  5441                           ;interface.c: 118: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  5442  001110  0E91               	movlw	low STR_37
  5443  001112  6E2D               	movwf	printf@f,c
  5444  001114  0EFE               	movlw	high STR_37
  5445  001116  6E2E               	movwf	printf@f+1,c
  5446  001118  C087  F082         	movff	displayLog@currRun,??_displayLog
  5447  00111C  0100               	movlb	0	; () banked
  5448  00111E  3B82               	swapf	??_displayLog& (0+255),f,b
  5449  001120  0EF0               	movlw	240
  5450  001122  1782               	andwf	??_displayLog& (0+255),f,b
  5451  001124  0100               	movlb	0	; () banked
  5452  001126  5182               	movf	??_displayLog& (0+255),w,b
  5453  001128  0F09               	addlw	9
  5454  00112A  EC12  F015         	call	_eepromRead
  5455  00112E  6E2F               	movwf	?_printf+2,c
  5456  001130  6A30               	clrf	?_printf+3,c
  5457  001132  BE2F               	btfsc	?_printf+2,7,c
  5458  001134  0630               	decf	?_printf+3,f,c
  5459  001136  EC00  F009         	call	_printf	;wreg free
  5460                           
  5461                           ;interface.c: 119: keycheck();
  5462  00113A  EC9E  F015         	call	_keycheck	;wreg free
  5463                           
  5464                           ;interface.c: 120: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5465  00113E  0E01               	movlw	1
  5466  001140  ECC8  F015         	call	_lcdInst
  5467  001144  0E34               	movlw	52
  5468  001146  0100               	movlb	0	; () banked
  5469  001148  6F82               	movwf	??_displayLog& (0+255),b
  5470  00114A  0EF1               	movlw	241
  5471  00114C                     u8137:
  5472  00114C  2EE8               	decfsz	wreg,f,c
  5473  00114E  D7FE               	bra	u8137
  5474  001150  2F82               	decfsz	??_displayLog& (0+255),f,b
  5475  001152  D7FC               	bra	u8137
  5476  001154  D000               	nop2	
  5477                           
  5478                           ;interface.c: 121: printf("Run#%d    A:Next", run);
  5479  001156  0EB3               	movlw	low STR_28
  5480  001158  6E2D               	movwf	printf@f,c
  5481  00115A  0EFE               	movlw	high STR_28
  5482  00115C  6E2E               	movwf	printf@f+1,c
  5483  00115E  C080  F02F         	movff	displayLog@run,?_printf+2
  5484  001162  C081  F030         	movff	displayLog@run+1,?_printf+3
  5485  001166  EC00  F009         	call	_printf	;wreg free
  5486                           
  5487                           ;interface.c: 122: lcdInst(0b11000000);;
  5488  00116A  0EC0               	movlw	192
  5489  00116C  ECC8  F015         	call	_lcdInst
  5490                           
  5491                           ;interface.c: 123: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  5492  001170  0E06               	movlw	low STR_39
  5493  001172  6E2D               	movwf	printf@f,c
  5494  001174  0EFF               	movlw	high STR_39
  5495  001176  6E2E               	movwf	printf@f+1,c
  5496  001178  C087  F082         	movff	displayLog@currRun,??_displayLog
  5497  00117C  0100               	movlb	0	; () banked
  5498  00117E  3B82               	swapf	??_displayLog& (0+255),f,b
  5499  001180  0EF0               	movlw	240
  5500  001182  1782               	andwf	??_displayLog& (0+255),f,b
  5501  001184  0100               	movlb	0	; () banked
  5502  001186  5182               	movf	??_displayLog& (0+255),w,b
  5503  001188  0F0A               	addlw	10
  5504  00118A  EC12  F015         	call	_eepromRead
  5505  00118E  6E2F               	movwf	?_printf+2,c
  5506  001190  6A30               	clrf	?_printf+3,c
  5507  001192  BE2F               	btfsc	?_printf+2,7,c
  5508  001194  0630               	decf	?_printf+3,f,c
  5509  001196  EC00  F009         	call	_printf	;wreg free
  5510                           
  5511                           ;interface.c: 124: keycheck();
  5512  00119A  EC9E  F015         	call	_keycheck	;wreg free
  5513                           
  5514                           ;interface.c: 125: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5515  00119E  0E01               	movlw	1
  5516  0011A0  ECC8  F015         	call	_lcdInst
  5517  0011A4  0E34               	movlw	52
  5518  0011A6  0100               	movlb	0	; () banked
  5519  0011A8  6F82               	movwf	??_displayLog& (0+255),b
  5520  0011AA  0EF1               	movlw	241
  5521  0011AC                     u8147:
  5522  0011AC  2EE8               	decfsz	wreg,f,c
  5523  0011AE  D7FE               	bra	u8147
  5524  0011B0  2F82               	decfsz	??_displayLog& (0+255),f,b
  5525  0011B2  D7FC               	bra	u8147
  5526  0011B4  D000               	nop2	
  5527                           
  5528                           ;interface.c: 126: printf("Run#%d    A:Next", run);
  5529  0011B6  0EB3               	movlw	low STR_28
  5530  0011B8  6E2D               	movwf	printf@f,c
  5531  0011BA  0EFE               	movlw	high STR_28
  5532  0011BC  6E2E               	movwf	printf@f+1,c
  5533  0011BE  C080  F02F         	movff	displayLog@run,?_printf+2
  5534  0011C2  C081  F030         	movff	displayLog@run+1,?_printf+3
  5535  0011C6  EC00  F009         	call	_printf	;wreg free
  5536                           
  5537                           ;interface.c: 127: lcdInst(0b11000000);;
  5538  0011CA  0EC0               	movlw	192
  5539  0011CC  ECC8  F015         	call	_lcdInst
  5540                           
  5541                           ;interface.c: 128: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  5542  0011D0  0EA2               	movlw	low STR_41
  5543  0011D2  6E2D               	movwf	printf@f,c
  5544  0011D4  0EFE               	movlw	high STR_41
  5545  0011D6  6E2E               	movwf	printf@f+1,c
  5546  0011D8  C087  F082         	movff	displayLog@currRun,??_displayLog
  5547  0011DC  0100               	movlb	0	; () banked
  5548  0011DE  3B82               	swapf	??_displayLog& (0+255),f,b
  5549  0011E0  0EF0               	movlw	240
  5550  0011E2  1782               	andwf	??_displayLog& (0+255),f,b
  5551  0011E4  0100               	movlb	0	; () banked
  5552  0011E6  5182               	movf	??_displayLog& (0+255),w,b
  5553  0011E8  0F0B               	addlw	11
  5554  0011EA  EC12  F015         	call	_eepromRead
  5555  0011EE  6E2F               	movwf	?_printf+2,c
  5556  0011F0  6A30               	clrf	?_printf+3,c
  5557  0011F2  BE2F               	btfsc	?_printf+2,7,c
  5558  0011F4  0630               	decf	?_printf+3,f,c
  5559  0011F6  EC00  F009         	call	_printf	;wreg free
  5560                           
  5561                           ;interface.c: 129: keycheck();
  5562  0011FA  EC9E  F015         	call	_keycheck	;wreg free
  5563  0011FE  0012               	return		;funcret
  5564  001200                     __end_of_displayLog:
  5565                           	opt stack 0
  5566                           tblptru	equ	0xFF8
  5567                           prodh	equ	0xFF4
  5568                           prodl	equ	0xFF3
  5569                           intcon	equ	0xFF2
  5570                           intcon2	equ	0xFF1
  5571                           postinc0	equ	0xFEE
  5572                           wreg	equ	0xFE8
  5573                           indf2	equ	0xFDF
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function _printf *****************
  5579 ;; Defined at:
  5580 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  f               2   44[COMRAM] PTR const unsigned char 
  5583 ;;		 -> STR_41(17), STR_40(17), STR_39(16), STR_38(17), 
  5584 ;;		 -> STR_37(17), STR_36(17), STR_35(16), STR_34(17), 
  5585 ;;		 -> STR_33(22), STR_32(17), STR_31(21), STR_30(17), 
  5586 ;;		 -> STR_29(12), STR_28(17), STR_27(8), STR_26(15), 
  5587 ;;		 -> STR_25(8), STR_24(16), STR_23(17), STR_22(16), 
  5588 ;;		 -> STR_21(9), STR_20(9), STR_19(12), STR_18(4), 
  5589 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(11), 
  5590 ;;		 -> STR_13(13), STR_12(3), STR_11(16), STR_10(16), 
  5591 ;;		 -> STR_9(3), STR_8(16), STR_7(16), STR_6(12), 
  5592 ;;		 -> STR_5(12), STR_4(17), STR_3(16), STR_2(16), 
  5593 ;;		 -> STR_1(16), 
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;  idx             1   56[COMRAM] unsigned char 
  5596 ;;  tmpval          4    0        struct .
  5597 ;;  cp              3    0        PTR const unsigned char 
  5598 ;;  width           2   63[COMRAM] int 
  5599 ;;  val             2   60[COMRAM] unsigned int 
  5600 ;;  ap              2   57[COMRAM] PTR void [1]
  5601 ;;		 -> ?_printf(2), 
  5602 ;;  len             2    0        unsigned int 
  5603 ;;  c               1   65[COMRAM] char 
  5604 ;;  flag            1   62[COMRAM] unsigned char 
  5605 ;;  prec            1   59[COMRAM] char 
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  2   44[COMRAM] int 
  5608 ;; Registers used:
  5609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5615 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;Total ram usage:       22 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    4
  5622 ;; This function calls:
  5623 ;;		___lwdiv
  5624 ;;		___lwmod
  5625 ;;		___wmul
  5626 ;;		_isdigit
  5627 ;;		_putch
  5628 ;; This function is called by:
  5629 ;;		_main
  5630 ;;		_homescreen
  5631 ;;		_displayLog
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text14
  5636  001200                     __ptext14:
  5637                           	opt stack 0
  5638  001200                     _printf:
  5639                           	opt stack 26
  5640                           
  5641                           ;doprnt.c: 466: va_list ap;
  5642                           ;doprnt.c: 499: signed char c;
  5643                           ;doprnt.c: 501: int width;
  5644                           ;doprnt.c: 506: signed char prec;
  5645                           ;doprnt.c: 508: unsigned char flag;
  5646                           ;doprnt.c: 523: union {
  5647                           ;doprnt.c: 524: unsigned long vd;
  5648                           ;doprnt.c: 525: double integ;
  5649                           ;doprnt.c: 526: } tmpval;
  5650                           ;doprnt.c: 528: unsigned int val;
  5651                           ;doprnt.c: 529: unsigned len;
  5652                           ;doprnt.c: 530: const char * cp;
  5653                           ;doprnt.c: 533: *ap = __va_start();
  5654                           
  5655                           ;incstack = 0
  5656  001200  0E2F               	movlw	low (?_printf+2)
  5657  001202  6E3A               	movwf	printf@ap,c
  5658  001204  0E00               	movlw	high (?_printf+2)
  5659  001206  6E3B               	movwf	printf@ap+1,c
  5660                           
  5661                           ;doprnt.c: 536: while(c = *f++) {
  5662  001208  D174               	goto	l5444
  5663  00120A                     l5318:
  5664                           
  5665                           ;doprnt.c: 538: if(c != '%')
  5666  00120A  0E25               	movlw	37
  5667  00120C  1842               	xorwf	printf@c,w,c
  5668  00120E  B4D8               	btfsc	status,2,c
  5669  001210  D004               	goto	l5322
  5670                           
  5671                           ;doprnt.c: 540: {
  5672                           ;doprnt.c: 541: (putch(c) );
  5673  001212  5042               	movf	printf@c,w,c
  5674  001214  ECC2  F015         	call	_putch
  5675                           
  5676                           ;doprnt.c: 542: continue;
  5677  001218  D16C               	goto	l5444
  5678  00121A                     l5322:
  5679                           
  5680                           ;doprnt.c: 543: }
  5681                           ;doprnt.c: 546: width = 0;
  5682  00121A  0E00               	movlw	0
  5683  00121C  6E41               	movwf	printf@width+1,c
  5684  00121E  0E00               	movlw	0
  5685  001220  6E40               	movwf	printf@width,c
  5686                           
  5687                           ;doprnt.c: 548: flag = 0;
  5688  001222  0E00               	movlw	0
  5689  001224  6E3F               	movwf	printf@flag,c
  5690                           
  5691                           ;doprnt.c: 551: switch(*f) {
  5692                           
  5693                           ;doprnt.c: 550: for(;;) {
  5694  001226  D003               	goto	l5328
  5695  001228                     l5324:
  5696                           
  5697                           ;doprnt.c: 580: flag |= 0x04;
  5698  001228  843F               	bsf	printf@flag,2,c
  5699                           
  5700                           ;doprnt.c: 581: f++;
  5701  00122A  4A2D               	infsnz	printf@f,f,c
  5702  00122C  2A2E               	incf	printf@f+1,f,c
  5703  00122E                     l5328:
  5704  00122E  C02D  FFF6         	movff	printf@f,tblptrl
  5705  001232  C02E  FFF7         	movff	printf@f+1,tblptrh
  5706  001236                     	if	0	;tblptru may be non-zero
  5707  001236                     	endif
  5708  001236                     	if	0	;tblptru may be non-zero
  5709  001236                     	endif
  5710  001236  0008               	tblrd		*
  5711  001238  50F5               	movf	tablat,w,c
  5712                           
  5713                           ; Switch size 1, requested type "space"
  5714                           ; Number of cases is 1, Range of values is 48 to 48
  5715                           ; switch strategies available:
  5716                           ; Name         Instructions Cycles
  5717                           ; simple_byte            4     3 (average)
  5718                           ;	Chosen strategy is simple_byte
  5719  00123A  0A30               	xorlw	48	; case 48
  5720  00123C  B4D8               	btfsc	status,2,c
  5721  00123E  D7F4               	goto	l5324
  5722                           
  5723                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5724                           
  5725                           ;doprnt.c: 586: }
  5726                           
  5727                           ;doprnt.c: 585: break;
  5728  001240  C02D  FFF6         	movff	printf@f,tblptrl
  5729  001244  C02E  FFF7         	movff	printf@f+1,tblptrh
  5730  001248                     	if	0	;tblptru may be non-zero
  5731  001248                     	endif
  5732  001248                     	if	0	;tblptru may be non-zero
  5733  001248                     	endif
  5734  001248  0008               	tblrd		*
  5735  00124A  50F5               	movf	tablat,w,c
  5736  00124C  EC84  F015         	call	_isdigit
  5737  001250  A0D8               	btfss	status,0,c
  5738  001252  D035               	goto	l5346
  5739                           
  5740                           ;doprnt.c: 598: width = 0;
  5741  001254  0E00               	movlw	0
  5742  001256  6E41               	movwf	printf@width+1,c
  5743  001258  0E00               	movlw	0
  5744  00125A  6E40               	movwf	printf@width,c
  5745  00125C                     l5334:
  5746                           
  5747                           ;doprnt.c: 600: width *= 10;
  5748  00125C  C040  F021         	movff	printf@width,___wmul@multiplier
  5749  001260  C041  F022         	movff	printf@width+1,___wmul@multiplier+1
  5750  001264  0E00               	movlw	0
  5751  001266  6E24               	movwf	___wmul@multiplicand+1,c
  5752  001268  0E0A               	movlw	10
  5753  00126A  6E23               	movwf	___wmul@multiplicand,c
  5754  00126C  EC4C  F015         	call	___wmul	;wreg free
  5755  001270  C021  F040         	movff	?___wmul,printf@width
  5756  001274  C022  F041         	movff	?___wmul+1,printf@width+1
  5757                           
  5758                           ;doprnt.c: 601: width += *f++ - '0';
  5759  001278  0ED0               	movlw	208
  5760  00127A  6E35               	movwf	??_printf& (0+255),c
  5761  00127C  0EFF               	movlw	255
  5762  00127E  6E36               	movwf	(??_printf+1)& (0+255),c
  5763  001280  C02D  FFF6         	movff	printf@f,tblptrl
  5764  001284  C02E  FFF7         	movff	printf@f+1,tblptrh
  5765  001288                     	if	0	;tblptru may be non-zero
  5766  001288                     	endif
  5767  001288                     	if	0	;tblptru may be non-zero
  5768  001288                     	endif
  5769  001288  0008               	tblrd		*
  5770  00128A  50F5               	movf	tablat,w,c
  5771  00128C  6E37               	movwf	(??_printf+2)& (0+255),c
  5772  00128E  6A38               	clrf	(??_printf+3)& (0+255),c
  5773  001290  5035               	movf	??_printf,w,c
  5774  001292  2637               	addwf	??_printf+2,f,c
  5775  001294  5036               	movf	??_printf+1,w,c
  5776  001296  2238               	addwfc	??_printf+3,f,c
  5777  001298  5037               	movf	??_printf+2,w,c
  5778  00129A  2640               	addwf	printf@width,f,c
  5779  00129C  5038               	movf	??_printf+3,w,c
  5780  00129E  2241               	addwfc	printf@width+1,f,c
  5781  0012A0  4A2D               	infsnz	printf@f,f,c
  5782  0012A2  2A2E               	incf	printf@f+1,f,c
  5783                           
  5784                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5785  0012A4  C02D  FFF6         	movff	printf@f,tblptrl
  5786  0012A8  C02E  FFF7         	movff	printf@f+1,tblptrh
  5787  0012AC                     	if	0	;tblptru may be non-zero
  5788  0012AC                     	endif
  5789  0012AC                     	if	0	;tblptru may be non-zero
  5790  0012AC                     	endif
  5791  0012AC  0008               	tblrd		*
  5792  0012AE  50F5               	movf	tablat,w,c
  5793  0012B0  EC84  F015         	call	_isdigit
  5794  0012B4  A0D8               	btfss	status,0,c
  5795  0012B6  D003               	goto	l5346
  5796  0012B8  D7D1               	goto	l5334
  5797  0012BA                     l5342:
  5798                           
  5799                           ;doprnt.c: 721: flag |= 0x80;
  5800  0012BA  8E3F               	bsf	printf@flag,7,c
  5801                           
  5802                           ;doprnt.c: 723: break;
  5803  0012BC  D017               	goto	l822
  5804  0012BE                     l5346:
  5805  0012BE  C02D  FFF6         	movff	printf@f,tblptrl
  5806  0012C2  C02E  FFF7         	movff	printf@f+1,tblptrh
  5807  0012C6  4A2D               	infsnz	printf@f,f,c
  5808  0012C8  2A2E               	incf	printf@f+1,f,c
  5809  0012CA                     	if	0	;tblptru may be non-zero
  5810  0012CA                     	endif
  5811  0012CA                     	if	0	;tblptru may be non-zero
  5812  0012CA                     	endif
  5813  0012CA  0008               	tblrd		*
  5814  0012CC  CFF5 F042          	movff	tablat,printf@c
  5815  0012D0  5042               	movf	printf@c,w,c
  5816                           
  5817                           ; Switch size 1, requested type "space"
  5818                           ; Number of cases is 4, Range of values is 0 to 120
  5819                           ; switch strategies available:
  5820                           ; Name         Instructions Cycles
  5821                           ; simple_byte           13     7 (average)
  5822                           ;	Chosen strategy is simple_byte
  5823  0012D2  0A00               	xorlw	0	; case 0
  5824  0012D4  B4D8               	btfsc	status,2,c
  5825  0012D6  0012               	return	
  5826  0012D8  0A64               	xorlw	100	; case 100
  5827  0012DA  B4D8               	btfsc	status,2,c
  5828  0012DC  D007               	goto	l822
  5829  0012DE  0A0D               	xorlw	13	; case 105
  5830  0012E0  B4D8               	btfsc	status,2,c
  5831  0012E2  D004               	goto	l822
  5832  0012E4  0A11               	xorlw	17	; case 120
  5833  0012E6  B4D8               	btfsc	status,2,c
  5834  0012E8  D7E8               	goto	l5342
  5835  0012EA  D103               	goto	l5444
  5836  0012EC                     l822:
  5837                           
  5838                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5839  0012EC  BE3F               	btfsc	printf@flag,7,c
  5840  0012EE  D015               	goto	l5358
  5841                           
  5842                           ;doprnt.c: 1253: {
  5843                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5844  0012F0  C03A  FFD9         	movff	printf@ap,fsr2l
  5845  0012F4  C03B  FFDA         	movff	printf@ap+1,fsr2h
  5846  0012F8  CFDE F03D          	movff	postinc2,printf@val
  5847  0012FC  CFDD F03E          	movff	postdec2,printf@val+1
  5848  001300  0E02               	movlw	2
  5849  001302  263A               	addwf	printf@ap,f,c
  5850  001304  0E00               	movlw	0
  5851  001306  223B               	addwfc	printf@ap+1,f,c
  5852                           
  5853                           ;doprnt.c: 1261: if((int)val < 0) {
  5854  001308  AE3E               	btfss	printf@val+1,7,c
  5855  00130A  D044               	goto	l5392
  5856                           
  5857                           ;doprnt.c: 1262: flag |= 0x03;
  5858  00130C  0E03               	movlw	3
  5859  00130E  123F               	iorwf	printf@flag,f,c
  5860                           
  5861                           ;doprnt.c: 1263: val = -val;
  5862  001310  6C3D               	negf	printf@val,c
  5863  001312  1E3E               	comf	printf@val+1,f,c
  5864  001314  B0D8               	btfsc	status,0,c
  5865  001316  2A3E               	incf	printf@val+1,f,c
  5866                           
  5867                           ;doprnt.c: 1264: }
  5868                           ;doprnt.c: 1266: }
  5869  001318  D03D               	goto	l5392
  5870  00131A                     l5358:
  5871                           
  5872                           ;doprnt.c: 1268: else
  5873                           ;doprnt.c: 1273: {
  5874                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5875  00131A  C03A  FFD9         	movff	printf@ap,fsr2l
  5876  00131E  C03B  FFDA         	movff	printf@ap+1,fsr2h
  5877  001322  CFDE F03D          	movff	postinc2,printf@val
  5878  001326  CFDD F03E          	movff	postdec2,printf@val+1
  5879  00132A  0E02               	movlw	2
  5880  00132C  263A               	addwf	printf@ap,f,c
  5881  00132E  0E00               	movlw	0
  5882  001330  223B               	addwfc	printf@ap+1,f,c
  5883                           
  5884                           ;doprnt.c: 1287: }
  5885                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5886  001332  D030               	goto	l5392
  5887  001334                     l5362:
  5888                           
  5889                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5890  001334  0E01               	movlw	1
  5891  001336  6E42               	movwf	printf@c,c
  5892  001338                     l5364:
  5893  001338  0E05               	movlw	5
  5894  00133A  1842               	xorwf	printf@c,w,c
  5895  00133C  B4D8               	btfsc	status,2,c
  5896  00133E  D032               	goto	l5394
  5897                           
  5898                           ;doprnt.c: 1306: if(val < dpowers[c])
  5899  001340  5042               	movf	printf@c,w,c
  5900  001342  0D02               	mullw	2
  5901  001344  0E3C               	movlw	low _dpowers
  5902  001346  24F3               	addwf	prodl,w,c
  5903  001348  6EF6               	movwf	tblptrl,c
  5904  00134A  0EFE               	movlw	high _dpowers
  5905  00134C  20F4               	addwfc	prodh,w,c
  5906  00134E  6EF7               	movwf	tblptrh,c
  5907  001350                     	if	0	;There are less than 3 active tblptr bytes
  5908  001350                     	endif
  5909  001350  0009               	tblrd		*+
  5910  001352  50F5               	movf	tablat,w,c
  5911  001354  5C3D               	subwf	printf@val,w,c
  5912  001356  0009               	tblrd		*+
  5913  001358  50F5               	movf	tablat,w,c
  5914  00135A  583E               	subwfb	printf@val+1,w,c
  5915  00135C  A0D8               	btfss	status,0,c
  5916  00135E  D022               	goto	l5394
  5917                           
  5918                           ;doprnt.c: 1307: break;
  5919  001360  2A42               	incf	printf@c,f,c
  5920  001362  D7EA               	goto	l5364
  5921  001364                     l5376:
  5922                           
  5923                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5924  001364  0E01               	movlw	1
  5925  001366  6E42               	movwf	printf@c,c
  5926  001368                     l5378:
  5927  001368  0E04               	movlw	4
  5928  00136A  1842               	xorwf	printf@c,w,c
  5929  00136C  B4D8               	btfsc	status,2,c
  5930  00136E  D01A               	goto	l5394
  5931                           
  5932                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5933  001370  5042               	movf	printf@c,w,c
  5934  001372  0D02               	mullw	2
  5935  001374  0E46               	movlw	low _hexpowers
  5936  001376  24F3               	addwf	prodl,w,c
  5937  001378  6EF6               	movwf	tblptrl,c
  5938  00137A  0EFE               	movlw	high _hexpowers
  5939  00137C  20F4               	addwfc	prodh,w,c
  5940  00137E  6EF7               	movwf	tblptrh,c
  5941  001380                     	if	0	;There are less than 3 active tblptr bytes
  5942  001380                     	endif
  5943  001380  0009               	tblrd		*+
  5944  001382  50F5               	movf	tablat,w,c
  5945  001384  5C3D               	subwf	printf@val,w,c
  5946  001386  0009               	tblrd		*+
  5947  001388  50F5               	movf	tablat,w,c
  5948  00138A  583E               	subwfb	printf@val+1,w,c
  5949  00138C  A0D8               	btfss	status,0,c
  5950  00138E  D00A               	goto	l5394
  5951                           
  5952                           ;doprnt.c: 1318: break;
  5953  001390  2A42               	incf	printf@c,f,c
  5954  001392  D7EA               	goto	l5378
  5955  001394                     l5392:
  5956  001394  503F               	movf	printf@flag,w,c
  5957  001396  0B80               	andlw	128
  5958                           
  5959                           ; Switch size 1, requested type "space"
  5960                           ; Number of cases is 2, Range of values is 0 to 128
  5961                           ; switch strategies available:
  5962                           ; Name         Instructions Cycles
  5963                           ; simple_byte            7     4 (average)
  5964                           ;	Chosen strategy is simple_byte
  5965  001398  0A00               	xorlw	0	; case 0
  5966  00139A  B4D8               	btfsc	status,2,c
  5967  00139C  D7CB               	goto	l5362
  5968  00139E  0A80               	xorlw	128	; case 128
  5969  0013A0  B4D8               	btfsc	status,2,c
  5970  0013A2  D7E0               	goto	l5376
  5971  0013A4                     l5394:
  5972                           
  5973                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5974  0013A4  5040               	movf	printf@width,w,c
  5975  0013A6  1041               	iorwf	printf@width+1,w,c
  5976  0013A8  B4D8               	btfsc	status,2,c
  5977  0013AA  D009               	goto	l5400
  5978  0013AC  C03F  F035         	movff	printf@flag,??_printf
  5979  0013B0  0E03               	movlw	3
  5980  0013B2  1635               	andwf	??_printf,f,c
  5981  0013B4  B4D8               	btfsc	status,2,c
  5982  0013B6  D003               	goto	l5400
  5983                           
  5984                           ;doprnt.c: 1346: width--;
  5985  0013B8  0640               	decf	printf@width,f,c
  5986  0013BA  A0D8               	btfss	status,0,c
  5987  0013BC  0641               	decf	printf@width+1,f,c
  5988  0013BE                     l5400:
  5989                           
  5990                           ;doprnt.c: 1381: if(width > c)
  5991  0013BE  0E80               	movlw	128
  5992  0013C0  BE42               	btfsc	printf@c,7,c
  5993  0013C2  0E7F               	movlw	127
  5994  0013C4  6E35               	movwf	??_printf& (0+255),c
  5995  0013C6  5040               	movf	printf@width,w,c
  5996  0013C8  5C42               	subwf	printf@c,w,c
  5997  0013CA  5041               	movf	printf@width+1,w,c
  5998  0013CC  0A80               	xorlw	128
  5999  0013CE  5835               	subwfb	??_printf& (0+255),w,c
  6000  0013D0  B0D8               	btfsc	status,0,c
  6001  0013D2  D007               	goto	l5404
  6002                           
  6003                           ;doprnt.c: 1382: width -= c;
  6004  0013D4  5042               	movf	printf@c,w,c
  6005  0013D6  5E40               	subwf	printf@width,f,c
  6006  0013D8  0E00               	movlw	0
  6007  0013DA  BE42               	btfsc	printf@c,7,c
  6008  0013DC  0EFF               	movlw	255
  6009  0013DE  5A41               	subwfb	printf@width+1,f,c
  6010  0013E0  D004               	goto	l5406
  6011  0013E2                     l5404:
  6012                           
  6013                           ;doprnt.c: 1383: else
  6014                           ;doprnt.c: 1384: width = 0;
  6015  0013E2  0E00               	movlw	0
  6016  0013E4  6E41               	movwf	printf@width+1,c
  6017  0013E6  0E00               	movlw	0
  6018  0013E8  6E40               	movwf	printf@width,c
  6019  0013EA                     l5406:
  6020                           
  6021                           ;doprnt.c: 1387: if(flag & 0x04) {
  6022  0013EA  A43F               	btfss	printf@flag,2,c
  6023  0013EC  D014               	goto	l5418
  6024                           
  6025                           ;doprnt.c: 1392: if(flag & 0x03)
  6026  0013EE  C03F  F035         	movff	printf@flag,??_printf
  6027  0013F2  0E03               	movlw	3
  6028  0013F4  1635               	andwf	??_printf,f,c
  6029  0013F6  B4D8               	btfsc	status,2,c
  6030  0013F8  D003               	goto	l5412
  6031                           
  6032                           ;doprnt.c: 1393: (putch('-') );
  6033  0013FA  0E2D               	movlw	45
  6034  0013FC  ECC2  F015         	call	_putch
  6035  001400                     l5412:
  6036                           
  6037                           ;doprnt.c: 1415: if(width)
  6038  001400  5040               	movf	printf@width,w,c
  6039  001402  1041               	iorwf	printf@width+1,w,c
  6040  001404  B4D8               	btfsc	status,2,c
  6041  001406  D01E               	goto	l5428
  6042                           
  6043                           ;doprnt.c: 1417: (putch('0') );
  6044                           
  6045                           ;doprnt.c: 1416: do
  6046  001408  0E30               	movlw	48
  6047  00140A  ECC2  F015         	call	_putch
  6048                           
  6049                           ;doprnt.c: 1418: while(--width);
  6050  00140E  0640               	decf	printf@width,f,c
  6051  001410  A0D8               	btfss	status,0,c
  6052  001412  0641               	decf	printf@width+1,f,c
  6053  001414  D7F5               	goto	l5412
  6054  001416                     l5418:
  6055                           
  6056                           ;doprnt.c: 1422: {
  6057                           ;doprnt.c: 1424: if(width
  6058                           ;doprnt.c: 1428: )
  6059  001416  5040               	movf	printf@width,w,c
  6060  001418  1041               	iorwf	printf@width+1,w,c
  6061  00141A  B4D8               	btfsc	status,2,c
  6062  00141C  D00A               	goto	l5424
  6063  00141E                     l5420:
  6064                           
  6065                           ;doprnt.c: 1430: (putch(' ') );
  6066  00141E  0E20               	movlw	32
  6067  001420  ECC2  F015         	call	_putch
  6068                           
  6069                           ;doprnt.c: 1431: while(--width);
  6070  001424  0640               	decf	printf@width,f,c
  6071  001426  A0D8               	btfss	status,0,c
  6072  001428  0641               	decf	printf@width+1,f,c
  6073  00142A  5040               	movf	printf@width,w,c
  6074  00142C  1041               	iorwf	printf@width+1,w,c
  6075  00142E  A4D8               	btfss	status,2,c
  6076  001430  D7F6               	goto	l5420
  6077  001432                     l5424:
  6078                           
  6079                           ;doprnt.c: 1438: if(flag & 0x03)
  6080  001432  C03F  F035         	movff	printf@flag,??_printf
  6081  001436  0E03               	movlw	3
  6082  001438  1635               	andwf	??_printf,f,c
  6083  00143A  B4D8               	btfsc	status,2,c
  6084  00143C  D003               	goto	l5428
  6085                           
  6086                           ;doprnt.c: 1439: (putch('-') );
  6087  00143E  0E2D               	movlw	45
  6088  001440  ECC2  F015         	call	_putch
  6089  001444                     l5428:
  6090                           
  6091                           ;doprnt.c: 1469: }
  6092                           ;doprnt.c: 1472: prec = c;
  6093  001444  C042  F03C         	movff	printf@c,printf@prec
  6094                           
  6095                           ;doprnt.c: 1474: while(prec--) {
  6096  001448  D050               	goto	l5442
  6097  00144A                     l5430:
  6098                           
  6099                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6100  00144A  503C               	movf	printf@prec,w,c
  6101  00144C  0D02               	mullw	2
  6102  00144E  0E3C               	movlw	low _dpowers
  6103  001450  24F3               	addwf	prodl,w,c
  6104  001452  6EF6               	movwf	tblptrl,c
  6105  001454  0EFE               	movlw	high _dpowers
  6106  001456  20F4               	addwfc	prodh,w,c
  6107  001458  6EF7               	movwf	tblptrh,c
  6108  00145A                     	if	0	;There are less than 3 active tblptr bytes
  6109  00145A                     	endif
  6110  00145A  0009               	tblrd		*+
  6111  00145C  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6112  001460  000A               	tblrd		*-
  6113  001462  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6114  001466  C03D  F021         	movff	printf@val,___lwdiv@dividend
  6115  00146A  C03E  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6116  00146E  EC3D  F014         	call	___lwdiv	;wreg free
  6117  001472  C021  F028         	movff	?___lwdiv,___lwmod@dividend
  6118  001476  C022  F029         	movff	?___lwdiv+1,___lwmod@dividend+1
  6119  00147A  0E00               	movlw	0
  6120  00147C  6E2B               	movwf	___lwmod@divisor+1,c
  6121  00147E  0E0A               	movlw	10
  6122  001480  6E2A               	movwf	___lwmod@divisor,c
  6123  001482  ECD5  F014         	call	___lwmod	;wreg free
  6124  001486  5028               	movf	?___lwmod,w,c
  6125  001488  0F30               	addlw	48
  6126  00148A  6E42               	movwf	printf@c,c
  6127                           
  6128                           ;doprnt.c: 1491: break;
  6129  00148C  D02B               	goto	l5440
  6130  00148E                     l5432:
  6131                           
  6132                           ;doprnt.c: 1499: {
  6133                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6134  00148E  C03D  F021         	movff	printf@val,___lwdiv@dividend
  6135  001492  C03E  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6136  001496  503C               	movf	printf@prec,w,c
  6137  001498  0D02               	mullw	2
  6138  00149A  0E46               	movlw	low _hexpowers
  6139  00149C  24F3               	addwf	prodl,w,c
  6140  00149E  6EF6               	movwf	tblptrl,c
  6141  0014A0  0EFE               	movlw	high _hexpowers
  6142  0014A2  20F4               	addwfc	prodh,w,c
  6143  0014A4  6EF7               	movwf	tblptrh,c
  6144  0014A6                     	if	0	;There are less than 3 active tblptr bytes
  6145  0014A6                     	endif
  6146  0014A6  0009               	tblrd		*+
  6147  0014A8  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6148  0014AC  000A               	tblrd		*-
  6149  0014AE  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6150  0014B2  EC3D  F014         	call	___lwdiv	;wreg free
  6151  0014B6  5021               	movf	?___lwdiv,w,c
  6152  0014B8  0B0F               	andlw	15
  6153  0014BA  6E39               	movwf	printf@idx,c
  6154                           
  6155                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6156  0014BC  5039               	movf	printf@idx,w,c
  6157  0014BE  0D01               	mullw	1
  6158  0014C0  0E80               	movlw	low STR_42
  6159  0014C2  24F3               	addwf	prodl,w,c
  6160  0014C4  6EF6               	movwf	tblptrl,c
  6161  0014C6  0EFE               	movlw	high STR_42
  6162  0014C8  20F4               	addwfc	prodh,w,c
  6163  0014CA  6EF7               	movwf	tblptrh,c
  6164  0014CC                     	if	0	;There are less than 3 active tblptr bytes
  6165  0014CC                     	endif
  6166  0014CC  0008               	tblrd		*
  6167  0014CE  CFF5 F042          	movff	tablat,printf@c
  6168                           
  6169                           ;doprnt.c: 1523: }
  6170                           
  6171                           ;doprnt.c: 1508: }
  6172                           ;doprnt.c: 1510: break;
  6173  0014D2  D008               	goto	l5440
  6174  0014D4                     l5438:
  6175  0014D4  503F               	movf	printf@flag,w,c
  6176  0014D6  0B80               	andlw	128
  6177                           
  6178                           ; Switch size 1, requested type "space"
  6179                           ; Number of cases is 2, Range of values is 0 to 128
  6180                           ; switch strategies available:
  6181                           ; Name         Instructions Cycles
  6182                           ; simple_byte            7     4 (average)
  6183                           ;	Chosen strategy is simple_byte
  6184  0014D8  0A00               	xorlw	0	; case 0
  6185  0014DA  B4D8               	btfsc	status,2,c
  6186  0014DC  D7B6               	goto	l5430
  6187  0014DE  0A80               	xorlw	128	; case 128
  6188  0014E0  B4D8               	btfsc	status,2,c
  6189  0014E2  D7D5               	goto	l5432
  6190  0014E4                     l5440:
  6191                           
  6192                           ;doprnt.c: 1524: (putch(c) );
  6193  0014E4  5042               	movf	printf@c,w,c
  6194  0014E6  ECC2  F015         	call	_putch
  6195  0014EA                     l5442:
  6196  0014EA  063C               	decf	printf@prec,f,c
  6197  0014EC  283C               	incf	printf@prec,w,c
  6198  0014EE  A4D8               	btfss	status,2,c
  6199  0014F0  D7F1               	goto	l5438
  6200  0014F2                     l5444:
  6201  0014F2  C02D  FFF6         	movff	printf@f,tblptrl
  6202  0014F6  C02E  FFF7         	movff	printf@f+1,tblptrh
  6203  0014FA  4A2D               	infsnz	printf@f,f,c
  6204  0014FC  2A2E               	incf	printf@f+1,f,c
  6205  0014FE                     	if	0	;tblptru may be non-zero
  6206  0014FE                     	endif
  6207  0014FE                     	if	0	;tblptru may be non-zero
  6208  0014FE                     	endif
  6209  0014FE  0008               	tblrd		*
  6210  001500  CFF5 F042          	movff	tablat,printf@c
  6211  001504  5042               	movf	printf@c,w,c
  6212  001506  B4D8               	btfsc	status,2,c
  6213  001508  0012               	return	
  6214  00150A  D67F               	goto	l5318
  6215  00150C                     __end_of_printf:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           prodh	equ	0xFF4
  6222                           prodl	equ	0xFF3
  6223                           intcon	equ	0xFF2
  6224                           intcon2	equ	0xFF1
  6225                           postinc0	equ	0xFEE
  6226                           wreg	equ	0xFE8
  6227                           indf2	equ	0xFDF
  6228                           postinc2	equ	0xFDE
  6229                           postdec2	equ	0xFDD
  6230                           fsr2h	equ	0xFDA
  6231                           fsr2l	equ	0xFD9
  6232                           status	equ	0xFD8
  6233                           
  6234 ;; *************** function _putch *****************
  6235 ;; Defined at:
  6236 ;;		line 27 in file "lcd.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  data            1    wreg     unsigned char 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;  data            1   34[COMRAM] unsigned char 
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      void 
  6243 ;; Registers used:
  6244 ;;		wreg, status,2, status,0, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;Total ram usage:        1 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    3
  6257 ;; This function calls:
  6258 ;;		_lcdNibble
  6259 ;; This function is called by:
  6260 ;;		_printf
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text15
  6265  002B84                     __ptext15:
  6266                           	opt stack 0
  6267  002B84                     _putch:
  6268                           	opt stack 26
  6269                           
  6270                           ;incstack = 0
  6271                           ;putch@data stored from wreg
  6272  002B84  6E23               	movwf	putch@data,c
  6273                           
  6274                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6275  002B86  848C               	bsf	3980,2,c	;volatile
  6276                           
  6277                           ;lcd.c: 29: lcdNibble(data);
  6278  002B88  5023               	movf	putch@data,w,c
  6279  002B8A  EC12  F014         	call	_lcdNibble
  6280  002B8E  0012               	return		;funcret
  6281  002B90                     __end_of_putch:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           intcon2	equ	0xFF1
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           indf2	equ	0xFDF
  6294                           postinc2	equ	0xFDE
  6295                           postdec2	equ	0xFDD
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           
  6300 ;; *************** function _isdigit *****************
  6301 ;; Defined at:
  6302 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  c               1    wreg     unsigned char 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  c               1   34[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;		None               void
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:        3 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    2
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_printf
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text16
  6331  002B08                     __ptext16:
  6332                           	opt stack 0
  6333  002B08                     _isdigit:
  6334                           	opt stack 27
  6335                           
  6336                           ;incstack = 0
  6337                           ;isdigit@c stored from wreg
  6338  002B08  6E23               	movwf	isdigit@c,c
  6339  002B0A  0E00               	movlw	0
  6340  002B0C  6E22               	movwf	_isdigit$1448,c
  6341  002B0E  0E3A               	movlw	58
  6342  002B10  6023               	cpfslt	isdigit@c,c
  6343  002B12  D005               	goto	l5254
  6344  002B14  0E2F               	movlw	47
  6345  002B16  6423               	cpfsgt	isdigit@c,c
  6346  002B18  D002               	goto	l5254
  6347  002B1A  0E01               	movlw	1
  6348  002B1C  6E22               	movwf	_isdigit$1448,c
  6349  002B1E                     l5254:
  6350  002B1E  C022  F021         	movff	_isdigit$1448,??_isdigit
  6351  002B22  3021               	rrcf	??_isdigit,w,c
  6352  002B24  0012               	return	
  6353  002B26                     __end_of_isdigit:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon	equ	0xFF2
  6362                           intcon2	equ	0xFF1
  6363                           postinc0	equ	0xFEE
  6364                           wreg	equ	0xFE8
  6365                           indf2	equ	0xFDF
  6366                           postinc2	equ	0xFDE
  6367                           postdec2	equ	0xFDD
  6368                           fsr2h	equ	0xFDA
  6369                           fsr2l	equ	0xFD9
  6370                           status	equ	0xFD8
  6371                           
  6372 ;; *************** function ___wmul *****************
  6373 ;; Defined at:
  6374 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  multiplier      2   32[COMRAM] unsigned int 
  6377 ;;  multiplicand    2   34[COMRAM] unsigned int 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  product         2   36[COMRAM] unsigned int 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  2   32[COMRAM] unsigned int 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2, status,0, prodl, prodh
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6389 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;Total ram usage:        6 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    2
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_printf
  6400 ;;		_timePassed
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           	psect	text17
  6405  002A98                     __ptext17:
  6406                           	opt stack 0
  6407  002A98                     ___wmul:
  6408                           	opt stack 27
  6409                           
  6410                           ;incstack = 0
  6411  002A98  5021               	movf	___wmul@multiplier,w,c
  6412  002A9A  0223               	mulwf	___wmul@multiplicand,c
  6413  002A9C  CFF3 F025          	movff	prodl,___wmul@product
  6414  002AA0  CFF4 F026          	movff	prodh,___wmul@product+1
  6415  002AA4  5021               	movf	___wmul@multiplier,w,c
  6416  002AA6  0224               	mulwf	___wmul@multiplicand+1,c
  6417  002AA8  50F3               	movf	prodl,w,c
  6418  002AAA  2626               	addwf	___wmul@product+1,f,c
  6419  002AAC  5022               	movf	___wmul@multiplier+1,w,c
  6420  002AAE  0223               	mulwf	___wmul@multiplicand,c
  6421  002AB0  50F3               	movf	prodl,w,c
  6422  002AB2  2626               	addwf	___wmul@product+1,f,c
  6423  002AB4  C025  F021         	movff	___wmul@product,?___wmul
  6424  002AB8  C026  F022         	movff	___wmul@product+1,?___wmul+1
  6425  002ABC  0012               	return	
  6426  002ABE                     __end_of___wmul:
  6427                           	opt stack 0
  6428                           tblptru	equ	0xFF8
  6429                           tblptrh	equ	0xFF7
  6430                           tblptrl	equ	0xFF6
  6431                           tablat	equ	0xFF5
  6432                           prodh	equ	0xFF4
  6433                           prodl	equ	0xFF3
  6434                           intcon	equ	0xFF2
  6435                           intcon2	equ	0xFF1
  6436                           postinc0	equ	0xFEE
  6437                           wreg	equ	0xFE8
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function ___lwmod *****************
  6446 ;; Defined at:
  6447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  dividend        2   39[COMRAM] unsigned int 
  6450 ;;  divisor         2   41[COMRAM] unsigned int 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  counter         1   43[COMRAM] unsigned char 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  2   39[COMRAM] unsigned int 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;Total ram usage:        5 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    2
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_printf
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           	psect	text18
  6477  0029AA                     __ptext18:
  6478                           	opt stack 0
  6479  0029AA                     ___lwmod:
  6480                           	opt stack 27
  6481                           
  6482                           ;incstack = 0
  6483  0029AA  502A               	movf	___lwmod@divisor,w,c
  6484  0029AC  102B               	iorwf	___lwmod@divisor+1,w,c
  6485  0029AE  B4D8               	btfsc	status,2,c
  6486  0029B0  D018               	goto	l1277
  6487  0029B2  0E01               	movlw	1
  6488  0029B4  6E2C               	movwf	___lwmod@counter,c
  6489  0029B6  D004               	goto	l5292
  6490  0029B8                     l5290:
  6491  0029B8  90D8               	bcf	status,0,c
  6492  0029BA  362A               	rlcf	___lwmod@divisor,f,c
  6493  0029BC  362B               	rlcf	___lwmod@divisor+1,f,c
  6494  0029BE  2A2C               	incf	___lwmod@counter,f,c
  6495  0029C0                     l5292:
  6496  0029C0  AE2B               	btfss	___lwmod@divisor+1,7,c
  6497  0029C2  D7FA               	goto	l5290
  6498  0029C4                     l5294:
  6499  0029C4  502A               	movf	___lwmod@divisor,w,c
  6500  0029C6  5C28               	subwf	___lwmod@dividend,w,c
  6501  0029C8  502B               	movf	___lwmod@divisor+1,w,c
  6502  0029CA  5829               	subwfb	___lwmod@dividend+1,w,c
  6503  0029CC  A0D8               	btfss	status,0,c
  6504  0029CE  D004               	goto	l5298
  6505  0029D0  502A               	movf	___lwmod@divisor,w,c
  6506  0029D2  5E28               	subwf	___lwmod@dividend,f,c
  6507  0029D4  502B               	movf	___lwmod@divisor+1,w,c
  6508  0029D6  5A29               	subwfb	___lwmod@dividend+1,f,c
  6509  0029D8                     l5298:
  6510  0029D8  90D8               	bcf	status,0,c
  6511  0029DA  322B               	rrcf	___lwmod@divisor+1,f,c
  6512  0029DC  322A               	rrcf	___lwmod@divisor,f,c
  6513  0029DE  2E2C               	decfsz	___lwmod@counter,f,c
  6514  0029E0  D7F1               	goto	l5294
  6515  0029E2                     l1277:
  6516  0029E2  C028  F028         	movff	___lwmod@dividend,?___lwmod
  6517  0029E6  C029  F029         	movff	___lwmod@dividend+1,?___lwmod+1
  6518  0029EA  0012               	return		;funcret
  6519  0029EC                     __end_of___lwmod:
  6520                           	opt stack 0
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           intcon2	equ	0xFF1
  6529                           postinc0	equ	0xFEE
  6530                           wreg	equ	0xFE8
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function ___lwdiv *****************
  6539 ;; Defined at:
  6540 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  dividend        2   32[COMRAM] unsigned int 
  6543 ;;  divisor         2   34[COMRAM] unsigned int 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  quotient        2   37[COMRAM] unsigned int 
  6546 ;;  counter         1   36[COMRAM] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  2   32[COMRAM] unsigned int 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6556 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;Total ram usage:        7 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    2
  6563 ;; This function calls:
  6564 ;;		Nothing
  6565 ;; This function is called by:
  6566 ;;		_printf
  6567 ;; This function uses a non-reentrant model
  6568 ;;
  6569                           
  6570                           	psect	text19
  6571  00287A                     __ptext19:
  6572                           	opt stack 0
  6573  00287A                     ___lwdiv:
  6574                           	opt stack 27
  6575                           
  6576                           ;incstack = 0
  6577  00287A  0E00               	movlw	0
  6578  00287C  6E27               	movwf	___lwdiv@quotient+1,c
  6579  00287E  0E00               	movlw	0
  6580  002880  6E26               	movwf	___lwdiv@quotient,c
  6581  002882  5023               	movf	___lwdiv@divisor,w,c
  6582  002884  1024               	iorwf	___lwdiv@divisor+1,w,c
  6583  002886  B4D8               	btfsc	status,2,c
  6584  002888  D01C               	goto	l1267
  6585  00288A  0E01               	movlw	1
  6586  00288C  6E25               	movwf	___lwdiv@counter,c
  6587  00288E  D004               	goto	l5272
  6588  002890                     l5270:
  6589  002890  90D8               	bcf	status,0,c
  6590  002892  3623               	rlcf	___lwdiv@divisor,f,c
  6591  002894  3624               	rlcf	___lwdiv@divisor+1,f,c
  6592  002896  2A25               	incf	___lwdiv@counter,f,c
  6593  002898                     l5272:
  6594  002898  AE24               	btfss	___lwdiv@divisor+1,7,c
  6595  00289A  D7FA               	goto	l5270
  6596  00289C                     l5274:
  6597  00289C  90D8               	bcf	status,0,c
  6598  00289E  3626               	rlcf	___lwdiv@quotient,f,c
  6599  0028A0  3627               	rlcf	___lwdiv@quotient+1,f,c
  6600  0028A2  5023               	movf	___lwdiv@divisor,w,c
  6601  0028A4  5C21               	subwf	___lwdiv@dividend,w,c
  6602  0028A6  5024               	movf	___lwdiv@divisor+1,w,c
  6603  0028A8  5822               	subwfb	___lwdiv@dividend+1,w,c
  6604  0028AA  A0D8               	btfss	status,0,c
  6605  0028AC  D005               	goto	l5282
  6606  0028AE  5023               	movf	___lwdiv@divisor,w,c
  6607  0028B0  5E21               	subwf	___lwdiv@dividend,f,c
  6608  0028B2  5024               	movf	___lwdiv@divisor+1,w,c
  6609  0028B4  5A22               	subwfb	___lwdiv@dividend+1,f,c
  6610  0028B6  8026               	bsf	___lwdiv@quotient,0,c
  6611  0028B8                     l5282:
  6612  0028B8  90D8               	bcf	status,0,c
  6613  0028BA  3224               	rrcf	___lwdiv@divisor+1,f,c
  6614  0028BC  3223               	rrcf	___lwdiv@divisor,f,c
  6615  0028BE  2E25               	decfsz	___lwdiv@counter,f,c
  6616  0028C0  D7ED               	goto	l5274
  6617  0028C2                     l1267:
  6618  0028C2  C026  F021         	movff	___lwdiv@quotient,?___lwdiv
  6619  0028C6  C027  F022         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6620  0028CA  0012               	return		;funcret
  6621  0028CC                     __end_of___lwdiv:
  6622                           	opt stack 0
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodh	equ	0xFF4
  6628                           prodl	equ	0xFF3
  6629                           intcon	equ	0xFF2
  6630                           intcon2	equ	0xFF1
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _lcdInst *****************
  6641 ;; Defined at:
  6642 ;;		line 22 in file "lcd.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  data            1    wreg     unsigned char 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  data            1   34[COMRAM] unsigned char 
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1    wreg      void 
  6649 ;; Registers used:
  6650 ;;		wreg, status,2, status,0, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;Total ram usage:        1 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    3
  6663 ;; This function calls:
  6664 ;;		_lcdNibble
  6665 ;; This function is called by:
  6666 ;;		_main
  6667 ;;		_initLCD
  6668 ;;		_homescreen
  6669 ;;		_displayLog
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text20
  6674  002B90                     __ptext20:
  6675                           	opt stack 0
  6676  002B90                     _lcdInst:
  6677                           	opt stack 27
  6678                           
  6679                           ;incstack = 0
  6680                           ;lcdInst@data stored from wreg
  6681  002B90  6E23               	movwf	lcdInst@data,c
  6682                           
  6683                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6684  002B92  948C               	bcf	3980,2,c	;volatile
  6685                           
  6686                           ;lcd.c: 24: lcdNibble(data);
  6687  002B94  5023               	movf	lcdInst@data,w,c
  6688  002B96  EC12  F014         	call	_lcdNibble
  6689  002B9A  0012               	return		;funcret
  6690  002B9C                     __end_of_lcdInst:
  6691                           	opt stack 0
  6692                           tblptru	equ	0xFF8
  6693                           tblptrh	equ	0xFF7
  6694                           tblptrl	equ	0xFF6
  6695                           tablat	equ	0xFF5
  6696                           prodh	equ	0xFF4
  6697                           prodl	equ	0xFF3
  6698                           intcon	equ	0xFF2
  6699                           intcon2	equ	0xFF1
  6700                           postinc0	equ	0xFEE
  6701                           wreg	equ	0xFE8
  6702                           indf2	equ	0xFDF
  6703                           postinc2	equ	0xFDE
  6704                           postdec2	equ	0xFDD
  6705                           fsr2h	equ	0xFDA
  6706                           fsr2l	equ	0xFD9
  6707                           status	equ	0xFD8
  6708                           
  6709 ;; *************** function _lcdNibble *****************
  6710 ;; Defined at:
  6711 ;;		line 32 in file "lcd.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  data            1    wreg     unsigned char 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  data            1   33[COMRAM] unsigned char 
  6716 ;;  temp            1   32[COMRAM] unsigned char 
  6717 ;; Return value:  Size  Location     Type
  6718 ;;                  1    wreg      void 
  6719 ;; Registers used:
  6720 ;;		wreg, status,2, status,0
  6721 ;; Tracked objects:
  6722 ;;		On entry : 0/0
  6723 ;;		On exit  : 0/0
  6724 ;;		Unchanged: 0/0
  6725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;Total ram usage:        2 bytes
  6731 ;; Hardware stack levels used:    1
  6732 ;; Hardware stack levels required when called:    2
  6733 ;; This function calls:
  6734 ;;		Nothing
  6735 ;; This function is called by:
  6736 ;;		_lcdInst
  6737 ;;		_putch
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text21
  6742  002824                     __ptext21:
  6743                           	opt stack 0
  6744  002824                     _lcdNibble:
  6745                           	opt stack 26
  6746                           
  6747                           ;incstack = 0
  6748                           ;lcdNibble@data stored from wreg
  6749  002824  6E22               	movwf	lcdNibble@data,c
  6750                           
  6751                           ;lcd.c: 34: char temp = data & 0xF0;
  6752  002826  5022               	movf	lcdNibble@data,w,c
  6753  002828  0BF0               	andlw	240
  6754  00282A  6E21               	movwf	lcdNibble@temp,c
  6755                           
  6756                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6757  00282C  508C               	movf	3980,w,c	;volatile
  6758  00282E  0B0F               	andlw	15
  6759  002830  6E8C               	movwf	3980,c	;volatile
  6760                           
  6761                           ;lcd.c: 36: LATD = temp | LATD;
  6762  002832  5021               	movf	lcdNibble@temp,w,c
  6763  002834  108C               	iorwf	3980,w,c	;volatile
  6764  002836  6E8C               	movwf	3980,c	;volatile
  6765                           
  6766                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6767  002838  968C               	bcf	3980,3,c	;volatile
  6768                           
  6769                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6770  00283A  0E42               	movlw	66
  6771  00283C                     u8157:
  6772  00283C  2EE8               	decfsz	wreg,f,c
  6773  00283E  D7FE               	bra	u8157
  6774  002840  D000               	nop2	
  6775                           
  6776                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6777  002842  868C               	bsf	3980,3,c	;volatile
  6778                           
  6779                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6780  002844  0E42               	movlw	66
  6781  002846                     u8167:
  6782  002846  2EE8               	decfsz	wreg,f,c
  6783  002848  D7FE               	bra	u8167
  6784  00284A  D000               	nop2	
  6785                           
  6786                           ;lcd.c: 43: data = data << 4;
  6787  00284C  3822               	swapf	lcdNibble@data,w,c
  6788  00284E  0BF0               	andlw	240
  6789  002850  6E22               	movwf	lcdNibble@data,c
  6790                           
  6791                           ;lcd.c: 45: temp = data & 0xF0;
  6792  002852  5022               	movf	lcdNibble@data,w,c
  6793  002854  0BF0               	andlw	240
  6794  002856  6E21               	movwf	lcdNibble@temp,c
  6795                           
  6796                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6797  002858  508C               	movf	3980,w,c	;volatile
  6798  00285A  0B0F               	andlw	15
  6799  00285C  6E8C               	movwf	3980,c	;volatile
  6800                           
  6801                           ;lcd.c: 47: LATD = temp | LATD;
  6802  00285E  5021               	movf	lcdNibble@temp,w,c
  6803  002860  108C               	iorwf	3980,w,c	;volatile
  6804  002862  6E8C               	movwf	3980,c	;volatile
  6805                           
  6806                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6807  002864  968C               	bcf	3980,3,c	;volatile
  6808                           
  6809                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6810  002866  0E42               	movlw	66
  6811  002868                     u8177:
  6812  002868  2EE8               	decfsz	wreg,f,c
  6813  00286A  D7FE               	bra	u8177
  6814  00286C  D000               	nop2	
  6815                           
  6816                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6817  00286E  868C               	bsf	3980,3,c	;volatile
  6818                           
  6819                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6820  002870  0E42               	movlw	66
  6821  002872                     u8187:
  6822  002872  2EE8               	decfsz	wreg,f,c
  6823  002874  D7FE               	bra	u8187
  6824  002876  D000               	nop2	
  6825  002878  0012               	return		;funcret
  6826  00287A                     __end_of_lcdNibble:
  6827                           	opt stack 0
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           intcon2	equ	0xFF1
  6836                           postinc0	equ	0xFEE
  6837                           wreg	equ	0xFE8
  6838                           indf2	equ	0xFDF
  6839                           postinc2	equ	0xFDE
  6840                           postdec2	equ	0xFDD
  6841                           fsr2h	equ	0xFDA
  6842                           fsr2l	equ	0xFD9
  6843                           status	equ	0xFD8
  6844                           
  6845 ;; *************** function _keycheck *****************
  6846 ;; Defined at:
  6847 ;;		line 12 in file "interface.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;Total ram usage:        0 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    2
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_main
  6872 ;;		_displayLog
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text22
  6877  002B3C                     __ptext22:
  6878                           	opt stack 0
  6879  002B3C                     _keycheck:
  6880                           	opt stack 28
  6881  002B3C                     l680:
  6882  002B3C  A281               	btfss	3969,1,c	;volatile
  6883  002B3E  D7FE               	goto	l680
  6884                           
  6885                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  6886  002B40  3881               	swapf	3969,w,c	;volatile
  6887  002B42  0B0F               	andlw	15
  6888  002B44  0B0F               	andlw	15
  6889  002B46  0100               	movlb	0	; () banked
  6890  002B48  6FBA               	movwf	_keypress& (0+255),b	;volatile
  6891  002B4A                     l683:
  6892  002B4A  B281               	btfsc	3969,1,c	;volatile
  6893  002B4C  D7FE               	goto	l683
  6894                           
  6895                           ;interface.c: 16: __nop();
  6896  002B4E  F000               	nop	
  6897                           
  6898                           ;interface.c: 17: return;
  6899  002B50  0012               	return		;funcret
  6900  002B52                     __end_of_keycheck:
  6901                           	opt stack 0
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           intcon	equ	0xFF2
  6909                           intcon2	equ	0xFF1
  6910                           postinc0	equ	0xFEE
  6911                           wreg	equ	0xFE8
  6912                           indf2	equ	0xFDF
  6913                           postinc2	equ	0xFDE
  6914                           postdec2	equ	0xFDD
  6915                           fsr2h	equ	0xFDA
  6916                           fsr2l	equ	0xFD9
  6917                           status	equ	0xFD8
  6918                           
  6919 ;; *************** function _calibrateWheels *****************
  6920 ;; Defined at:
  6921 ;;		line 31 in file "logic.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;		None
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  i               2   37[COMRAM] int 
  6926 ;;  prev            2   35[COMRAM] int 
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;Total ram usage:        4 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    3
  6943 ;; This function calls:
  6944 ;;		_readADC
  6945 ;;		_startTMR1
  6946 ;;		_updateS1
  6947 ;;		_updateS3
  6948 ;; This function is called by:
  6949 ;;		_main
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text23
  6954  00209E                     __ptext23:
  6955                           	opt stack 0
  6956  00209E                     _calibrateWheels:
  6957                           	opt stack 27
  6958                           
  6959                           ;logic.c: 32: TMR1ON = 0;
  6960                           
  6961                           ;incstack = 0
  6962  00209E  90CD               	bcf	4045,0,c	;volatile
  6963                           
  6964                           ;logic.c: 33: int i = 1;
  6965  0020A0  0E00               	movlw	0
  6966  0020A2  6E27               	movwf	calibrateWheels@i+1,c
  6967  0020A4  0E01               	movlw	1
  6968  0020A6  6E26               	movwf	calibrateWheels@i,c
  6969  0020A8                     l4028:
  6970                           
  6971                           ;logic.c: 36: if (i < 20){updateS1(1);}
  6972  0020A8  BE27               	btfsc	calibrateWheels@i+1,7,c
  6973  0020AA  D006               	goto	l4030
  6974  0020AC  5027               	movf	calibrateWheels@i+1,w,c
  6975  0020AE  E10B               	bnz	l4032
  6976  0020B0  0E14               	movlw	20
  6977  0020B2  5C26               	subwf	calibrateWheels@i,w,c
  6978  0020B4  B0D8               	btfsc	status,0,c
  6979  0020B6  D007               	goto	l4032
  6980  0020B8                     l4030:
  6981  0020B8  0E00               	movlw	0
  6982  0020BA  6E22               	movwf	updateS1@mode+1,c
  6983  0020BC  0E01               	movlw	1
  6984  0020BE  6E21               	movwf	updateS1@mode,c
  6985  0020C0  EC86  F00A         	call	_updateS1	;wreg free
  6986  0020C4  D031               	goto	l4046
  6987  0020C6                     l4032:
  6988                           
  6989                           ;logic.c: 37: else if(i<(20+40)){updateS1(2);}
  6990  0020C6  BE27               	btfsc	calibrateWheels@i+1,7,c
  6991  0020C8  D006               	goto	l4034
  6992  0020CA  5027               	movf	calibrateWheels@i+1,w,c
  6993  0020CC  E10B               	bnz	l4036
  6994  0020CE  0E3C               	movlw	60
  6995  0020D0  5C26               	subwf	calibrateWheels@i,w,c
  6996  0020D2  B0D8               	btfsc	status,0,c
  6997  0020D4  D007               	goto	l4036
  6998  0020D6                     l4034:
  6999  0020D6  0E00               	movlw	0
  7000  0020D8  6E22               	movwf	updateS1@mode+1,c
  7001  0020DA  0E02               	movlw	2
  7002  0020DC  6E21               	movwf	updateS1@mode,c
  7003  0020DE  EC86  F00A         	call	_updateS1	;wreg free
  7004  0020E2  D022               	goto	l4046
  7005  0020E4                     l4036:
  7006                           
  7007                           ;logic.c: 38: else if(i<(20+40+80)){updateS1(1);}
  7008  0020E4  BE27               	btfsc	calibrateWheels@i+1,7,c
  7009  0020E6  D006               	goto	l4038
  7010  0020E8  5027               	movf	calibrateWheels@i+1,w,c
  7011  0020EA  E10B               	bnz	l4040
  7012  0020EC  0E8C               	movlw	140
  7013  0020EE  5C26               	subwf	calibrateWheels@i,w,c
  7014  0020F0  B0D8               	btfsc	status,0,c
  7015  0020F2  D007               	goto	l4040
  7016  0020F4                     l4038:
  7017  0020F4  0E00               	movlw	0
  7018  0020F6  6E22               	movwf	updateS1@mode+1,c
  7019  0020F8  0E01               	movlw	1
  7020  0020FA  6E21               	movwf	updateS1@mode,c
  7021  0020FC  EC86  F00A         	call	_updateS1	;wreg free
  7022  002100  D013               	goto	l4046
  7023  002102                     l4040:
  7024                           
  7025                           ;logic.c: 39: else if(i<(20+40+80+100)){updateS1(2);}
  7026  002102  BE27               	btfsc	calibrateWheels@i+1,7,c
  7027  002104  D006               	goto	l4042
  7028  002106  5027               	movf	calibrateWheels@i+1,w,c
  7029  002108  E10B               	bnz	l4044
  7030  00210A  0EF0               	movlw	240
  7031  00210C  5C26               	subwf	calibrateWheels@i,w,c
  7032  00210E  B0D8               	btfsc	status,0,c
  7033  002110  D007               	goto	l4044
  7034  002112                     l4042:
  7035  002112  0E00               	movlw	0
  7036  002114  6E22               	movwf	updateS1@mode+1,c
  7037  002116  0E02               	movlw	2
  7038  002118  6E21               	movwf	updateS1@mode,c
  7039  00211A  EC86  F00A         	call	_updateS1	;wreg free
  7040  00211E  D004               	goto	l4046
  7041  002120                     l4044:
  7042                           
  7043                           ;logic.c: 40: else{i=1;}
  7044  002120  0E00               	movlw	0
  7045  002122  6E27               	movwf	calibrateWheels@i+1,c
  7046  002124  0E01               	movlw	1
  7047  002126  6E26               	movwf	calibrateWheels@i,c
  7048  002128                     l4046:
  7049                           
  7050                           ;logic.c: 42: i++;
  7051  002128  4A26               	infsnz	calibrateWheels@i,f,c
  7052  00212A  2A27               	incf	calibrateWheels@i+1,f,c
  7053                           
  7054                           ;logic.c: 43: if (i==1){prev = 0;}
  7055  00212C  0426               	decf	calibrateWheels@i,w,c
  7056  00212E  1027               	iorwf	calibrateWheels@i+1,w,c
  7057  002130  A4D8               	btfss	status,2,c
  7058  002132  D005               	goto	l775
  7059  002134  0E00               	movlw	0
  7060  002136  6E25               	movwf	calibrateWheels@prev+1,c
  7061  002138  0E00               	movlw	0
  7062  00213A  6E24               	movwf	calibrateWheels@prev,c
  7063  00213C  D004               	goto	l4052
  7064  00213E                     l775:
  7065                           
  7066                           ;logic.c: 44: else{prev = ADRES;}
  7067  00213E  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7068  002142  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7069  002146                     l4052:
  7070                           
  7071                           ;logic.c: 45: readADC(1);
  7072  002146  0E01               	movlw	1
  7073  002148  EC72  F015         	call	_readADC
  7074                           
  7075                           ;logic.c: 46: }while(ADRES>prev || ADRES<0x3aa);
  7076  00214C  50C3               	movf	4035,w,c	;volatile
  7077  00214E  5C24               	subwf	calibrateWheels@prev,w,c
  7078  002150  50C4               	movf	4036,w,c	;volatile
  7079  002152  5825               	subwfb	calibrateWheels@prev+1,w,c
  7080  002154  A0D8               	btfss	status,0,c
  7081  002156  D7A8               	goto	l4028
  7082  002158  0EAA               	movlw	170
  7083  00215A  5CC3               	subwf	4035,w,c	;volatile
  7084  00215C  0E03               	movlw	3
  7085  00215E  58C4               	subwfb	4036,w,c	;volatile
  7086  002160  A0D8               	btfss	status,0,c
  7087  002162  D7A2               	goto	l4028
  7088  002164                     l4058:
  7089                           
  7090                           ;logic.c: 49: if (i < 20){updateS3(1);}
  7091  002164  BE27               	btfsc	calibrateWheels@i+1,7,c
  7092  002166  D006               	goto	l4060
  7093  002168  5027               	movf	calibrateWheels@i+1,w,c
  7094  00216A  E10B               	bnz	l4062
  7095  00216C  0E14               	movlw	20
  7096  00216E  5C26               	subwf	calibrateWheels@i,w,c
  7097  002170  B0D8               	btfsc	status,0,c
  7098  002172  D007               	goto	l4062
  7099  002174                     l4060:
  7100  002174  0E00               	movlw	0
  7101  002176  6E22               	movwf	updateS3@mode+1,c
  7102  002178  0E01               	movlw	1
  7103  00217A  6E21               	movwf	updateS3@mode,c
  7104  00217C  EC5B  F00E         	call	_updateS3	;wreg free
  7105  002180  D031               	goto	l4076
  7106  002182                     l4062:
  7107                           
  7108                           ;logic.c: 50: else if(i<(20+40)){updateS3(2);}
  7109  002182  BE27               	btfsc	calibrateWheels@i+1,7,c
  7110  002184  D006               	goto	l4064
  7111  002186  5027               	movf	calibrateWheels@i+1,w,c
  7112  002188  E10B               	bnz	l4066
  7113  00218A  0E3C               	movlw	60
  7114  00218C  5C26               	subwf	calibrateWheels@i,w,c
  7115  00218E  B0D8               	btfsc	status,0,c
  7116  002190  D007               	goto	l4066
  7117  002192                     l4064:
  7118  002192  0E00               	movlw	0
  7119  002194  6E22               	movwf	updateS3@mode+1,c
  7120  002196  0E02               	movlw	2
  7121  002198  6E21               	movwf	updateS3@mode,c
  7122  00219A  EC5B  F00E         	call	_updateS3	;wreg free
  7123  00219E  D022               	goto	l4076
  7124  0021A0                     l4066:
  7125                           
  7126                           ;logic.c: 51: else if(i<(20+40+80)){updateS3(1);}
  7127  0021A0  BE27               	btfsc	calibrateWheels@i+1,7,c
  7128  0021A2  D006               	goto	l4068
  7129  0021A4  5027               	movf	calibrateWheels@i+1,w,c
  7130  0021A6  E10B               	bnz	l4070
  7131  0021A8  0E8C               	movlw	140
  7132  0021AA  5C26               	subwf	calibrateWheels@i,w,c
  7133  0021AC  B0D8               	btfsc	status,0,c
  7134  0021AE  D007               	goto	l4070
  7135  0021B0                     l4068:
  7136  0021B0  0E00               	movlw	0
  7137  0021B2  6E22               	movwf	updateS3@mode+1,c
  7138  0021B4  0E01               	movlw	1
  7139  0021B6  6E21               	movwf	updateS3@mode,c
  7140  0021B8  EC5B  F00E         	call	_updateS3	;wreg free
  7141  0021BC  D013               	goto	l4076
  7142  0021BE                     l4070:
  7143                           
  7144                           ;logic.c: 52: else if(i<(20+40+80+100)){updateS3(2);}
  7145  0021BE  BE27               	btfsc	calibrateWheels@i+1,7,c
  7146  0021C0  D006               	goto	l4072
  7147  0021C2  5027               	movf	calibrateWheels@i+1,w,c
  7148  0021C4  E10B               	bnz	l4074
  7149  0021C6  0EF0               	movlw	240
  7150  0021C8  5C26               	subwf	calibrateWheels@i,w,c
  7151  0021CA  B0D8               	btfsc	status,0,c
  7152  0021CC  D007               	goto	l4074
  7153  0021CE                     l4072:
  7154  0021CE  0E00               	movlw	0
  7155  0021D0  6E22               	movwf	updateS3@mode+1,c
  7156  0021D2  0E02               	movlw	2
  7157  0021D4  6E21               	movwf	updateS3@mode,c
  7158  0021D6  EC5B  F00E         	call	_updateS3	;wreg free
  7159  0021DA  D004               	goto	l4076
  7160  0021DC                     l4074:
  7161                           
  7162                           ;logic.c: 53: else{i=1;}
  7163  0021DC  0E00               	movlw	0
  7164  0021DE  6E27               	movwf	calibrateWheels@i+1,c
  7165  0021E0  0E01               	movlw	1
  7166  0021E2  6E26               	movwf	calibrateWheels@i,c
  7167  0021E4                     l4076:
  7168                           
  7169                           ;logic.c: 55: i++;
  7170  0021E4  4A26               	infsnz	calibrateWheels@i,f,c
  7171  0021E6  2A27               	incf	calibrateWheels@i+1,f,c
  7172                           
  7173                           ;logic.c: 56: if (i==1){prev = 0;}
  7174  0021E8  0426               	decf	calibrateWheels@i,w,c
  7175  0021EA  1027               	iorwf	calibrateWheels@i+1,w,c
  7176  0021EC  A4D8               	btfss	status,2,c
  7177  0021EE  D005               	goto	l787
  7178  0021F0  0E00               	movlw	0
  7179  0021F2  6E25               	movwf	calibrateWheels@prev+1,c
  7180  0021F4  0E00               	movlw	0
  7181  0021F6  6E24               	movwf	calibrateWheels@prev,c
  7182  0021F8  D004               	goto	l4082
  7183  0021FA                     l787:
  7184                           
  7185                           ;logic.c: 57: else{prev = ADRES;}
  7186  0021FA  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7187  0021FE  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7188  002202                     l4082:
  7189                           
  7190                           ;logic.c: 58: readADC(5);
  7191  002202  0E05               	movlw	5
  7192  002204  EC72  F015         	call	_readADC
  7193                           
  7194                           ;logic.c: 59: }while(ADRES>prev || ADRES<0x3aa);
  7195  002208  50C3               	movf	4035,w,c	;volatile
  7196  00220A  5C24               	subwf	calibrateWheels@prev,w,c
  7197  00220C  50C4               	movf	4036,w,c	;volatile
  7198  00220E  5825               	subwfb	calibrateWheels@prev+1,w,c
  7199  002210  A0D8               	btfss	status,0,c
  7200  002212  D7A8               	goto	l4058
  7201  002214  0EAA               	movlw	170
  7202  002216  5CC3               	subwf	4035,w,c	;volatile
  7203  002218  0E03               	movlw	3
  7204  00221A  58C4               	subwfb	4036,w,c	;volatile
  7205  00221C  A0D8               	btfss	status,0,c
  7206  00221E  D7A2               	goto	l4058
  7207                           
  7208                           ;logic.c: 60: startTMR1();
  7209  002220  ECB2  F015         	call	_startTMR1	;wreg free
  7210  002224  0012               	return		;funcret
  7211  002226                     __end_of_calibrateWheels:
  7212                           	opt stack 0
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           postinc0	equ	0xFEE
  7222                           wreg	equ	0xFE8
  7223                           indf2	equ	0xFDF
  7224                           postinc2	equ	0xFDE
  7225                           postdec2	equ	0xFDD
  7226                           fsr2h	equ	0xFDA
  7227                           fsr2l	equ	0xFD9
  7228                           status	equ	0xFD8
  7229                           
  7230 ;; *************** function _updateS3 *****************
  7231 ;; Defined at:
  7232 ;;		line 188 in file "motors.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  mode            2   32[COMRAM] int 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		wreg, status,2, status,0
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;Total ram usage:        3 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    2
  7253 ;; This function calls:
  7254 ;;		Nothing
  7255 ;; This function is called by:
  7256 ;;		_main
  7257 ;;		_calibrateWheels
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text24
  7262  001CB6                     __ptext24:
  7263                           	opt stack 0
  7264  001CB6                     _updateS3:
  7265                           	opt stack 28
  7266                           
  7267                           ;motors.c: 189: _delay((unsigned long)((5)*(32000000/4000.0)));
  7268                           
  7269                           ;incstack = 0
  7270  001CB6  0E34               	movlw	52
  7271  001CB8  6E23               	movwf	??_updateS3& (0+255),c
  7272  001CBA  0EF2               	movlw	242
  7273  001CBC                     u8197:
  7274  001CBC  2EE8               	decfsz	wreg,f,c
  7275  001CBE  D7FE               	bra	u8197
  7276  001CC0  2E23               	decfsz	??_updateS3& (0+255),f,c
  7277  001CC2  D7FC               	bra	u8197
  7278                           
  7279                           ;motors.c: 191: if(mode == 0){
  7280  001CC4  5021               	movf	updateS3@mode,w,c
  7281  001CC6  1022               	iorwf	updateS3@mode+1,w,c
  7282  001CC8  A4D8               	btfss	status,2,c
  7283  001CCA  D005               	goto	l3592
  7284                           
  7285                           ;motors.c: 192: LATEbits.LATE2 = 0;
  7286  001CCC  948D               	bcf	3981,2,c	;volatile
  7287                           
  7288                           ;motors.c: 193: LATEbits.LATE1 = 0;
  7289  001CCE  928D               	bcf	3981,1,c	;volatile
  7290                           
  7291                           ;motors.c: 194: LATAbits.LATA4 = 0;
  7292  001CD0  9889               	bcf	3977,4,c	;volatile
  7293                           
  7294                           ;motors.c: 195: LATDbits.LATD0 = 0;
  7295  001CD2  908C               	bcf	3980,0,c	;volatile
  7296                           
  7297                           ;motors.c: 196: }
  7298  001CD4  0012               	return	
  7299  001CD6                     l3592:
  7300                           
  7301                           ;motors.c: 197: else if(mode == 4){
  7302  001CD6  0E04               	movlw	4
  7303  001CD8  1821               	xorwf	updateS3@mode,w,c
  7304  001CDA  1022               	iorwf	updateS3@mode+1,w,c
  7305  001CDC  B4D8               	btfsc	status,2,c
  7306  001CDE  0012               	return	
  7307                           
  7308                           ;motors.c: 200: else if(mode == 3){
  7309                           
  7310                           ;motors.c: 199: }
  7311  001CE0  0E03               	movlw	3
  7312  001CE2  1821               	xorwf	updateS3@mode,w,c
  7313  001CE4  1022               	iorwf	updateS3@mode+1,w,c
  7314  001CE6  A4D8               	btfss	status,2,c
  7315  001CE8  D042               	goto	l3620
  7316                           
  7317                           ;motors.c: 201: t3++;
  7318  001CEA  4A43               	infsnz	_t3,f,c
  7319  001CEC  2A44               	incf	_t3+1,f,c
  7320                           
  7321                           ;motors.c: 202: if (t3>8) {t3=1;}
  7322  001CEE  BE44               	btfsc	_t3+1,7,c
  7323  001CF0  D00A               	goto	l3604
  7324  001CF2  5044               	movf	_t3+1,w,c
  7325  001CF4  E104               	bnz	u3910
  7326  001CF6  0E09               	movlw	9
  7327  001CF8  5C43               	subwf	_t3,w,c
  7328  001CFA  A0D8               	btfss	status,0,c
  7329  001CFC  D004               	goto	l3604
  7330  001CFE                     u3910:
  7331  001CFE  0E00               	movlw	0
  7332  001D00  6E44               	movwf	_t3+1,c
  7333  001D02  0E01               	movlw	1
  7334  001D04  6E43               	movwf	_t3,c
  7335  001D06                     l3604:
  7336                           
  7337                           ;motors.c: 203: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  7338  001D06  0443               	decf	_t3,w,c
  7339  001D08  1044               	iorwf	_t3+1,w,c
  7340  001D0A  B4D8               	btfsc	status,2,c
  7341  001D0C  D005               	goto	l599
  7342  001D0E  0E08               	movlw	8
  7343  001D10  1843               	xorwf	_t3,w,c
  7344  001D12  1044               	iorwf	_t3+1,w,c
  7345  001D14  A4D8               	btfss	status,2,c
  7346  001D16  D002               	goto	l597
  7347  001D18                     l599:
  7348  001D18  848D               	bsf	3981,2,c	;volatile
  7349  001D1A  D001               	goto	l3608
  7350  001D1C                     l597:
  7351                           
  7352                           ;motors.c: 204: else{LATEbits.LATE2 = 0;}
  7353  001D1C  948D               	bcf	3981,2,c	;volatile
  7354  001D1E                     l3608:
  7355                           
  7356                           ;motors.c: 205: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  7357  001D1E  0E02               	movlw	2
  7358  001D20  1843               	xorwf	_t3,w,c
  7359  001D22  1044               	iorwf	_t3+1,w,c
  7360  001D24  B4D8               	btfsc	status,2,c
  7361  001D26  D005               	goto	l603
  7362  001D28  0E07               	movlw	7
  7363  001D2A  1843               	xorwf	_t3,w,c
  7364  001D2C  1044               	iorwf	_t3+1,w,c
  7365  001D2E  A4D8               	btfss	status,2,c
  7366  001D30  D002               	goto	l601
  7367  001D32                     l603:
  7368  001D32  828D               	bsf	3981,1,c	;volatile
  7369  001D34  D001               	goto	l3612
  7370  001D36                     l601:
  7371                           
  7372                           ;motors.c: 206: else{LATEbits.LATE1 = 0;}
  7373  001D36  928D               	bcf	3981,1,c	;volatile
  7374  001D38                     l3612:
  7375                           
  7376                           ;motors.c: 207: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  7377  001D38  0E03               	movlw	3
  7378  001D3A  1843               	xorwf	_t3,w,c
  7379  001D3C  1044               	iorwf	_t3+1,w,c
  7380  001D3E  B4D8               	btfsc	status,2,c
  7381  001D40  D005               	goto	l607
  7382  001D42  0E06               	movlw	6
  7383  001D44  1843               	xorwf	_t3,w,c
  7384  001D46  1044               	iorwf	_t3+1,w,c
  7385  001D48  A4D8               	btfss	status,2,c
  7386  001D4A  D002               	goto	l605
  7387  001D4C                     l607:
  7388  001D4C  8889               	bsf	3977,4,c	;volatile
  7389  001D4E  D001               	goto	l3616
  7390  001D50                     l605:
  7391                           
  7392                           ;motors.c: 208: else{LATAbits.LATA4 = 0;}
  7393  001D50  9889               	bcf	3977,4,c	;volatile
  7394  001D52                     l3616:
  7395                           
  7396                           ;motors.c: 209: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  7397  001D52  0E04               	movlw	4
  7398  001D54  1843               	xorwf	_t3,w,c
  7399  001D56  1044               	iorwf	_t3+1,w,c
  7400  001D58  B4D8               	btfsc	status,2,c
  7401  001D5A  D005               	goto	l611
  7402  001D5C  0E05               	movlw	5
  7403  001D5E  1843               	xorwf	_t3,w,c
  7404  001D60  1044               	iorwf	_t3+1,w,c
  7405  001D62  A4D8               	btfss	status,2,c
  7406  001D64  D002               	goto	l609
  7407  001D66                     l611:
  7408  001D66  808C               	bsf	3980,0,c	;volatile
  7409  001D68  0012               	return	
  7410  001D6A                     l609:
  7411                           
  7412                           ;motors.c: 210: else{LATDbits.LATD0 = 0;}
  7413  001D6A  908C               	bcf	3980,0,c	;volatile
  7414                           
  7415                           ;motors.c: 211: }
  7416  001D6C  0012               	return	
  7417  001D6E                     l3620:
  7418                           
  7419                           ;motors.c: 212: else if(mode == 5){
  7420  001D6E  0E05               	movlw	5
  7421  001D70  1821               	xorwf	updateS3@mode,w,c
  7422  001D72  1022               	iorwf	updateS3@mode+1,w,c
  7423  001D74  A4D8               	btfss	status,2,c
  7424  001D76  D042               	goto	l3644
  7425                           
  7426                           ;motors.c: 213: t3++;
  7427  001D78  4A43               	infsnz	_t3,f,c
  7428  001D7A  2A44               	incf	_t3+1,f,c
  7429                           
  7430                           ;motors.c: 214: if (t3>8) {t3=1;}
  7431  001D7C  BE44               	btfsc	_t3+1,7,c
  7432  001D7E  D00A               	goto	l3628
  7433  001D80  5044               	movf	_t3+1,w,c
  7434  001D82  E104               	bnz	u4010
  7435  001D84  0E09               	movlw	9
  7436  001D86  5C43               	subwf	_t3,w,c
  7437  001D88  A0D8               	btfss	status,0,c
  7438  001D8A  D004               	goto	l3628
  7439  001D8C                     u4010:
  7440  001D8C  0E00               	movlw	0
  7441  001D8E  6E44               	movwf	_t3+1,c
  7442  001D90  0E01               	movlw	1
  7443  001D92  6E43               	movwf	_t3,c
  7444  001D94                     l3628:
  7445                           
  7446                           ;motors.c: 215: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
  7447  001D94  0443               	decf	_t3,w,c
  7448  001D96  1044               	iorwf	_t3+1,w,c
  7449  001D98  B4D8               	btfsc	status,2,c
  7450  001D9A  D005               	goto	l618
  7451  001D9C  0E08               	movlw	8
  7452  001D9E  1843               	xorwf	_t3,w,c
  7453  001DA0  1044               	iorwf	_t3+1,w,c
  7454  001DA2  A4D8               	btfss	status,2,c
  7455  001DA4  D002               	goto	l616
  7456  001DA6                     l618:
  7457  001DA6  8889               	bsf	3977,4,c	;volatile
  7458  001DA8  D001               	goto	l3632
  7459  001DAA                     l616:
  7460                           
  7461                           ;motors.c: 216: else{LATAbits.LATA4 = 0;}
  7462  001DAA  9889               	bcf	3977,4,c	;volatile
  7463  001DAC                     l3632:
  7464                           
  7465                           ;motors.c: 217: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
  7466  001DAC  0E02               	movlw	2
  7467  001DAE  1843               	xorwf	_t3,w,c
  7468  001DB0  1044               	iorwf	_t3+1,w,c
  7469  001DB2  B4D8               	btfsc	status,2,c
  7470  001DB4  D005               	goto	l622
  7471  001DB6  0E07               	movlw	7
  7472  001DB8  1843               	xorwf	_t3,w,c
  7473  001DBA  1044               	iorwf	_t3+1,w,c
  7474  001DBC  A4D8               	btfss	status,2,c
  7475  001DBE  D002               	goto	l620
  7476  001DC0                     l622:
  7477  001DC0  808C               	bsf	3980,0,c	;volatile
  7478  001DC2  D001               	goto	l3636
  7479  001DC4                     l620:
  7480                           
  7481                           ;motors.c: 218: else{LATDbits.LATD0 = 0;}
  7482  001DC4  908C               	bcf	3980,0,c	;volatile
  7483  001DC6                     l3636:
  7484                           
  7485                           ;motors.c: 219: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
  7486  001DC6  0E03               	movlw	3
  7487  001DC8  1843               	xorwf	_t3,w,c
  7488  001DCA  1044               	iorwf	_t3+1,w,c
  7489  001DCC  B4D8               	btfsc	status,2,c
  7490  001DCE  D005               	goto	l626
  7491  001DD0  0E06               	movlw	6
  7492  001DD2  1843               	xorwf	_t3,w,c
  7493  001DD4  1044               	iorwf	_t3+1,w,c
  7494  001DD6  A4D8               	btfss	status,2,c
  7495  001DD8  D002               	goto	l624
  7496  001DDA                     l626:
  7497  001DDA  848D               	bsf	3981,2,c	;volatile
  7498  001DDC  D001               	goto	l3640
  7499  001DDE                     l624:
  7500                           
  7501                           ;motors.c: 220: else{LATEbits.LATE2 = 0;}
  7502  001DDE  948D               	bcf	3981,2,c	;volatile
  7503  001DE0                     l3640:
  7504                           
  7505                           ;motors.c: 221: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
  7506  001DE0  0E04               	movlw	4
  7507  001DE2  1843               	xorwf	_t3,w,c
  7508  001DE4  1044               	iorwf	_t3+1,w,c
  7509  001DE6  B4D8               	btfsc	status,2,c
  7510  001DE8  D005               	goto	l630
  7511  001DEA  0E05               	movlw	5
  7512  001DEC  1843               	xorwf	_t3,w,c
  7513  001DEE  1044               	iorwf	_t3+1,w,c
  7514  001DF0  A4D8               	btfss	status,2,c
  7515  001DF2  D002               	goto	l628
  7516  001DF4                     l630:
  7517  001DF4  828D               	bsf	3981,1,c	;volatile
  7518  001DF6  0012               	return	
  7519  001DF8                     l628:
  7520                           
  7521                           ;motors.c: 222: else{LATEbits.LATE1 = 0;}
  7522  001DF8  928D               	bcf	3981,1,c	;volatile
  7523                           
  7524                           ;motors.c: 223: }
  7525  001DFA  0012               	return	
  7526  001DFC                     l3644:
  7527                           
  7528                           ;motors.c: 224: else{
  7529                           ;motors.c: 225: if(mode == 1){
  7530  001DFC  0421               	decf	updateS3@mode,w,c
  7531  001DFE  1022               	iorwf	updateS3@mode+1,w,c
  7532  001E00  A4D8               	btfss	status,2,c
  7533  001E02  D013               	goto	l3652
  7534                           
  7535                           ;motors.c: 226: s3 ++;
  7536  001E04  0100               	movlb	0	; () banked
  7537  001E06  4BB6               	infsnz	_s3& (0+255),f,b
  7538  001E08  2BB7               	incf	(_s3+1)& (0+255),f,b
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;motors.c: 227: if (s3>4) {s3=1;}
  7542  001E0A  0100               	movlb	0	; () banked
  7543  001E0C  BFB7               	btfsc	(_s3+1)& (0+255),7,b
  7544  001E0E  D025               	goto	l3660
  7545  001E10  0100               	movlb	0	; () banked
  7546  001E12  51B7               	movf	(_s3+1)& (0+255),w,b
  7547  001E14  E105               	bnz	u4110
  7548  001E16  0E05               	movlw	5
  7549  001E18  0100               	movlb	0	; () banked
  7550  001E1A  5DB6               	subwf	_s3& (0+255),w,b
  7551  001E1C  A0D8               	btfss	status,0,c
  7552  001E1E  D01D               	goto	l3660
  7553  001E20                     u4110:
  7554                           
  7555                           ; BSR set to: 0
  7556  001E20  0E00               	movlw	0
  7557  001E22  0100               	movlb	0	; () banked
  7558  001E24  6FB7               	movwf	(_s3+1)& (0+255),b
  7559  001E26  0E01               	movlw	1
  7560  001E28  D017               	goto	L14
  7561  001E2A                     l3652:
  7562                           
  7563                           ;motors.c: 229: else if(mode == 2){
  7564  001E2A  0E02               	movlw	2
  7565  001E2C  1821               	xorwf	updateS3@mode,w,c
  7566  001E2E  1022               	iorwf	updateS3@mode+1,w,c
  7567  001E30  A4D8               	btfss	status,2,c
  7568  001E32  D013               	goto	l3660
  7569                           
  7570                           ;motors.c: 230: s3 --;
  7571  001E34  0100               	movlb	0	; () banked
  7572  001E36  07B6               	decf	_s3& (0+255),f,b
  7573  001E38  A0D8               	btfss	status,0,c
  7574  001E3A  07B7               	decf	(_s3+1)& (0+255),f,b
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;motors.c: 231: if (s3<1) {s3=4;}
  7578  001E3C  0100               	movlb	0	; () banked
  7579  001E3E  BFB7               	btfsc	(_s3+1)& (0+255),7,b
  7580  001E40  D007               	goto	l3658
  7581  001E42  0100               	movlb	0	; () banked
  7582  001E44  51B7               	movf	(_s3+1)& (0+255),w,b
  7583  001E46  E109               	bnz	l3660
  7584  001E48  0100               	movlb	0	; () banked
  7585  001E4A  05B6               	decf	_s3& (0+255),w,b
  7586  001E4C  B0D8               	btfsc	status,0,c
  7587  001E4E  D005               	goto	l3660
  7588  001E50                     l3658:
  7589                           
  7590                           ; BSR set to: 0
  7591  001E50  0E00               	movlw	0
  7592  001E52  0100               	movlb	0	; () banked
  7593  001E54  6FB7               	movwf	(_s3+1)& (0+255),b
  7594  001E56  0E04               	movlw	4
  7595  001E58                     L14:
  7596  001E58  6FB6               	movwf	_s3& (0+255),b
  7597  001E5A                     l3660:
  7598                           
  7599                           ;motors.c: 232: }
  7600                           ;motors.c: 233: if (s3 == 1){LATEbits.LATE2 = 1;}
  7601  001E5A  0100               	movlb	0	; () banked
  7602  001E5C  05B6               	decf	_s3& (0+255),w,b
  7603  001E5E  0100               	movlb	0	; () banked
  7604  001E60  11B7               	iorwf	(_s3+1)& (0+255),w,b
  7605  001E62  A4D8               	btfss	status,2,c
  7606  001E64  D002               	goto	l638
  7607                           
  7608                           ; BSR set to: 0
  7609  001E66  848D               	bsf	3981,2,c	;volatile
  7610  001E68  D001               	goto	l3664
  7611  001E6A                     l638:
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;motors.c: 234: else{LATEbits.LATE2 = 0;}
  7615  001E6A  948D               	bcf	3981,2,c	;volatile
  7616  001E6C                     l3664:
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;motors.c: 235: if (s3 == 2){LATEbits.LATE1 = 1;}
  7620  001E6C  0E02               	movlw	2
  7621  001E6E  0100               	movlb	0	; () banked
  7622  001E70  19B6               	xorwf	_s3& (0+255),w,b
  7623  001E72  0100               	movlb	0	; () banked
  7624  001E74  11B7               	iorwf	(_s3+1)& (0+255),w,b
  7625  001E76  A4D8               	btfss	status,2,c
  7626  001E78  D002               	goto	l640
  7627                           
  7628                           ; BSR set to: 0
  7629  001E7A  828D               	bsf	3981,1,c	;volatile
  7630  001E7C  D001               	goto	l3668
  7631  001E7E                     l640:
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;motors.c: 236: else{LATEbits.LATE1 = 0;}
  7635  001E7E  928D               	bcf	3981,1,c	;volatile
  7636  001E80                     l3668:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;motors.c: 237: if (s3 == 3){LATAbits.LATA4 = 1;}
  7640  001E80  0E03               	movlw	3
  7641  001E82  0100               	movlb	0	; () banked
  7642  001E84  19B6               	xorwf	_s3& (0+255),w,b
  7643  001E86  0100               	movlb	0	; () banked
  7644  001E88  11B7               	iorwf	(_s3+1)& (0+255),w,b
  7645  001E8A  A4D8               	btfss	status,2,c
  7646  001E8C  D002               	goto	l642
  7647                           
  7648                           ; BSR set to: 0
  7649  001E8E  8889               	bsf	3977,4,c	;volatile
  7650  001E90  D001               	goto	l3672
  7651  001E92                     l642:
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;motors.c: 238: else{LATAbits.LATA4 = 0;}
  7655  001E92  9889               	bcf	3977,4,c	;volatile
  7656  001E94                     l3672:
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;motors.c: 239: if (s3 == 4){LATDbits.LATD0 = 1;}
  7660  001E94  0E04               	movlw	4
  7661  001E96  0100               	movlb	0	; () banked
  7662  001E98  19B6               	xorwf	_s3& (0+255),w,b
  7663  001E9A  0100               	movlb	0	; () banked
  7664  001E9C  11B7               	iorwf	(_s3+1)& (0+255),w,b
  7665  001E9E  A4D8               	btfss	status,2,c
  7666  001EA0  D002               	goto	l644
  7667                           
  7668                           ; BSR set to: 0
  7669  001EA2  808C               	bsf	3980,0,c	;volatile
  7670  001EA4  0012               	return	
  7671  001EA6                     l644:
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;motors.c: 240: else{LATDbits.LATD0 = 0;}
  7675  001EA6  908C               	bcf	3980,0,c	;volatile
  7676                           
  7677                           ; BSR set to: 0
  7678                           
  7679                           ; BSR set to: 0
  7680                           
  7681                           ; BSR set to: 0
  7682                           
  7683                           ; BSR set to: 0
  7684  001EA8  0012               	return	
  7685  001EAA                     __end_of_updateS3:
  7686                           	opt stack 0
  7687                           tblptru	equ	0xFF8
  7688                           tblptrh	equ	0xFF7
  7689                           tblptrl	equ	0xFF6
  7690                           tablat	equ	0xFF5
  7691                           prodh	equ	0xFF4
  7692                           prodl	equ	0xFF3
  7693                           intcon	equ	0xFF2
  7694                           intcon2	equ	0xFF1
  7695                           postinc0	equ	0xFEE
  7696                           wreg	equ	0xFE8
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function _updateS1 *****************
  7705 ;; Defined at:
  7706 ;;		line 72 in file "motors.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  mode            2   32[COMRAM] int 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;Total ram usage:        3 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    2
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_main
  7731 ;;		_calibrateWheels
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text25
  7736  00150C                     __ptext25:
  7737                           	opt stack 0
  7738  00150C                     _updateS1:
  7739                           	opt stack 28
  7740                           
  7741                           ;motors.c: 73: _delay((unsigned long)((5)*(32000000/4000.0)));
  7742                           
  7743                           ;incstack = 0
  7744  00150C  0E34               	movlw	52
  7745  00150E  6E23               	movwf	??_updateS1& (0+255),c
  7746  001510  0EF2               	movlw	242
  7747  001512                     u8207:
  7748  001512  2EE8               	decfsz	wreg,f,c
  7749  001514  D7FE               	bra	u8207
  7750  001516  2E23               	decfsz	??_updateS1& (0+255),f,c
  7751  001518  D7FC               	bra	u8207
  7752                           
  7753                           ;motors.c: 75: if(mode == 0){
  7754  00151A  5021               	movf	updateS1@mode,w,c
  7755  00151C  1022               	iorwf	updateS1@mode+1,w,c
  7756  00151E  A4D8               	btfss	status,2,c
  7757  001520  D005               	goto	l3468
  7758                           
  7759                           ;motors.c: 76: LATDbits.LATD1 = 0;
  7760  001522  928C               	bcf	3980,1,c	;volatile
  7761                           
  7762                           ;motors.c: 77: LATBbits.LATB3 = 0;
  7763  001524  968A               	bcf	3978,3,c	;volatile
  7764                           
  7765                           ;motors.c: 78: LATBbits.LATB2 = 0;
  7766  001526  948A               	bcf	3978,2,c	;volatile
  7767                           
  7768                           ;motors.c: 79: LATBbits.LATB0 = 0;
  7769  001528  908A               	bcf	3978,0,c	;volatile
  7770                           
  7771                           ;motors.c: 80: }
  7772  00152A  0012               	return	
  7773  00152C                     l3468:
  7774                           
  7775                           ;motors.c: 81: else if(mode == 3){
  7776  00152C  0E03               	movlw	3
  7777  00152E  1821               	xorwf	updateS1@mode,w,c
  7778  001530  1022               	iorwf	updateS1@mode+1,w,c
  7779  001532  A4D8               	btfss	status,2,c
  7780  001534  D049               	goto	l3494
  7781                           
  7782                           ;motors.c: 82: t++;
  7783  001536  4A47               	infsnz	_t,f,c
  7784  001538  2A48               	incf	_t+1,f,c
  7785                           
  7786                           ;motors.c: 83: if (t>8) {t=1;}
  7787  00153A  BE48               	btfsc	_t+1,7,c
  7788  00153C  D00A               	goto	l3476
  7789  00153E  5048               	movf	_t+1,w,c
  7790  001540  E104               	bnz	u3500
  7791  001542  0E09               	movlw	9
  7792  001544  5C47               	subwf	_t,w,c
  7793  001546  A0D8               	btfss	status,0,c
  7794  001548  D004               	goto	l3476
  7795  00154A                     u3500:
  7796  00154A  0E00               	movlw	0
  7797  00154C  6E48               	movwf	_t+1,c
  7798  00154E  0E01               	movlw	1
  7799  001550  6E47               	movwf	_t,c
  7800  001552                     l3476:
  7801                           
  7802                           ;motors.c: 84: _delay((unsigned long)((5)*(32000000/4000.0)));
  7803  001552  0E34               	movlw	52
  7804  001554  6E23               	movwf	??_updateS1& (0+255),c
  7805  001556  0EF2               	movlw	242
  7806  001558                     u8217:
  7807  001558  2EE8               	decfsz	wreg,f,c
  7808  00155A  D7FE               	bra	u8217
  7809  00155C  2E23               	decfsz	??_updateS1& (0+255),f,c
  7810  00155E  D7FC               	bra	u8217
  7811                           
  7812                           ;motors.c: 85: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  7813  001560  0447               	decf	_t,w,c
  7814  001562  1048               	iorwf	_t+1,w,c
  7815  001564  B4D8               	btfsc	status,2,c
  7816  001566  D005               	goto	l486
  7817  001568  0E08               	movlw	8
  7818  00156A  1847               	xorwf	_t,w,c
  7819  00156C  1048               	iorwf	_t+1,w,c
  7820  00156E  A4D8               	btfss	status,2,c
  7821  001570  D002               	goto	l484
  7822  001572                     l486:
  7823  001572  828C               	bsf	3980,1,c	;volatile
  7824  001574  D001               	goto	l3482
  7825  001576                     l484:
  7826                           
  7827                           ;motors.c: 86: else{LATDbits.LATD1 = 0;}
  7828  001576  928C               	bcf	3980,1,c	;volatile
  7829  001578                     l3482:
  7830                           
  7831                           ;motors.c: 87: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  7832  001578  0E02               	movlw	2
  7833  00157A  1847               	xorwf	_t,w,c
  7834  00157C  1048               	iorwf	_t+1,w,c
  7835  00157E  B4D8               	btfsc	status,2,c
  7836  001580  D005               	goto	l490
  7837  001582  0E07               	movlw	7
  7838  001584  1847               	xorwf	_t,w,c
  7839  001586  1048               	iorwf	_t+1,w,c
  7840  001588  A4D8               	btfss	status,2,c
  7841  00158A  D002               	goto	l488
  7842  00158C                     l490:
  7843  00158C  868A               	bsf	3978,3,c	;volatile
  7844  00158E  D001               	goto	l3486
  7845  001590                     l488:
  7846                           
  7847                           ;motors.c: 88: else{LATBbits.LATB3 = 0;}
  7848  001590  968A               	bcf	3978,3,c	;volatile
  7849  001592                     l3486:
  7850                           
  7851                           ;motors.c: 89: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  7852  001592  0E03               	movlw	3
  7853  001594  1847               	xorwf	_t,w,c
  7854  001596  1048               	iorwf	_t+1,w,c
  7855  001598  B4D8               	btfsc	status,2,c
  7856  00159A  D005               	goto	l494
  7857  00159C  0E06               	movlw	6
  7858  00159E  1847               	xorwf	_t,w,c
  7859  0015A0  1048               	iorwf	_t+1,w,c
  7860  0015A2  A4D8               	btfss	status,2,c
  7861  0015A4  D002               	goto	l492
  7862  0015A6                     l494:
  7863  0015A6  848A               	bsf	3978,2,c	;volatile
  7864  0015A8  D001               	goto	l3490
  7865  0015AA                     l492:
  7866                           
  7867                           ;motors.c: 90: else{LATBbits.LATB2 = 0;}
  7868  0015AA  948A               	bcf	3978,2,c	;volatile
  7869  0015AC                     l3490:
  7870                           
  7871                           ;motors.c: 91: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  7872  0015AC  0E04               	movlw	4
  7873  0015AE  1847               	xorwf	_t,w,c
  7874  0015B0  1048               	iorwf	_t+1,w,c
  7875  0015B2  B4D8               	btfsc	status,2,c
  7876  0015B4  D005               	goto	l498
  7877  0015B6  0E05               	movlw	5
  7878  0015B8  1847               	xorwf	_t,w,c
  7879  0015BA  1048               	iorwf	_t+1,w,c
  7880  0015BC  A4D8               	btfss	status,2,c
  7881  0015BE  D002               	goto	l496
  7882  0015C0                     l498:
  7883  0015C0  808A               	bsf	3978,0,c	;volatile
  7884  0015C2  0012               	return	
  7885  0015C4                     l496:
  7886                           
  7887                           ;motors.c: 92: else{LATBbits.LATB0 = 0;}
  7888  0015C4  908A               	bcf	3978,0,c	;volatile
  7889                           
  7890                           ;motors.c: 93: }
  7891  0015C6  0012               	return	
  7892  0015C8                     l3494:
  7893                           
  7894                           ;motors.c: 94: else if(mode == 5){
  7895  0015C8  0E05               	movlw	5
  7896  0015CA  1821               	xorwf	updateS1@mode,w,c
  7897  0015CC  1022               	iorwf	updateS1@mode+1,w,c
  7898  0015CE  A4D8               	btfss	status,2,c
  7899  0015D0  D049               	goto	l3520
  7900                           
  7901                           ;motors.c: 95: t++;
  7902  0015D2  4A47               	infsnz	_t,f,c
  7903  0015D4  2A48               	incf	_t+1,f,c
  7904                           
  7905                           ;motors.c: 96: if (t>8) {t=1;}
  7906  0015D6  BE48               	btfsc	_t+1,7,c
  7907  0015D8  D00A               	goto	l3502
  7908  0015DA  5048               	movf	_t+1,w,c
  7909  0015DC  E104               	bnz	u3600
  7910  0015DE  0E09               	movlw	9
  7911  0015E0  5C47               	subwf	_t,w,c
  7912  0015E2  A0D8               	btfss	status,0,c
  7913  0015E4  D004               	goto	l3502
  7914  0015E6                     u3600:
  7915  0015E6  0E00               	movlw	0
  7916  0015E8  6E48               	movwf	_t+1,c
  7917  0015EA  0E01               	movlw	1
  7918  0015EC  6E47               	movwf	_t,c
  7919  0015EE                     l3502:
  7920                           
  7921                           ;motors.c: 97: _delay((unsigned long)((5)*(32000000/4000.0)));
  7922  0015EE  0E34               	movlw	52
  7923  0015F0  6E23               	movwf	??_updateS1& (0+255),c
  7924  0015F2  0EF2               	movlw	242
  7925  0015F4                     u8227:
  7926  0015F4  2EE8               	decfsz	wreg,f,c
  7927  0015F6  D7FE               	bra	u8227
  7928  0015F8  2E23               	decfsz	??_updateS1& (0+255),f,c
  7929  0015FA  D7FC               	bra	u8227
  7930                           
  7931                           ;motors.c: 98: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
  7932  0015FC  0447               	decf	_t,w,c
  7933  0015FE  1048               	iorwf	_t+1,w,c
  7934  001600  B4D8               	btfsc	status,2,c
  7935  001602  D005               	goto	l505
  7936  001604  0E08               	movlw	8
  7937  001606  1847               	xorwf	_t,w,c
  7938  001608  1048               	iorwf	_t+1,w,c
  7939  00160A  A4D8               	btfss	status,2,c
  7940  00160C  D002               	goto	l503
  7941  00160E                     l505:
  7942  00160E  848A               	bsf	3978,2,c	;volatile
  7943  001610  D001               	goto	l3508
  7944  001612                     l503:
  7945                           
  7946                           ;motors.c: 99: else{LATBbits.LATB2 = 0;}
  7947  001612  948A               	bcf	3978,2,c	;volatile
  7948  001614                     l3508:
  7949                           
  7950                           ;motors.c: 100: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
  7951  001614  0E02               	movlw	2
  7952  001616  1847               	xorwf	_t,w,c
  7953  001618  1048               	iorwf	_t+1,w,c
  7954  00161A  B4D8               	btfsc	status,2,c
  7955  00161C  D005               	goto	l509
  7956  00161E  0E07               	movlw	7
  7957  001620  1847               	xorwf	_t,w,c
  7958  001622  1048               	iorwf	_t+1,w,c
  7959  001624  A4D8               	btfss	status,2,c
  7960  001626  D002               	goto	l507
  7961  001628                     l509:
  7962  001628  808A               	bsf	3978,0,c	;volatile
  7963  00162A  D001               	goto	l3512
  7964  00162C                     l507:
  7965                           
  7966                           ;motors.c: 101: else{LATBbits.LATB0 = 0;}
  7967  00162C  908A               	bcf	3978,0,c	;volatile
  7968  00162E                     l3512:
  7969                           
  7970                           ;motors.c: 102: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
  7971  00162E  0E03               	movlw	3
  7972  001630  1847               	xorwf	_t,w,c
  7973  001632  1048               	iorwf	_t+1,w,c
  7974  001634  B4D8               	btfsc	status,2,c
  7975  001636  D005               	goto	l513
  7976  001638  0E06               	movlw	6
  7977  00163A  1847               	xorwf	_t,w,c
  7978  00163C  1048               	iorwf	_t+1,w,c
  7979  00163E  A4D8               	btfss	status,2,c
  7980  001640  D002               	goto	l511
  7981  001642                     l513:
  7982  001642  828C               	bsf	3980,1,c	;volatile
  7983  001644  D001               	goto	l3516
  7984  001646                     l511:
  7985                           
  7986                           ;motors.c: 103: else{LATDbits.LATD1 = 0;}
  7987  001646  928C               	bcf	3980,1,c	;volatile
  7988  001648                     l3516:
  7989                           
  7990                           ;motors.c: 104: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
  7991  001648  0E04               	movlw	4
  7992  00164A  1847               	xorwf	_t,w,c
  7993  00164C  1048               	iorwf	_t+1,w,c
  7994  00164E  B4D8               	btfsc	status,2,c
  7995  001650  D005               	goto	l517
  7996  001652  0E05               	movlw	5
  7997  001654  1847               	xorwf	_t,w,c
  7998  001656  1048               	iorwf	_t+1,w,c
  7999  001658  A4D8               	btfss	status,2,c
  8000  00165A  D002               	goto	l515
  8001  00165C                     l517:
  8002  00165C  868A               	bsf	3978,3,c	;volatile
  8003  00165E  0012               	return	
  8004  001660                     l515:
  8005                           
  8006                           ;motors.c: 105: else{LATBbits.LATB3 = 0;}
  8007  001660  968A               	bcf	3978,3,c	;volatile
  8008                           
  8009                           ;motors.c: 106: }
  8010  001662  0012               	return	
  8011  001664                     l3520:
  8012                           
  8013                           ;motors.c: 107: else if(mode == 4){
  8014  001664  0E04               	movlw	4
  8015  001666  1821               	xorwf	updateS1@mode,w,c
  8016  001668  1022               	iorwf	updateS1@mode+1,w,c
  8017  00166A  B4D8               	btfsc	status,2,c
  8018  00166C  0012               	return	
  8019                           
  8020                           ;motors.c: 110: else{
  8021                           ;motors.c: 111: _delay((unsigned long)((10)*(32000000/4000.0)));
  8022                           
  8023                           ;motors.c: 109: }
  8024  00166E  0E68               	movlw	104
  8025  001670  6E23               	movwf	??_updateS1& (0+255),c
  8026  001672  0EE4               	movlw	228
  8027  001674                     u8237:
  8028  001674  2EE8               	decfsz	wreg,f,c
  8029  001676  D7FE               	bra	u8237
  8030  001678  2E23               	decfsz	??_updateS1& (0+255),f,c
  8031  00167A  D7FC               	bra	u8237
  8032  00167C  D000               	nop2	
  8033                           
  8034                           ;motors.c: 113: if(mode == 1 || mode == 5){
  8035  00167E  0421               	decf	updateS1@mode,w,c
  8036  001680  1022               	iorwf	updateS1@mode+1,w,c
  8037  001682  B4D8               	btfsc	status,2,c
  8038  001684  D005               	goto	l3530
  8039  001686  0E05               	movlw	5
  8040  001688  1821               	xorwf	updateS1@mode,w,c
  8041  00168A  1022               	iorwf	updateS1@mode+1,w,c
  8042  00168C  A4D8               	btfss	status,2,c
  8043  00168E  D013               	goto	l3536
  8044  001690                     l3530:
  8045                           
  8046                           ;motors.c: 114: s1 ++;
  8047  001690  0100               	movlb	0	; () banked
  8048  001692  4BB8               	infsnz	_s1& (0+255),f,b
  8049  001694  2BB9               	incf	(_s1+1)& (0+255),f,b
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;motors.c: 115: if (s1>4) {s1=1;}
  8053  001696  0100               	movlb	0	; () banked
  8054  001698  BFB9               	btfsc	(_s1+1)& (0+255),7,b
  8055  00169A  D02A               	goto	l3546
  8056  00169C  0100               	movlb	0	; () banked
  8057  00169E  51B9               	movf	(_s1+1)& (0+255),w,b
  8058  0016A0  E105               	bnz	u3720
  8059  0016A2  0E05               	movlw	5
  8060  0016A4  0100               	movlb	0	; () banked
  8061  0016A6  5DB8               	subwf	_s1& (0+255),w,b
  8062  0016A8  A0D8               	btfss	status,0,c
  8063  0016AA  D022               	goto	l3546
  8064  0016AC                     u3720:
  8065                           
  8066                           ; BSR set to: 0
  8067  0016AC  0E00               	movlw	0
  8068  0016AE  0100               	movlb	0	; () banked
  8069  0016B0  6FB9               	movwf	(_s1+1)& (0+255),b
  8070  0016B2  0E01               	movlw	1
  8071  0016B4  D01C               	goto	L15
  8072  0016B6                     l3536:
  8073                           
  8074                           ;motors.c: 118: else if(mode == 2 || mode==6){
  8075  0016B6  0E02               	movlw	2
  8076  0016B8  1821               	xorwf	updateS1@mode,w,c
  8077  0016BA  1022               	iorwf	updateS1@mode+1,w,c
  8078  0016BC  B4D8               	btfsc	status,2,c
  8079  0016BE  D005               	goto	l3540
  8080  0016C0  0E06               	movlw	6
  8081  0016C2  1821               	xorwf	updateS1@mode,w,c
  8082  0016C4  1022               	iorwf	updateS1@mode+1,w,c
  8083  0016C6  A4D8               	btfss	status,2,c
  8084  0016C8  D013               	goto	l3546
  8085  0016CA                     l3540:
  8086                           
  8087                           ;motors.c: 119: s1 --;
  8088  0016CA  0100               	movlb	0	; () banked
  8089  0016CC  07B8               	decf	_s1& (0+255),f,b
  8090  0016CE  A0D8               	btfss	status,0,c
  8091  0016D0  07B9               	decf	(_s1+1)& (0+255),f,b
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;motors.c: 120: if (s1<1) {s1=4;}
  8095  0016D2  0100               	movlb	0	; () banked
  8096  0016D4  BFB9               	btfsc	(_s1+1)& (0+255),7,b
  8097  0016D6  D007               	goto	l3544
  8098  0016D8  0100               	movlb	0	; () banked
  8099  0016DA  51B9               	movf	(_s1+1)& (0+255),w,b
  8100  0016DC  E109               	bnz	l3546
  8101  0016DE  0100               	movlb	0	; () banked
  8102  0016E0  05B8               	decf	_s1& (0+255),w,b
  8103  0016E2  B0D8               	btfsc	status,0,c
  8104  0016E4  D005               	goto	l3546
  8105  0016E6                     l3544:
  8106                           
  8107                           ; BSR set to: 0
  8108  0016E6  0E00               	movlw	0
  8109  0016E8  0100               	movlb	0	; () banked
  8110  0016EA  6FB9               	movwf	(_s1+1)& (0+255),b
  8111  0016EC  0E04               	movlw	4
  8112  0016EE                     L15:
  8113  0016EE  6FB8               	movwf	_s1& (0+255),b
  8114  0016F0                     l3546:
  8115                           
  8116                           ;motors.c: 121: }
  8117                           ;motors.c: 123: if(mode == 1 || mode ==2){
  8118  0016F0  0421               	decf	updateS1@mode,w,c
  8119  0016F2  1022               	iorwf	updateS1@mode+1,w,c
  8120  0016F4  B4D8               	btfsc	status,2,c
  8121  0016F6  D005               	goto	l3550
  8122  0016F8  0E02               	movlw	2
  8123  0016FA  1821               	xorwf	updateS1@mode,w,c
  8124  0016FC  1022               	iorwf	updateS1@mode+1,w,c
  8125  0016FE  A4D8               	btfss	status,2,c
  8126  001700  D027               	goto	l3566
  8127  001702                     l3550:
  8128                           
  8129                           ;motors.c: 124: if (s1 == 1){LATDbits.LATD1 = 1;}
  8130  001702  0100               	movlb	0	; () banked
  8131  001704  05B8               	decf	_s1& (0+255),w,b
  8132  001706  0100               	movlb	0	; () banked
  8133  001708  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8134  00170A  A4D8               	btfss	status,2,c
  8135  00170C  D002               	goto	l534
  8136                           
  8137                           ; BSR set to: 0
  8138  00170E  828C               	bsf	3980,1,c	;volatile
  8139  001710  D001               	goto	l3554
  8140  001712                     l534:
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;motors.c: 125: else{LATDbits.LATD1 = 0;}
  8144  001712  928C               	bcf	3980,1,c	;volatile
  8145  001714                     l3554:
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;motors.c: 126: if (s1 == 2){LATBbits.LATB3 = 1;}
  8149  001714  0E02               	movlw	2
  8150  001716  0100               	movlb	0	; () banked
  8151  001718  19B8               	xorwf	_s1& (0+255),w,b
  8152  00171A  0100               	movlb	0	; () banked
  8153  00171C  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8154  00171E  A4D8               	btfss	status,2,c
  8155  001720  D002               	goto	l536
  8156                           
  8157                           ; BSR set to: 0
  8158  001722  868A               	bsf	3978,3,c	;volatile
  8159  001724  D001               	goto	l3558
  8160  001726                     l536:
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;motors.c: 127: else{LATBbits.LATB3 = 0;}
  8164  001726  968A               	bcf	3978,3,c	;volatile
  8165  001728                     l3558:
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;motors.c: 128: if (s1 == 3){LATBbits.LATB2 = 1;}
  8169  001728  0E03               	movlw	3
  8170  00172A  0100               	movlb	0	; () banked
  8171  00172C  19B8               	xorwf	_s1& (0+255),w,b
  8172  00172E  0100               	movlb	0	; () banked
  8173  001730  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8174  001732  A4D8               	btfss	status,2,c
  8175  001734  D002               	goto	l538
  8176                           
  8177                           ; BSR set to: 0
  8178  001736  848A               	bsf	3978,2,c	;volatile
  8179  001738  D001               	goto	l3562
  8180  00173A                     l538:
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;motors.c: 129: else{LATBbits.LATB2 = 0;}
  8184  00173A  948A               	bcf	3978,2,c	;volatile
  8185  00173C                     l3562:
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;motors.c: 130: if (s1 == 4){LATBbits.LATB0 = 1;}
  8189  00173C  0E04               	movlw	4
  8190  00173E  0100               	movlb	0	; () banked
  8191  001740  19B8               	xorwf	_s1& (0+255),w,b
  8192  001742  0100               	movlb	0	; () banked
  8193  001744  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8194  001746  A4D8               	btfss	status,2,c
  8195  001748  D002               	goto	l540
  8196                           
  8197                           ; BSR set to: 0
  8198  00174A  808A               	bsf	3978,0,c	;volatile
  8199  00174C  D001               	goto	l3566
  8200  00174E                     l540:
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;motors.c: 131: else{LATBbits.LATB0 = 0;}
  8204  00174E  908A               	bcf	3978,0,c	;volatile
  8205  001750                     l3566:
  8206                           
  8207                           ;motors.c: 132: }
  8208                           ;motors.c: 133: if(mode == 5 || mode ==6){
  8209  001750  0E05               	movlw	5
  8210  001752  1821               	xorwf	updateS1@mode,w,c
  8211  001754  1022               	iorwf	updateS1@mode+1,w,c
  8212  001756  B4D8               	btfsc	status,2,c
  8213  001758  D005               	goto	l3570
  8214  00175A  0E06               	movlw	6
  8215  00175C  1821               	xorwf	updateS1@mode,w,c
  8216  00175E  1022               	iorwf	updateS1@mode+1,w,c
  8217  001760  A4D8               	btfss	status,2,c
  8218  001762  0012               	return	
  8219  001764                     l3570:
  8220                           
  8221                           ;motors.c: 134: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  8222  001764  0100               	movlb	0	; () banked
  8223  001766  05B8               	decf	_s1& (0+255),w,b
  8224  001768  0100               	movlb	0	; () banked
  8225  00176A  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8226  00176C  A4D8               	btfss	status,2,c
  8227  00176E  D004               	goto	l3574
  8228                           
  8229                           ; BSR set to: 0
  8230  001770  828C               	bsf	3980,1,c	;volatile
  8231  001772  868A               	bsf	3978,3,c	;volatile
  8232  001774  948A               	bcf	3978,2,c	;volatile
  8233  001776  908A               	bcf	3978,0,c	;volatile
  8234  001778                     l3574:
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;motors.c: 135: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  8238  001778  0E02               	movlw	2
  8239  00177A  0100               	movlb	0	; () banked
  8240  00177C  19B8               	xorwf	_s1& (0+255),w,b
  8241  00177E  0100               	movlb	0	; () banked
  8242  001780  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8243  001782  A4D8               	btfss	status,2,c
  8244  001784  D004               	goto	l3578
  8245                           
  8246                           ; BSR set to: 0
  8247  001786  928C               	bcf	3980,1,c	;volatile
  8248  001788  868A               	bsf	3978,3,c	;volatile
  8249  00178A  848A               	bsf	3978,2,c	;volatile
  8250  00178C  908A               	bcf	3978,0,c	;volatile
  8251  00178E                     l3578:
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;motors.c: 136: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  8255  00178E  0E03               	movlw	3
  8256  001790  0100               	movlb	0	; () banked
  8257  001792  19B8               	xorwf	_s1& (0+255),w,b
  8258  001794  0100               	movlb	0	; () banked
  8259  001796  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8260  001798  A4D8               	btfss	status,2,c
  8261  00179A  D004               	goto	l3582
  8262                           
  8263                           ; BSR set to: 0
  8264  00179C  928C               	bcf	3980,1,c	;volatile
  8265  00179E  968A               	bcf	3978,3,c	;volatile
  8266  0017A0  848A               	bsf	3978,2,c	;volatile
  8267  0017A2  808A               	bsf	3978,0,c	;volatile
  8268  0017A4                     l3582:
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;motors.c: 137: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  8272  0017A4  0E04               	movlw	4
  8273  0017A6  0100               	movlb	0	; () banked
  8274  0017A8  19B8               	xorwf	_s1& (0+255),w,b
  8275  0017AA  0100               	movlb	0	; () banked
  8276  0017AC  11B9               	iorwf	(_s1+1)& (0+255),w,b
  8277  0017AE  A4D8               	btfss	status,2,c
  8278  0017B0  0012               	return	
  8279                           
  8280                           ; BSR set to: 0
  8281  0017B2  828C               	bsf	3980,1,c	;volatile
  8282  0017B4  968A               	bcf	3978,3,c	;volatile
  8283  0017B6  948A               	bcf	3978,2,c	;volatile
  8284  0017B8  808A               	bsf	3978,0,c	;volatile
  8285                           
  8286                           ; BSR set to: 0
  8287                           
  8288                           ; BSR set to: 0
  8289                           
  8290                           ; BSR set to: 0
  8291                           
  8292                           ; BSR set to: 0
  8293                           
  8294                           ; BSR set to: 0
  8295  0017BA  0012               	return	
  8296  0017BC                     __end_of_updateS1:
  8297                           	opt stack 0
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           intcon	equ	0xFF2
  8305                           intcon2	equ	0xFF1
  8306                           postinc0	equ	0xFEE
  8307                           wreg	equ	0xFE8
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function _startTMR1 *****************
  8316 ;; Defined at:
  8317 ;;		line 24 in file "logic.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  2   24[None  ] int 
  8324 ;; Registers used:
  8325 ;;		wreg, status,2
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8335 ;;Total ram usage:        0 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    2
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_main
  8342 ;;		_calibrateWheels
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text26
  8347  002B64                     __ptext26:
  8348                           	opt stack 0
  8349  002B64                     _startTMR1:
  8350                           	opt stack 28
  8351                           
  8352                           ;logic.c: 25: T1CON = 0b10110000;
  8353                           
  8354                           ;incstack = 0
  8355  002B64  0EB0               	movlw	176
  8356  002B66  6ECD               	movwf	4045,c	;volatile
  8357                           
  8358                           ;logic.c: 26: TMR1H = 0b11011001;
  8359  002B68  0ED9               	movlw	217
  8360  002B6A  6ECF               	movwf	4047,c	;volatile
  8361                           
  8362                           ;logic.c: 27: TMR1L = 0b01011011;
  8363  002B6C  0E5B               	movlw	91
  8364  002B6E  6ECE               	movwf	4046,c	;volatile
  8365                           
  8366                           ;logic.c: 28: TMR1ON = 1;
  8367  002B70  80CD               	bsf	4045,0,c	;volatile
  8368  002B72  0012               	return		;funcret
  8369  002B74                     __end_of_startTMR1:
  8370                           	opt stack 0
  8371                           tblptru	equ	0xFF8
  8372                           tblptrh	equ	0xFF7
  8373                           tblptrl	equ	0xFF6
  8374                           tablat	equ	0xFF5
  8375                           prodh	equ	0xFF4
  8376                           prodl	equ	0xFF3
  8377                           intcon	equ	0xFF2
  8378                           intcon2	equ	0xFF1
  8379                           postinc0	equ	0xFEE
  8380                           wreg	equ	0xFE8
  8381                           indf2	equ	0xFDF
  8382                           postinc2	equ	0xFDE
  8383                           postdec2	equ	0xFDD
  8384                           fsr2h	equ	0xFDA
  8385                           fsr2l	equ	0xFD9
  8386                           status	equ	0xFD8
  8387                           
  8388 ;; *************** function _readADC *****************
  8389 ;; Defined at:
  8390 ;;		line 9 in file "logic.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;  channel         1    wreg     unsigned char 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  channel         1   33[COMRAM] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;                  1    wreg      void 
  8397 ;; Registers used:
  8398 ;;		wreg, status,2, status,0, cstack
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;Total ram usage:        2 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; Hardware stack levels required when called:    2
  8411 ;; This function calls:
  8412 ;;		Nothing
  8413 ;; This function is called by:
  8414 ;;		_main
  8415 ;;		_calibrateWheels
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text27
  8420  002AE4                     __ptext27:
  8421                           	opt stack 0
  8422  002AE4                     _readADC:
  8423                           	opt stack 28
  8424                           
  8425                           ;incstack = 0
  8426                           ;readADC@channel stored from wreg
  8427  002AE4  6E22               	movwf	readADC@channel,c
  8428                           
  8429                           ;logic.c: 11: ADCON0 = ((channel <<2));
  8430  002AE6  4422               	rlncf	readADC@channel,w,c
  8431  002AE8  46E8               	rlncf	wreg,f,c
  8432  002AEA  0BFC               	andlw	252
  8433  002AEC  6EC2               	movwf	4034,c	;volatile
  8434                           
  8435                           ;logic.c: 12: ADCON0bits.ADON = 1;
  8436  002AEE  80C2               	bsf	4034,0,c	;volatile
  8437                           
  8438                           ;logic.c: 13: ADCON0bits.GO = 1;
  8439  002AF0  82C2               	bsf	4034,1,c	;volatile
  8440                           
  8441                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  8442  002AF2  D007               	goto	l3844
  8443  002AF4                     l3842:
  8444  002AF4  0E34               	movlw	52
  8445  002AF6  6E21               	movwf	??_readADC& (0+255),c
  8446  002AF8  0EF2               	movlw	242
  8447  002AFA                     u8247:
  8448  002AFA  2EE8               	decfsz	wreg,f,c
  8449  002AFC  D7FE               	bra	u8247
  8450  002AFE  2E21               	decfsz	??_readADC& (0+255),f,c
  8451  002B00  D7FC               	bra	u8247
  8452  002B02                     l3844:
  8453  002B02  A2C2               	btfss	4034,1,c	;volatile
  8454  002B04  0012               	return	
  8455  002B06  D7F6               	goto	l3842
  8456  002B08                     __end_of_readADC:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           intcon2	equ	0xFF1
  8466                           postinc0	equ	0xFEE
  8467                           wreg	equ	0xFE8
  8468                           indf2	equ	0xFDF
  8469                           postinc2	equ	0xFDE
  8470                           postdec2	equ	0xFDD
  8471                           fsr2h	equ	0xFDA
  8472                           fsr2l	equ	0xFD9
  8473                           status	equ	0xFD8
  8474                           
  8475 ;; *************** function _addRun *****************
  8476 ;; Defined at:
  8477 ;;		line 69 in file "interface.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  dur             2   36[COMRAM] int 
  8480 ;;  year            2   38[COMRAM] int 
  8481 ;;  month           2   40[COMRAM] int 
  8482 ;;  date            2   42[COMRAM] int 
  8483 ;;  hours           2   44[COMRAM] int 
  8484 ;;  mins            2   46[COMRAM] int 
  8485 ;;  secs            2   48[COMRAM] int 
  8486 ;;  sodaT           2   50[COMRAM] int 
  8487 ;;  sodaNT          2   52[COMRAM] int 
  8488 ;;  soupL           2   54[COMRAM] int 
  8489 ;;  soupNL          2   56[COMRAM] int 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  currRun         2   61[COMRAM] int 
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      void 
  8494 ;; Registers used:
  8495 ;;		wreg, status,2, status,0, cstack
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8501 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;Total ram usage:       27 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    3
  8508 ;; This function calls:
  8509 ;;		_eepromRead
  8510 ;;		_eepromWrite
  8511 ;; This function is called by:
  8512 ;;		_main
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text28
  8517  002368                     __ptext28:
  8518                           	opt stack 0
  8519  002368                     _addRun:
  8520                           	opt stack 27
  8521                           
  8522                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  8523                           
  8524                           ;incstack = 0
  8525  002368  0EFF               	movlw	255
  8526  00236A  6E3B               	movwf	??_addRun& (0+255),c
  8527  00236C  0EFF               	movlw	255
  8528  00236E  6E3C               	movwf	(??_addRun+1)& (0+255),c
  8529  002370  0E00               	movlw	0
  8530  002372  EC12  F015         	call	_eepromRead
  8531  002376  6E3D               	movwf	(??_addRun+2)& (0+255),c
  8532  002378  503B               	movf	??_addRun,w,c
  8533  00237A  243D               	addwf	??_addRun+2,w,c
  8534  00237C  6E3E               	movwf	addRun@currRun,c
  8535  00237E  0E00               	movlw	0
  8536  002380  BE3D               	btfsc	??_addRun+2,7,c
  8537  002382  0EFF               	movlw	255
  8538  002384  203C               	addwfc	??_addRun+1,w,c
  8539  002386  6E3F               	movwf	addRun@currRun+1,c
  8540                           
  8541                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  8542  002388  BE3F               	btfsc	addRun@currRun+1,7,c
  8543  00238A  D005               	goto	l5590
  8544  00238C  503F               	movf	addRun@currRun+1,w,c
  8545  00238E  E107               	bnz	l5592
  8546  002390  043E               	decf	addRun@currRun,w,c
  8547  002392  B0D8               	btfsc	status,0,c
  8548  002394  D004               	goto	l5592
  8549  002396                     l5590:
  8550  002396  0E00               	movlw	0
  8551  002398  6E3F               	movwf	addRun@currRun+1,c
  8552  00239A  0E04               	movlw	4
  8553  00239C  6E3E               	movwf	addRun@currRun,c
  8554  00239E                     l5592:
  8555                           
  8556                           ;interface.c: 72: eepromWrite(0, currRun);
  8557  00239E  C03E  F021         	movff	addRun@currRun,eepromWrite@data
  8558  0023A2  0E00               	movlw	0
  8559  0023A4  ECF6  F014         	call	_eepromWrite
  8560                           
  8561                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  8562  0023A8  C025  F021         	movff	addRun@dur,eepromWrite@data
  8563  0023AC  C03E  F03B         	movff	addRun@currRun,??_addRun
  8564  0023B0  3A3B               	swapf	??_addRun,f,c
  8565  0023B2  0EF0               	movlw	240
  8566  0023B4  163B               	andwf	??_addRun,f,c
  8567  0023B6  283B               	incf	??_addRun,w,c
  8568  0023B8  ECF6  F014         	call	_eepromWrite
  8569                           
  8570                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  8571  0023BC  C027  F021         	movff	addRun@year,eepromWrite@data
  8572  0023C0  C03E  F03B         	movff	addRun@currRun,??_addRun
  8573  0023C4  3A3B               	swapf	??_addRun,f,c
  8574  0023C6  0EF0               	movlw	240
  8575  0023C8  163B               	andwf	??_addRun,f,c
  8576  0023CA  503B               	movf	??_addRun,w,c
  8577  0023CC  0F02               	addlw	2
  8578  0023CE  ECF6  F014         	call	_eepromWrite
  8579                           
  8580                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  8581  0023D2  C029  F021         	movff	addRun@month,eepromWrite@data
  8582  0023D6  C03E  F03B         	movff	addRun@currRun,??_addRun
  8583  0023DA  3A3B               	swapf	??_addRun,f,c
  8584  0023DC  0EF0               	movlw	240
  8585  0023DE  163B               	andwf	??_addRun,f,c
  8586  0023E0  503B               	movf	??_addRun,w,c
  8587  0023E2  0F03               	addlw	3
  8588  0023E4  ECF6  F014         	call	_eepromWrite
  8589                           
  8590                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8591  0023E8  C02B  F021         	movff	addRun@date,eepromWrite@data
  8592  0023EC  C03E  F03B         	movff	addRun@currRun,??_addRun
  8593  0023F0  3A3B               	swapf	??_addRun,f,c
  8594  0023F2  0EF0               	movlw	240
  8595  0023F4  163B               	andwf	??_addRun,f,c
  8596  0023F6  503B               	movf	??_addRun,w,c
  8597  0023F8  0F04               	addlw	4
  8598  0023FA  ECF6  F014         	call	_eepromWrite
  8599                           
  8600                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8601  0023FE  C02D  F021         	movff	addRun@hours,eepromWrite@data
  8602  002402  C03E  F03B         	movff	addRun@currRun,??_addRun
  8603  002406  3A3B               	swapf	??_addRun,f,c
  8604  002408  0EF0               	movlw	240
  8605  00240A  163B               	andwf	??_addRun,f,c
  8606  00240C  503B               	movf	??_addRun,w,c
  8607  00240E  0F05               	addlw	5
  8608  002410  ECF6  F014         	call	_eepromWrite
  8609                           
  8610                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8611  002414  C02F  F021         	movff	addRun@mins,eepromWrite@data
  8612  002418  C03E  F03B         	movff	addRun@currRun,??_addRun
  8613  00241C  3A3B               	swapf	??_addRun,f,c
  8614  00241E  0EF0               	movlw	240
  8615  002420  163B               	andwf	??_addRun,f,c
  8616  002422  503B               	movf	??_addRun,w,c
  8617  002424  0F06               	addlw	6
  8618  002426  ECF6  F014         	call	_eepromWrite
  8619                           
  8620                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8621  00242A  C031  F021         	movff	addRun@secs,eepromWrite@data
  8622  00242E  C03E  F03B         	movff	addRun@currRun,??_addRun
  8623  002432  3A3B               	swapf	??_addRun,f,c
  8624  002434  0EF0               	movlw	240
  8625  002436  163B               	andwf	??_addRun,f,c
  8626  002438  503B               	movf	??_addRun,w,c
  8627  00243A  0F07               	addlw	7
  8628  00243C  ECF6  F014         	call	_eepromWrite
  8629                           
  8630                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8631  002440  C033  F021         	movff	addRun@sodaT,eepromWrite@data
  8632  002444  C03E  F03B         	movff	addRun@currRun,??_addRun
  8633  002448  3A3B               	swapf	??_addRun,f,c
  8634  00244A  0EF0               	movlw	240
  8635  00244C  163B               	andwf	??_addRun,f,c
  8636  00244E  503B               	movf	??_addRun,w,c
  8637  002450  0F08               	addlw	8
  8638  002452  ECF6  F014         	call	_eepromWrite
  8639                           
  8640                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8641  002456  C035  F021         	movff	addRun@sodaNT,eepromWrite@data
  8642  00245A  C03E  F03B         	movff	addRun@currRun,??_addRun
  8643  00245E  3A3B               	swapf	??_addRun,f,c
  8644  002460  0EF0               	movlw	240
  8645  002462  163B               	andwf	??_addRun,f,c
  8646  002464  503B               	movf	??_addRun,w,c
  8647  002466  0F09               	addlw	9
  8648  002468  ECF6  F014         	call	_eepromWrite
  8649                           
  8650                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8651  00246C  C037  F021         	movff	addRun@soupL,eepromWrite@data
  8652  002470  C03E  F03B         	movff	addRun@currRun,??_addRun
  8653  002474  3A3B               	swapf	??_addRun,f,c
  8654  002476  0EF0               	movlw	240
  8655  002478  163B               	andwf	??_addRun,f,c
  8656  00247A  503B               	movf	??_addRun,w,c
  8657  00247C  0F0A               	addlw	10
  8658  00247E  ECF6  F014         	call	_eepromWrite
  8659                           
  8660                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8661  002482  C039  F021         	movff	addRun@soupNL,eepromWrite@data
  8662  002486  C03E  F03B         	movff	addRun@currRun,??_addRun
  8663  00248A  3A3B               	swapf	??_addRun,f,c
  8664  00248C  0EF0               	movlw	240
  8665  00248E  163B               	andwf	??_addRun,f,c
  8666  002490  503B               	movf	??_addRun,w,c
  8667  002492  0F0B               	addlw	11
  8668  002494  ECF6  F014         	call	_eepromWrite
  8669  002498  0012               	return		;funcret
  8670  00249A                     __end_of_addRun:
  8671                           	opt stack 0
  8672                           tblptru	equ	0xFF8
  8673                           tblptrh	equ	0xFF7
  8674                           tblptrl	equ	0xFF6
  8675                           tablat	equ	0xFF5
  8676                           prodh	equ	0xFF4
  8677                           prodl	equ	0xFF3
  8678                           intcon	equ	0xFF2
  8679                           intcon2	equ	0xFF1
  8680                           postinc0	equ	0xFEE
  8681                           wreg	equ	0xFE8
  8682                           indf2	equ	0xFDF
  8683                           postinc2	equ	0xFDE
  8684                           postdec2	equ	0xFDD
  8685                           fsr2h	equ	0xFDA
  8686                           fsr2l	equ	0xFD9
  8687                           status	equ	0xFD8
  8688                           
  8689 ;; *************** function _eepromWrite *****************
  8690 ;; Defined at:
  8691 ;;		line 43 in file "interface.c"
  8692 ;; Parameters:    Size  Location     Type
  8693 ;;  address         1    wreg     char 
  8694 ;;  data            1   32[COMRAM] char 
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;  address         1   35[COMRAM] char 
  8697 ;; Return value:  Size  Location     Type
  8698 ;;                  1    wreg      void 
  8699 ;; Registers used:
  8700 ;;		wreg, status,2, status,0
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8706 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8709 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;Total ram usage:        4 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    2
  8713 ;; This function calls:
  8714 ;;		Nothing
  8715 ;; This function is called by:
  8716 ;;		_addRun
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text29
  8721  0029EC                     __ptext29:
  8722                           	opt stack 0
  8723  0029EC                     _eepromWrite:
  8724                           	opt stack 27
  8725                           
  8726                           ;incstack = 0
  8727                           ;eepromWrite@address stored from wreg
  8728  0029EC  6E24               	movwf	eepromWrite@address,c
  8729                           
  8730                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8731  0029EE  C024  F022         	movff	eepromWrite@address,??_eepromWrite
  8732  0029F2  0E08               	movlw	8
  8733  0029F4  6E23               	movwf	(??_eepromWrite+1)& (0+255),c
  8734  0029F6                     u4495:
  8735  0029F6  3422               	rlcf	??_eepromWrite,w,c
  8736  0029F8  3222               	rrcf	??_eepromWrite,f,c
  8737  0029FA  2E23               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8738  0029FC  D7FC               	goto	u4495
  8739  0029FE  5022               	movf	??_eepromWrite,w,c
  8740  002A00  6EAA               	movwf	4010,c	;volatile
  8741                           
  8742                           ;interface.c: 46: EEADR = (signed char)address;
  8743  002A02  C024  FFA9         	movff	eepromWrite@address,4009	;volatile
  8744                           
  8745                           ;interface.c: 48: EEDATA = data;
  8746  002A06  C021  FFA8         	movff	eepromWrite@data,4008	;volatile
  8747                           
  8748                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8749  002A0A  9EA6               	bcf	4006,7,c	;volatile
  8750                           
  8751                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8752  002A0C  9CA6               	bcf	4006,6,c	;volatile
  8753                           
  8754                           ;interface.c: 51: EECON1bits.WREN = 1;
  8755  002A0E  84A6               	bsf	4006,2,c	;volatile
  8756                           
  8757                           ;interface.c: 55: EECON2 = 0x55;
  8758  002A10  0E55               	movlw	85
  8759  002A12  6EA7               	movwf	4007,c	;volatile
  8760                           
  8761                           ;interface.c: 56: EECON2 = 0xAA;
  8762  002A14  0EAA               	movlw	170
  8763  002A16  6EA7               	movwf	4007,c	;volatile
  8764                           
  8765                           ;interface.c: 57: EECON1bits.WR = 1;
  8766  002A18  82A6               	bsf	4006,1,c	;volatile
  8767  002A1A                     l702:
  8768  002A1A  A8A1               	btfss	4001,4,c	;volatile
  8769  002A1C  D7FE               	goto	l702
  8770                           
  8771                           ;interface.c: 63: }
  8772                           ;interface.c: 65: PIR2bits.EEIF = 0;
  8773  002A1E  98A1               	bcf	4001,4,c	;volatile
  8774                           
  8775                           ;interface.c: 66: EECON1bits.WREN = 0;
  8776  002A20  94A6               	bcf	4006,2,c	;volatile
  8777  002A22  0012               	return		;funcret
  8778  002A24                     __end_of_eepromWrite:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           intcon	equ	0xFF2
  8787                           intcon2	equ	0xFF1
  8788                           postinc0	equ	0xFEE
  8789                           wreg	equ	0xFE8
  8790                           indf2	equ	0xFDF
  8791                           postinc2	equ	0xFDE
  8792                           postdec2	equ	0xFDD
  8793                           fsr2h	equ	0xFDA
  8794                           fsr2l	equ	0xFD9
  8795                           status	equ	0xFD8
  8796                           
  8797 ;; *************** function _eepromRead *****************
  8798 ;; Defined at:
  8799 ;;		line 27 in file "interface.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  address         1    wreg     char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  address         1   34[COMRAM] char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  1    wreg      char 
  8806 ;; Registers used:
  8807 ;;		wreg, status,2, status,0
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;Total ram usage:        3 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    2
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_addRun
  8824 ;;		_displayLog
  8825 ;; This function uses a non-reentrant model
  8826 ;;
  8827                           
  8828                           	psect	text30
  8829  002A24                     __ptext30:
  8830                           	opt stack 0
  8831  002A24                     _eepromRead:
  8832                           	opt stack 27
  8833                           
  8834                           ;incstack = 0
  8835                           ;eepromRead@address stored from wreg
  8836  002A24  6E23               	movwf	eepromRead@address,c
  8837                           
  8838                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  8839  002A26  C023  F021         	movff	eepromRead@address,??_eepromRead
  8840  002A2A  0E08               	movlw	8
  8841  002A2C  6E22               	movwf	(??_eepromRead+1)& (0+255),c
  8842  002A2E                     u7015:
  8843  002A2E  3421               	rlcf	??_eepromRead,w,c
  8844  002A30  3221               	rrcf	??_eepromRead,f,c
  8845  002A32  2E22               	decfsz	(??_eepromRead+1)& (0+255),f,c
  8846  002A34  D7FC               	goto	u7015
  8847  002A36  5021               	movf	??_eepromRead,w,c
  8848  002A38  6EAA               	movwf	4010,c	;volatile
  8849                           
  8850                           ;interface.c: 30: EEADR = (signed char)address;
  8851  002A3A  C023  FFA9         	movff	eepromRead@address,4009	;volatile
  8852                           
  8853                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  8854  002A3E  9EA6               	bcf	4006,7,c	;volatile
  8855                           
  8856                           ;interface.c: 33: EECON1bits.CFGS = 0;
  8857  002A40  9CA6               	bcf	4006,6,c	;volatile
  8858                           
  8859                           ;interface.c: 34: EECON1bits.RD = 1;
  8860  002A42  80A6               	bsf	4006,0,c	;volatile
  8861  002A44                     l696:
  8862  002A44  B0A6               	btfsc	4006,0,c	;volatile
  8863  002A46  D7FE               	goto	l696
  8864                           
  8865                           ;interface.c: 40: return EEDATA;
  8866  002A48  50A8               	movf	4008,w,c	;volatile
  8867  002A4A  0012               	return	
  8868  002A4C                     __end_of_eepromRead:
  8869                           	opt stack 0
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           intcon2	equ	0xFF1
  8878                           postinc0	equ	0xFEE
  8879                           wreg	equ	0xFE8
  8880                           indf2	equ	0xFDF
  8881                           postinc2	equ	0xFDE
  8882                           postdec2	equ	0xFDD
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function ___awmod *****************
  8888 ;; Defined at:
  8889 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;  dividend        2   32[COMRAM] int 
  8892 ;;  divisor         2   34[COMRAM] int 
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;  sign            1   37[COMRAM] unsigned char 
  8895 ;;  counter         1   36[COMRAM] unsigned char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  2   32[COMRAM] int 
  8898 ;; Registers used:
  8899 ;;		wreg, status,2, status,0
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8905 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;Total ram usage:        6 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    2
  8912 ;; This function calls:
  8913 ;;		Nothing
  8914 ;; This function is called by:
  8915 ;;		_main
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           	psect	text31
  8920  002690                     __ptext31:
  8921                           	opt stack 0
  8922  002690                     ___awmod:
  8923                           	opt stack 28
  8924                           
  8925                           ;incstack = 0
  8926  002690  0E00               	movlw	0
  8927  002692  6E26               	movwf	___awmod@sign,c
  8928  002694  AE22               	btfss	___awmod@dividend+1,7,c
  8929  002696  D006               	goto	l4288
  8930  002698  6C21               	negf	___awmod@dividend,c
  8931  00269A  1E22               	comf	___awmod@dividend+1,f,c
  8932  00269C  B0D8               	btfsc	status,0,c
  8933  00269E  2A22               	incf	___awmod@dividend+1,f,c
  8934  0026A0  0E01               	movlw	1
  8935  0026A2  6E26               	movwf	___awmod@sign,c
  8936  0026A4                     l4288:
  8937  0026A4  AE24               	btfss	___awmod@divisor+1,7,c
  8938  0026A6  D004               	goto	l4292
  8939  0026A8  6C23               	negf	___awmod@divisor,c
  8940  0026AA  1E24               	comf	___awmod@divisor+1,f,c
  8941  0026AC  B0D8               	btfsc	status,0,c
  8942  0026AE  2A24               	incf	___awmod@divisor+1,f,c
  8943  0026B0                     l4292:
  8944  0026B0  5023               	movf	___awmod@divisor,w,c
  8945  0026B2  1024               	iorwf	___awmod@divisor+1,w,c
  8946  0026B4  B4D8               	btfsc	status,2,c
  8947  0026B6  D018               	goto	l4308
  8948  0026B8  0E01               	movlw	1
  8949  0026BA  6E25               	movwf	___awmod@counter,c
  8950  0026BC  D004               	goto	l4298
  8951  0026BE                     l4296:
  8952  0026BE  90D8               	bcf	status,0,c
  8953  0026C0  3623               	rlcf	___awmod@divisor,f,c
  8954  0026C2  3624               	rlcf	___awmod@divisor+1,f,c
  8955  0026C4  2A25               	incf	___awmod@counter,f,c
  8956  0026C6                     l4298:
  8957  0026C6  AE24               	btfss	___awmod@divisor+1,7,c
  8958  0026C8  D7FA               	goto	l4296
  8959  0026CA                     l4300:
  8960  0026CA  5023               	movf	___awmod@divisor,w,c
  8961  0026CC  5C21               	subwf	___awmod@dividend,w,c
  8962  0026CE  5024               	movf	___awmod@divisor+1,w,c
  8963  0026D0  5822               	subwfb	___awmod@dividend+1,w,c
  8964  0026D2  A0D8               	btfss	status,0,c
  8965  0026D4  D004               	goto	l4304
  8966  0026D6  5023               	movf	___awmod@divisor,w,c
  8967  0026D8  5E21               	subwf	___awmod@dividend,f,c
  8968  0026DA  5024               	movf	___awmod@divisor+1,w,c
  8969  0026DC  5A22               	subwfb	___awmod@dividend+1,f,c
  8970  0026DE                     l4304:
  8971  0026DE  90D8               	bcf	status,0,c
  8972  0026E0  3224               	rrcf	___awmod@divisor+1,f,c
  8973  0026E2  3223               	rrcf	___awmod@divisor,f,c
  8974  0026E4  2E25               	decfsz	___awmod@counter,f,c
  8975  0026E6  D7F1               	goto	l4300
  8976  0026E8                     l4308:
  8977  0026E8  5026               	movf	___awmod@sign,w,c
  8978  0026EA  B4D8               	btfsc	status,2,c
  8979  0026EC  D004               	goto	l4312
  8980  0026EE  6C21               	negf	___awmod@dividend,c
  8981  0026F0  1E22               	comf	___awmod@dividend+1,f,c
  8982  0026F2  B0D8               	btfsc	status,0,c
  8983  0026F4  2A22               	incf	___awmod@dividend+1,f,c
  8984  0026F6                     l4312:
  8985  0026F6  C021  F021         	movff	___awmod@dividend,?___awmod
  8986  0026FA  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  8987  0026FE  0012               	return	
  8988  002700                     __end_of___awmod:
  8989                           	opt stack 0
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           prodh	equ	0xFF4
  8995                           prodl	equ	0xFF3
  8996                           intcon	equ	0xFF2
  8997                           intcon2	equ	0xFF1
  8998                           postinc0	equ	0xFEE
  8999                           wreg	equ	0xFE8
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           fsr2h	equ	0xFDA
  9004                           fsr2l	equ	0xFD9
  9005                           status	equ	0xFD8
  9006                           
  9007 ;; *************** function _PWM2slow *****************
  9008 ;; Defined at:
  9009 ;;		line 57 in file "motors.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;  duty            2   32[COMRAM] int 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, status,2, status,0
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9023 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;Total ram usage:        4 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    2
  9030 ;; This function calls:
  9031 ;;		Nothing
  9032 ;; This function is called by:
  9033 ;;		_main
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text32
  9038  0028CC                     __ptext32:
  9039                           	opt stack 0
  9040  0028CC                     _PWM2slow:
  9041                           	opt stack 28
  9042                           
  9043                           ;motors.c: 58: CCP2CONbits.DC2B0 = duty & 1;
  9044                           
  9045                           ;incstack = 0
  9046  0028CC  C021  F023         	movff	PWM2slow@duty,??_PWM2slow
  9047  0028D0  0E01               	movlw	1
  9048  0028D2  1623               	andwf	??_PWM2slow,f,c
  9049  0028D4  3A23               	swapf	??_PWM2slow,f,c
  9050  0028D6  50BA               	movf	4026,w,c	;volatile
  9051  0028D8  1823               	xorwf	??_PWM2slow,w,c
  9052  0028DA  0BEF               	andlw	-17
  9053  0028DC  1823               	xorwf	??_PWM2slow,w,c
  9054  0028DE  6EBA               	movwf	4026,c	;volatile
  9055                           
  9056                           ;motors.c: 59: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9057  0028E0  3422               	rlcf	PWM2slow@duty+1,w,c
  9058  0028E2  3022               	rrcf	PWM2slow@duty+1,w,c
  9059  0028E4  6E24               	movwf	(??_PWM2slow+1)& (0+255),c
  9060  0028E6  3021               	rrcf	PWM2slow@duty,w,c
  9061  0028E8  6E23               	movwf	??_PWM2slow& (0+255),c
  9062  0028EA  0E01               	movlw	1
  9063  0028EC  1623               	andwf	??_PWM2slow,f,c
  9064  0028EE  3A23               	swapf	??_PWM2slow,f,c
  9065  0028F0  4623               	rlncf	??_PWM2slow,f,c
  9066  0028F2  50BA               	movf	4026,w,c	;volatile
  9067  0028F4  1823               	xorwf	??_PWM2slow,w,c
  9068  0028F6  0BDF               	andlw	-33
  9069  0028F8  1823               	xorwf	??_PWM2slow,w,c
  9070  0028FA  6EBA               	movwf	4026,c	;volatile
  9071                           
  9072                           ;motors.c: 60: CCPR2L = (duty >> 2);
  9073  0028FC  C021  F023         	movff	PWM2slow@duty,??_PWM2slow
  9074  002900  C022  F024         	movff	PWM2slow@duty+1,??_PWM2slow+1
  9075  002904  3424               	rlcf	??_PWM2slow+1,w,c
  9076  002906  3224               	rrcf	??_PWM2slow+1,f,c
  9077  002908  3223               	rrcf	??_PWM2slow,f,c
  9078  00290A  3424               	rlcf	??_PWM2slow+1,w,c
  9079  00290C  3224               	rrcf	??_PWM2slow+1,f,c
  9080  00290E  3223               	rrcf	??_PWM2slow,f,c
  9081  002910  5023               	movf	??_PWM2slow,w,c
  9082  002912  6EBB               	movwf	4027,c	;volatile
  9083                           
  9084                           ;motors.c: 62: LATAbits.LATA6 = 1;
  9085  002914  8C89               	bsf	3977,6,c	;volatile
  9086                           
  9087                           ;motors.c: 63: LATAbits.LATA7 = 0;
  9088  002916  9E89               	bcf	3977,7,c	;volatile
  9089  002918  0012               	return		;funcret
  9090  00291A                     __end_of_PWM2slow:
  9091                           	opt stack 0
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           intcon	equ	0xFF2
  9099                           intcon2	equ	0xFF1
  9100                           postinc0	equ	0xFEE
  9101                           wreg	equ	0xFE8
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           postdec2	equ	0xFDD
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8
  9108                           
  9109 ;; *************** function _PWM2off *****************
  9110 ;; Defined at:
  9111 ;;		line 66 in file "motors.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;		None
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  1    wreg      void 
  9118 ;; Registers used:
  9119 ;;		wreg, status,2
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;Total ram usage:        0 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    2
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_main
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text33
  9140  002BA6                     __ptext33:
  9141                           	opt stack 0
  9142  002BA6                     _PWM2off:
  9143                           	opt stack 28
  9144                           
  9145                           ;motors.c: 67: CCP2CONbits.DC2B0 = 0;
  9146                           
  9147                           ;incstack = 0
  9148  002BA6  98BA               	bcf	4026,4,c	;volatile
  9149                           
  9150                           ;motors.c: 68: CCP2CONbits.DC2B1 = 0;
  9151  002BA8  9ABA               	bcf	4026,5,c	;volatile
  9152                           
  9153                           ;motors.c: 69: CCPR2L = 0;
  9154  002BAA  0E00               	movlw	0
  9155  002BAC  6EBB               	movwf	4027,c	;volatile
  9156  002BAE  0012               	return		;funcret
  9157  002BB0                     __end_of_PWM2off:
  9158                           	opt stack 0
  9159                           tblptru	equ	0xFF8
  9160                           tblptrh	equ	0xFF7
  9161                           tblptrl	equ	0xFF6
  9162                           tablat	equ	0xFF5
  9163                           prodh	equ	0xFF4
  9164                           prodl	equ	0xFF3
  9165                           intcon	equ	0xFF2
  9166                           intcon2	equ	0xFF1
  9167                           postinc0	equ	0xFEE
  9168                           wreg	equ	0xFE8
  9169                           indf2	equ	0xFDF
  9170                           postinc2	equ	0xFDE
  9171                           postdec2	equ	0xFDD
  9172                           fsr2h	equ	0xFDA
  9173                           fsr2l	equ	0xFD9
  9174                           status	equ	0xFD8
  9175                           
  9176 ;; *************** function _PWM2 *****************
  9177 ;; Defined at:
  9178 ;;		line 31 in file "motors.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  duty            2   32[COMRAM] int 
  9181 ;;  dir             2   34[COMRAM] int 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;		None
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9197 ;;Total ram usage:        6 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    2
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_main
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text34
  9208  002618                     __ptext34:
  9209                           	opt stack 0
  9210  002618                     _PWM2:
  9211                           	opt stack 28
  9212                           
  9213                           ;motors.c: 39: CCP2CONbits.DC2B0 = duty & 1;
  9214                           
  9215                           ;incstack = 0
  9216  002618  C021  F025         	movff	PWM2@duty,??_PWM2
  9217  00261C  0E01               	movlw	1
  9218  00261E  1625               	andwf	??_PWM2,f,c
  9219  002620  3A25               	swapf	??_PWM2,f,c
  9220  002622  50BA               	movf	4026,w,c	;volatile
  9221  002624  1825               	xorwf	??_PWM2,w,c
  9222  002626  0BEF               	andlw	-17
  9223  002628  1825               	xorwf	??_PWM2,w,c
  9224  00262A  6EBA               	movwf	4026,c	;volatile
  9225                           
  9226                           ;motors.c: 40: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9227  00262C  3422               	rlcf	PWM2@duty+1,w,c
  9228  00262E  3022               	rrcf	PWM2@duty+1,w,c
  9229  002630  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9230  002632  3021               	rrcf	PWM2@duty,w,c
  9231  002634  6E25               	movwf	??_PWM2& (0+255),c
  9232  002636  0E01               	movlw	1
  9233  002638  1625               	andwf	??_PWM2,f,c
  9234  00263A  3A25               	swapf	??_PWM2,f,c
  9235  00263C  4625               	rlncf	??_PWM2,f,c
  9236  00263E  50BA               	movf	4026,w,c	;volatile
  9237  002640  1825               	xorwf	??_PWM2,w,c
  9238  002642  0BDF               	andlw	-33
  9239  002644  1825               	xorwf	??_PWM2,w,c
  9240  002646  6EBA               	movwf	4026,c	;volatile
  9241                           
  9242                           ;motors.c: 41: CCPR2L = (duty >> 2);
  9243  002648  C021  F025         	movff	PWM2@duty,??_PWM2
  9244  00264C  C022  F026         	movff	PWM2@duty+1,??_PWM2+1
  9245  002650  3426               	rlcf	??_PWM2+1,w,c
  9246  002652  3226               	rrcf	??_PWM2+1,f,c
  9247  002654  3225               	rrcf	??_PWM2,f,c
  9248  002656  3426               	rlcf	??_PWM2+1,w,c
  9249  002658  3226               	rrcf	??_PWM2+1,f,c
  9250  00265A  3225               	rrcf	??_PWM2,f,c
  9251  00265C  5025               	movf	??_PWM2,w,c
  9252  00265E  6EBB               	movwf	4027,c	;volatile
  9253                           
  9254                           ;motors.c: 43: LATAbits.LATA6 = 0;
  9255  002660  9C89               	bcf	3977,6,c	;volatile
  9256                           
  9257                           ;motors.c: 44: LATAbits.LATA7 = 0;
  9258  002662  9E89               	bcf	3977,7,c	;volatile
  9259                           
  9260                           ;motors.c: 45: _delay((unsigned long)((50)*(32000000/4000.0)));
  9261  002664  0E03               	movlw	3
  9262  002666  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9263  002668  0E08               	movlw	8
  9264  00266A  6E25               	movwf	??_PWM2& (0+255),c
  9265  00266C  0E77               	movlw	119
  9266  00266E                     u8257:
  9267  00266E  2EE8               	decfsz	wreg,f,c
  9268  002670  D7FE               	bra	u8257
  9269  002672  2E25               	decfsz	??_PWM2& (0+255),f,c
  9270  002674  D7FC               	bra	u8257
  9271  002676  2E26               	decfsz	(??_PWM2+1)& (0+255),f,c
  9272  002678  D7FA               	bra	u8257
  9273  00267A  F000               	nop	
  9274                           
  9275                           ;motors.c: 46: if(dir==1){
  9276  00267C  0423               	decf	PWM2@dir,w,c
  9277  00267E  1024               	iorwf	PWM2@dir+1,w,c
  9278  002680  A4D8               	btfss	status,2,c
  9279  002682  D003               	goto	l469
  9280                           
  9281                           ;motors.c: 47: LATAbits.LATA6 = 1;
  9282  002684  8C89               	bsf	3977,6,c	;volatile
  9283                           
  9284                           ;motors.c: 48: LATAbits.LATA7 = 0;
  9285  002686  9E89               	bcf	3977,7,c	;volatile
  9286                           
  9287                           ;motors.c: 49: }
  9288  002688  0012               	return	
  9289  00268A                     l469:
  9290                           
  9291                           ;motors.c: 50: else{
  9292                           ;motors.c: 51: LATAbits.LATA6 = 0;
  9293  00268A  9C89               	bcf	3977,6,c	;volatile
  9294                           
  9295                           ;motors.c: 52: LATAbits.LATA7 = 1;
  9296  00268C  8E89               	bsf	3977,7,c	;volatile
  9297  00268E  0012               	return	
  9298  002690                     __end_of_PWM2:
  9299                           	opt stack 0
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           prodh	equ	0xFF4
  9305                           prodl	equ	0xFF3
  9306                           intcon	equ	0xFF2
  9307                           intcon2	equ	0xFF1
  9308                           postinc0	equ	0xFEE
  9309                           wreg	equ	0xFE8
  9310                           indf2	equ	0xFDF
  9311                           postinc2	equ	0xFDE
  9312                           postdec2	equ	0xFDD
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _PWM1off *****************
  9318 ;; Defined at:
  9319 ;;		line 25 in file "motors.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;		None
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;		None
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		wreg, status,2
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        0 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    2
  9340 ;; This function calls:
  9341 ;;		Nothing
  9342 ;; This function is called by:
  9343 ;;		_main
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           	psect	text35
  9348  002BB0                     __ptext35:
  9349                           	opt stack 0
  9350  002BB0                     _PWM1off:
  9351                           	opt stack 28
  9352                           
  9353                           ;motors.c: 26: CCP1CONbits.DC1B0 = 0;
  9354                           
  9355                           ;incstack = 0
  9356  002BB0  98BD               	bcf	4029,4,c	;volatile
  9357                           
  9358                           ;motors.c: 27: CCP1CONbits.DC1B1 = 0;
  9359  002BB2  9ABD               	bcf	4029,5,c	;volatile
  9360                           
  9361                           ;motors.c: 28: CCPR1L = 0;
  9362  002BB4  0E00               	movlw	0
  9363  002BB6  6EBE               	movwf	4030,c	;volatile
  9364  002BB8  0012               	return		;funcret
  9365  002BBA                     __end_of_PWM1off:
  9366                           	opt stack 0
  9367                           tblptru	equ	0xFF8
  9368                           tblptrh	equ	0xFF7
  9369                           tblptrl	equ	0xFF6
  9370                           tablat	equ	0xFF5
  9371                           prodh	equ	0xFF4
  9372                           prodl	equ	0xFF3
  9373                           intcon	equ	0xFF2
  9374                           intcon2	equ	0xFF1
  9375                           postinc0	equ	0xFEE
  9376                           wreg	equ	0xFE8
  9377                           indf2	equ	0xFDF
  9378                           postinc2	equ	0xFDE
  9379                           postdec2	equ	0xFDD
  9380                           fsr2h	equ	0xFDA
  9381                           fsr2l	equ	0xFD9
  9382                           status	equ	0xFD8
  9383                           
  9384 ;; *************** function _PWM1 *****************
  9385 ;; Defined at:
  9386 ;;		line 11 in file "motors.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;  duty            2   32[COMRAM] int 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      void 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9404 ;;Total ram usage:        4 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    2
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_main
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text36
  9415  00291A                     __ptext36:
  9416                           	opt stack 0
  9417  00291A                     _PWM1:
  9418                           	opt stack 28
  9419                           
  9420                           ;motors.c: 19: CCP1CONbits.DC1B0 = duty & 1;
  9421                           
  9422                           ;incstack = 0
  9423  00291A  C021  F023         	movff	PWM1@duty,??_PWM1
  9424  00291E  0E01               	movlw	1
  9425  002920  1623               	andwf	??_PWM1,f,c
  9426  002922  3A23               	swapf	??_PWM1,f,c
  9427  002924  50BD               	movf	4029,w,c	;volatile
  9428  002926  1823               	xorwf	??_PWM1,w,c
  9429  002928  0BEF               	andlw	-17
  9430  00292A  1823               	xorwf	??_PWM1,w,c
  9431  00292C  6EBD               	movwf	4029,c	;volatile
  9432                           
  9433                           ;motors.c: 20: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  9434  00292E  3422               	rlcf	PWM1@duty+1,w,c
  9435  002930  3022               	rrcf	PWM1@duty+1,w,c
  9436  002932  6E24               	movwf	(??_PWM1+1)& (0+255),c
  9437  002934  3021               	rrcf	PWM1@duty,w,c
  9438  002936  6E23               	movwf	??_PWM1& (0+255),c
  9439  002938  0E01               	movlw	1
  9440  00293A  1623               	andwf	??_PWM1,f,c
  9441  00293C  3A23               	swapf	??_PWM1,f,c
  9442  00293E  4623               	rlncf	??_PWM1,f,c
  9443  002940  50BD               	movf	4029,w,c	;volatile
  9444  002942  1823               	xorwf	??_PWM1,w,c
  9445  002944  0BDF               	andlw	-33
  9446  002946  1823               	xorwf	??_PWM1,w,c
  9447  002948  6EBD               	movwf	4029,c	;volatile
  9448                           
  9449                           ;motors.c: 21: CCPR1L = (duty >> 2);
  9450  00294A  C021  F023         	movff	PWM1@duty,??_PWM1
  9451  00294E  C022  F024         	movff	PWM1@duty+1,??_PWM1+1
  9452  002952  3424               	rlcf	??_PWM1+1,w,c
  9453  002954  3224               	rrcf	??_PWM1+1,f,c
  9454  002956  3223               	rrcf	??_PWM1,f,c
  9455  002958  3424               	rlcf	??_PWM1+1,w,c
  9456  00295A  3224               	rrcf	??_PWM1+1,f,c
  9457  00295C  3223               	rrcf	??_PWM1,f,c
  9458  00295E  5023               	movf	??_PWM1,w,c
  9459  002960  6EBE               	movwf	4030,c	;volatile
  9460  002962  0012               	return		;funcret
  9461  002964                     __end_of_PWM1:
  9462                           	opt stack 0
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           intcon2	equ	0xFF1
  9471                           postinc0	equ	0xFEE
  9472                           wreg	equ	0xFE8
  9473                           indf2	equ	0xFDF
  9474                           postinc2	equ	0xFDE
  9475                           postdec2	equ	0xFDD
  9476                           fsr2h	equ	0xFDA
  9477                           fsr2l	equ	0xFD9
  9478                           status	equ	0xFD8
  9479                           
  9480 ;; *************** function _handler *****************
  9481 ;; Defined at:
  9482 ;;		line 31 in file "main.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;Total ram usage:       18 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    1
  9503 ;; This function calls:
  9504 ;;		___awdiv
  9505 ;;		_updateS2
  9506 ;;		i2___wmul
  9507 ;;		i2_startTMR1
  9508 ;;		i2_updateS1
  9509 ;;		i2_updateS3
  9510 ;; This function is called by:
  9511 ;;		Interrupt level 2
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           	psect	intcode
  9516  000008                     __pintcode:
  9517                           	opt stack 0
  9518  000008                     _handler:
  9519                           	opt stack 25
  9520                           
  9521                           ;incstack = 0
  9522  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9523  00000A  ED36  F00D         	call	int_func,f	;refresh shadow registers
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           postinc0	equ	0xFEE
  9533                           wreg	equ	0xFE8
  9534                           indf2	equ	0xFDF
  9535                           postinc2	equ	0xFDE
  9536                           postdec2	equ	0xFDD
  9537                           fsr2h	equ	0xFDA
  9538                           fsr2l	equ	0xFD9
  9539                           status	equ	0xFD8
  9540                           
  9541                           	psect	intcode_body
  9542  001A6C                     __pintcode_body:
  9543                           	opt stack 25
  9544  001A6C                     int_func:
  9545                           	opt stack 25
  9546  001A6C  0006               	pop		; remove dummy address from shadow register refresh
  9547  001A6E  CFFA F011          	movff	pclath,??_handler+2
  9548  001A72  CFFB F012          	movff	pclatu,??_handler+3
  9549  001A76  CFE9 F013          	movff	fsr0l,??_handler+4
  9550  001A7A  CFEA F014          	movff	fsr0h,??_handler+5
  9551  001A7E  CFE1 F015          	movff	fsr1l,??_handler+6
  9552  001A82  CFE2 F016          	movff	fsr1h,??_handler+7
  9553  001A86  CFD9 F017          	movff	fsr2l,??_handler+8
  9554  001A8A  CFDA F018          	movff	fsr2h,??_handler+9
  9555  001A8E  CFF3 F019          	movff	prodl,??_handler+10
  9556  001A92  CFF4 F01A          	movff	prodh,??_handler+11
  9557  001A96  CFF6 F01B          	movff	tblptrl,??_handler+12
  9558  001A9A  CFF7 F01C          	movff	tblptrh,??_handler+13
  9559  001A9E  CFF8 F01D          	movff	tblptru,??_handler+14
  9560  001AA2  CFF5 F01E          	movff	tablat,??_handler+15
  9561                           
  9562                           ;main.c: 33: (INTCONbits.GIE = 0);
  9563  001AA6  9EF2               	bcf	intcon,7,c	;volatile
  9564                           
  9565                           ;main.c: 34: if(TMR0IF){
  9566  001AA8  A4F2               	btfss	intcon,2,c	;volatile
  9567  001AAA  D00E               	goto	i2l4556
  9568                           
  9569                           ;main.c: 35: TMR0IF = 0;
  9570  001AAC  94F2               	bcf	intcon,2,c	;volatile
  9571                           
  9572                           ;main.c: 36: seconds++;
  9573  001AAE  0100               	movlb	0	; () banked
  9574  001AB0  4BB4               	infsnz	_seconds& (0+255),f,b
  9575  001AB2  2BB5               	incf	(_seconds+1)& (0+255),f,b
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;main.c: 37: TMR0ON = 0;
  9579  001AB4  9ED5               	bcf	4053,7,c	;volatile
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;main.c: 40: T0CON = 0b00010111;
  9583  001AB6  0E17               	movlw	23
  9584  001AB8  6ED5               	movwf	4053,c	;volatile
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;main.c: 41: TMR0H = 0b10000101;
  9588  001ABA  0E85               	movlw	133
  9589  001ABC  6ED7               	movwf	4055,c	;volatile
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;main.c: 42: TMR0L = 0b10101110;
  9593  001ABE  0EAE               	movlw	174
  9594  001AC0  6ED6               	movwf	4054,c	;volatile
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;main.c: 43: T0CON = T0CON | 0b10000000;
  9598  001AC2  50D5               	movf	4053,w,c	;volatile
  9599  001AC4  0980               	iorlw	128
  9600  001AC6  6ED5               	movwf	4053,c	;volatile
  9601  001AC8                     i2l4556:
  9602                           
  9603                           ;main.c: 44: }
  9604                           ;main.c: 46: if(TMR1IF){
  9605  001AC8  A09E               	btfss	3998,0,c	;volatile
  9606  001ACA  D0D7               	goto	i2l185
  9607                           
  9608                           ;main.c: 47: TMR1IF = 0;
  9609  001ACC  909E               	bcf	3998,0,c	;volatile
  9610                           
  9611                           ;main.c: 48: updateS1(S1mode);
  9612  001ACE  C05B  F001         	movff	_S1mode,i2updateS1@mode
  9613  001AD2  C05C  F002         	movff	_S1mode+1,i2updateS1@mode+1
  9614  001AD6  ECDE  F00B         	call	i2_updateS1	;wreg free
  9615                           
  9616                           ;main.c: 49: updateS2(S2mode);
  9617  001ADA  C059  F001         	movff	_S2mode,updateS2@mode
  9618  001ADE  C05A  F002         	movff	_S2mode+1,updateS2@mode+1
  9619  001AE2  EC13  F011         	call	_updateS2	;wreg free
  9620                           
  9621                           ;main.c: 50: updateS3(S3mode);
  9622  001AE6  C057  F001         	movff	_S3mode,i2updateS3@mode
  9623  001AEA  C058  F002         	movff	_S3mode+1,i2updateS3@mode+1
  9624  001AEE  EC55  F00F         	call	i2_updateS3	;wreg free
  9625                           
  9626                           ;main.c: 51: soupSteps ++;
  9627  001AF2  4A55               	infsnz	_soupSteps,f,c
  9628  001AF4  2A56               	incf	_soupSteps+1,f,c
  9629                           
  9630                           ;main.c: 52: sodaSteps ++;
  9631  001AF6  4A53               	infsnz	_sodaSteps,f,c
  9632  001AF8  2A54               	incf	_sodaSteps+1,f,c
  9633                           
  9634                           ;main.c: 54: if(((tabState == 0) && (sodaSteps == (sodaI*(sodaI+2)/2*100 + 480))) ||
  9635                           ;main.c: 55: ((tabState == 1) && (sodaSteps == (sodaI*(sodaI+1)/2*100 + 325)))){
  9636  001AFA  5051               	movf	_tabState,w,c
  9637  001AFC  1052               	iorwf	_tabState+1,w,c
  9638  001AFE  A4D8               	btfss	status,2,c
  9639  001B00  D033               	goto	i2l4570
  9640  001B02  0E00               	movlw	0
  9641  001B04  6E0A               	movwf	___awdiv@divisor+1,c
  9642  001B06  0E02               	movlw	2
  9643  001B08  6E09               	movwf	___awdiv@divisor,c
  9644  001B0A  0E02               	movlw	2
  9645  001B0C  2449               	addwf	_sodaI,w,c
  9646  001B0E  6E01               	movwf	i2___wmul@multiplier,c
  9647  001B10  0E00               	movlw	0
  9648  001B12  204A               	addwfc	_sodaI+1,w,c
  9649  001B14  6E02               	movwf	i2___wmul@multiplier+1,c
  9650  001B16  C049  F003         	movff	_sodaI,i2___wmul@multiplicand
  9651  001B1A  C04A  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9652  001B1E  EC5F  F015         	call	i2___wmul	;wreg free
  9653  001B22  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9654  001B26  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9655  001B2A  EC4D  F012         	call	___awdiv	;wreg free
  9656  001B2E  C007  F01F         	movff	?___awdiv,_handler$1818
  9657  001B32  C008  F020         	movff	?___awdiv+1,_handler$1818+1
  9658  001B36  0EE0               	movlw	224
  9659  001B38  6E0F               	movwf	??_handler& (0+255),c
  9660  001B3A  0E01               	movlw	1
  9661  001B3C  6E10               	movwf	(??_handler+1)& (0+255),c
  9662  001B3E  C01F  F001         	movff	_handler$1818,i2___wmul@multiplier
  9663  001B42  C020  F002         	movff	_handler$1818+1,i2___wmul@multiplier+1
  9664  001B46  0E00               	movlw	0
  9665  001B48  6E04               	movwf	i2___wmul@multiplicand+1,c
  9666  001B4A  0E64               	movlw	100
  9667  001B4C  6E03               	movwf	i2___wmul@multiplicand,c
  9668  001B4E  EC5F  F015         	call	i2___wmul	;wreg free
  9669  001B52  500F               	movf	??_handler,w,c
  9670  001B54  2601               	addwf	?i2___wmul,f,c
  9671  001B56  5010               	movf	??_handler+1,w,c
  9672  001B58  2202               	addwfc	?i2___wmul+1,f,c
  9673  001B5A  5053               	movf	_sodaSteps,w,c
  9674  001B5C  1801               	xorwf	?i2___wmul,w,c
  9675  001B5E  E104               	bnz	i2l4570
  9676  001B60  5054               	movf	_sodaSteps+1,w,c
  9677  001B62  1802               	xorwf	?i2___wmul+1,w,c
  9678  001B64  B4D8               	btfsc	status,2,c
  9679  001B66  D037               	goto	i2l4574
  9680  001B68                     i2l4570:
  9681  001B68  0451               	decf	_tabState,w,c
  9682  001B6A  1052               	iorwf	_tabState+1,w,c
  9683  001B6C  A4D8               	btfss	status,2,c
  9684  001B6E  D041               	goto	i2l4582
  9685  001B70  0E00               	movlw	0
  9686  001B72  6E0A               	movwf	___awdiv@divisor+1,c
  9687  001B74  0E02               	movlw	2
  9688  001B76  6E09               	movwf	___awdiv@divisor,c
  9689  001B78  0E01               	movlw	1
  9690  001B7A  2449               	addwf	_sodaI,w,c
  9691  001B7C  6E01               	movwf	i2___wmul@multiplier,c
  9692  001B7E  0E00               	movlw	0
  9693  001B80  204A               	addwfc	_sodaI+1,w,c
  9694  001B82  6E02               	movwf	i2___wmul@multiplier+1,c
  9695  001B84  C049  F003         	movff	_sodaI,i2___wmul@multiplicand
  9696  001B88  C04A  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9697  001B8C  EC5F  F015         	call	i2___wmul	;wreg free
  9698  001B90  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9699  001B94  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9700  001B98  EC4D  F012         	call	___awdiv	;wreg free
  9701  001B9C  C007  F01F         	movff	?___awdiv,_handler$1818
  9702  001BA0  C008  F020         	movff	?___awdiv+1,_handler$1818+1
  9703  001BA4  0E45               	movlw	69
  9704  001BA6  6E0F               	movwf	??_handler& (0+255),c
  9705  001BA8  0E01               	movlw	1
  9706  001BAA  6E10               	movwf	(??_handler+1)& (0+255),c
  9707  001BAC  C01F  F001         	movff	_handler$1818,i2___wmul@multiplier
  9708  001BB0  C020  F002         	movff	_handler$1818+1,i2___wmul@multiplier+1
  9709  001BB4  0E00               	movlw	0
  9710  001BB6  6E04               	movwf	i2___wmul@multiplicand+1,c
  9711  001BB8  0E64               	movlw	100
  9712  001BBA  6E03               	movwf	i2___wmul@multiplicand,c
  9713  001BBC  EC5F  F015         	call	i2___wmul	;wreg free
  9714  001BC0  500F               	movf	??_handler,w,c
  9715  001BC2  2601               	addwf	?i2___wmul,f,c
  9716  001BC4  5010               	movf	??_handler+1,w,c
  9717  001BC6  2202               	addwfc	?i2___wmul+1,f,c
  9718  001BC8  5053               	movf	_sodaSteps,w,c
  9719  001BCA  1801               	xorwf	?i2___wmul,w,c
  9720  001BCC  E112               	bnz	i2l4582
  9721  001BCE  5054               	movf	_sodaSteps+1,w,c
  9722  001BD0  1802               	xorwf	?i2___wmul+1,w,c
  9723  001BD2  A4D8               	btfss	status,2,c
  9724  001BD4  D00E               	goto	i2l4582
  9725  001BD6                     i2l4574:
  9726                           
  9727                           ;main.c: 56: if(sodaAlign == 1){sodaAlign = 2;}
  9728  001BD6  044F               	decf	_sodaAlign,w,c
  9729  001BD8  1050               	iorwf	_sodaAlign+1,w,c
  9730  001BDA  A4D8               	btfss	status,2,c
  9731  001BDC  D004               	goto	i2l4578
  9732  001BDE  0E00               	movlw	0
  9733  001BE0  6E50               	movwf	_sodaAlign+1,c
  9734  001BE2  0E02               	movlw	2
  9735  001BE4  D003               	goto	L16
  9736  001BE6                     i2l4578:
  9737                           
  9738                           ;main.c: 57: else{sodaAlign = 1;}
  9739  001BE6  0E00               	movlw	0
  9740  001BE8  6E50               	movwf	_sodaAlign+1,c
  9741  001BEA  0E01               	movlw	1
  9742  001BEC                     L16:
  9743  001BEC  6E4F               	movwf	_sodaAlign,c
  9744                           
  9745                           ;main.c: 58: sodaI++;
  9746  001BEE  4A49               	infsnz	_sodaI,f,c
  9747  001BF0  2A4A               	incf	_sodaI+1,f,c
  9748  001BF2                     i2l4582:
  9749                           
  9750                           ;main.c: 59: }
  9751                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 420)){
  9752  001BF2  0E00               	movlw	0
  9753  001BF4  6E0A               	movwf	___awdiv@divisor+1,c
  9754  001BF6  0E02               	movlw	2
  9755  001BF8  6E09               	movwf	___awdiv@divisor,c
  9756  001BFA  0E01               	movlw	1
  9757  001BFC  244B               	addwf	_soupI,w,c
  9758  001BFE  6E01               	movwf	i2___wmul@multiplier,c
  9759  001C00  0E00               	movlw	0
  9760  001C02  204C               	addwfc	_soupI+1,w,c
  9761  001C04  6E02               	movwf	i2___wmul@multiplier+1,c
  9762  001C06  C04B  F003         	movff	_soupI,i2___wmul@multiplicand
  9763  001C0A  C04C  F004         	movff	_soupI+1,i2___wmul@multiplicand+1
  9764  001C0E  EC5F  F015         	call	i2___wmul	;wreg free
  9765  001C12  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9766  001C16  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9767  001C1A  EC4D  F012         	call	___awdiv	;wreg free
  9768  001C1E  C007  F01F         	movff	?___awdiv,_handler$1818
  9769  001C22  C008  F020         	movff	?___awdiv+1,_handler$1818+1
  9770                           
  9771                           ;main.c: 59: }
  9772                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 420)){
  9773  001C26  0EA4               	movlw	164
  9774  001C28  6E0F               	movwf	??_handler& (0+255),c
  9775  001C2A  0E01               	movlw	1
  9776  001C2C  6E10               	movwf	(??_handler+1)& (0+255),c
  9777  001C2E  C01F  F001         	movff	_handler$1818,i2___wmul@multiplier
  9778  001C32  C020  F002         	movff	_handler$1818+1,i2___wmul@multiplier+1
  9779  001C36  0E00               	movlw	0
  9780  001C38  6E04               	movwf	i2___wmul@multiplicand+1,c
  9781  001C3A  0E64               	movlw	100
  9782  001C3C  6E03               	movwf	i2___wmul@multiplicand,c
  9783  001C3E  EC5F  F015         	call	i2___wmul	;wreg free
  9784  001C42  500F               	movf	??_handler,w,c
  9785  001C44  2601               	addwf	?i2___wmul,f,c
  9786  001C46  5010               	movf	??_handler+1,w,c
  9787  001C48  2202               	addwfc	?i2___wmul+1,f,c
  9788  001C4A  5055               	movf	_soupSteps,w,c
  9789  001C4C  1801               	xorwf	?i2___wmul,w,c
  9790  001C4E  E112               	bnz	i2l4594
  9791  001C50  5056               	movf	_soupSteps+1,w,c
  9792  001C52  1802               	xorwf	?i2___wmul+1,w,c
  9793  001C54  A4D8               	btfss	status,2,c
  9794  001C56  D00E               	goto	i2l4594
  9795                           
  9796                           ;main.c: 62: if(soupAlign == 1){soupAlign = 2;}
  9797  001C58  044D               	decf	_soupAlign,w,c
  9798  001C5A  104E               	iorwf	_soupAlign+1,w,c
  9799  001C5C  A4D8               	btfss	status,2,c
  9800  001C5E  D004               	goto	i2l4590
  9801  001C60  0E00               	movlw	0
  9802  001C62  6E4E               	movwf	_soupAlign+1,c
  9803  001C64  0E02               	movlw	2
  9804  001C66  D003               	goto	L17
  9805  001C68                     i2l4590:
  9806                           
  9807                           ;main.c: 63: else{soupAlign = 1;}
  9808  001C68  0E00               	movlw	0
  9809  001C6A  6E4E               	movwf	_soupAlign+1,c
  9810  001C6C  0E01               	movlw	1
  9811  001C6E                     L17:
  9812  001C6E  6E4D               	movwf	_soupAlign,c
  9813                           
  9814                           ;main.c: 64: soupI ++;
  9815  001C70  4A4B               	infsnz	_soupI,f,c
  9816  001C72  2A4C               	incf	_soupI+1,f,c
  9817  001C74                     i2l4594:
  9818                           
  9819                           ;main.c: 65: }
  9820                           ;main.c: 66: TMR1ON = 0;
  9821  001C74  90CD               	bcf	4045,0,c	;volatile
  9822                           
  9823                           ;main.c: 68: startTMR1();
  9824  001C76  ECBA  F015         	call	i2_startTMR1	;wreg free
  9825  001C7A                     i2l185:
  9826  001C7A  C01E  FFF5         	movff	??_handler+15,tablat
  9827  001C7E  C01D  FFF8         	movff	??_handler+14,tblptru
  9828  001C82  C01C  FFF7         	movff	??_handler+13,tblptrh
  9829  001C86  C01B  FFF6         	movff	??_handler+12,tblptrl
  9830  001C8A  C01A  FFF4         	movff	??_handler+11,prodh
  9831  001C8E  C019  FFF3         	movff	??_handler+10,prodl
  9832  001C92  C018  FFDA         	movff	??_handler+9,fsr2h
  9833  001C96  C017  FFD9         	movff	??_handler+8,fsr2l
  9834  001C9A  C016  FFE2         	movff	??_handler+7,fsr1h
  9835  001C9E  C015  FFE1         	movff	??_handler+6,fsr1l
  9836  001CA2  C014  FFEA         	movff	??_handler+5,fsr0h
  9837  001CA6  C013  FFE9         	movff	??_handler+4,fsr0l
  9838  001CAA  C012  FFFB         	movff	??_handler+3,pclatu
  9839  001CAE  C011  FFFA         	movff	??_handler+2,pclath
  9840  001CB2  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9841  001CB4  0011               	retfie		f
  9842  001CB6                     __end_of_handler:
  9843                           	opt stack 0
  9844                           pclatu	equ	0xFFB
  9845                           pclath	equ	0xFFA
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           intcon2	equ	0xFF1
  9854                           postinc0	equ	0xFEE
  9855                           fsr0h	equ	0xFEA
  9856                           fsr0l	equ	0xFE9
  9857                           wreg	equ	0xFE8
  9858                           fsr1h	equ	0xFE2
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           fsr2h	equ	0xFDA
  9864                           fsr2l	equ	0xFD9
  9865                           status	equ	0xFD8
  9866                           
  9867 ;; *************** function i2_updateS3 *****************
  9868 ;; Defined at:
  9869 ;;		line 188 in file "motors.c"
  9870 ;; Parameters:    Size  Location     Type
  9871 ;;  mode            2    0[COMRAM] int 
  9872 ;; Auto vars:     Size  Location     Type
  9873 ;;		None
  9874 ;; Return value:  Size  Location     Type
  9875 ;;                  1    wreg      void 
  9876 ;; Registers used:
  9877 ;;		wreg, status,2, status,0
  9878 ;; Tracked objects:
  9879 ;;		On entry : 0/0
  9880 ;;		On exit  : 0/0
  9881 ;;		Unchanged: 0/0
  9882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;Total ram usage:        3 bytes
  9888 ;; Hardware stack levels used:    1
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_handler
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           	psect	text38
  9897  001EAA                     __ptext38:
  9898                           	opt stack 0
  9899  001EAA                     i2_updateS3:
  9900                           	opt stack 25
  9901                           
  9902                           ;motors.c: 189: _delay((unsigned long)((5)*(32000000/4000.0)));
  9903                           
  9904                           ;incstack = 0
  9905  001EAA  0E34               	movlw	52
  9906  001EAC  6E03               	movwf	??i2_updateS3& (0+255),c
  9907  001EAE  0EF2               	movlw	242
  9908  001EB0                     i2u826_47:
  9909  001EB0  2EE8               	decfsz	wreg,f,c
  9910  001EB2  D7FE               	bra	i2u826_47
  9911  001EB4  2E03               	decfsz	??i2_updateS3& (0+255),f,c
  9912  001EB6  D7FC               	bra	i2u826_47
  9913                           
  9914                           ;motors.c: 191: if(mode == 0){
  9915  001EB8  5001               	movf	i2updateS3@mode,w,c
  9916  001EBA  1002               	iorwf	i2updateS3@mode+1,w,c
  9917  001EBC  A4D8               	btfss	status,2,c
  9918  001EBE  D005               	goto	i2l4446
  9919                           
  9920                           ;motors.c: 192: LATEbits.LATE2 = 0;
  9921  001EC0  948D               	bcf	3981,2,c	;volatile
  9922                           
  9923                           ;motors.c: 193: LATEbits.LATE1 = 0;
  9924  001EC2  928D               	bcf	3981,1,c	;volatile
  9925                           
  9926                           ;motors.c: 194: LATAbits.LATA4 = 0;
  9927  001EC4  9889               	bcf	3977,4,c	;volatile
  9928                           
  9929                           ;motors.c: 195: LATDbits.LATD0 = 0;
  9930  001EC6  908C               	bcf	3980,0,c	;volatile
  9931                           
  9932                           ;motors.c: 196: }
  9933  001EC8  0012               	return	
  9934  001ECA                     i2l4446:
  9935                           
  9936                           ;motors.c: 197: else if(mode == 4){
  9937  001ECA  0E04               	movlw	4
  9938  001ECC  1801               	xorwf	i2updateS3@mode,w,c
  9939  001ECE  1002               	iorwf	i2updateS3@mode+1,w,c
  9940  001ED0  B4D8               	btfsc	status,2,c
  9941  001ED2  0012               	return	
  9942                           
  9943                           ;motors.c: 200: else if(mode == 3){
  9944                           
  9945                           ;motors.c: 199: }
  9946  001ED4  0E03               	movlw	3
  9947  001ED6  1801               	xorwf	i2updateS3@mode,w,c
  9948  001ED8  1002               	iorwf	i2updateS3@mode+1,w,c
  9949  001EDA  A4D8               	btfss	status,2,c
  9950  001EDC  D042               	goto	i2l4474
  9951                           
  9952                           ;motors.c: 201: t3++;
  9953  001EDE  4A43               	infsnz	_t3,f,c
  9954  001EE0  2A44               	incf	_t3+1,f,c
  9955                           
  9956                           ;motors.c: 202: if (t3>8) {t3=1;}
  9957  001EE2  BE44               	btfsc	_t3+1,7,c
  9958  001EE4  D00A               	goto	i2l4458
  9959  001EE6  5044               	movf	_t3+1,w,c
  9960  001EE8  E104               	bnz	i2u548_40
  9961  001EEA  0E09               	movlw	9
  9962  001EEC  5C43               	subwf	_t3,w,c
  9963  001EEE  A0D8               	btfss	status,0,c
  9964  001EF0  D004               	goto	i2l4458
  9965  001EF2                     i2u548_40:
  9966  001EF2  0E00               	movlw	0
  9967  001EF4  6E44               	movwf	_t3+1,c
  9968  001EF6  0E01               	movlw	1
  9969  001EF8  6E43               	movwf	_t3,c
  9970  001EFA                     i2l4458:
  9971                           
  9972                           ;motors.c: 203: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  9973  001EFA  0443               	decf	_t3,w,c
  9974  001EFC  1044               	iorwf	_t3+1,w,c
  9975  001EFE  B4D8               	btfsc	status,2,c
  9976  001F00  D005               	goto	i2l599
  9977  001F02  0E08               	movlw	8
  9978  001F04  1843               	xorwf	_t3,w,c
  9979  001F06  1044               	iorwf	_t3+1,w,c
  9980  001F08  A4D8               	btfss	status,2,c
  9981  001F0A  D002               	goto	i2l597
  9982  001F0C                     i2l599:
  9983  001F0C  848D               	bsf	3981,2,c	;volatile
  9984  001F0E  D001               	goto	i2l4462
  9985  001F10                     i2l597:
  9986                           
  9987                           ;motors.c: 204: else{LATEbits.LATE2 = 0;}
  9988  001F10  948D               	bcf	3981,2,c	;volatile
  9989  001F12                     i2l4462:
  9990                           
  9991                           ;motors.c: 205: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  9992  001F12  0E02               	movlw	2
  9993  001F14  1843               	xorwf	_t3,w,c
  9994  001F16  1044               	iorwf	_t3+1,w,c
  9995  001F18  B4D8               	btfsc	status,2,c
  9996  001F1A  D005               	goto	i2l603
  9997  001F1C  0E07               	movlw	7
  9998  001F1E  1843               	xorwf	_t3,w,c
  9999  001F20  1044               	iorwf	_t3+1,w,c
 10000  001F22  A4D8               	btfss	status,2,c
 10001  001F24  D002               	goto	i2l601
 10002  001F26                     i2l603:
 10003  001F26  828D               	bsf	3981,1,c	;volatile
 10004  001F28  D001               	goto	i2l4466
 10005  001F2A                     i2l601:
 10006                           
 10007                           ;motors.c: 206: else{LATEbits.LATE1 = 0;}
 10008  001F2A  928D               	bcf	3981,1,c	;volatile
 10009  001F2C                     i2l4466:
 10010                           
 10011                           ;motors.c: 207: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
 10012  001F2C  0E03               	movlw	3
 10013  001F2E  1843               	xorwf	_t3,w,c
 10014  001F30  1044               	iorwf	_t3+1,w,c
 10015  001F32  B4D8               	btfsc	status,2,c
 10016  001F34  D005               	goto	i2l607
 10017  001F36  0E06               	movlw	6
 10018  001F38  1843               	xorwf	_t3,w,c
 10019  001F3A  1044               	iorwf	_t3+1,w,c
 10020  001F3C  A4D8               	btfss	status,2,c
 10021  001F3E  D002               	goto	i2l605
 10022  001F40                     i2l607:
 10023  001F40  8889               	bsf	3977,4,c	;volatile
 10024  001F42  D001               	goto	i2l4470
 10025  001F44                     i2l605:
 10026                           
 10027                           ;motors.c: 208: else{LATAbits.LATA4 = 0;}
 10028  001F44  9889               	bcf	3977,4,c	;volatile
 10029  001F46                     i2l4470:
 10030                           
 10031                           ;motors.c: 209: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
 10032  001F46  0E04               	movlw	4
 10033  001F48  1843               	xorwf	_t3,w,c
 10034  001F4A  1044               	iorwf	_t3+1,w,c
 10035  001F4C  B4D8               	btfsc	status,2,c
 10036  001F4E  D005               	goto	i2l611
 10037  001F50  0E05               	movlw	5
 10038  001F52  1843               	xorwf	_t3,w,c
 10039  001F54  1044               	iorwf	_t3+1,w,c
 10040  001F56  A4D8               	btfss	status,2,c
 10041  001F58  D002               	goto	i2l609
 10042  001F5A                     i2l611:
 10043  001F5A  808C               	bsf	3980,0,c	;volatile
 10044  001F5C  0012               	return	
 10045  001F5E                     i2l609:
 10046                           
 10047                           ;motors.c: 210: else{LATDbits.LATD0 = 0;}
 10048  001F5E  908C               	bcf	3980,0,c	;volatile
 10049                           
 10050                           ;motors.c: 211: }
 10051  001F60  0012               	return	
 10052  001F62                     i2l4474:
 10053                           
 10054                           ;motors.c: 212: else if(mode == 5){
 10055  001F62  0E05               	movlw	5
 10056  001F64  1801               	xorwf	i2updateS3@mode,w,c
 10057  001F66  1002               	iorwf	i2updateS3@mode+1,w,c
 10058  001F68  A4D8               	btfss	status,2,c
 10059  001F6A  D042               	goto	i2l4498
 10060                           
 10061                           ;motors.c: 213: t3++;
 10062  001F6C  4A43               	infsnz	_t3,f,c
 10063  001F6E  2A44               	incf	_t3+1,f,c
 10064                           
 10065                           ;motors.c: 214: if (t3>8) {t3=1;}
 10066  001F70  BE44               	btfsc	_t3+1,7,c
 10067  001F72  D00A               	goto	i2l4482
 10068  001F74  5044               	movf	_t3+1,w,c
 10069  001F76  E104               	bnz	i2u558_40
 10070  001F78  0E09               	movlw	9
 10071  001F7A  5C43               	subwf	_t3,w,c
 10072  001F7C  A0D8               	btfss	status,0,c
 10073  001F7E  D004               	goto	i2l4482
 10074  001F80                     i2u558_40:
 10075  001F80  0E00               	movlw	0
 10076  001F82  6E44               	movwf	_t3+1,c
 10077  001F84  0E01               	movlw	1
 10078  001F86  6E43               	movwf	_t3,c
 10079  001F88                     i2l4482:
 10080                           
 10081                           ;motors.c: 215: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
 10082  001F88  0443               	decf	_t3,w,c
 10083  001F8A  1044               	iorwf	_t3+1,w,c
 10084  001F8C  B4D8               	btfsc	status,2,c
 10085  001F8E  D005               	goto	i2l618
 10086  001F90  0E08               	movlw	8
 10087  001F92  1843               	xorwf	_t3,w,c
 10088  001F94  1044               	iorwf	_t3+1,w,c
 10089  001F96  A4D8               	btfss	status,2,c
 10090  001F98  D002               	goto	i2l616
 10091  001F9A                     i2l618:
 10092  001F9A  8889               	bsf	3977,4,c	;volatile
 10093  001F9C  D001               	goto	i2l4486
 10094  001F9E                     i2l616:
 10095                           
 10096                           ;motors.c: 216: else{LATAbits.LATA4 = 0;}
 10097  001F9E  9889               	bcf	3977,4,c	;volatile
 10098  001FA0                     i2l4486:
 10099                           
 10100                           ;motors.c: 217: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
 10101  001FA0  0E02               	movlw	2
 10102  001FA2  1843               	xorwf	_t3,w,c
 10103  001FA4  1044               	iorwf	_t3+1,w,c
 10104  001FA6  B4D8               	btfsc	status,2,c
 10105  001FA8  D005               	goto	i2l622
 10106  001FAA  0E07               	movlw	7
 10107  001FAC  1843               	xorwf	_t3,w,c
 10108  001FAE  1044               	iorwf	_t3+1,w,c
 10109  001FB0  A4D8               	btfss	status,2,c
 10110  001FB2  D002               	goto	i2l620
 10111  001FB4                     i2l622:
 10112  001FB4  808C               	bsf	3980,0,c	;volatile
 10113  001FB6  D001               	goto	i2l4490
 10114  001FB8                     i2l620:
 10115                           
 10116                           ;motors.c: 218: else{LATDbits.LATD0 = 0;}
 10117  001FB8  908C               	bcf	3980,0,c	;volatile
 10118  001FBA                     i2l4490:
 10119                           
 10120                           ;motors.c: 219: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
 10121  001FBA  0E03               	movlw	3
 10122  001FBC  1843               	xorwf	_t3,w,c
 10123  001FBE  1044               	iorwf	_t3+1,w,c
 10124  001FC0  B4D8               	btfsc	status,2,c
 10125  001FC2  D005               	goto	i2l626
 10126  001FC4  0E06               	movlw	6
 10127  001FC6  1843               	xorwf	_t3,w,c
 10128  001FC8  1044               	iorwf	_t3+1,w,c
 10129  001FCA  A4D8               	btfss	status,2,c
 10130  001FCC  D002               	goto	i2l624
 10131  001FCE                     i2l626:
 10132  001FCE  848D               	bsf	3981,2,c	;volatile
 10133  001FD0  D001               	goto	i2l4494
 10134  001FD2                     i2l624:
 10135                           
 10136                           ;motors.c: 220: else{LATEbits.LATE2 = 0;}
 10137  001FD2  948D               	bcf	3981,2,c	;volatile
 10138  001FD4                     i2l4494:
 10139                           
 10140                           ;motors.c: 221: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
 10141  001FD4  0E04               	movlw	4
 10142  001FD6  1843               	xorwf	_t3,w,c
 10143  001FD8  1044               	iorwf	_t3+1,w,c
 10144  001FDA  B4D8               	btfsc	status,2,c
 10145  001FDC  D005               	goto	i2l630
 10146  001FDE  0E05               	movlw	5
 10147  001FE0  1843               	xorwf	_t3,w,c
 10148  001FE2  1044               	iorwf	_t3+1,w,c
 10149  001FE4  A4D8               	btfss	status,2,c
 10150  001FE6  D002               	goto	i2l628
 10151  001FE8                     i2l630:
 10152  001FE8  828D               	bsf	3981,1,c	;volatile
 10153  001FEA  0012               	return	
 10154  001FEC                     i2l628:
 10155                           
 10156                           ;motors.c: 222: else{LATEbits.LATE1 = 0;}
 10157  001FEC  928D               	bcf	3981,1,c	;volatile
 10158                           
 10159                           ;motors.c: 223: }
 10160  001FEE  0012               	return	
 10161  001FF0                     i2l4498:
 10162                           
 10163                           ;motors.c: 224: else{
 10164                           ;motors.c: 225: if(mode == 1){
 10165  001FF0  0401               	decf	i2updateS3@mode,w,c
 10166  001FF2  1002               	iorwf	i2updateS3@mode+1,w,c
 10167  001FF4  A4D8               	btfss	status,2,c
 10168  001FF6  D013               	goto	i2l4506
 10169                           
 10170                           ;motors.c: 226: s3 ++;
 10171  001FF8  0100               	movlb	0	; () banked
 10172  001FFA  4BB6               	infsnz	_s3& (0+255),f,b
 10173  001FFC  2BB7               	incf	(_s3+1)& (0+255),f,b
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;motors.c: 227: if (s3>4) {s3=1;}
 10177  001FFE  0100               	movlb	0	; () banked
 10178  002000  BFB7               	btfsc	(_s3+1)& (0+255),7,b
 10179  002002  D025               	goto	i2l4514
 10180  002004  0100               	movlb	0	; () banked
 10181  002006  51B7               	movf	(_s3+1)& (0+255),w,b
 10182  002008  E105               	bnz	i2u568_40
 10183  00200A  0E05               	movlw	5
 10184  00200C  0100               	movlb	0	; () banked
 10185  00200E  5DB6               	subwf	_s3& (0+255),w,b
 10186  002010  A0D8               	btfss	status,0,c
 10187  002012  D01D               	goto	i2l4514
 10188  002014                     i2u568_40:
 10189                           
 10190                           ; BSR set to: 0
 10191  002014  0E00               	movlw	0
 10192  002016  0100               	movlb	0	; () banked
 10193  002018  6FB7               	movwf	(_s3+1)& (0+255),b
 10194  00201A  0E01               	movlw	1
 10195  00201C  D017               	goto	L18
 10196  00201E                     i2l4506:
 10197                           
 10198                           ;motors.c: 229: else if(mode == 2){
 10199  00201E  0E02               	movlw	2
 10200  002020  1801               	xorwf	i2updateS3@mode,w,c
 10201  002022  1002               	iorwf	i2updateS3@mode+1,w,c
 10202  002024  A4D8               	btfss	status,2,c
 10203  002026  D013               	goto	i2l4514
 10204                           
 10205                           ;motors.c: 230: s3 --;
 10206  002028  0100               	movlb	0	; () banked
 10207  00202A  07B6               	decf	_s3& (0+255),f,b
 10208  00202C  A0D8               	btfss	status,0,c
 10209  00202E  07B7               	decf	(_s3+1)& (0+255),f,b
 10210                           
 10211                           ; BSR set to: 0
 10212                           ;motors.c: 231: if (s3<1) {s3=4;}
 10213  002030  0100               	movlb	0	; () banked
 10214  002032  BFB7               	btfsc	(_s3+1)& (0+255),7,b
 10215  002034  D007               	goto	i2l4512
 10216  002036  0100               	movlb	0	; () banked
 10217  002038  51B7               	movf	(_s3+1)& (0+255),w,b
 10218  00203A  E109               	bnz	i2l4514
 10219  00203C  0100               	movlb	0	; () banked
 10220  00203E  05B6               	decf	_s3& (0+255),w,b
 10221  002040  B0D8               	btfsc	status,0,c
 10222  002042  D005               	goto	i2l4514
 10223  002044                     i2l4512:
 10224                           
 10225                           ; BSR set to: 0
 10226  002044  0E00               	movlw	0
 10227  002046  0100               	movlb	0	; () banked
 10228  002048  6FB7               	movwf	(_s3+1)& (0+255),b
 10229  00204A  0E04               	movlw	4
 10230  00204C                     L18:
 10231  00204C  6FB6               	movwf	_s3& (0+255),b
 10232  00204E                     i2l4514:
 10233                           
 10234                           ;motors.c: 232: }
 10235                           ;motors.c: 233: if (s3 == 1){LATEbits.LATE2 = 1;}
 10236  00204E  0100               	movlb	0	; () banked
 10237  002050  05B6               	decf	_s3& (0+255),w,b
 10238  002052  0100               	movlb	0	; () banked
 10239  002054  11B7               	iorwf	(_s3+1)& (0+255),w,b
 10240  002056  A4D8               	btfss	status,2,c
 10241  002058  D002               	goto	i2l638
 10242                           
 10243                           ; BSR set to: 0
 10244  00205A  848D               	bsf	3981,2,c	;volatile
 10245  00205C  D001               	goto	i2l4518
 10246  00205E                     i2l638:
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;motors.c: 234: else{LATEbits.LATE2 = 0;}
 10250  00205E  948D               	bcf	3981,2,c	;volatile
 10251  002060                     i2l4518:
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;motors.c: 235: if (s3 == 2){LATEbits.LATE1 = 1;}
 10255  002060  0E02               	movlw	2
 10256  002062  0100               	movlb	0	; () banked
 10257  002064  19B6               	xorwf	_s3& (0+255),w,b
 10258  002066  0100               	movlb	0	; () banked
 10259  002068  11B7               	iorwf	(_s3+1)& (0+255),w,b
 10260  00206A  A4D8               	btfss	status,2,c
 10261  00206C  D002               	goto	i2l640
 10262                           
 10263                           ; BSR set to: 0
 10264  00206E  828D               	bsf	3981,1,c	;volatile
 10265  002070  D001               	goto	i2l4522
 10266  002072                     i2l640:
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;motors.c: 236: else{LATEbits.LATE1 = 0;}
 10270  002072  928D               	bcf	3981,1,c	;volatile
 10271  002074                     i2l4522:
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;motors.c: 237: if (s3 == 3){LATAbits.LATA4 = 1;}
 10275  002074  0E03               	movlw	3
 10276  002076  0100               	movlb	0	; () banked
 10277  002078  19B6               	xorwf	_s3& (0+255),w,b
 10278  00207A  0100               	movlb	0	; () banked
 10279  00207C  11B7               	iorwf	(_s3+1)& (0+255),w,b
 10280  00207E  A4D8               	btfss	status,2,c
 10281  002080  D002               	goto	i2l642
 10282                           
 10283                           ; BSR set to: 0
 10284  002082  8889               	bsf	3977,4,c	;volatile
 10285  002084  D001               	goto	i2l4526
 10286  002086                     i2l642:
 10287                           
 10288                           ; BSR set to: 0
 10289                           ;motors.c: 238: else{LATAbits.LATA4 = 0;}
 10290  002086  9889               	bcf	3977,4,c	;volatile
 10291  002088                     i2l4526:
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;motors.c: 239: if (s3 == 4){LATDbits.LATD0 = 1;}
 10295  002088  0E04               	movlw	4
 10296  00208A  0100               	movlb	0	; () banked
 10297  00208C  19B6               	xorwf	_s3& (0+255),w,b
 10298  00208E  0100               	movlb	0	; () banked
 10299  002090  11B7               	iorwf	(_s3+1)& (0+255),w,b
 10300  002092  A4D8               	btfss	status,2,c
 10301  002094  D002               	goto	i2l644
 10302                           
 10303                           ; BSR set to: 0
 10304  002096  808C               	bsf	3980,0,c	;volatile
 10305  002098  0012               	return	
 10306  00209A                     i2l644:
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;motors.c: 240: else{LATDbits.LATD0 = 0;}
 10310  00209A  908C               	bcf	3980,0,c	;volatile
 10311                           
 10312                           ; BSR set to: 0
 10313                           
 10314                           ; BSR set to: 0
 10315                           
 10316                           ; BSR set to: 0
 10317                           
 10318                           ; BSR set to: 0
 10319  00209C  0012               	return	
 10320  00209E                     __end_ofi2_updateS3:
 10321                           	opt stack 0
 10322                           pclatu	equ	0xFFB
 10323                           pclath	equ	0xFFA
 10324                           tblptru	equ	0xFF8
 10325                           tblptrh	equ	0xFF7
 10326                           tblptrl	equ	0xFF6
 10327                           tablat	equ	0xFF5
 10328                           prodh	equ	0xFF4
 10329                           prodl	equ	0xFF3
 10330                           intcon	equ	0xFF2
 10331                           intcon2	equ	0xFF1
 10332                           postinc0	equ	0xFEE
 10333                           fsr0h	equ	0xFEA
 10334                           fsr0l	equ	0xFE9
 10335                           wreg	equ	0xFE8
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function i2_updateS1 *****************
 10346 ;; Defined at:
 10347 ;;		line 72 in file "motors.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  mode            2    0[COMRAM] int 
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;		None
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  1    wreg      void 
 10354 ;; Registers used:
 10355 ;;		wreg, status,2, status,0
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;Total ram usage:        3 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; This function calls:
 10368 ;;		Nothing
 10369 ;; This function is called by:
 10370 ;;		_handler
 10371 ;; This function uses a non-reentrant model
 10372 ;;
 10373                           
 10374                           	psect	text39
 10375  0017BC                     __ptext39:
 10376                           	opt stack 0
 10377  0017BC                     i2_updateS1:
 10378                           	opt stack 25
 10379                           
 10380                           ;motors.c: 73: _delay((unsigned long)((5)*(32000000/4000.0)));
 10381                           
 10382                           ;incstack = 0
 10383  0017BC  0E34               	movlw	52
 10384  0017BE  6E03               	movwf	??i2_updateS1& (0+255),c
 10385  0017C0  0EF2               	movlw	242
 10386  0017C2                     i2u827_47:
 10387  0017C2  2EE8               	decfsz	wreg,f,c
 10388  0017C4  D7FE               	bra	i2u827_47
 10389  0017C6  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10390  0017C8  D7FC               	bra	i2u827_47
 10391                           
 10392                           ;motors.c: 75: if(mode == 0){
 10393  0017CA  5001               	movf	i2updateS1@mode,w,c
 10394  0017CC  1002               	iorwf	i2updateS1@mode+1,w,c
 10395  0017CE  A4D8               	btfss	status,2,c
 10396  0017D0  D005               	goto	i2l4322
 10397                           
 10398                           ;motors.c: 76: LATDbits.LATD1 = 0;
 10399  0017D2  928C               	bcf	3980,1,c	;volatile
 10400                           
 10401                           ;motors.c: 77: LATBbits.LATB3 = 0;
 10402  0017D4  968A               	bcf	3978,3,c	;volatile
 10403                           
 10404                           ;motors.c: 78: LATBbits.LATB2 = 0;
 10405  0017D6  948A               	bcf	3978,2,c	;volatile
 10406                           
 10407                           ;motors.c: 79: LATBbits.LATB0 = 0;
 10408  0017D8  908A               	bcf	3978,0,c	;volatile
 10409                           
 10410                           ;motors.c: 80: }
 10411  0017DA  0012               	return	
 10412  0017DC                     i2l4322:
 10413                           
 10414                           ;motors.c: 81: else if(mode == 3){
 10415  0017DC  0E03               	movlw	3
 10416  0017DE  1801               	xorwf	i2updateS1@mode,w,c
 10417  0017E0  1002               	iorwf	i2updateS1@mode+1,w,c
 10418  0017E2  A4D8               	btfss	status,2,c
 10419  0017E4  D049               	goto	i2l4348
 10420                           
 10421                           ;motors.c: 82: t++;
 10422  0017E6  4A47               	infsnz	_t,f,c
 10423  0017E8  2A48               	incf	_t+1,f,c
 10424                           
 10425                           ;motors.c: 83: if (t>8) {t=1;}
 10426  0017EA  BE48               	btfsc	_t+1,7,c
 10427  0017EC  D00A               	goto	i2l4330
 10428  0017EE  5048               	movf	_t+1,w,c
 10429  0017F0  E104               	bnz	i2u507_40
 10430  0017F2  0E09               	movlw	9
 10431  0017F4  5C47               	subwf	_t,w,c
 10432  0017F6  A0D8               	btfss	status,0,c
 10433  0017F8  D004               	goto	i2l4330
 10434  0017FA                     i2u507_40:
 10435  0017FA  0E00               	movlw	0
 10436  0017FC  6E48               	movwf	_t+1,c
 10437  0017FE  0E01               	movlw	1
 10438  001800  6E47               	movwf	_t,c
 10439  001802                     i2l4330:
 10440                           
 10441                           ;motors.c: 84: _delay((unsigned long)((5)*(32000000/4000.0)));
 10442  001802  0E34               	movlw	52
 10443  001804  6E03               	movwf	??i2_updateS1& (0+255),c
 10444  001806  0EF2               	movlw	242
 10445  001808                     i2u828_47:
 10446  001808  2EE8               	decfsz	wreg,f,c
 10447  00180A  D7FE               	bra	i2u828_47
 10448  00180C  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10449  00180E  D7FC               	bra	i2u828_47
 10450                           
 10451                           ;motors.c: 85: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
 10452  001810  0447               	decf	_t,w,c
 10453  001812  1048               	iorwf	_t+1,w,c
 10454  001814  B4D8               	btfsc	status,2,c
 10455  001816  D005               	goto	i2l486
 10456  001818  0E08               	movlw	8
 10457  00181A  1847               	xorwf	_t,w,c
 10458  00181C  1048               	iorwf	_t+1,w,c
 10459  00181E  A4D8               	btfss	status,2,c
 10460  001820  D002               	goto	i2l484
 10461  001822                     i2l486:
 10462  001822  828C               	bsf	3980,1,c	;volatile
 10463  001824  D001               	goto	i2l4336
 10464  001826                     i2l484:
 10465                           
 10466                           ;motors.c: 86: else{LATDbits.LATD1 = 0;}
 10467  001826  928C               	bcf	3980,1,c	;volatile
 10468  001828                     i2l4336:
 10469                           
 10470                           ;motors.c: 87: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
 10471  001828  0E02               	movlw	2
 10472  00182A  1847               	xorwf	_t,w,c
 10473  00182C  1048               	iorwf	_t+1,w,c
 10474  00182E  B4D8               	btfsc	status,2,c
 10475  001830  D005               	goto	i2l490
 10476  001832  0E07               	movlw	7
 10477  001834  1847               	xorwf	_t,w,c
 10478  001836  1048               	iorwf	_t+1,w,c
 10479  001838  A4D8               	btfss	status,2,c
 10480  00183A  D002               	goto	i2l488
 10481  00183C                     i2l490:
 10482  00183C  868A               	bsf	3978,3,c	;volatile
 10483  00183E  D001               	goto	i2l4340
 10484  001840                     i2l488:
 10485                           
 10486                           ;motors.c: 88: else{LATBbits.LATB3 = 0;}
 10487  001840  968A               	bcf	3978,3,c	;volatile
 10488  001842                     i2l4340:
 10489                           
 10490                           ;motors.c: 89: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
 10491  001842  0E03               	movlw	3
 10492  001844  1847               	xorwf	_t,w,c
 10493  001846  1048               	iorwf	_t+1,w,c
 10494  001848  B4D8               	btfsc	status,2,c
 10495  00184A  D005               	goto	i2l494
 10496  00184C  0E06               	movlw	6
 10497  00184E  1847               	xorwf	_t,w,c
 10498  001850  1048               	iorwf	_t+1,w,c
 10499  001852  A4D8               	btfss	status,2,c
 10500  001854  D002               	goto	i2l492
 10501  001856                     i2l494:
 10502  001856  848A               	bsf	3978,2,c	;volatile
 10503  001858  D001               	goto	i2l4344
 10504  00185A                     i2l492:
 10505                           
 10506                           ;motors.c: 90: else{LATBbits.LATB2 = 0;}
 10507  00185A  948A               	bcf	3978,2,c	;volatile
 10508  00185C                     i2l4344:
 10509                           
 10510                           ;motors.c: 91: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
 10511  00185C  0E04               	movlw	4
 10512  00185E  1847               	xorwf	_t,w,c
 10513  001860  1048               	iorwf	_t+1,w,c
 10514  001862  B4D8               	btfsc	status,2,c
 10515  001864  D005               	goto	i2l498
 10516  001866  0E05               	movlw	5
 10517  001868  1847               	xorwf	_t,w,c
 10518  00186A  1048               	iorwf	_t+1,w,c
 10519  00186C  A4D8               	btfss	status,2,c
 10520  00186E  D002               	goto	i2l496
 10521  001870                     i2l498:
 10522  001870  808A               	bsf	3978,0,c	;volatile
 10523  001872  0012               	return	
 10524  001874                     i2l496:
 10525                           
 10526                           ;motors.c: 92: else{LATBbits.LATB0 = 0;}
 10527  001874  908A               	bcf	3978,0,c	;volatile
 10528                           
 10529                           ;motors.c: 93: }
 10530  001876  0012               	return	
 10531  001878                     i2l4348:
 10532                           
 10533                           ;motors.c: 94: else if(mode == 5){
 10534  001878  0E05               	movlw	5
 10535  00187A  1801               	xorwf	i2updateS1@mode,w,c
 10536  00187C  1002               	iorwf	i2updateS1@mode+1,w,c
 10537  00187E  A4D8               	btfss	status,2,c
 10538  001880  D049               	goto	i2l4374
 10539                           
 10540                           ;motors.c: 95: t++;
 10541  001882  4A47               	infsnz	_t,f,c
 10542  001884  2A48               	incf	_t+1,f,c
 10543                           
 10544                           ;motors.c: 96: if (t>8) {t=1;}
 10545  001886  BE48               	btfsc	_t+1,7,c
 10546  001888  D00A               	goto	i2l4356
 10547  00188A  5048               	movf	_t+1,w,c
 10548  00188C  E104               	bnz	i2u517_40
 10549  00188E  0E09               	movlw	9
 10550  001890  5C47               	subwf	_t,w,c
 10551  001892  A0D8               	btfss	status,0,c
 10552  001894  D004               	goto	i2l4356
 10553  001896                     i2u517_40:
 10554  001896  0E00               	movlw	0
 10555  001898  6E48               	movwf	_t+1,c
 10556  00189A  0E01               	movlw	1
 10557  00189C  6E47               	movwf	_t,c
 10558  00189E                     i2l4356:
 10559                           
 10560                           ;motors.c: 97: _delay((unsigned long)((5)*(32000000/4000.0)));
 10561  00189E  0E34               	movlw	52
 10562  0018A0  6E03               	movwf	??i2_updateS1& (0+255),c
 10563  0018A2  0EF2               	movlw	242
 10564  0018A4                     i2u829_47:
 10565  0018A4  2EE8               	decfsz	wreg,f,c
 10566  0018A6  D7FE               	bra	i2u829_47
 10567  0018A8  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10568  0018AA  D7FC               	bra	i2u829_47
 10569                           
 10570                           ;motors.c: 98: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
 10571  0018AC  0447               	decf	_t,w,c
 10572  0018AE  1048               	iorwf	_t+1,w,c
 10573  0018B0  B4D8               	btfsc	status,2,c
 10574  0018B2  D005               	goto	i2l505
 10575  0018B4  0E08               	movlw	8
 10576  0018B6  1847               	xorwf	_t,w,c
 10577  0018B8  1048               	iorwf	_t+1,w,c
 10578  0018BA  A4D8               	btfss	status,2,c
 10579  0018BC  D002               	goto	i2l503
 10580  0018BE                     i2l505:
 10581  0018BE  848A               	bsf	3978,2,c	;volatile
 10582  0018C0  D001               	goto	i2l4362
 10583  0018C2                     i2l503:
 10584                           
 10585                           ;motors.c: 99: else{LATBbits.LATB2 = 0;}
 10586  0018C2  948A               	bcf	3978,2,c	;volatile
 10587  0018C4                     i2l4362:
 10588                           
 10589                           ;motors.c: 100: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
 10590  0018C4  0E02               	movlw	2
 10591  0018C6  1847               	xorwf	_t,w,c
 10592  0018C8  1048               	iorwf	_t+1,w,c
 10593  0018CA  B4D8               	btfsc	status,2,c
 10594  0018CC  D005               	goto	i2l509
 10595  0018CE  0E07               	movlw	7
 10596  0018D0  1847               	xorwf	_t,w,c
 10597  0018D2  1048               	iorwf	_t+1,w,c
 10598  0018D4  A4D8               	btfss	status,2,c
 10599  0018D6  D002               	goto	i2l507
 10600  0018D8                     i2l509:
 10601  0018D8  808A               	bsf	3978,0,c	;volatile
 10602  0018DA  D001               	goto	i2l4366
 10603  0018DC                     i2l507:
 10604                           
 10605                           ;motors.c: 101: else{LATBbits.LATB0 = 0;}
 10606  0018DC  908A               	bcf	3978,0,c	;volatile
 10607  0018DE                     i2l4366:
 10608                           
 10609                           ;motors.c: 102: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
 10610  0018DE  0E03               	movlw	3
 10611  0018E0  1847               	xorwf	_t,w,c
 10612  0018E2  1048               	iorwf	_t+1,w,c
 10613  0018E4  B4D8               	btfsc	status,2,c
 10614  0018E6  D005               	goto	i2l513
 10615  0018E8  0E06               	movlw	6
 10616  0018EA  1847               	xorwf	_t,w,c
 10617  0018EC  1048               	iorwf	_t+1,w,c
 10618  0018EE  A4D8               	btfss	status,2,c
 10619  0018F0  D002               	goto	i2l511
 10620  0018F2                     i2l513:
 10621  0018F2  828C               	bsf	3980,1,c	;volatile
 10622  0018F4  D001               	goto	i2l4370
 10623  0018F6                     i2l511:
 10624                           
 10625                           ;motors.c: 103: else{LATDbits.LATD1 = 0;}
 10626  0018F6  928C               	bcf	3980,1,c	;volatile
 10627  0018F8                     i2l4370:
 10628                           
 10629                           ;motors.c: 104: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
 10630  0018F8  0E04               	movlw	4
 10631  0018FA  1847               	xorwf	_t,w,c
 10632  0018FC  1048               	iorwf	_t+1,w,c
 10633  0018FE  B4D8               	btfsc	status,2,c
 10634  001900  D005               	goto	i2l517
 10635  001902  0E05               	movlw	5
 10636  001904  1847               	xorwf	_t,w,c
 10637  001906  1048               	iorwf	_t+1,w,c
 10638  001908  A4D8               	btfss	status,2,c
 10639  00190A  D002               	goto	i2l515
 10640  00190C                     i2l517:
 10641  00190C  868A               	bsf	3978,3,c	;volatile
 10642  00190E  0012               	return	
 10643  001910                     i2l515:
 10644                           
 10645                           ;motors.c: 105: else{LATBbits.LATB3 = 0;}
 10646  001910  968A               	bcf	3978,3,c	;volatile
 10647                           
 10648                           ;motors.c: 106: }
 10649  001912  0012               	return	
 10650  001914                     i2l4374:
 10651                           
 10652                           ;motors.c: 107: else if(mode == 4){
 10653  001914  0E04               	movlw	4
 10654  001916  1801               	xorwf	i2updateS1@mode,w,c
 10655  001918  1002               	iorwf	i2updateS1@mode+1,w,c
 10656  00191A  B4D8               	btfsc	status,2,c
 10657  00191C  0012               	return	
 10658                           
 10659                           ;motors.c: 110: else{
 10660                           ;motors.c: 111: _delay((unsigned long)((10)*(32000000/4000.0)));
 10661                           
 10662                           ;motors.c: 109: }
 10663  00191E  0E68               	movlw	104
 10664  001920  6E03               	movwf	??i2_updateS1& (0+255),c
 10665  001922  0EE4               	movlw	228
 10666  001924                     i2u830_47:
 10667  001924  2EE8               	decfsz	wreg,f,c
 10668  001926  D7FE               	bra	i2u830_47
 10669  001928  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10670  00192A  D7FC               	bra	i2u830_47
 10671  00192C  D000               	nop2	
 10672                           
 10673                           ;motors.c: 113: if(mode == 1 || mode == 5){
 10674  00192E  0401               	decf	i2updateS1@mode,w,c
 10675  001930  1002               	iorwf	i2updateS1@mode+1,w,c
 10676  001932  B4D8               	btfsc	status,2,c
 10677  001934  D005               	goto	i2l4384
 10678  001936  0E05               	movlw	5
 10679  001938  1801               	xorwf	i2updateS1@mode,w,c
 10680  00193A  1002               	iorwf	i2updateS1@mode+1,w,c
 10681  00193C  A4D8               	btfss	status,2,c
 10682  00193E  D013               	goto	i2l4390
 10683  001940                     i2l4384:
 10684                           
 10685                           ;motors.c: 114: s1 ++;
 10686  001940  0100               	movlb	0	; () banked
 10687  001942  4BB8               	infsnz	_s1& (0+255),f,b
 10688  001944  2BB9               	incf	(_s1+1)& (0+255),f,b
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;motors.c: 115: if (s1>4) {s1=1;}
 10692  001946  0100               	movlb	0	; () banked
 10693  001948  BFB9               	btfsc	(_s1+1)& (0+255),7,b
 10694  00194A  D02A               	goto	i2l4400
 10695  00194C  0100               	movlb	0	; () banked
 10696  00194E  51B9               	movf	(_s1+1)& (0+255),w,b
 10697  001950  E105               	bnz	i2u529_40
 10698  001952  0E05               	movlw	5
 10699  001954  0100               	movlb	0	; () banked
 10700  001956  5DB8               	subwf	_s1& (0+255),w,b
 10701  001958  A0D8               	btfss	status,0,c
 10702  00195A  D022               	goto	i2l4400
 10703  00195C                     i2u529_40:
 10704                           
 10705                           ; BSR set to: 0
 10706  00195C  0E00               	movlw	0
 10707  00195E  0100               	movlb	0	; () banked
 10708  001960  6FB9               	movwf	(_s1+1)& (0+255),b
 10709  001962  0E01               	movlw	1
 10710  001964  D01C               	goto	L19
 10711  001966                     i2l4390:
 10712                           
 10713                           ;motors.c: 118: else if(mode == 2 || mode==6){
 10714  001966  0E02               	movlw	2
 10715  001968  1801               	xorwf	i2updateS1@mode,w,c
 10716  00196A  1002               	iorwf	i2updateS1@mode+1,w,c
 10717  00196C  B4D8               	btfsc	status,2,c
 10718  00196E  D005               	goto	i2l4394
 10719  001970  0E06               	movlw	6
 10720  001972  1801               	xorwf	i2updateS1@mode,w,c
 10721  001974  1002               	iorwf	i2updateS1@mode+1,w,c
 10722  001976  A4D8               	btfss	status,2,c
 10723  001978  D013               	goto	i2l4400
 10724  00197A                     i2l4394:
 10725                           
 10726                           ;motors.c: 119: s1 --;
 10727  00197A  0100               	movlb	0	; () banked
 10728  00197C  07B8               	decf	_s1& (0+255),f,b
 10729  00197E  A0D8               	btfss	status,0,c
 10730  001980  07B9               	decf	(_s1+1)& (0+255),f,b
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;motors.c: 120: if (s1<1) {s1=4;}
 10734  001982  0100               	movlb	0	; () banked
 10735  001984  BFB9               	btfsc	(_s1+1)& (0+255),7,b
 10736  001986  D007               	goto	i2l4398
 10737  001988  0100               	movlb	0	; () banked
 10738  00198A  51B9               	movf	(_s1+1)& (0+255),w,b
 10739  00198C  E109               	bnz	i2l4400
 10740  00198E  0100               	movlb	0	; () banked
 10741  001990  05B8               	decf	_s1& (0+255),w,b
 10742  001992  B0D8               	btfsc	status,0,c
 10743  001994  D005               	goto	i2l4400
 10744  001996                     i2l4398:
 10745                           
 10746                           ; BSR set to: 0
 10747  001996  0E00               	movlw	0
 10748  001998  0100               	movlb	0	; () banked
 10749  00199A  6FB9               	movwf	(_s1+1)& (0+255),b
 10750  00199C  0E04               	movlw	4
 10751  00199E                     L19:
 10752  00199E  6FB8               	movwf	_s1& (0+255),b
 10753  0019A0                     i2l4400:
 10754                           
 10755                           ;motors.c: 121: }
 10756                           ;motors.c: 123: if(mode == 1 || mode ==2){
 10757  0019A0  0401               	decf	i2updateS1@mode,w,c
 10758  0019A2  1002               	iorwf	i2updateS1@mode+1,w,c
 10759  0019A4  B4D8               	btfsc	status,2,c
 10760  0019A6  D005               	goto	i2l4404
 10761  0019A8  0E02               	movlw	2
 10762  0019AA  1801               	xorwf	i2updateS1@mode,w,c
 10763  0019AC  1002               	iorwf	i2updateS1@mode+1,w,c
 10764  0019AE  A4D8               	btfss	status,2,c
 10765  0019B0  D027               	goto	i2l4420
 10766  0019B2                     i2l4404:
 10767                           
 10768                           ;motors.c: 124: if (s1 == 1){LATDbits.LATD1 = 1;}
 10769  0019B2  0100               	movlb	0	; () banked
 10770  0019B4  05B8               	decf	_s1& (0+255),w,b
 10771  0019B6  0100               	movlb	0	; () banked
 10772  0019B8  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10773  0019BA  A4D8               	btfss	status,2,c
 10774  0019BC  D002               	goto	i2l534
 10775                           
 10776                           ; BSR set to: 0
 10777  0019BE  828C               	bsf	3980,1,c	;volatile
 10778  0019C0  D001               	goto	i2l4408
 10779  0019C2                     i2l534:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;motors.c: 125: else{LATDbits.LATD1 = 0;}
 10783  0019C2  928C               	bcf	3980,1,c	;volatile
 10784  0019C4                     i2l4408:
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;motors.c: 126: if (s1 == 2){LATBbits.LATB3 = 1;}
 10788  0019C4  0E02               	movlw	2
 10789  0019C6  0100               	movlb	0	; () banked
 10790  0019C8  19B8               	xorwf	_s1& (0+255),w,b
 10791  0019CA  0100               	movlb	0	; () banked
 10792  0019CC  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10793  0019CE  A4D8               	btfss	status,2,c
 10794  0019D0  D002               	goto	i2l536
 10795                           
 10796                           ; BSR set to: 0
 10797  0019D2  868A               	bsf	3978,3,c	;volatile
 10798  0019D4  D001               	goto	i2l4412
 10799  0019D6                     i2l536:
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;motors.c: 127: else{LATBbits.LATB3 = 0;}
 10803  0019D6  968A               	bcf	3978,3,c	;volatile
 10804  0019D8                     i2l4412:
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;motors.c: 128: if (s1 == 3){LATBbits.LATB2 = 1;}
 10808  0019D8  0E03               	movlw	3
 10809  0019DA  0100               	movlb	0	; () banked
 10810  0019DC  19B8               	xorwf	_s1& (0+255),w,b
 10811  0019DE  0100               	movlb	0	; () banked
 10812  0019E0  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10813  0019E2  A4D8               	btfss	status,2,c
 10814  0019E4  D002               	goto	i2l538
 10815                           
 10816                           ; BSR set to: 0
 10817  0019E6  848A               	bsf	3978,2,c	;volatile
 10818  0019E8  D001               	goto	i2l4416
 10819  0019EA                     i2l538:
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;motors.c: 129: else{LATBbits.LATB2 = 0;}
 10823  0019EA  948A               	bcf	3978,2,c	;volatile
 10824  0019EC                     i2l4416:
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;motors.c: 130: if (s1 == 4){LATBbits.LATB0 = 1;}
 10828  0019EC  0E04               	movlw	4
 10829  0019EE  0100               	movlb	0	; () banked
 10830  0019F0  19B8               	xorwf	_s1& (0+255),w,b
 10831  0019F2  0100               	movlb	0	; () banked
 10832  0019F4  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10833  0019F6  A4D8               	btfss	status,2,c
 10834  0019F8  D002               	goto	i2l540
 10835                           
 10836                           ; BSR set to: 0
 10837  0019FA  808A               	bsf	3978,0,c	;volatile
 10838  0019FC  D001               	goto	i2l4420
 10839  0019FE                     i2l540:
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;motors.c: 131: else{LATBbits.LATB0 = 0;}
 10843  0019FE  908A               	bcf	3978,0,c	;volatile
 10844  001A00                     i2l4420:
 10845                           
 10846                           ;motors.c: 132: }
 10847                           ;motors.c: 133: if(mode == 5 || mode ==6){
 10848  001A00  0E05               	movlw	5
 10849  001A02  1801               	xorwf	i2updateS1@mode,w,c
 10850  001A04  1002               	iorwf	i2updateS1@mode+1,w,c
 10851  001A06  B4D8               	btfsc	status,2,c
 10852  001A08  D005               	goto	i2l4424
 10853  001A0A  0E06               	movlw	6
 10854  001A0C  1801               	xorwf	i2updateS1@mode,w,c
 10855  001A0E  1002               	iorwf	i2updateS1@mode+1,w,c
 10856  001A10  A4D8               	btfss	status,2,c
 10857  001A12  0012               	return	
 10858  001A14                     i2l4424:
 10859                           
 10860                           ;motors.c: 134: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
 10861  001A14  0100               	movlb	0	; () banked
 10862  001A16  05B8               	decf	_s1& (0+255),w,b
 10863  001A18  0100               	movlb	0	; () banked
 10864  001A1A  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10865  001A1C  A4D8               	btfss	status,2,c
 10866  001A1E  D004               	goto	i2l4428
 10867                           
 10868                           ; BSR set to: 0
 10869  001A20  828C               	bsf	3980,1,c	;volatile
 10870  001A22  868A               	bsf	3978,3,c	;volatile
 10871  001A24  948A               	bcf	3978,2,c	;volatile
 10872  001A26  908A               	bcf	3978,0,c	;volatile
 10873  001A28                     i2l4428:
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;motors.c: 135: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
 10877  001A28  0E02               	movlw	2
 10878  001A2A  0100               	movlb	0	; () banked
 10879  001A2C  19B8               	xorwf	_s1& (0+255),w,b
 10880  001A2E  0100               	movlb	0	; () banked
 10881  001A30  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10882  001A32  A4D8               	btfss	status,2,c
 10883  001A34  D004               	goto	i2l4432
 10884                           
 10885                           ; BSR set to: 0
 10886  001A36  928C               	bcf	3980,1,c	;volatile
 10887  001A38  868A               	bsf	3978,3,c	;volatile
 10888  001A3A  848A               	bsf	3978,2,c	;volatile
 10889  001A3C  908A               	bcf	3978,0,c	;volatile
 10890  001A3E                     i2l4432:
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;motors.c: 136: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
 10894  001A3E  0E03               	movlw	3
 10895  001A40  0100               	movlb	0	; () banked
 10896  001A42  19B8               	xorwf	_s1& (0+255),w,b
 10897  001A44  0100               	movlb	0	; () banked
 10898  001A46  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10899  001A48  A4D8               	btfss	status,2,c
 10900  001A4A  D004               	goto	i2l4436
 10901                           
 10902                           ; BSR set to: 0
 10903  001A4C  928C               	bcf	3980,1,c	;volatile
 10904  001A4E  968A               	bcf	3978,3,c	;volatile
 10905  001A50  848A               	bsf	3978,2,c	;volatile
 10906  001A52  808A               	bsf	3978,0,c	;volatile
 10907  001A54                     i2l4436:
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;motors.c: 137: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
 10911  001A54  0E04               	movlw	4
 10912  001A56  0100               	movlb	0	; () banked
 10913  001A58  19B8               	xorwf	_s1& (0+255),w,b
 10914  001A5A  0100               	movlb	0	; () banked
 10915  001A5C  11B9               	iorwf	(_s1+1)& (0+255),w,b
 10916  001A5E  A4D8               	btfss	status,2,c
 10917  001A60  0012               	return	
 10918                           
 10919                           ; BSR set to: 0
 10920  001A62  828C               	bsf	3980,1,c	;volatile
 10921  001A64  968A               	bcf	3978,3,c	;volatile
 10922  001A66  948A               	bcf	3978,2,c	;volatile
 10923  001A68  808A               	bsf	3978,0,c	;volatile
 10924                           
 10925                           ; BSR set to: 0
 10926                           
 10927                           ; BSR set to: 0
 10928                           
 10929                           ; BSR set to: 0
 10930                           
 10931                           ; BSR set to: 0
 10932                           
 10933                           ; BSR set to: 0
 10934  001A6A  0012               	return	
 10935  001A6C                     __end_ofi2_updateS1:
 10936                           	opt stack 0
 10937                           pclatu	equ	0xFFB
 10938                           pclath	equ	0xFFA
 10939                           tblptru	equ	0xFF8
 10940                           tblptrh	equ	0xFF7
 10941                           tblptrl	equ	0xFF6
 10942                           tablat	equ	0xFF5
 10943                           prodh	equ	0xFF4
 10944                           prodl	equ	0xFF3
 10945                           intcon	equ	0xFF2
 10946                           intcon2	equ	0xFF1
 10947                           postinc0	equ	0xFEE
 10948                           fsr0h	equ	0xFEA
 10949                           fsr0l	equ	0xFE9
 10950                           wreg	equ	0xFE8
 10951                           fsr1h	equ	0xFE2
 10952                           fsr1l	equ	0xFE1
 10953                           indf2	equ	0xFDF
 10954                           postinc2	equ	0xFDE
 10955                           postdec2	equ	0xFDD
 10956                           fsr2h	equ	0xFDA
 10957                           fsr2l	equ	0xFD9
 10958                           status	equ	0xFD8
 10959                           
 10960 ;; *************** function i2_startTMR1 *****************
 10961 ;; Defined at:
 10962 ;;		line 24 in file "logic.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;		None
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;		None
 10967 ;; Return value:  Size  Location     Type
 10968 ;;                  2    0[None  ] int 
 10969 ;; Registers used:
 10970 ;;		wreg, status,2
 10971 ;; Tracked objects:
 10972 ;;		On entry : 0/0
 10973 ;;		On exit  : 0/0
 10974 ;;		Unchanged: 0/0
 10975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;Total ram usage:        0 bytes
 10981 ;; Hardware stack levels used:    1
 10982 ;; This function calls:
 10983 ;;		Nothing
 10984 ;; This function is called by:
 10985 ;;		_handler
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text40
 10990  002B74                     __ptext40:
 10991                           	opt stack 0
 10992  002B74                     i2_startTMR1:
 10993                           	opt stack 25
 10994                           
 10995                           ;logic.c: 25: T1CON = 0b10110000;
 10996                           
 10997                           ;incstack = 0
 10998  002B74  0EB0               	movlw	176
 10999  002B76  6ECD               	movwf	4045,c	;volatile
 11000                           
 11001                           ;logic.c: 26: TMR1H = 0b11011001;
 11002  002B78  0ED9               	movlw	217
 11003  002B7A  6ECF               	movwf	4047,c	;volatile
 11004                           
 11005                           ;logic.c: 27: TMR1L = 0b01011011;
 11006  002B7C  0E5B               	movlw	91
 11007  002B7E  6ECE               	movwf	4046,c	;volatile
 11008                           
 11009                           ;logic.c: 28: TMR1ON = 1;
 11010  002B80  80CD               	bsf	4045,0,c	;volatile
 11011  002B82  0012               	return		;funcret
 11012  002B84                     __end_ofi2_startTMR1:
 11013                           	opt stack 0
 11014                           pclatu	equ	0xFFB
 11015                           pclath	equ	0xFFA
 11016                           tblptru	equ	0xFF8
 11017                           tblptrh	equ	0xFF7
 11018                           tblptrl	equ	0xFF6
 11019                           tablat	equ	0xFF5
 11020                           prodh	equ	0xFF4
 11021                           prodl	equ	0xFF3
 11022                           intcon	equ	0xFF2
 11023                           intcon2	equ	0xFF1
 11024                           postinc0	equ	0xFEE
 11025                           fsr0h	equ	0xFEA
 11026                           fsr0l	equ	0xFE9
 11027                           wreg	equ	0xFE8
 11028                           fsr1h	equ	0xFE2
 11029                           fsr1l	equ	0xFE1
 11030                           indf2	equ	0xFDF
 11031                           postinc2	equ	0xFDE
 11032                           postdec2	equ	0xFDD
 11033                           fsr2h	equ	0xFDA
 11034                           fsr2l	equ	0xFD9
 11035                           status	equ	0xFD8
 11036                           
 11037 ;; *************** function i2___wmul *****************
 11038 ;; Defined at:
 11039 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11040 ;; Parameters:    Size  Location     Type
 11041 ;;  multiplier      2    0[COMRAM] unsigned int 
 11042 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;  __wmul          2    4[COMRAM] unsigned int 
 11045 ;; Return value:  Size  Location     Type
 11046 ;;                  2    0[COMRAM] unsigned int 
 11047 ;; Registers used:
 11048 ;;		wreg, status,2, status,0, prodl, prodh
 11049 ;; Tracked objects:
 11050 ;;		On entry : 0/0
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;Total ram usage:        6 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; This function calls:
 11061 ;;		Nothing
 11062 ;; This function is called by:
 11063 ;;		_handler
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           	psect	text41
 11068  002ABE                     __ptext41:
 11069                           	opt stack 0
 11070  002ABE                     i2___wmul:
 11071                           	opt stack 25
 11072                           
 11073                           ;incstack = 0
 11074  002ABE  5001               	movf	i2___wmul@multiplier,w,c
 11075  002AC0  0203               	mulwf	i2___wmul@multiplicand,c
 11076  002AC2  CFF3 F005          	movff	prodl,i2___wmul@product
 11077  002AC6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11078  002ACA  5001               	movf	i2___wmul@multiplier,w,c
 11079  002ACC  0204               	mulwf	i2___wmul@multiplicand+1,c
 11080  002ACE  50F3               	movf	prodl,w,c
 11081  002AD0  2606               	addwf	i2___wmul@product+1,f,c
 11082  002AD2  5002               	movf	i2___wmul@multiplier+1,w,c
 11083  002AD4  0203               	mulwf	i2___wmul@multiplicand,c
 11084  002AD6  50F3               	movf	prodl,w,c
 11085  002AD8  2606               	addwf	i2___wmul@product+1,f,c
 11086  002ADA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11087  002ADE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11088  002AE2  0012               	return	
 11089  002AE4                     __end_ofi2___wmul:
 11090                           	opt stack 0
 11091                           pclatu	equ	0xFFB
 11092                           pclath	equ	0xFFA
 11093                           tblptru	equ	0xFF8
 11094                           tblptrh	equ	0xFF7
 11095                           tblptrl	equ	0xFF6
 11096                           tablat	equ	0xFF5
 11097                           prodh	equ	0xFF4
 11098                           prodl	equ	0xFF3
 11099                           intcon	equ	0xFF2
 11100                           intcon2	equ	0xFF1
 11101                           postinc0	equ	0xFEE
 11102                           fsr0h	equ	0xFEA
 11103                           fsr0l	equ	0xFE9
 11104                           wreg	equ	0xFE8
 11105                           fsr1h	equ	0xFE2
 11106                           fsr1l	equ	0xFE1
 11107                           indf2	equ	0xFDF
 11108                           postinc2	equ	0xFDE
 11109                           postdec2	equ	0xFDD
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8
 11113                           
 11114 ;; *************** function _updateS2 *****************
 11115 ;; Defined at:
 11116 ;;		line 143 in file "motors.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;  mode            2    0[COMRAM] int 
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;		None
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      void 
 11123 ;; Registers used:
 11124 ;;		wreg, status,2, status,0
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11130 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;Total ram usage:        3 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; This function calls:
 11137 ;;		Nothing
 11138 ;; This function is called by:
 11139 ;;		_handler
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143                           	psect	text42
 11144  002226                     __ptext42:
 11145                           	opt stack 0
 11146  002226                     _updateS2:
 11147                           	opt stack 25
 11148                           
 11149                           ;motors.c: 144: _delay((unsigned long)((5)*(32000000/4000.0)));
 11150                           
 11151                           ;incstack = 0
 11152  002226  0E34               	movlw	52
 11153  002228  6E03               	movwf	??_updateS2& (0+255),c
 11154  00222A  0EF2               	movlw	242
 11155  00222C                     i2u831_47:
 11156  00222C  2EE8               	decfsz	wreg,f,c
 11157  00222E  D7FE               	bra	i2u831_47
 11158  002230  2E03               	decfsz	??_updateS2& (0+255),f,c
 11159  002232  D7FC               	bra	i2u831_47
 11160                           
 11161                           ;motors.c: 146: if(mode == 0){
 11162  002234  5001               	movf	updateS2@mode,w,c
 11163  002236  1002               	iorwf	updateS2@mode+1,w,c
 11164  002238  A4D8               	btfss	status,2,c
 11165  00223A  D005               	goto	i2l3910
 11166                           
 11167                           ;motors.c: 147: LATCbits.LATC7 = 0;
 11168  00223C  9E8B               	bcf	3979,7,c	;volatile
 11169                           
 11170                           ;motors.c: 148: LATCbits.LATC6 = 0;
 11171  00223E  9C8B               	bcf	3979,6,c	;volatile
 11172                           
 11173                           ;motors.c: 149: LATCbits.LATC0 = 0;
 11174  002240  908B               	bcf	3979,0,c	;volatile
 11175                           
 11176                           ;motors.c: 150: LATCbits.LATC5 = 0;
 11177  002242  9A8B               	bcf	3979,5,c	;volatile
 11178                           
 11179                           ;motors.c: 151: }
 11180  002244  0012               	return	
 11181  002246                     i2l3910:
 11182                           
 11183                           ;motors.c: 152: else if(mode == 4){
 11184  002246  0E04               	movlw	4
 11185  002248  1801               	xorwf	updateS2@mode,w,c
 11186  00224A  1002               	iorwf	updateS2@mode+1,w,c
 11187  00224C  B4D8               	btfsc	status,2,c
 11188  00224E  0012               	return	
 11189                           
 11190                           ;motors.c: 155: else if(mode == 3){
 11191                           
 11192                           ;motors.c: 154: }
 11193  002250  0E03               	movlw	3
 11194  002252  1801               	xorwf	updateS2@mode,w,c
 11195  002254  1002               	iorwf	updateS2@mode+1,w,c
 11196  002256  A4D8               	btfss	status,2,c
 11197  002258  D042               	goto	i2l3938
 11198                           
 11199                           ;motors.c: 156: t2++;
 11200  00225A  4A45               	infsnz	_t2,f,c
 11201  00225C  2A46               	incf	_t2+1,f,c
 11202                           
 11203                           ;motors.c: 157: if (t2>8) {t2=1;}
 11204  00225E  BE46               	btfsc	_t2+1,7,c
 11205  002260  D00A               	goto	i2l3922
 11206  002262  5046               	movf	_t2+1,w,c
 11207  002264  E104               	bnz	i2u454_40
 11208  002266  0E09               	movlw	9
 11209  002268  5C45               	subwf	_t2,w,c
 11210  00226A  A0D8               	btfss	status,0,c
 11211  00226C  D004               	goto	i2l3922
 11212  00226E                     i2u454_40:
 11213  00226E  0E00               	movlw	0
 11214  002270  6E46               	movwf	_t2+1,c
 11215  002272  0E01               	movlw	1
 11216  002274  6E45               	movwf	_t2,c
 11217  002276                     i2l3922:
 11218                           
 11219                           ;motors.c: 158: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
 11220  002276  0445               	decf	_t2,w,c
 11221  002278  1046               	iorwf	_t2+1,w,c
 11222  00227A  B4D8               	btfsc	status,2,c
 11223  00227C  D005               	goto	i2l560
 11224  00227E  0E08               	movlw	8
 11225  002280  1845               	xorwf	_t2,w,c
 11226  002282  1046               	iorwf	_t2+1,w,c
 11227  002284  A4D8               	btfss	status,2,c
 11228  002286  D002               	goto	i2l558
 11229  002288                     i2l560:
 11230  002288  8E8B               	bsf	3979,7,c	;volatile
 11231  00228A  D001               	goto	i2l3926
 11232  00228C                     i2l558:
 11233                           
 11234                           ;motors.c: 159: else{LATCbits.LATC7 = 0;}
 11235  00228C  9E8B               	bcf	3979,7,c	;volatile
 11236  00228E                     i2l3926:
 11237                           
 11238                           ;motors.c: 160: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
 11239  00228E  0E02               	movlw	2
 11240  002290  1845               	xorwf	_t2,w,c
 11241  002292  1046               	iorwf	_t2+1,w,c
 11242  002294  B4D8               	btfsc	status,2,c
 11243  002296  D005               	goto	i2l564
 11244  002298  0E07               	movlw	7
 11245  00229A  1845               	xorwf	_t2,w,c
 11246  00229C  1046               	iorwf	_t2+1,w,c
 11247  00229E  A4D8               	btfss	status,2,c
 11248  0022A0  D002               	goto	i2l562
 11249  0022A2                     i2l564:
 11250  0022A2  8C8B               	bsf	3979,6,c	;volatile
 11251  0022A4  D001               	goto	i2l3930
 11252  0022A6                     i2l562:
 11253                           
 11254                           ;motors.c: 161: else{LATCbits.LATC6 = 0;}
 11255  0022A6  9C8B               	bcf	3979,6,c	;volatile
 11256  0022A8                     i2l3930:
 11257                           
 11258                           ;motors.c: 162: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
 11259  0022A8  0E03               	movlw	3
 11260  0022AA  1845               	xorwf	_t2,w,c
 11261  0022AC  1046               	iorwf	_t2+1,w,c
 11262  0022AE  B4D8               	btfsc	status,2,c
 11263  0022B0  D005               	goto	i2l568
 11264  0022B2  0E06               	movlw	6
 11265  0022B4  1845               	xorwf	_t2,w,c
 11266  0022B6  1046               	iorwf	_t2+1,w,c
 11267  0022B8  A4D8               	btfss	status,2,c
 11268  0022BA  D002               	goto	i2l566
 11269  0022BC                     i2l568:
 11270  0022BC  808B               	bsf	3979,0,c	;volatile
 11271  0022BE  D001               	goto	i2l3934
 11272  0022C0                     i2l566:
 11273                           
 11274                           ;motors.c: 163: else{LATCbits.LATC0 = 0;}
 11275  0022C0  908B               	bcf	3979,0,c	;volatile
 11276  0022C2                     i2l3934:
 11277                           
 11278                           ;motors.c: 164: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
 11279  0022C2  0E04               	movlw	4
 11280  0022C4  1845               	xorwf	_t2,w,c
 11281  0022C6  1046               	iorwf	_t2+1,w,c
 11282  0022C8  B4D8               	btfsc	status,2,c
 11283  0022CA  D005               	goto	i2l572
 11284  0022CC  0E05               	movlw	5
 11285  0022CE  1845               	xorwf	_t2,w,c
 11286  0022D0  1046               	iorwf	_t2+1,w,c
 11287  0022D2  A4D8               	btfss	status,2,c
 11288  0022D4  D002               	goto	i2l570
 11289  0022D6                     i2l572:
 11290  0022D6  8A8B               	bsf	3979,5,c	;volatile
 11291  0022D8  0012               	return	
 11292  0022DA                     i2l570:
 11293                           
 11294                           ;motors.c: 165: else{LATCbits.LATC5 = 0;}
 11295  0022DA  9A8B               	bcf	3979,5,c	;volatile
 11296                           
 11297                           ;motors.c: 166: }
 11298  0022DC  0012               	return	
 11299  0022DE                     i2l3938:
 11300                           
 11301                           ;motors.c: 167: else{
 11302                           ;motors.c: 168: if(mode == 1){
 11303  0022DE  0401               	decf	updateS2@mode,w,c
 11304  0022E0  1002               	iorwf	updateS2@mode+1,w,c
 11305  0022E2  A4D8               	btfss	status,2,c
 11306  0022E4  D00E               	goto	i2l3946
 11307                           
 11308                           ;motors.c: 169: s2 ++;
 11309  0022E6  4A5D               	infsnz	_s2,f,c
 11310  0022E8  2A5E               	incf	_s2+1,f,c
 11311                           
 11312                           ;motors.c: 170: if (s2>4) {s2=1;}
 11313  0022EA  BE5E               	btfsc	_s2+1,7,c
 11314  0022EC  D01D               	goto	i2l3954
 11315  0022EE  505E               	movf	_s2+1,w,c
 11316  0022F0  E104               	bnz	i2u464_40
 11317  0022F2  0E05               	movlw	5
 11318  0022F4  5C5D               	subwf	_s2,w,c
 11319  0022F6  A0D8               	btfss	status,0,c
 11320  0022F8  D017               	goto	i2l3954
 11321  0022FA                     i2u464_40:
 11322  0022FA  0E00               	movlw	0
 11323  0022FC  6E5E               	movwf	_s2+1,c
 11324  0022FE  0E01               	movlw	1
 11325  002300  D012               	goto	L20
 11326  002302                     i2l3946:
 11327                           
 11328                           ;motors.c: 172: else if(mode == 2){
 11329  002302  0E02               	movlw	2
 11330  002304  1801               	xorwf	updateS2@mode,w,c
 11331  002306  1002               	iorwf	updateS2@mode+1,w,c
 11332  002308  A4D8               	btfss	status,2,c
 11333  00230A  D00E               	goto	i2l3954
 11334                           
 11335                           ;motors.c: 173: s2 --;
 11336  00230C  065D               	decf	_s2,f,c
 11337  00230E  A0D8               	btfss	status,0,c
 11338  002310  065E               	decf	_s2+1,f,c
 11339                           
 11340                           ;motors.c: 174: if (s2<1) {s2=4;}
 11341  002312  BE5E               	btfsc	_s2+1,7,c
 11342  002314  D005               	goto	i2l3952
 11343  002316  505E               	movf	_s2+1,w,c
 11344  002318  E107               	bnz	i2l3954
 11345  00231A  045D               	decf	_s2,w,c
 11346  00231C  B0D8               	btfsc	status,0,c
 11347  00231E  D004               	goto	i2l3954
 11348  002320                     i2l3952:
 11349  002320  0E00               	movlw	0
 11350  002322  6E5E               	movwf	_s2+1,c
 11351  002324  0E04               	movlw	4
 11352  002326                     L20:
 11353  002326  6E5D               	movwf	_s2,c
 11354  002328                     i2l3954:
 11355                           
 11356                           ;motors.c: 175: }
 11357                           ;motors.c: 177: if (s2 == 1){LATCbits.LATC7 = 1;}
 11358  002328  045D               	decf	_s2,w,c
 11359  00232A  105E               	iorwf	_s2+1,w,c
 11360  00232C  A4D8               	btfss	status,2,c
 11361  00232E  D002               	goto	i2l580
 11362  002330  8E8B               	bsf	3979,7,c	;volatile
 11363  002332  D001               	goto	i2l3958
 11364  002334                     i2l580:
 11365                           
 11366                           ;motors.c: 178: else{LATCbits.LATC7 = 0;}
 11367  002334  9E8B               	bcf	3979,7,c	;volatile
 11368  002336                     i2l3958:
 11369                           
 11370                           ;motors.c: 179: if (s2 == 2){LATCbits.LATC6 = 1;}
 11371  002336  0E02               	movlw	2
 11372  002338  185D               	xorwf	_s2,w,c
 11373  00233A  105E               	iorwf	_s2+1,w,c
 11374  00233C  A4D8               	btfss	status,2,c
 11375  00233E  D002               	goto	i2l582
 11376  002340  8C8B               	bsf	3979,6,c	;volatile
 11377  002342  D001               	goto	i2l3962
 11378  002344                     i2l582:
 11379                           
 11380                           ;motors.c: 180: else{LATCbits.LATC6 = 0;}
 11381  002344  9C8B               	bcf	3979,6,c	;volatile
 11382  002346                     i2l3962:
 11383                           
 11384                           ;motors.c: 181: if (s2 == 3){LATCbits.LATC0 = 1;}
 11385  002346  0E03               	movlw	3
 11386  002348  185D               	xorwf	_s2,w,c
 11387  00234A  105E               	iorwf	_s2+1,w,c
 11388  00234C  A4D8               	btfss	status,2,c
 11389  00234E  D002               	goto	i2l584
 11390  002350  808B               	bsf	3979,0,c	;volatile
 11391  002352  D001               	goto	i2l3966
 11392  002354                     i2l584:
 11393                           
 11394                           ;motors.c: 182: else{LATCbits.LATC0 = 0;}
 11395  002354  908B               	bcf	3979,0,c	;volatile
 11396  002356                     i2l3966:
 11397                           
 11398                           ;motors.c: 183: if (s2 == 4){LATCbits.LATC5 = 1;}
 11399  002356  0E04               	movlw	4
 11400  002358  185D               	xorwf	_s2,w,c
 11401  00235A  105E               	iorwf	_s2+1,w,c
 11402  00235C  A4D8               	btfss	status,2,c
 11403  00235E  D002               	goto	i2l586
 11404  002360  8A8B               	bsf	3979,5,c	;volatile
 11405  002362  0012               	return	
 11406  002364                     i2l586:
 11407                           
 11408                           ;motors.c: 184: else{LATCbits.LATC5 = 0;}
 11409  002364  9A8B               	bcf	3979,5,c	;volatile
 11410  002366  0012               	return	
 11411  002368                     __end_of_updateS2:
 11412                           	opt stack 0
 11413                           pclatu	equ	0xFFB
 11414                           pclath	equ	0xFFA
 11415                           tblptru	equ	0xFF8
 11416                           tblptrh	equ	0xFF7
 11417                           tblptrl	equ	0xFF6
 11418                           tablat	equ	0xFF5
 11419                           prodh	equ	0xFF4
 11420                           prodl	equ	0xFF3
 11421                           intcon	equ	0xFF2
 11422                           intcon2	equ	0xFF1
 11423                           postinc0	equ	0xFEE
 11424                           fsr0h	equ	0xFEA
 11425                           fsr0l	equ	0xFE9
 11426                           wreg	equ	0xFE8
 11427                           fsr1h	equ	0xFE2
 11428                           fsr1l	equ	0xFE1
 11429                           indf2	equ	0xFDF
 11430                           postinc2	equ	0xFDE
 11431                           postdec2	equ	0xFDD
 11432                           fsr2h	equ	0xFDA
 11433                           fsr2l	equ	0xFD9
 11434                           status	equ	0xFD8
 11435                           
 11436 ;; *************** function ___awdiv *****************
 11437 ;; Defined at:
 11438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  dividend        2    6[COMRAM] int 
 11441 ;;  divisor         2    8[COMRAM] int 
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;  quotient        2   12[COMRAM] int 
 11444 ;;  sign            1   11[COMRAM] unsigned char 
 11445 ;;  counter         1   10[COMRAM] unsigned char 
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  2    6[COMRAM] int 
 11448 ;; Registers used:
 11449 ;;		wreg, status,2, status,0
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11455 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;Total ram usage:        8 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_handler
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text43
 11469  00249A                     __ptext43:
 11470                           	opt stack 0
 11471  00249A                     ___awdiv:
 11472                           	opt stack 25
 11473                           
 11474                           ;incstack = 0
 11475  00249A  0E00               	movlw	0
 11476  00249C  6E0C               	movwf	___awdiv@sign,c
 11477  00249E  AE0A               	btfss	___awdiv@divisor+1,7,c
 11478  0024A0  D006               	goto	i2l4244
 11479  0024A2  6C09               	negf	___awdiv@divisor,c
 11480  0024A4  1E0A               	comf	___awdiv@divisor+1,f,c
 11481  0024A6  B0D8               	btfsc	status,0,c
 11482  0024A8  2A0A               	incf	___awdiv@divisor+1,f,c
 11483  0024AA  0E01               	movlw	1
 11484  0024AC  6E0C               	movwf	___awdiv@sign,c
 11485  0024AE                     i2l4244:
 11486  0024AE  AE08               	btfss	___awdiv@dividend+1,7,c
 11487  0024B0  D006               	goto	i2l4250
 11488  0024B2  6C07               	negf	___awdiv@dividend,c
 11489  0024B4  1E08               	comf	___awdiv@dividend+1,f,c
 11490  0024B6  B0D8               	btfsc	status,0,c
 11491  0024B8  2A08               	incf	___awdiv@dividend+1,f,c
 11492  0024BA  0E01               	movlw	1
 11493  0024BC  1A0C               	xorwf	___awdiv@sign,f,c
 11494  0024BE                     i2l4250:
 11495  0024BE  0E00               	movlw	0
 11496  0024C0  6E0E               	movwf	___awdiv@quotient+1,c
 11497  0024C2  0E00               	movlw	0
 11498  0024C4  6E0D               	movwf	___awdiv@quotient,c
 11499  0024C6  5009               	movf	___awdiv@divisor,w,c
 11500  0024C8  100A               	iorwf	___awdiv@divisor+1,w,c
 11501  0024CA  B4D8               	btfsc	status,2,c
 11502  0024CC  D01C               	goto	i2l4272
 11503  0024CE  0E01               	movlw	1
 11504  0024D0  6E0B               	movwf	___awdiv@counter,c
 11505  0024D2  D004               	goto	i2l4258
 11506  0024D4                     i2l4256:
 11507  0024D4  90D8               	bcf	status,0,c
 11508  0024D6  3609               	rlcf	___awdiv@divisor,f,c
 11509  0024D8  360A               	rlcf	___awdiv@divisor+1,f,c
 11510  0024DA  2A0B               	incf	___awdiv@counter,f,c
 11511  0024DC                     i2l4258:
 11512  0024DC  AE0A               	btfss	___awdiv@divisor+1,7,c
 11513  0024DE  D7FA               	goto	i2l4256
 11514  0024E0                     i2l4260:
 11515  0024E0  90D8               	bcf	status,0,c
 11516  0024E2  360D               	rlcf	___awdiv@quotient,f,c
 11517  0024E4  360E               	rlcf	___awdiv@quotient+1,f,c
 11518  0024E6  5009               	movf	___awdiv@divisor,w,c
 11519  0024E8  5C07               	subwf	___awdiv@dividend,w,c
 11520  0024EA  500A               	movf	___awdiv@divisor+1,w,c
 11521  0024EC  5808               	subwfb	___awdiv@dividend+1,w,c
 11522  0024EE  A0D8               	btfss	status,0,c
 11523  0024F0  D005               	goto	i2l4268
 11524  0024F2  5009               	movf	___awdiv@divisor,w,c
 11525  0024F4  5E07               	subwf	___awdiv@dividend,f,c
 11526  0024F6  500A               	movf	___awdiv@divisor+1,w,c
 11527  0024F8  5A08               	subwfb	___awdiv@dividend+1,f,c
 11528  0024FA  800D               	bsf	___awdiv@quotient,0,c
 11529  0024FC                     i2l4268:
 11530  0024FC  90D8               	bcf	status,0,c
 11531  0024FE  320A               	rrcf	___awdiv@divisor+1,f,c
 11532  002500  3209               	rrcf	___awdiv@divisor,f,c
 11533  002502  2E0B               	decfsz	___awdiv@counter,f,c
 11534  002504  D7ED               	goto	i2l4260
 11535  002506                     i2l4272:
 11536  002506  500C               	movf	___awdiv@sign,w,c
 11537  002508  B4D8               	btfsc	status,2,c
 11538  00250A  D004               	goto	i2l4276
 11539  00250C  6C0D               	negf	___awdiv@quotient,c
 11540  00250E  1E0E               	comf	___awdiv@quotient+1,f,c
 11541  002510  B0D8               	btfsc	status,0,c
 11542  002512  2A0E               	incf	___awdiv@quotient+1,f,c
 11543  002514                     i2l4276:
 11544  002514  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11545  002518  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11546  00251C  0012               	return	
 11547  00251E                     __end_of___awdiv:
 11548                           	opt stack 0
 11549                           pclatu	equ	0xFFB
 11550                           pclath	equ	0xFFA
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           intcon2	equ	0xFF1
 11559                           postinc0	equ	0xFEE
 11560                           fsr0h	equ	0xFEA
 11561                           fsr0l	equ	0xFE9
 11562                           wreg	equ	0xFE8
 11563                           fsr1h	equ	0xFE2
 11564                           fsr1l	equ	0xFE1
 11565                           indf2	equ	0xFDF
 11566                           postinc2	equ	0xFDE
 11567                           postdec2	equ	0xFDD
 11568                           fsr2h	equ	0xFDA
 11569                           fsr2l	equ	0xFD9
 11570                           status	equ	0xFD8
 11571                           pclatu	equ	0xFFB
 11572                           pclath	equ	0xFFA
 11573                           tblptru	equ	0xFF8
 11574                           tblptrh	equ	0xFF7
 11575                           tblptrl	equ	0xFF6
 11576                           tablat	equ	0xFF5
 11577                           prodh	equ	0xFF4
 11578                           prodl	equ	0xFF3
 11579                           intcon	equ	0xFF2
 11580                           intcon2	equ	0xFF1
 11581                           postinc0	equ	0xFEE
 11582                           fsr0h	equ	0xFEA
 11583                           fsr0l	equ	0xFE9
 11584                           wreg	equ	0xFE8
 11585                           fsr1h	equ	0xFE2
 11586                           fsr1l	equ	0xFE1
 11587                           indf2	equ	0xFDF
 11588                           postinc2	equ	0xFDE
 11589                           postdec2	equ	0xFDD
 11590                           fsr2h	equ	0xFDA
 11591                           fsr2l	equ	0xFD9
 11592                           status	equ	0xFD8
 11593                           
 11594                           	psect	rparam
 11595  0000                     pclatu	equ	0xFFB
 11596                           pclath	equ	0xFFA
 11597                           tblptru	equ	0xFF8
 11598                           tblptrh	equ	0xFF7
 11599                           tblptrl	equ	0xFF6
 11600                           tablat	equ	0xFF5
 11601                           prodh	equ	0xFF4
 11602                           prodl	equ	0xFF3
 11603                           intcon	equ	0xFF2
 11604                           intcon2	equ	0xFF1
 11605                           postinc0	equ	0xFEE
 11606                           fsr0h	equ	0xFEA
 11607                           fsr0l	equ	0xFE9
 11608                           wreg	equ	0xFE8
 11609                           fsr1h	equ	0xFE2
 11610                           fsr1l	equ	0xFE1
 11611                           indf2	equ	0xFDF
 11612                           postinc2	equ	0xFDE
 11613                           postdec2	equ	0xFDD
 11614                           fsr2h	equ	0xFDA
 11615                           fsr2l	equ	0xFD9
 11616                           status	equ	0xFD8
 11617                           
 11618                           	psect	temp
 11619  00005F                     btemp:
 11620                           	opt stack 0
 11621  00005F                     	ds	1
 11622  0000                     int$flags	set	btemp
 11623                           pclatu	equ	0xFFB
 11624                           pclath	equ	0xFFA
 11625                           tblptru	equ	0xFF8
 11626                           tblptrh	equ	0xFF7
 11627                           tblptrl	equ	0xFF6
 11628                           tablat	equ	0xFF5
 11629                           prodh	equ	0xFF4
 11630                           prodl	equ	0xFF3
 11631                           intcon	equ	0xFF2
 11632                           intcon2	equ	0xFF1
 11633                           postinc0	equ	0xFEE
 11634                           fsr0h	equ	0xFEA
 11635                           fsr0l	equ	0xFE9
 11636                           wreg	equ	0xFE8
 11637                           fsr1h	equ	0xFE2
 11638                           fsr1l	equ	0xFE1
 11639                           indf2	equ	0xFDF
 11640                           postinc2	equ	0xFDE
 11641                           postdec2	equ	0xFDD
 11642                           fsr2h	equ	0xFDA
 11643                           fsr2l	equ	0xFD9
 11644                           status	equ	0xFD8


Data Sizes:
    Strings     425
    Constant    42
    Data        0
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     66      94
    BANK0           128     39      59
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[16]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[16]), STR_34(CODE[17]), 
		 -> STR_33(CODE[22]), STR_32(CODE[17]), STR_31(CODE[21]), STR_30(CODE[17]), 
		 -> STR_29(CODE[12]), STR_28(CODE[17]), STR_27(CODE[8]), STR_26(CODE[15]), 
		 -> STR_25(CODE[8]), STR_24(CODE[16]), STR_23(CODE[17]), STR_22(CODE[16]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[12]), STR_18(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[11]), 
		 -> STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[3]), STR_8(CODE[16]), STR_7(CODE[16]), STR_6(CODE[12]), 
		 -> STR_5(CODE[12]), STR_4(CODE[17]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _calibrateWheels->_updateS1
    _calibrateWheels->_updateS3
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->___awdiv
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_displayLog

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   31720
                                              9 BANK0     30    30      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                           _PWM2slow
                            ___awmod
                             _addRun
                    _calibrateWheels
                         _displayLog
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                             35 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             33 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             33 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     571
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             35 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             45 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             32 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    7236
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    8349
                                              0 BANK0      9     7      2
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    7041
                                             44 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1204
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             39 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             32 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateWheels                                      4     4      0    1535
                                             35 COMRAM     4     4      0
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     554
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     686
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _startTMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2493
                                             36 COMRAM    27     5     22
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     834
                                             32 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      62
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     808
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM2slow                                             4     2      2     194
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 6     2      4     728
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             22    22      0    1982
                                             14 COMRAM    18    18      0
                            ___awdiv
                           _updateS2
                           i2___wmul
                        i2_startTMR1
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     158
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     290
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_startTMR1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _PWM2slow
   ___awmod
   _addRun
     _eepromRead
     _eepromWrite
   _calibrateWheels
     _readADC
     _startTMR1
     _updateS1
     _updateS3
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _startTMR1
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   ___awdiv
     i2___wmul (ARG)
   _updateS2
   i2___wmul
   i2_startTMR1
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     27      3B       5       46.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     42      5E       1       74.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      34        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Apr 13 00:26:09 2017

                        _t 0047               ___awdiv@sign 000C                         _s1 00B8  
                       _s2 005D                         _s3 00B6                         _t2 0045  
                       _t3 0043        ___wmul@multiplicand 0023                __CFG_BORV$3 000000  
         ?_calibrateWheels 0001               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l220 041E  
                      l222 042E                        l231 04B8                        l320 0D1C  
                      l240 0522                        l216 03FE                        l233 04C8  
                      l242 0532                        l218 040E                        l227 0498  
                      l244 0542                        l229 04A8                        l238 0512  
                      l511 1646                        l503 1612                        l513 1642  
                      l505 160E                        l601 1D36                        l515 1660  
                      l507 162C                        l611 1D66                        l603 1D32  
                      l540 174E                        l620 1DC4                        l517 165C  
                      l509 1628                        l605 1D50                        l293 0A5C  
                      l702 2A1A                        l534 1712                        l630 1DF4  
                      l622 1DC0                        l607 1D4C                        l536 1726  
                      l640 1E7E                        l624 1DDE                        l616 1DAA  
                      l609 1D6A                        l538 173A                        l490 158C  
                      l642 1E92                        l626 1DDA                        l618 1DA6  
                      l394 2B52                        l492 15AA                        l484 1576  
                      l644 1EA6                        l628 1DF8                        l469 268A  
                      l494 15A6                        l486 1572                        l638 1E6A  
                      l822 12EC                        l496 15C4                        l488 1590  
                      l680 2B3C                        l498 15C0                        l690 2B34  
                      l683 2B4A                        l597 1D1C                        l599 1D18  
                      l775 213E                        l696 2A44                        l689 2B38  
                      l787 21FA               __CFG_CPB$OFF 000000                        _PR2 000FCB  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
             ___awmod@sign 0026                        prod 000FF3               PWM2slow@duty 0021  
                      wreg 000FE8        __end_ofi2_startTMR1 2B84               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1214 258E                       l4002 273C  
                     l1267 28C2                       l1277 29E2                       l4030 20B8  
                     l4040 2102                       l4032 20C6                       l4008 2758  
                     l4042 2112                       l4034 20D6                       l3410 254C  
                     l4300 26CA                       l4060 2174                       l4052 2146  
                     l4044 2120                       l4036 20E4                       l4028 20A8  
                     l3420 2580                       l3412 2550                       l3502 15EE  
                     l4070 21BE                       l4062 2182                       l4038 20F4  
                     l4046 2128                       l4312 26F6                       l4304 26DE  
                     l3512 162E                       l3520 1664                       l4072 21CE  
                     l4064 2192                       l3408 2540                       l3530 1690  
                     l4082 2202                       l4074 21DC                       l4066 21A0  
                     l4058 2164                       l6010 08D6                       l4308 26E8  
                     l3540 16CA                       l3516 1648                       l3508 1614  
                     l3612 1D38                       l3604 1D06                       l3620 1D6E  
                     l4068 21B0                       l4076 21E4                       l6020 090A  
                     l6012 08E0                       l3550 1702                       l6110 0B30  
                     l6030 093C                       l3544 16E6                       l3536 16B6  
                     l3640 1DE0                       l3632 1DAC                       l3616 1D52  
                     l3608 1D1E                       l5400 13BE                       l6112 0B4C  
                     l6016 08F6                       l3570 1764                       l3562 173C  
                     l3554 1714                       l3546 16F0                       l3490 15AC  
                     l3482 1578                       l5322 121A                       l6114 0B5C  
                     l6130 0BCE                       l6106 0B18                       l6034 0958  
                     l4292 26B0                       l3476 1552                       l3468 152C  
                     l3660 1E5A                       l3652 1E2A                       l3636 1DC6  
                     l3628 1D94                       l3644 1DFC                       l5420 141E  
                     l5412 1400                       l5404 13E2                       l5324 1228  
                     l6116 0B7E                       l6060 09F0                       l6036 0960  
                     l3582 17A4                       l3574 1778                       l3558 1728  
                     l3566 1750                       l3486 1592                       l3494 15C8  
                     l5270 2890                       l5254 2B1E                       l5430 144A  
                     l5406 13EA                       l5342 12BA                       l5334 125C  
                     l5318 120A                       l5502 0E9C                       l5510 0EC8  
                     l6134 0BE0                       l6070 0A38                       l6062 0A00  
                     l6054 09CC                       l6038 0968                       l4296 26BE  
                     l4288 26A4                       l3672 1E94                       l3664 1E6C  
                     l3592 1CD6                       l5272 2898                       l5432 148E  
                     l5440 14E4                       l5424 1432                       l5328 122E  
                     l6160 0C7E                       l6152 0C3C                       l6128 0BC4  
                     l6080 0A76                       l6064 0A08                       l4298 26C6  
                     l3842 2AF4                       l3578 178E                       l3658 1E50  
                     l5282 28B8                       l5274 289C                       l5290 29B8  
                     l5442 14EA                       l5418 1416                       l5362 1334  
                     l5346 12BE                       l6170 0CEC                       l6162 0C8C  
                     l6154 0C44                       l6138 0BF0                       l6090 0AB8  
                     l6082 0A88                       l6066 0A18                       l6058 09E8  
                     l3844 2B02                       l3668 1E80                       l5292 29C0  
                     l5428 1444                       l5364 1338                       l5444 14F2  
                     l5508 0EC2                       l6180 0D98                       l6148 0C20  
                     l6092 0AD0                       l6068 0A28                       l6156 0C4C  
                     l5294 29C4                       l5438 14D4                       l5358 131A  
                     l6182 0DAE                       l6166 0CB8                       l6086 0AA0  
                     l6078 0A66                       l5702 025E                       l5376 1364  
                     l5392 1394                       l6088 0AA8                       l5640 0066  
                     l5298 29D8                       l5378 1368                       l5394 13A4  
                     l3866 2A92                       l5802 0450                       l5650 0086  
                     l5812 0486                       l5644 007A                       l5590 2396  
                     l5910 067C                       l5822 04AA                       l5830 04CA  
                     l5670 016E                       l5592 239E                       l5840 0500  
                     l5680 019E                       _ADFM 007E07                       l5914 068C  
                     l5850 0524                       l5826 04BA                       l5818 049A  
                     l5666 0156                       l5780 03EC                       l5940 0722  
                     l5668 015E                       l3998 2734                       l5854 0534  
                     l5846 0514                       l5862 0564                       l5790 0410  
                     l5686 01C2                       l5678 0196                       l5694 01FA  
                     l5936 070E                       l5880 05C6                       l5688 01CA  
                     l5970 07DA                       l5954 0780                       l5858 0544  
                     l5794 0420                       l5786 0400                       l5698 023E  
                     l5972 07EA                       l5964 07B6                       l5974 07FA  
                     l5958 079C                       l5798 0430                       l5992 0858  
                     l5968 07D2                       l5994 086C                       l5996 087C  
                     l5988 083C                       l5998 0896                       STR_1 FF16  
                     STR_2 FF56                       STR_3 FF26                       STR_4 FEC4  
                     STR_5 FFC7                       STR_6 FFAF                       STR_7 FF36  
                     STR_8 FF66                       STR_9 FFFB                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u4010 1D8C                       u4110 1E20  
                     u3500 154A                       u3600 15E6                       u3720 16AC  
                     u4185 27F8                       u4450 2A90                       _PEIE 007F96  
                     u3910 1CFE                       u7030 0EB8                       u7015 2A2E  
                     _RCEN 007E2B                       u4495 29F6                       u8007 0670  
                     u8017 06A0                       u8107 0FF0                       u8027 06BA  
                     u8117 108C                       u8037 0772                       u8207 1512  
                     u8127 10EC                       u8047 09BE                       u8217 1558  
                     u8137 114C                       u8057 0E36                       u8227 15F4  
                     u8147 11AC                       u8067 296A                       u8237 1674  
                     u8157 283C                       u8077 299E                       u8247 2AFA  
                     u8167 2846                       u8087 0EF6                       u8257 266E  
                     u8177 2868                       u8097 0F54                       u8187 2872  
                     u8197 1CBC                       u7840 0D60                       u7907 027A  
                     u7917 02B6                       u7927 02F6                       u7937 0336  
                     u7947 0376                       u7957 03D4                       u7967 046E  
                     u7887 005C                       u7977 04E8                       u7897 012C  
                     u7987 0594                       u7997 05DA                       _PWM1 291A  
                     _PWM2 2618                       _RSEN 007E29                displayLog@i 0085  
          __end_of_PWM1off 2BBA            __end_of_PWM2off 2BB0                       _main 0012  
                     _keys FE2B                       _time 00A7                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 005F                main@standby 00A5                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                 i2_updateS1 17BC  
               i2_updateS3 1EAA                      ?_PWM1 0021                      ?_PWM2 0021  
         ?_I2C_Master_Init 002E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 251E                      _ADRES 000FC3  
                    _EEADR 000FA9                      STR_10 FF76                      STR_11 FF86  
                    STR_12 FFFB                      STR_20 FFDE                      STR_21 FFDE  
                    STR_13 FF96                      STR_30 FEB3                      STR_14 FFD3  
                    STR_22 FF46                      STR_15 FFF7                      STR_23 FED5  
                    STR_31 FE6B                      STR_16 FFF7                      STR_40 FEB3  
                    STR_32 FEB3                      STR_24 FEE6                      STR_17 FFF7  
                    STR_25 FFEF                      STR_41 FEA2                      STR_33 FE55  
                    STR_18 FFF7                      STR_34 FEB3                      STR_26 FE5C  
                    STR_42 FE80                      STR_27 FFE7                      STR_19 FFBB  
                    STR_35 FEF6                      STR_36 FEB3                      STR_28 FEB3  
          __end_of___awmod 2700                      STR_29 FFA3                      STR_37 FE91  
                    STR_38 FEB3                      STR_39 FF06            __end_of___lldiv 25A0  
                    _T0CON 000FD5            ___awdiv@divisor 0009                      _T1CON 000FCD  
                    _T2CON 000FCA                      _T3CON 000FB1            __end_of___lwdiv 28CC  
          __end_of___lwmod 29EC                      i2l511 18F6                      i2l503 18C2  
                    i2l513 18F2                      i2l505 18BE                      i2l601 1F2A  
                    i2l185 1C7A                      i2l515 1910                      i2l507 18DC  
                    i2l611 1F5A                      i2l603 1F26                      i2l540 19FE  
                    i2l620 1FB8                      i2l517 190C                      i2l509 18D8  
                    i2l605 1F44                      i2l534 19C2                      i2l630 1FE8  
                    i2l622 1FB4                      i2l607 1F40                      i2l560 2288  
                    i2l536 19D6                      i2l640 2072                      i2l624 1FD2  
                    i2l616 1F9E                      i2l609 1F5E                      i2l570 22DA  
                    i2l562 22A6                      i2l538 19EA                      i2l490 183C  
                    i2l642 2086                      i2l626 1FCE                      i2l618 1F9A  
                    i2l580 2334                      i2l572 22D6                      i2l564 22A2  
                    i2l492 185A                      i2l484 1826                      i2l644 209A  
                    i2l628 1FEC                      i2l582 2344                      i2l566 22C0  
                    i2l558 228C                      i2l494 1856                      i2l486 1822  
                    i2l638 205E                      i2l584 2354                      i2l568 22BC  
                    i2l496 1874                      i2l488 1840                      i2l586 2364  
                    i2l498 1870                      i2l597 1F10                      i2l599 1F0C  
          ___awdiv@counter 000B               updateS1@mode 0021               updateS2@mode 0001  
             updateS3@mode 0021                      _TMR0H 000FD7                      _TMR1H 000FCF  
                    _TMR0L 000FD6                      _TMR3H 000FB3                      _TMR1L 000FCE  
                    _TMR3L 000FB2                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 2B9C            __end_of_handler 1CB6             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC 2B08  
          __end_of_initLCD 29AA             __CFG_EBTRB$OFF 000000            __end_of_dpowers FE46  
             main@sodaLoad 008D           __end_of_PWM2slow 291A            __end_of_isdigit 2B26  
                    _sodaI 0049               main@sodaSort 009F                      _soupI 004B  
                    _putch 2B84                      main@s 008F                      pclath 000FFA  
                    tablat 000FF5           __end_ofi2___wmul 2AE4                      status 000FD8  
             main@soupLoad 008B               main@soupSort 009D             __CFG_PBADEN$ON 000000  
             __end_of_PWM1 2964               __end_of_PWM2 2690            __initialization 2A4C  
             __end_of_main 0E80               __end_of_keys FE3C                     ??_PWM1 0023  
                   ??_PWM2 0025                i2_startTMR1 2B74                     ??_main 0089  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0022  
       ??_I2C_Master_Start 0022                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0024                     _ADCON2 000FC0                  ??_PWM1off 0021  
                ??_PWM2off 0021                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7           ___awdiv@dividend 0007                     ?_putch 0001  
                   _CVRCON 000FB5                     i2l4400 19A0                     i2l4250 24BE  
                   i2l4330 1802                     i2l4322 17DC                     i2l4260 24E0  
                   i2l4244 24AE                     i2l4412 19D8                     i2l4420 1A00  
                   i2l4404 19B2                     i2l4340 1842                     i2l4256 24D4  
                   i2l4272 2506                     i2l4432 1A3E                     i2l4424 1A14  
                   i2l4416 19EC                     i2l4408 19C4                     i2l4344 185C  
                   i2l4336 1828                     i2l4512 2044                     i2l4258 24DC  
                   i2l4370 18F8                     i2l4362 18C4                     i2l4522 2074  
                   i2l4514 204E                     i2l4506 201E                     i2l4276 2514  
                   i2l4268 24FC                     i2l4436 1A54                     i2l4428 1A28  
                   i2l4356 189E                     i2l4348 1878                     i2l3910 2246  
                   i2l4390 1966                     i2l4366 18DE                     i2l4374 1914  
                   i2l4526 2088                     i2l4518 2060                     i2l4470 1F46  
                   i2l4462 1F12                     i2l4446 1ECA                     i2l4384 1940  
                   i2l3930 22A8                     i2l3922 2276                     i2l4394 197A  
                   i2l4490 1FBA                     i2l4482 1F88                     i2l4466 1F2C  
                   i2l4458 1EFA                     i2l4474 1F62                     i2l4570 1B68  
                   i2l4556 1AC8                     i2l3934 22C2                     i2l3926 228E  
                   i2l4398 1996                     i2l4494 1FD4                     i2l4486 1FA0  
                   i2l4590 1C68                     i2l4582 1BF2                     i2l4574 1BD6  
                   i2l3952 2320                     i2l3962 2346                     i2l3954 2328  
                   i2l3946 2302                     i2l3938 22DE                     i2l4498 1FF0  
                   i2l4594 1C74                     i2l4578 1BE6                     i2l3966 2356  
                   i2l3958 2336                     _OSCCON 000FD3                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _TMR1IE 007CE8                     _TMR1IF 007CF0  
                   _TMR0ON 007EAF                     _TMR1ON 007E68                     _TMR3ON 007D88  
                   _S1mode 005B                     _S2mode 0059                     _SSPADD 000FC8  
                   _S3mode 0057                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038  
                   _addRun 2368                     ___wmul 2A98                  ??___awdiv 000B  
           __CFG_STVREN$ON 000000                  ??___awmod 0025                ?i2_updateS1 0001  
              ?i2_updateS3 0001                  ??___lldiv 0029                  ??___lwdiv 0025  
                ??___lwmod 002C              displayLog@run 0080           __end_of_keycheck 2B52  
         calibrateWheels@i 0026                     clear_0 2A52                     clear_1 2A5E  
          eepromWrite@data 0021           __end_of_currtime FE55           ___awdiv@quotient 000D  
          ___awmod@divisor 0023            ___awmod@counter 0025                  ??_lcdInst 0023  
                   _printf 1200                  ??_handler 000F                  ??_readADC 0021  
                ??_initLCD 0024                  ??_isdigit 0021               __mediumconst FE2A  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            ?_keyinterrupt 0001           __end_of_updateS1 17BC           __end_of_updateS2 2368  
         __end_of_updateS3 1EAA                 __accesstop 0080    __end_of__initialization 2A64  
             addRun@sodaNT 0035               addRun@soupNL 0039              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 2B90                  ?_PWM2slow 0021  
                ?i2___wmul 0001         __size_of_lcdNibble 0056          eepromRead@address 0023  
           ??_keyinterrupt 0021             i2updateS1@mode 0001             i2updateS3@mode 0001  
                  ??_putch 0023                 addRun@date 002B        __size_ofi2_updateS1 02B0  
      __size_ofi2_updateS3 01F4                 __pbssBANK0 00A7                 addRun@mins 002F  
               addRun@secs 0031                 addRun@year 0027                    PWM2@dir 0023  
                  ?_addRun 0025                    ?___wmul 0021                    _CCP1CON 000FBD  
                  _CCP2CON 000FBA                 ??_PWM2slow 0023                    ?_printf 002D  
               _labelState 00B2                 ??i2___wmul 0005                 _eepromRead 2A24  
        displayLog@currRun 0087   __size_of_calibrateWheels 0188               _handler$1818 001F  
       __size_of_startTMR1 0010                 _displayLog 0E80                    _PWM1off 2BB0  
                  _PWM2off 2BA6                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                  ?_keycheck 0001          __end_of_lcdNibble 287A  
                  __Hparam 0000                    __Lparam 0000            __size_of_addRun 0132  
                  ___awdiv 249A                  ?_updateS1 0021                  ?_updateS2 0001  
                ?_updateS3 0021                    ___awmod 2690                    ___lldiv 251E  
          __size_of___wmul 0026                    ___lwdiv 287A                    ___lwmod 29AA  
                _CMCONbits 000FB4                 _homescreen 2768                    __pcinit 2A4C  
                  __ramtop 1000                 _initialize 25A0               ?i2_startTMR1 0001  
                  _lcdInst 2B90                    _handler 0008                    __ptext0 0012  
                  __ptext1 2700                    __ptext2 2B9C                    __ptext3 2BBA  
                  __ptext4 2BC2                    __ptext5 2A72                    __ptext6 2B52  
                  __ptext7 2B26                    __ptext8 25A0                    __ptext9 2964  
          __size_of_printf 030C                  _T0CONbits 000FD5                    _readADC 2AE4  
                  _initLCD 2964          __end_of_hexpowers FE4E                    _dpowers FE3C  
                  _isdigit 2B08           ___awmod@dividend 0021                    _seconds 00B4  
                  _sodaCnt 00AE   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _soupCnt 00B0  
           main@prevSodaIR 00A1             __pintcode_body 1A6C       end_of_initialization 2A64  
           main@prevSoupIR 00A3                 ??_keycheck 0021              __Lmediumconst FE2A  
                  int_func 1A6C        i2___wmul@multiplier 0001  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0025            ___lldiv@counter 002D  
     __end_of_keyinterrupt 2B3C                    printf@c 0042                    printf@f 002D  
         I2C_Master_Init@c 002E           I2C_Master_Read@a 0022                    postdec2 000FDD  
        __end_of_startTMR1 2B74                    postinc0 000FEE                    postinc2 000FDE  
             ??i2_updateS1 0003               ??i2_updateS3 0003                 ??_updateS1 0023  
               ??_updateS2 0003                 ??_updateS3 0023                  _PORTBbits 000F81  
              ?_eepromRead 0001              addRun@currRun 003E                 _updateTime 2700  
              ?_displayLog 0080         __end_ofi2_updateS1 1A6C         __end_ofi2_updateS3 209E  
        ??_calibrateWheels 0024                _CCP1CONbits 000FBD              ??_eepromWrite 0022  
              printf@width 0040                _CCP2CONbits 000FBA                 main@sodaNT 009B  
               main@soupNL 0097                ?_homescreen 0001             __end_of_addRun 249A  
           __end_of___wmul 2ABE                ?_initialize 0001          __size_of_PWM2slow 004E  
         i2___wmul@product 0005             __end_of_printf 150C        start_initialization 2A4C  
              updateTime@j 0024          __size_ofi2___wmul 0026          ??_I2C_Master_Init 0032  
        ??_I2C_Master_Read 0022          ??_I2C_Master_Wait 0021          ??_I2C_Master_Stop 0022  
         __CFG_OSC$INTIO67 000000        __size_of_eepromRead 0028                   ??_addRun 003B  
      __end_of_eepromWrite 2A24                   ??___wmul 0025        __size_of_displayLog 0380  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0035                addRun@hours 002D  
              addRun@sodaT 0033                addRun@month 0029                addRun@soupL 0037  
     __size_ofi2_startTMR1 0010                __pbssCOMRAM 0043              __pcstackBANK0 0080  
              ?_updateTime 0001               _isdigit$1448 0022                   ?_PWM1off 0001  
                 ?_PWM2off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0016  
      __size_of_initialize 0078                  addRun@dur 0025           _I2C_Master_Start 2BC2  
         _I2C_Master_Write 2B9C          __size_of_keycheck 0016           ___lwdiv@dividend 0021  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FE2A  
                _lcdNibble 2824                   ?___awdiv 0007                   ?___awmod 0021  
                 ?___lldiv 0021                   PWM1@duty 0021                   PWM2@duty 0021  
                 ?___lwdiv 0021                   ?___lwmod 0028          __size_of_updateS1 02B0  
        __size_of_updateS2 0142          __size_of_updateS3 01F4                   ?_lcdInst 0001  
                 ?_handler 0001                   ?_readADC 0001                   ?_initLCD 0001  
                 ?_isdigit 0001               _keyinterrupt 2B26                  _hexpowers FE46  
         ___lwdiv@quotient 0026             __size_of_putch 000C         eepromWrite@address 0024  
      calibrateWheels@prev 0024             ___wmul@product 0025                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite 29EC                  _sodaAlign 004F  
                 i2u507_40 17FA                   _PIR2bits 000FA1                   i2u517_40 1896  
                 i2u454_40 226E                   i2u464_40 22FA                   i2u529_40 195C  
                 i2u548_40 1EF2                   i2u558_40 1F80                  _sodaSteps 0053  
                 i2u830_47 1924                   i2u831_47 222C                   i2u568_40 2014  
                 i2u826_47 1EB0                   i2u827_47 17C2                   i2u828_47 1808  
                 i2u829_47 18A4           __CFG_WDTPS$32768 000000        __size_of_updateTime 0068  
               ?_lcdNibble 0001                   _PWM2slow 28CC                  _startTMR1 2B64  
               _ADCON0bits 000FC2          ___wmul@multiplier 0021                  _soupAlign 004D  
                 i2___wmul 2ABE              lcdNibble@data 0022               ??_eepromRead 0021  
               printf@flag 003F              lcdNibble@temp 0021                  _soupSteps 0055  
               printf@prec 003C                  main@sodaT 0099            _calibrateWheels 209E  
                main@soupL 0095           main@prevSodaLoad 0093               ??_displayLog 0082  
      I2C_Master_Read@temp 0023           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
         main@prevSoupLoad 0091                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead 2A4C         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0043           __size_of___awdiv 0084           __size_of___awmod 0070  
       __end_of_displayLog 1200      i2___wmul@multiplicand 0003           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             readADC@channel 0022  
             ??_initialize 0036                 ?_startTMR1 0001           __size_of_lcdInst 000C  
         __size_of_handler 1CAE            _I2C_Master_Init 27CA           __size_of_readADC 0024  
          _I2C_Master_Read 2A72           __size_of_initLCD 0046            _I2C_Master_Wait 2B52  
          _I2C_Master_Stop 2BBA           __size_of_isdigit 001E            ___lwdiv@divisor 0023  
          ___lwdiv@counter 0025                   __ptext10 27CA                   __ptext11 251E  
                 __ptext20 2B90                   __ptext12 2768                   __ptext21 2824  
                 __ptext13 0E80                   __ptext30 2A24                   __ptext22 2B3C  
                 __ptext14 1200                   __ptext31 2690                   __ptext23 209E  
                 __ptext15 2B84                   __ptext40 2B74                   __ptext32 28CC  
                 __ptext24 1CB6                   __ptext16 2B08                   __ptext41 2ABE  
                 __ptext33 2BA6                   __ptext25 150C                   __ptext17 2A98  
                 __ptext42 2226                   __ptext34 2618                   __ptext26 2B64  
                 __ptext18 29AA                   __ptext43 249A                   __ptext35 2BB0  
                 __ptext27 2AE4                   __ptext19 287A                   __ptext36 291A  
                 __ptext28 2368                   __ptext29 29EC                   __ptext38 1EAA  
                 __ptext39 17BC              __size_of_PWM1 004A              __size_of_PWM2 0078  
       __end_of_homescreen 27CA                   _keycheck 2B3C                   _tabState 0051  
            __size_of_main 0E6E                   _currtime FE4E                   _keypress 00BA  
       __end_of_initialize 2618                ??_lcdNibble 0021                   int$flags 005F  
                 _updateS1 150C                   _updateS2 2226                   _updateS3 1CB6  
                printf@idx 0039                  printf@val 003D    __end_of_calibrateWheels 2226  
                putch@data 0023   __end_of_I2C_Master_Start 2BCA                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write 2BA6                 _INTCONbits 000FF2               ??_updateTime 0024  
                 isdigit@c 0023                   intlevel2 0000           ___lwmod@dividend 0028  
         ___lldiv@dividend 0021                   printf@ap 003A         __end_of_updateTime 2768  
  __end_of_I2C_Master_Init 2824    __end_of_I2C_Master_Read 2A98    __end_of_I2C_Master_Wait 2B64  
  __end_of_I2C_Master_Stop 2BC2                lcdInst@data 0023              ??i2_startTMR1 0001  
              ??_startTMR1 0021           ___lldiv@quotient 0029          I2C_Master_Write@d 0022  
          ___lwmod@divisor 002A            ___lwmod@counter 002C               ?_eepromWrite 0021  
