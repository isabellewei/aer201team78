

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 12 14:54:18 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.41
    61                           ; Generated 25/01/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4620 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	mediumconst
    96  00FE2A                     __pmediumconst:
    97                           	opt stack 0
    98  00FE2A  00                 	db	0
    99  00FE2B                     _keys:
   100                           	opt stack 0
   101  00FE2B  31                 	db	49
   102  00FE2C  32                 	db	50
   103  00FE2D  33                 	db	51
   104  00FE2E  41                 	db	65
   105  00FE2F  34                 	db	52
   106  00FE30  35                 	db	53
   107  00FE31  36                 	db	54
   108  00FE32  42                 	db	66
   109  00FE33  37                 	db	55
   110  00FE34  38                 	db	56
   111  00FE35  39                 	db	57
   112  00FE36  43                 	db	67
   113  00FE37  2A                 	db	42
   114  00FE38  30                 	db	48
   115  00FE39  23                 	db	35
   116  00FE3A  44                 	db	68
   117  00FE3B  00                 	db	0
   118  00FE3C                     __end_of_keys:
   119                           	opt stack 0
   120  00FE3C                     _dpowers:
   121                           	opt stack 0
   122  00FE3C  0001               	dw	1
   123  00FE3E  000A               	dw	10
   124  00FE40  0064               	dw	100
   125  00FE42  03E8               	dw	1000
   126  00FE44  2710               	dw	10000
   127  00FE46                     __end_of_dpowers:
   128                           	opt stack 0
   129  00FE46                     _hexpowers:
   130                           	opt stack 0
   131  00FE46  0001               	dw	1
   132  00FE48  0010               	dw	16
   133  00FE4A  0100               	dw	256
   134  00FE4C  1000               	dw	4096
   135  00FE4E                     __end_of_hexpowers:
   136                           	opt stack 0
   137  00FE4E                     _currtime:
   138                           	opt stack 0
   139  00FE4E  30                 	db	48
   140  00FE4F  03                 	db	3
   141  00FE50  01                 	db	1
   142  00FE51  04                 	db	4
   143  00FE52  12                 	db	18
   144  00FE53  04                 	db	4
   145  00FE54  17                 	db	23
   146  00FE55                     __end_of_currtime:
   147                           	opt stack 0
   148  0000                     _ADRES	set	4035
   149  0000                     _TMR1L	set	4046
   150  0000                     _TMR1H	set	4047
   151  0000                     _T1CON	set	4045
   152  0000                     _TMR3L	set	4018
   153  0000                     _TMR3H	set	4019
   154  0000                     _T3CON	set	4017
   155  0000                     _ADCON0bits	set	4034
   156  0000                     _ADCON0	set	4034
   157  0000                     _PIR2bits	set	4001
   158  0000                     _EECON2	set	4007
   159  0000                     _EEDATA	set	4008
   160  0000                     _EECON1bits	set	4006
   161  0000                     _EEADR	set	4009
   162  0000                     _EEADRH	set	4010
   163  0000                     _PORTB	set	3969
   164  0000                     _PORTBbits	set	3969
   165  0000                     _CCP2CONbits	set	4026
   166  0000                     _CCP1CONbits	set	4029
   167  0000                     _SSPBUF	set	4041
   168  0000                     _SSPADD	set	4040
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPCON1	set	4038
   171  0000                     _SSPSTAT	set	4039
   172  0000                     _ADRESH	set	4036
   173  0000                     _LATAbits	set	3977
   174  0000                     _LATEbits	set	3981
   175  0000                     _LATCbits	set	3979
   176  0000                     _LATBbits	set	3978
   177  0000                     _LATDbits	set	3980
   178  0000                     _T0CONbits	set	4053
   179  0000                     _CMCONbits	set	4020
   180  0000                     _CVRCON	set	4021
   181  0000                     _ADCON2	set	4032
   182  0000                     _ADCON1	set	4033
   183  0000                     _LATE	set	3981
   184  0000                     _LATD	set	3980
   185  0000                     _LATC	set	3979
   186  0000                     _LATB	set	3978
   187  0000                     _LATA	set	3977
   188  0000                     _T2CON	set	4042
   189  0000                     _CCPR2L	set	4027
   190  0000                     _CCP2CON	set	4026
   191  0000                     _CCPR1L	set	4030
   192  0000                     _CCP1CON	set	4029
   193  0000                     _PR2	set	4043
   194  0000                     _TRISE	set	3990
   195  0000                     _TRISD	set	3989
   196  0000                     _TRISC	set	3988
   197  0000                     _TRISB	set	3987
   198  0000                     _TRISA	set	3986
   199  0000                     _OSCTUNEbits	set	3995
   200  0000                     _OSCCON	set	4051
   201  0000                     _TMR0L	set	4054
   202  0000                     _TMR0H	set	4055
   203  0000                     _T0CON	set	4053
   204  0000                     _INTCONbits	set	4082
   205  0000                     _TMR3ON	set	32136
   206  0000                     _ACKEN	set	32300
   207  0000                     _ACKDT	set	32301
   208  0000                     _RCEN	set	32299
   209  0000                     _PEN	set	32298
   210  0000                     _RSEN	set	32297
   211  0000                     _SEN	set	32296
   212  0000                     _TRISC4	set	31908
   213  0000                     _TRISC3	set	31907
   214  0000                     _PEIE	set	32662
   215  0000                     _TMR1IE	set	31976
   216  0000                     _TMR0IE	set	32661
   217  0000                     _ADFM	set	32263
   218  0000                     _nRBPU	set	32655
   219  0000                     _TMR1ON	set	32360
   220  0000                     _TMR1IF	set	31984
   221  0000                     _TMR0ON	set	32431
   222  0000                     _TMR0IF	set	32658
   223  00FE55                     STR_33:
   224  00FE55  53                 	db	83	;'S'
   225  00FE56  74                 	db	116	;'t'
   226  00FE57  61                 	db	97	;'a'
   227  00FE58  72                 	db	114	;'r'
   228  00FE59  74                 	db	116	;'t'
   229  00FE5A  3A                 	db	58	;':'
   230  00FE5B  20                 	db	32
   231  00FE5C  25                 	db	37
   232  00FE5D  30                 	db	48	;'0'
   233  00FE5E  32                 	db	50	;'2'
   234  00FE5F  78                 	db	120	;'x'
   235  00FE60  3A                 	db	58	;':'
   236  00FE61  25                 	db	37
   237  00FE62  30                 	db	48	;'0'
   238  00FE63  32                 	db	50	;'2'
   239  00FE64  78                 	db	120	;'x'
   240  00FE65  3A                 	db	58	;':'
   241  00FE66  25                 	db	37
   242  00FE67  30                 	db	48	;'0'
   243  00FE68  32                 	db	50	;'2'
   244  00FE69  78                 	db	120	;'x'
   245  00FE6A  00                 	db	0
   246  00FE6B                     STR_31:
   247  00FE6B  44                 	db	68	;'D'
   248  00FE6C  61                 	db	97	;'a'
   249  00FE6D  74                 	db	116	;'t'
   250  00FE6E  65                 	db	101	;'e'
   251  00FE6F  3A                 	db	58	;':'
   252  00FE70  20                 	db	32
   253  00FE71  25                 	db	37
   254  00FE72  30                 	db	48	;'0'
   255  00FE73  32                 	db	50	;'2'
   256  00FE74  78                 	db	120	;'x'
   257  00FE75  2F                 	db	47
   258  00FE76  25                 	db	37
   259  00FE77  30                 	db	48	;'0'
   260  00FE78  32                 	db	50	;'2'
   261  00FE79  78                 	db	120	;'x'
   262  00FE7A  2F                 	db	47
   263  00FE7B  25                 	db	37
   264  00FE7C  30                 	db	48	;'0'
   265  00FE7D  32                 	db	50	;'2'
   266  00FE7E  78                 	db	120	;'x'
   267  00FE7F  00                 	db	0
   268  00FE80                     STR_42:
   269  00FE80  30                 	db	48	;'0'
   270  00FE81  31                 	db	49	;'1'
   271  00FE82  32                 	db	50	;'2'
   272  00FE83  33                 	db	51	;'3'
   273  00FE84  34                 	db	52	;'4'
   274  00FE85  35                 	db	53	;'5'
   275  00FE86  36                 	db	54	;'6'
   276  00FE87  37                 	db	55	;'7'
   277  00FE88  38                 	db	56	;'8'
   278  00FE89  39                 	db	57	;'9'
   279  00FE8A  61                 	db	97	;'a'
   280  00FE8B  62                 	db	98	;'b'
   281  00FE8C  63                 	db	99	;'c'
   282  00FE8D  64                 	db	100	;'d'
   283  00FE8E  65                 	db	101	;'e'
   284  00FE8F  66                 	db	102	;'f'
   285  00FE90  00                 	db	0
   286  00FE91                     STR_37:
   287  00FE91  53                 	db	83	;'S'
   288  00FE92  6F                 	db	111	;'o'
   289  00FE93  64                 	db	100	;'d'
   290  00FE94  61                 	db	97	;'a'
   291  00FE95  20                 	db	32
   292  00FE96  77                 	db	119	;'w'
   293  00FE97  2F                 	db	47
   294  00FE98  6F                 	db	111	;'o'
   295  00FE99  20                 	db	32
   296  00FE9A  74                 	db	116	;'t'
   297  00FE9B  61                 	db	97	;'a'
   298  00FE9C  62                 	db	98	;'b'
   299  00FE9D  3A                 	db	58	;':'
   300  00FE9E  20                 	db	32
   301  00FE9F  25                 	db	37
   302  00FEA0  64                 	db	100	;'d'
   303  00FEA1  00                 	db	0
   304  00FEA2                     STR_41:
   305  00FEA2  53                 	db	83	;'S'
   306  00FEA3  6F                 	db	111	;'o'
   307  00FEA4  75                 	db	117	;'u'
   308  00FEA5  70                 	db	112	;'p'
   309  00FEA6  20                 	db	32
   310  00FEA7  77                 	db	119	;'w'
   311  00FEA8  2F                 	db	47
   312  00FEA9  6F                 	db	111	;'o'
   313  00FEAA  20                 	db	32
   314  00FEAB  6C                 	db	108	;'l'
   315  00FEAC  62                 	db	98	;'b'
   316  00FEAD  6C                 	db	108	;'l'
   317  00FEAE  3A                 	db	58	;':'
   318  00FEAF  20                 	db	32
   319  00FEB0  25                 	db	37
   320  00FEB1  64                 	db	100	;'d'
   321  00FEB2  00                 	db	0
   322  00FEB3                     STR_28:
   323  00FEB3  52                 	db	82	;'R'
   324  00FEB4  75                 	db	117	;'u'
   325  00FEB5  6E                 	db	110	;'n'
   326  00FEB6  23                 	db	35
   327  00FEB7  25                 	db	37
   328  00FEB8  64                 	db	100	;'d'
   329  00FEB9  20                 	db	32
   330  00FEBA  20                 	db	32
   331  00FEBB  20                 	db	32
   332  00FEBC  20                 	db	32
   333  00FEBD  41                 	db	65	;'A'
   334  00FEBE  3A                 	db	58	;':'
   335  00FEBF  4E                 	db	78	;'N'
   336  00FEC0  65                 	db	101	;'e'
   337  00FEC1  78                 	db	120	;'x'
   338  00FEC2  74                 	db	116	;'t'
   339  00FEC3  00                 	db	0
   340  00FEC4                     STR_4:
   341  00FEC4  74                 	db	116	;'t'
   342  00FEC5  65                 	db	101	;'e'
   343  00FEC6  73                 	db	115	;'s'
   344  00FEC7  74                 	db	116	;'t'
   345  00FEC8  69                 	db	105	;'i'
   346  00FEC9  6E                 	db	110	;'n'
   347  00FECA  67                 	db	103	;'g'
   348  00FECB  20                 	db	32
   349  00FECC  50                 	db	80	;'P'
   350  00FECD  57                 	db	87	;'W'
   351  00FECE  4D                 	db	77	;'M'
   352  00FECF  32                 	db	50	;'2'
   353  00FED0  20                 	db	32
   354  00FED1  43                 	db	67	;'C'
   355  00FED2  43                 	db	67	;'C'
   356  00FED3  57                 	db	87	;'W'
   357  00FED4  00                 	db	0
   358  00FED5                     STR_23:
   359  00FED5  56                 	db	86	;'V'
   360  00FED6  69                 	db	105	;'i'
   361  00FED7  65                 	db	101	;'e'
   362  00FED8  77                 	db	119	;'w'
   363  00FED9  20                 	db	32
   364  00FEDA  4C                 	db	76	;'L'
   365  00FEDB  6F                 	db	111	;'o'
   366  00FEDC  67                 	db	103	;'g'
   367  00FEDD  73                 	db	115	;'s'
   368  00FEDE  3F                 	db	63	;'?'
   369  00FEDF  20                 	db	32
   370  00FEE0  42                 	db	66	;'B'
   371  00FEE1  3A                 	db	58	;':'
   372  00FEE2  59                 	db	89	;'Y'
   373  00FEE3  65                 	db	101	;'e'
   374  00FEE4  73                 	db	115	;'s'
   375  00FEE5  00                 	db	0
   376  00FEE6                     STR_24:
   377  00FEE6  25                 	db	37
   378  00FEE7  30                 	db	48	;'0'
   379  00FEE8  32                 	db	50	;'2'
   380  00FEE9  78                 	db	120	;'x'
   381  00FEEA  2F                 	db	47
   382  00FEEB  25                 	db	37
   383  00FEEC  30                 	db	48	;'0'
   384  00FEED  32                 	db	50	;'2'
   385  00FEEE  78                 	db	120	;'x'
   386  00FEEF  2F                 	db	47
   387  00FEF0  25                 	db	37
   388  00FEF1  30                 	db	48	;'0'
   389  00FEF2  32                 	db	50	;'2'
   390  00FEF3  78                 	db	120	;'x'
   391  00FEF4  20                 	db	32
   392  00FEF5  00                 	db	0
   393  00FEF6                     STR_35:
   394  00FEF6  53                 	db	83	;'S'
   395  00FEF7  6F                 	db	111	;'o'
   396  00FEF8  64                 	db	100	;'d'
   397  00FEF9  61                 	db	97	;'a'
   398  00FEFA  20                 	db	32
   399  00FEFB  77                 	db	119	;'w'
   400  00FEFC  2F                 	db	47
   401  00FEFD  20                 	db	32
   402  00FEFE  74                 	db	116	;'t'
   403  00FEFF  61                 	db	97	;'a'
   404  00FF00  62                 	db	98	;'b'
   405  00FF01  3A                 	db	58	;':'
   406  00FF02  20                 	db	32
   407  00FF03  25                 	db	37
   408  00FF04  64                 	db	100	;'d'
   409  00FF05  00                 	db	0
   410  00FF06                     STR_39:
   411  00FF06  53                 	db	83	;'S'
   412  00FF07  6F                 	db	111	;'o'
   413  00FF08  75                 	db	117	;'u'
   414  00FF09  70                 	db	112	;'p'
   415  00FF0A  20                 	db	32
   416  00FF0B  77                 	db	119	;'w'
   417  00FF0C  2F                 	db	47
   418  00FF0D  20                 	db	32
   419  00FF0E  6C                 	db	108	;'l'
   420  00FF0F  62                 	db	98	;'b'
   421  00FF10  6C                 	db	108	;'l'
   422  00FF11  3A                 	db	58	;':'
   423  00FF12  20                 	db	32
   424  00FF13  25                 	db	37
   425  00FF14  64                 	db	100	;'d'
   426  00FF15  00                 	db	0
   427  00FF16                     STR_1:
   428  00FF16  53                 	db	83	;'S'
   429  00FF17  6F                 	db	111	;'o'
   430  00FF18  72                 	db	114	;'r'
   431  00FF19  74                 	db	116	;'t'
   432  00FF1A  69                 	db	105	;'i'
   433  00FF1B  6E                 	db	110	;'n'
   434  00FF1C  67                 	db	103	;'g'
   435  00FF1D  20                 	db	32
   436  00FF1E  63                 	db	99	;'c'
   437  00FF1F  61                 	db	97	;'a'
   438  00FF20  6E                 	db	110	;'n'
   439  00FF21  73                 	db	115	;'s'
   440  00FF22  2E                 	db	46
   441  00FF23  2E                 	db	46
   442  00FF24  2E                 	db	46
   443  00FF25  00                 	db	0
   444  00FF26                     STR_3:
   445  00FF26  74                 	db	116	;'t'
   446  00FF27  65                 	db	101	;'e'
   447  00FF28  73                 	db	115	;'s'
   448  00FF29  74                 	db	116	;'t'
   449  00FF2A  69                 	db	105	;'i'
   450  00FF2B  6E                 	db	110	;'n'
   451  00FF2C  67                 	db	103	;'g'
   452  00FF2D  20                 	db	32
   453  00FF2E  50                 	db	80	;'P'
   454  00FF2F  57                 	db	87	;'W'
   455  00FF30  4D                 	db	77	;'M'
   456  00FF31  32                 	db	50	;'2'
   457  00FF32  20                 	db	32
   458  00FF33  43                 	db	67	;'C'
   459  00FF34  57                 	db	87	;'W'
   460  00FF35  00                 	db	0
   461  00FF36                     STR_7:
   462  00FF36  74                 	db	116	;'t'
   463  00FF37  65                 	db	101	;'e'
   464  00FF38  73                 	db	115	;'s'
   465  00FF39  74                 	db	116	;'t'
   466  00FF3A  69                 	db	105	;'i'
   467  00FF3B  6E                 	db	110	;'n'
   468  00FF3C  67                 	db	103	;'g'
   469  00FF3D  20                 	db	32
   470  00FF3E  53                 	db	83	;'S'
   471  00FF3F  20                 	db	32
   472  00FF40  73                 	db	115	;'s'
   473  00FF41  68                 	db	104	;'h'
   474  00FF42  61                 	db	97	;'a'
   475  00FF43  6B                 	db	107	;'k'
   476  00FF44  65                 	db	101	;'e'
   477  00FF45  00                 	db	0
   478  00FF46                     STR_22:
   479  00FF46  53                 	db	83	;'S'
   480  00FF47  6F                 	db	111	;'o'
   481  00FF48  72                 	db	114	;'r'
   482  00FF49  74                 	db	116	;'t'
   483  00FF4A  20                 	db	32
   484  00FF4B  64                 	db	100	;'d'
   485  00FF4C  6F                 	db	111	;'o'
   486  00FF4D  6E                 	db	110	;'n'
   487  00FF4E  65                 	db	101	;'e'
   488  00FF4F  21                 	db	33
   489  00FF50  20                 	db	32
   490  00FF51  41                 	db	65	;'A'
   491  00FF52  3A                 	db	58	;':'
   492  00FF53  4E                 	db	78	;'N'
   493  00FF54  6F                 	db	111	;'o'
   494  00FF55  00                 	db	0
   495  00FF56                     STR_2:
   496  00FF56  41                 	db	65	;'A'
   497  00FF57  6E                 	db	110	;'n'
   498  00FF58  79                 	db	121	;'y'
   499  00FF59  20                 	db	32
   500  00FF5A  6B                 	db	107	;'k'
   501  00FF5B  65                 	db	101	;'e'
   502  00FF5C  79                 	db	121	;'y'
   503  00FF5D  20                 	db	32
   504  00FF5E  74                 	db	116	;'t'
   505  00FF5F  6F                 	db	111	;'o'
   506  00FF60  20                 	db	32
   507  00FF61  73                 	db	115	;'s'
   508  00FF62  74                 	db	116	;'t'
   509  00FF63  6F                 	db	111	;'o'
   510  00FF64  70                 	db	112	;'p'
   511  00FF65  00                 	db	0
   512  00FF66                     STR_8:
   513  00FF66  74                 	db	116	;'t'
   514  00FF67  65                 	db	101	;'e'
   515  00FF68  73                 	db	115	;'s'
   516  00FF69  74                 	db	116	;'t'
   517  00FF6A  69                 	db	105	;'i'
   518  00FF6B  6E                 	db	110	;'n'
   519  00FF6C  67                 	db	103	;'g'
   520  00FF6D  20                 	db	32
   521  00FF6E  53                 	db	83	;'S'
   522  00FF6F  31                 	db	49	;'1'
   523  00FF70  20                 	db	32
   524  00FF71  70                 	db	112	;'p'
   525  00FF72  69                 	db	105	;'i'
   526  00FF73  6E                 	db	110	;'n'
   527  00FF74  73                 	db	115	;'s'
   528  00FF75  00                 	db	0
   529  00FF76                     STR_10:
   530  00FF76  74                 	db	116	;'t'
   531  00FF77  65                 	db	101	;'e'
   532  00FF78  73                 	db	115	;'s'
   533  00FF79  74                 	db	116	;'t'
   534  00FF7A  69                 	db	105	;'i'
   535  00FF7B  6E                 	db	110	;'n'
   536  00FF7C  67                 	db	103	;'g'
   537  00FF7D  20                 	db	32
   538  00FF7E  53                 	db	83	;'S'
   539  00FF7F  32                 	db	50	;'2'
   540  00FF80  20                 	db	32
   541  00FF81  70                 	db	112	;'p'
   542  00FF82  69                 	db	105	;'i'
   543  00FF83  6E                 	db	110	;'n'
   544  00FF84  73                 	db	115	;'s'
   545  00FF85  00                 	db	0
   546  00FF86                     STR_11:
   547  00FF86  74                 	db	116	;'t'
   548  00FF87  65                 	db	101	;'e'
   549  00FF88  73                 	db	115	;'s'
   550  00FF89  74                 	db	116	;'t'
   551  00FF8A  69                 	db	105	;'i'
   552  00FF8B  6E                 	db	110	;'n'
   553  00FF8C  67                 	db	103	;'g'
   554  00FF8D  20                 	db	32
   555  00FF8E  53                 	db	83	;'S'
   556  00FF8F  33                 	db	51	;'3'
   557  00FF90  20                 	db	32
   558  00FF91  70                 	db	112	;'p'
   559  00FF92  69                 	db	105	;'i'
   560  00FF93  6E                 	db	110	;'n'
   561  00FF94  73                 	db	115	;'s'
   562  00FF95  00                 	db	0
   563  00FF96                     STR_13:
   564  00FF96  74                 	db	116	;'t'
   565  00FF97  65                 	db	101	;'e'
   566  00FF98  73                 	db	115	;'s'
   567  00FF99  74                 	db	116	;'t'
   568  00FF9A  69                 	db	105	;'i'
   569  00FF9B  6E                 	db	110	;'n'
   570  00FF9C  67                 	db	103	;'g'
   571  00FF9D  20                 	db	32
   572  00FF9E  50                 	db	80	;'P'
   573  00FF9F  57                 	db	87	;'W'
   574  00FFA0  4D                 	db	77	;'M'
   575  00FFA1  31                 	db	49	;'1'
   576  00FFA2  00                 	db	0
   577  00FFA3                     STR_29:
   578  00FFA3  52                 	db	82	;'R'
   579  00FFA4  75                 	db	117	;'u'
   580  00FFA5  6E                 	db	110	;'n'
   581  00FFA6  74                 	db	116	;'t'
   582  00FFA7  69                 	db	105	;'i'
   583  00FFA8  6D                 	db	109	;'m'
   584  00FFA9  65                 	db	101	;'e'
   585  00FFAA  3A                 	db	58	;':'
   586  00FFAB  20                 	db	32
   587  00FFAC  25                 	db	37
   588  00FFAD  64                 	db	100	;'d'
   589  00FFAE  00                 	db	0
   590  00FFAF                     STR_6:
   591  00FFAF  74                 	db	116	;'t'
   592  00FFB0  65                 	db	101	;'e'
   593  00FFB1  73                 	db	115	;'s'
   594  00FFB2  74                 	db	116	;'t'
   595  00FFB3  69                 	db	105	;'i'
   596  00FFB4  6E                 	db	110	;'n'
   597  00FFB5  67                 	db	103	;'g'
   598  00FFB6  20                 	db	32
   599  00FFB7  53                 	db	83	;'S'
   600  00FFB8  20                 	db	32
   601  00FFB9  62                 	db	98	;'b'
   602  00FFBA  00                 	db	0
   603  00FFBB                     STR_19:
   604  00FFBB  6C                 	db	108	;'l'
   605  00FFBC  61                 	db	97	;'a'
   606  00FFBD  62                 	db	98	;'b'
   607  00FFBE  65                 	db	101	;'e'
   608  00FFBF  6C                 	db	108	;'l'
   609  00FFC0  20                 	db	32
   610  00FFC1  20                 	db	32
   611  00FFC2  20                 	db	32
   612  00FFC3  74                 	db	116	;'t'
   613  00FFC4  61                 	db	97	;'a'
   614  00FFC5  62                 	db	98	;'b'
   615  00FFC6  00                 	db	0
   616  00FFC7                     STR_5:
   617  00FFC7  74                 	db	116	;'t'
   618  00FFC8  65                 	db	101	;'e'
   619  00FFC9  73                 	db	115	;'s'
   620  00FFCA  74                 	db	116	;'t'
   621  00FFCB  69                 	db	105	;'i'
   622  00FFCC  6E                 	db	110	;'n'
   623  00FFCD  67                 	db	103	;'g'
   624  00FFCE  20                 	db	32
   625  00FFCF  53                 	db	83	;'S'
   626  00FFD0  20                 	db	32
   627  00FFD1  66                 	db	102	;'f'
   628  00FFD2  00                 	db	0
   629  00FFD3                     STR_14:
   630  00FFD3  74                 	db	116	;'t'
   631  00FFD4  65                 	db	101	;'e'
   632  00FFD5  73                 	db	115	;'s'
   633  00FFD6  74                 	db	116	;'t'
   634  00FFD7  69                 	db	105	;'i'
   635  00FFD8  6E                 	db	110	;'n'
   636  00FFD9  67                 	db	103	;'g'
   637  00FFDA  20                 	db	32
   638  00FFDB  49                 	db	73	;'I'
   639  00FFDC  52                 	db	82	;'R'
   640  00FFDD  00                 	db	0
   641  00FFDE                     STR_20:
   642  00FFDE  25                 	db	37
   643  00FFDF  78                 	db	120	;'x'
   644  00FFE0  20                 	db	32
   645  00FFE1  20                 	db	32
   646  00FFE2  20                 	db	32
   647  00FFE3  20                 	db	32
   648  00FFE4  20                 	db	32
   649  00FFE5  20                 	db	32
   650  00FFE6  00                 	db	0
   651  00FFE7                     STR_27:
   652  00FFE7  20                 	db	32
   653  00FFE8  41                 	db	65	;'A'
   654  00FFE9  3A                 	db	58	;':'
   655  00FFEA  4C                 	db	76	;'L'
   656  00FFEB  6F                 	db	111	;'o'
   657  00FFEC  67                 	db	103	;'g'
   658  00FFED  73                 	db	115	;'s'
   659  00FFEE  00                 	db	0
   660  00FFEF                     STR_25:
   661  00FFEF  33                 	db	51	;'3'
   662  00FFF0  3A                 	db	58	;':'
   663  00FFF1  53                 	db	83	;'S'
   664  00FFF2  74                 	db	116	;'t'
   665  00FFF3  61                 	db	97	;'a'
   666  00FFF4  72                 	db	114	;'r'
   667  00FFF5  74                 	db	116	;'t'
   668  00FFF6  00                 	db	0
   669  00FFF7                     STR_15:
   670  00FFF7  25                 	db	37
   671  00FFF8  78                 	db	120	;'x'
   672  00FFF9  20                 	db	32
   673  00FFFA  00                 	db	0
   674  00FFFB                     STR_9:
   675  00FFFB  25                 	db	37
   676  00FFFC  78                 	db	120	;'x'
   677  00FFFD  00                 	db	0
   678  0000                     
   679                           ; #config settings
   680  00FFFE  00                 	db	0	; dummy byte at the end
   681  0000                     
   682                           	psect	cinit
   683  002AF4                     __pcinit:
   684                           	opt stack 0
   685  002AF4                     start_initialization:
   686                           	opt stack 0
   687  002AF4                     __initialization:
   688                           	opt stack 0
   689                           
   690                           ; Clear objects allocated to BANK0 (20 bytes)
   691  002AF4  EE00  F0AF         	lfsr	0,__pbssBANK0
   692  002AF8  0E14               	movlw	20
   693  002AFA                     clear_0:
   694  002AFA  6AEE               	clrf	postinc0,c
   695  002AFC  06E8               	decf	wreg,f,c
   696  002AFE  E1FD               	bnz	clear_0
   697                           
   698                           ; Clear objects allocated to COMRAM (34 bytes)
   699  002B00  EE00  F03D         	lfsr	0,__pbssCOMRAM
   700  002B04  0E22               	movlw	34
   701  002B06                     clear_1:
   702  002B06  6AEE               	clrf	postinc0,c
   703  002B08  06E8               	decf	wreg,f,c
   704  002B0A  E1FD               	bnz	clear_1
   705  002B0C                     end_of_initialization:
   706                           	opt stack 0
   707  002B0C                     __end_of__initialization:
   708                           	opt stack 0
   709  002B0C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   710  002B0E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   711  002B10  0E00               	movlw	low (__Lmediumconst shr (0+16))
   712  002B12  6EF8               	movwf	tblptru,c
   713  002B14  0100               	movlb	0
   714  002B16  EF09  F000         	goto	_main	;jump to C main() function
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           	psect	bssCOMRAM
   720  00003D                     __pbssCOMRAM:
   721                           	opt stack 0
   722  00003D                     _curr:
   723                           	opt stack 0
   724  00003D                     	ds	2
   725  00003F                     _prev:
   726                           	opt stack 0
   727  00003F                     	ds	2
   728  000041                     _t3:
   729                           	opt stack 0
   730  000041                     	ds	2
   731  000043                     _t2:
   732                           	opt stack 0
   733  000043                     	ds	2
   734  000045                     _t:
   735                           	opt stack 0
   736  000045                     	ds	2
   737  000047                     _s:
   738                           	opt stack 0
   739  000047                     	ds	2
   740  000049                     _sodaI:
   741                           	opt stack 0
   742  000049                     	ds	2
   743  00004B                     _soupI:
   744                           	opt stack 0
   745  00004B                     	ds	2
   746  00004D                     _soupAlign:
   747                           	opt stack 0
   748  00004D                     	ds	2
   749  00004F                     _sodaAlign:
   750                           	opt stack 0
   751  00004F                     	ds	2
   752  000051                     _tabState:
   753                           	opt stack 0
   754  000051                     	ds	2
   755  000053                     _sodaSteps:
   756                           	opt stack 0
   757  000053                     	ds	2
   758  000055                     _soupSteps:
   759                           	opt stack 0
   760  000055                     	ds	2
   761  000057                     _S3mode:
   762                           	opt stack 0
   763  000057                     	ds	2
   764  000059                     _S2mode:
   765                           	opt stack 0
   766  000059                     	ds	2
   767  00005B                     _S1mode:
   768                           	opt stack 0
   769  00005B                     	ds	2
   770  00005D                     _s2:
   771                           	opt stack 0
   772  00005D                     	ds	2
   773                           tblptru	equ	0xFF8
   774                           postinc0	equ	0xFEE
   775                           wreg	equ	0xFE8
   776                           
   777                           	psect	bssBANK0
   778  0000AF                     __pbssBANK0:
   779                           	opt stack 0
   780  0000AF                     _time:
   781                           	opt stack 0
   782  0000AF                     	ds	7
   783  0000B6                     _sodaCnt:
   784                           	opt stack 0
   785  0000B6                     	ds	2
   786  0000B8                     _soupCnt:
   787                           	opt stack 0
   788  0000B8                     	ds	2
   789  0000BA                     _labelState:
   790                           	opt stack 0
   791  0000BA                     	ds	2
   792  0000BC                     _seconds:
   793                           	opt stack 0
   794  0000BC                     	ds	2
   795  0000BE                     _s3:
   796                           	opt stack 0
   797  0000BE                     	ds	2
   798  0000C0                     _s1:
   799                           	opt stack 0
   800  0000C0                     	ds	2
   801  0000C2                     _keypress:
   802                           	opt stack 0
   803  0000C2                     	ds	1
   804                           tblptru	equ	0xFF8
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808                           	psect	cstackBANK0
   809  000080                     __pcstackBANK0:
   810                           	opt stack 0
   811  000080                     ??_addRun:
   812  000080                     printf@idx:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x0
   816  000080                     	ds	1
   817  000081                     printf@ap:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1
   821  000081                     	ds	2
   822  000083                     printf@prec:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x3
   826  000083                     	ds	1
   827  000084                     printf@val:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x4
   831  000084                     	ds	2
   832  000086                     printf@flag:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x6
   836  000086                     	ds	1
   837  000087                     printf@width:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x7
   841  000087                     	ds	2
   842  000089                     printf@c:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x9
   846  000089                     	ds	1
   847  00008A                     ??_displayLog:
   848                           
   849                           ; 1 bytes @ 0xA
   850  00008A                     	ds	3
   851  00008D                     displayLog@i:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0xD
   855  00008D                     	ds	2
   856  00008F                     displayLog@currRun:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0xF
   860  00008F                     	ds	2
   861  000091                     ??_main:
   862                           
   863                           ; 1 bytes @ 0x11
   864  000091                     	ds	2
   865  000093                     main@soupLoad:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x13
   869  000093                     	ds	2
   870  000095                     main@sodaLoad:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x15
   874  000095                     	ds	2
   875  000097                     main@s:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x17
   879  000097                     	ds	2
   880  000099                     main@prevSoupLoad:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x19
   884  000099                     	ds	2
   885  00009B                     main@prevSodaLoad:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x1B
   889  00009B                     	ds	2
   890  00009D                     main@soupL:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x1D
   894  00009D                     	ds	2
   895  00009F                     main@soupNL:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x1F
   899  00009F                     	ds	2
   900  0000A1                     main@sodaT:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x21
   904  0000A1                     	ds	2
   905  0000A3                     main@sodaNT:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x23
   909  0000A3                     	ds	2
   910  0000A5                     main@soupSort:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x25
   914  0000A5                     	ds	2
   915  0000A7                     main@sodaSort:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x27
   919  0000A7                     	ds	2
   920  0000A9                     main@prevSodaIR:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x29
   924  0000A9                     	ds	2
   925  0000AB                     main@prevSoupIR:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x2B
   929  0000AB                     	ds	2
   930  0000AD                     main@standby:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x2D
   934  0000AD                     	ds	2
   935                           tblptru	equ	0xFF8
   936                           postinc0	equ	0xFEE
   937                           wreg	equ	0xFE8
   938                           
   939                           	psect	cstackCOMRAM
   940  000001                     __pcstackCOMRAM:
   941                           	opt stack 0
   942  000001                     ?i2___wmul:
   943                           	opt stack 0
   944  000001                     updateS2@mode:
   945                           	opt stack 0
   946  000001                     i2updateS1@mode:
   947                           	opt stack 0
   948  000001                     i2updateS3@mode:
   949                           	opt stack 0
   950  000001                     i2___wmul@multiplier:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x0
   954  000001                     	ds	2
   955  000003                     ??_updateS2:
   956  000003                     ??i2_updateS1:
   957  000003                     ??i2_updateS3:
   958  000003                     i2___wmul@multiplicand:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x2
   962  000003                     	ds	2
   963  000005                     i2___wmul@product:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x4
   967  000005                     	ds	2
   968  000007                     ?___awdiv:
   969                           	opt stack 0
   970  000007                     ___awdiv@dividend:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x6
   974  000007                     	ds	2
   975  000009                     ___awdiv@divisor:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x8
   979  000009                     	ds	2
   980  00000B                     ___awdiv@counter:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0xA
   984  00000B                     	ds	1
   985  00000C                     ___awdiv@sign:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0xB
   989  00000C                     	ds	1
   990  00000D                     ___awdiv@quotient:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0xC
   994  00000D                     	ds	2
   995  00000F                     ??_handler:
   996                           
   997                           ; 1 bytes @ 0xE
   998  00000F                     	ds	16
   999  00001F                     _handler$1821:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x1E
  1003  00001F                     	ds	2
  1004  000021                     ??_readADC:
  1005  000021                     ??_isdigit:
  1006  000021                     ??_I2C_Master_Wait:
  1007  000021                     ??_eepromRead:
  1008  000021                     ?___wmul:
  1009                           	opt stack 0
  1010  000021                     ?___awmod:
  1011                           	opt stack 0
  1012  000021                     ?___lwdiv:
  1013                           	opt stack 0
  1014  000021                     ?___lldiv:
  1015                           	opt stack 0
  1016  000021                     lcdNibble@temp:
  1017                           	opt stack 0
  1018  000021                     eepromWrite@data:
  1019                           	opt stack 0
  1020  000021                     PWM1@duty:
  1021                           	opt stack 0
  1022  000021                     PWM2@duty:
  1023                           	opt stack 0
  1024  000021                     PWM2slow@duty:
  1025                           	opt stack 0
  1026  000021                     updateS1@mode:
  1027                           	opt stack 0
  1028  000021                     updateS3@mode:
  1029                           	opt stack 0
  1030  000021                     ___wmul@multiplier:
  1031                           	opt stack 0
  1032  000021                     ___awmod@dividend:
  1033                           	opt stack 0
  1034  000021                     ___lwdiv@dividend:
  1035                           	opt stack 0
  1036  000021                     ___lldiv@dividend:
  1037                           	opt stack 0
  1038                           
  1039                           ; 4 bytes @ 0x20
  1040  000021                     	ds	1
  1041  000022                     ??_eepromWrite:
  1042  000022                     lcdNibble@data:
  1043                           	opt stack 0
  1044  000022                     I2C_Master_Read@a:
  1045                           	opt stack 0
  1046  000022                     readADC@channel:
  1047                           	opt stack 0
  1048  000022                     _isdigit$1451:
  1049                           	opt stack 0
  1050  000022                     I2C_Master_Write@d:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x21
  1054  000022                     	ds	1
  1055  000023                     ??_updateS1:
  1056  000023                     ??_updateS3:
  1057  000023                     ??_PWM1:
  1058  000023                     ??_PWM2slow:
  1059  000023                     lcdInst@data:
  1060                           	opt stack 0
  1061  000023                     putch@data:
  1062                           	opt stack 0
  1063  000023                     I2C_Master_Read@temp:
  1064                           	opt stack 0
  1065  000023                     eepromRead@address:
  1066                           	opt stack 0
  1067  000023                     isdigit@c:
  1068                           	opt stack 0
  1069  000023                     PWM2@dir:
  1070                           	opt stack 0
  1071  000023                     ___wmul@multiplicand:
  1072                           	opt stack 0
  1073  000023                     ___awmod@divisor:
  1074                           	opt stack 0
  1075  000023                     ___lwdiv@divisor:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x22
  1079  000023                     	ds	1
  1080  000024                     ??_initLCD:
  1081  000024                     updateTime@j:
  1082                           	opt stack 0
  1083  000024                     eepromWrite@address:
  1084                           	opt stack 0
  1085  000024                     calibrateWheels@prev:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x23
  1089  000024                     	ds	1
  1090  000025                     ??_PWM2:
  1091  000025                     ___awmod@counter:
  1092                           	opt stack 0
  1093  000025                     ___lwdiv@counter:
  1094                           	opt stack 0
  1095  000025                     addRun@dur:
  1096                           	opt stack 0
  1097  000025                     ___wmul@product:
  1098                           	opt stack 0
  1099  000025                     ___lldiv@divisor:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0x24
  1103  000025                     	ds	1
  1104  000026                     ___awmod@sign:
  1105                           	opt stack 0
  1106  000026                     calibrateWheels@i:
  1107                           	opt stack 0
  1108  000026                     ___lwdiv@quotient:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x25
  1112  000026                     	ds	1
  1113  000027                     addRun@year:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x26
  1117  000027                     	ds	1
  1118  000028                     ?___lwmod:
  1119                           	opt stack 0
  1120  000028                     ___lwmod@dividend:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x27
  1124  000028                     	ds	1
  1125  000029                     addRun@month:
  1126                           	opt stack 0
  1127  000029                     ___lldiv@quotient:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x28
  1131  000029                     	ds	1
  1132  00002A                     ___lwmod@divisor:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x29
  1136  00002A                     	ds	1
  1137  00002B                     addRun@date:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x2A
  1141  00002B                     	ds	1
  1142  00002C                     ___lwmod@counter:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x2B
  1146  00002C                     	ds	1
  1147  00002D                     ?_printf:
  1148                           	opt stack 0
  1149  00002D                     ___lldiv@counter:
  1150                           	opt stack 0
  1151  00002D                     addRun@hours:
  1152                           	opt stack 0
  1153  00002D                     printf@f:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2C
  1157  00002D                     	ds	1
  1158  00002E                     I2C_Master_Init@c:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x2D
  1162  00002E                     	ds	1
  1163  00002F                     addRun@mins:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x2E
  1167  00002F                     	ds	2
  1168  000031                     addRun@secs:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x30
  1172  000031                     	ds	1
  1173  000032                     ??_I2C_Master_Init:
  1174                           
  1175                           ; 1 bytes @ 0x31
  1176  000032                     	ds	1
  1177  000033                     addRun@sodaT:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x32
  1181  000033                     	ds	2
  1182  000035                     ??_printf:
  1183  000035                     addRun@sodaNT:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x34
  1187  000035                     	ds	1
  1188  000036                     
  1189                           ; 1 bytes @ 0x35
  1190  000036                     	ds	1
  1191  000037                     addRun@soupL:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x36
  1195  000037                     	ds	2
  1196  000039                     addRun@soupNL:
  1197                           	opt stack 0
  1198  000039                     displayLog@run:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x38
  1202  000039                     	ds	2
  1203  00003B                     addRun@currRun:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x3A
  1207  00003B                     	ds	2
  1208                           tblptru	equ	0xFF8
  1209                           postinc0	equ	0xFEE
  1210                           wreg	equ	0xFE8
  1211                           
  1212 ;;
  1213 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1214 ;;
  1215 ;; *************** function _main *****************
  1216 ;; Defined at:
  1217 ;;		line 118 in file "main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  standby         2   45[BANK0 ] int 
  1222 ;;  prevSoupIR      2   43[BANK0 ] int 
  1223 ;;  prevSodaIR      2   41[BANK0 ] int 
  1224 ;;  sodaSort        2   39[BANK0 ] int 
  1225 ;;  soupSort        2   37[BANK0 ] int 
  1226 ;;  sodaNT          2   35[BANK0 ] int 
  1227 ;;  sodaT           2   33[BANK0 ] int 
  1228 ;;  soupNL          2   31[BANK0 ] int 
  1229 ;;  soupL           2   29[BANK0 ] int 
  1230 ;;  prevSodaLoad    2   27[BANK0 ] int 
  1231 ;;  prevSoupLoad    2   25[BANK0 ] int 
  1232 ;;  s               2   23[BANK0 ] int 
  1233 ;;  sodaLoad        2   21[BANK0 ] int 
  1234 ;;  soupLoad        2   19[BANK0 ] int 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  2  190[None  ] int 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;Total ram usage:       30 bytes
  1249 ;; Hardware stack levels required when called:    6
  1250 ;; This function calls:
  1251 ;;		_PWM1
  1252 ;;		_PWM1off
  1253 ;;		_PWM2
  1254 ;;		_PWM2off
  1255 ;;		_PWM2slow
  1256 ;;		___awmod
  1257 ;;		_addRun
  1258 ;;		_calibrateWheels
  1259 ;;		_displayLog
  1260 ;;		_homescreen
  1261 ;;		_initialize
  1262 ;;		_keycheck
  1263 ;;		_keyinterrupt
  1264 ;;		_lcdInst
  1265 ;;		_printf
  1266 ;;		_readADC
  1267 ;;		_startTMR1
  1268 ;;		_updateS1
  1269 ;;		_updateS3
  1270 ;;		_updateTime
  1271 ;; This function is called by:
  1272 ;;		Startup code after reset
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text0
  1277  000012                     __ptext0:
  1278                           	opt stack 0
  1279  000012                     _main:
  1280                           	opt stack 25
  1281                           
  1282                           ;main.c: 119: LATA = 0;
  1283                           
  1284                           ;incstack = 0
  1285  000012  0E00               	movlw	0
  1286  000014  6E89               	movwf	3977,c	;volatile
  1287                           
  1288                           ;main.c: 121: initialize();
  1289  000016  EC24  F013         	call	_initialize	;wreg free
  1290                           
  1291                           ;main.c: 122: int standby = 1;
  1292  00001A  0E00               	movlw	0
  1293  00001C  0100               	movlb	0	; () banked
  1294  00001E  6FAE               	movwf	(main@standby+1)& (0+255),b
  1295  000020  0E01               	movlw	1
  1296  000022  6FAD               	movwf	main@standby& (0+255),b
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 123: int s = 0;
  1300  000024  0E00               	movlw	0
  1301  000026  0100               	movlb	0	; () banked
  1302  000028  6F98               	movwf	(main@s+1)& (0+255),b
  1303  00002A  0E00               	movlw	0
  1304  00002C  6F97               	movwf	main@s& (0+255),b
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 124: int prevSodaIR;
  1308                           ;main.c: 125: int prevSoupIR;
  1309                           ;main.c: 127: int soupLoad = 1;
  1310  00002E  0E00               	movlw	0
  1311  000030  0100               	movlb	0	; () banked
  1312  000032  6F94               	movwf	(main@soupLoad+1)& (0+255),b
  1313  000034  0E01               	movlw	1
  1314  000036  6F93               	movwf	main@soupLoad& (0+255),b
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 128: int sodaLoad = 1;
  1318  000038  0E00               	movlw	0
  1319  00003A  0100               	movlb	0	; () banked
  1320  00003C  6F96               	movwf	(main@sodaLoad+1)& (0+255),b
  1321  00003E  0E01               	movlw	1
  1322  000040  6F95               	movwf	main@sodaLoad& (0+255),b
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 131: int soupSort;
  1326                           ;main.c: 132: int prevSoupLoad;
  1327                           ;main.c: 133: int sodaSort;
  1328                           ;main.c: 134: int prevSodaLoad;
  1329                           ;main.c: 136: int soupL;
  1330                           ;main.c: 137: int soupNL ;
  1331                           ;main.c: 138: int sodaT;
  1332                           ;main.c: 139: int sodaNT;
  1333                           ;main.c: 141: T0CON = 0b00010111;
  1334  000042  0E17               	movlw	23
  1335  000044  6ED5               	movwf	4053,c	;volatile
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 142: TMR0H = 0b10000101;
  1339  000046  0E85               	movlw	133
  1340  000048  6ED7               	movwf	4055,c	;volatile
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 143: TMR0L = 0b10101110;
  1344  00004A  0EAE               	movlw	174
  1345  00004C  6ED6               	movwf	4054,c	;volatile
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 144: T0CONbits.TMR0ON = 1;
  1349  00004E  8ED5               	bsf	4053,7,c	;volatile
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;main.c: 145: startTMR1();
  1353  000050  EC06  F016         	call	_startTMR1	;wreg free
  1354                           
  1355                           ;main.c: 148: _delay((unsigned long)((10)*(32000000/4000.0)));
  1356  000054  0E68               	movlw	104
  1357  000056  0100               	movlb	0	; () banked
  1358  000058  6F91               	movwf	??_main& (0+255),b
  1359  00005A  0EE4               	movlw	228
  1360  00005C                     u7887:
  1361  00005C  2EE8               	decfsz	wreg,f,c
  1362  00005E  D7FE               	bra	u7887
  1363  000060  2F91               	decfsz	??_main& (0+255),f,b
  1364  000062  D7FC               	bra	u7887
  1365  000064  F000               	nop	
  1366  000066                     l5646:
  1367                           
  1368                           ;main.c: 151: if (standby == 1){
  1369  000066  0100               	movlb	0	; () banked
  1370  000068  05AD               	decf	main@standby& (0+255),w,b
  1371  00006A  0100               	movlb	0	; () banked
  1372  00006C  11AE               	iorwf	(main@standby+1)& (0+255),w,b
  1373  00006E  A4D8               	btfss	status,2,c
  1374  000070  D0F2               	goto	l5708
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 152: keypress = (0);
  1378  000072  0E00               	movlw	0
  1379  000074  0100               	movlb	0	; () banked
  1380  000076  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1381                           
  1382                           ;main.c: 153: while(keypress == (0)){
  1383  000078  D006               	goto	l5656
  1384  00007A                     l5650:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 154: updateTime();
  1388  00007A  ECD4  F013         	call	_updateTime	;wreg free
  1389                           
  1390                           ;main.c: 155: homescreen();
  1391  00007E  EC08  F014         	call	_homescreen	;wreg free
  1392                           
  1393                           ;main.c: 156: keyinterrupt();
  1394  000082  ECE7  F015         	call	_keyinterrupt	;wreg free
  1395  000086                     l5656:
  1396  000086  0100               	movlb	0	; () banked
  1397  000088  51C2               	movf	_keypress& (0+255),w,b	;volatile
  1398  00008A  B4D8               	btfsc	status,2,c
  1399  00008C  D7F6               	goto	l5650
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 157: }
  1403                           ;main.c: 159: if(keypress == 2){
  1404                           
  1405                           ; BSR set to: 0
  1406  00008E  0E02               	movlw	2
  1407  000090  0100               	movlb	0	; () banked
  1408  000092  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1409  000094  A4D8               	btfss	status,2,c
  1410  000096  D0B1               	goto	l5700
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 161: standby = 0;
  1414  000098  0E00               	movlw	0
  1415  00009A  0100               	movlb	0	; () banked
  1416  00009C  6FAE               	movwf	(main@standby+1)& (0+255),b
  1417  00009E  0E00               	movlw	0
  1418  0000A0  6FAD               	movwf	main@standby& (0+255),b
  1419                           
  1420                           ;main.c: 162: seconds = 0;
  1421  0000A2  0E00               	movlw	0
  1422  0000A4  0100               	movlb	0	; () banked
  1423  0000A6  6FBD               	movwf	(_seconds+1)& (0+255),b
  1424  0000A8  0E00               	movlw	0
  1425  0000AA  6FBC               	movwf	_seconds& (0+255),b
  1426                           
  1427                           ;main.c: 163: labelState = 0;
  1428  0000AC  0E00               	movlw	0
  1429  0000AE  0100               	movlb	0	; () banked
  1430  0000B0  6FBB               	movwf	(_labelState+1)& (0+255),b
  1431  0000B2  0E00               	movlw	0
  1432  0000B4  6FBA               	movwf	_labelState& (0+255),b
  1433                           
  1434                           ;main.c: 164: soupSort = 0;
  1435  0000B6  0E00               	movlw	0
  1436  0000B8  0100               	movlb	0	; () banked
  1437  0000BA  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  1438  0000BC  0E00               	movlw	0
  1439  0000BE  6FA5               	movwf	main@soupSort& (0+255),b
  1440                           
  1441                           ;main.c: 165: tabState = 0;
  1442  0000C0  0E00               	movlw	0
  1443  0000C2  6E52               	movwf	_tabState+1,c
  1444  0000C4  0E00               	movlw	0
  1445  0000C6  6E51               	movwf	_tabState,c
  1446                           
  1447                           ;main.c: 166: sodaSort = 0;
  1448  0000C8  0E00               	movlw	0
  1449  0000CA  0100               	movlb	0	; () banked
  1450  0000CC  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  1451  0000CE  0E00               	movlw	0
  1452  0000D0  6FA7               	movwf	main@sodaSort& (0+255),b
  1453                           
  1454                           ;main.c: 167: soupSteps = 0;
  1455  0000D2  0E00               	movlw	0
  1456  0000D4  6E56               	movwf	_soupSteps+1,c
  1457  0000D6  0E00               	movlw	0
  1458  0000D8  6E55               	movwf	_soupSteps,c
  1459                           
  1460                           ;main.c: 168: sodaSteps = 0;
  1461  0000DA  0E00               	movlw	0
  1462  0000DC  6E54               	movwf	_sodaSteps+1,c
  1463  0000DE  0E00               	movlw	0
  1464  0000E0  6E53               	movwf	_sodaSteps,c
  1465                           
  1466                           ;main.c: 169: soupL = 0;
  1467  0000E2  0E00               	movlw	0
  1468  0000E4  0100               	movlb	0	; () banked
  1469  0000E6  6F9E               	movwf	(main@soupL+1)& (0+255),b
  1470  0000E8  0E00               	movlw	0
  1471  0000EA  6F9D               	movwf	main@soupL& (0+255),b
  1472                           
  1473                           ;main.c: 170: soupNL = 0;
  1474  0000EC  0E00               	movlw	0
  1475  0000EE  0100               	movlb	0	; () banked
  1476  0000F0  6FA0               	movwf	(main@soupNL+1)& (0+255),b
  1477  0000F2  0E00               	movlw	0
  1478  0000F4  6F9F               	movwf	main@soupNL& (0+255),b
  1479                           
  1480                           ;main.c: 171: sodaT = 0;
  1481  0000F6  0E00               	movlw	0
  1482  0000F8  0100               	movlb	0	; () banked
  1483  0000FA  6FA2               	movwf	(main@sodaT+1)& (0+255),b
  1484  0000FC  0E00               	movlw	0
  1485  0000FE  6FA1               	movwf	main@sodaT& (0+255),b
  1486                           
  1487                           ;main.c: 172: sodaNT = 0;
  1488  000100  0E00               	movlw	0
  1489  000102  0100               	movlb	0	; () banked
  1490  000104  6FA4               	movwf	(main@sodaNT+1)& (0+255),b
  1491  000106  0E00               	movlw	0
  1492  000108  6FA3               	movwf	main@sodaNT& (0+255),b
  1493                           
  1494                           ;main.c: 173: prevSoupIR = 0;
  1495  00010A  0E00               	movlw	0
  1496  00010C  0100               	movlb	0	; () banked
  1497  00010E  6FAC               	movwf	(main@prevSoupIR+1)& (0+255),b
  1498  000110  0E00               	movlw	0
  1499  000112  6FAB               	movwf	main@prevSoupIR& (0+255),b
  1500                           
  1501                           ;main.c: 174: prevSodaIR = 0;
  1502  000114  0E00               	movlw	0
  1503  000116  0100               	movlb	0	; () banked
  1504  000118  6FAA               	movwf	(main@prevSodaIR+1)& (0+255),b
  1505  00011A  0E00               	movlw	0
  1506  00011C  6FA9               	movwf	main@prevSodaIR& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 176: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1510  00011E  0E01               	movlw	1
  1511  000120  EC1C  F016         	call	_lcdInst
  1512  000124  0E34               	movlw	52
  1513  000126  0100               	movlb	0	; () banked
  1514  000128  6F91               	movwf	??_main& (0+255),b
  1515  00012A  0EF1               	movlw	241
  1516  00012C                     u7897:
  1517  00012C  2EE8               	decfsz	wreg,f,c
  1518  00012E  D7FE               	bra	u7897
  1519  000130  2F91               	decfsz	??_main& (0+255),f,b
  1520  000132  D7FC               	bra	u7897
  1521  000134  D000               	nop2	
  1522                           
  1523                           ;main.c: 177: printf("Sorting cans...");
  1524  000136  0E16               	movlw	low STR_1
  1525  000138  6E2D               	movwf	printf@f,c
  1526  00013A  0EFF               	movlw	high STR_1
  1527  00013C  6E2E               	movwf	printf@f+1,c
  1528  00013E  EC3B  F007         	call	_printf	;wreg free
  1529                           
  1530                           ;main.c: 178: lcdInst(0b11000000);;
  1531  000142  0EC0               	movlw	192
  1532  000144  EC1C  F016         	call	_lcdInst
  1533                           
  1534                           ;main.c: 179: printf("Any key to stop");
  1535  000148  0E56               	movlw	low STR_2
  1536  00014A  6E2D               	movwf	printf@f,c
  1537  00014C  0EFF               	movlw	high STR_2
  1538  00014E  6E2E               	movwf	printf@f+1,c
  1539  000150  EC3B  F007         	call	_printf	;wreg free
  1540                           
  1541                           ;main.c: 181: while(soupSteps < 14){
  1542  000154  D004               	goto	l5674
  1543  000156                     l5672:
  1544                           
  1545                           ;main.c: 182: S2mode = 2;
  1546  000156  0E00               	movlw	0
  1547  000158  6E5A               	movwf	_S2mode+1,c
  1548  00015A  0E02               	movlw	2
  1549  00015C  6E59               	movwf	_S2mode,c
  1550  00015E                     l5674:
  1551  00015E  BE56               	btfsc	_soupSteps+1,7,c
  1552  000160  D7FA               	goto	l5672
  1553  000162  5056               	movf	_soupSteps+1,w,c
  1554  000164  E104               	bnz	l5676
  1555  000166  0E0E               	movlw	14
  1556  000168  5C55               	subwf	_soupSteps,w,c
  1557  00016A  A0D8               	btfss	status,0,c
  1558  00016C  D7F4               	goto	l5672
  1559  00016E                     l5676:
  1560                           
  1561                           ;main.c: 183: }
  1562                           ;main.c: 184: S2mode = 4;
  1563  00016E  0E00               	movlw	0
  1564  000170  6E5A               	movwf	_S2mode+1,c
  1565  000172  0E04               	movlw	4
  1566  000174  6E59               	movwf	_S2mode,c
  1567                           
  1568                           ;main.c: 185: calibrateWheels();
  1569  000176  EC86  F010         	call	_calibrateWheels	;wreg free
  1570                           
  1571                           ;main.c: 186: if(s1 == 2 || s1 == 3){S1mode = 3;}
  1572  00017A  0E02               	movlw	2
  1573  00017C  0100               	movlb	0	; () banked
  1574  00017E  19C0               	xorwf	_s1& (0+255),w,b
  1575  000180  0100               	movlb	0	; () banked
  1576  000182  11C1               	iorwf	(_s1+1)& (0+255),w,b
  1577  000184  B4D8               	btfsc	status,2,c
  1578  000186  D007               	goto	l5684
  1579                           
  1580                           ; BSR set to: 0
  1581  000188  0E03               	movlw	3
  1582  00018A  0100               	movlb	0	; () banked
  1583  00018C  19C0               	xorwf	_s1& (0+255),w,b
  1584  00018E  0100               	movlb	0	; () banked
  1585  000190  11C1               	iorwf	(_s1+1)& (0+255),w,b
  1586  000192  A4D8               	btfss	status,2,c
  1587  000194  D004               	goto	l5686
  1588  000196                     l5684:
  1589                           
  1590                           ; BSR set to: 0
  1591  000196  0E00               	movlw	0
  1592  000198  6E5C               	movwf	_S1mode+1,c
  1593  00019A  0E03               	movlw	3
  1594  00019C  D003               	goto	L1
  1595  00019E                     l5686:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;main.c: 187: else{S1mode = 5;}
  1599  00019E  0E00               	movlw	0
  1600  0001A0  6E5C               	movwf	_S1mode+1,c
  1601  0001A2  0E05               	movlw	5
  1602  0001A4                     L1:
  1603  0001A4  6E5B               	movwf	_S1mode,c
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 188: if(s3 == 2 || s3 == 3){S3mode = 3;}
  1607                           
  1608                           ; BSR set to: 0
  1609  0001A6  0E02               	movlw	2
  1610  0001A8  0100               	movlb	0	; () banked
  1611  0001AA  19BE               	xorwf	_s3& (0+255),w,b
  1612  0001AC  0100               	movlb	0	; () banked
  1613  0001AE  11BF               	iorwf	(_s3+1)& (0+255),w,b
  1614  0001B0  B4D8               	btfsc	status,2,c
  1615  0001B2  D007               	goto	l5692
  1616                           
  1617                           ; BSR set to: 0
  1618  0001B4  0E03               	movlw	3
  1619  0001B6  0100               	movlb	0	; () banked
  1620  0001B8  19BE               	xorwf	_s3& (0+255),w,b
  1621  0001BA  0100               	movlb	0	; () banked
  1622  0001BC  11BF               	iorwf	(_s3+1)& (0+255),w,b
  1623  0001BE  A4D8               	btfss	status,2,c
  1624  0001C0  D004               	goto	l5694
  1625  0001C2                     l5692:
  1626                           
  1627                           ; BSR set to: 0
  1628  0001C2  0E00               	movlw	0
  1629  0001C4  6E58               	movwf	_S3mode+1,c
  1630  0001C6  0E03               	movlw	3
  1631  0001C8  D003               	goto	L2
  1632  0001CA                     l5694:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 189: else{S3mode = 5;}
  1636  0001CA  0E00               	movlw	0
  1637  0001CC  6E58               	movwf	_S3mode+1,c
  1638  0001CE  0E05               	movlw	5
  1639  0001D0                     L2:
  1640  0001D0  6E57               	movwf	_S3mode,c
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 190: PWM2(900, 1);
  1644                           
  1645                           ; BSR set to: 0
  1646  0001D2  0E03               	movlw	3
  1647  0001D4  6E22               	movwf	PWM2@duty+1,c
  1648  0001D6  0E84               	movlw	132
  1649  0001D8  6E21               	movwf	PWM2@duty,c
  1650  0001DA  0E00               	movlw	0
  1651  0001DC  6E24               	movwf	PWM2@dir+1,c
  1652  0001DE  0E01               	movlw	1
  1653  0001E0  6E23               	movwf	PWM2@dir,c
  1654  0001E2  EC60  F013         	call	_PWM2	;wreg free
  1655                           
  1656                           ;main.c: 191: PWM1(400);
  1657  0001E6  0E01               	movlw	1
  1658  0001E8  6E22               	movwf	PWM1@duty+1,c
  1659  0001EA  0E90               	movlw	144
  1660  0001EC  6E21               	movwf	PWM1@duty,c
  1661  0001EE  ECE1  F014         	call	_PWM1	;wreg free
  1662                           
  1663                           ;main.c: 193: keypress = (0);
  1664  0001F2  0E00               	movlw	0
  1665  0001F4  0100               	movlb	0	; () banked
  1666  0001F6  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1667                           
  1668                           ;main.c: 195: }
  1669  0001F8  D736               	goto	l5646
  1670  0001FA                     l5700:
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 196: else if(keypress == 3){
  1674  0001FA  0E03               	movlw	3
  1675  0001FC  0100               	movlb	0	; () banked
  1676  0001FE  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1677  000200  A4D8               	btfss	status,2,c
  1678  000202  D019               	goto	l5704
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 197: displayLog(1);
  1682  000204  0E00               	movlw	0
  1683  000206  6E3A               	movwf	displayLog@run+1,c
  1684  000208  0E01               	movlw	1
  1685  00020A  6E39               	movwf	displayLog@run,c
  1686  00020C  ECFF  F008         	call	_displayLog	;wreg free
  1687                           
  1688                           ;main.c: 198: displayLog(2);
  1689  000210  0E00               	movlw	0
  1690  000212  6E3A               	movwf	displayLog@run+1,c
  1691  000214  0E02               	movlw	2
  1692  000216  6E39               	movwf	displayLog@run,c
  1693  000218  ECFF  F008         	call	_displayLog	;wreg free
  1694                           
  1695                           ;main.c: 199: displayLog(3);
  1696  00021C  0E00               	movlw	0
  1697  00021E  6E3A               	movwf	displayLog@run+1,c
  1698  000220  0E03               	movlw	3
  1699  000222  6E39               	movwf	displayLog@run,c
  1700  000224  ECFF  F008         	call	_displayLog	;wreg free
  1701                           
  1702                           ;main.c: 200: displayLog(4);
  1703  000228  0E00               	movlw	0
  1704  00022A  6E3A               	movwf	displayLog@run+1,c
  1705  00022C  0E04               	movlw	4
  1706  00022E  6E39               	movwf	displayLog@run,c
  1707  000230  ECFF  F008         	call	_displayLog	;wreg free
  1708                           
  1709                           ;main.c: 201: }
  1710  000234  D718               	goto	l5646
  1711  000236                     l5704:
  1712                           
  1713                           ;main.c: 202: else if(keypress == 15 ) {
  1714  000236  0E0F               	movlw	15
  1715  000238  0100               	movlb	0	; () banked
  1716  00023A  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1717  00023C  A4D8               	btfss	status,2,c
  1718  00023E  D713               	goto	l5646
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 203: standby = 2;
  1722  000240  0E00               	movlw	0
  1723  000242  0100               	movlb	0	; () banked
  1724  000244  6FAE               	movwf	(main@standby+1)& (0+255),b
  1725  000246  0E02               	movlw	2
  1726  000248  6FAD               	movwf	main@standby& (0+255),b
  1727                           
  1728                           ;main.c: 204: s = 1;
  1729  00024A  0E00               	movlw	0
  1730  00024C  0100               	movlb	0	; () banked
  1731  00024E  6F98               	movwf	(main@s+1)& (0+255),b
  1732  000250  0E01               	movlw	1
  1733  000252  6F97               	movwf	main@s& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 205: }
  1737                           ;main.c: 207: }
  1738                           
  1739                           ; BSR set to: 0
  1740                           
  1741                           ; BSR set to: 0
  1742  000254  D708               	goto	l5646
  1743  000256                     l5708:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 208: else if(standby == 2){
  1747  000256  0E02               	movlw	2
  1748  000258  0100               	movlb	0	; () banked
  1749  00025A  19AD               	xorwf	main@standby& (0+255),w,b
  1750  00025C  0100               	movlb	0	; () banked
  1751  00025E  11AE               	iorwf	(main@standby+1)& (0+255),w,b
  1752  000260  A4D8               	btfss	status,2,c
  1753  000262  D25B               	goto	l5946
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 211: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1757  000264  0E01               	movlw	1
  1758  000266  EC1C  F016         	call	_lcdInst
  1759  00026A  0E34               	movlw	52
  1760  00026C  0100               	movlb	0	; () banked
  1761  00026E  6F91               	movwf	??_main& (0+255),b
  1762  000270  0EF1               	movlw	241
  1763  000272                     u7907:
  1764  000272  2EE8               	decfsz	wreg,f,c
  1765  000274  D7FE               	bra	u7907
  1766  000276  2F91               	decfsz	??_main& (0+255),f,b
  1767  000278  D7FC               	bra	u7907
  1768  00027A  D000               	nop2	
  1769                           
  1770                           ;main.c: 212: printf("testing PWM2 CW");
  1771  00027C  0E26               	movlw	low STR_3
  1772  00027E  6E2D               	movwf	printf@f,c
  1773  000280  0EFF               	movlw	high STR_3
  1774  000282  6E2E               	movwf	printf@f+1,c
  1775  000284  EC3B  F007         	call	_printf	;wreg free
  1776                           
  1777                           ;main.c: 213: PWM2(900, 1);
  1778  000288  0E03               	movlw	3
  1779  00028A  6E22               	movwf	PWM2@duty+1,c
  1780  00028C  0E84               	movlw	132
  1781  00028E  6E21               	movwf	PWM2@duty,c
  1782  000290  0E00               	movlw	0
  1783  000292  6E24               	movwf	PWM2@dir+1,c
  1784  000294  0E01               	movlw	1
  1785  000296  6E23               	movwf	PWM2@dir,c
  1786  000298  EC60  F013         	call	_PWM2	;wreg free
  1787                           
  1788                           ;main.c: 214: keycheck();
  1789  00029C  ECF2  F015         	call	_keycheck	;wreg free
  1790                           
  1791                           ;main.c: 216: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1792  0002A0  0E01               	movlw	1
  1793  0002A2  EC1C  F016         	call	_lcdInst
  1794  0002A6  0E34               	movlw	52
  1795  0002A8  0100               	movlb	0	; () banked
  1796  0002AA  6F91               	movwf	??_main& (0+255),b
  1797  0002AC  0EF1               	movlw	241
  1798  0002AE                     u7917:
  1799  0002AE  2EE8               	decfsz	wreg,f,c
  1800  0002B0  D7FE               	bra	u7917
  1801  0002B2  2F91               	decfsz	??_main& (0+255),f,b
  1802  0002B4  D7FC               	bra	u7917
  1803  0002B6  D000               	nop2	
  1804                           
  1805                           ;main.c: 217: printf("testing PWM2 CCW");
  1806  0002B8  0EC4               	movlw	low STR_4
  1807  0002BA  6E2D               	movwf	printf@f,c
  1808  0002BC  0EFE               	movlw	high STR_4
  1809  0002BE  6E2E               	movwf	printf@f+1,c
  1810  0002C0  EC3B  F007         	call	_printf	;wreg free
  1811                           
  1812                           ;main.c: 218: PWM2(900, 2);
  1813  0002C4  0E03               	movlw	3
  1814  0002C6  6E22               	movwf	PWM2@duty+1,c
  1815  0002C8  0E84               	movlw	132
  1816  0002CA  6E21               	movwf	PWM2@duty,c
  1817  0002CC  0E00               	movlw	0
  1818  0002CE  6E24               	movwf	PWM2@dir+1,c
  1819  0002D0  0E02               	movlw	2
  1820  0002D2  6E23               	movwf	PWM2@dir,c
  1821  0002D4  EC60  F013         	call	_PWM2	;wreg free
  1822                           
  1823                           ;main.c: 219: keycheck();
  1824  0002D8  ECF2  F015         	call	_keycheck	;wreg free
  1825                           
  1826                           ;main.c: 221: PWM2off();
  1827  0002DC  EC27  F016         	call	_PWM2off	;wreg free
  1828                           
  1829                           ;main.c: 223: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1830  0002E0  0E01               	movlw	1
  1831  0002E2  EC1C  F016         	call	_lcdInst
  1832  0002E6  0E34               	movlw	52
  1833  0002E8  0100               	movlb	0	; () banked
  1834  0002EA  6F91               	movwf	??_main& (0+255),b
  1835  0002EC  0EF1               	movlw	241
  1836  0002EE                     u7927:
  1837  0002EE  2EE8               	decfsz	wreg,f,c
  1838  0002F0  D7FE               	bra	u7927
  1839  0002F2  2F91               	decfsz	??_main& (0+255),f,b
  1840  0002F4  D7FC               	bra	u7927
  1841  0002F6  D000               	nop2	
  1842                           
  1843                           ;main.c: 224: printf("testing S f");
  1844  0002F8  0EC7               	movlw	low STR_5
  1845  0002FA  6E2D               	movwf	printf@f,c
  1846  0002FC  0EFF               	movlw	high STR_5
  1847  0002FE  6E2E               	movwf	printf@f+1,c
  1848  000300  EC3B  F007         	call	_printf	;wreg free
  1849                           
  1850                           ;main.c: 225: S1mode = 1;
  1851  000304  0E00               	movlw	0
  1852  000306  6E5C               	movwf	_S1mode+1,c
  1853  000308  0E01               	movlw	1
  1854  00030A  6E5B               	movwf	_S1mode,c
  1855                           
  1856                           ;main.c: 226: S2mode = 1;
  1857  00030C  0E00               	movlw	0
  1858  00030E  6E5A               	movwf	_S2mode+1,c
  1859  000310  0E01               	movlw	1
  1860  000312  6E59               	movwf	_S2mode,c
  1861                           
  1862                           ;main.c: 227: S3mode = 1;
  1863  000314  0E00               	movlw	0
  1864  000316  6E58               	movwf	_S3mode+1,c
  1865  000318  0E01               	movlw	1
  1866  00031A  6E57               	movwf	_S3mode,c
  1867                           
  1868                           ;main.c: 228: keycheck();
  1869  00031C  ECF2  F015         	call	_keycheck	;wreg free
  1870                           
  1871                           ;main.c: 230: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1872  000320  0E01               	movlw	1
  1873  000322  EC1C  F016         	call	_lcdInst
  1874  000326  0E34               	movlw	52
  1875  000328  0100               	movlb	0	; () banked
  1876  00032A  6F91               	movwf	??_main& (0+255),b
  1877  00032C  0EF1               	movlw	241
  1878  00032E                     u7937:
  1879  00032E  2EE8               	decfsz	wreg,f,c
  1880  000330  D7FE               	bra	u7937
  1881  000332  2F91               	decfsz	??_main& (0+255),f,b
  1882  000334  D7FC               	bra	u7937
  1883  000336  D000               	nop2	
  1884                           
  1885                           ;main.c: 231: printf("testing S b");
  1886  000338  0EAF               	movlw	low STR_6
  1887  00033A  6E2D               	movwf	printf@f,c
  1888  00033C  0EFF               	movlw	high STR_6
  1889  00033E  6E2E               	movwf	printf@f+1,c
  1890  000340  EC3B  F007         	call	_printf	;wreg free
  1891                           
  1892                           ;main.c: 232: S1mode = 2;
  1893  000344  0E00               	movlw	0
  1894  000346  6E5C               	movwf	_S1mode+1,c
  1895  000348  0E02               	movlw	2
  1896  00034A  6E5B               	movwf	_S1mode,c
  1897                           
  1898                           ;main.c: 233: S2mode = 2;
  1899  00034C  0E00               	movlw	0
  1900  00034E  6E5A               	movwf	_S2mode+1,c
  1901  000350  0E02               	movlw	2
  1902  000352  6E59               	movwf	_S2mode,c
  1903                           
  1904                           ;main.c: 234: S3mode = 2;
  1905  000354  0E00               	movlw	0
  1906  000356  6E58               	movwf	_S3mode+1,c
  1907  000358  0E02               	movlw	2
  1908  00035A  6E57               	movwf	_S3mode,c
  1909                           
  1910                           ;main.c: 235: keycheck();
  1911  00035C  ECF2  F015         	call	_keycheck	;wreg free
  1912                           
  1913                           ;main.c: 237: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1914  000360  0E01               	movlw	1
  1915  000362  EC1C  F016         	call	_lcdInst
  1916  000366  0E34               	movlw	52
  1917  000368  0100               	movlb	0	; () banked
  1918  00036A  6F91               	movwf	??_main& (0+255),b
  1919  00036C  0EF1               	movlw	241
  1920  00036E                     u7947:
  1921  00036E  2EE8               	decfsz	wreg,f,c
  1922  000370  D7FE               	bra	u7947
  1923  000372  2F91               	decfsz	??_main& (0+255),f,b
  1924  000374  D7FC               	bra	u7947
  1925  000376  D000               	nop2	
  1926                           
  1927                           ;main.c: 238: printf("testing S shake");
  1928  000378  0E36               	movlw	low STR_7
  1929  00037A  6E2D               	movwf	printf@f,c
  1930  00037C  0EFF               	movlw	high STR_7
  1931  00037E  6E2E               	movwf	printf@f+1,c
  1932  000380  EC3B  F007         	call	_printf	;wreg free
  1933                           
  1934                           ;main.c: 239: S1mode = 3;
  1935  000384  0E00               	movlw	0
  1936  000386  6E5C               	movwf	_S1mode+1,c
  1937  000388  0E03               	movlw	3
  1938  00038A  6E5B               	movwf	_S1mode,c
  1939                           
  1940                           ;main.c: 240: S2mode = 3;
  1941  00038C  0E00               	movlw	0
  1942  00038E  6E5A               	movwf	_S2mode+1,c
  1943  000390  0E03               	movlw	3
  1944  000392  6E59               	movwf	_S2mode,c
  1945                           
  1946                           ;main.c: 241: S3mode = 3;
  1947  000394  0E00               	movlw	0
  1948  000396  6E58               	movwf	_S3mode+1,c
  1949  000398  0E03               	movlw	3
  1950  00039A  6E57               	movwf	_S3mode,c
  1951                           
  1952                           ;main.c: 242: keycheck();
  1953  00039C  ECF2  F015         	call	_keycheck	;wreg free
  1954                           
  1955                           ;main.c: 244: S1mode = 4;
  1956  0003A0  0E00               	movlw	0
  1957  0003A2  6E5C               	movwf	_S1mode+1,c
  1958  0003A4  0E04               	movlw	4
  1959  0003A6  6E5B               	movwf	_S1mode,c
  1960                           
  1961                           ;main.c: 245: S2mode = 4;
  1962  0003A8  0E00               	movlw	0
  1963  0003AA  6E5A               	movwf	_S2mode+1,c
  1964  0003AC  0E04               	movlw	4
  1965  0003AE  6E59               	movwf	_S2mode,c
  1966                           
  1967                           ;main.c: 246: S3mode = 4;
  1968  0003B0  0E00               	movlw	0
  1969  0003B2  6E58               	movwf	_S3mode+1,c
  1970  0003B4  0E04               	movlw	4
  1971  0003B6  6E57               	movwf	_S3mode,c
  1972                           
  1973                           ;main.c: 248: keypress = (0);
  1974  0003B8  0E00               	movlw	0
  1975  0003BA  0100               	movlb	0	; () banked
  1976  0003BC  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;main.c: 249: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1980  0003BE  0E01               	movlw	1
  1981  0003C0  EC1C  F016         	call	_lcdInst
  1982  0003C4  0E34               	movlw	52
  1983  0003C6  0100               	movlb	0	; () banked
  1984  0003C8  6F91               	movwf	??_main& (0+255),b
  1985  0003CA  0EF1               	movlw	241
  1986  0003CC                     u7957:
  1987  0003CC  2EE8               	decfsz	wreg,f,c
  1988  0003CE  D7FE               	bra	u7957
  1989  0003D0  2F91               	decfsz	??_main& (0+255),f,b
  1990  0003D2  D7FC               	bra	u7957
  1991  0003D4  D000               	nop2	
  1992                           
  1993                           ;main.c: 250: printf("testing S1 pins");
  1994  0003D6  0E66               	movlw	low STR_8
  1995  0003D8  6E2D               	movwf	printf@f,c
  1996  0003DA  0EFF               	movlw	high STR_8
  1997  0003DC  6E2E               	movwf	printf@f+1,c
  1998  0003DE  EC3B  F007         	call	_printf	;wreg free
  1999                           
  2000                           ;main.c: 251: while(keypress!=3){
  2001  0003E2  D032               	goto	l5808
  2002  0003E4                     l5786:
  2003                           
  2004                           ;main.c: 253: keyinterrupt();
  2005  0003E4  ECE7  F015         	call	_keyinterrupt	;wreg free
  2006                           
  2007                           ;main.c: 255: if (keypress == 2){LATDbits.LATD1 = 1;}
  2008  0003E8  0E02               	movlw	2
  2009  0003EA  0100               	movlb	0	; () banked
  2010  0003EC  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2011  0003EE  A4D8               	btfss	status,2,c
  2012  0003F0  D002               	goto	l216
  2013                           
  2014                           ; BSR set to: 0
  2015  0003F2  828C               	bsf	3980,1,c	;volatile
  2016  0003F4  D001               	goto	l5792
  2017  0003F6                     l216:
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 256: else{LATDbits.LATD1 = 0;}
  2021  0003F6  928C               	bcf	3980,1,c	;volatile
  2022  0003F8                     l5792:
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;main.c: 257: if (keypress == 6){LATBbits.LATB3 = 1;}
  2026  0003F8  0E06               	movlw	6
  2027  0003FA  0100               	movlb	0	; () banked
  2028  0003FC  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2029  0003FE  A4D8               	btfss	status,2,c
  2030  000400  D002               	goto	l218
  2031                           
  2032                           ; BSR set to: 0
  2033  000402  868A               	bsf	3978,3,c	;volatile
  2034  000404  D001               	goto	l5796
  2035  000406                     l218:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;main.c: 258: else{LATBbits.LATB3 = 0;}
  2039  000406  968A               	bcf	3978,3,c	;volatile
  2040  000408                     l5796:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 259: if (keypress == 10){LATBbits.LATB2 = 1;}
  2044  000408  0E0A               	movlw	10
  2045  00040A  0100               	movlb	0	; () banked
  2046  00040C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2047  00040E  A4D8               	btfss	status,2,c
  2048  000410  D002               	goto	l220
  2049                           
  2050                           ; BSR set to: 0
  2051  000412  848A               	bsf	3978,2,c	;volatile
  2052  000414  D001               	goto	l5800
  2053  000416                     l220:
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 260: else{LATBbits.LATB2 = 0;}
  2057  000416  948A               	bcf	3978,2,c	;volatile
  2058  000418                     l5800:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 261: if (keypress == 14){LATBbits.LATB0 = 1;}
  2062  000418  0E0E               	movlw	14
  2063  00041A  0100               	movlb	0	; () banked
  2064  00041C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2065  00041E  A4D8               	btfss	status,2,c
  2066  000420  D002               	goto	l222
  2067                           
  2068                           ; BSR set to: 0
  2069  000422  808A               	bsf	3978,0,c	;volatile
  2070  000424  D001               	goto	l5804
  2071  000426                     l222:
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;main.c: 262: else{LATBbits.LATB0 = 0;}
  2075  000426  908A               	bcf	3978,0,c	;volatile
  2076  000428                     l5804:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;main.c: 264: readADC(1);
  2080  000428  0E01               	movlw	1
  2081  00042A  ECC6  F015         	call	_readADC
  2082                           
  2083                           ;main.c: 265: lcdInst(0b11000000);;
  2084  00042E  0EC0               	movlw	192
  2085  000430  EC1C  F016         	call	_lcdInst
  2086                           
  2087                           ;main.c: 266: printf("%x", ADRES);
  2088  000434  0EFB               	movlw	low STR_9
  2089  000436  6E2D               	movwf	printf@f,c
  2090  000438  0EFF               	movlw	high STR_9
  2091  00043A  6E2E               	movwf	printf@f+1,c
  2092  00043C  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2093  000440  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2094  000444  EC3B  F007         	call	_printf	;wreg free
  2095  000448                     l5808:
  2096  000448  0E03               	movlw	3
  2097  00044A  0100               	movlb	0	; () banked
  2098  00044C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2099  00044E  A4D8               	btfss	status,2,c
  2100  000450  D7C9               	goto	l5786
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;main.c: 267: }
  2104                           ;main.c: 269: keypress = (0);
  2105                           
  2106                           ; BSR set to: 0
  2107  000452  0E00               	movlw	0
  2108  000454  0100               	movlb	0	; () banked
  2109  000456  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 270: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2113  000458  0E01               	movlw	1
  2114  00045A  EC1C  F016         	call	_lcdInst
  2115  00045E  0E34               	movlw	52
  2116  000460  0100               	movlb	0	; () banked
  2117  000462  6F91               	movwf	??_main& (0+255),b
  2118  000464  0EF1               	movlw	241
  2119  000466                     u7967:
  2120  000466  2EE8               	decfsz	wreg,f,c
  2121  000468  D7FE               	bra	u7967
  2122  00046A  2F91               	decfsz	??_main& (0+255),f,b
  2123  00046C  D7FC               	bra	u7967
  2124  00046E  D000               	nop2	
  2125                           
  2126                           ;main.c: 271: printf("testing S2 pins");
  2127  000470  0E76               	movlw	low STR_10
  2128  000472  6E2D               	movwf	printf@f,c
  2129  000474  0EFF               	movlw	high STR_10
  2130  000476  6E2E               	movwf	printf@f+1,c
  2131  000478  EC3B  F007         	call	_printf	;wreg free
  2132                           
  2133                           ;main.c: 272: while(keypress!=3){
  2134  00047C  D022               	goto	l5836
  2135  00047E                     l5818:
  2136                           
  2137                           ;main.c: 274: keyinterrupt();
  2138  00047E  ECE7  F015         	call	_keyinterrupt	;wreg free
  2139                           
  2140                           ;main.c: 276: if (keypress == 2){LATCbits.LATC7 = 1;}
  2141  000482  0E02               	movlw	2
  2142  000484  0100               	movlb	0	; () banked
  2143  000486  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2144  000488  A4D8               	btfss	status,2,c
  2145  00048A  D002               	goto	l227
  2146                           
  2147                           ; BSR set to: 0
  2148  00048C  8E8B               	bsf	3979,7,c	;volatile
  2149  00048E  D001               	goto	l5824
  2150  000490                     l227:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 277: else{LATCbits.LATC7 = 0;}
  2154  000490  9E8B               	bcf	3979,7,c	;volatile
  2155  000492                     l5824:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 278: if (keypress == 6){LATCbits.LATC6 = 1;}
  2159  000492  0E06               	movlw	6
  2160  000494  0100               	movlb	0	; () banked
  2161  000496  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2162  000498  A4D8               	btfss	status,2,c
  2163  00049A  D002               	goto	l229
  2164                           
  2165                           ; BSR set to: 0
  2166  00049C  8C8B               	bsf	3979,6,c	;volatile
  2167  00049E  D001               	goto	l5828
  2168  0004A0                     l229:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;main.c: 279: else{LATCbits.LATC6 = 0;}
  2172  0004A0  9C8B               	bcf	3979,6,c	;volatile
  2173  0004A2                     l5828:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;main.c: 280: if (keypress == 10){LATCbits.LATC0 = 1;}
  2177  0004A2  0E0A               	movlw	10
  2178  0004A4  0100               	movlb	0	; () banked
  2179  0004A6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2180  0004A8  A4D8               	btfss	status,2,c
  2181  0004AA  D002               	goto	l231
  2182                           
  2183                           ; BSR set to: 0
  2184  0004AC  808B               	bsf	3979,0,c	;volatile
  2185  0004AE  D001               	goto	l5832
  2186  0004B0                     l231:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 281: else{LATCbits.LATC0 = 0;}
  2190  0004B0  908B               	bcf	3979,0,c	;volatile
  2191  0004B2                     l5832:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;main.c: 282: if (keypress == 14){LATCbits.LATC5 = 1;}
  2195  0004B2  0E0E               	movlw	14
  2196  0004B4  0100               	movlb	0	; () banked
  2197  0004B6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2198  0004B8  A4D8               	btfss	status,2,c
  2199  0004BA  D002               	goto	l233
  2200                           
  2201                           ; BSR set to: 0
  2202  0004BC  8A8B               	bsf	3979,5,c	;volatile
  2203  0004BE  D001               	goto	l5836
  2204  0004C0                     l233:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;main.c: 283: else{LATCbits.LATC5 = 0;}
  2208  0004C0  9A8B               	bcf	3979,5,c	;volatile
  2209  0004C2                     l5836:
  2210  0004C2  0E03               	movlw	3
  2211  0004C4  0100               	movlb	0	; () banked
  2212  0004C6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2213  0004C8  A4D8               	btfss	status,2,c
  2214  0004CA  D7D9               	goto	l5818
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 284: }
  2218                           ;main.c: 286: keypress = (0);
  2219                           
  2220                           ; BSR set to: 0
  2221  0004CC  0E00               	movlw	0
  2222  0004CE  0100               	movlb	0	; () banked
  2223  0004D0  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;main.c: 287: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2227  0004D2  0E01               	movlw	1
  2228  0004D4  EC1C  F016         	call	_lcdInst
  2229  0004D8  0E34               	movlw	52
  2230  0004DA  0100               	movlb	0	; () banked
  2231  0004DC  6F91               	movwf	??_main& (0+255),b
  2232  0004DE  0EF1               	movlw	241
  2233  0004E0                     u7977:
  2234  0004E0  2EE8               	decfsz	wreg,f,c
  2235  0004E2  D7FE               	bra	u7977
  2236  0004E4  2F91               	decfsz	??_main& (0+255),f,b
  2237  0004E6  D7FC               	bra	u7977
  2238  0004E8  D000               	nop2	
  2239                           
  2240                           ;main.c: 288: printf("testing S3 pins");
  2241  0004EA  0E86               	movlw	low STR_11
  2242  0004EC  6E2D               	movwf	printf@f,c
  2243  0004EE  0EFF               	movlw	high STR_11
  2244  0004F0  6E2E               	movwf	printf@f+1,c
  2245  0004F2  EC3B  F007         	call	_printf	;wreg free
  2246                           
  2247                           ;main.c: 289: while(keypress!=3){
  2248  0004F6  D032               	goto	l5868
  2249  0004F8                     l5846:
  2250                           
  2251                           ;main.c: 291: keyinterrupt();
  2252  0004F8  ECE7  F015         	call	_keyinterrupt	;wreg free
  2253                           
  2254                           ;main.c: 293: if (keypress == 2){LATEbits.LATE2 = 1;}
  2255  0004FC  0E02               	movlw	2
  2256  0004FE  0100               	movlb	0	; () banked
  2257  000500  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2258  000502  A4D8               	btfss	status,2,c
  2259  000504  D002               	goto	l238
  2260                           
  2261                           ; BSR set to: 0
  2262  000506  848D               	bsf	3981,2,c	;volatile
  2263  000508  D001               	goto	l5852
  2264  00050A                     l238:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main.c: 294: else{LATEbits.LATE2 = 0;}
  2268  00050A  948D               	bcf	3981,2,c	;volatile
  2269  00050C                     l5852:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 295: if (keypress == 6){LATEbits.LATE1 = 1;}
  2273  00050C  0E06               	movlw	6
  2274  00050E  0100               	movlb	0	; () banked
  2275  000510  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2276  000512  A4D8               	btfss	status,2,c
  2277  000514  D002               	goto	l240
  2278                           
  2279                           ; BSR set to: 0
  2280  000516  828D               	bsf	3981,1,c	;volatile
  2281  000518  D001               	goto	l5856
  2282  00051A                     l240:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;main.c: 296: else{LATEbits.LATE1 = 0;}
  2286  00051A  928D               	bcf	3981,1,c	;volatile
  2287  00051C                     l5856:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;main.c: 297: if (keypress == 10){LATAbits.LATA4 = 1;}
  2291  00051C  0E0A               	movlw	10
  2292  00051E  0100               	movlb	0	; () banked
  2293  000520  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2294  000522  A4D8               	btfss	status,2,c
  2295  000524  D002               	goto	l242
  2296                           
  2297                           ; BSR set to: 0
  2298  000526  8889               	bsf	3977,4,c	;volatile
  2299  000528  D001               	goto	l5860
  2300  00052A                     l242:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;main.c: 298: else{LATAbits.LATA4 = 0;}
  2304  00052A  9889               	bcf	3977,4,c	;volatile
  2305  00052C                     l5860:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 299: if (keypress == 14){LATDbits.LATD0 = 1;}
  2309  00052C  0E0E               	movlw	14
  2310  00052E  0100               	movlb	0	; () banked
  2311  000530  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2312  000532  A4D8               	btfss	status,2,c
  2313  000534  D002               	goto	l244
  2314                           
  2315                           ; BSR set to: 0
  2316  000536  808C               	bsf	3980,0,c	;volatile
  2317  000538  D001               	goto	l5864
  2318  00053A                     l244:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;main.c: 300: else{LATDbits.LATD0 = 0;}
  2322  00053A  908C               	bcf	3980,0,c	;volatile
  2323  00053C                     l5864:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 302: readADC(5);
  2327  00053C  0E05               	movlw	5
  2328  00053E  ECC6  F015         	call	_readADC
  2329                           
  2330                           ;main.c: 303: lcdInst(0b11000000);;
  2331  000542  0EC0               	movlw	192
  2332  000544  EC1C  F016         	call	_lcdInst
  2333                           
  2334                           ;main.c: 304: printf("%x", ADRES);
  2335  000548  0EFB               	movlw	low STR_9
  2336  00054A  6E2D               	movwf	printf@f,c
  2337  00054C  0EFF               	movlw	high STR_9
  2338  00054E  6E2E               	movwf	printf@f+1,c
  2339  000550  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2340  000554  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2341  000558  EC3B  F007         	call	_printf	;wreg free
  2342  00055C                     l5868:
  2343  00055C  0E03               	movlw	3
  2344  00055E  0100               	movlb	0	; () banked
  2345  000560  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2346  000562  A4D8               	btfss	status,2,c
  2347  000564  D7C9               	goto	l5846
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;main.c: 305: }
  2351                           ;main.c: 307: S1mode = 0;
  2352                           
  2353                           ; BSR set to: 0
  2354  000566  0E00               	movlw	0
  2355  000568  6E5C               	movwf	_S1mode+1,c
  2356  00056A  0E00               	movlw	0
  2357  00056C  6E5B               	movwf	_S1mode,c
  2358                           
  2359                           ;main.c: 308: S2mode = 0;
  2360  00056E  0E00               	movlw	0
  2361  000570  6E5A               	movwf	_S2mode+1,c
  2362  000572  0E00               	movlw	0
  2363  000574  6E59               	movwf	_S2mode,c
  2364                           
  2365                           ;main.c: 309: S3mode = 0;
  2366  000576  0E00               	movlw	0
  2367  000578  6E58               	movwf	_S3mode+1,c
  2368  00057A  0E00               	movlw	0
  2369  00057C  6E57               	movwf	_S3mode,c
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;main.c: 311: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2373  00057E  0E01               	movlw	1
  2374  000580  EC1C  F016         	call	_lcdInst
  2375  000584  0E34               	movlw	52
  2376  000586  0100               	movlb	0	; () banked
  2377  000588  6F91               	movwf	??_main& (0+255),b
  2378  00058A  0EF1               	movlw	241
  2379  00058C                     u7987:
  2380  00058C  2EE8               	decfsz	wreg,f,c
  2381  00058E  D7FE               	bra	u7987
  2382  000590  2F91               	decfsz	??_main& (0+255),f,b
  2383  000592  D7FC               	bra	u7987
  2384  000594  D000               	nop2	
  2385                           
  2386                           ;main.c: 312: printf("testing PWM1");
  2387  000596  0E96               	movlw	low STR_13
  2388  000598  6E2D               	movwf	printf@f,c
  2389  00059A  0EFF               	movlw	high STR_13
  2390  00059C  6E2E               	movwf	printf@f+1,c
  2391  00059E  EC3B  F007         	call	_printf	;wreg free
  2392                           
  2393                           ;main.c: 313: PWM1(400);
  2394  0005A2  0E01               	movlw	1
  2395  0005A4  6E22               	movwf	PWM1@duty+1,c
  2396  0005A6  0E90               	movlw	144
  2397  0005A8  6E21               	movwf	PWM1@duty,c
  2398  0005AA  ECE1  F014         	call	_PWM1	;wreg free
  2399                           
  2400                           ;main.c: 314: keycheck();
  2401  0005AE  ECF2  F015         	call	_keycheck	;wreg free
  2402                           
  2403                           ;main.c: 315: PWM1off();
  2404  0005B2  EC2C  F016         	call	_PWM1off	;wreg free
  2405                           
  2406                           ;main.c: 317: keypress = (0);
  2407  0005B6  0E00               	movlw	0
  2408  0005B8  0100               	movlb	0	; () banked
  2409  0005BA  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2410                           
  2411                           ;main.c: 318: while(keypress==(0)){
  2412  0005BC  D05B               	goto	l5916
  2413  0005BE                     l5886:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;main.c: 319: keypress = (0);
  2417  0005BE  0E00               	movlw	0
  2418  0005C0  0100               	movlb	0	; () banked
  2419  0005C2  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;main.c: 321: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2423  0005C4  0E01               	movlw	1
  2424  0005C6  EC1C  F016         	call	_lcdInst
  2425  0005CA  0E34               	movlw	52
  2426  0005CC  0100               	movlb	0	; () banked
  2427  0005CE  6F91               	movwf	??_main& (0+255),b
  2428  0005D0  0EF1               	movlw	241
  2429  0005D2                     u7997:
  2430  0005D2  2EE8               	decfsz	wreg,f,c
  2431  0005D4  D7FE               	bra	u7997
  2432  0005D6  2F91               	decfsz	??_main& (0+255),f,b
  2433  0005D8  D7FC               	bra	u7997
  2434  0005DA  D000               	nop2	
  2435                           
  2436                           ;main.c: 322: printf("testing IR");
  2437  0005DC  0ED3               	movlw	low STR_14
  2438  0005DE  6E2D               	movwf	printf@f,c
  2439  0005E0  0EFF               	movlw	high STR_14
  2440  0005E2  6E2E               	movwf	printf@f+1,c
  2441  0005E4  EC3B  F007         	call	_printf	;wreg free
  2442                           
  2443                           ;main.c: 323: lcdInst(0b11000000);;
  2444  0005E8  0EC0               	movlw	192
  2445  0005EA  EC1C  F016         	call	_lcdInst
  2446                           
  2447                           ;main.c: 324: readADC(1);
  2448  0005EE  0E01               	movlw	1
  2449  0005F0  ECC6  F015         	call	_readADC
  2450                           
  2451                           ;main.c: 325: printf("%x ", ADRES);
  2452  0005F4  0EF7               	movlw	low STR_15
  2453  0005F6  6E2D               	movwf	printf@f,c
  2454  0005F8  0EFF               	movlw	high STR_15
  2455  0005FA  6E2E               	movwf	printf@f+1,c
  2456  0005FC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2457  000600  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2458  000604  EC3B  F007         	call	_printf	;wreg free
  2459                           
  2460                           ;main.c: 326: readADC(0);
  2461  000608  0E00               	movlw	0
  2462  00060A  ECC6  F015         	call	_readADC
  2463                           
  2464                           ;main.c: 327: printf("%x ", ADRES);
  2465  00060E  0EF7               	movlw	low STR_15
  2466  000610  6E2D               	movwf	printf@f,c
  2467  000612  0EFF               	movlw	high STR_15
  2468  000614  6E2E               	movwf	printf@f+1,c
  2469  000616  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2470  00061A  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2471  00061E  EC3B  F007         	call	_printf	;wreg free
  2472                           
  2473                           ;main.c: 328: readADC(2);
  2474  000622  0E02               	movlw	2
  2475  000624  ECC6  F015         	call	_readADC
  2476                           
  2477                           ;main.c: 329: printf("%x ", ADRES);
  2478  000628  0EF7               	movlw	low STR_15
  2479  00062A  6E2D               	movwf	printf@f,c
  2480  00062C  0EFF               	movlw	high STR_15
  2481  00062E  6E2E               	movwf	printf@f+1,c
  2482  000630  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2483  000634  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2484  000638  EC3B  F007         	call	_printf	;wreg free
  2485                           
  2486                           ;main.c: 330: readADC(5);
  2487  00063C  0E05               	movlw	5
  2488  00063E  ECC6  F015         	call	_readADC
  2489                           
  2490                           ;main.c: 331: printf("%x ", ADRES);
  2491  000642  0EF7               	movlw	low STR_15
  2492  000644  6E2D               	movwf	printf@f,c
  2493  000646  0EFF               	movlw	high STR_15
  2494  000648  6E2E               	movwf	printf@f+1,c
  2495  00064A  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2496  00064E  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2497  000652  EC3B  F007         	call	_printf	;wreg free
  2498                           
  2499                           ;main.c: 332: keyinterrupt();
  2500  000656  ECE7  F015         	call	_keyinterrupt	;wreg free
  2501                           
  2502                           ;main.c: 333: _delay((unsigned long)((100)*(32000000/4000.0)));
  2503  00065A  0E05               	movlw	5
  2504  00065C  0100               	movlb	0	; () banked
  2505  00065E  6F92               	movwf	(??_main+1)& (0+255),b
  2506  000660  0E0F               	movlw	15
  2507  000662  0100               	movlb	0	; () banked
  2508  000664  6F91               	movwf	??_main& (0+255),b
  2509  000666  0EF1               	movlw	241
  2510  000668                     u8007:
  2511  000668  2EE8               	decfsz	wreg,f,c
  2512  00066A  D7FE               	bra	u8007
  2513  00066C  2F91               	decfsz	??_main& (0+255),f,b
  2514  00066E  D7FC               	bra	u8007
  2515  000670  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2516  000672  D7FA               	bra	u8007
  2517  000674                     l5916:
  2518  000674  0100               	movlb	0	; () banked
  2519  000676  51C2               	movf	_keypress& (0+255),w,b	;volatile
  2520  000678  B4D8               	btfsc	status,2,c
  2521  00067A  D7A1               	goto	l5886
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;main.c: 334: }
  2525                           ;main.c: 336: keypress = (0);
  2526                           
  2527                           ; BSR set to: 0
  2528  00067C  0E00               	movlw	0
  2529  00067E  0100               	movlb	0	; () banked
  2530  000680  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2531                           
  2532                           ;main.c: 337: while(keypress==(0)){
  2533  000682  D041               	goto	l5942
  2534  000684                     l5920:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;main.c: 338: keypress = (0);
  2538  000684  0E00               	movlw	0
  2539  000686  0100               	movlb	0	; () banked
  2540  000688  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;main.c: 339: _delay((unsigned long)((50)*(32000000/4000.0)));
  2544  00068A  0E03               	movlw	3
  2545  00068C  0100               	movlb	0	; () banked
  2546  00068E  6F92               	movwf	(??_main+1)& (0+255),b
  2547  000690  0E08               	movlw	8
  2548  000692  0100               	movlb	0	; () banked
  2549  000694  6F91               	movwf	??_main& (0+255),b
  2550  000696  0E77               	movlw	119
  2551  000698                     u8017:
  2552  000698  2EE8               	decfsz	wreg,f,c
  2553  00069A  D7FE               	bra	u8017
  2554  00069C  2F91               	decfsz	??_main& (0+255),f,b
  2555  00069E  D7FC               	bra	u8017
  2556  0006A0  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2557  0006A2  D7FA               	bra	u8017
  2558                           
  2559                           ;main.c: 340: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2560  0006A4  0E01               	movlw	1
  2561  0006A6  EC1C  F016         	call	_lcdInst
  2562  0006AA  0E34               	movlw	52
  2563  0006AC  0100               	movlb	0	; () banked
  2564  0006AE  6F91               	movwf	??_main& (0+255),b
  2565  0006B0  0EF1               	movlw	241
  2566  0006B2                     u8027:
  2567  0006B2  2EE8               	decfsz	wreg,f,c
  2568  0006B4  D7FE               	bra	u8027
  2569  0006B6  2F91               	decfsz	??_main& (0+255),f,b
  2570  0006B8  D7FC               	bra	u8027
  2571  0006BA  D000               	nop2	
  2572                           
  2573                           ;main.c: 341: printf("label   tab");
  2574  0006BC  0EBB               	movlw	low STR_19
  2575  0006BE  6E2D               	movwf	printf@f,c
  2576  0006C0  0EFF               	movlw	high STR_19
  2577  0006C2  6E2E               	movwf	printf@f+1,c
  2578  0006C4  EC3B  F007         	call	_printf	;wreg free
  2579                           
  2580                           ;main.c: 342: lcdInst(0b11000000);;
  2581  0006C8  0EC0               	movlw	192
  2582  0006CA  EC1C  F016         	call	_lcdInst
  2583                           
  2584                           ;main.c: 343: readADC(4);
  2585  0006CE  0E04               	movlw	4
  2586  0006D0  ECC6  F015         	call	_readADC
  2587                           
  2588                           ;main.c: 344: printf("%x      ", ADRES);
  2589  0006D4  0EDE               	movlw	low STR_20
  2590  0006D6  6E2D               	movwf	printf@f,c
  2591  0006D8  0EFF               	movlw	high STR_20
  2592  0006DA  6E2E               	movwf	printf@f+1,c
  2593  0006DC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2594  0006E0  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2595  0006E4  EC3B  F007         	call	_printf	;wreg free
  2596                           
  2597                           ;main.c: 345: readADC(3);
  2598  0006E8  0E03               	movlw	3
  2599  0006EA  ECC6  F015         	call	_readADC
  2600                           
  2601                           ;main.c: 346: printf("%x      ", ADRES);
  2602  0006EE  0EDE               	movlw	low STR_20
  2603  0006F0  6E2D               	movwf	printf@f,c
  2604  0006F2  0EFF               	movlw	high STR_20
  2605  0006F4  6E2E               	movwf	printf@f+1,c
  2606  0006F6  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2607  0006FA  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2608  0006FE  EC3B  F007         	call	_printf	;wreg free
  2609                           
  2610                           ;main.c: 347: keyinterrupt();
  2611  000702  ECE7  F015         	call	_keyinterrupt	;wreg free
  2612  000706                     l5942:
  2613  000706  0100               	movlb	0	; () banked
  2614  000708  51C2               	movf	_keypress& (0+255),w,b	;volatile
  2615  00070A  B4D8               	btfsc	status,2,c
  2616  00070C  D7BB               	goto	l5920
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 348: }
  2620                           ;main.c: 350: standby = 1;
  2621                           
  2622                           ; BSR set to: 0
  2623  00070E  0E00               	movlw	0
  2624  000710  0100               	movlb	0	; () banked
  2625  000712  6FAE               	movwf	(main@standby+1)& (0+255),b
  2626  000714  0E01               	movlw	1
  2627  000716  6FAD               	movwf	main@standby& (0+255),b
  2628                           
  2629                           ;main.c: 356: }
  2630  000718  D4A6               	goto	l5646
  2631  00071A                     l5946:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 361: readADC(2);
  2635  00071A  0E02               	movlw	2
  2636  00071C  ECC6  F015         	call	_readADC
  2637                           
  2638                           ;main.c: 362: if(ADRES <= 0x130){
  2639  000720  0E31               	movlw	49
  2640  000722  5CC3               	subwf	4035,w,c	;volatile
  2641  000724  0E01               	movlw	1
  2642  000726  58C4               	subwfb	4036,w,c	;volatile
  2643  000728  B0D8               	btfsc	status,0,c
  2644  00072A  D026               	goto	l5960
  2645                           
  2646                           ;main.c: 363: prevSoupLoad = seconds;
  2647  00072C  C0BC  F099         	movff	_seconds,main@prevSoupLoad
  2648  000730  C0BD  F09A         	movff	_seconds+1,main@prevSoupLoad+1
  2649                           
  2650                           ;main.c: 364: soupCnt = 1;
  2651  000734  0E00               	movlw	0
  2652  000736  0100               	movlb	0	; () banked
  2653  000738  6FB9               	movwf	(_soupCnt+1)& (0+255),b
  2654  00073A  0E01               	movlw	1
  2655  00073C  6FB8               	movwf	_soupCnt& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 365: if (!soupSort){
  2659  00073E  0100               	movlb	0	; () banked
  2660  000740  51A5               	movf	main@soupSort& (0+255),w,b
  2661  000742  0100               	movlb	0	; () banked
  2662  000744  11A6               	iorwf	(main@soupSort+1)& (0+255),w,b
  2663  000746  A4D8               	btfss	status,2,c
  2664  000748  D017               	goto	l5960
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 366: soupSort = 1;
  2668  00074A  0E00               	movlw	0
  2669  00074C  0100               	movlb	0	; () banked
  2670  00074E  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  2671  000750  0E01               	movlw	1
  2672  000752  6FA5               	movwf	main@soupSort& (0+255),b
  2673                           
  2674                           ;main.c: 367: soupSteps = 0;
  2675  000754  0E00               	movlw	0
  2676  000756  6E56               	movwf	_soupSteps+1,c
  2677  000758  0E00               	movlw	0
  2678  00075A  6E55               	movwf	_soupSteps,c
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;main.c: 368: _delay((unsigned long)((150)*(32000000/4000.0)));
  2682  00075C  0E07               	movlw	7
  2683  00075E  0100               	movlb	0	; () banked
  2684  000760  6F92               	movwf	(??_main+1)& (0+255),b
  2685  000762  0E17               	movlw	23
  2686  000764  0100               	movlb	0	; () banked
  2687  000766  6F91               	movwf	??_main& (0+255),b
  2688  000768  0E6A               	movlw	106
  2689  00076A                     u8037:
  2690  00076A  2EE8               	decfsz	wreg,f,c
  2691  00076C  D7FE               	bra	u8037
  2692  00076E  2F91               	decfsz	??_main& (0+255),f,b
  2693  000770  D7FC               	bra	u8037
  2694  000772  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2695  000774  D7FA               	bra	u8037
  2696  000776  F000               	nop	
  2697  000778                     l5960:
  2698                           
  2699                           ;main.c: 369: }
  2700                           ;main.c: 370: }
  2701                           ;main.c: 374: if (soupSort){
  2702  000778  0100               	movlb	0	; () banked
  2703  00077A  51A5               	movf	main@soupSort& (0+255),w,b
  2704  00077C  0100               	movlb	0	; () banked
  2705  00077E  11A6               	iorwf	(main@soupSort+1)& (0+255),w,b
  2706  000780  B4D8               	btfsc	status,2,c
  2707  000782  D0EE               	goto	l6044
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;main.c: 375: if (soupSteps < 120){
  2711  000784  BE56               	btfsc	_soupSteps+1,7,c
  2712  000786  D006               	goto	l5964
  2713  000788  5056               	movf	_soupSteps+1,w,c
  2714  00078A  E111               	bnz	l5970
  2715  00078C  0E78               	movlw	120
  2716  00078E  5C55               	subwf	_soupSteps,w,c
  2717  000790  B0D8               	btfsc	status,0,c
  2718  000792  D00D               	goto	l5970
  2719  000794                     l5964:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 376: readADC(4);
  2723  000794  0E04               	movlw	4
  2724  000796  ECC6  F015         	call	_readADC
  2725                           
  2726                           ;main.c: 377: if(ADRES<0x200){labelState = 1;}
  2727  00079A  0E02               	movlw	2
  2728  00079C  5CC4               	subwf	4036,w,c	;volatile
  2729  00079E  B0D8               	btfsc	status,0,c
  2730  0007A0  D0DF               	goto	l6044
  2731  0007A2  0E00               	movlw	0
  2732  0007A4  0100               	movlb	0	; () banked
  2733  0007A6  6FBB               	movwf	(_labelState+1)& (0+255),b
  2734  0007A8  0E01               	movlw	1
  2735  0007AA  6FBA               	movwf	_labelState& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;main.c: 379: }
  2739  0007AC  D0D9               	goto	l6044
  2740  0007AE                     l5970:
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;main.c: 380: else if (labelState == 1){
  2744  0007AE  0100               	movlb	0	; () banked
  2745  0007B0  05BA               	decf	_labelState& (0+255),w,b
  2746  0007B2  0100               	movlb	0	; () banked
  2747  0007B4  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2748  0007B6  A4D8               	btfss	status,2,c
  2749  0007B8  D03D               	goto	l5994
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 381: if(soupSteps < (120+70)){
  2753  0007BA  BE56               	btfsc	_soupSteps+1,7,c
  2754  0007BC  D006               	goto	l5974
  2755  0007BE  5056               	movf	_soupSteps+1,w,c
  2756  0007C0  E108               	bnz	l5976
  2757  0007C2  0EBE               	movlw	190
  2758  0007C4  5C55               	subwf	_soupSteps,w,c
  2759  0007C6  B0D8               	btfsc	status,0,c
  2760  0007C8  D004               	goto	l5976
  2761  0007CA                     l5974:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 382: S1mode = 1;
  2765  0007CA  0E00               	movlw	0
  2766  0007CC  6E5C               	movwf	_S1mode+1,c
  2767  0007CE  0E01               	movlw	1
  2768  0007D0  D042               	goto	L3
  2769  0007D2                     l5976:
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;main.c: 385: else if(soupSteps < (120+70+55)){
  2773  0007D2  BE56               	btfsc	_soupSteps+1,7,c
  2774  0007D4  D006               	goto	l5978
  2775  0007D6  5056               	movf	_soupSteps+1,w,c
  2776  0007D8  E10C               	bnz	l5980
  2777  0007DA  0EF5               	movlw	245
  2778  0007DC  5C55               	subwf	_soupSteps,w,c
  2779  0007DE  B0D8               	btfsc	status,0,c
  2780  0007E0  D008               	goto	l5980
  2781  0007E2                     l5978:
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 386: S1mode = 2;
  2785  0007E2  0E00               	movlw	0
  2786  0007E4  6E5C               	movwf	_S1mode+1,c
  2787  0007E6  0E02               	movlw	2
  2788  0007E8  6E5B               	movwf	_S1mode,c
  2789                           
  2790                           ;main.c: 387: soupAlign = 2;
  2791  0007EA  0E00               	movlw	0
  2792  0007EC  6E4E               	movwf	_soupAlign+1,c
  2793  0007EE  0E02               	movlw	2
  2794  0007F0  D048               	goto	L4
  2795  0007F2                     l5980:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 390: else{
  2799                           ;main.c: 391: S1mode = 4;
  2800  0007F2  0E00               	movlw	0
  2801  0007F4  6E5C               	movwf	_S1mode+1,c
  2802  0007F6  0E04               	movlw	4
  2803  0007F8  6E5B               	movwf	_S1mode,c
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;main.c: 393: updateS1(soupAlign);
  2807  0007FA  C04D  F021         	movff	_soupAlign,updateS1@mode
  2808  0007FE  C04E  F022         	movff	_soupAlign+1,updateS1@mode+1
  2809  000802  ECBD  F00A         	call	_updateS1	;wreg free
  2810                           
  2811                           ;main.c: 394: readADC(1);
  2812  000806  0E01               	movlw	1
  2813  000808  ECC6  F015         	call	_readADC
  2814                           
  2815                           ;main.c: 396: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  2816  00080C  0100               	movlb	0	; () banked
  2817  00080E  51AB               	movf	main@prevSoupIR& (0+255),w,b
  2818  000810  5CC3               	subwf	4035,w,c	;volatile
  2819  000812  0100               	movlb	0	; () banked
  2820  000814  51AC               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2821  000816  58C4               	subwfb	4036,w,c	;volatile
  2822  000818  B0D8               	btfsc	status,0,c
  2823  00081A  D059               	goto	l6016
  2824                           
  2825                           ; BSR set to: 0
  2826  00081C  0EAB               	movlw	171
  2827  00081E  5CC3               	subwf	4035,w,c	;volatile
  2828  000820  0E03               	movlw	3
  2829  000822  58C4               	subwfb	4036,w,c	;volatile
  2830  000824  A0D8               	btfss	status,0,c
  2831  000826  D053               	goto	l6016
  2832                           
  2833                           ; BSR set to: 0
  2834  000828  0E00               	movlw	0
  2835  00082A  0100               	movlb	0	; () banked
  2836  00082C  6FBB               	movwf	(_labelState+1)& (0+255),b
  2837  00082E  0E65               	movlw	101
  2838  000830  6FBA               	movwf	_labelState& (0+255),b
  2839  000832  D04D               	goto	l6016
  2840  000834                     l5994:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 401: else if(labelState == 0){
  2844  000834  0100               	movlb	0	; () banked
  2845  000836  51BA               	movf	_labelState& (0+255),w,b
  2846  000838  0100               	movlb	0	; () banked
  2847  00083A  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2848  00083C  A4D8               	btfss	status,2,c
  2849  00083E  D04C               	goto	l6018
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 402: if(soupSteps < (120+70)){
  2853  000840  BE56               	btfsc	_soupSteps+1,7,c
  2854  000842  D006               	goto	l5998
  2855  000844  5056               	movf	_soupSteps+1,w,c
  2856  000846  E10E               	bnz	l6000
  2857  000848  0EBE               	movlw	190
  2858  00084A  5C55               	subwf	_soupSteps,w,c
  2859  00084C  B0D8               	btfsc	status,0,c
  2860  00084E  D00A               	goto	l6000
  2861  000850                     l5998:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;main.c: 403: S1mode = 2;
  2865  000850  0E00               	movlw	0
  2866  000852  6E5C               	movwf	_S1mode+1,c
  2867  000854  0E02               	movlw	2
  2868  000856                     L3:
  2869  000856  6E5B               	movwf	_S1mode,c
  2870                           
  2871                           ;main.c: 404: soupCnt = 0;
  2872  000858  0E00               	movlw	0
  2873  00085A  0100               	movlb	0	; () banked
  2874  00085C  6FB9               	movwf	(_soupCnt+1)& (0+255),b
  2875  00085E  0E00               	movlw	0
  2876  000860  6FB8               	movwf	_soupCnt& (0+255),b
  2877                           
  2878                           ;main.c: 405: }
  2879  000862  D07E               	goto	l6044
  2880  000864                     l6000:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;main.c: 406: else if(soupSteps < (120+70+58)){
  2884  000864  BE56               	btfsc	_soupSteps+1,7,c
  2885  000866  D006               	goto	l6002
  2886  000868  5056               	movf	_soupSteps+1,w,c
  2887  00086A  E111               	bnz	l6004
  2888  00086C  0EF8               	movlw	248
  2889  00086E  5C55               	subwf	_soupSteps,w,c
  2890  000870  B0D8               	btfsc	status,0,c
  2891  000872  D00D               	goto	l6004
  2892  000874                     l6002:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 407: S1mode = 1;
  2896  000874  0E00               	movlw	0
  2897  000876  6E5C               	movwf	_S1mode+1,c
  2898  000878  0E01               	movlw	1
  2899  00087A  6E5B               	movwf	_S1mode,c
  2900                           
  2901                           ;main.c: 408: soupAlign = 1;
  2902  00087C  0E00               	movlw	0
  2903  00087E  6E4E               	movwf	_soupAlign+1,c
  2904  000880  0E01               	movlw	1
  2905  000882                     L4:
  2906  000882  6E4D               	movwf	_soupAlign,c
  2907                           
  2908                           ;main.c: 409: soupI = 1;
  2909  000884  0E00               	movlw	0
  2910  000886  6E4C               	movwf	_soupI+1,c
  2911  000888  0E01               	movlw	1
  2912  00088A  6E4B               	movwf	_soupI,c
  2913                           
  2914                           ;main.c: 410: }
  2915  00088C  D069               	goto	l6044
  2916  00088E                     l6004:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 411: else{
  2920                           ;main.c: 412: S1mode = 4;
  2921  00088E  0E00               	movlw	0
  2922  000890  6E5C               	movwf	_S1mode+1,c
  2923  000892  0E04               	movlw	4
  2924  000894  6E5B               	movwf	_S1mode,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;main.c: 414: updateS1(soupAlign);
  2928  000896  C04D  F021         	movff	_soupAlign,updateS1@mode
  2929  00089A  C04E  F022         	movff	_soupAlign+1,updateS1@mode+1
  2930  00089E  ECBD  F00A         	call	_updateS1	;wreg free
  2931                           
  2932                           ;main.c: 415: readADC(1);
  2933  0008A2  0E01               	movlw	1
  2934  0008A4  ECC6  F015         	call	_readADC
  2935                           
  2936                           ;main.c: 417: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  2937  0008A8  0100               	movlb	0	; () banked
  2938  0008AA  51AB               	movf	main@prevSoupIR& (0+255),w,b
  2939  0008AC  5CC3               	subwf	4035,w,c	;volatile
  2940  0008AE  0100               	movlb	0	; () banked
  2941  0008B0  51AC               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2942  0008B2  58C4               	subwfb	4036,w,c	;volatile
  2943  0008B4  B0D8               	btfsc	status,0,c
  2944  0008B6  D00B               	goto	l6016
  2945                           
  2946                           ; BSR set to: 0
  2947  0008B8  0EAB               	movlw	171
  2948  0008BA  5CC3               	subwf	4035,w,c	;volatile
  2949  0008BC  0E03               	movlw	3
  2950  0008BE  58C4               	subwfb	4036,w,c	;volatile
  2951  0008C0  A0D8               	btfss	status,0,c
  2952  0008C2  D005               	goto	l6016
  2953                           
  2954                           ; BSR set to: 0
  2955  0008C4  0E00               	movlw	0
  2956  0008C6  0100               	movlb	0	; () banked
  2957  0008C8  6FBB               	movwf	(_labelState+1)& (0+255),b
  2958  0008CA  0E64               	movlw	100
  2959  0008CC  D7B1               	goto	L12
  2960  0008CE                     l6016:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 418: prevSoupIR = ADRES;
  2964  0008CE  CFC3 F0AB          	movff	4035,main@prevSoupIR	;volatile
  2965  0008D2  CFC4 F0AC          	movff	4036,main@prevSoupIR+1	;volatile
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 419: }
  2969                           ;main.c: 420: }
  2970                           
  2971                           ; BSR set to: 0
  2972  0008D6  D044               	goto	l6044
  2973  0008D8                     l6018:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 421: else{
  2977                           ;main.c: 422: if(labelState == 101){soupNL++;}
  2978  0008D8  0E65               	movlw	101
  2979  0008DA  0100               	movlb	0	; () banked
  2980  0008DC  19BA               	xorwf	_labelState& (0+255),w,b
  2981  0008DE  0100               	movlb	0	; () banked
  2982  0008E0  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2983  0008E2  A4D8               	btfss	status,2,c
  2984  0008E4  D004               	goto	l6022
  2985                           
  2986                           ; BSR set to: 0
  2987  0008E6  0100               	movlb	0	; () banked
  2988  0008E8  4B9F               	infsnz	main@soupNL& (0+255),f,b
  2989  0008EA  2BA0               	incf	(main@soupNL+1)& (0+255),f,b
  2990  0008EC  D00A               	goto	l6026
  2991  0008EE                     l6022:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 423: else if(labelState == 100){soupL++;}
  2995  0008EE  0E64               	movlw	100
  2996  0008F0  0100               	movlb	0	; () banked
  2997  0008F2  19BA               	xorwf	_labelState& (0+255),w,b
  2998  0008F4  0100               	movlb	0	; () banked
  2999  0008F6  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  3000  0008F8  A4D8               	btfss	status,2,c
  3001  0008FA  D003               	goto	l6026
  3002                           
  3003                           ; BSR set to: 0
  3004  0008FC  0100               	movlb	0	; () banked
  3005  0008FE  4B9D               	infsnz	main@soupL& (0+255),f,b
  3006  000900  2B9E               	incf	(main@soupL+1)& (0+255),f,b
  3007  000902                     l6026:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;main.c: 424: soupSteps = 0;
  3011  000902  0E00               	movlw	0
  3012  000904  6E56               	movwf	_soupSteps+1,c
  3013  000906  0E00               	movlw	0
  3014  000908  6E55               	movwf	_soupSteps,c
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 425: prevSoupIR = 0;
  3018  00090A  0E00               	movlw	0
  3019  00090C  0100               	movlb	0	; () banked
  3020  00090E  6FAC               	movwf	(main@prevSoupIR+1)& (0+255),b
  3021  000910  0E00               	movlw	0
  3022  000912  6FAB               	movwf	main@prevSoupIR& (0+255),b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;main.c: 426: labelState = 0;
  3026  000914  0E00               	movlw	0
  3027  000916  0100               	movlb	0	; () banked
  3028  000918  6FBB               	movwf	(_labelState+1)& (0+255),b
  3029  00091A  0E00               	movlw	0
  3030  00091C  6FBA               	movwf	_labelState& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;main.c: 427: if (soupCnt == 0) {soupSort = 0;}
  3034  00091E  0100               	movlb	0	; () banked
  3035  000920  51B8               	movf	_soupCnt& (0+255),w,b
  3036  000922  0100               	movlb	0	; () banked
  3037  000924  11B9               	iorwf	(_soupCnt+1)& (0+255),w,b
  3038  000926  A4D8               	btfss	status,2,c
  3039  000928  D005               	goto	l6036
  3040                           
  3041                           ; BSR set to: 0
  3042  00092A  0E00               	movlw	0
  3043  00092C  0100               	movlb	0	; () banked
  3044  00092E  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  3045  000930  0E00               	movlw	0
  3046  000932  6FA5               	movwf	main@soupSort& (0+255),b
  3047  000934                     l6036:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;main.c: 429: if(s1 == 2 || s1 == 3){S1mode = 3;}
  3051  000934  0E02               	movlw	2
  3052  000936  0100               	movlb	0	; () banked
  3053  000938  19C0               	xorwf	_s1& (0+255),w,b
  3054  00093A  0100               	movlb	0	; () banked
  3055  00093C  11C1               	iorwf	(_s1+1)& (0+255),w,b
  3056  00093E  B4D8               	btfsc	status,2,c
  3057  000940  D007               	goto	l6040
  3058                           
  3059                           ; BSR set to: 0
  3060  000942  0E03               	movlw	3
  3061  000944  0100               	movlb	0	; () banked
  3062  000946  19C0               	xorwf	_s1& (0+255),w,b
  3063  000948  0100               	movlb	0	; () banked
  3064  00094A  11C1               	iorwf	(_s1+1)& (0+255),w,b
  3065  00094C  A4D8               	btfss	status,2,c
  3066  00094E  D004               	goto	l6042
  3067  000950                     l6040:
  3068                           
  3069                           ; BSR set to: 0
  3070  000950  0E00               	movlw	0
  3071  000952  6E5C               	movwf	_S1mode+1,c
  3072  000954  0E03               	movlw	3
  3073  000956  D003               	goto	L5
  3074  000958                     l6042:
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;main.c: 430: else{S1mode = 5;}
  3078  000958  0E00               	movlw	0
  3079  00095A  6E5C               	movwf	_S1mode+1,c
  3080  00095C  0E05               	movlw	5
  3081  00095E                     L5:
  3082  00095E  6E5B               	movwf	_S1mode,c
  3083  000960                     l6044:
  3084                           
  3085                           ;main.c: 431: }
  3086                           ;main.c: 432: }
  3087                           ;main.c: 436: lcdInst(0b11000000);;
  3088  000960  0EC0               	movlw	192
  3089  000962  EC1C  F016         	call	_lcdInst
  3090                           
  3091                           ;main.c: 438: readADC(0);
  3092  000966  0E00               	movlw	0
  3093  000968  ECC6  F015         	call	_readADC
  3094                           
  3095                           ;main.c: 439: if(ADRES <= 0x130){
  3096  00096C  0E31               	movlw	49
  3097  00096E  5CC3               	subwf	4035,w,c	;volatile
  3098  000970  0E01               	movlw	1
  3099  000972  58C4               	subwfb	4036,w,c	;volatile
  3100  000974  B0D8               	btfsc	status,0,c
  3101  000976  D026               	goto	l6060
  3102                           
  3103                           ;main.c: 440: prevSodaLoad = seconds;
  3104  000978  C0BC  F09B         	movff	_seconds,main@prevSodaLoad
  3105  00097C  C0BD  F09C         	movff	_seconds+1,main@prevSodaLoad+1
  3106                           
  3107                           ;main.c: 441: sodaCnt = 1;
  3108  000980  0E00               	movlw	0
  3109  000982  0100               	movlb	0	; () banked
  3110  000984  6FB7               	movwf	(_sodaCnt+1)& (0+255),b
  3111  000986  0E01               	movlw	1
  3112  000988  6FB6               	movwf	_sodaCnt& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 442: if (!sodaSort){
  3116  00098A  0100               	movlb	0	; () banked
  3117  00098C  51A7               	movf	main@sodaSort& (0+255),w,b
  3118  00098E  0100               	movlb	0	; () banked
  3119  000990  11A8               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3120  000992  A4D8               	btfss	status,2,c
  3121  000994  D017               	goto	l6060
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 443: sodaSort = 1;
  3125  000996  0E00               	movlw	0
  3126  000998  0100               	movlb	0	; () banked
  3127  00099A  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  3128  00099C  0E01               	movlw	1
  3129  00099E  6FA7               	movwf	main@sodaSort& (0+255),b
  3130                           
  3131                           ;main.c: 444: sodaSteps = 0;
  3132  0009A0  0E00               	movlw	0
  3133  0009A2  6E54               	movwf	_sodaSteps+1,c
  3134  0009A4  0E00               	movlw	0
  3135  0009A6  6E53               	movwf	_sodaSteps,c
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 445: _delay((unsigned long)((150)*(32000000/4000.0)));
  3139  0009A8  0E07               	movlw	7
  3140  0009AA  0100               	movlb	0	; () banked
  3141  0009AC  6F92               	movwf	(??_main+1)& (0+255),b
  3142  0009AE  0E17               	movlw	23
  3143  0009B0  0100               	movlb	0	; () banked
  3144  0009B2  6F91               	movwf	??_main& (0+255),b
  3145  0009B4  0E6A               	movlw	106
  3146  0009B6                     u8047:
  3147  0009B6  2EE8               	decfsz	wreg,f,c
  3148  0009B8  D7FE               	bra	u8047
  3149  0009BA  2F91               	decfsz	??_main& (0+255),f,b
  3150  0009BC  D7FC               	bra	u8047
  3151  0009BE  2F92               	decfsz	(??_main+1)& (0+255),f,b
  3152  0009C0  D7FA               	bra	u8047
  3153  0009C2  F000               	nop	
  3154  0009C4                     l6060:
  3155                           
  3156                           ;main.c: 446: }
  3157                           ;main.c: 447: }
  3158                           ;main.c: 451: if (sodaSort){
  3159  0009C4  0100               	movlb	0	; () banked
  3160  0009C6  51A7               	movf	main@sodaSort& (0+255),w,b
  3161  0009C8  0100               	movlb	0	; () banked
  3162  0009CA  11A8               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3163  0009CC  B4D8               	btfsc	status,2,c
  3164  0009CE  D13A               	goto	l6162
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 452: if(sodaSteps < 48){
  3168  0009D0  BE54               	btfsc	_sodaSteps+1,7,c
  3169  0009D2  D006               	goto	l6064
  3170  0009D4  5054               	movf	_sodaSteps+1,w,c
  3171  0009D6  E108               	bnz	l6066
  3172  0009D8  0E30               	movlw	48
  3173  0009DA  5C53               	subwf	_sodaSteps,w,c
  3174  0009DC  B0D8               	btfsc	status,0,c
  3175  0009DE  D004               	goto	l6066
  3176  0009E0                     l6064:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;main.c: 454: S2mode = 4;
  3180  0009E0  0E00               	movlw	0
  3181  0009E2  6E5A               	movwf	_S2mode+1,c
  3182  0009E4  0E04               	movlw	4
  3183  0009E6  D04A               	goto	L8
  3184  0009E8                     l6066:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 456: else if (sodaSteps < (48+43)){
  3188  0009E8  BE54               	btfsc	_sodaSteps+1,7,c
  3189  0009EA  D006               	goto	l6068
  3190  0009EC  5054               	movf	_sodaSteps+1,w,c
  3191  0009EE  E108               	bnz	l6070
  3192  0009F0  0E5B               	movlw	91
  3193  0009F2  5C53               	subwf	_sodaSteps,w,c
  3194  0009F4  B0D8               	btfsc	status,0,c
  3195  0009F6  D004               	goto	l6070
  3196  0009F8                     l6068:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 457: S3mode = 1;
  3200  0009F8  0E00               	movlw	0
  3201  0009FA  6E58               	movwf	_S3mode+1,c
  3202  0009FC  0E01               	movlw	1
  3203  0009FE  D121               	goto	L11
  3204  000A00                     l6070:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 460: else if (sodaSteps < (48+43+10)){
  3208  000A00  BE54               	btfsc	_sodaSteps+1,7,c
  3209  000A02  D006               	goto	l6072
  3210  000A04  5054               	movf	_sodaSteps+1,w,c
  3211  000A06  E10C               	bnz	l6074
  3212  000A08  0E65               	movlw	101
  3213  000A0A  5C53               	subwf	_sodaSteps,w,c
  3214  000A0C  B0D8               	btfsc	status,0,c
  3215  000A0E  D008               	goto	l6074
  3216  000A10                     l6072:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 461: S3mode = 4;
  3220  000A10  0E00               	movlw	0
  3221  000A12  6E58               	movwf	_S3mode+1,c
  3222  000A14  0E04               	movlw	4
  3223  000A16  6E57               	movwf	_S3mode,c
  3224                           
  3225                           ;main.c: 462: S2mode = 1;
  3226  000A18  0E00               	movlw	0
  3227  000A1A  6E5A               	movwf	_S2mode+1,c
  3228  000A1C  0E01               	movlw	1
  3229  000A1E  D02E               	goto	L8
  3230  000A20                     l6074:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 464: else if (sodaSteps < (48+43+10+15)){
  3234  000A20  BE54               	btfsc	_sodaSteps+1,7,c
  3235  000A22  D006               	goto	l6076
  3236  000A24  5054               	movf	_sodaSteps+1,w,c
  3237  000A26  E11B               	bnz	l6084
  3238  000A28  0E74               	movlw	116
  3239  000A2A  5C53               	subwf	_sodaSteps,w,c
  3240  000A2C  B0D8               	btfsc	status,0,c
  3241  000A2E  D017               	goto	l6084
  3242  000A30                     l6076:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 465: S3mode = 4;
  3246  000A30  0E00               	movlw	0
  3247  000A32  6E58               	movwf	_S3mode+1,c
  3248  000A34  0E04               	movlw	4
  3249  000A36  6E57               	movwf	_S3mode,c
  3250                           
  3251                           ;main.c: 466: S2mode = 0;
  3252  000A38  0E00               	movlw	0
  3253  000A3A  6E5A               	movwf	_S2mode+1,c
  3254  000A3C  0E00               	movlw	0
  3255  000A3E  6E59               	movwf	_S2mode,c
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 467: readADC(3);
  3259  000A40  0E03               	movlw	3
  3260  000A42  ECC6  F015         	call	_readADC
  3261                           
  3262                           ;main.c: 468: if(ADRESH<=1){tabState = 1;}
  3263  000A46  0E02               	movlw	2
  3264  000A48  60C4               	cpfslt	4036,c	;volatile
  3265  000A4A  D004               	goto	l293
  3266  000A4C  0E00               	movlw	0
  3267  000A4E  6E52               	movwf	_tabState+1,c
  3268  000A50  0E01               	movlw	1
  3269  000A52  6E51               	movwf	_tabState,c
  3270  000A54                     l293:
  3271                           
  3272                           ;main.c: 470: s2 = 1;
  3273  000A54  0E00               	movlw	0
  3274  000A56  6E5E               	movwf	_s2+1,c
  3275  000A58  0E01               	movlw	1
  3276  000A5A  6E5D               	movwf	_s2,c
  3277                           
  3278                           ;main.c: 471: }
  3279  000A5C  D0F3               	goto	l6162
  3280  000A5E                     l6084:
  3281                           
  3282                           ;main.c: 479: else if (sodaSteps < (48+43+10+15+20)){
  3283  000A5E  BE54               	btfsc	_sodaSteps+1,7,c
  3284  000A60  D006               	goto	l6086
  3285  000A62  5054               	movf	_sodaSteps+1,w,c
  3286  000A64  E10D               	bnz	l6088
  3287  000A66  0E88               	movlw	136
  3288  000A68  5C53               	subwf	_sodaSteps,w,c
  3289  000A6A  B0D8               	btfsc	status,0,c
  3290  000A6C  D009               	goto	l6088
  3291  000A6E                     l6086:
  3292                           
  3293                           ;main.c: 480: S3mode = 4;
  3294  000A6E  0E00               	movlw	0
  3295  000A70  6E58               	movwf	_S3mode+1,c
  3296  000A72  0E04               	movlw	4
  3297  000A74  6E57               	movwf	_S3mode,c
  3298                           
  3299                           ;main.c: 481: S2mode = 2;
  3300  000A76  0E00               	movlw	0
  3301  000A78  6E5A               	movwf	_S2mode+1,c
  3302  000A7A  0E02               	movlw	2
  3303  000A7C                     L8:
  3304  000A7C  6E59               	movwf	_S2mode,c
  3305                           
  3306                           ;main.c: 482: }
  3307  000A7E  D0E2               	goto	l6162
  3308  000A80                     l6088:
  3309                           
  3310                           ;main.c: 483: else if (tabState == 1){
  3311  000A80  0451               	decf	_tabState,w,c
  3312  000A82  1052               	iorwf	_tabState+1,w,c
  3313  000A84  A4D8               	btfss	status,2,c
  3314  000A86  D044               	goto	l6112
  3315                           
  3316                           ;main.c: 484: if(sodaSteps < (48+43+10+15+20+30)){
  3317  000A88  BE54               	btfsc	_sodaSteps+1,7,c
  3318  000A8A  D006               	goto	l6092
  3319  000A8C  5054               	movf	_sodaSteps+1,w,c
  3320  000A8E  E108               	bnz	l6094
  3321  000A90  0EA6               	movlw	166
  3322  000A92  5C53               	subwf	_sodaSteps,w,c
  3323  000A94  B0D8               	btfsc	status,0,c
  3324  000A96  D004               	goto	l6094
  3325  000A98                     l6092:
  3326                           
  3327                           ;main.c: 485: S3mode = 1;
  3328  000A98  0E00               	movlw	0
  3329  000A9A  6E58               	movwf	_S3mode+1,c
  3330  000A9C  0E01               	movlw	1
  3331  000A9E  D047               	goto	L9
  3332  000AA0                     l6094:
  3333                           
  3334                           ;main.c: 489: else if(sodaSteps < (48+43+10+15+20+30+55)){
  3335  000AA0  BE54               	btfsc	_sodaSteps+1,7,c
  3336  000AA2  D006               	goto	l6096
  3337  000AA4  5054               	movf	_sodaSteps+1,w,c
  3338  000AA6  E110               	bnz	l6098
  3339  000AA8  0EDD               	movlw	221
  3340  000AAA  5C53               	subwf	_sodaSteps,w,c
  3341  000AAC  B0D8               	btfsc	status,0,c
  3342  000AAE  D00C               	goto	l6098
  3343  000AB0                     l6096:
  3344                           
  3345                           ;main.c: 490: S3mode = 2;
  3346  000AB0  0E00               	movlw	0
  3347  000AB2  6E58               	movwf	_S3mode+1,c
  3348  000AB4  0E02               	movlw	2
  3349  000AB6  6E57               	movwf	_S3mode,c
  3350                           
  3351                           ;main.c: 491: S2mode = 4;
  3352  000AB8  0E00               	movlw	0
  3353  000ABA  6E5A               	movwf	_S2mode+1,c
  3354  000ABC  0E04               	movlw	4
  3355  000ABE  6E59               	movwf	_S2mode,c
  3356                           
  3357                           ;main.c: 492: sodaAlign = 2;
  3358  000AC0  0E00               	movlw	0
  3359  000AC2  6E50               	movwf	_sodaAlign+1,c
  3360  000AC4  0E02               	movlw	2
  3361  000AC6  D051               	goto	L10
  3362  000AC8                     l6098:
  3363                           
  3364                           ;main.c: 495: else {
  3365                           ;main.c: 496: S2mode = 4;
  3366  000AC8  0E00               	movlw	0
  3367  000ACA  6E5A               	movwf	_S2mode+1,c
  3368  000ACC  0E04               	movlw	4
  3369  000ACE  6E59               	movwf	_S2mode,c
  3370                           
  3371                           ;main.c: 497: S3mode = 4;
  3372  000AD0  0E00               	movlw	0
  3373  000AD2  6E58               	movwf	_S3mode+1,c
  3374  000AD4  0E04               	movlw	4
  3375  000AD6  6E57               	movwf	_S3mode,c
  3376                           
  3377                           ;main.c: 498: updateS3(sodaAlign);
  3378  000AD8  C04F  F021         	movff	_sodaAlign,updateS3@mode
  3379  000ADC  C050  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3380  000AE0  EC92  F00E         	call	_updateS3	;wreg free
  3381                           
  3382                           ;main.c: 499: readADC(5);
  3383  000AE4  0E05               	movlw	5
  3384  000AE6  ECC6  F015         	call	_readADC
  3385                           
  3386                           ;main.c: 500: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3387  000AEA  0100               	movlb	0	; () banked
  3388  000AEC  51A9               	movf	main@prevSodaIR& (0+255),w,b
  3389  000AEE  5CC3               	subwf	4035,w,c	;volatile
  3390  000AF0  0100               	movlb	0	; () banked
  3391  000AF2  51AA               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3392  000AF4  58C4               	subwfb	4036,w,c	;volatile
  3393  000AF6  B0D8               	btfsc	status,0,c
  3394  000AF8  D061               	goto	l6134
  3395                           
  3396                           ; BSR set to: 0
  3397  000AFA  0EAB               	movlw	171
  3398  000AFC  5CC3               	subwf	4035,w,c	;volatile
  3399  000AFE  0E03               	movlw	3
  3400  000B00  58C4               	subwfb	4036,w,c	;volatile
  3401  000B02  A0D8               	btfss	status,0,c
  3402  000B04  D05B               	goto	l6134
  3403                           
  3404                           ; BSR set to: 0
  3405  000B06  0E00               	movlw	0
  3406  000B08  6E52               	movwf	_tabState+1,c
  3407  000B0A  0E65               	movlw	101
  3408  000B0C  6E51               	movwf	_tabState,c
  3409  000B0E  D056               	goto	l6134
  3410  000B10                     l6112:
  3411                           
  3412                           ;main.c: 505: else if(tabState == 0){
  3413  000B10  5051               	movf	_tabState,w,c
  3414  000B12  1052               	iorwf	_tabState+1,w,c
  3415  000B14  A4D8               	btfss	status,2,c
  3416  000B16  D057               	goto	l6136
  3417                           
  3418                           ;main.c: 506: if(sodaSteps < (48+43+10+15+20+(43+75))){
  3419  000B18  BE54               	btfsc	_sodaSteps+1,7,c
  3420  000B1A  D006               	goto	l6116
  3421  000B1C  5054               	movf	_sodaSteps+1,w,c
  3422  000B1E  E112               	bnz	l6118
  3423  000B20  0EFE               	movlw	254
  3424  000B22  5C53               	subwf	_sodaSteps,w,c
  3425  000B24  B0D8               	btfsc	status,0,c
  3426  000B26  D00E               	goto	l6118
  3427  000B28                     l6116:
  3428                           
  3429                           ;main.c: 507: S3mode = 2;
  3430  000B28  0E00               	movlw	0
  3431  000B2A  6E58               	movwf	_S3mode+1,c
  3432  000B2C  0E02               	movlw	2
  3433  000B2E                     L9:
  3434  000B2E  6E57               	movwf	_S3mode,c
  3435                           
  3436                           ;main.c: 508: S2mode = 4;
  3437  000B30  0E00               	movlw	0
  3438  000B32  6E5A               	movwf	_S2mode+1,c
  3439  000B34  0E04               	movlw	4
  3440  000B36  6E59               	movwf	_S2mode,c
  3441                           
  3442                           ;main.c: 509: sodaCnt = 0;
  3443  000B38  0E00               	movlw	0
  3444  000B3A  0100               	movlb	0	; () banked
  3445  000B3C  6FB7               	movwf	(_sodaCnt+1)& (0+255),b
  3446  000B3E  0E00               	movlw	0
  3447  000B40  6FB6               	movwf	_sodaCnt& (0+255),b
  3448                           
  3449                           ;main.c: 510: }
  3450  000B42  D080               	goto	l6162
  3451  000B44                     l6118:
  3452                           
  3453                           ;main.c: 511: else if(sodaSteps < (48+43+10+15+20+(43+75)+65)){
  3454  000B44  BE54               	btfsc	_sodaSteps+1,7,c
  3455  000B46  D006               	goto	l6120
  3456  000B48  0E3F               	movlw	63
  3457  000B4A  5C53               	subwf	_sodaSteps,w,c
  3458  000B4C  0E01               	movlw	1
  3459  000B4E  5854               	subwfb	_sodaSteps+1,w,c
  3460  000B50  B0D8               	btfsc	status,0,c
  3461  000B52  D011               	goto	l6122
  3462  000B54                     l6120:
  3463                           
  3464                           ;main.c: 512: S3mode = 1;
  3465  000B54  0E00               	movlw	0
  3466  000B56  6E58               	movwf	_S3mode+1,c
  3467  000B58  0E01               	movlw	1
  3468  000B5A  6E57               	movwf	_S3mode,c
  3469                           
  3470                           ;main.c: 513: S2mode = 4;
  3471  000B5C  0E00               	movlw	0
  3472  000B5E  6E5A               	movwf	_S2mode+1,c
  3473  000B60  0E04               	movlw	4
  3474  000B62  6E59               	movwf	_S2mode,c
  3475                           
  3476                           ;main.c: 514: sodaAlign = 1;
  3477  000B64  0E00               	movlw	0
  3478  000B66  6E50               	movwf	_sodaAlign+1,c
  3479  000B68  0E01               	movlw	1
  3480  000B6A                     L10:
  3481  000B6A  6E4F               	movwf	_sodaAlign,c
  3482                           
  3483                           ;main.c: 515: sodaI = 1;
  3484  000B6C  0E00               	movlw	0
  3485  000B6E  6E4A               	movwf	_sodaI+1,c
  3486  000B70  0E01               	movlw	1
  3487  000B72  6E49               	movwf	_sodaI,c
  3488                           
  3489                           ;main.c: 516: }
  3490  000B74  D067               	goto	l6162
  3491  000B76                     l6122:
  3492                           
  3493                           ;main.c: 517: else {
  3494                           ;main.c: 518: S3mode = 4;
  3495  000B76  0E00               	movlw	0
  3496  000B78  6E58               	movwf	_S3mode+1,c
  3497  000B7A  0E04               	movlw	4
  3498  000B7C  6E57               	movwf	_S3mode,c
  3499                           
  3500                           ;main.c: 519: S2mode = 4;
  3501  000B7E  0E00               	movlw	0
  3502  000B80  6E5A               	movwf	_S2mode+1,c
  3503  000B82  0E04               	movlw	4
  3504  000B84  6E59               	movwf	_S2mode,c
  3505                           
  3506                           ;main.c: 520: updateS3(sodaAlign);
  3507  000B86  C04F  F021         	movff	_sodaAlign,updateS3@mode
  3508  000B8A  C050  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3509  000B8E  EC92  F00E         	call	_updateS3	;wreg free
  3510                           
  3511                           ;main.c: 521: readADC(5);
  3512  000B92  0E05               	movlw	5
  3513  000B94  ECC6  F015         	call	_readADC
  3514                           
  3515                           ;main.c: 522: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  3516  000B98  0100               	movlb	0	; () banked
  3517  000B9A  51A9               	movf	main@prevSodaIR& (0+255),w,b
  3518  000B9C  5CC3               	subwf	4035,w,c	;volatile
  3519  000B9E  0100               	movlb	0	; () banked
  3520  000BA0  51AA               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3521  000BA2  58C4               	subwfb	4036,w,c	;volatile
  3522  000BA4  B0D8               	btfsc	status,0,c
  3523  000BA6  D00A               	goto	l6134
  3524                           
  3525                           ; BSR set to: 0
  3526  000BA8  0EAB               	movlw	171
  3527  000BAA  5CC3               	subwf	4035,w,c	;volatile
  3528  000BAC  0E03               	movlw	3
  3529  000BAE  58C4               	subwfb	4036,w,c	;volatile
  3530  000BB0  A0D8               	btfss	status,0,c
  3531  000BB2  D004               	goto	l6134
  3532                           
  3533                           ; BSR set to: 0
  3534  000BB4  0E00               	movlw	0
  3535  000BB6  6E52               	movwf	_tabState+1,c
  3536  000BB8  0E64               	movlw	100
  3537  000BBA  D7A8               	goto	L13
  3538  000BBC                     l6134:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;main.c: 523: prevSodaIR = ADRES;
  3542  000BBC  CFC3 F0A9          	movff	4035,main@prevSodaIR	;volatile
  3543  000BC0  CFC4 F0AA          	movff	4036,main@prevSodaIR+1	;volatile
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;main.c: 525: }
  3547                           ;main.c: 526: }
  3548                           
  3549                           ; BSR set to: 0
  3550  000BC4  D03F               	goto	l6162
  3551  000BC6                     l6136:
  3552                           
  3553                           ;main.c: 527: else{
  3554                           ;main.c: 528: if(tabState==101){sodaT++;}
  3555  000BC6  0E65               	movlw	101
  3556  000BC8  1851               	xorwf	_tabState,w,c
  3557  000BCA  1052               	iorwf	_tabState+1,w,c
  3558  000BCC  A4D8               	btfss	status,2,c
  3559  000BCE  D004               	goto	l6140
  3560  000BD0  0100               	movlb	0	; () banked
  3561  000BD2  4BA1               	infsnz	main@sodaT& (0+255),f,b
  3562  000BD4  2BA2               	incf	(main@sodaT+1)& (0+255),f,b
  3563  000BD6  D008               	goto	l6144
  3564  000BD8                     l6140:
  3565                           
  3566                           ;main.c: 529: else if(tabState==100){sodaNT++;}
  3567  000BD8  0E64               	movlw	100
  3568  000BDA  1851               	xorwf	_tabState,w,c
  3569  000BDC  1052               	iorwf	_tabState+1,w,c
  3570  000BDE  A4D8               	btfss	status,2,c
  3571  000BE0  D003               	goto	l6144
  3572  000BE2  0100               	movlb	0	; () banked
  3573  000BE4  4BA3               	infsnz	main@sodaNT& (0+255),f,b
  3574  000BE6  2BA4               	incf	(main@sodaNT+1)& (0+255),f,b
  3575  000BE8                     l6144:
  3576                           
  3577                           ;main.c: 530: sodaSteps = 0;
  3578  000BE8  0E00               	movlw	0
  3579  000BEA  6E54               	movwf	_sodaSteps+1,c
  3580  000BEC  0E00               	movlw	0
  3581  000BEE  6E53               	movwf	_sodaSteps,c
  3582                           
  3583                           ;main.c: 531: tabState = 0;
  3584  000BF0  0E00               	movlw	0
  3585  000BF2  6E52               	movwf	_tabState+1,c
  3586  000BF4  0E00               	movlw	0
  3587  000BF6  6E51               	movwf	_tabState,c
  3588                           
  3589                           ;main.c: 532: prevSodaIR = 0;
  3590  000BF8  0E00               	movlw	0
  3591  000BFA  0100               	movlb	0	; () banked
  3592  000BFC  6FAA               	movwf	(main@prevSodaIR+1)& (0+255),b
  3593  000BFE  0E00               	movlw	0
  3594  000C00  6FA9               	movwf	main@prevSodaIR& (0+255),b
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;main.c: 533: if (sodaCnt == 0) {sodaSort = 0;}
  3598  000C02  0100               	movlb	0	; () banked
  3599  000C04  51B6               	movf	_sodaCnt& (0+255),w,b
  3600  000C06  0100               	movlb	0	; () banked
  3601  000C08  11B7               	iorwf	(_sodaCnt+1)& (0+255),w,b
  3602  000C0A  A4D8               	btfss	status,2,c
  3603  000C0C  D005               	goto	l6154
  3604                           
  3605                           ; BSR set to: 0
  3606  000C0E  0E00               	movlw	0
  3607  000C10  0100               	movlb	0	; () banked
  3608  000C12  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  3609  000C14  0E00               	movlw	0
  3610  000C16  6FA7               	movwf	main@sodaSort& (0+255),b
  3611  000C18                     l6154:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;main.c: 535: if(s3 == 2 || s3 == 3){S3mode = 3;}
  3615  000C18  0E02               	movlw	2
  3616  000C1A  0100               	movlb	0	; () banked
  3617  000C1C  19BE               	xorwf	_s3& (0+255),w,b
  3618  000C1E  0100               	movlb	0	; () banked
  3619  000C20  11BF               	iorwf	(_s3+1)& (0+255),w,b
  3620  000C22  B4D8               	btfsc	status,2,c
  3621  000C24  D007               	goto	l6158
  3622                           
  3623                           ; BSR set to: 0
  3624  000C26  0E03               	movlw	3
  3625  000C28  0100               	movlb	0	; () banked
  3626  000C2A  19BE               	xorwf	_s3& (0+255),w,b
  3627  000C2C  0100               	movlb	0	; () banked
  3628  000C2E  11BF               	iorwf	(_s3+1)& (0+255),w,b
  3629  000C30  A4D8               	btfss	status,2,c
  3630  000C32  D004               	goto	l6160
  3631  000C34                     l6158:
  3632                           
  3633                           ; BSR set to: 0
  3634  000C34  0E00               	movlw	0
  3635  000C36  6E58               	movwf	_S3mode+1,c
  3636  000C38  0E03               	movlw	3
  3637  000C3A  D003               	goto	L11
  3638  000C3C                     l6160:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;main.c: 536: else{S3mode = 5;}
  3642  000C3C  0E00               	movlw	0
  3643  000C3E  6E58               	movwf	_S3mode+1,c
  3644  000C40  0E05               	movlw	5
  3645  000C42                     L11:
  3646  000C42  6E57               	movwf	_S3mode,c
  3647  000C44                     l6162:
  3648                           
  3649                           ;main.c: 537: }
  3650                           ;main.c: 538: }
  3651                           ;main.c: 541: if(seconds%7==1 && seconds <7){PWM2slow(750);}
  3652  000C44  C0BC  F021         	movff	_seconds,___awmod@dividend
  3653  000C48  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3654  000C4C  0E00               	movlw	0
  3655  000C4E  6E24               	movwf	___awmod@divisor+1,c
  3656  000C50  0E07               	movlw	7
  3657  000C52  6E23               	movwf	___awmod@divisor,c
  3658  000C54  EC9C  F013         	call	___awmod	;wreg free
  3659  000C58  0421               	decf	?___awmod,w,c
  3660  000C5A  1022               	iorwf	?___awmod+1,w,c
  3661  000C5C  A4D8               	btfss	status,2,c
  3662  000C5E  D012               	goto	l6168
  3663  000C60  0100               	movlb	0	; () banked
  3664  000C62  BFBD               	btfsc	(_seconds+1)& (0+255),7,b
  3665  000C64  D008               	goto	l6166
  3666  000C66  0100               	movlb	0	; () banked
  3667  000C68  51BD               	movf	(_seconds+1)& (0+255),w,b
  3668  000C6A  E10C               	bnz	l6168
  3669  000C6C  0E07               	movlw	7
  3670  000C6E  0100               	movlb	0	; () banked
  3671  000C70  5DBC               	subwf	_seconds& (0+255),w,b
  3672  000C72  B0D8               	btfsc	status,0,c
  3673  000C74  D007               	goto	l6168
  3674  000C76                     l6166:
  3675                           
  3676                           ; BSR set to: 0
  3677  000C76  0E02               	movlw	2
  3678  000C78  6E22               	movwf	PWM2slow@duty+1,c
  3679  000C7A  0EEE               	movlw	238
  3680  000C7C  6E21               	movwf	PWM2slow@duty,c
  3681  000C7E  ECBA  F014         	call	_PWM2slow	;wreg free
  3682  000C82  D048               	goto	l320
  3683  000C84                     l6168:
  3684                           
  3685                           ;main.c: 542: else if(seconds%7==2){PWM2slow(750);}
  3686  000C84  C0BC  F021         	movff	_seconds,___awmod@dividend
  3687  000C88  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3688  000C8C  0E00               	movlw	0
  3689  000C8E  6E24               	movwf	___awmod@divisor+1,c
  3690  000C90  0E07               	movlw	7
  3691  000C92  6E23               	movwf	___awmod@divisor,c
  3692  000C94  EC9C  F013         	call	___awmod	;wreg free
  3693  000C98  0E02               	movlw	2
  3694  000C9A  1821               	xorwf	?___awmod,w,c
  3695  000C9C  1022               	iorwf	?___awmod+1,w,c
  3696  000C9E  A4D8               	btfss	status,2,c
  3697  000CA0  D007               	goto	l6172
  3698  000CA2  0E02               	movlw	2
  3699  000CA4  6E22               	movwf	PWM2slow@duty+1,c
  3700  000CA6  0EEE               	movlw	238
  3701  000CA8  6E21               	movwf	PWM2slow@duty,c
  3702  000CAA  ECBA  F014         	call	_PWM2slow	;wreg free
  3703  000CAE  D032               	goto	l320
  3704  000CB0                     l6172:
  3705                           
  3706                           ;main.c: 543: else if(seconds%7==5){PWM2(900,2);}
  3707  000CB0  C0BC  F021         	movff	_seconds,___awmod@dividend
  3708  000CB4  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3709  000CB8  0E00               	movlw	0
  3710  000CBA  6E24               	movwf	___awmod@divisor+1,c
  3711  000CBC  0E07               	movlw	7
  3712  000CBE  6E23               	movwf	___awmod@divisor,c
  3713  000CC0  EC9C  F013         	call	___awmod	;wreg free
  3714  000CC4  0E05               	movlw	5
  3715  000CC6  1821               	xorwf	?___awmod,w,c
  3716  000CC8  1022               	iorwf	?___awmod+1,w,c
  3717  000CCA  A4D8               	btfss	status,2,c
  3718  000CCC  D00B               	goto	l6176
  3719  000CCE  0E03               	movlw	3
  3720  000CD0  6E22               	movwf	PWM2@duty+1,c
  3721  000CD2  0E84               	movlw	132
  3722  000CD4  6E21               	movwf	PWM2@duty,c
  3723  000CD6  0E00               	movlw	0
  3724  000CD8  6E24               	movwf	PWM2@dir+1,c
  3725  000CDA  0E02               	movlw	2
  3726  000CDC  6E23               	movwf	PWM2@dir,c
  3727  000CDE  EC60  F013         	call	_PWM2	;wreg free
  3728  000CE2  D018               	goto	l320
  3729  000CE4                     l6176:
  3730                           
  3731                           ;main.c: 544: else if(seconds%7 == 0){PWM2(900, 1);}
  3732  000CE4  C0BC  F021         	movff	_seconds,___awmod@dividend
  3733  000CE8  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3734  000CEC  0E00               	movlw	0
  3735  000CEE  6E24               	movwf	___awmod@divisor+1,c
  3736  000CF0  0E07               	movlw	7
  3737  000CF2  6E23               	movwf	___awmod@divisor,c
  3738  000CF4  EC9C  F013         	call	___awmod	;wreg free
  3739  000CF8  5021               	movf	?___awmod,w,c
  3740  000CFA  1022               	iorwf	?___awmod+1,w,c
  3741  000CFC  A4D8               	btfss	status,2,c
  3742  000CFE  D00A               	goto	l320
  3743  000D00  0E03               	movlw	3
  3744  000D02  6E22               	movwf	PWM2@duty+1,c
  3745  000D04  0E84               	movlw	132
  3746  000D06  6E21               	movwf	PWM2@duty,c
  3747  000D08  0E00               	movlw	0
  3748  000D0A  6E24               	movwf	PWM2@dir+1,c
  3749  000D0C  0E01               	movlw	1
  3750  000D0E  6E23               	movwf	PWM2@dir,c
  3751  000D10  EC60  F013         	call	_PWM2	;wreg free
  3752  000D14                     l320:
  3753                           
  3754                           ;main.c: 546: keyinterrupt();
  3755  000D14  ECE7  F015         	call	_keyinterrupt	;wreg free
  3756                           
  3757                           ;main.c: 547: }while(keypress==(0) &&
  3758                           ;main.c: 548: ((seconds -prevSoupLoad) < 13 || (seconds-prevSodaLoad) < 13)
  3759                           ;main.c: 549: && seconds < 180);
  3760  000D18  0100               	movlb	0	; () banked
  3761  000D1A  51C2               	movf	_keypress& (0+255),w,b	;volatile
  3762  000D1C  A4D8               	btfss	status,2,c
  3763  000D1E  D043               	goto	l6188
  3764                           
  3765                           ; BSR set to: 0
  3766  000D20  C099  F091         	movff	main@prevSoupLoad,??_main
  3767  000D24  C09A  F092         	movff	main@prevSoupLoad+1,??_main+1
  3768  000D28  0100               	movlb	0	; () banked
  3769  000D2A  1F91               	comf	??_main& (0+255),f,b
  3770  000D2C  1F92               	comf	(??_main+1)& (0+255),f,b
  3771  000D2E  4B91               	infsnz	??_main& (0+255),f,b
  3772  000D30  2B92               	incf	(??_main+1)& (0+255),f,b
  3773  000D32  0100               	movlb	0	; () banked
  3774  000D34  51BC               	movf	_seconds& (0+255),w,b
  3775  000D36  0100               	movlb	0	; () banked
  3776  000D38  2791               	addwf	??_main& (0+255),f,b
  3777  000D3A  0100               	movlb	0	; () banked
  3778  000D3C  51BD               	movf	(_seconds+1)& (0+255),w,b
  3779  000D3E  0100               	movlb	0	; () banked
  3780  000D40  2392               	addwfc	(??_main+1)& (0+255),f,b
  3781  000D42  0100               	movlb	0	; () banked
  3782  000D44  BF92               	btfsc	(??_main+1)& (0+255),7,b
  3783  000D46  D024               	goto	l6186
  3784  000D48  0100               	movlb	0	; () banked
  3785  000D4A  5192               	movf	(??_main+1)& (0+255),w,b
  3786  000D4C  E105               	bnz	u7840
  3787  000D4E  0E0D               	movlw	13
  3788  000D50  0100               	movlb	0	; () banked
  3789  000D52  5D91               	subwf	??_main& (0+255),w,b
  3790  000D54  A0D8               	btfss	status,0,c
  3791  000D56  D01C               	goto	l6186
  3792  000D58                     u7840:
  3793                           
  3794                           ; BSR set to: 0
  3795  000D58  C09B  F091         	movff	main@prevSodaLoad,??_main
  3796  000D5C  C09C  F092         	movff	main@prevSodaLoad+1,??_main+1
  3797  000D60  0100               	movlb	0	; () banked
  3798  000D62  1F91               	comf	??_main& (0+255),f,b
  3799  000D64  1F92               	comf	(??_main+1)& (0+255),f,b
  3800  000D66  4B91               	infsnz	??_main& (0+255),f,b
  3801  000D68  2B92               	incf	(??_main+1)& (0+255),f,b
  3802  000D6A  0100               	movlb	0	; () banked
  3803  000D6C  51BC               	movf	_seconds& (0+255),w,b
  3804  000D6E  0100               	movlb	0	; () banked
  3805  000D70  2791               	addwf	??_main& (0+255),f,b
  3806  000D72  0100               	movlb	0	; () banked
  3807  000D74  51BD               	movf	(_seconds+1)& (0+255),w,b
  3808  000D76  0100               	movlb	0	; () banked
  3809  000D78  2392               	addwfc	(??_main+1)& (0+255),f,b
  3810  000D7A  0100               	movlb	0	; () banked
  3811  000D7C  BF92               	btfsc	(??_main+1)& (0+255),7,b
  3812  000D7E  D008               	goto	l6186
  3813  000D80  0100               	movlb	0	; () banked
  3814  000D82  5192               	movf	(??_main+1)& (0+255),w,b
  3815  000D84  E110               	bnz	l6188
  3816  000D86  0E0D               	movlw	13
  3817  000D88  0100               	movlb	0	; () banked
  3818  000D8A  5D91               	subwf	??_main& (0+255),w,b
  3819  000D8C  B0D8               	btfsc	status,0,c
  3820  000D8E  D00B               	goto	l6188
  3821  000D90                     l6186:
  3822                           
  3823                           ; BSR set to: 0
  3824  000D90  0100               	movlb	0	; () banked
  3825  000D92  BFBD               	btfsc	(_seconds+1)& (0+255),7,b
  3826  000D94  D4C2               	goto	l5946
  3827  000D96  0100               	movlb	0	; () banked
  3828  000D98  51BD               	movf	(_seconds+1)& (0+255),w,b
  3829  000D9A  E105               	bnz	l6188
  3830  000D9C  0EB4               	movlw	180
  3831  000D9E  0100               	movlb	0	; () banked
  3832  000DA0  5DBC               	subwf	_seconds& (0+255),w,b
  3833  000DA2  A0D8               	btfss	status,0,c
  3834  000DA4  D4BA               	goto	l5946
  3835  000DA6                     l6188:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 551: standby = 1;
  3839  000DA6  0E00               	movlw	0
  3840  000DA8  0100               	movlb	0	; () banked
  3841  000DAA  6FAE               	movwf	(main@standby+1)& (0+255),b
  3842  000DAC  0E01               	movlw	1
  3843  000DAE  6FAD               	movwf	main@standby& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;main.c: 552: PWM2off();
  3847  000DB0  EC27  F016         	call	_PWM2off	;wreg free
  3848                           
  3849                           ;main.c: 553: PWM1off();
  3850  000DB4  EC2C  F016         	call	_PWM1off	;wreg free
  3851                           
  3852                           ;main.c: 554: S1mode = 0;
  3853  000DB8  0E00               	movlw	0
  3854  000DBA  6E5C               	movwf	_S1mode+1,c
  3855  000DBC  0E00               	movlw	0
  3856  000DBE  6E5B               	movwf	_S1mode,c
  3857                           
  3858                           ;main.c: 555: S2mode = 0;
  3859  000DC0  0E00               	movlw	0
  3860  000DC2  6E5A               	movwf	_S2mode+1,c
  3861  000DC4  0E00               	movlw	0
  3862  000DC6  6E59               	movwf	_S2mode,c
  3863                           
  3864                           ;main.c: 556: S3mode = 0;
  3865  000DC8  0E00               	movlw	0
  3866  000DCA  6E58               	movwf	_S3mode+1,c
  3867  000DCC  0E00               	movlw	0
  3868  000DCE  6E57               	movwf	_S3mode,c
  3869                           
  3870                           ;main.c: 559: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  3871  000DD0  C0BC  F025         	movff	_seconds,addRun@dur
  3872  000DD4  C0BD  F026         	movff	_seconds+1,addRun@dur+1
  3873  000DD8  C0B5  F027         	movff	_time+6,addRun@year
  3874  000DDC  6A28               	clrf	addRun@year+1,c
  3875  000DDE  C0B4  F029         	movff	_time+5,addRun@month
  3876  000DE2  6A2A               	clrf	addRun@month+1,c
  3877  000DE4  C0B3  F02B         	movff	_time+4,addRun@date
  3878  000DE8  6A2C               	clrf	addRun@date+1,c
  3879  000DEA  C0B1  F02D         	movff	_time+2,addRun@hours
  3880  000DEE  6A2E               	clrf	addRun@hours+1,c
  3881  000DF0  C0B0  F02F         	movff	_time+1,addRun@mins
  3882  000DF4  6A30               	clrf	addRun@mins+1,c
  3883  000DF6  C0AF  F031         	movff	_time,addRun@secs
  3884  000DFA  6A32               	clrf	addRun@secs+1,c
  3885  000DFC  C0A1  F033         	movff	main@sodaT,addRun@sodaT
  3886  000E00  C0A2  F034         	movff	main@sodaT+1,addRun@sodaT+1
  3887  000E04  C0A3  F035         	movff	main@sodaNT,addRun@sodaNT
  3888  000E08  C0A4  F036         	movff	main@sodaNT+1,addRun@sodaNT+1
  3889  000E0C  C09D  F037         	movff	main@soupL,addRun@soupL
  3890  000E10  C09E  F038         	movff	main@soupL+1,addRun@soupL+1
  3891  000E14  C09F  F039         	movff	main@soupNL,addRun@soupNL
  3892  000E18  C0A0  F03A         	movff	main@soupNL+1,addRun@soupNL+1
  3893  000E1C  EC4A  F011         	call	_addRun	;wreg free
  3894                           
  3895                           ;main.c: 561: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3896  000E20  0E01               	movlw	1
  3897  000E22  EC1C  F016         	call	_lcdInst
  3898  000E26  0E34               	movlw	52
  3899  000E28  0100               	movlb	0	; () banked
  3900  000E2A  6F91               	movwf	??_main& (0+255),b
  3901  000E2C  0EF1               	movlw	241
  3902  000E2E                     u8057:
  3903  000E2E  2EE8               	decfsz	wreg,f,c
  3904  000E30  D7FE               	bra	u8057
  3905  000E32  2F91               	decfsz	??_main& (0+255),f,b
  3906  000E34  D7FC               	bra	u8057
  3907  000E36  D000               	nop2	
  3908                           
  3909                           ;main.c: 562: printf("Sort done! A:No");
  3910  000E38  0E46               	movlw	low STR_22
  3911  000E3A  6E2D               	movwf	printf@f,c
  3912  000E3C  0EFF               	movlw	high STR_22
  3913  000E3E  6E2E               	movwf	printf@f+1,c
  3914  000E40  EC3B  F007         	call	_printf	;wreg free
  3915                           
  3916                           ;main.c: 563: lcdInst(0b11000000);;
  3917  000E44  0EC0               	movlw	192
  3918  000E46  EC1C  F016         	call	_lcdInst
  3919                           
  3920                           ;main.c: 564: printf("View Logs? B:Yes");
  3921  000E4A  0ED5               	movlw	low STR_23
  3922  000E4C  6E2D               	movwf	printf@f,c
  3923  000E4E  0EFE               	movlw	high STR_23
  3924  000E50  6E2E               	movwf	printf@f+1,c
  3925  000E52  EC3B  F007         	call	_printf	;wreg free
  3926                           
  3927                           ;main.c: 565: keycheck();
  3928  000E56  ECF2  F015         	call	_keycheck	;wreg free
  3929                           
  3930                           ;main.c: 566: if(keypress == 7){
  3931  000E5A  0E07               	movlw	7
  3932  000E5C  0100               	movlb	0	; () banked
  3933  000E5E  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  3934  000E60  A4D8               	btfss	status,2,c
  3935  000E62  EF33  F000         	goto	l5646
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;main.c: 567: displayLog(1);
  3939  000E66  0E00               	movlw	0
  3940  000E68  6E3A               	movwf	displayLog@run+1,c
  3941  000E6A  0E01               	movlw	1
  3942  000E6C  6E39               	movwf	displayLog@run,c
  3943  000E6E  ECFF  F008         	call	_displayLog	;wreg free
  3944  000E72  EF33  F000         	goto	l5646
  3945  000E76                     __end_of_main:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           status	equ	0xFD8
  3951                           
  3952 ;; *************** function _updateTime *****************
  3953 ;; Defined at:
  3954 ;;		line 89 in file "I2C.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  j               1   35[COMRAM] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;Total ram usage:        1 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    4
  3975 ;; This function calls:
  3976 ;;		_I2C_Master_Read
  3977 ;;		_I2C_Master_Start
  3978 ;;		_I2C_Master_Stop
  3979 ;;		_I2C_Master_Write
  3980 ;; This function is called by:
  3981 ;;		_main
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text1
  3986  0027A8                     __ptext1:
  3987                           	opt stack 0
  3988  0027A8                     _updateTime:
  3989                           	opt stack 26
  3990                           
  3991                           ;I2C.c: 91: I2C_Master_Start();
  3992                           
  3993                           ;incstack = 0
  3994  0027A8  EC35  F016         	call	_I2C_Master_Start	;wreg free
  3995                           
  3996                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  3997  0027AC  0E00               	movlw	0
  3998  0027AE  6E23               	movwf	I2C_Master_Write@d+1,c
  3999  0027B0  0ED0               	movlw	208
  4000  0027B2  6E22               	movwf	I2C_Master_Write@d,c
  4001  0027B4  EC22  F016         	call	_I2C_Master_Write	;wreg free
  4002                           
  4003                           ;I2C.c: 93: I2C_Master_Write(0x00);
  4004  0027B8  0E00               	movlw	0
  4005  0027BA  6E23               	movwf	I2C_Master_Write@d+1,c
  4006  0027BC  0E00               	movlw	0
  4007  0027BE  6E22               	movwf	I2C_Master_Write@d,c
  4008  0027C0  EC22  F016         	call	_I2C_Master_Write	;wreg free
  4009                           
  4010                           ;I2C.c: 94: I2C_Master_Stop();
  4011  0027C4  EC31  F016         	call	_I2C_Master_Stop	;wreg free
  4012                           
  4013                           ;I2C.c: 97: I2C_Master_Start();
  4014  0027C8  EC35  F016         	call	_I2C_Master_Start	;wreg free
  4015                           
  4016                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  4017  0027CC  0E00               	movlw	0
  4018  0027CE  6E23               	movwf	I2C_Master_Write@d+1,c
  4019  0027D0  0ED1               	movlw	209
  4020  0027D2  6E22               	movwf	I2C_Master_Write@d,c
  4021  0027D4  EC22  F016         	call	_I2C_Master_Write	;wreg free
  4022                           
  4023                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  4024  0027D8  0E00               	movlw	0
  4025  0027DA  6E24               	movwf	updateTime@j,c
  4026  0027DC                     l4004:
  4027  0027DC  0E05               	movlw	5
  4028  0027DE  6424               	cpfsgt	updateTime@j,c
  4029  0027E0  D001               	goto	l4008
  4030  0027E2  D00E               	goto	l4014
  4031  0027E4                     l4008:
  4032                           
  4033                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  4034  0027E4  5024               	movf	updateTime@j,w,c
  4035  0027E6  0D01               	mullw	1
  4036  0027E8  0EAF               	movlw	low _time
  4037  0027EA  24F3               	addwf	prodl,w,c
  4038  0027EC  6ED9               	movwf	fsr2l,c
  4039  0027EE  0E00               	movlw	high _time
  4040  0027F0  20F4               	addwfc	prodh,w,c
  4041  0027F2  6EDA               	movwf	fsr2h,c
  4042  0027F4  0E01               	movlw	1
  4043  0027F6  EC8D  F015         	call	_I2C_Master_Read
  4044  0027FA  6EDF               	movwf	indf2,c
  4045  0027FC  2A24               	incf	updateTime@j,f,c
  4046  0027FE  D7EE               	goto	l4004
  4047  002800                     l4014:
  4048                           
  4049                           ;I2C.c: 101: }
  4050                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  4051  002800  0E00               	movlw	0
  4052  002802  EC8D  F015         	call	_I2C_Master_Read
  4053  002806  0100               	movlb	0	; () banked
  4054  002808  6FB5               	movwf	(_time+6)& (0+255),b
  4055                           
  4056                           ;I2C.c: 103: I2C_Master_Stop();
  4057  00280A  EC31  F016         	call	_I2C_Master_Stop	;wreg free
  4058  00280E  0012               	return		;funcret
  4059  002810                     __end_of_updateTime:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           prodh	equ	0xFF4
  4063                           prodl	equ	0xFF3
  4064                           postinc0	equ	0xFEE
  4065                           wreg	equ	0xFE8
  4066                           indf2	equ	0xFDF
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _I2C_Master_Write *****************
  4072 ;; Defined at:
  4073 ;;		line 54 in file "I2C.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  d               2   33[COMRAM] unsigned int 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    3
  4094 ;; This function calls:
  4095 ;;		_I2C_Master_Wait
  4096 ;; This function is called by:
  4097 ;;		_updateTime
  4098 ;;		_set_time
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text2
  4103  002C44                     __ptext2:
  4104                           	opt stack 0
  4105  002C44                     _I2C_Master_Write:
  4106                           	opt stack 26
  4107                           
  4108                           ;I2C.c: 56: I2C_Master_Wait();
  4109                           
  4110                           ;incstack = 0
  4111  002C44  ECFD  F015         	call	_I2C_Master_Wait	;wreg free
  4112                           
  4113                           ;I2C.c: 57: SSPBUF = d;
  4114  002C48  C022  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4115  002C4C  0012               	return		;funcret
  4116  002C4E                     __end_of_I2C_Master_Write:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           prodh	equ	0xFF4
  4120                           prodl	equ	0xFF3
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           indf2	equ	0xFDF
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _I2C_Master_Stop *****************
  4129 ;; Defined at:
  4130 ;;		line 48 in file "I2C.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    3
  4151 ;; This function calls:
  4152 ;;		_I2C_Master_Wait
  4153 ;; This function is called by:
  4154 ;;		_updateTime
  4155 ;;		_set_time
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text3
  4160  002C62                     __ptext3:
  4161                           	opt stack 0
  4162  002C62                     _I2C_Master_Stop:
  4163                           	opt stack 26
  4164                           
  4165                           ;I2C.c: 50: I2C_Master_Wait();
  4166                           
  4167                           ;incstack = 0
  4168  002C62  ECFD  F015         	call	_I2C_Master_Wait	;wreg free
  4169                           
  4170                           ;I2C.c: 51: PEN = 1;
  4171  002C66  84C5               	bsf	4037,2,c	;volatile
  4172  002C68  0012               	return		;funcret
  4173  002C6A                     __end_of_I2C_Master_Stop:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf2	equ	0xFDF
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _I2C_Master_Start *****************
  4186 ;; Defined at:
  4187 ;;		line 36 in file "I2C.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    3
  4208 ;; This function calls:
  4209 ;;		_I2C_Master_Wait
  4210 ;; This function is called by:
  4211 ;;		_updateTime
  4212 ;;		_set_time
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text4
  4217  002C6A                     __ptext4:
  4218                           	opt stack 0
  4219  002C6A                     _I2C_Master_Start:
  4220                           	opt stack 26
  4221                           
  4222                           ;I2C.c: 38: I2C_Master_Wait();
  4223                           
  4224                           ;incstack = 0
  4225  002C6A  ECFD  F015         	call	_I2C_Master_Wait	;wreg free
  4226                           
  4227                           ;I2C.c: 39: SEN = 1;
  4228  002C6E  80C5               	bsf	4037,0,c	;volatile
  4229  002C70  0012               	return		;funcret
  4230  002C72                     __end_of_I2C_Master_Start:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           indf2	equ	0xFDF
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _I2C_Master_Read *****************
  4243 ;; Defined at:
  4244 ;;		line 60 in file "I2C.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  a               1    wreg     unsigned char 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  a               1   33[COMRAM] unsigned char 
  4249 ;;  temp            1   34[COMRAM] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      unsigned char 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        2 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    3
  4266 ;; This function calls:
  4267 ;;		_I2C_Master_Wait
  4268 ;; This function is called by:
  4269 ;;		_updateTime
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text5
  4274  002B1A                     __ptext5:
  4275                           	opt stack 0
  4276  002B1A                     _I2C_Master_Read:
  4277                           	opt stack 26
  4278                           
  4279                           ;incstack = 0
  4280                           ;I2C_Master_Read@a stored from wreg
  4281  002B1A  6E22               	movwf	I2C_Master_Read@a,c
  4282                           
  4283                           ;I2C.c: 62: unsigned char temp;
  4284                           ;I2C.c: 63: I2C_Master_Wait();
  4285  002B1C  ECFD  F015         	call	_I2C_Master_Wait	;wreg free
  4286                           
  4287                           ;I2C.c: 64: RCEN = 1;
  4288  002B20  86C5               	bsf	4037,3,c	;volatile
  4289                           
  4290                           ;I2C.c: 65: I2C_Master_Wait();
  4291  002B22  ECFD  F015         	call	_I2C_Master_Wait	;wreg free
  4292                           
  4293                           ;I2C.c: 66: temp = SSPBUF;
  4294  002B26  CFC9 F023          	movff	4041,I2C_Master_Read@temp	;volatile
  4295                           
  4296                           ;I2C.c: 67: I2C_Master_Wait();
  4297  002B2A  ECFD  F015         	call	_I2C_Master_Wait	;wreg free
  4298                           
  4299                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4300  002B2E  5022               	movf	I2C_Master_Read@a,w,c
  4301  002B30  A4D8               	btfss	status,2,c
  4302  002B32  D002               	goto	u4450
  4303  002B34  8AC5               	bsf	4037,5,c	;volatile
  4304  002B36  D001               	goto	l3872
  4305  002B38                     u4450:
  4306  002B38  9AC5               	bcf	4037,5,c	;volatile
  4307  002B3A                     l3872:
  4308                           
  4309                           ;I2C.c: 69: ACKEN = 1;
  4310  002B3A  88C5               	bsf	4037,4,c	;volatile
  4311                           
  4312                           ;I2C.c: 70: return temp;
  4313  002B3C  5023               	movf	I2C_Master_Read@temp,w,c
  4314  002B3E  0012               	return	
  4315  002B40                     __end_of_I2C_Master_Read:
  4316                           	opt stack 0
  4317                           tblptru	equ	0xFF8
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           indf2	equ	0xFDF
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _I2C_Master_Wait *****************
  4328 ;; Defined at:
  4329 ;;		line 31 in file "I2C.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;Total ram usage:        1 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		Nothing
  4352 ;; This function is called by:
  4353 ;;		_I2C_Master_Start
  4354 ;;		_I2C_Master_Stop
  4355 ;;		_I2C_Master_Write
  4356 ;;		_I2C_Master_Read
  4357 ;;		_I2C_Master_RepeatedStart
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text6
  4362  002BFA                     __ptext6:
  4363                           	opt stack 0
  4364  002BFA                     _I2C_Master_Wait:
  4365                           	opt stack 26
  4366  002BFA                     l394:
  4367  002BFA  B4C7               	btfsc	4039,2,c	;volatile
  4368  002BFC  D7FE               	goto	l394
  4369  002BFE  CFC5 F021          	movff	4037,??_I2C_Master_Wait	;volatile
  4370  002C02  0E1F               	movlw	31
  4371  002C04  1621               	andwf	??_I2C_Master_Wait,f,c
  4372  002C06  B4D8               	btfsc	status,2,c
  4373  002C08  0012               	return	
  4374  002C0A  D7F7               	goto	l394
  4375  002C0C                     __end_of_I2C_Master_Wait:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           postinc0	equ	0xFEE
  4381                           wreg	equ	0xFE8
  4382                           indf2	equ	0xFDF
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _keyinterrupt *****************
  4388 ;; Defined at:
  4389 ;;		line 19 in file "interface.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;		None
  4394 ;; Return value:  Size  Location     Type
  4395 ;;                  1    wreg      void 
  4396 ;; Registers used:
  4397 ;;		wreg, status,2, status,0
  4398 ;; Tracked objects:
  4399 ;;		On entry : 0/0
  4400 ;;		On exit  : 0/0
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;Total ram usage:        0 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    2
  4410 ;; This function calls:
  4411 ;;		Nothing
  4412 ;; This function is called by:
  4413 ;;		_main
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text7
  4418  002BCE                     __ptext7:
  4419                           	opt stack 0
  4420  002BCE                     _keyinterrupt:
  4421                           	opt stack 28
  4422                           
  4423                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  4424                           
  4425                           ;incstack = 0
  4426  002BCE  A281               	btfss	3969,1,c	;volatile
  4427  002BD0  D007               	goto	l695
  4428                           
  4429                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  4430  002BD2  3881               	swapf	3969,w,c	;volatile
  4431  002BD4  0B0F               	andlw	15
  4432  002BD6  0B0F               	andlw	15
  4433  002BD8  0100               	movlb	0	; () banked
  4434  002BDA  6FC2               	movwf	_keypress& (0+255),b	;volatile
  4435  002BDC                     l696:
  4436  002BDC  B281               	btfsc	3969,1,c	;volatile
  4437  002BDE  D7FE               	goto	l696
  4438  002BE0                     l695:
  4439                           
  4440                           ;interface.c: 23: }
  4441                           ;interface.c: 24: __nop();
  4442  002BE0  F000               	nop	
  4443  002BE2  0012               	return		;funcret
  4444  002BE4                     __end_of_keyinterrupt:
  4445                           	opt stack 0
  4446                           tblptru	equ	0xFF8
  4447                           prodh	equ	0xFF4
  4448                           prodl	equ	0xFF3
  4449                           postinc0	equ	0xFEE
  4450                           wreg	equ	0xFE8
  4451                           indf2	equ	0xFDF
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _initialize *****************
  4457 ;; Defined at:
  4458 ;;		line 72 in file "main.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, status,2, status,0, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    5
  4479 ;; This function calls:
  4480 ;;		_I2C_Master_Init
  4481 ;;		_initLCD
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text8
  4488  002648                     __ptext8:
  4489                           	opt stack 0
  4490  002648                     _initialize:
  4491                           	opt stack 25
  4492                           
  4493                           ;main.c: 74: OSCCON = 0xF0;
  4494                           
  4495                           ;incstack = 0
  4496  002648  0EF0               	movlw	240
  4497  00264A  6ED3               	movwf	4051,c	;volatile
  4498                           
  4499                           ;main.c: 75: OSCTUNEbits.PLLEN = 1;
  4500  00264C  8C9B               	bsf	3995,6,c	;volatile
  4501                           
  4502                           ;main.c: 77: TRISA = 0b00101111;
  4503  00264E  0E2F               	movlw	47
  4504  002650  6E92               	movwf	3986,c	;volatile
  4505                           
  4506                           ;main.c: 78: TRISB = 0b11110010;
  4507  002652  0EF2               	movlw	242
  4508  002654  6E93               	movwf	3987,c	;volatile
  4509                           
  4510                           ;main.c: 79: TRISC = 0b00000000;
  4511  002656  0E00               	movlw	0
  4512  002658  6E94               	movwf	3988,c	;volatile
  4513                           
  4514                           ;main.c: 81: TRISD = 0x00;
  4515  00265A  0E00               	movlw	0
  4516  00265C  6E95               	movwf	3989,c	;volatile
  4517                           
  4518                           ;main.c: 82: TRISE = 0b00000001;
  4519  00265E  0E01               	movlw	1
  4520  002660  6E96               	movwf	3990,c	;volatile
  4521                           
  4522                           ;main.c: 84: PR2 = 0xff;
  4523  002662  68CB               	setf	4043,c	;volatile
  4524                           
  4525                           ;main.c: 85: CCP1CON = 0b00001100;
  4526  002664  0E0C               	movlw	12
  4527  002666  6EBD               	movwf	4029,c	;volatile
  4528                           
  4529                           ;main.c: 86: CCPR1L = 0x00;
  4530  002668  0E00               	movlw	0
  4531  00266A  6EBE               	movwf	4030,c	;volatile
  4532                           
  4533                           ;main.c: 87: CCP2CON = 0b00001100;
  4534  00266C  0E0C               	movlw	12
  4535  00266E  6EBA               	movwf	4026,c	;volatile
  4536                           
  4537                           ;main.c: 88: CCPR2L = 0x00;
  4538  002670  0E00               	movlw	0
  4539  002672  6EBB               	movwf	4027,c	;volatile
  4540                           
  4541                           ;main.c: 89: T2CON = 0b00000101;
  4542  002674  0E05               	movlw	5
  4543  002676  6ECA               	movwf	4042,c	;volatile
  4544                           
  4545                           ;main.c: 91: LATA = 0x00;
  4546  002678  0E00               	movlw	0
  4547  00267A  6E89               	movwf	3977,c	;volatile
  4548                           
  4549                           ;main.c: 92: LATB = 0x00;
  4550  00267C  0E00               	movlw	0
  4551  00267E  6E8A               	movwf	3978,c	;volatile
  4552                           
  4553                           ;main.c: 93: LATC = 0x00;
  4554  002680  0E00               	movlw	0
  4555  002682  6E8B               	movwf	3979,c	;volatile
  4556                           
  4557                           ;main.c: 94: LATD = 0x00;
  4558  002684  0E00               	movlw	0
  4559  002686  6E8C               	movwf	3980,c	;volatile
  4560                           
  4561                           ;main.c: 95: LATE = 0x00;
  4562  002688  0E00               	movlw	0
  4563  00268A  6E8D               	movwf	3981,c	;volatile
  4564                           
  4565                           ;main.c: 97: initLCD();
  4566  00268C  EC06  F015         	call	_initLCD	;wreg free
  4567                           
  4568                           ;main.c: 99: I2C_Master_Init(32000);
  4569  002690  0E00               	movlw	0
  4570  002692  6E2E               	movwf	I2C_Master_Init@c,c
  4571  002694  0E7D               	movlw	125
  4572  002696  6E2F               	movwf	I2C_Master_Init@c+1,c
  4573  002698  0E00               	movlw	0
  4574  00269A  6E30               	movwf	I2C_Master_Init@c+2,c
  4575  00269C  0E00               	movlw	0
  4576  00269E  6E31               	movwf	I2C_Master_Init@c+3,c
  4577  0026A0  EC39  F014         	call	_I2C_Master_Init	;wreg free
  4578                           
  4579                           ;main.c: 102: nRBPU = 0;
  4580  0026A4  9EF1               	bcf	intcon2,7,c	;volatile
  4581                           
  4582                           ;main.c: 104: ADCON1 = 0b00001001;
  4583  0026A6  0E09               	movlw	9
  4584  0026A8  6EC1               	movwf	4033,c	;volatile
  4585                           
  4586                           ;main.c: 105: ADCON2 = 0b10001001;
  4587  0026AA  0E89               	movlw	137
  4588  0026AC  6EC0               	movwf	4032,c	;volatile
  4589                           
  4590                           ;main.c: 106: CVRCON = 0x00;
  4591  0026AE  0E00               	movlw	0
  4592  0026B0  6EB5               	movwf	4021,c	;volatile
  4593                           
  4594                           ;main.c: 107: CMCONbits.CIS = 0;
  4595  0026B2  96B4               	bcf	4020,3,c	;volatile
  4596                           
  4597                           ;main.c: 108: ADFM = 1;
  4598  0026B4  8EC0               	bsf	4032,7,c	;volatile
  4599                           
  4600                           ;main.c: 110: TMR0IE = 1;
  4601  0026B6  8AF2               	bsf	intcon,5,c	;volatile
  4602                           
  4603                           ;main.c: 111: TMR1IE = 1;
  4604  0026B8  809D               	bsf	3997,0,c	;volatile
  4605                           
  4606                           ;main.c: 113: PEIE = 1;
  4607  0026BA  8CF2               	bsf	intcon,6,c	;volatile
  4608                           
  4609                           ;main.c: 115: (INTCONbits.GIE = 1);
  4610  0026BC  8EF2               	bsf	intcon,7,c	;volatile
  4611  0026BE  0012               	return		;funcret
  4612  0026C0                     __end_of_initialize:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           indf2	equ	0xFDF
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _initLCD *****************
  4627 ;; Defined at:
  4628 ;;		line 11 in file "lcd.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        1 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    4
  4649 ;; This function calls:
  4650 ;;		_lcdInst
  4651 ;; This function is called by:
  4652 ;;		_initialize
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text9
  4657  002A0C                     __ptext9:
  4658                           	opt stack 0
  4659  002A0C                     _initLCD:
  4660                           	opt stack 25
  4661                           
  4662                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  4663                           
  4664                           ;incstack = 0
  4665  002A0C  0E9C               	movlw	156
  4666  002A0E  6E24               	movwf	??_initLCD& (0+255),c
  4667  002A10  0ED7               	movlw	215
  4668  002A12                     u8067:
  4669  002A12  2EE8               	decfsz	wreg,f,c
  4670  002A14  D7FE               	bra	u8067
  4671  002A16  2E24               	decfsz	??_initLCD& (0+255),f,c
  4672  002A18  D7FC               	bra	u8067
  4673  002A1A  F000               	nop	
  4674                           
  4675                           ;lcd.c: 13: lcdInst(0b00110011);
  4676  002A1C  0E33               	movlw	51
  4677  002A1E  EC1C  F016         	call	_lcdInst
  4678                           
  4679                           ;lcd.c: 14: lcdInst(0b00110010);
  4680  002A22  0E32               	movlw	50
  4681  002A24  EC1C  F016         	call	_lcdInst
  4682                           
  4683                           ;lcd.c: 15: lcdInst(0b00101000);
  4684  002A28  0E28               	movlw	40
  4685  002A2A  EC1C  F016         	call	_lcdInst
  4686                           
  4687                           ;lcd.c: 16: lcdInst(0b00001111);
  4688  002A2E  0E0F               	movlw	15
  4689  002A30  EC1C  F016         	call	_lcdInst
  4690                           
  4691                           ;lcd.c: 17: lcdInst(0b00000110);
  4692  002A34  0E06               	movlw	6
  4693  002A36  EC1C  F016         	call	_lcdInst
  4694                           
  4695                           ;lcd.c: 18: lcdInst(0b00000001);
  4696  002A3A  0E01               	movlw	1
  4697  002A3C  EC1C  F016         	call	_lcdInst
  4698                           
  4699                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  4700  002A40  0E9C               	movlw	156
  4701  002A42  6E24               	movwf	??_initLCD& (0+255),c
  4702  002A44  0ED7               	movlw	215
  4703  002A46                     u8077:
  4704  002A46  2EE8               	decfsz	wreg,f,c
  4705  002A48  D7FE               	bra	u8077
  4706  002A4A  2E24               	decfsz	??_initLCD& (0+255),f,c
  4707  002A4C  D7FC               	bra	u8077
  4708  002A4E  F000               	nop	
  4709  002A50  0012               	return		;funcret
  4710  002A52                     __end_of_initLCD:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           prodh	equ	0xFF4
  4714                           prodl	equ	0xFF3
  4715                           intcon	equ	0xFF2
  4716                           intcon2	equ	0xFF1
  4717                           postinc0	equ	0xFEE
  4718                           wreg	equ	0xFE8
  4719                           indf2	equ	0xFDF
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _I2C_Master_Init *****************
  4725 ;; Defined at:
  4726 ;;		line 20 in file "I2C.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  c               4   45[COMRAM] const unsigned long 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      void 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;Total ram usage:        8 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    3
  4747 ;; This function calls:
  4748 ;;		___lldiv
  4749 ;; This function is called by:
  4750 ;;		_initialize
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text10
  4755  002872                     __ptext10:
  4756                           	opt stack 0
  4757  002872                     _I2C_Master_Init:
  4758                           	opt stack 26
  4759                           
  4760                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  4761                           
  4762                           ;incstack = 0
  4763  002872  0E00               	movlw	0
  4764  002874  6EC7               	movwf	4039,c	;volatile
  4765                           
  4766                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  4767  002876  0E28               	movlw	40
  4768  002878  6EC6               	movwf	4038,c	;volatile
  4769                           
  4770                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  4771  00287A  0E00               	movlw	0
  4772  00287C  6EC5               	movwf	4037,c	;volatile
  4773                           
  4774                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  4775  00287E  0E00               	movlw	0
  4776  002880  6E21               	movwf	___lldiv@dividend,c
  4777  002882  0E48               	movlw	72
  4778  002884  6E22               	movwf	___lldiv@dividend+1,c
  4779  002886  0EE8               	movlw	232
  4780  002888  6E23               	movwf	___lldiv@dividend+2,c
  4781  00288A  0E01               	movlw	1
  4782  00288C  6E24               	movwf	___lldiv@dividend+3,c
  4783  00288E  C02E  F032         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4784  002892  C02F  F033         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4785  002896  C030  F034         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4786  00289A  C031  F035         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4787  00289E  0E02               	movlw	2
  4788  0028A0                     u4185:
  4789  0028A0  90D8               	bcf	status,0,c
  4790  0028A2  3632               	rlcf	??_I2C_Master_Init,f,c
  4791  0028A4  3633               	rlcf	??_I2C_Master_Init+1,f,c
  4792  0028A6  3634               	rlcf	??_I2C_Master_Init+2,f,c
  4793  0028A8  3635               	rlcf	??_I2C_Master_Init+3,f,c
  4794  0028AA  2EE8               	decfsz	wreg,f,c
  4795  0028AC  D7F9               	goto	u4185
  4796  0028AE  C032  F025         	movff	??_I2C_Master_Init,___lldiv@divisor
  4797  0028B2  C033  F026         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4798  0028B6  C034  F027         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4799  0028BA  C035  F028         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4800  0028BE  ECE3  F012         	call	___lldiv	;wreg free
  4801  0028C2  0421               	decf	?___lldiv,w,c
  4802  0028C4  6EC8               	movwf	4040,c	;volatile
  4803                           
  4804                           ;I2C.c: 27: TRISC3 = 1;
  4805  0028C6  8694               	bsf	3988,3,c	;volatile
  4806                           
  4807                           ;I2C.c: 28: TRISC4 = 1;
  4808  0028C8  8894               	bsf	3988,4,c	;volatile
  4809  0028CA  0012               	return		;funcret
  4810  0028CC                     __end_of_I2C_Master_Init:
  4811                           	opt stack 0
  4812                           tblptru	equ	0xFF8
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           intcon	equ	0xFF2
  4816                           intcon2	equ	0xFF1
  4817                           postinc0	equ	0xFEE
  4818                           wreg	equ	0xFE8
  4819                           indf2	equ	0xFDF
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function ___lldiv *****************
  4825 ;; Defined at:
  4826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  dividend        4   32[COMRAM] unsigned long 
  4829 ;;  divisor         4   36[COMRAM] unsigned long 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  quotient        4   40[COMRAM] unsigned long 
  4832 ;;  counter         1   44[COMRAM] unsigned char 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  4   32[COMRAM] unsigned long 
  4835 ;; Registers used:
  4836 ;;		wreg, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4842 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;Total ram usage:       13 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    2
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_I2C_Master_Init
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text11
  4857  0025C6                     __ptext11:
  4858                           	opt stack 0
  4859  0025C6                     ___lldiv:
  4860                           	opt stack 26
  4861                           
  4862                           ;incstack = 0
  4863  0025C6  0E00               	movlw	0
  4864  0025C8  6E29               	movwf	___lldiv@quotient,c
  4865  0025CA  0E00               	movlw	0
  4866  0025CC  6E2A               	movwf	___lldiv@quotient+1,c
  4867  0025CE  0E00               	movlw	0
  4868  0025D0  6E2B               	movwf	___lldiv@quotient+2,c
  4869  0025D2  0E00               	movlw	0
  4870  0025D4  6E2C               	movwf	___lldiv@quotient+3,c
  4871  0025D6  5025               	movf	___lldiv@divisor,w,c
  4872  0025D8  1026               	iorwf	___lldiv@divisor+1,w,c
  4873  0025DA  1027               	iorwf	___lldiv@divisor+2,w,c
  4874  0025DC  1028               	iorwf	___lldiv@divisor+3,w,c
  4875  0025DE  B4D8               	btfsc	status,2,c
  4876  0025E0  D02A               	goto	l1220
  4877  0025E2  0E01               	movlw	1
  4878  0025E4  6E2D               	movwf	___lldiv@counter,c
  4879  0025E6  D006               	goto	l3416
  4880  0025E8                     l3414:
  4881  0025E8  90D8               	bcf	status,0,c
  4882  0025EA  3625               	rlcf	___lldiv@divisor,f,c
  4883  0025EC  3626               	rlcf	___lldiv@divisor+1,f,c
  4884  0025EE  3627               	rlcf	___lldiv@divisor+2,f,c
  4885  0025F0  3628               	rlcf	___lldiv@divisor+3,f,c
  4886  0025F2  2A2D               	incf	___lldiv@counter,f,c
  4887  0025F4                     l3416:
  4888  0025F4  AE28               	btfss	___lldiv@divisor+3,7,c
  4889  0025F6  D7F8               	goto	l3414
  4890  0025F8                     l3418:
  4891  0025F8  90D8               	bcf	status,0,c
  4892  0025FA  3629               	rlcf	___lldiv@quotient,f,c
  4893  0025FC  362A               	rlcf	___lldiv@quotient+1,f,c
  4894  0025FE  362B               	rlcf	___lldiv@quotient+2,f,c
  4895  002600  362C               	rlcf	___lldiv@quotient+3,f,c
  4896  002602  5025               	movf	___lldiv@divisor,w,c
  4897  002604  5C21               	subwf	___lldiv@dividend,w,c
  4898  002606  5026               	movf	___lldiv@divisor+1,w,c
  4899  002608  5822               	subwfb	___lldiv@dividend+1,w,c
  4900  00260A  5027               	movf	___lldiv@divisor+2,w,c
  4901  00260C  5823               	subwfb	___lldiv@dividend+2,w,c
  4902  00260E  5028               	movf	___lldiv@divisor+3,w,c
  4903  002610  5824               	subwfb	___lldiv@dividend+3,w,c
  4904  002612  A0D8               	btfss	status,0,c
  4905  002614  D009               	goto	l3426
  4906  002616  5025               	movf	___lldiv@divisor,w,c
  4907  002618  5E21               	subwf	___lldiv@dividend,f,c
  4908  00261A  5026               	movf	___lldiv@divisor+1,w,c
  4909  00261C  5A22               	subwfb	___lldiv@dividend+1,f,c
  4910  00261E  5027               	movf	___lldiv@divisor+2,w,c
  4911  002620  5A23               	subwfb	___lldiv@dividend+2,f,c
  4912  002622  5028               	movf	___lldiv@divisor+3,w,c
  4913  002624  5A24               	subwfb	___lldiv@dividend+3,f,c
  4914  002626  8029               	bsf	___lldiv@quotient,0,c
  4915  002628                     l3426:
  4916  002628  90D8               	bcf	status,0,c
  4917  00262A  3228               	rrcf	___lldiv@divisor+3,f,c
  4918  00262C  3227               	rrcf	___lldiv@divisor+2,f,c
  4919  00262E  3226               	rrcf	___lldiv@divisor+1,f,c
  4920  002630  3225               	rrcf	___lldiv@divisor,f,c
  4921  002632  2E2D               	decfsz	___lldiv@counter,f,c
  4922  002634  D7E1               	goto	l3418
  4923  002636                     l1220:
  4924  002636  C029  F021         	movff	___lldiv@quotient,?___lldiv
  4925  00263A  C02A  F022         	movff	___lldiv@quotient+1,?___lldiv+1
  4926  00263E  C02B  F023         	movff	___lldiv@quotient+2,?___lldiv+2
  4927  002642  C02C  F024         	movff	___lldiv@quotient+3,?___lldiv+3
  4928  002646  0012               	return		;funcret
  4929  002648                     __end_of___lldiv:
  4930                           	opt stack 0
  4931                           tblptru	equ	0xFF8
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           intcon2	equ	0xFF1
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           indf2	equ	0xFDF
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _homescreen *****************
  4944 ;; Defined at:
  4945 ;;		line 3 in file "interface.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;		None
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      void 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;Total ram usage:        0 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:    5
  4966 ;; This function calls:
  4967 ;;		_lcdInst
  4968 ;;		_printf
  4969 ;; This function is called by:
  4970 ;;		_main
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text12
  4975  002810                     __ptext12:
  4976                           	opt stack 0
  4977  002810                     _homescreen:
  4978                           	opt stack 25
  4979                           
  4980                           ;interface.c: 4: lcdInst(0b10000000);;
  4981                           
  4982                           ;incstack = 0
  4983  002810  0E80               	movlw	128
  4984  002812  EC1C  F016         	call	_lcdInst
  4985                           
  4986                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  4987  002816  0EE6               	movlw	low STR_24
  4988  002818  6E2D               	movwf	printf@f,c
  4989  00281A  0EFE               	movlw	high STR_24
  4990  00281C  6E2E               	movwf	printf@f+1,c
  4991  00281E  C0B5  F02F         	movff	_time+6,?_printf+2
  4992  002822  6A30               	clrf	?_printf+3,c
  4993  002824  C0B4  F031         	movff	_time+5,?_printf+4
  4994  002828  6A32               	clrf	?_printf+5,c
  4995  00282A  C0B3  F033         	movff	_time+4,?_printf+6
  4996  00282E  6A34               	clrf	?_printf+7,c
  4997  002830  EC3B  F007         	call	_printf	;wreg free
  4998                           
  4999                           ;interface.c: 6: printf("3:Start");
  5000  002834  0EEF               	movlw	low STR_25
  5001  002836  6E2D               	movwf	printf@f,c
  5002  002838  0EFF               	movlw	high STR_25
  5003  00283A  6E2E               	movwf	printf@f+1,c
  5004  00283C  EC3B  F007         	call	_printf	;wreg free
  5005                           
  5006                           ;interface.c: 7: lcdInst(0b11000000);;
  5007  002840  0EC0               	movlw	192
  5008  002842  EC1C  F016         	call	_lcdInst
  5009                           
  5010                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5011  002846  0E5C               	movlw	low (STR_33+7)
  5012  002848  6E2D               	movwf	printf@f,c
  5013  00284A  0EFE               	movlw	high (STR_33+7)
  5014  00284C  6E2E               	movwf	printf@f+1,c
  5015  00284E  C0B1  F02F         	movff	_time+2,?_printf+2
  5016  002852  6A30               	clrf	?_printf+3,c
  5017  002854  C0B0  F031         	movff	_time+1,?_printf+4
  5018  002858  6A32               	clrf	?_printf+5,c
  5019  00285A  C0AF  F033         	movff	_time,?_printf+6
  5020  00285E  6A34               	clrf	?_printf+7,c
  5021  002860  EC3B  F007         	call	_printf	;wreg free
  5022                           
  5023                           ;interface.c: 9: printf(" A:Logs");
  5024  002864  0EE7               	movlw	low STR_27
  5025  002866  6E2D               	movwf	printf@f,c
  5026  002868  0EFF               	movlw	high STR_27
  5027  00286A  6E2E               	movwf	printf@f+1,c
  5028  00286C  EC3B  F007         	call	_printf	;wreg free
  5029  002870  0012               	return		;funcret
  5030  002872                     __end_of_homescreen:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           prodh	equ	0xFF4
  5034                           prodl	equ	0xFF3
  5035                           intcon	equ	0xFF2
  5036                           intcon2	equ	0xFF1
  5037                           postinc0	equ	0xFEE
  5038                           wreg	equ	0xFE8
  5039                           indf2	equ	0xFDF
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _displayLog *****************
  5045 ;; Defined at:
  5046 ;;		line 87 in file "interface.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  run             2   56[COMRAM] int 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  currRun         2   15[BANK0 ] int 
  5051 ;;  i               2   13[BANK0 ] int 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;Total ram usage:        9 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    5
  5068 ;; This function calls:
  5069 ;;		_eepromRead
  5070 ;;		_keycheck
  5071 ;;		_lcdInst
  5072 ;;		_printf
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text13
  5079  0011FE                     __ptext13:
  5080                           	opt stack 0
  5081  0011FE                     _displayLog:
  5082                           	opt stack 25
  5083                           
  5084                           ;interface.c: 88: int currRun = eepromRead(0);
  5085                           
  5086                           ;incstack = 0
  5087  0011FE  0E00               	movlw	0
  5088  001200  EC66  F015         	call	_eepromRead
  5089  001204  0100               	movlb	0	; () banked
  5090  001206  6F8F               	movwf	displayLog@currRun& (0+255),b
  5091  001208  6B90               	clrf	(displayLog@currRun+1)& (0+255),b
  5092  00120A  BF8F               	btfsc	displayLog@currRun& (0+255),7,b
  5093  00120C  0790               	decf	(displayLog@currRun+1)& (0+255),f,b
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;interface.c: 89: int i;
  5097                           ;interface.c: 90: for (i=1;i<(run);i++){
  5098  00120E  0E00               	movlw	0
  5099  001210  0100               	movlb	0	; () banked
  5100  001212  6F8E               	movwf	(displayLog@i+1)& (0+255),b
  5101  001214  0E01               	movlw	1
  5102  001216  6F8D               	movwf	displayLog@i& (0+255),b
  5103  001218  D016               	goto	l5516
  5104  00121A                     l5508:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;interface.c: 91: currRun++;
  5108  00121A  0100               	movlb	0	; () banked
  5109  00121C  4B8F               	infsnz	displayLog@currRun& (0+255),f,b
  5110  00121E  2B90               	incf	(displayLog@currRun+1)& (0+255),f,b
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  5114  001220  0100               	movlb	0	; () banked
  5115  001222  BF90               	btfsc	(displayLog@currRun+1)& (0+255),7,b
  5116  001224  D00D               	goto	l5514
  5117  001226  0100               	movlb	0	; () banked
  5118  001228  5190               	movf	(displayLog@currRun+1)& (0+255),w,b
  5119  00122A  E105               	bnz	u7030
  5120  00122C  0E05               	movlw	5
  5121  00122E  0100               	movlb	0	; () banked
  5122  001230  5D8F               	subwf	displayLog@currRun& (0+255),w,b
  5123  001232  A0D8               	btfss	status,0,c
  5124  001234  D005               	goto	l5514
  5125  001236                     u7030:
  5126                           
  5127                           ; BSR set to: 0
  5128  001236  0E00               	movlw	0
  5129  001238  0100               	movlb	0	; () banked
  5130  00123A  6F90               	movwf	(displayLog@currRun+1)& (0+255),b
  5131  00123C  0E01               	movlw	1
  5132  00123E  6F8F               	movwf	displayLog@currRun& (0+255),b
  5133  001240                     l5514:
  5134                           
  5135                           ; BSR set to: 0
  5136  001240  0100               	movlb	0	; () banked
  5137  001242  4B8D               	infsnz	displayLog@i& (0+255),f,b
  5138  001244  2B8E               	incf	(displayLog@i+1)& (0+255),f,b
  5139  001246                     l5516:
  5140                           
  5141                           ; BSR set to: 0
  5142  001246  5039               	movf	displayLog@run,w,c
  5143  001248  0100               	movlb	0	; () banked
  5144  00124A  5D8D               	subwf	displayLog@i& (0+255),w,b
  5145  00124C  0100               	movlb	0	; () banked
  5146  00124E  518E               	movf	(displayLog@i+1)& (0+255),w,b
  5147  001250  0A80               	xorlw	128
  5148  001252  0100               	movlb	0	; () banked
  5149  001254  6F8A               	movwf	??_displayLog& (0+255),b
  5150  001256  503A               	movf	displayLog@run+1,w,c
  5151  001258  0A80               	xorlw	128
  5152  00125A  0100               	movlb	0	; () banked
  5153  00125C  598A               	subwfb	??_displayLog& (0+255),w,b
  5154  00125E  A0D8               	btfss	status,0,c
  5155  001260  D7DC               	goto	l5508
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;interface.c: 93: }
  5159                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5160                           
  5161                           ; BSR set to: 0
  5162  001262  0E01               	movlw	1
  5163  001264  EC1C  F016         	call	_lcdInst
  5164  001268  0E34               	movlw	52
  5165  00126A  0100               	movlb	0	; () banked
  5166  00126C  6F8A               	movwf	??_displayLog& (0+255),b
  5167  00126E  0EF1               	movlw	241
  5168  001270                     u8087:
  5169  001270  2EE8               	decfsz	wreg,f,c
  5170  001272  D7FE               	bra	u8087
  5171  001274  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5172  001276  D7FC               	bra	u8087
  5173  001278  D000               	nop2	
  5174                           
  5175                           ;interface.c: 96: printf("Run#%d    A:Next", run);
  5176  00127A  0EB3               	movlw	low STR_28
  5177  00127C  6E2D               	movwf	printf@f,c
  5178  00127E  0EFE               	movlw	high STR_28
  5179  001280  6E2E               	movwf	printf@f+1,c
  5180  001282  C039  F02F         	movff	displayLog@run,?_printf+2
  5181  001286  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5182  00128A  EC3B  F007         	call	_printf	;wreg free
  5183                           
  5184                           ;interface.c: 97: lcdInst(0b11000000);;
  5185  00128E  0EC0               	movlw	192
  5186  001290  EC1C  F016         	call	_lcdInst
  5187                           
  5188                           ;interface.c: 98: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  5189  001294  0EA3               	movlw	low STR_29
  5190  001296  6E2D               	movwf	printf@f,c
  5191  001298  0EFF               	movlw	high STR_29
  5192  00129A  6E2E               	movwf	printf@f+1,c
  5193  00129C  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5194  0012A0  0100               	movlb	0	; () banked
  5195  0012A2  3B8A               	swapf	??_displayLog& (0+255),f,b
  5196  0012A4  0EF0               	movlw	240
  5197  0012A6  178A               	andwf	??_displayLog& (0+255),f,b
  5198  0012A8  0100               	movlb	0	; () banked
  5199  0012AA  298A               	incf	??_displayLog& (0+255),w,b
  5200  0012AC  EC66  F015         	call	_eepromRead
  5201  0012B0  6E2F               	movwf	?_printf+2,c
  5202  0012B2  6A30               	clrf	?_printf+3,c
  5203  0012B4  BE2F               	btfsc	?_printf+2,7,c
  5204  0012B6  0630               	decf	?_printf+3,f,c
  5205  0012B8  EC3B  F007         	call	_printf	;wreg free
  5206                           
  5207                           ;interface.c: 99: keycheck();
  5208  0012BC  ECF2  F015         	call	_keycheck	;wreg free
  5209                           
  5210                           ;interface.c: 100: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5211  0012C0  0E01               	movlw	1
  5212  0012C2  EC1C  F016         	call	_lcdInst
  5213  0012C6  0E34               	movlw	52
  5214  0012C8  0100               	movlb	0	; () banked
  5215  0012CA  6F8A               	movwf	??_displayLog& (0+255),b
  5216  0012CC  0EF1               	movlw	241
  5217  0012CE                     u8097:
  5218  0012CE  2EE8               	decfsz	wreg,f,c
  5219  0012D0  D7FE               	bra	u8097
  5220  0012D2  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5221  0012D4  D7FC               	bra	u8097
  5222  0012D6  D000               	nop2	
  5223                           
  5224                           ;interface.c: 101: printf("Run#%d    A:Next", run);
  5225  0012D8  0EB3               	movlw	low STR_28
  5226  0012DA  6E2D               	movwf	printf@f,c
  5227  0012DC  0EFE               	movlw	high STR_28
  5228  0012DE  6E2E               	movwf	printf@f+1,c
  5229  0012E0  C039  F02F         	movff	displayLog@run,?_printf+2
  5230  0012E4  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5231  0012E8  EC3B  F007         	call	_printf	;wreg free
  5232                           
  5233                           ;interface.c: 102: lcdInst(0b11000000);;
  5234  0012EC  0EC0               	movlw	192
  5235  0012EE  EC1C  F016         	call	_lcdInst
  5236                           
  5237                           ;interface.c: 103: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  5238  0012F2  0E6B               	movlw	low STR_31
  5239  0012F4  6E2D               	movwf	printf@f,c
  5240  0012F6  0EFE               	movlw	high STR_31
  5241  0012F8  6E2E               	movwf	printf@f+1,c
  5242  0012FA  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5243  0012FE  0100               	movlb	0	; () banked
  5244  001300  3B8A               	swapf	??_displayLog& (0+255),f,b
  5245  001302  0EF0               	movlw	240
  5246  001304  178A               	andwf	??_displayLog& (0+255),f,b
  5247  001306  0100               	movlb	0	; () banked
  5248  001308  518A               	movf	??_displayLog& (0+255),w,b
  5249  00130A  0F02               	addlw	2
  5250  00130C  EC66  F015         	call	_eepromRead
  5251  001310  6E2F               	movwf	?_printf+2,c
  5252  001312  6A30               	clrf	?_printf+3,c
  5253  001314  BE2F               	btfsc	?_printf+2,7,c
  5254  001316  0630               	decf	?_printf+3,f,c
  5255  001318  C08F  F08B         	movff	displayLog@currRun,??_displayLog+1
  5256  00131C  0100               	movlb	0	; () banked
  5257  00131E  3B8B               	swapf	(??_displayLog+1)& (0+255),f,b
  5258  001320  0EF0               	movlw	240
  5259  001322  178B               	andwf	(??_displayLog+1)& (0+255),f,b
  5260  001324  0100               	movlb	0	; () banked
  5261  001326  518B               	movf	(??_displayLog+1)& (0+255),w,b
  5262  001328  0F03               	addlw	3
  5263  00132A  EC66  F015         	call	_eepromRead
  5264  00132E  6E31               	movwf	?_printf+4,c
  5265  001330  6A32               	clrf	?_printf+5,c
  5266  001332  BE31               	btfsc	?_printf+4,7,c
  5267  001334  0632               	decf	?_printf+5,f,c
  5268  001336  C08F  F08C         	movff	displayLog@currRun,??_displayLog+2
  5269  00133A  0100               	movlb	0	; () banked
  5270  00133C  3B8C               	swapf	(??_displayLog+2)& (0+255),f,b
  5271  00133E  0EF0               	movlw	240
  5272  001340  178C               	andwf	(??_displayLog+2)& (0+255),f,b
  5273  001342  0100               	movlb	0	; () banked
  5274  001344  518C               	movf	(??_displayLog+2)& (0+255),w,b
  5275  001346  0F04               	addlw	4
  5276  001348  EC66  F015         	call	_eepromRead
  5277  00134C  6E33               	movwf	?_printf+6,c
  5278  00134E  6A34               	clrf	?_printf+7,c
  5279  001350  BE33               	btfsc	?_printf+6,7,c
  5280  001352  0634               	decf	?_printf+7,f,c
  5281  001354  EC3B  F007         	call	_printf	;wreg free
  5282                           
  5283                           ;interface.c: 104: keycheck();
  5284  001358  ECF2  F015         	call	_keycheck	;wreg free
  5285                           
  5286                           ;interface.c: 105: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5287  00135C  0E01               	movlw	1
  5288  00135E  EC1C  F016         	call	_lcdInst
  5289  001362  0E34               	movlw	52
  5290  001364  0100               	movlb	0	; () banked
  5291  001366  6F8A               	movwf	??_displayLog& (0+255),b
  5292  001368  0EF1               	movlw	241
  5293  00136A                     u8107:
  5294  00136A  2EE8               	decfsz	wreg,f,c
  5295  00136C  D7FE               	bra	u8107
  5296  00136E  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5297  001370  D7FC               	bra	u8107
  5298  001372  D000               	nop2	
  5299                           
  5300                           ;interface.c: 106: printf("Run#%d    A:Next", run);
  5301  001374  0EB3               	movlw	low STR_28
  5302  001376  6E2D               	movwf	printf@f,c
  5303  001378  0EFE               	movlw	high STR_28
  5304  00137A  6E2E               	movwf	printf@f+1,c
  5305  00137C  C039  F02F         	movff	displayLog@run,?_printf+2
  5306  001380  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5307  001384  EC3B  F007         	call	_printf	;wreg free
  5308                           
  5309                           ;interface.c: 107: lcdInst(0b11000000);;
  5310  001388  0EC0               	movlw	192
  5311  00138A  EC1C  F016         	call	_lcdInst
  5312                           
  5313                           ;interface.c: 108: printf("Start: %02x:%02x:%02x", eepromRead(currRun*0x10 + 5), eepromR
      +                          ead(currRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  5314  00138E  0E55               	movlw	low STR_33
  5315  001390  6E2D               	movwf	printf@f,c
  5316  001392  0EFE               	movlw	high STR_33
  5317  001394  6E2E               	movwf	printf@f+1,c
  5318  001396  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5319  00139A  0100               	movlb	0	; () banked
  5320  00139C  3B8A               	swapf	??_displayLog& (0+255),f,b
  5321  00139E  0EF0               	movlw	240
  5322  0013A0  178A               	andwf	??_displayLog& (0+255),f,b
  5323  0013A2  0100               	movlb	0	; () banked
  5324  0013A4  518A               	movf	??_displayLog& (0+255),w,b
  5325  0013A6  0F05               	addlw	5
  5326  0013A8  EC66  F015         	call	_eepromRead
  5327  0013AC  6E2F               	movwf	?_printf+2,c
  5328  0013AE  6A30               	clrf	?_printf+3,c
  5329  0013B0  BE2F               	btfsc	?_printf+2,7,c
  5330  0013B2  0630               	decf	?_printf+3,f,c
  5331  0013B4  C08F  F08B         	movff	displayLog@currRun,??_displayLog+1
  5332  0013B8  0100               	movlb	0	; () banked
  5333  0013BA  3B8B               	swapf	(??_displayLog+1)& (0+255),f,b
  5334  0013BC  0EF0               	movlw	240
  5335  0013BE  178B               	andwf	(??_displayLog+1)& (0+255),f,b
  5336  0013C0  0100               	movlb	0	; () banked
  5337  0013C2  518B               	movf	(??_displayLog+1)& (0+255),w,b
  5338  0013C4  0F06               	addlw	6
  5339  0013C6  EC66  F015         	call	_eepromRead
  5340  0013CA  6E31               	movwf	?_printf+4,c
  5341  0013CC  6A32               	clrf	?_printf+5,c
  5342  0013CE  BE31               	btfsc	?_printf+4,7,c
  5343  0013D0  0632               	decf	?_printf+5,f,c
  5344  0013D2  C08F  F08C         	movff	displayLog@currRun,??_displayLog+2
  5345  0013D6  0100               	movlb	0	; () banked
  5346  0013D8  3B8C               	swapf	(??_displayLog+2)& (0+255),f,b
  5347  0013DA  0EF0               	movlw	240
  5348  0013DC  178C               	andwf	(??_displayLog+2)& (0+255),f,b
  5349  0013DE  0100               	movlb	0	; () banked
  5350  0013E0  518C               	movf	(??_displayLog+2)& (0+255),w,b
  5351  0013E2  0F07               	addlw	7
  5352  0013E4  EC66  F015         	call	_eepromRead
  5353  0013E8  6E33               	movwf	?_printf+6,c
  5354  0013EA  6A34               	clrf	?_printf+7,c
  5355  0013EC  BE33               	btfsc	?_printf+6,7,c
  5356  0013EE  0634               	decf	?_printf+7,f,c
  5357  0013F0  EC3B  F007         	call	_printf	;wreg free
  5358                           
  5359                           ;interface.c: 109: keycheck();
  5360  0013F4  ECF2  F015         	call	_keycheck	;wreg free
  5361                           
  5362                           ;interface.c: 110: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5363  0013F8  0E01               	movlw	1
  5364  0013FA  EC1C  F016         	call	_lcdInst
  5365  0013FE  0E34               	movlw	52
  5366  001400  0100               	movlb	0	; () banked
  5367  001402  6F8A               	movwf	??_displayLog& (0+255),b
  5368  001404  0EF1               	movlw	241
  5369  001406                     u8117:
  5370  001406  2EE8               	decfsz	wreg,f,c
  5371  001408  D7FE               	bra	u8117
  5372  00140A  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5373  00140C  D7FC               	bra	u8117
  5374  00140E  D000               	nop2	
  5375                           
  5376                           ;interface.c: 111: printf("Run#%d    A:Next", run);
  5377  001410  0EB3               	movlw	low STR_28
  5378  001412  6E2D               	movwf	printf@f,c
  5379  001414  0EFE               	movlw	high STR_28
  5380  001416  6E2E               	movwf	printf@f+1,c
  5381  001418  C039  F02F         	movff	displayLog@run,?_printf+2
  5382  00141C  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5383  001420  EC3B  F007         	call	_printf	;wreg free
  5384                           
  5385                           ;interface.c: 112: lcdInst(0b11000000);;
  5386  001424  0EC0               	movlw	192
  5387  001426  EC1C  F016         	call	_lcdInst
  5388                           
  5389                           ;interface.c: 113: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  5390  00142A  0EF6               	movlw	low STR_35
  5391  00142C  6E2D               	movwf	printf@f,c
  5392  00142E  0EFE               	movlw	high STR_35
  5393  001430  6E2E               	movwf	printf@f+1,c
  5394  001432  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5395  001436  0100               	movlb	0	; () banked
  5396  001438  3B8A               	swapf	??_displayLog& (0+255),f,b
  5397  00143A  0EF0               	movlw	240
  5398  00143C  178A               	andwf	??_displayLog& (0+255),f,b
  5399  00143E  0100               	movlb	0	; () banked
  5400  001440  518A               	movf	??_displayLog& (0+255),w,b
  5401  001442  0F08               	addlw	8
  5402  001444  EC66  F015         	call	_eepromRead
  5403  001448  6E2F               	movwf	?_printf+2,c
  5404  00144A  6A30               	clrf	?_printf+3,c
  5405  00144C  BE2F               	btfsc	?_printf+2,7,c
  5406  00144E  0630               	decf	?_printf+3,f,c
  5407  001450  EC3B  F007         	call	_printf	;wreg free
  5408                           
  5409                           ;interface.c: 114: keycheck();
  5410  001454  ECF2  F015         	call	_keycheck	;wreg free
  5411                           
  5412                           ;interface.c: 115: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5413  001458  0E01               	movlw	1
  5414  00145A  EC1C  F016         	call	_lcdInst
  5415  00145E  0E34               	movlw	52
  5416  001460  0100               	movlb	0	; () banked
  5417  001462  6F8A               	movwf	??_displayLog& (0+255),b
  5418  001464  0EF1               	movlw	241
  5419  001466                     u8127:
  5420  001466  2EE8               	decfsz	wreg,f,c
  5421  001468  D7FE               	bra	u8127
  5422  00146A  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5423  00146C  D7FC               	bra	u8127
  5424  00146E  D000               	nop2	
  5425                           
  5426                           ;interface.c: 116: printf("Run#%d    A:Next", run);
  5427  001470  0EB3               	movlw	low STR_28
  5428  001472  6E2D               	movwf	printf@f,c
  5429  001474  0EFE               	movlw	high STR_28
  5430  001476  6E2E               	movwf	printf@f+1,c
  5431  001478  C039  F02F         	movff	displayLog@run,?_printf+2
  5432  00147C  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5433  001480  EC3B  F007         	call	_printf	;wreg free
  5434                           
  5435                           ;interface.c: 117: lcdInst(0b11000000);;
  5436  001484  0EC0               	movlw	192
  5437  001486  EC1C  F016         	call	_lcdInst
  5438                           
  5439                           ;interface.c: 118: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  5440  00148A  0E91               	movlw	low STR_37
  5441  00148C  6E2D               	movwf	printf@f,c
  5442  00148E  0EFE               	movlw	high STR_37
  5443  001490  6E2E               	movwf	printf@f+1,c
  5444  001492  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5445  001496  0100               	movlb	0	; () banked
  5446  001498  3B8A               	swapf	??_displayLog& (0+255),f,b
  5447  00149A  0EF0               	movlw	240
  5448  00149C  178A               	andwf	??_displayLog& (0+255),f,b
  5449  00149E  0100               	movlb	0	; () banked
  5450  0014A0  518A               	movf	??_displayLog& (0+255),w,b
  5451  0014A2  0F09               	addlw	9
  5452  0014A4  EC66  F015         	call	_eepromRead
  5453  0014A8  6E2F               	movwf	?_printf+2,c
  5454  0014AA  6A30               	clrf	?_printf+3,c
  5455  0014AC  BE2F               	btfsc	?_printf+2,7,c
  5456  0014AE  0630               	decf	?_printf+3,f,c
  5457  0014B0  EC3B  F007         	call	_printf	;wreg free
  5458                           
  5459                           ;interface.c: 119: keycheck();
  5460  0014B4  ECF2  F015         	call	_keycheck	;wreg free
  5461                           
  5462                           ;interface.c: 120: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5463  0014B8  0E01               	movlw	1
  5464  0014BA  EC1C  F016         	call	_lcdInst
  5465  0014BE  0E34               	movlw	52
  5466  0014C0  0100               	movlb	0	; () banked
  5467  0014C2  6F8A               	movwf	??_displayLog& (0+255),b
  5468  0014C4  0EF1               	movlw	241
  5469  0014C6                     u8137:
  5470  0014C6  2EE8               	decfsz	wreg,f,c
  5471  0014C8  D7FE               	bra	u8137
  5472  0014CA  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5473  0014CC  D7FC               	bra	u8137
  5474  0014CE  D000               	nop2	
  5475                           
  5476                           ;interface.c: 121: printf("Run#%d    A:Next", run);
  5477  0014D0  0EB3               	movlw	low STR_28
  5478  0014D2  6E2D               	movwf	printf@f,c
  5479  0014D4  0EFE               	movlw	high STR_28
  5480  0014D6  6E2E               	movwf	printf@f+1,c
  5481  0014D8  C039  F02F         	movff	displayLog@run,?_printf+2
  5482  0014DC  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5483  0014E0  EC3B  F007         	call	_printf	;wreg free
  5484                           
  5485                           ;interface.c: 122: lcdInst(0b11000000);;
  5486  0014E4  0EC0               	movlw	192
  5487  0014E6  EC1C  F016         	call	_lcdInst
  5488                           
  5489                           ;interface.c: 123: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  5490  0014EA  0E06               	movlw	low STR_39
  5491  0014EC  6E2D               	movwf	printf@f,c
  5492  0014EE  0EFF               	movlw	high STR_39
  5493  0014F0  6E2E               	movwf	printf@f+1,c
  5494  0014F2  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5495  0014F6  0100               	movlb	0	; () banked
  5496  0014F8  3B8A               	swapf	??_displayLog& (0+255),f,b
  5497  0014FA  0EF0               	movlw	240
  5498  0014FC  178A               	andwf	??_displayLog& (0+255),f,b
  5499  0014FE  0100               	movlb	0	; () banked
  5500  001500  518A               	movf	??_displayLog& (0+255),w,b
  5501  001502  0F0A               	addlw	10
  5502  001504  EC66  F015         	call	_eepromRead
  5503  001508  6E2F               	movwf	?_printf+2,c
  5504  00150A  6A30               	clrf	?_printf+3,c
  5505  00150C  BE2F               	btfsc	?_printf+2,7,c
  5506  00150E  0630               	decf	?_printf+3,f,c
  5507  001510  EC3B  F007         	call	_printf	;wreg free
  5508                           
  5509                           ;interface.c: 124: keycheck();
  5510  001514  ECF2  F015         	call	_keycheck	;wreg free
  5511                           
  5512                           ;interface.c: 125: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5513  001518  0E01               	movlw	1
  5514  00151A  EC1C  F016         	call	_lcdInst
  5515  00151E  0E34               	movlw	52
  5516  001520  0100               	movlb	0	; () banked
  5517  001522  6F8A               	movwf	??_displayLog& (0+255),b
  5518  001524  0EF1               	movlw	241
  5519  001526                     u8147:
  5520  001526  2EE8               	decfsz	wreg,f,c
  5521  001528  D7FE               	bra	u8147
  5522  00152A  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5523  00152C  D7FC               	bra	u8147
  5524  00152E  D000               	nop2	
  5525                           
  5526                           ;interface.c: 126: printf("Run#%d    A:Next", run);
  5527  001530  0EB3               	movlw	low STR_28
  5528  001532  6E2D               	movwf	printf@f,c
  5529  001534  0EFE               	movlw	high STR_28
  5530  001536  6E2E               	movwf	printf@f+1,c
  5531  001538  C039  F02F         	movff	displayLog@run,?_printf+2
  5532  00153C  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5533  001540  EC3B  F007         	call	_printf	;wreg free
  5534                           
  5535                           ;interface.c: 127: lcdInst(0b11000000);;
  5536  001544  0EC0               	movlw	192
  5537  001546  EC1C  F016         	call	_lcdInst
  5538                           
  5539                           ;interface.c: 128: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  5540  00154A  0EA2               	movlw	low STR_41
  5541  00154C  6E2D               	movwf	printf@f,c
  5542  00154E  0EFE               	movlw	high STR_41
  5543  001550  6E2E               	movwf	printf@f+1,c
  5544  001552  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5545  001556  0100               	movlb	0	; () banked
  5546  001558  3B8A               	swapf	??_displayLog& (0+255),f,b
  5547  00155A  0EF0               	movlw	240
  5548  00155C  178A               	andwf	??_displayLog& (0+255),f,b
  5549  00155E  0100               	movlb	0	; () banked
  5550  001560  518A               	movf	??_displayLog& (0+255),w,b
  5551  001562  0F0B               	addlw	11
  5552  001564  EC66  F015         	call	_eepromRead
  5553  001568  6E2F               	movwf	?_printf+2,c
  5554  00156A  6A30               	clrf	?_printf+3,c
  5555  00156C  BE2F               	btfsc	?_printf+2,7,c
  5556  00156E  0630               	decf	?_printf+3,f,c
  5557  001570  EC3B  F007         	call	_printf	;wreg free
  5558                           
  5559                           ;interface.c: 129: keycheck();
  5560  001574  ECF2  F015         	call	_keycheck	;wreg free
  5561  001578  0012               	return		;funcret
  5562  00157A                     __end_of_displayLog:
  5563                           	opt stack 0
  5564                           tblptru	equ	0xFF8
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           intcon	equ	0xFF2
  5568                           intcon2	equ	0xFF1
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           indf2	equ	0xFDF
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function _printf *****************
  5577 ;; Defined at:
  5578 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  f               2   44[COMRAM] PTR const unsigned char 
  5581 ;;		 -> STR_41(17), STR_40(17), STR_39(16), STR_38(17), 
  5582 ;;		 -> STR_37(17), STR_36(17), STR_35(16), STR_34(17), 
  5583 ;;		 -> STR_33(22), STR_32(17), STR_31(21), STR_30(17), 
  5584 ;;		 -> STR_29(12), STR_28(17), STR_27(8), STR_26(15), 
  5585 ;;		 -> STR_25(8), STR_24(16), STR_23(17), STR_22(16), 
  5586 ;;		 -> STR_21(9), STR_20(9), STR_19(12), STR_18(4), 
  5587 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(11), 
  5588 ;;		 -> STR_13(13), STR_12(3), STR_11(16), STR_10(16), 
  5589 ;;		 -> STR_9(3), STR_8(16), STR_7(16), STR_6(12), 
  5590 ;;		 -> STR_5(12), STR_4(17), STR_3(16), STR_2(16), 
  5591 ;;		 -> STR_1(16), 
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;  idx             1    0[BANK0 ] unsigned char 
  5594 ;;  tmpval          4    0        struct .
  5595 ;;  cp              3    0        PTR const unsigned char 
  5596 ;;  width           2    7[BANK0 ] int 
  5597 ;;  val             2    4[BANK0 ] unsigned int 
  5598 ;;  ap              2    1[BANK0 ] PTR void [1]
  5599 ;;		 -> ?_printf(2), 
  5600 ;;  len             2    0        unsigned int 
  5601 ;;  c               1    9[BANK0 ] char 
  5602 ;;  flag            1    6[BANK0 ] unsigned char 
  5603 ;;  prec            1    3[BANK0 ] char 
  5604 ;; Return value:  Size  Location     Type
  5605 ;;                  2   44[COMRAM] int 
  5606 ;; Registers used:
  5607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5613 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;Total ram usage:       22 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    4
  5620 ;; This function calls:
  5621 ;;		___lwdiv
  5622 ;;		___lwmod
  5623 ;;		___wmul
  5624 ;;		_isdigit
  5625 ;;		_putch
  5626 ;; This function is called by:
  5627 ;;		_main
  5628 ;;		_homescreen
  5629 ;;		_displayLog
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text14
  5634  000E76                     __ptext14:
  5635                           	opt stack 0
  5636  000E76                     _printf:
  5637                           	opt stack 26
  5638                           
  5639                           ;doprnt.c: 466: va_list ap;
  5640                           ;doprnt.c: 499: signed char c;
  5641                           ;doprnt.c: 501: int width;
  5642                           ;doprnt.c: 506: signed char prec;
  5643                           ;doprnt.c: 508: unsigned char flag;
  5644                           ;doprnt.c: 523: union {
  5645                           ;doprnt.c: 524: unsigned long vd;
  5646                           ;doprnt.c: 525: double integ;
  5647                           ;doprnt.c: 526: } tmpval;
  5648                           ;doprnt.c: 528: unsigned int val;
  5649                           ;doprnt.c: 529: unsigned len;
  5650                           ;doprnt.c: 530: const char * cp;
  5651                           ;doprnt.c: 533: *ap = __va_start();
  5652                           
  5653                           ;incstack = 0
  5654  000E76  0E2F               	movlw	low (?_printf+2)
  5655  000E78  0100               	movlb	0	; () banked
  5656  000E7A  6F81               	movwf	printf@ap& (0+255),b
  5657  000E7C  0E00               	movlw	high (?_printf+2)
  5658  000E7E  0100               	movlb	0	; () banked
  5659  000E80  6F82               	movwf	(printf@ap+1)& (0+255),b
  5660                           
  5661                           ;doprnt.c: 536: while(c = *f++) {
  5662  000E82  D1AF               	goto	l5450
  5663  000E84                     l5324:
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;doprnt.c: 538: if(c != '%')
  5667  000E84  0E25               	movlw	37
  5668  000E86  0100               	movlb	0	; () banked
  5669  000E88  1989               	xorwf	printf@c& (0+255),w,b
  5670  000E8A  B4D8               	btfsc	status,2,c
  5671  000E8C  D005               	goto	l5328
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;doprnt.c: 540: {
  5675                           ;doprnt.c: 541: (putch(c) );
  5676  000E8E  0100               	movlb	0	; () banked
  5677  000E90  5189               	movf	printf@c& (0+255),w,b
  5678  000E92  EC16  F016         	call	_putch
  5679                           
  5680                           ;doprnt.c: 542: continue;
  5681  000E96  D1A5               	goto	l5450
  5682  000E98                     l5328:
  5683                           
  5684                           ;doprnt.c: 543: }
  5685                           ;doprnt.c: 546: width = 0;
  5686  000E98  0E00               	movlw	0
  5687  000E9A  0100               	movlb	0	; () banked
  5688  000E9C  6F88               	movwf	(printf@width+1)& (0+255),b
  5689  000E9E  0E00               	movlw	0
  5690  000EA0  6F87               	movwf	printf@width& (0+255),b
  5691                           
  5692                           ;doprnt.c: 548: flag = 0;
  5693  000EA2  0E00               	movlw	0
  5694  000EA4  0100               	movlb	0	; () banked
  5695  000EA6  6F86               	movwf	printf@flag& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;doprnt.c: 551: switch(*f) {
  5699                           
  5700                           ;doprnt.c: 550: for(;;) {
  5701  000EA8  D004               	goto	l5334
  5702  000EAA                     l5330:
  5703                           
  5704                           ;doprnt.c: 580: flag |= 0x04;
  5705  000EAA  0100               	movlb	0	; () banked
  5706  000EAC  8586               	bsf	printf@flag& (0+255),2,b
  5707                           
  5708                           ;doprnt.c: 581: f++;
  5709  000EAE  4A2D               	infsnz	printf@f,f,c
  5710  000EB0  2A2E               	incf	printf@f+1,f,c
  5711  000EB2                     l5334:
  5712  000EB2  C02D  FFF6         	movff	printf@f,tblptrl
  5713  000EB6  C02E  FFF7         	movff	printf@f+1,tblptrh
  5714  000EBA                     	if	0	;tblptru may be non-zero
  5715  000EBA                     	endif
  5716  000EBA                     	if	0	;tblptru may be non-zero
  5717  000EBA                     	endif
  5718  000EBA  0008               	tblrd		*
  5719  000EBC  50F5               	movf	tablat,w,c
  5720                           
  5721                           ; Switch size 1, requested type "space"
  5722                           ; Number of cases is 1, Range of values is 48 to 48
  5723                           ; switch strategies available:
  5724                           ; Name         Instructions Cycles
  5725                           ; simple_byte            4     3 (average)
  5726                           ;	Chosen strategy is simple_byte
  5727  000EBE  0A30               	xorlw	48	; case 48
  5728  000EC0  B4D8               	btfsc	status,2,c
  5729  000EC2  D7F3               	goto	l5330
  5730                           
  5731                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5732                           
  5733                           ;doprnt.c: 586: }
  5734                           
  5735                           ;doprnt.c: 585: break;
  5736  000EC4  C02D  FFF6         	movff	printf@f,tblptrl
  5737  000EC8  C02E  FFF7         	movff	printf@f+1,tblptrh
  5738  000ECC                     	if	0	;tblptru may be non-zero
  5739  000ECC                     	endif
  5740  000ECC                     	if	0	;tblptru may be non-zero
  5741  000ECC                     	endif
  5742  000ECC  0008               	tblrd		*
  5743  000ECE  50F5               	movf	tablat,w,c
  5744  000ED0  ECD8  F015         	call	_isdigit
  5745  000ED4  A0D8               	btfss	status,0,c
  5746  000ED6  D039               	goto	l5352
  5747                           
  5748                           ;doprnt.c: 598: width = 0;
  5749  000ED8  0E00               	movlw	0
  5750  000EDA  0100               	movlb	0	; () banked
  5751  000EDC  6F88               	movwf	(printf@width+1)& (0+255),b
  5752  000EDE  0E00               	movlw	0
  5753  000EE0  6F87               	movwf	printf@width& (0+255),b
  5754  000EE2                     l5340:
  5755                           
  5756                           ;doprnt.c: 600: width *= 10;
  5757  000EE2  C087  F021         	movff	printf@width,___wmul@multiplier
  5758  000EE6  C088  F022         	movff	printf@width+1,___wmul@multiplier+1
  5759  000EEA  0E00               	movlw	0
  5760  000EEC  6E24               	movwf	___wmul@multiplicand+1,c
  5761  000EEE  0E0A               	movlw	10
  5762  000EF0  6E23               	movwf	___wmul@multiplicand,c
  5763  000EF2  ECA0  F015         	call	___wmul	;wreg free
  5764  000EF6  C021  F087         	movff	?___wmul,printf@width
  5765  000EFA  C022  F088         	movff	?___wmul+1,printf@width+1
  5766                           
  5767                           ;doprnt.c: 601: width += *f++ - '0';
  5768  000EFE  0ED0               	movlw	208
  5769  000F00  6E35               	movwf	??_printf& (0+255),c
  5770  000F02  0EFF               	movlw	255
  5771  000F04  6E36               	movwf	(??_printf+1)& (0+255),c
  5772  000F06  C02D  FFF6         	movff	printf@f,tblptrl
  5773  000F0A  C02E  FFF7         	movff	printf@f+1,tblptrh
  5774  000F0E                     	if	0	;tblptru may be non-zero
  5775  000F0E                     	endif
  5776  000F0E                     	if	0	;tblptru may be non-zero
  5777  000F0E                     	endif
  5778  000F0E  0008               	tblrd		*
  5779  000F10  50F5               	movf	tablat,w,c
  5780  000F12  6E37               	movwf	(??_printf+2)& (0+255),c
  5781  000F14  6A38               	clrf	(??_printf+3)& (0+255),c
  5782  000F16  5035               	movf	??_printf,w,c
  5783  000F18  2637               	addwf	??_printf+2,f,c
  5784  000F1A  5036               	movf	??_printf+1,w,c
  5785  000F1C  2238               	addwfc	??_printf+3,f,c
  5786  000F1E  5037               	movf	??_printf+2,w,c
  5787  000F20  0100               	movlb	0	; () banked
  5788  000F22  2787               	addwf	printf@width& (0+255),f,b
  5789  000F24  5038               	movf	??_printf+3,w,c
  5790  000F26  0100               	movlb	0	; () banked
  5791  000F28  2388               	addwfc	(printf@width+1)& (0+255),f,b
  5792                           
  5793                           ; BSR set to: 0
  5794  000F2A  4A2D               	infsnz	printf@f,f,c
  5795  000F2C  2A2E               	incf	printf@f+1,f,c
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5799  000F2E  C02D  FFF6         	movff	printf@f,tblptrl
  5800  000F32  C02E  FFF7         	movff	printf@f+1,tblptrh
  5801  000F36                     	if	0	;tblptru may be non-zero
  5802  000F36                     	endif
  5803  000F36                     	if	0	;tblptru may be non-zero
  5804  000F36                     	endif
  5805  000F36  0008               	tblrd		*
  5806  000F38  50F5               	movf	tablat,w,c
  5807  000F3A  ECD8  F015         	call	_isdigit
  5808  000F3E  A0D8               	btfss	status,0,c
  5809  000F40  D004               	goto	l5352
  5810  000F42  D7CF               	goto	l5340
  5811  000F44                     l5348:
  5812                           
  5813                           ;doprnt.c: 721: flag |= 0x80;
  5814  000F44  0100               	movlb	0	; () banked
  5815  000F46  8F86               	bsf	printf@flag& (0+255),7,b
  5816                           
  5817                           ;doprnt.c: 723: break;
  5818  000F48  D018               	goto	l828
  5819  000F4A                     l5352:
  5820  000F4A  C02D  FFF6         	movff	printf@f,tblptrl
  5821  000F4E  C02E  FFF7         	movff	printf@f+1,tblptrh
  5822  000F52  4A2D               	infsnz	printf@f,f,c
  5823  000F54  2A2E               	incf	printf@f+1,f,c
  5824  000F56                     	if	0	;tblptru may be non-zero
  5825  000F56                     	endif
  5826  000F56                     	if	0	;tblptru may be non-zero
  5827  000F56                     	endif
  5828  000F56  0008               	tblrd		*
  5829  000F58  CFF5 F089          	movff	tablat,printf@c
  5830  000F5C  0100               	movlb	0	; () banked
  5831  000F5E  5189               	movf	printf@c& (0+255),w,b
  5832                           
  5833                           ; Switch size 1, requested type "space"
  5834                           ; Number of cases is 4, Range of values is 0 to 120
  5835                           ; switch strategies available:
  5836                           ; Name         Instructions Cycles
  5837                           ; simple_byte           13     7 (average)
  5838                           ;	Chosen strategy is simple_byte
  5839  000F60  0A00               	xorlw	0	; case 0
  5840  000F62  B4D8               	btfsc	status,2,c
  5841  000F64  0012               	return	
  5842  000F66  0A64               	xorlw	100	; case 100
  5843  000F68  B4D8               	btfsc	status,2,c
  5844  000F6A  D007               	goto	l828
  5845  000F6C  0A0D               	xorlw	13	; case 105
  5846  000F6E  B4D8               	btfsc	status,2,c
  5847  000F70  D004               	goto	l828
  5848  000F72  0A11               	xorlw	17	; case 120
  5849  000F74  B4D8               	btfsc	status,2,c
  5850  000F76  D7E6               	goto	l5348
  5851  000F78  D134               	goto	l5450
  5852  000F7A                     l828:
  5853                           
  5854                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5855  000F7A  0100               	movlb	0	; () banked
  5856  000F7C  BF86               	btfsc	printf@flag& (0+255),7,b
  5857  000F7E  D019               	goto	l5364
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;doprnt.c: 1253: {
  5861                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5862  000F80  C081  FFD9         	movff	printf@ap,fsr2l
  5863  000F84  C082  FFDA         	movff	printf@ap+1,fsr2h
  5864  000F88  CFDE F084          	movff	postinc2,printf@val
  5865  000F8C  CFDD F085          	movff	postdec2,printf@val+1
  5866                           
  5867                           ; BSR set to: 0
  5868  000F90  0E02               	movlw	2
  5869  000F92  0100               	movlb	0	; () banked
  5870  000F94  2781               	addwf	printf@ap& (0+255),f,b
  5871  000F96  0E00               	movlw	0
  5872  000F98  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;doprnt.c: 1261: if((int)val < 0) {
  5876  000F9A  0100               	movlb	0	; () banked
  5877  000F9C  AF85               	btfss	(printf@val+1)& (0+255),7,b
  5878  000F9E  D053               	goto	l5398
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;doprnt.c: 1262: flag |= 0x03;
  5882  000FA0  0E03               	movlw	3
  5883  000FA2  0100               	movlb	0	; () banked
  5884  000FA4  1386               	iorwf	printf@flag& (0+255),f,b
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;doprnt.c: 1263: val = -val;
  5888  000FA6  0100               	movlb	0	; () banked
  5889  000FA8  6D84               	negf	printf@val& (0+255),b
  5890  000FAA  1F85               	comf	(printf@val+1)& (0+255),f,b
  5891  000FAC  B0D8               	btfsc	status,0,c
  5892  000FAE  2B85               	incf	(printf@val+1)& (0+255),f,b
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;doprnt.c: 1264: }
  5896                           ;doprnt.c: 1266: }
  5897  000FB0  D04A               	goto	l5398
  5898  000FB2                     l5364:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;doprnt.c: 1268: else
  5902                           ;doprnt.c: 1273: {
  5903                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5904  000FB2  C081  FFD9         	movff	printf@ap,fsr2l
  5905  000FB6  C082  FFDA         	movff	printf@ap+1,fsr2h
  5906  000FBA  CFDE F084          	movff	postinc2,printf@val
  5907  000FBE  CFDD F085          	movff	postdec2,printf@val+1
  5908                           
  5909                           ; BSR set to: 0
  5910  000FC2  0E02               	movlw	2
  5911  000FC4  0100               	movlb	0	; () banked
  5912  000FC6  2781               	addwf	printf@ap& (0+255),f,b
  5913  000FC8  0E00               	movlw	0
  5914  000FCA  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;doprnt.c: 1287: }
  5918                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5919  000FCC  D03C               	goto	l5398
  5920  000FCE                     l5368:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5924  000FCE  0E01               	movlw	1
  5925  000FD0  0100               	movlb	0	; () banked
  5926  000FD2  6F89               	movwf	printf@c& (0+255),b
  5927  000FD4                     l5370:
  5928                           
  5929                           ; BSR set to: 0
  5930  000FD4  0E05               	movlw	5
  5931  000FD6  0100               	movlb	0	; () banked
  5932  000FD8  1989               	xorwf	printf@c& (0+255),w,b
  5933  000FDA  B4D8               	btfsc	status,2,c
  5934  000FDC  D03D               	goto	l5400
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;doprnt.c: 1306: if(val < dpowers[c])
  5938                           
  5939                           ; BSR set to: 0
  5940                           
  5941                           ; BSR set to: 0
  5942  000FDE  0100               	movlb	0	; () banked
  5943  000FE0  5189               	movf	printf@c& (0+255),w,b
  5944  000FE2  0D02               	mullw	2
  5945  000FE4  0E3C               	movlw	low _dpowers
  5946  000FE6  24F3               	addwf	prodl,w,c
  5947  000FE8  6EF6               	movwf	tblptrl,c
  5948  000FEA  0EFE               	movlw	high _dpowers
  5949  000FEC  20F4               	addwfc	prodh,w,c
  5950  000FEE  6EF7               	movwf	tblptrh,c
  5951  000FF0                     	if	0	;There are less than 3 active tblptr bytes
  5952  000FF0                     	endif
  5953  000FF0  0009               	tblrd		*+
  5954  000FF2  50F5               	movf	tablat,w,c
  5955  000FF4  0100               	movlb	0	; () banked
  5956  000FF6  5D84               	subwf	printf@val& (0+255),w,b
  5957  000FF8  0009               	tblrd		*+
  5958  000FFA  50F5               	movf	tablat,w,c
  5959  000FFC  0100               	movlb	0	; () banked
  5960  000FFE  5985               	subwfb	(printf@val+1)& (0+255),w,b
  5961  001000  A0D8               	btfss	status,0,c
  5962  001002  D02A               	goto	l5400
  5963                           
  5964                           ; BSR set to: 0
  5965                           
  5966                           ; BSR set to: 0
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;doprnt.c: 1307: break;
  5970  001004  0100               	movlb	0	; () banked
  5971  001006  2B89               	incf	printf@c& (0+255),f,b
  5972  001008  D7E5               	goto	l5370
  5973  00100A                     l5382:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5977  00100A  0E01               	movlw	1
  5978  00100C  0100               	movlb	0	; () banked
  5979  00100E  6F89               	movwf	printf@c& (0+255),b
  5980  001010                     l5384:
  5981                           
  5982                           ; BSR set to: 0
  5983  001010  0E04               	movlw	4
  5984  001012  0100               	movlb	0	; () banked
  5985  001014  1989               	xorwf	printf@c& (0+255),w,b
  5986  001016  B4D8               	btfsc	status,2,c
  5987  001018  D01F               	goto	l5400
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5991                           
  5992                           ; BSR set to: 0
  5993                           
  5994                           ; BSR set to: 0
  5995  00101A  0100               	movlb	0	; () banked
  5996  00101C  5189               	movf	printf@c& (0+255),w,b
  5997  00101E  0D02               	mullw	2
  5998  001020  0E46               	movlw	low _hexpowers
  5999  001022  24F3               	addwf	prodl,w,c
  6000  001024  6EF6               	movwf	tblptrl,c
  6001  001026  0EFE               	movlw	high _hexpowers
  6002  001028  20F4               	addwfc	prodh,w,c
  6003  00102A  6EF7               	movwf	tblptrh,c
  6004  00102C                     	if	0	;There are less than 3 active tblptr bytes
  6005  00102C                     	endif
  6006  00102C  0009               	tblrd		*+
  6007  00102E  50F5               	movf	tablat,w,c
  6008  001030  0100               	movlb	0	; () banked
  6009  001032  5D84               	subwf	printf@val& (0+255),w,b
  6010  001034  0009               	tblrd		*+
  6011  001036  50F5               	movf	tablat,w,c
  6012  001038  0100               	movlb	0	; () banked
  6013  00103A  5985               	subwfb	(printf@val+1)& (0+255),w,b
  6014  00103C  A0D8               	btfss	status,0,c
  6015  00103E  D00C               	goto	l5400
  6016                           
  6017                           ; BSR set to: 0
  6018                           
  6019                           ; BSR set to: 0
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;doprnt.c: 1318: break;
  6023  001040  0100               	movlb	0	; () banked
  6024  001042  2B89               	incf	printf@c& (0+255),f,b
  6025  001044  D7E5               	goto	l5384
  6026  001046                     l5398:
  6027                           
  6028                           ; BSR set to: 0
  6029  001046  0100               	movlb	0	; () banked
  6030  001048  5186               	movf	printf@flag& (0+255),w,b
  6031  00104A  0B80               	andlw	128
  6032                           
  6033                           ; Switch size 1, requested type "space"
  6034                           ; Number of cases is 2, Range of values is 0 to 128
  6035                           ; switch strategies available:
  6036                           ; Name         Instructions Cycles
  6037                           ; simple_byte            7     4 (average)
  6038                           ;	Chosen strategy is simple_byte
  6039  00104C  0A00               	xorlw	0	; case 0
  6040  00104E  B4D8               	btfsc	status,2,c
  6041  001050  D7BE               	goto	l5368
  6042  001052  0A80               	xorlw	128	; case 128
  6043  001054  B4D8               	btfsc	status,2,c
  6044  001056  D7D9               	goto	l5382
  6045  001058                     l5400:
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6049  001058  0100               	movlb	0	; () banked
  6050  00105A  5187               	movf	printf@width& (0+255),w,b
  6051  00105C  0100               	movlb	0	; () banked
  6052  00105E  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6053  001060  B4D8               	btfsc	status,2,c
  6054  001062  D00A               	goto	l5406
  6055                           
  6056                           ; BSR set to: 0
  6057  001064  C086  F035         	movff	printf@flag,??_printf
  6058  001068  0E03               	movlw	3
  6059  00106A  1635               	andwf	??_printf,f,c
  6060  00106C  B4D8               	btfsc	status,2,c
  6061  00106E  D004               	goto	l5406
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;doprnt.c: 1346: width--;
  6065  001070  0100               	movlb	0	; () banked
  6066  001072  0787               	decf	printf@width& (0+255),f,b
  6067  001074  A0D8               	btfss	status,0,c
  6068  001076  0788               	decf	(printf@width+1)& (0+255),f,b
  6069  001078                     l5406:
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;doprnt.c: 1381: if(width > c)
  6073  001078  0E80               	movlw	128
  6074  00107A  0100               	movlb	0	; () banked
  6075  00107C  BF89               	btfsc	printf@c& (0+255),7,b
  6076  00107E  0E7F               	movlw	127
  6077  001080  6E35               	movwf	??_printf& (0+255),c
  6078  001082  0100               	movlb	0	; () banked
  6079  001084  5187               	movf	printf@width& (0+255),w,b
  6080  001086  0100               	movlb	0	; () banked
  6081  001088  5D89               	subwf	printf@c& (0+255),w,b
  6082  00108A  0100               	movlb	0	; () banked
  6083  00108C  5188               	movf	(printf@width+1)& (0+255),w,b
  6084  00108E  0A80               	xorlw	128
  6085  001090  5835               	subwfb	??_printf& (0+255),w,c
  6086  001092  B0D8               	btfsc	status,0,c
  6087  001094  D00B               	goto	l5410
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;doprnt.c: 1382: width -= c;
  6091  001096  0100               	movlb	0	; () banked
  6092  001098  5189               	movf	printf@c& (0+255),w,b
  6093  00109A  0100               	movlb	0	; () banked
  6094  00109C  5F87               	subwf	printf@width& (0+255),f,b
  6095  00109E  0E00               	movlw	0
  6096  0010A0  0100               	movlb	0	; () banked
  6097  0010A2  BF89               	btfsc	printf@c& (0+255),7,b
  6098  0010A4  0EFF               	movlw	255
  6099  0010A6  0100               	movlb	0	; () banked
  6100  0010A8  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  6101  0010AA  D005               	goto	l5412
  6102  0010AC                     l5410:
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;doprnt.c: 1383: else
  6106                           ;doprnt.c: 1384: width = 0;
  6107  0010AC  0E00               	movlw	0
  6108  0010AE  0100               	movlb	0	; () banked
  6109  0010B0  6F88               	movwf	(printf@width+1)& (0+255),b
  6110  0010B2  0E00               	movlw	0
  6111  0010B4  6F87               	movwf	printf@width& (0+255),b
  6112  0010B6                     l5412:
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;doprnt.c: 1387: if(flag & 0x04) {
  6116  0010B6  0100               	movlb	0	; () banked
  6117  0010B8  A586               	btfss	printf@flag& (0+255),2,b
  6118  0010BA  D017               	goto	l5424
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;doprnt.c: 1392: if(flag & 0x03)
  6122  0010BC  C086  F035         	movff	printf@flag,??_printf
  6123  0010C0  0E03               	movlw	3
  6124  0010C2  1635               	andwf	??_printf,f,c
  6125  0010C4  B4D8               	btfsc	status,2,c
  6126  0010C6  D003               	goto	l5418
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;doprnt.c: 1393: (putch('-') );
  6130  0010C8  0E2D               	movlw	45
  6131  0010CA  EC16  F016         	call	_putch
  6132  0010CE                     l5418:
  6133                           
  6134                           ;doprnt.c: 1415: if(width)
  6135  0010CE  0100               	movlb	0	; () banked
  6136  0010D0  5187               	movf	printf@width& (0+255),w,b
  6137  0010D2  0100               	movlb	0	; () banked
  6138  0010D4  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6139  0010D6  B4D8               	btfsc	status,2,c
  6140  0010D8  D024               	goto	l5434
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;doprnt.c: 1417: (putch('0') );
  6144                           
  6145                           ; BSR set to: 0
  6146                           
  6147                           ;doprnt.c: 1416: do
  6148  0010DA  0E30               	movlw	48
  6149  0010DC  EC16  F016         	call	_putch
  6150                           
  6151                           ;doprnt.c: 1418: while(--width);
  6152  0010E0  0100               	movlb	0	; () banked
  6153  0010E2  0787               	decf	printf@width& (0+255),f,b
  6154  0010E4  A0D8               	btfss	status,0,c
  6155  0010E6  0788               	decf	(printf@width+1)& (0+255),f,b
  6156  0010E8  D7F2               	goto	l5418
  6157  0010EA                     l5424:
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;doprnt.c: 1422: {
  6161                           ;doprnt.c: 1424: if(width
  6162                           ;doprnt.c: 1428: )
  6163  0010EA  0100               	movlb	0	; () banked
  6164  0010EC  5187               	movf	printf@width& (0+255),w,b
  6165  0010EE  0100               	movlb	0	; () banked
  6166  0010F0  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6167  0010F2  B4D8               	btfsc	status,2,c
  6168  0010F4  D00D               	goto	l5430
  6169  0010F6                     l5426:
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;doprnt.c: 1430: (putch(' ') );
  6173  0010F6  0E20               	movlw	32
  6174  0010F8  EC16  F016         	call	_putch
  6175                           
  6176                           ;doprnt.c: 1431: while(--width);
  6177  0010FC  0100               	movlb	0	; () banked
  6178  0010FE  0787               	decf	printf@width& (0+255),f,b
  6179  001100  A0D8               	btfss	status,0,c
  6180  001102  0788               	decf	(printf@width+1)& (0+255),f,b
  6181  001104  0100               	movlb	0	; () banked
  6182  001106  5187               	movf	printf@width& (0+255),w,b
  6183  001108  0100               	movlb	0	; () banked
  6184  00110A  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6185  00110C  A4D8               	btfss	status,2,c
  6186  00110E  D7F3               	goto	l5426
  6187  001110                     l5430:
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;doprnt.c: 1438: if(flag & 0x03)
  6191  001110  C086  F035         	movff	printf@flag,??_printf
  6192  001114  0E03               	movlw	3
  6193  001116  1635               	andwf	??_printf,f,c
  6194  001118  B4D8               	btfsc	status,2,c
  6195  00111A  D003               	goto	l5434
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;doprnt.c: 1439: (putch('-') );
  6199  00111C  0E2D               	movlw	45
  6200  00111E  EC16  F016         	call	_putch
  6201  001122                     l5434:
  6202                           
  6203                           ;doprnt.c: 1469: }
  6204                           ;doprnt.c: 1472: prec = c;
  6205  001122  C089  F083         	movff	printf@c,printf@prec
  6206                           
  6207                           ;doprnt.c: 1474: while(prec--) {
  6208  001126  D057               	goto	l5448
  6209  001128                     l5436:
  6210                           
  6211                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6212  001128  0100               	movlb	0	; () banked
  6213  00112A  5183               	movf	printf@prec& (0+255),w,b
  6214  00112C  0D02               	mullw	2
  6215  00112E  0E3C               	movlw	low _dpowers
  6216  001130  24F3               	addwf	prodl,w,c
  6217  001132  6EF6               	movwf	tblptrl,c
  6218  001134  0EFE               	movlw	high _dpowers
  6219  001136  20F4               	addwfc	prodh,w,c
  6220  001138  6EF7               	movwf	tblptrh,c
  6221  00113A                     	if	0	;There are less than 3 active tblptr bytes
  6222  00113A                     	endif
  6223  00113A  0009               	tblrd		*+
  6224  00113C  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6225  001140  000A               	tblrd		*-
  6226  001142  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6227  001146  C084  F021         	movff	printf@val,___lwdiv@dividend
  6228  00114A  C085  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6229  00114E  EC91  F014         	call	___lwdiv	;wreg free
  6230  001152  C021  F028         	movff	?___lwdiv,___lwmod@dividend
  6231  001156  C022  F029         	movff	?___lwdiv+1,___lwmod@dividend+1
  6232  00115A  0E00               	movlw	0
  6233  00115C  6E2B               	movwf	___lwmod@divisor+1,c
  6234  00115E  0E0A               	movlw	10
  6235  001160  6E2A               	movwf	___lwmod@divisor,c
  6236  001162  EC29  F015         	call	___lwmod	;wreg free
  6237  001166  5028               	movf	?___lwmod,w,c
  6238  001168  0F30               	addlw	48
  6239  00116A  0100               	movlb	0	; () banked
  6240  00116C  6F89               	movwf	printf@c& (0+255),b
  6241                           
  6242                           ;doprnt.c: 1491: break;
  6243  00116E  D02F               	goto	l5446
  6244  001170                     l5438:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;doprnt.c: 1499: {
  6248                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6249  001170  C084  F021         	movff	printf@val,___lwdiv@dividend
  6250  001174  C085  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6251  001178  0100               	movlb	0	; () banked
  6252  00117A  5183               	movf	printf@prec& (0+255),w,b
  6253  00117C  0D02               	mullw	2
  6254  00117E  0E46               	movlw	low _hexpowers
  6255  001180  24F3               	addwf	prodl,w,c
  6256  001182  6EF6               	movwf	tblptrl,c
  6257  001184  0EFE               	movlw	high _hexpowers
  6258  001186  20F4               	addwfc	prodh,w,c
  6259  001188  6EF7               	movwf	tblptrh,c
  6260  00118A                     	if	0	;There are less than 3 active tblptr bytes
  6261  00118A                     	endif
  6262  00118A  0009               	tblrd		*+
  6263  00118C  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6264  001190  000A               	tblrd		*-
  6265  001192  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6266  001196  EC91  F014         	call	___lwdiv	;wreg free
  6267  00119A  5021               	movf	?___lwdiv,w,c
  6268  00119C  0B0F               	andlw	15
  6269  00119E  0100               	movlb	0	; () banked
  6270  0011A0  6F80               	movwf	printf@idx& (0+255),b
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6274  0011A2  0100               	movlb	0	; () banked
  6275  0011A4  5180               	movf	printf@idx& (0+255),w,b
  6276  0011A6  0D01               	mullw	1
  6277  0011A8  0E80               	movlw	low STR_42
  6278  0011AA  24F3               	addwf	prodl,w,c
  6279  0011AC  6EF6               	movwf	tblptrl,c
  6280  0011AE  0EFE               	movlw	high STR_42
  6281  0011B0  20F4               	addwfc	prodh,w,c
  6282  0011B2  6EF7               	movwf	tblptrh,c
  6283  0011B4                     	if	0	;There are less than 3 active tblptr bytes
  6284  0011B4                     	endif
  6285  0011B4  0008               	tblrd		*
  6286  0011B6  CFF5 F089          	movff	tablat,printf@c
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;doprnt.c: 1523: }
  6290                           
  6291                           ;doprnt.c: 1508: }
  6292                           ;doprnt.c: 1510: break;
  6293  0011BA  D009               	goto	l5446
  6294  0011BC                     l5444:
  6295  0011BC  0100               	movlb	0	; () banked
  6296  0011BE  5186               	movf	printf@flag& (0+255),w,b
  6297  0011C0  0B80               	andlw	128
  6298                           
  6299                           ; Switch size 1, requested type "space"
  6300                           ; Number of cases is 2, Range of values is 0 to 128
  6301                           ; switch strategies available:
  6302                           ; Name         Instructions Cycles
  6303                           ; simple_byte            7     4 (average)
  6304                           ;	Chosen strategy is simple_byte
  6305  0011C2  0A00               	xorlw	0	; case 0
  6306  0011C4  B4D8               	btfsc	status,2,c
  6307  0011C6  D7B0               	goto	l5436
  6308  0011C8  0A80               	xorlw	128	; case 128
  6309  0011CA  B4D8               	btfsc	status,2,c
  6310  0011CC  D7D1               	goto	l5438
  6311  0011CE                     l5446:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;doprnt.c: 1524: (putch(c) );
  6315  0011CE  0100               	movlb	0	; () banked
  6316  0011D0  5189               	movf	printf@c& (0+255),w,b
  6317  0011D2  EC16  F016         	call	_putch
  6318  0011D6                     l5448:
  6319  0011D6  0100               	movlb	0	; () banked
  6320  0011D8  0783               	decf	printf@prec& (0+255),f,b
  6321  0011DA  0100               	movlb	0	; () banked
  6322  0011DC  2983               	incf	printf@prec& (0+255),w,b
  6323  0011DE  A4D8               	btfss	status,2,c
  6324  0011E0  D7ED               	goto	l5444
  6325  0011E2                     l5450:
  6326  0011E2  C02D  FFF6         	movff	printf@f,tblptrl
  6327  0011E6  C02E  FFF7         	movff	printf@f+1,tblptrh
  6328  0011EA  4A2D               	infsnz	printf@f,f,c
  6329  0011EC  2A2E               	incf	printf@f+1,f,c
  6330  0011EE                     	if	0	;tblptru may be non-zero
  6331  0011EE                     	endif
  6332  0011EE                     	if	0	;tblptru may be non-zero
  6333  0011EE                     	endif
  6334  0011EE  0008               	tblrd		*
  6335  0011F0  CFF5 F089          	movff	tablat,printf@c
  6336  0011F4  0100               	movlb	0	; () banked
  6337  0011F6  5189               	movf	printf@c& (0+255),w,b
  6338  0011F8  B4D8               	btfsc	status,2,c
  6339  0011FA  0012               	return	
  6340  0011FC  D643               	goto	l5324
  6341  0011FE                     __end_of_printf:
  6342                           	opt stack 0
  6343                           tblptru	equ	0xFF8
  6344                           tblptrh	equ	0xFF7
  6345                           tblptrl	equ	0xFF6
  6346                           tablat	equ	0xFF5
  6347                           prodh	equ	0xFF4
  6348                           prodl	equ	0xFF3
  6349                           intcon	equ	0xFF2
  6350                           intcon2	equ	0xFF1
  6351                           postinc0	equ	0xFEE
  6352                           wreg	equ	0xFE8
  6353                           indf2	equ	0xFDF
  6354                           postinc2	equ	0xFDE
  6355                           postdec2	equ	0xFDD
  6356                           fsr2h	equ	0xFDA
  6357                           fsr2l	equ	0xFD9
  6358                           status	equ	0xFD8
  6359                           
  6360 ;; *************** function _putch *****************
  6361 ;; Defined at:
  6362 ;;		line 27 in file "lcd.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;  data            1    wreg     unsigned char 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  data            1   34[COMRAM] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, status,0, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : 0/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;Total ram usage:        1 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    3
  6383 ;; This function calls:
  6384 ;;		_lcdNibble
  6385 ;; This function is called by:
  6386 ;;		_printf
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text15
  6391  002C2C                     __ptext15:
  6392                           	opt stack 0
  6393  002C2C                     _putch:
  6394                           	opt stack 26
  6395                           
  6396                           ;incstack = 0
  6397                           ;putch@data stored from wreg
  6398  002C2C  6E23               	movwf	putch@data,c
  6399                           
  6400                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6401  002C2E  848C               	bsf	3980,2,c	;volatile
  6402                           
  6403                           ;lcd.c: 29: lcdNibble(data);
  6404  002C30  5023               	movf	putch@data,w,c
  6405  002C32  EC66  F014         	call	_lcdNibble
  6406  002C36  0012               	return		;funcret
  6407  002C38                     __end_of_putch:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodh	equ	0xFF4
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           intcon2	equ	0xFF1
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _isdigit *****************
  6427 ;; Defined at:
  6428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  c               1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  c               1   34[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;		None               void
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        3 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    2
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_printf
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text16
  6457  002BB0                     __ptext16:
  6458                           	opt stack 0
  6459  002BB0                     _isdigit:
  6460                           	opt stack 27
  6461                           
  6462                           ;incstack = 0
  6463                           ;isdigit@c stored from wreg
  6464  002BB0  6E23               	movwf	isdigit@c,c
  6465  002BB2  0E00               	movlw	0
  6466  002BB4  6E22               	movwf	_isdigit$1451,c
  6467  002BB6  0E3A               	movlw	58
  6468  002BB8  6023               	cpfslt	isdigit@c,c
  6469  002BBA  D005               	goto	l5260
  6470  002BBC  0E2F               	movlw	47
  6471  002BBE  6423               	cpfsgt	isdigit@c,c
  6472  002BC0  D002               	goto	l5260
  6473  002BC2  0E01               	movlw	1
  6474  002BC4  6E22               	movwf	_isdigit$1451,c
  6475  002BC6                     l5260:
  6476  002BC6  C022  F021         	movff	_isdigit$1451,??_isdigit
  6477  002BCA  3021               	rrcf	??_isdigit,w,c
  6478  002BCC  0012               	return	
  6479  002BCE                     __end_of_isdigit:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           intcon2	equ	0xFF1
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           indf2	equ	0xFDF
  6492                           postinc2	equ	0xFDE
  6493                           postdec2	equ	0xFDD
  6494                           fsr2h	equ	0xFDA
  6495                           fsr2l	equ	0xFD9
  6496                           status	equ	0xFD8
  6497                           
  6498 ;; *************** function ___wmul *****************
  6499 ;; Defined at:
  6500 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  multiplier      2   32[COMRAM] unsigned int 
  6503 ;;  multiplicand    2   34[COMRAM] unsigned int 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  product         2   36[COMRAM] unsigned int 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  2   32[COMRAM] unsigned int 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0, prodl, prodh
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6515 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;Total ram usage:        6 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    2
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_printf
  6526 ;;		_timePassed
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text17
  6531  002B40                     __ptext17:
  6532                           	opt stack 0
  6533  002B40                     ___wmul:
  6534                           	opt stack 27
  6535                           
  6536                           ;incstack = 0
  6537  002B40  5021               	movf	___wmul@multiplier,w,c
  6538  002B42  0223               	mulwf	___wmul@multiplicand,c
  6539  002B44  CFF3 F025          	movff	prodl,___wmul@product
  6540  002B48  CFF4 F026          	movff	prodh,___wmul@product+1
  6541  002B4C  5021               	movf	___wmul@multiplier,w,c
  6542  002B4E  0224               	mulwf	___wmul@multiplicand+1,c
  6543  002B50  50F3               	movf	prodl,w,c
  6544  002B52  2626               	addwf	___wmul@product+1,f,c
  6545  002B54  5022               	movf	___wmul@multiplier+1,w,c
  6546  002B56  0223               	mulwf	___wmul@multiplicand,c
  6547  002B58  50F3               	movf	prodl,w,c
  6548  002B5A  2626               	addwf	___wmul@product+1,f,c
  6549  002B5C  C025  F021         	movff	___wmul@product,?___wmul
  6550  002B60  C026  F022         	movff	___wmul@product+1,?___wmul+1
  6551  002B64  0012               	return	
  6552  002B66                     __end_of___wmul:
  6553                           	opt stack 0
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           intcon	equ	0xFF2
  6561                           intcon2	equ	0xFF1
  6562                           postinc0	equ	0xFEE
  6563                           wreg	equ	0xFE8
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function ___lwmod *****************
  6572 ;; Defined at:
  6573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  dividend        2   39[COMRAM] unsigned int 
  6576 ;;  divisor         2   41[COMRAM] unsigned int 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  counter         1   43[COMRAM] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  2   39[COMRAM] unsigned int 
  6581 ;; Registers used:
  6582 ;;		wreg, status,2, status,0
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;Total ram usage:        5 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    2
  6595 ;; This function calls:
  6596 ;;		Nothing
  6597 ;; This function is called by:
  6598 ;;		_printf
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text18
  6603  002A52                     __ptext18:
  6604                           	opt stack 0
  6605  002A52                     ___lwmod:
  6606                           	opt stack 27
  6607                           
  6608                           ;incstack = 0
  6609  002A52  502A               	movf	___lwmod@divisor,w,c
  6610  002A54  102B               	iorwf	___lwmod@divisor+1,w,c
  6611  002A56  B4D8               	btfsc	status,2,c
  6612  002A58  D018               	goto	l1283
  6613  002A5A  0E01               	movlw	1
  6614  002A5C  6E2C               	movwf	___lwmod@counter,c
  6615  002A5E  D004               	goto	l5298
  6616  002A60                     l5296:
  6617  002A60  90D8               	bcf	status,0,c
  6618  002A62  362A               	rlcf	___lwmod@divisor,f,c
  6619  002A64  362B               	rlcf	___lwmod@divisor+1,f,c
  6620  002A66  2A2C               	incf	___lwmod@counter,f,c
  6621  002A68                     l5298:
  6622  002A68  AE2B               	btfss	___lwmod@divisor+1,7,c
  6623  002A6A  D7FA               	goto	l5296
  6624  002A6C                     l5300:
  6625  002A6C  502A               	movf	___lwmod@divisor,w,c
  6626  002A6E  5C28               	subwf	___lwmod@dividend,w,c
  6627  002A70  502B               	movf	___lwmod@divisor+1,w,c
  6628  002A72  5829               	subwfb	___lwmod@dividend+1,w,c
  6629  002A74  A0D8               	btfss	status,0,c
  6630  002A76  D004               	goto	l5304
  6631  002A78  502A               	movf	___lwmod@divisor,w,c
  6632  002A7A  5E28               	subwf	___lwmod@dividend,f,c
  6633  002A7C  502B               	movf	___lwmod@divisor+1,w,c
  6634  002A7E  5A29               	subwfb	___lwmod@dividend+1,f,c
  6635  002A80                     l5304:
  6636  002A80  90D8               	bcf	status,0,c
  6637  002A82  322B               	rrcf	___lwmod@divisor+1,f,c
  6638  002A84  322A               	rrcf	___lwmod@divisor,f,c
  6639  002A86  2E2C               	decfsz	___lwmod@counter,f,c
  6640  002A88  D7F1               	goto	l5300
  6641  002A8A                     l1283:
  6642  002A8A  C028  F028         	movff	___lwmod@dividend,?___lwmod
  6643  002A8E  C029  F029         	movff	___lwmod@dividend+1,?___lwmod+1
  6644  002A92  0012               	return		;funcret
  6645  002A94                     __end_of___lwmod:
  6646                           	opt stack 0
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           intcon	equ	0xFF2
  6654                           intcon2	equ	0xFF1
  6655                           postinc0	equ	0xFEE
  6656                           wreg	equ	0xFE8
  6657                           indf2	equ	0xFDF
  6658                           postinc2	equ	0xFDE
  6659                           postdec2	equ	0xFDD
  6660                           fsr2h	equ	0xFDA
  6661                           fsr2l	equ	0xFD9
  6662                           status	equ	0xFD8
  6663                           
  6664 ;; *************** function ___lwdiv *****************
  6665 ;; Defined at:
  6666 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;  dividend        2   32[COMRAM] unsigned int 
  6669 ;;  divisor         2   34[COMRAM] unsigned int 
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;  quotient        2   37[COMRAM] unsigned int 
  6672 ;;  counter         1   36[COMRAM] unsigned char 
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  2   32[COMRAM] unsigned int 
  6675 ;; Registers used:
  6676 ;;		wreg, status,2, status,0
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6682 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;Total ram usage:        7 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    2
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		_printf
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text19
  6697  002922                     __ptext19:
  6698                           	opt stack 0
  6699  002922                     ___lwdiv:
  6700                           	opt stack 27
  6701                           
  6702                           ;incstack = 0
  6703  002922  0E00               	movlw	0
  6704  002924  6E27               	movwf	___lwdiv@quotient+1,c
  6705  002926  0E00               	movlw	0
  6706  002928  6E26               	movwf	___lwdiv@quotient,c
  6707  00292A  5023               	movf	___lwdiv@divisor,w,c
  6708  00292C  1024               	iorwf	___lwdiv@divisor+1,w,c
  6709  00292E  B4D8               	btfsc	status,2,c
  6710  002930  D01C               	goto	l1273
  6711  002932  0E01               	movlw	1
  6712  002934  6E25               	movwf	___lwdiv@counter,c
  6713  002936  D004               	goto	l5278
  6714  002938                     l5276:
  6715  002938  90D8               	bcf	status,0,c
  6716  00293A  3623               	rlcf	___lwdiv@divisor,f,c
  6717  00293C  3624               	rlcf	___lwdiv@divisor+1,f,c
  6718  00293E  2A25               	incf	___lwdiv@counter,f,c
  6719  002940                     l5278:
  6720  002940  AE24               	btfss	___lwdiv@divisor+1,7,c
  6721  002942  D7FA               	goto	l5276
  6722  002944                     l5280:
  6723  002944  90D8               	bcf	status,0,c
  6724  002946  3626               	rlcf	___lwdiv@quotient,f,c
  6725  002948  3627               	rlcf	___lwdiv@quotient+1,f,c
  6726  00294A  5023               	movf	___lwdiv@divisor,w,c
  6727  00294C  5C21               	subwf	___lwdiv@dividend,w,c
  6728  00294E  5024               	movf	___lwdiv@divisor+1,w,c
  6729  002950  5822               	subwfb	___lwdiv@dividend+1,w,c
  6730  002952  A0D8               	btfss	status,0,c
  6731  002954  D005               	goto	l5288
  6732  002956  5023               	movf	___lwdiv@divisor,w,c
  6733  002958  5E21               	subwf	___lwdiv@dividend,f,c
  6734  00295A  5024               	movf	___lwdiv@divisor+1,w,c
  6735  00295C  5A22               	subwfb	___lwdiv@dividend+1,f,c
  6736  00295E  8026               	bsf	___lwdiv@quotient,0,c
  6737  002960                     l5288:
  6738  002960  90D8               	bcf	status,0,c
  6739  002962  3224               	rrcf	___lwdiv@divisor+1,f,c
  6740  002964  3223               	rrcf	___lwdiv@divisor,f,c
  6741  002966  2E25               	decfsz	___lwdiv@counter,f,c
  6742  002968  D7ED               	goto	l5280
  6743  00296A                     l1273:
  6744  00296A  C026  F021         	movff	___lwdiv@quotient,?___lwdiv
  6745  00296E  C027  F022         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6746  002972  0012               	return		;funcret
  6747  002974                     __end_of___lwdiv:
  6748                           	opt stack 0
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon2	equ	0xFF1
  6757                           postinc0	equ	0xFEE
  6758                           wreg	equ	0xFE8
  6759                           indf2	equ	0xFDF
  6760                           postinc2	equ	0xFDE
  6761                           postdec2	equ	0xFDD
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766 ;; *************** function _lcdInst *****************
  6767 ;; Defined at:
  6768 ;;		line 22 in file "lcd.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  data            1    wreg     unsigned char 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  data            1   34[COMRAM] unsigned char 
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  1    wreg      void 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2, status,0, cstack
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;Total ram usage:        1 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    3
  6789 ;; This function calls:
  6790 ;;		_lcdNibble
  6791 ;; This function is called by:
  6792 ;;		_main
  6793 ;;		_initLCD
  6794 ;;		_homescreen
  6795 ;;		_displayLog
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text20
  6800  002C38                     __ptext20:
  6801                           	opt stack 0
  6802  002C38                     _lcdInst:
  6803                           	opt stack 27
  6804                           
  6805                           ;incstack = 0
  6806                           ;lcdInst@data stored from wreg
  6807  002C38  6E23               	movwf	lcdInst@data,c
  6808                           
  6809                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6810  002C3A  948C               	bcf	3980,2,c	;volatile
  6811                           
  6812                           ;lcd.c: 24: lcdNibble(data);
  6813  002C3C  5023               	movf	lcdInst@data,w,c
  6814  002C3E  EC66  F014         	call	_lcdNibble
  6815  002C42  0012               	return		;funcret
  6816  002C44                     __end_of_lcdInst:
  6817                           	opt stack 0
  6818                           tblptru	equ	0xFF8
  6819                           tblptrh	equ	0xFF7
  6820                           tblptrl	equ	0xFF6
  6821                           tablat	equ	0xFF5
  6822                           prodh	equ	0xFF4
  6823                           prodl	equ	0xFF3
  6824                           intcon	equ	0xFF2
  6825                           intcon2	equ	0xFF1
  6826                           postinc0	equ	0xFEE
  6827                           wreg	equ	0xFE8
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           postdec2	equ	0xFDD
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _lcdNibble *****************
  6836 ;; Defined at:
  6837 ;;		line 32 in file "lcd.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  data            1    wreg     unsigned char 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  data            1   33[COMRAM] unsigned char 
  6842 ;;  temp            1   32[COMRAM] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;Total ram usage:        2 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    2
  6859 ;; This function calls:
  6860 ;;		Nothing
  6861 ;; This function is called by:
  6862 ;;		_lcdInst
  6863 ;;		_putch
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text21
  6868  0028CC                     __ptext21:
  6869                           	opt stack 0
  6870  0028CC                     _lcdNibble:
  6871                           	opt stack 26
  6872                           
  6873                           ;incstack = 0
  6874                           ;lcdNibble@data stored from wreg
  6875  0028CC  6E22               	movwf	lcdNibble@data,c
  6876                           
  6877                           ;lcd.c: 34: char temp = data & 0xF0;
  6878  0028CE  5022               	movf	lcdNibble@data,w,c
  6879  0028D0  0BF0               	andlw	240
  6880  0028D2  6E21               	movwf	lcdNibble@temp,c
  6881                           
  6882                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6883  0028D4  508C               	movf	3980,w,c	;volatile
  6884  0028D6  0B0F               	andlw	15
  6885  0028D8  6E8C               	movwf	3980,c	;volatile
  6886                           
  6887                           ;lcd.c: 36: LATD = temp | LATD;
  6888  0028DA  5021               	movf	lcdNibble@temp,w,c
  6889  0028DC  108C               	iorwf	3980,w,c	;volatile
  6890  0028DE  6E8C               	movwf	3980,c	;volatile
  6891                           
  6892                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6893  0028E0  968C               	bcf	3980,3,c	;volatile
  6894                           
  6895                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6896  0028E2  0E42               	movlw	66
  6897  0028E4                     u8157:
  6898  0028E4  2EE8               	decfsz	wreg,f,c
  6899  0028E6  D7FE               	bra	u8157
  6900  0028E8  D000               	nop2	
  6901                           
  6902                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6903  0028EA  868C               	bsf	3980,3,c	;volatile
  6904                           
  6905                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6906  0028EC  0E42               	movlw	66
  6907  0028EE                     u8167:
  6908  0028EE  2EE8               	decfsz	wreg,f,c
  6909  0028F0  D7FE               	bra	u8167
  6910  0028F2  D000               	nop2	
  6911                           
  6912                           ;lcd.c: 43: data = data << 4;
  6913  0028F4  3822               	swapf	lcdNibble@data,w,c
  6914  0028F6  0BF0               	andlw	240
  6915  0028F8  6E22               	movwf	lcdNibble@data,c
  6916                           
  6917                           ;lcd.c: 45: temp = data & 0xF0;
  6918  0028FA  5022               	movf	lcdNibble@data,w,c
  6919  0028FC  0BF0               	andlw	240
  6920  0028FE  6E21               	movwf	lcdNibble@temp,c
  6921                           
  6922                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6923  002900  508C               	movf	3980,w,c	;volatile
  6924  002902  0B0F               	andlw	15
  6925  002904  6E8C               	movwf	3980,c	;volatile
  6926                           
  6927                           ;lcd.c: 47: LATD = temp | LATD;
  6928  002906  5021               	movf	lcdNibble@temp,w,c
  6929  002908  108C               	iorwf	3980,w,c	;volatile
  6930  00290A  6E8C               	movwf	3980,c	;volatile
  6931                           
  6932                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6933  00290C  968C               	bcf	3980,3,c	;volatile
  6934                           
  6935                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6936  00290E  0E42               	movlw	66
  6937  002910                     u8177:
  6938  002910  2EE8               	decfsz	wreg,f,c
  6939  002912  D7FE               	bra	u8177
  6940  002914  D000               	nop2	
  6941                           
  6942                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6943  002916  868C               	bsf	3980,3,c	;volatile
  6944                           
  6945                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6946  002918  0E42               	movlw	66
  6947  00291A                     u8187:
  6948  00291A  2EE8               	decfsz	wreg,f,c
  6949  00291C  D7FE               	bra	u8187
  6950  00291E  D000               	nop2	
  6951  002920  0012               	return		;funcret
  6952  002922                     __end_of_lcdNibble:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           intcon	equ	0xFF2
  6961                           intcon2	equ	0xFF1
  6962                           postinc0	equ	0xFEE
  6963                           wreg	equ	0xFE8
  6964                           indf2	equ	0xFDF
  6965                           postinc2	equ	0xFDE
  6966                           postdec2	equ	0xFDD
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971 ;; *************** function _keycheck *****************
  6972 ;; Defined at:
  6973 ;;		line 12 in file "interface.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;		None
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;		None
  6978 ;; Return value:  Size  Location     Type
  6979 ;;                  1    wreg      void 
  6980 ;; Registers used:
  6981 ;;		wreg, status,2, status,0
  6982 ;; Tracked objects:
  6983 ;;		On entry : 0/0
  6984 ;;		On exit  : 0/0
  6985 ;;		Unchanged: 0/0
  6986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;Total ram usage:        0 bytes
  6992 ;; Hardware stack levels used:    1
  6993 ;; Hardware stack levels required when called:    2
  6994 ;; This function calls:
  6995 ;;		Nothing
  6996 ;; This function is called by:
  6997 ;;		_main
  6998 ;;		_displayLog
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text22
  7003  002BE4                     __ptext22:
  7004                           	opt stack 0
  7005  002BE4                     _keycheck:
  7006                           	opt stack 28
  7007  002BE4                     l686:
  7008  002BE4  A281               	btfss	3969,1,c	;volatile
  7009  002BE6  D7FE               	goto	l686
  7010                           
  7011                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  7012  002BE8  3881               	swapf	3969,w,c	;volatile
  7013  002BEA  0B0F               	andlw	15
  7014  002BEC  0B0F               	andlw	15
  7015  002BEE  0100               	movlb	0	; () banked
  7016  002BF0  6FC2               	movwf	_keypress& (0+255),b	;volatile
  7017  002BF2                     l689:
  7018  002BF2  B281               	btfsc	3969,1,c	;volatile
  7019  002BF4  D7FE               	goto	l689
  7020                           
  7021                           ;interface.c: 16: __nop();
  7022  002BF6  F000               	nop	
  7023                           
  7024                           ;interface.c: 17: return;
  7025  002BF8  0012               	return		;funcret
  7026  002BFA                     __end_of_keycheck:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           intcon2	equ	0xFF1
  7036                           postinc0	equ	0xFEE
  7037                           wreg	equ	0xFE8
  7038                           indf2	equ	0xFDF
  7039                           postinc2	equ	0xFDE
  7040                           postdec2	equ	0xFDD
  7041                           fsr2h	equ	0xFDA
  7042                           fsr2l	equ	0xFD9
  7043                           status	equ	0xFD8
  7044                           
  7045 ;; *************** function _calibrateWheels *****************
  7046 ;; Defined at:
  7047 ;;		line 31 in file "logic.c"
  7048 ;; Parameters:    Size  Location     Type
  7049 ;;		None
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  i               2   37[COMRAM] int 
  7052 ;;  prev            2   35[COMRAM] int 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      void 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;Total ram usage:        4 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    3
  7069 ;; This function calls:
  7070 ;;		_readADC
  7071 ;;		_startTMR1
  7072 ;;		_updateS1
  7073 ;;		_updateS3
  7074 ;; This function is called by:
  7075 ;;		_main
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text23
  7080  00210C                     __ptext23:
  7081                           	opt stack 0
  7082  00210C                     _calibrateWheels:
  7083                           	opt stack 27
  7084                           
  7085                           ;logic.c: 32: TMR1ON = 0;
  7086                           
  7087                           ;incstack = 0
  7088  00210C  90CD               	bcf	4045,0,c	;volatile
  7089                           
  7090                           ;logic.c: 33: int i = 1;
  7091  00210E  0E00               	movlw	0
  7092  002110  6E27               	movwf	calibrateWheels@i+1,c
  7093  002112  0E01               	movlw	1
  7094  002114  6E26               	movwf	calibrateWheels@i,c
  7095  002116                     l4034:
  7096                           
  7097                           ;logic.c: 36: if (i < 20){updateS1(1);}
  7098  002116  BE27               	btfsc	calibrateWheels@i+1,7,c
  7099  002118  D006               	goto	l4036
  7100  00211A  5027               	movf	calibrateWheels@i+1,w,c
  7101  00211C  E10B               	bnz	l4038
  7102  00211E  0E14               	movlw	20
  7103  002120  5C26               	subwf	calibrateWheels@i,w,c
  7104  002122  B0D8               	btfsc	status,0,c
  7105  002124  D007               	goto	l4038
  7106  002126                     l4036:
  7107  002126  0E00               	movlw	0
  7108  002128  6E22               	movwf	updateS1@mode+1,c
  7109  00212A  0E01               	movlw	1
  7110  00212C  6E21               	movwf	updateS1@mode,c
  7111  00212E  ECBD  F00A         	call	_updateS1	;wreg free
  7112  002132  D031               	goto	l4052
  7113  002134                     l4038:
  7114                           
  7115                           ;logic.c: 37: else if(i<(20+40)){updateS1(2);}
  7116  002134  BE27               	btfsc	calibrateWheels@i+1,7,c
  7117  002136  D006               	goto	l4040
  7118  002138  5027               	movf	calibrateWheels@i+1,w,c
  7119  00213A  E10B               	bnz	l4042
  7120  00213C  0E3C               	movlw	60
  7121  00213E  5C26               	subwf	calibrateWheels@i,w,c
  7122  002140  B0D8               	btfsc	status,0,c
  7123  002142  D007               	goto	l4042
  7124  002144                     l4040:
  7125  002144  0E00               	movlw	0
  7126  002146  6E22               	movwf	updateS1@mode+1,c
  7127  002148  0E02               	movlw	2
  7128  00214A  6E21               	movwf	updateS1@mode,c
  7129  00214C  ECBD  F00A         	call	_updateS1	;wreg free
  7130  002150  D022               	goto	l4052
  7131  002152                     l4042:
  7132                           
  7133                           ;logic.c: 38: else if(i<(20+40+80)){updateS1(1);}
  7134  002152  BE27               	btfsc	calibrateWheels@i+1,7,c
  7135  002154  D006               	goto	l4044
  7136  002156  5027               	movf	calibrateWheels@i+1,w,c
  7137  002158  E10B               	bnz	l4046
  7138  00215A  0E8C               	movlw	140
  7139  00215C  5C26               	subwf	calibrateWheels@i,w,c
  7140  00215E  B0D8               	btfsc	status,0,c
  7141  002160  D007               	goto	l4046
  7142  002162                     l4044:
  7143  002162  0E00               	movlw	0
  7144  002164  6E22               	movwf	updateS1@mode+1,c
  7145  002166  0E01               	movlw	1
  7146  002168  6E21               	movwf	updateS1@mode,c
  7147  00216A  ECBD  F00A         	call	_updateS1	;wreg free
  7148  00216E  D013               	goto	l4052
  7149  002170                     l4046:
  7150                           
  7151                           ;logic.c: 39: else if(i<(20+40+80+100)){updateS1(2);}
  7152  002170  BE27               	btfsc	calibrateWheels@i+1,7,c
  7153  002172  D006               	goto	l4048
  7154  002174  5027               	movf	calibrateWheels@i+1,w,c
  7155  002176  E10B               	bnz	l4050
  7156  002178  0EF0               	movlw	240
  7157  00217A  5C26               	subwf	calibrateWheels@i,w,c
  7158  00217C  B0D8               	btfsc	status,0,c
  7159  00217E  D007               	goto	l4050
  7160  002180                     l4048:
  7161  002180  0E00               	movlw	0
  7162  002182  6E22               	movwf	updateS1@mode+1,c
  7163  002184  0E02               	movlw	2
  7164  002186  6E21               	movwf	updateS1@mode,c
  7165  002188  ECBD  F00A         	call	_updateS1	;wreg free
  7166  00218C  D004               	goto	l4052
  7167  00218E                     l4050:
  7168                           
  7169                           ;logic.c: 40: else{i=1;}
  7170  00218E  0E00               	movlw	0
  7171  002190  6E27               	movwf	calibrateWheels@i+1,c
  7172  002192  0E01               	movlw	1
  7173  002194  6E26               	movwf	calibrateWheels@i,c
  7174  002196                     l4052:
  7175                           
  7176                           ;logic.c: 42: i++;
  7177  002196  4A26               	infsnz	calibrateWheels@i,f,c
  7178  002198  2A27               	incf	calibrateWheels@i+1,f,c
  7179                           
  7180                           ;logic.c: 43: if (i==1){prev = 0;}
  7181  00219A  0426               	decf	calibrateWheels@i,w,c
  7182  00219C  1027               	iorwf	calibrateWheels@i+1,w,c
  7183  00219E  A4D8               	btfss	status,2,c
  7184  0021A0  D005               	goto	l781
  7185  0021A2  0E00               	movlw	0
  7186  0021A4  6E25               	movwf	calibrateWheels@prev+1,c
  7187  0021A6  0E00               	movlw	0
  7188  0021A8  6E24               	movwf	calibrateWheels@prev,c
  7189  0021AA  D004               	goto	l4058
  7190  0021AC                     l781:
  7191                           
  7192                           ;logic.c: 44: else{prev = ADRES;}
  7193  0021AC  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7194  0021B0  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7195  0021B4                     l4058:
  7196                           
  7197                           ;logic.c: 45: readADC(1);
  7198  0021B4  0E01               	movlw	1
  7199  0021B6  ECC6  F015         	call	_readADC
  7200                           
  7201                           ;logic.c: 46: }while(ADRES>prev || ADRES<0x3aa);
  7202  0021BA  50C3               	movf	4035,w,c	;volatile
  7203  0021BC  5C24               	subwf	calibrateWheels@prev,w,c
  7204  0021BE  50C4               	movf	4036,w,c	;volatile
  7205  0021C0  5825               	subwfb	calibrateWheels@prev+1,w,c
  7206  0021C2  A0D8               	btfss	status,0,c
  7207  0021C4  D7A8               	goto	l4034
  7208  0021C6  0EAA               	movlw	170
  7209  0021C8  5CC3               	subwf	4035,w,c	;volatile
  7210  0021CA  0E03               	movlw	3
  7211  0021CC  58C4               	subwfb	4036,w,c	;volatile
  7212  0021CE  A0D8               	btfss	status,0,c
  7213  0021D0  D7A2               	goto	l4034
  7214  0021D2                     l4064:
  7215                           
  7216                           ;logic.c: 49: if (i < 20){updateS3(1);}
  7217  0021D2  BE27               	btfsc	calibrateWheels@i+1,7,c
  7218  0021D4  D006               	goto	l4066
  7219  0021D6  5027               	movf	calibrateWheels@i+1,w,c
  7220  0021D8  E10B               	bnz	l4068
  7221  0021DA  0E14               	movlw	20
  7222  0021DC  5C26               	subwf	calibrateWheels@i,w,c
  7223  0021DE  B0D8               	btfsc	status,0,c
  7224  0021E0  D007               	goto	l4068
  7225  0021E2                     l4066:
  7226  0021E2  0E00               	movlw	0
  7227  0021E4  6E22               	movwf	updateS3@mode+1,c
  7228  0021E6  0E01               	movlw	1
  7229  0021E8  6E21               	movwf	updateS3@mode,c
  7230  0021EA  EC92  F00E         	call	_updateS3	;wreg free
  7231  0021EE  D031               	goto	l4082
  7232  0021F0                     l4068:
  7233                           
  7234                           ;logic.c: 50: else if(i<(20+40)){updateS3(2);}
  7235  0021F0  BE27               	btfsc	calibrateWheels@i+1,7,c
  7236  0021F2  D006               	goto	l4070
  7237  0021F4  5027               	movf	calibrateWheels@i+1,w,c
  7238  0021F6  E10B               	bnz	l4072
  7239  0021F8  0E3C               	movlw	60
  7240  0021FA  5C26               	subwf	calibrateWheels@i,w,c
  7241  0021FC  B0D8               	btfsc	status,0,c
  7242  0021FE  D007               	goto	l4072
  7243  002200                     l4070:
  7244  002200  0E00               	movlw	0
  7245  002202  6E22               	movwf	updateS3@mode+1,c
  7246  002204  0E02               	movlw	2
  7247  002206  6E21               	movwf	updateS3@mode,c
  7248  002208  EC92  F00E         	call	_updateS3	;wreg free
  7249  00220C  D022               	goto	l4082
  7250  00220E                     l4072:
  7251                           
  7252                           ;logic.c: 51: else if(i<(20+40+80)){updateS3(1);}
  7253  00220E  BE27               	btfsc	calibrateWheels@i+1,7,c
  7254  002210  D006               	goto	l4074
  7255  002212  5027               	movf	calibrateWheels@i+1,w,c
  7256  002214  E10B               	bnz	l4076
  7257  002216  0E8C               	movlw	140
  7258  002218  5C26               	subwf	calibrateWheels@i,w,c
  7259  00221A  B0D8               	btfsc	status,0,c
  7260  00221C  D007               	goto	l4076
  7261  00221E                     l4074:
  7262  00221E  0E00               	movlw	0
  7263  002220  6E22               	movwf	updateS3@mode+1,c
  7264  002222  0E01               	movlw	1
  7265  002224  6E21               	movwf	updateS3@mode,c
  7266  002226  EC92  F00E         	call	_updateS3	;wreg free
  7267  00222A  D013               	goto	l4082
  7268  00222C                     l4076:
  7269                           
  7270                           ;logic.c: 52: else if(i<(20+40+80+100)){updateS3(2);}
  7271  00222C  BE27               	btfsc	calibrateWheels@i+1,7,c
  7272  00222E  D006               	goto	l4078
  7273  002230  5027               	movf	calibrateWheels@i+1,w,c
  7274  002232  E10B               	bnz	l4080
  7275  002234  0EF0               	movlw	240
  7276  002236  5C26               	subwf	calibrateWheels@i,w,c
  7277  002238  B0D8               	btfsc	status,0,c
  7278  00223A  D007               	goto	l4080
  7279  00223C                     l4078:
  7280  00223C  0E00               	movlw	0
  7281  00223E  6E22               	movwf	updateS3@mode+1,c
  7282  002240  0E02               	movlw	2
  7283  002242  6E21               	movwf	updateS3@mode,c
  7284  002244  EC92  F00E         	call	_updateS3	;wreg free
  7285  002248  D004               	goto	l4082
  7286  00224A                     l4080:
  7287                           
  7288                           ;logic.c: 53: else{i=1;}
  7289  00224A  0E00               	movlw	0
  7290  00224C  6E27               	movwf	calibrateWheels@i+1,c
  7291  00224E  0E01               	movlw	1
  7292  002250  6E26               	movwf	calibrateWheels@i,c
  7293  002252                     l4082:
  7294                           
  7295                           ;logic.c: 55: i++;
  7296  002252  4A26               	infsnz	calibrateWheels@i,f,c
  7297  002254  2A27               	incf	calibrateWheels@i+1,f,c
  7298                           
  7299                           ;logic.c: 56: if (i==1){prev = 0;}
  7300  002256  0426               	decf	calibrateWheels@i,w,c
  7301  002258  1027               	iorwf	calibrateWheels@i+1,w,c
  7302  00225A  A4D8               	btfss	status,2,c
  7303  00225C  D005               	goto	l793
  7304  00225E  0E00               	movlw	0
  7305  002260  6E25               	movwf	calibrateWheels@prev+1,c
  7306  002262  0E00               	movlw	0
  7307  002264  6E24               	movwf	calibrateWheels@prev,c
  7308  002266  D004               	goto	l4088
  7309  002268                     l793:
  7310                           
  7311                           ;logic.c: 57: else{prev = ADRES;}
  7312  002268  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7313  00226C  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7314  002270                     l4088:
  7315                           
  7316                           ;logic.c: 58: readADC(5);
  7317  002270  0E05               	movlw	5
  7318  002272  ECC6  F015         	call	_readADC
  7319                           
  7320                           ;logic.c: 59: }while(ADRES>prev || ADRES<0x3aa);
  7321  002276  50C3               	movf	4035,w,c	;volatile
  7322  002278  5C24               	subwf	calibrateWheels@prev,w,c
  7323  00227A  50C4               	movf	4036,w,c	;volatile
  7324  00227C  5825               	subwfb	calibrateWheels@prev+1,w,c
  7325  00227E  A0D8               	btfss	status,0,c
  7326  002280  D7A8               	goto	l4064
  7327  002282  0EAA               	movlw	170
  7328  002284  5CC3               	subwf	4035,w,c	;volatile
  7329  002286  0E03               	movlw	3
  7330  002288  58C4               	subwfb	4036,w,c	;volatile
  7331  00228A  A0D8               	btfss	status,0,c
  7332  00228C  D7A2               	goto	l4064
  7333                           
  7334                           ;logic.c: 60: startTMR1();
  7335  00228E  EC06  F016         	call	_startTMR1	;wreg free
  7336  002292  0012               	return		;funcret
  7337  002294                     __end_of_calibrateWheels:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           intcon2	equ	0xFF1
  7347                           postinc0	equ	0xFEE
  7348                           wreg	equ	0xFE8
  7349                           indf2	equ	0xFDF
  7350                           postinc2	equ	0xFDE
  7351                           postdec2	equ	0xFDD
  7352                           fsr2h	equ	0xFDA
  7353                           fsr2l	equ	0xFD9
  7354                           status	equ	0xFD8
  7355                           
  7356 ;; *************** function _updateS3 *****************
  7357 ;; Defined at:
  7358 ;;		line 191 in file "motors.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  mode            2   32[COMRAM] int 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;		None
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      void 
  7365 ;; Registers used:
  7366 ;;		wreg, status,2, status,0
  7367 ;; Tracked objects:
  7368 ;;		On entry : 0/0
  7369 ;;		On exit  : 0/0
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;Total ram usage:        3 bytes
  7377 ;; Hardware stack levels used:    1
  7378 ;; Hardware stack levels required when called:    2
  7379 ;; This function calls:
  7380 ;;		Nothing
  7381 ;; This function is called by:
  7382 ;;		_main
  7383 ;;		_calibrateWheels
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text24
  7388  001D24                     __ptext24:
  7389                           	opt stack 0
  7390  001D24                     _updateS3:
  7391                           	opt stack 28
  7392                           
  7393                           ;motors.c: 192: _delay((unsigned long)((5)*(32000000/4000.0)));
  7394                           
  7395                           ;incstack = 0
  7396  001D24  0E34               	movlw	52
  7397  001D26  6E23               	movwf	??_updateS3& (0+255),c
  7398  001D28  0EF2               	movlw	242
  7399  001D2A                     u8197:
  7400  001D2A  2EE8               	decfsz	wreg,f,c
  7401  001D2C  D7FE               	bra	u8197
  7402  001D2E  2E23               	decfsz	??_updateS3& (0+255),f,c
  7403  001D30  D7FC               	bra	u8197
  7404                           
  7405                           ;motors.c: 194: if(mode == 0){
  7406  001D32  5021               	movf	updateS3@mode,w,c
  7407  001D34  1022               	iorwf	updateS3@mode+1,w,c
  7408  001D36  A4D8               	btfss	status,2,c
  7409  001D38  D005               	goto	l3598
  7410                           
  7411                           ;motors.c: 195: LATEbits.LATE2 = 0;
  7412  001D3A  948D               	bcf	3981,2,c	;volatile
  7413                           
  7414                           ;motors.c: 196: LATEbits.LATE1 = 0;
  7415  001D3C  928D               	bcf	3981,1,c	;volatile
  7416                           
  7417                           ;motors.c: 197: LATAbits.LATA4 = 0;
  7418  001D3E  9889               	bcf	3977,4,c	;volatile
  7419                           
  7420                           ;motors.c: 198: LATDbits.LATD0 = 0;
  7421  001D40  908C               	bcf	3980,0,c	;volatile
  7422                           
  7423                           ;motors.c: 199: }
  7424  001D42  0012               	return	
  7425  001D44                     l3598:
  7426                           
  7427                           ;motors.c: 200: else if(mode == 4){
  7428  001D44  0E04               	movlw	4
  7429  001D46  1821               	xorwf	updateS3@mode,w,c
  7430  001D48  1022               	iorwf	updateS3@mode+1,w,c
  7431  001D4A  B4D8               	btfsc	status,2,c
  7432  001D4C  0012               	return	
  7433                           
  7434                           ;motors.c: 203: else if(mode == 3){
  7435                           
  7436                           ;motors.c: 202: }
  7437  001D4E  0E03               	movlw	3
  7438  001D50  1821               	xorwf	updateS3@mode,w,c
  7439  001D52  1022               	iorwf	updateS3@mode+1,w,c
  7440  001D54  A4D8               	btfss	status,2,c
  7441  001D56  D042               	goto	l3626
  7442                           
  7443                           ;motors.c: 204: t3++;
  7444  001D58  4A41               	infsnz	_t3,f,c
  7445  001D5A  2A42               	incf	_t3+1,f,c
  7446                           
  7447                           ;motors.c: 205: if (t3>8) {t3=1;}
  7448  001D5C  BE42               	btfsc	_t3+1,7,c
  7449  001D5E  D00A               	goto	l3610
  7450  001D60  5042               	movf	_t3+1,w,c
  7451  001D62  E104               	bnz	u3910
  7452  001D64  0E09               	movlw	9
  7453  001D66  5C41               	subwf	_t3,w,c
  7454  001D68  A0D8               	btfss	status,0,c
  7455  001D6A  D004               	goto	l3610
  7456  001D6C                     u3910:
  7457  001D6C  0E00               	movlw	0
  7458  001D6E  6E42               	movwf	_t3+1,c
  7459  001D70  0E01               	movlw	1
  7460  001D72  6E41               	movwf	_t3,c
  7461  001D74                     l3610:
  7462                           
  7463                           ;motors.c: 206: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  7464  001D74  0441               	decf	_t3,w,c
  7465  001D76  1042               	iorwf	_t3+1,w,c
  7466  001D78  B4D8               	btfsc	status,2,c
  7467  001D7A  D005               	goto	l605
  7468  001D7C  0E08               	movlw	8
  7469  001D7E  1841               	xorwf	_t3,w,c
  7470  001D80  1042               	iorwf	_t3+1,w,c
  7471  001D82  A4D8               	btfss	status,2,c
  7472  001D84  D002               	goto	l603
  7473  001D86                     l605:
  7474  001D86  848D               	bsf	3981,2,c	;volatile
  7475  001D88  D001               	goto	l3614
  7476  001D8A                     l603:
  7477                           
  7478                           ;motors.c: 207: else{LATEbits.LATE2 = 0;}
  7479  001D8A  948D               	bcf	3981,2,c	;volatile
  7480  001D8C                     l3614:
  7481                           
  7482                           ;motors.c: 208: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  7483  001D8C  0E02               	movlw	2
  7484  001D8E  1841               	xorwf	_t3,w,c
  7485  001D90  1042               	iorwf	_t3+1,w,c
  7486  001D92  B4D8               	btfsc	status,2,c
  7487  001D94  D005               	goto	l609
  7488  001D96  0E07               	movlw	7
  7489  001D98  1841               	xorwf	_t3,w,c
  7490  001D9A  1042               	iorwf	_t3+1,w,c
  7491  001D9C  A4D8               	btfss	status,2,c
  7492  001D9E  D002               	goto	l607
  7493  001DA0                     l609:
  7494  001DA0  828D               	bsf	3981,1,c	;volatile
  7495  001DA2  D001               	goto	l3618
  7496  001DA4                     l607:
  7497                           
  7498                           ;motors.c: 209: else{LATEbits.LATE1 = 0;}
  7499  001DA4  928D               	bcf	3981,1,c	;volatile
  7500  001DA6                     l3618:
  7501                           
  7502                           ;motors.c: 210: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  7503  001DA6  0E03               	movlw	3
  7504  001DA8  1841               	xorwf	_t3,w,c
  7505  001DAA  1042               	iorwf	_t3+1,w,c
  7506  001DAC  B4D8               	btfsc	status,2,c
  7507  001DAE  D005               	goto	l613
  7508  001DB0  0E06               	movlw	6
  7509  001DB2  1841               	xorwf	_t3,w,c
  7510  001DB4  1042               	iorwf	_t3+1,w,c
  7511  001DB6  A4D8               	btfss	status,2,c
  7512  001DB8  D002               	goto	l611
  7513  001DBA                     l613:
  7514  001DBA  8889               	bsf	3977,4,c	;volatile
  7515  001DBC  D001               	goto	l3622
  7516  001DBE                     l611:
  7517                           
  7518                           ;motors.c: 211: else{LATAbits.LATA4 = 0;}
  7519  001DBE  9889               	bcf	3977,4,c	;volatile
  7520  001DC0                     l3622:
  7521                           
  7522                           ;motors.c: 212: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  7523  001DC0  0E04               	movlw	4
  7524  001DC2  1841               	xorwf	_t3,w,c
  7525  001DC4  1042               	iorwf	_t3+1,w,c
  7526  001DC6  B4D8               	btfsc	status,2,c
  7527  001DC8  D005               	goto	l617
  7528  001DCA  0E05               	movlw	5
  7529  001DCC  1841               	xorwf	_t3,w,c
  7530  001DCE  1042               	iorwf	_t3+1,w,c
  7531  001DD0  A4D8               	btfss	status,2,c
  7532  001DD2  D002               	goto	l615
  7533  001DD4                     l617:
  7534  001DD4  808C               	bsf	3980,0,c	;volatile
  7535  001DD6  0012               	return	
  7536  001DD8                     l615:
  7537                           
  7538                           ;motors.c: 213: else{LATDbits.LATD0 = 0;}
  7539  001DD8  908C               	bcf	3980,0,c	;volatile
  7540                           
  7541                           ;motors.c: 214: }
  7542  001DDA  0012               	return	
  7543  001DDC                     l3626:
  7544                           
  7545                           ;motors.c: 215: else if(mode == 5){
  7546  001DDC  0E05               	movlw	5
  7547  001DDE  1821               	xorwf	updateS3@mode,w,c
  7548  001DE0  1022               	iorwf	updateS3@mode+1,w,c
  7549  001DE2  A4D8               	btfss	status,2,c
  7550  001DE4  D042               	goto	l3650
  7551                           
  7552                           ;motors.c: 216: t3++;
  7553  001DE6  4A41               	infsnz	_t3,f,c
  7554  001DE8  2A42               	incf	_t3+1,f,c
  7555                           
  7556                           ;motors.c: 217: if (t3>8) {t3=1;}
  7557  001DEA  BE42               	btfsc	_t3+1,7,c
  7558  001DEC  D00A               	goto	l3634
  7559  001DEE  5042               	movf	_t3+1,w,c
  7560  001DF0  E104               	bnz	u4010
  7561  001DF2  0E09               	movlw	9
  7562  001DF4  5C41               	subwf	_t3,w,c
  7563  001DF6  A0D8               	btfss	status,0,c
  7564  001DF8  D004               	goto	l3634
  7565  001DFA                     u4010:
  7566  001DFA  0E00               	movlw	0
  7567  001DFC  6E42               	movwf	_t3+1,c
  7568  001DFE  0E01               	movlw	1
  7569  001E00  6E41               	movwf	_t3,c
  7570  001E02                     l3634:
  7571                           
  7572                           ;motors.c: 218: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
  7573  001E02  0441               	decf	_t3,w,c
  7574  001E04  1042               	iorwf	_t3+1,w,c
  7575  001E06  B4D8               	btfsc	status,2,c
  7576  001E08  D005               	goto	l624
  7577  001E0A  0E08               	movlw	8
  7578  001E0C  1841               	xorwf	_t3,w,c
  7579  001E0E  1042               	iorwf	_t3+1,w,c
  7580  001E10  A4D8               	btfss	status,2,c
  7581  001E12  D002               	goto	l622
  7582  001E14                     l624:
  7583  001E14  8889               	bsf	3977,4,c	;volatile
  7584  001E16  D001               	goto	l3638
  7585  001E18                     l622:
  7586                           
  7587                           ;motors.c: 219: else{LATAbits.LATA4 = 0;}
  7588  001E18  9889               	bcf	3977,4,c	;volatile
  7589  001E1A                     l3638:
  7590                           
  7591                           ;motors.c: 220: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
  7592  001E1A  0E02               	movlw	2
  7593  001E1C  1841               	xorwf	_t3,w,c
  7594  001E1E  1042               	iorwf	_t3+1,w,c
  7595  001E20  B4D8               	btfsc	status,2,c
  7596  001E22  D005               	goto	l628
  7597  001E24  0E07               	movlw	7
  7598  001E26  1841               	xorwf	_t3,w,c
  7599  001E28  1042               	iorwf	_t3+1,w,c
  7600  001E2A  A4D8               	btfss	status,2,c
  7601  001E2C  D002               	goto	l626
  7602  001E2E                     l628:
  7603  001E2E  808C               	bsf	3980,0,c	;volatile
  7604  001E30  D001               	goto	l3642
  7605  001E32                     l626:
  7606                           
  7607                           ;motors.c: 221: else{LATDbits.LATD0 = 0;}
  7608  001E32  908C               	bcf	3980,0,c	;volatile
  7609  001E34                     l3642:
  7610                           
  7611                           ;motors.c: 222: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
  7612  001E34  0E03               	movlw	3
  7613  001E36  1841               	xorwf	_t3,w,c
  7614  001E38  1042               	iorwf	_t3+1,w,c
  7615  001E3A  B4D8               	btfsc	status,2,c
  7616  001E3C  D005               	goto	l632
  7617  001E3E  0E06               	movlw	6
  7618  001E40  1841               	xorwf	_t3,w,c
  7619  001E42  1042               	iorwf	_t3+1,w,c
  7620  001E44  A4D8               	btfss	status,2,c
  7621  001E46  D002               	goto	l630
  7622  001E48                     l632:
  7623  001E48  848D               	bsf	3981,2,c	;volatile
  7624  001E4A  D001               	goto	l3646
  7625  001E4C                     l630:
  7626                           
  7627                           ;motors.c: 223: else{LATEbits.LATE2 = 0;}
  7628  001E4C  948D               	bcf	3981,2,c	;volatile
  7629  001E4E                     l3646:
  7630                           
  7631                           ;motors.c: 224: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
  7632  001E4E  0E04               	movlw	4
  7633  001E50  1841               	xorwf	_t3,w,c
  7634  001E52  1042               	iorwf	_t3+1,w,c
  7635  001E54  B4D8               	btfsc	status,2,c
  7636  001E56  D005               	goto	l636
  7637  001E58  0E05               	movlw	5
  7638  001E5A  1841               	xorwf	_t3,w,c
  7639  001E5C  1042               	iorwf	_t3+1,w,c
  7640  001E5E  A4D8               	btfss	status,2,c
  7641  001E60  D002               	goto	l634
  7642  001E62                     l636:
  7643  001E62  828D               	bsf	3981,1,c	;volatile
  7644  001E64  0012               	return	
  7645  001E66                     l634:
  7646                           
  7647                           ;motors.c: 225: else{LATEbits.LATE1 = 0;}
  7648  001E66  928D               	bcf	3981,1,c	;volatile
  7649                           
  7650                           ;motors.c: 226: }
  7651  001E68  0012               	return	
  7652  001E6A                     l3650:
  7653                           
  7654                           ;motors.c: 227: else{
  7655                           ;motors.c: 228: if(mode == 1){
  7656  001E6A  0421               	decf	updateS3@mode,w,c
  7657  001E6C  1022               	iorwf	updateS3@mode+1,w,c
  7658  001E6E  A4D8               	btfss	status,2,c
  7659  001E70  D013               	goto	l3658
  7660                           
  7661                           ;motors.c: 229: s3 ++;
  7662  001E72  0100               	movlb	0	; () banked
  7663  001E74  4BBE               	infsnz	_s3& (0+255),f,b
  7664  001E76  2BBF               	incf	(_s3+1)& (0+255),f,b
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;motors.c: 230: if (s3>4) {s3=1;}
  7668  001E78  0100               	movlb	0	; () banked
  7669  001E7A  BFBF               	btfsc	(_s3+1)& (0+255),7,b
  7670  001E7C  D025               	goto	l3666
  7671  001E7E  0100               	movlb	0	; () banked
  7672  001E80  51BF               	movf	(_s3+1)& (0+255),w,b
  7673  001E82  E105               	bnz	u4110
  7674  001E84  0E05               	movlw	5
  7675  001E86  0100               	movlb	0	; () banked
  7676  001E88  5DBE               	subwf	_s3& (0+255),w,b
  7677  001E8A  A0D8               	btfss	status,0,c
  7678  001E8C  D01D               	goto	l3666
  7679  001E8E                     u4110:
  7680                           
  7681                           ; BSR set to: 0
  7682  001E8E  0E00               	movlw	0
  7683  001E90  0100               	movlb	0	; () banked
  7684  001E92  6FBF               	movwf	(_s3+1)& (0+255),b
  7685  001E94  0E01               	movlw	1
  7686  001E96  D017               	goto	L14
  7687  001E98                     l3658:
  7688                           
  7689                           ;motors.c: 232: else if(mode == 2){
  7690  001E98  0E02               	movlw	2
  7691  001E9A  1821               	xorwf	updateS3@mode,w,c
  7692  001E9C  1022               	iorwf	updateS3@mode+1,w,c
  7693  001E9E  A4D8               	btfss	status,2,c
  7694  001EA0  D013               	goto	l3666
  7695                           
  7696                           ;motors.c: 233: s3 --;
  7697  001EA2  0100               	movlb	0	; () banked
  7698  001EA4  07BE               	decf	_s3& (0+255),f,b
  7699  001EA6  A0D8               	btfss	status,0,c
  7700  001EA8  07BF               	decf	(_s3+1)& (0+255),f,b
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;motors.c: 234: if (s3<1) {s3=4;}
  7704  001EAA  0100               	movlb	0	; () banked
  7705  001EAC  BFBF               	btfsc	(_s3+1)& (0+255),7,b
  7706  001EAE  D007               	goto	l3664
  7707  001EB0  0100               	movlb	0	; () banked
  7708  001EB2  51BF               	movf	(_s3+1)& (0+255),w,b
  7709  001EB4  E109               	bnz	l3666
  7710  001EB6  0100               	movlb	0	; () banked
  7711  001EB8  05BE               	decf	_s3& (0+255),w,b
  7712  001EBA  B0D8               	btfsc	status,0,c
  7713  001EBC  D005               	goto	l3666
  7714  001EBE                     l3664:
  7715                           
  7716                           ; BSR set to: 0
  7717  001EBE  0E00               	movlw	0
  7718  001EC0  0100               	movlb	0	; () banked
  7719  001EC2  6FBF               	movwf	(_s3+1)& (0+255),b
  7720  001EC4  0E04               	movlw	4
  7721  001EC6                     L14:
  7722  001EC6  6FBE               	movwf	_s3& (0+255),b
  7723  001EC8                     l3666:
  7724                           
  7725                           ;motors.c: 235: }
  7726                           ;motors.c: 236: if (s3 == 1){LATEbits.LATE2 = 1;}
  7727  001EC8  0100               	movlb	0	; () banked
  7728  001ECA  05BE               	decf	_s3& (0+255),w,b
  7729  001ECC  0100               	movlb	0	; () banked
  7730  001ECE  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7731  001ED0  A4D8               	btfss	status,2,c
  7732  001ED2  D002               	goto	l644
  7733                           
  7734                           ; BSR set to: 0
  7735  001ED4  848D               	bsf	3981,2,c	;volatile
  7736  001ED6  D001               	goto	l3670
  7737  001ED8                     l644:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;motors.c: 237: else{LATEbits.LATE2 = 0;}
  7741  001ED8  948D               	bcf	3981,2,c	;volatile
  7742  001EDA                     l3670:
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;motors.c: 238: if (s3 == 2){LATEbits.LATE1 = 1;}
  7746  001EDA  0E02               	movlw	2
  7747  001EDC  0100               	movlb	0	; () banked
  7748  001EDE  19BE               	xorwf	_s3& (0+255),w,b
  7749  001EE0  0100               	movlb	0	; () banked
  7750  001EE2  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7751  001EE4  A4D8               	btfss	status,2,c
  7752  001EE6  D002               	goto	l646
  7753                           
  7754                           ; BSR set to: 0
  7755  001EE8  828D               	bsf	3981,1,c	;volatile
  7756  001EEA  D001               	goto	l3674
  7757  001EEC                     l646:
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;motors.c: 239: else{LATEbits.LATE1 = 0;}
  7761  001EEC  928D               	bcf	3981,1,c	;volatile
  7762  001EEE                     l3674:
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;motors.c: 240: if (s3 == 3){LATAbits.LATA4 = 1;}
  7766  001EEE  0E03               	movlw	3
  7767  001EF0  0100               	movlb	0	; () banked
  7768  001EF2  19BE               	xorwf	_s3& (0+255),w,b
  7769  001EF4  0100               	movlb	0	; () banked
  7770  001EF6  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7771  001EF8  A4D8               	btfss	status,2,c
  7772  001EFA  D002               	goto	l648
  7773                           
  7774                           ; BSR set to: 0
  7775  001EFC  8889               	bsf	3977,4,c	;volatile
  7776  001EFE  D001               	goto	l3678
  7777  001F00                     l648:
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;motors.c: 241: else{LATAbits.LATA4 = 0;}
  7781  001F00  9889               	bcf	3977,4,c	;volatile
  7782  001F02                     l3678:
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;motors.c: 242: if (s3 == 4){LATDbits.LATD0 = 1;}
  7786  001F02  0E04               	movlw	4
  7787  001F04  0100               	movlb	0	; () banked
  7788  001F06  19BE               	xorwf	_s3& (0+255),w,b
  7789  001F08  0100               	movlb	0	; () banked
  7790  001F0A  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7791  001F0C  A4D8               	btfss	status,2,c
  7792  001F0E  D002               	goto	l650
  7793                           
  7794                           ; BSR set to: 0
  7795  001F10  808C               	bsf	3980,0,c	;volatile
  7796  001F12  0012               	return	
  7797  001F14                     l650:
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;motors.c: 243: else{LATDbits.LATD0 = 0;}
  7801  001F14  908C               	bcf	3980,0,c	;volatile
  7802                           
  7803                           ; BSR set to: 0
  7804                           
  7805                           ; BSR set to: 0
  7806                           
  7807                           ; BSR set to: 0
  7808                           
  7809                           ; BSR set to: 0
  7810  001F16  0012               	return	
  7811  001F18                     __end_of_updateS3:
  7812                           	opt stack 0
  7813                           tblptru	equ	0xFF8
  7814                           tblptrh	equ	0xFF7
  7815                           tblptrl	equ	0xFF6
  7816                           tablat	equ	0xFF5
  7817                           prodh	equ	0xFF4
  7818                           prodl	equ	0xFF3
  7819                           intcon	equ	0xFF2
  7820                           intcon2	equ	0xFF1
  7821                           postinc0	equ	0xFEE
  7822                           wreg	equ	0xFE8
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function _updateS1 *****************
  7831 ;; Defined at:
  7832 ;;		line 75 in file "motors.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  mode            2   32[COMRAM] int 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;		None
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      void 
  7839 ;; Registers used:
  7840 ;;		wreg, status,2, status,0
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;Total ram usage:        3 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    2
  7853 ;; This function calls:
  7854 ;;		Nothing
  7855 ;; This function is called by:
  7856 ;;		_main
  7857 ;;		_calibrateWheels
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text25
  7862  00157A                     __ptext25:
  7863                           	opt stack 0
  7864  00157A                     _updateS1:
  7865                           	opt stack 28
  7866                           
  7867                           ;motors.c: 76: _delay((unsigned long)((5)*(32000000/4000.0)));
  7868                           
  7869                           ;incstack = 0
  7870  00157A  0E34               	movlw	52
  7871  00157C  6E23               	movwf	??_updateS1& (0+255),c
  7872  00157E  0EF2               	movlw	242
  7873  001580                     u8207:
  7874  001580  2EE8               	decfsz	wreg,f,c
  7875  001582  D7FE               	bra	u8207
  7876  001584  2E23               	decfsz	??_updateS1& (0+255),f,c
  7877  001586  D7FC               	bra	u8207
  7878                           
  7879                           ;motors.c: 78: if(mode == 0){
  7880  001588  5021               	movf	updateS1@mode,w,c
  7881  00158A  1022               	iorwf	updateS1@mode+1,w,c
  7882  00158C  A4D8               	btfss	status,2,c
  7883  00158E  D005               	goto	l3474
  7884                           
  7885                           ;motors.c: 79: LATDbits.LATD1 = 0;
  7886  001590  928C               	bcf	3980,1,c	;volatile
  7887                           
  7888                           ;motors.c: 80: LATBbits.LATB3 = 0;
  7889  001592  968A               	bcf	3978,3,c	;volatile
  7890                           
  7891                           ;motors.c: 81: LATBbits.LATB2 = 0;
  7892  001594  948A               	bcf	3978,2,c	;volatile
  7893                           
  7894                           ;motors.c: 82: LATBbits.LATB0 = 0;
  7895  001596  908A               	bcf	3978,0,c	;volatile
  7896                           
  7897                           ;motors.c: 83: }
  7898  001598  0012               	return	
  7899  00159A                     l3474:
  7900                           
  7901                           ;motors.c: 84: else if(mode == 3){
  7902  00159A  0E03               	movlw	3
  7903  00159C  1821               	xorwf	updateS1@mode,w,c
  7904  00159E  1022               	iorwf	updateS1@mode+1,w,c
  7905  0015A0  A4D8               	btfss	status,2,c
  7906  0015A2  D049               	goto	l3500
  7907                           
  7908                           ;motors.c: 85: t++;
  7909  0015A4  4A45               	infsnz	_t,f,c
  7910  0015A6  2A46               	incf	_t+1,f,c
  7911                           
  7912                           ;motors.c: 86: if (t>8) {t=1;}
  7913  0015A8  BE46               	btfsc	_t+1,7,c
  7914  0015AA  D00A               	goto	l3482
  7915  0015AC  5046               	movf	_t+1,w,c
  7916  0015AE  E104               	bnz	u3500
  7917  0015B0  0E09               	movlw	9
  7918  0015B2  5C45               	subwf	_t,w,c
  7919  0015B4  A0D8               	btfss	status,0,c
  7920  0015B6  D004               	goto	l3482
  7921  0015B8                     u3500:
  7922  0015B8  0E00               	movlw	0
  7923  0015BA  6E46               	movwf	_t+1,c
  7924  0015BC  0E01               	movlw	1
  7925  0015BE  6E45               	movwf	_t,c
  7926  0015C0                     l3482:
  7927                           
  7928                           ;motors.c: 87: _delay((unsigned long)((5)*(32000000/4000.0)));
  7929  0015C0  0E34               	movlw	52
  7930  0015C2  6E23               	movwf	??_updateS1& (0+255),c
  7931  0015C4  0EF2               	movlw	242
  7932  0015C6                     u8217:
  7933  0015C6  2EE8               	decfsz	wreg,f,c
  7934  0015C8  D7FE               	bra	u8217
  7935  0015CA  2E23               	decfsz	??_updateS1& (0+255),f,c
  7936  0015CC  D7FC               	bra	u8217
  7937                           
  7938                           ;motors.c: 88: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  7939  0015CE  0445               	decf	_t,w,c
  7940  0015D0  1046               	iorwf	_t+1,w,c
  7941  0015D2  B4D8               	btfsc	status,2,c
  7942  0015D4  D005               	goto	l492
  7943  0015D6  0E08               	movlw	8
  7944  0015D8  1845               	xorwf	_t,w,c
  7945  0015DA  1046               	iorwf	_t+1,w,c
  7946  0015DC  A4D8               	btfss	status,2,c
  7947  0015DE  D002               	goto	l490
  7948  0015E0                     l492:
  7949  0015E0  828C               	bsf	3980,1,c	;volatile
  7950  0015E2  D001               	goto	l3488
  7951  0015E4                     l490:
  7952                           
  7953                           ;motors.c: 89: else{LATDbits.LATD1 = 0;}
  7954  0015E4  928C               	bcf	3980,1,c	;volatile
  7955  0015E6                     l3488:
  7956                           
  7957                           ;motors.c: 90: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  7958  0015E6  0E02               	movlw	2
  7959  0015E8  1845               	xorwf	_t,w,c
  7960  0015EA  1046               	iorwf	_t+1,w,c
  7961  0015EC  B4D8               	btfsc	status,2,c
  7962  0015EE  D005               	goto	l496
  7963  0015F0  0E07               	movlw	7
  7964  0015F2  1845               	xorwf	_t,w,c
  7965  0015F4  1046               	iorwf	_t+1,w,c
  7966  0015F6  A4D8               	btfss	status,2,c
  7967  0015F8  D002               	goto	l494
  7968  0015FA                     l496:
  7969  0015FA  868A               	bsf	3978,3,c	;volatile
  7970  0015FC  D001               	goto	l3492
  7971  0015FE                     l494:
  7972                           
  7973                           ;motors.c: 91: else{LATBbits.LATB3 = 0;}
  7974  0015FE  968A               	bcf	3978,3,c	;volatile
  7975  001600                     l3492:
  7976                           
  7977                           ;motors.c: 92: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  7978  001600  0E03               	movlw	3
  7979  001602  1845               	xorwf	_t,w,c
  7980  001604  1046               	iorwf	_t+1,w,c
  7981  001606  B4D8               	btfsc	status,2,c
  7982  001608  D005               	goto	l500
  7983  00160A  0E06               	movlw	6
  7984  00160C  1845               	xorwf	_t,w,c
  7985  00160E  1046               	iorwf	_t+1,w,c
  7986  001610  A4D8               	btfss	status,2,c
  7987  001612  D002               	goto	l498
  7988  001614                     l500:
  7989  001614  848A               	bsf	3978,2,c	;volatile
  7990  001616  D001               	goto	l3496
  7991  001618                     l498:
  7992                           
  7993                           ;motors.c: 93: else{LATBbits.LATB2 = 0;}
  7994  001618  948A               	bcf	3978,2,c	;volatile
  7995  00161A                     l3496:
  7996                           
  7997                           ;motors.c: 94: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  7998  00161A  0E04               	movlw	4
  7999  00161C  1845               	xorwf	_t,w,c
  8000  00161E  1046               	iorwf	_t+1,w,c
  8001  001620  B4D8               	btfsc	status,2,c
  8002  001622  D005               	goto	l504
  8003  001624  0E05               	movlw	5
  8004  001626  1845               	xorwf	_t,w,c
  8005  001628  1046               	iorwf	_t+1,w,c
  8006  00162A  A4D8               	btfss	status,2,c
  8007  00162C  D002               	goto	l502
  8008  00162E                     l504:
  8009  00162E  808A               	bsf	3978,0,c	;volatile
  8010  001630  0012               	return	
  8011  001632                     l502:
  8012                           
  8013                           ;motors.c: 95: else{LATBbits.LATB0 = 0;}
  8014  001632  908A               	bcf	3978,0,c	;volatile
  8015                           
  8016                           ;motors.c: 96: }
  8017  001634  0012               	return	
  8018  001636                     l3500:
  8019                           
  8020                           ;motors.c: 97: else if(mode == 5){
  8021  001636  0E05               	movlw	5
  8022  001638  1821               	xorwf	updateS1@mode,w,c
  8023  00163A  1022               	iorwf	updateS1@mode+1,w,c
  8024  00163C  A4D8               	btfss	status,2,c
  8025  00163E  D049               	goto	l3526
  8026                           
  8027                           ;motors.c: 98: t++;
  8028  001640  4A45               	infsnz	_t,f,c
  8029  001642  2A46               	incf	_t+1,f,c
  8030                           
  8031                           ;motors.c: 99: if (t>8) {t=1;}
  8032  001644  BE46               	btfsc	_t+1,7,c
  8033  001646  D00A               	goto	l3508
  8034  001648  5046               	movf	_t+1,w,c
  8035  00164A  E104               	bnz	u3600
  8036  00164C  0E09               	movlw	9
  8037  00164E  5C45               	subwf	_t,w,c
  8038  001650  A0D8               	btfss	status,0,c
  8039  001652  D004               	goto	l3508
  8040  001654                     u3600:
  8041  001654  0E00               	movlw	0
  8042  001656  6E46               	movwf	_t+1,c
  8043  001658  0E01               	movlw	1
  8044  00165A  6E45               	movwf	_t,c
  8045  00165C                     l3508:
  8046                           
  8047                           ;motors.c: 100: _delay((unsigned long)((5)*(32000000/4000.0)));
  8048  00165C  0E34               	movlw	52
  8049  00165E  6E23               	movwf	??_updateS1& (0+255),c
  8050  001660  0EF2               	movlw	242
  8051  001662                     u8227:
  8052  001662  2EE8               	decfsz	wreg,f,c
  8053  001664  D7FE               	bra	u8227
  8054  001666  2E23               	decfsz	??_updateS1& (0+255),f,c
  8055  001668  D7FC               	bra	u8227
  8056                           
  8057                           ;motors.c: 101: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
  8058  00166A  0445               	decf	_t,w,c
  8059  00166C  1046               	iorwf	_t+1,w,c
  8060  00166E  B4D8               	btfsc	status,2,c
  8061  001670  D005               	goto	l511
  8062  001672  0E08               	movlw	8
  8063  001674  1845               	xorwf	_t,w,c
  8064  001676  1046               	iorwf	_t+1,w,c
  8065  001678  A4D8               	btfss	status,2,c
  8066  00167A  D002               	goto	l509
  8067  00167C                     l511:
  8068  00167C  848A               	bsf	3978,2,c	;volatile
  8069  00167E  D001               	goto	l3514
  8070  001680                     l509:
  8071                           
  8072                           ;motors.c: 102: else{LATBbits.LATB2 = 0;}
  8073  001680  948A               	bcf	3978,2,c	;volatile
  8074  001682                     l3514:
  8075                           
  8076                           ;motors.c: 103: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
  8077  001682  0E02               	movlw	2
  8078  001684  1845               	xorwf	_t,w,c
  8079  001686  1046               	iorwf	_t+1,w,c
  8080  001688  B4D8               	btfsc	status,2,c
  8081  00168A  D005               	goto	l515
  8082  00168C  0E07               	movlw	7
  8083  00168E  1845               	xorwf	_t,w,c
  8084  001690  1046               	iorwf	_t+1,w,c
  8085  001692  A4D8               	btfss	status,2,c
  8086  001694  D002               	goto	l513
  8087  001696                     l515:
  8088  001696  808A               	bsf	3978,0,c	;volatile
  8089  001698  D001               	goto	l3518
  8090  00169A                     l513:
  8091                           
  8092                           ;motors.c: 104: else{LATBbits.LATB0 = 0;}
  8093  00169A  908A               	bcf	3978,0,c	;volatile
  8094  00169C                     l3518:
  8095                           
  8096                           ;motors.c: 105: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
  8097  00169C  0E03               	movlw	3
  8098  00169E  1845               	xorwf	_t,w,c
  8099  0016A0  1046               	iorwf	_t+1,w,c
  8100  0016A2  B4D8               	btfsc	status,2,c
  8101  0016A4  D005               	goto	l519
  8102  0016A6  0E06               	movlw	6
  8103  0016A8  1845               	xorwf	_t,w,c
  8104  0016AA  1046               	iorwf	_t+1,w,c
  8105  0016AC  A4D8               	btfss	status,2,c
  8106  0016AE  D002               	goto	l517
  8107  0016B0                     l519:
  8108  0016B0  828C               	bsf	3980,1,c	;volatile
  8109  0016B2  D001               	goto	l3522
  8110  0016B4                     l517:
  8111                           
  8112                           ;motors.c: 106: else{LATDbits.LATD1 = 0;}
  8113  0016B4  928C               	bcf	3980,1,c	;volatile
  8114  0016B6                     l3522:
  8115                           
  8116                           ;motors.c: 107: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
  8117  0016B6  0E04               	movlw	4
  8118  0016B8  1845               	xorwf	_t,w,c
  8119  0016BA  1046               	iorwf	_t+1,w,c
  8120  0016BC  B4D8               	btfsc	status,2,c
  8121  0016BE  D005               	goto	l523
  8122  0016C0  0E05               	movlw	5
  8123  0016C2  1845               	xorwf	_t,w,c
  8124  0016C4  1046               	iorwf	_t+1,w,c
  8125  0016C6  A4D8               	btfss	status,2,c
  8126  0016C8  D002               	goto	l521
  8127  0016CA                     l523:
  8128  0016CA  868A               	bsf	3978,3,c	;volatile
  8129  0016CC  0012               	return	
  8130  0016CE                     l521:
  8131                           
  8132                           ;motors.c: 108: else{LATBbits.LATB3 = 0;}
  8133  0016CE  968A               	bcf	3978,3,c	;volatile
  8134                           
  8135                           ;motors.c: 109: }
  8136  0016D0  0012               	return	
  8137  0016D2                     l3526:
  8138                           
  8139                           ;motors.c: 110: else if(mode == 4){
  8140  0016D2  0E04               	movlw	4
  8141  0016D4  1821               	xorwf	updateS1@mode,w,c
  8142  0016D6  1022               	iorwf	updateS1@mode+1,w,c
  8143  0016D8  B4D8               	btfsc	status,2,c
  8144  0016DA  0012               	return	
  8145                           
  8146                           ;motors.c: 113: else{
  8147                           ;motors.c: 114: _delay((unsigned long)((10)*(32000000/4000.0)));
  8148                           
  8149                           ;motors.c: 112: }
  8150  0016DC  0E68               	movlw	104
  8151  0016DE  6E23               	movwf	??_updateS1& (0+255),c
  8152  0016E0  0EE4               	movlw	228
  8153  0016E2                     u8237:
  8154  0016E2  2EE8               	decfsz	wreg,f,c
  8155  0016E4  D7FE               	bra	u8237
  8156  0016E6  2E23               	decfsz	??_updateS1& (0+255),f,c
  8157  0016E8  D7FC               	bra	u8237
  8158  0016EA  D000               	nop2	
  8159                           
  8160                           ;motors.c: 116: if(mode == 1 || mode == 5){
  8161  0016EC  0421               	decf	updateS1@mode,w,c
  8162  0016EE  1022               	iorwf	updateS1@mode+1,w,c
  8163  0016F0  B4D8               	btfsc	status,2,c
  8164  0016F2  D005               	goto	l3536
  8165  0016F4  0E05               	movlw	5
  8166  0016F6  1821               	xorwf	updateS1@mode,w,c
  8167  0016F8  1022               	iorwf	updateS1@mode+1,w,c
  8168  0016FA  A4D8               	btfss	status,2,c
  8169  0016FC  D013               	goto	l3542
  8170  0016FE                     l3536:
  8171                           
  8172                           ;motors.c: 117: s1 ++;
  8173  0016FE  0100               	movlb	0	; () banked
  8174  001700  4BC0               	infsnz	_s1& (0+255),f,b
  8175  001702  2BC1               	incf	(_s1+1)& (0+255),f,b
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;motors.c: 118: if (s1>4) {s1=1;}
  8179  001704  0100               	movlb	0	; () banked
  8180  001706  BFC1               	btfsc	(_s1+1)& (0+255),7,b
  8181  001708  D02A               	goto	l3552
  8182  00170A  0100               	movlb	0	; () banked
  8183  00170C  51C1               	movf	(_s1+1)& (0+255),w,b
  8184  00170E  E105               	bnz	u3720
  8185  001710  0E05               	movlw	5
  8186  001712  0100               	movlb	0	; () banked
  8187  001714  5DC0               	subwf	_s1& (0+255),w,b
  8188  001716  A0D8               	btfss	status,0,c
  8189  001718  D022               	goto	l3552
  8190  00171A                     u3720:
  8191                           
  8192                           ; BSR set to: 0
  8193  00171A  0E00               	movlw	0
  8194  00171C  0100               	movlb	0	; () banked
  8195  00171E  6FC1               	movwf	(_s1+1)& (0+255),b
  8196  001720  0E01               	movlw	1
  8197  001722  D01C               	goto	L15
  8198  001724                     l3542:
  8199                           
  8200                           ;motors.c: 121: else if(mode == 2 || mode==6){
  8201  001724  0E02               	movlw	2
  8202  001726  1821               	xorwf	updateS1@mode,w,c
  8203  001728  1022               	iorwf	updateS1@mode+1,w,c
  8204  00172A  B4D8               	btfsc	status,2,c
  8205  00172C  D005               	goto	l3546
  8206  00172E  0E06               	movlw	6
  8207  001730  1821               	xorwf	updateS1@mode,w,c
  8208  001732  1022               	iorwf	updateS1@mode+1,w,c
  8209  001734  A4D8               	btfss	status,2,c
  8210  001736  D013               	goto	l3552
  8211  001738                     l3546:
  8212                           
  8213                           ;motors.c: 122: s1 --;
  8214  001738  0100               	movlb	0	; () banked
  8215  00173A  07C0               	decf	_s1& (0+255),f,b
  8216  00173C  A0D8               	btfss	status,0,c
  8217  00173E  07C1               	decf	(_s1+1)& (0+255),f,b
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;motors.c: 123: if (s1<1) {s1=4;}
  8221  001740  0100               	movlb	0	; () banked
  8222  001742  BFC1               	btfsc	(_s1+1)& (0+255),7,b
  8223  001744  D007               	goto	l3550
  8224  001746  0100               	movlb	0	; () banked
  8225  001748  51C1               	movf	(_s1+1)& (0+255),w,b
  8226  00174A  E109               	bnz	l3552
  8227  00174C  0100               	movlb	0	; () banked
  8228  00174E  05C0               	decf	_s1& (0+255),w,b
  8229  001750  B0D8               	btfsc	status,0,c
  8230  001752  D005               	goto	l3552
  8231  001754                     l3550:
  8232                           
  8233                           ; BSR set to: 0
  8234  001754  0E00               	movlw	0
  8235  001756  0100               	movlb	0	; () banked
  8236  001758  6FC1               	movwf	(_s1+1)& (0+255),b
  8237  00175A  0E04               	movlw	4
  8238  00175C                     L15:
  8239  00175C  6FC0               	movwf	_s1& (0+255),b
  8240  00175E                     l3552:
  8241                           
  8242                           ;motors.c: 124: }
  8243                           ;motors.c: 126: if(mode == 1 || mode ==2){
  8244  00175E  0421               	decf	updateS1@mode,w,c
  8245  001760  1022               	iorwf	updateS1@mode+1,w,c
  8246  001762  B4D8               	btfsc	status,2,c
  8247  001764  D005               	goto	l3556
  8248  001766  0E02               	movlw	2
  8249  001768  1821               	xorwf	updateS1@mode,w,c
  8250  00176A  1022               	iorwf	updateS1@mode+1,w,c
  8251  00176C  A4D8               	btfss	status,2,c
  8252  00176E  D027               	goto	l3572
  8253  001770                     l3556:
  8254                           
  8255                           ;motors.c: 127: if (s1 == 1){LATDbits.LATD1 = 1;}
  8256  001770  0100               	movlb	0	; () banked
  8257  001772  05C0               	decf	_s1& (0+255),w,b
  8258  001774  0100               	movlb	0	; () banked
  8259  001776  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8260  001778  A4D8               	btfss	status,2,c
  8261  00177A  D002               	goto	l540
  8262                           
  8263                           ; BSR set to: 0
  8264  00177C  828C               	bsf	3980,1,c	;volatile
  8265  00177E  D001               	goto	l3560
  8266  001780                     l540:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;motors.c: 128: else{LATDbits.LATD1 = 0;}
  8270  001780  928C               	bcf	3980,1,c	;volatile
  8271  001782                     l3560:
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;motors.c: 129: if (s1 == 2){LATBbits.LATB3 = 1;}
  8275  001782  0E02               	movlw	2
  8276  001784  0100               	movlb	0	; () banked
  8277  001786  19C0               	xorwf	_s1& (0+255),w,b
  8278  001788  0100               	movlb	0	; () banked
  8279  00178A  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8280  00178C  A4D8               	btfss	status,2,c
  8281  00178E  D002               	goto	l542
  8282                           
  8283                           ; BSR set to: 0
  8284  001790  868A               	bsf	3978,3,c	;volatile
  8285  001792  D001               	goto	l3564
  8286  001794                     l542:
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;motors.c: 130: else{LATBbits.LATB3 = 0;}
  8290  001794  968A               	bcf	3978,3,c	;volatile
  8291  001796                     l3564:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;motors.c: 131: if (s1 == 3){LATBbits.LATB2 = 1;}
  8295  001796  0E03               	movlw	3
  8296  001798  0100               	movlb	0	; () banked
  8297  00179A  19C0               	xorwf	_s1& (0+255),w,b
  8298  00179C  0100               	movlb	0	; () banked
  8299  00179E  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8300  0017A0  A4D8               	btfss	status,2,c
  8301  0017A2  D002               	goto	l544
  8302                           
  8303                           ; BSR set to: 0
  8304  0017A4  848A               	bsf	3978,2,c	;volatile
  8305  0017A6  D001               	goto	l3568
  8306  0017A8                     l544:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;motors.c: 132: else{LATBbits.LATB2 = 0;}
  8310  0017A8  948A               	bcf	3978,2,c	;volatile
  8311  0017AA                     l3568:
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;motors.c: 133: if (s1 == 4){LATBbits.LATB0 = 1;}
  8315  0017AA  0E04               	movlw	4
  8316  0017AC  0100               	movlb	0	; () banked
  8317  0017AE  19C0               	xorwf	_s1& (0+255),w,b
  8318  0017B0  0100               	movlb	0	; () banked
  8319  0017B2  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8320  0017B4  A4D8               	btfss	status,2,c
  8321  0017B6  D002               	goto	l546
  8322                           
  8323                           ; BSR set to: 0
  8324  0017B8  808A               	bsf	3978,0,c	;volatile
  8325  0017BA  D001               	goto	l3572
  8326  0017BC                     l546:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;motors.c: 134: else{LATBbits.LATB0 = 0;}
  8330  0017BC  908A               	bcf	3978,0,c	;volatile
  8331  0017BE                     l3572:
  8332                           
  8333                           ;motors.c: 135: }
  8334                           ;motors.c: 136: if(mode == 5 || mode ==6){
  8335  0017BE  0E05               	movlw	5
  8336  0017C0  1821               	xorwf	updateS1@mode,w,c
  8337  0017C2  1022               	iorwf	updateS1@mode+1,w,c
  8338  0017C4  B4D8               	btfsc	status,2,c
  8339  0017C6  D005               	goto	l3576
  8340  0017C8  0E06               	movlw	6
  8341  0017CA  1821               	xorwf	updateS1@mode,w,c
  8342  0017CC  1022               	iorwf	updateS1@mode+1,w,c
  8343  0017CE  A4D8               	btfss	status,2,c
  8344  0017D0  0012               	return	
  8345  0017D2                     l3576:
  8346                           
  8347                           ;motors.c: 137: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  8348  0017D2  0100               	movlb	0	; () banked
  8349  0017D4  05C0               	decf	_s1& (0+255),w,b
  8350  0017D6  0100               	movlb	0	; () banked
  8351  0017D8  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8352  0017DA  A4D8               	btfss	status,2,c
  8353  0017DC  D004               	goto	l3580
  8354                           
  8355                           ; BSR set to: 0
  8356  0017DE  828C               	bsf	3980,1,c	;volatile
  8357  0017E0  868A               	bsf	3978,3,c	;volatile
  8358  0017E2  948A               	bcf	3978,2,c	;volatile
  8359  0017E4  908A               	bcf	3978,0,c	;volatile
  8360  0017E6                     l3580:
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;motors.c: 138: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  8364  0017E6  0E02               	movlw	2
  8365  0017E8  0100               	movlb	0	; () banked
  8366  0017EA  19C0               	xorwf	_s1& (0+255),w,b
  8367  0017EC  0100               	movlb	0	; () banked
  8368  0017EE  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8369  0017F0  A4D8               	btfss	status,2,c
  8370  0017F2  D004               	goto	l3584
  8371                           
  8372                           ; BSR set to: 0
  8373  0017F4  928C               	bcf	3980,1,c	;volatile
  8374  0017F6  868A               	bsf	3978,3,c	;volatile
  8375  0017F8  848A               	bsf	3978,2,c	;volatile
  8376  0017FA  908A               	bcf	3978,0,c	;volatile
  8377  0017FC                     l3584:
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;motors.c: 139: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  8381  0017FC  0E03               	movlw	3
  8382  0017FE  0100               	movlb	0	; () banked
  8383  001800  19C0               	xorwf	_s1& (0+255),w,b
  8384  001802  0100               	movlb	0	; () banked
  8385  001804  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8386  001806  A4D8               	btfss	status,2,c
  8387  001808  D004               	goto	l3588
  8388                           
  8389                           ; BSR set to: 0
  8390  00180A  928C               	bcf	3980,1,c	;volatile
  8391  00180C  968A               	bcf	3978,3,c	;volatile
  8392  00180E  848A               	bsf	3978,2,c	;volatile
  8393  001810  808A               	bsf	3978,0,c	;volatile
  8394  001812                     l3588:
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;motors.c: 140: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  8398  001812  0E04               	movlw	4
  8399  001814  0100               	movlb	0	; () banked
  8400  001816  19C0               	xorwf	_s1& (0+255),w,b
  8401  001818  0100               	movlb	0	; () banked
  8402  00181A  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8403  00181C  A4D8               	btfss	status,2,c
  8404  00181E  0012               	return	
  8405                           
  8406                           ; BSR set to: 0
  8407  001820  828C               	bsf	3980,1,c	;volatile
  8408  001822  968A               	bcf	3978,3,c	;volatile
  8409  001824  948A               	bcf	3978,2,c	;volatile
  8410  001826  808A               	bsf	3978,0,c	;volatile
  8411                           
  8412                           ; BSR set to: 0
  8413                           
  8414                           ; BSR set to: 0
  8415                           
  8416                           ; BSR set to: 0
  8417                           
  8418                           ; BSR set to: 0
  8419                           
  8420                           ; BSR set to: 0
  8421  001828  0012               	return	
  8422  00182A                     __end_of_updateS1:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           intcon2	equ	0xFF1
  8432                           postinc0	equ	0xFEE
  8433                           wreg	equ	0xFE8
  8434                           indf2	equ	0xFDF
  8435                           postinc2	equ	0xFDE
  8436                           postdec2	equ	0xFDD
  8437                           fsr2h	equ	0xFDA
  8438                           fsr2l	equ	0xFD9
  8439                           status	equ	0xFD8
  8440                           
  8441 ;; *************** function _startTMR1 *****************
  8442 ;; Defined at:
  8443 ;;		line 24 in file "logic.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;		None
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;		None
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  2   24[None  ] int 
  8450 ;; Registers used:
  8451 ;;		wreg, status,2
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;Total ram usage:        0 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    2
  8464 ;; This function calls:
  8465 ;;		Nothing
  8466 ;; This function is called by:
  8467 ;;		_main
  8468 ;;		_calibrateWheels
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           	psect	text26
  8473  002C0C                     __ptext26:
  8474                           	opt stack 0
  8475  002C0C                     _startTMR1:
  8476                           	opt stack 28
  8477                           
  8478                           ;logic.c: 25: T1CON = 0b10110000;
  8479                           
  8480                           ;incstack = 0
  8481  002C0C  0EB0               	movlw	176
  8482  002C0E  6ECD               	movwf	4045,c	;volatile
  8483                           
  8484                           ;logic.c: 26: TMR1H = 0b11011001;
  8485  002C10  0ED9               	movlw	217
  8486  002C12  6ECF               	movwf	4047,c	;volatile
  8487                           
  8488                           ;logic.c: 27: TMR1L = 0b01011011;
  8489  002C14  0E5B               	movlw	91
  8490  002C16  6ECE               	movwf	4046,c	;volatile
  8491                           
  8492                           ;logic.c: 28: TMR1ON = 1;
  8493  002C18  80CD               	bsf	4045,0,c	;volatile
  8494  002C1A  0012               	return		;funcret
  8495  002C1C                     __end_of_startTMR1:
  8496                           	opt stack 0
  8497                           tblptru	equ	0xFF8
  8498                           tblptrh	equ	0xFF7
  8499                           tblptrl	equ	0xFF6
  8500                           tablat	equ	0xFF5
  8501                           prodh	equ	0xFF4
  8502                           prodl	equ	0xFF3
  8503                           intcon	equ	0xFF2
  8504                           intcon2	equ	0xFF1
  8505                           postinc0	equ	0xFEE
  8506                           wreg	equ	0xFE8
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _readADC *****************
  8515 ;; Defined at:
  8516 ;;		line 9 in file "logic.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  channel         1    wreg     unsigned char 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  channel         1   33[COMRAM] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      void 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;Total ram usage:        2 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    2
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_main
  8541 ;;		_calibrateWheels
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text27
  8546  002B8C                     __ptext27:
  8547                           	opt stack 0
  8548  002B8C                     _readADC:
  8549                           	opt stack 28
  8550                           
  8551                           ;incstack = 0
  8552                           ;readADC@channel stored from wreg
  8553  002B8C  6E22               	movwf	readADC@channel,c
  8554                           
  8555                           ;logic.c: 11: ADCON0 = ((channel <<2));
  8556  002B8E  4422               	rlncf	readADC@channel,w,c
  8557  002B90  46E8               	rlncf	wreg,f,c
  8558  002B92  0BFC               	andlw	252
  8559  002B94  6EC2               	movwf	4034,c	;volatile
  8560                           
  8561                           ;logic.c: 12: ADCON0bits.ADON = 1;
  8562  002B96  80C2               	bsf	4034,0,c	;volatile
  8563                           
  8564                           ;logic.c: 13: ADCON0bits.GO = 1;
  8565  002B98  82C2               	bsf	4034,1,c	;volatile
  8566                           
  8567                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  8568  002B9A  D007               	goto	l3850
  8569  002B9C                     l3848:
  8570  002B9C  0E34               	movlw	52
  8571  002B9E  6E21               	movwf	??_readADC& (0+255),c
  8572  002BA0  0EF2               	movlw	242
  8573  002BA2                     u8247:
  8574  002BA2  2EE8               	decfsz	wreg,f,c
  8575  002BA4  D7FE               	bra	u8247
  8576  002BA6  2E21               	decfsz	??_readADC& (0+255),f,c
  8577  002BA8  D7FC               	bra	u8247
  8578  002BAA                     l3850:
  8579  002BAA  A2C2               	btfss	4034,1,c	;volatile
  8580  002BAC  0012               	return	
  8581  002BAE  D7F6               	goto	l3848
  8582  002BB0                     __end_of_readADC:
  8583                           	opt stack 0
  8584                           tblptru	equ	0xFF8
  8585                           tblptrh	equ	0xFF7
  8586                           tblptrl	equ	0xFF6
  8587                           tablat	equ	0xFF5
  8588                           prodh	equ	0xFF4
  8589                           prodl	equ	0xFF3
  8590                           intcon	equ	0xFF2
  8591                           intcon2	equ	0xFF1
  8592                           postinc0	equ	0xFEE
  8593                           wreg	equ	0xFE8
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601 ;; *************** function _addRun *****************
  8602 ;; Defined at:
  8603 ;;		line 69 in file "interface.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  dur             2   36[COMRAM] int 
  8606 ;;  year            2   38[COMRAM] int 
  8607 ;;  month           2   40[COMRAM] int 
  8608 ;;  date            2   42[COMRAM] int 
  8609 ;;  hours           2   44[COMRAM] int 
  8610 ;;  mins            2   46[COMRAM] int 
  8611 ;;  secs            2   48[COMRAM] int 
  8612 ;;  sodaT           2   50[COMRAM] int 
  8613 ;;  sodaNT          2   52[COMRAM] int 
  8614 ;;  soupL           2   54[COMRAM] int 
  8615 ;;  soupNL          2   56[COMRAM] int 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  currRun         2   58[COMRAM] int 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0, cstack
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8627 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Totals:        24       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;Total ram usage:       27 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    3
  8634 ;; This function calls:
  8635 ;;		_eepromRead
  8636 ;;		_eepromWrite
  8637 ;; This function is called by:
  8638 ;;		_main
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           	psect	text28
  8643  002294                     __ptext28:
  8644                           	opt stack 0
  8645  002294                     _addRun:
  8646                           	opt stack 27
  8647                           
  8648                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  8649                           
  8650                           ;incstack = 0
  8651  002294  0EFF               	movlw	255
  8652  002296  0100               	movlb	0	; () banked
  8653  002298  6F80               	movwf	??_addRun& (0+255),b
  8654  00229A  0EFF               	movlw	255
  8655  00229C  0100               	movlb	0	; () banked
  8656  00229E  6F81               	movwf	(??_addRun+1)& (0+255),b
  8657  0022A0  0E00               	movlw	0
  8658  0022A2  EC66  F015         	call	_eepromRead
  8659  0022A6  0100               	movlb	0	; () banked
  8660  0022A8  6F82               	movwf	(??_addRun+2)& (0+255),b
  8661  0022AA  0100               	movlb	0	; () banked
  8662  0022AC  5180               	movf	??_addRun& (0+255),w,b
  8663  0022AE  0100               	movlb	0	; () banked
  8664  0022B0  2582               	addwf	(??_addRun+2)& (0+255),w,b
  8665  0022B2  6E3B               	movwf	addRun@currRun,c
  8666  0022B4  0E00               	movlw	0
  8667  0022B6  0100               	movlb	0	; () banked
  8668  0022B8  BF82               	btfsc	(??_addRun+2)& (0+255),7,b
  8669  0022BA  0EFF               	movlw	255
  8670  0022BC  0100               	movlb	0	; () banked
  8671  0022BE  2181               	addwfc	(??_addRun+1)& (0+255),w,b
  8672  0022C0  6E3C               	movwf	addRun@currRun+1,c
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  8676  0022C2  BE3C               	btfsc	addRun@currRun+1,7,c
  8677  0022C4  D005               	goto	l5596
  8678  0022C6  503C               	movf	addRun@currRun+1,w,c
  8679  0022C8  E107               	bnz	l5598
  8680  0022CA  043B               	decf	addRun@currRun,w,c
  8681  0022CC  B0D8               	btfsc	status,0,c
  8682  0022CE  D004               	goto	l5598
  8683  0022D0                     l5596:
  8684                           
  8685                           ; BSR set to: 0
  8686  0022D0  0E00               	movlw	0
  8687  0022D2  6E3C               	movwf	addRun@currRun+1,c
  8688  0022D4  0E04               	movlw	4
  8689  0022D6  6E3B               	movwf	addRun@currRun,c
  8690  0022D8                     l5598:
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;interface.c: 72: eepromWrite(0, currRun);
  8694  0022D8  C03B  F021         	movff	addRun@currRun,eepromWrite@data
  8695  0022DC  0E00               	movlw	0
  8696  0022DE  EC4A  F015         	call	_eepromWrite
  8697                           
  8698                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  8699  0022E2  C025  F021         	movff	addRun@dur,eepromWrite@data
  8700  0022E6  C03B  F080         	movff	addRun@currRun,??_addRun
  8701  0022EA  0100               	movlb	0	; () banked
  8702  0022EC  3B80               	swapf	??_addRun& (0+255),f,b
  8703  0022EE  0EF0               	movlw	240
  8704  0022F0  1780               	andwf	??_addRun& (0+255),f,b
  8705  0022F2  0100               	movlb	0	; () banked
  8706  0022F4  2980               	incf	??_addRun& (0+255),w,b
  8707  0022F6  EC4A  F015         	call	_eepromWrite
  8708                           
  8709                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  8710  0022FA  C027  F021         	movff	addRun@year,eepromWrite@data
  8711  0022FE  C03B  F080         	movff	addRun@currRun,??_addRun
  8712  002302  0100               	movlb	0	; () banked
  8713  002304  3B80               	swapf	??_addRun& (0+255),f,b
  8714  002306  0EF0               	movlw	240
  8715  002308  1780               	andwf	??_addRun& (0+255),f,b
  8716  00230A  0100               	movlb	0	; () banked
  8717  00230C  5180               	movf	??_addRun& (0+255),w,b
  8718  00230E  0F02               	addlw	2
  8719  002310  EC4A  F015         	call	_eepromWrite
  8720                           
  8721                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  8722  002314  C029  F021         	movff	addRun@month,eepromWrite@data
  8723  002318  C03B  F080         	movff	addRun@currRun,??_addRun
  8724  00231C  0100               	movlb	0	; () banked
  8725  00231E  3B80               	swapf	??_addRun& (0+255),f,b
  8726  002320  0EF0               	movlw	240
  8727  002322  1780               	andwf	??_addRun& (0+255),f,b
  8728  002324  0100               	movlb	0	; () banked
  8729  002326  5180               	movf	??_addRun& (0+255),w,b
  8730  002328  0F03               	addlw	3
  8731  00232A  EC4A  F015         	call	_eepromWrite
  8732                           
  8733                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8734  00232E  C02B  F021         	movff	addRun@date,eepromWrite@data
  8735  002332  C03B  F080         	movff	addRun@currRun,??_addRun
  8736  002336  0100               	movlb	0	; () banked
  8737  002338  3B80               	swapf	??_addRun& (0+255),f,b
  8738  00233A  0EF0               	movlw	240
  8739  00233C  1780               	andwf	??_addRun& (0+255),f,b
  8740  00233E  0100               	movlb	0	; () banked
  8741  002340  5180               	movf	??_addRun& (0+255),w,b
  8742  002342  0F04               	addlw	4
  8743  002344  EC4A  F015         	call	_eepromWrite
  8744                           
  8745                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8746  002348  C02D  F021         	movff	addRun@hours,eepromWrite@data
  8747  00234C  C03B  F080         	movff	addRun@currRun,??_addRun
  8748  002350  0100               	movlb	0	; () banked
  8749  002352  3B80               	swapf	??_addRun& (0+255),f,b
  8750  002354  0EF0               	movlw	240
  8751  002356  1780               	andwf	??_addRun& (0+255),f,b
  8752  002358  0100               	movlb	0	; () banked
  8753  00235A  5180               	movf	??_addRun& (0+255),w,b
  8754  00235C  0F05               	addlw	5
  8755  00235E  EC4A  F015         	call	_eepromWrite
  8756                           
  8757                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8758  002362  C02F  F021         	movff	addRun@mins,eepromWrite@data
  8759  002366  C03B  F080         	movff	addRun@currRun,??_addRun
  8760  00236A  0100               	movlb	0	; () banked
  8761  00236C  3B80               	swapf	??_addRun& (0+255),f,b
  8762  00236E  0EF0               	movlw	240
  8763  002370  1780               	andwf	??_addRun& (0+255),f,b
  8764  002372  0100               	movlb	0	; () banked
  8765  002374  5180               	movf	??_addRun& (0+255),w,b
  8766  002376  0F06               	addlw	6
  8767  002378  EC4A  F015         	call	_eepromWrite
  8768                           
  8769                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8770  00237C  C031  F021         	movff	addRun@secs,eepromWrite@data
  8771  002380  C03B  F080         	movff	addRun@currRun,??_addRun
  8772  002384  0100               	movlb	0	; () banked
  8773  002386  3B80               	swapf	??_addRun& (0+255),f,b
  8774  002388  0EF0               	movlw	240
  8775  00238A  1780               	andwf	??_addRun& (0+255),f,b
  8776  00238C  0100               	movlb	0	; () banked
  8777  00238E  5180               	movf	??_addRun& (0+255),w,b
  8778  002390  0F07               	addlw	7
  8779  002392  EC4A  F015         	call	_eepromWrite
  8780                           
  8781                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8782  002396  C033  F021         	movff	addRun@sodaT,eepromWrite@data
  8783  00239A  C03B  F080         	movff	addRun@currRun,??_addRun
  8784  00239E  0100               	movlb	0	; () banked
  8785  0023A0  3B80               	swapf	??_addRun& (0+255),f,b
  8786  0023A2  0EF0               	movlw	240
  8787  0023A4  1780               	andwf	??_addRun& (0+255),f,b
  8788  0023A6  0100               	movlb	0	; () banked
  8789  0023A8  5180               	movf	??_addRun& (0+255),w,b
  8790  0023AA  0F08               	addlw	8
  8791  0023AC  EC4A  F015         	call	_eepromWrite
  8792                           
  8793                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8794  0023B0  C035  F021         	movff	addRun@sodaNT,eepromWrite@data
  8795  0023B4  C03B  F080         	movff	addRun@currRun,??_addRun
  8796  0023B8  0100               	movlb	0	; () banked
  8797  0023BA  3B80               	swapf	??_addRun& (0+255),f,b
  8798  0023BC  0EF0               	movlw	240
  8799  0023BE  1780               	andwf	??_addRun& (0+255),f,b
  8800  0023C0  0100               	movlb	0	; () banked
  8801  0023C2  5180               	movf	??_addRun& (0+255),w,b
  8802  0023C4  0F09               	addlw	9
  8803  0023C6  EC4A  F015         	call	_eepromWrite
  8804                           
  8805                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8806  0023CA  C037  F021         	movff	addRun@soupL,eepromWrite@data
  8807  0023CE  C03B  F080         	movff	addRun@currRun,??_addRun
  8808  0023D2  0100               	movlb	0	; () banked
  8809  0023D4  3B80               	swapf	??_addRun& (0+255),f,b
  8810  0023D6  0EF0               	movlw	240
  8811  0023D8  1780               	andwf	??_addRun& (0+255),f,b
  8812  0023DA  0100               	movlb	0	; () banked
  8813  0023DC  5180               	movf	??_addRun& (0+255),w,b
  8814  0023DE  0F0A               	addlw	10
  8815  0023E0  EC4A  F015         	call	_eepromWrite
  8816                           
  8817                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8818  0023E4  C039  F021         	movff	addRun@soupNL,eepromWrite@data
  8819  0023E8  C03B  F080         	movff	addRun@currRun,??_addRun
  8820  0023EC  0100               	movlb	0	; () banked
  8821  0023EE  3B80               	swapf	??_addRun& (0+255),f,b
  8822  0023F0  0EF0               	movlw	240
  8823  0023F2  1780               	andwf	??_addRun& (0+255),f,b
  8824  0023F4  0100               	movlb	0	; () banked
  8825  0023F6  5180               	movf	??_addRun& (0+255),w,b
  8826  0023F8  0F0B               	addlw	11
  8827  0023FA  EC4A  F015         	call	_eepromWrite
  8828  0023FE  0012               	return		;funcret
  8829  002400                     __end_of_addRun:
  8830                           	opt stack 0
  8831                           tblptru	equ	0xFF8
  8832                           tblptrh	equ	0xFF7
  8833                           tblptrl	equ	0xFF6
  8834                           tablat	equ	0xFF5
  8835                           prodh	equ	0xFF4
  8836                           prodl	equ	0xFF3
  8837                           intcon	equ	0xFF2
  8838                           intcon2	equ	0xFF1
  8839                           postinc0	equ	0xFEE
  8840                           wreg	equ	0xFE8
  8841                           indf2	equ	0xFDF
  8842                           postinc2	equ	0xFDE
  8843                           postdec2	equ	0xFDD
  8844                           fsr2h	equ	0xFDA
  8845                           fsr2l	equ	0xFD9
  8846                           status	equ	0xFD8
  8847                           
  8848 ;; *************** function _eepromWrite *****************
  8849 ;; Defined at:
  8850 ;;		line 43 in file "interface.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;  address         1    wreg     char 
  8853 ;;  data            1   32[COMRAM] char 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  address         1   35[COMRAM] char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;Total ram usage:        4 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    2
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_addRun
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text29
  8880  002A94                     __ptext29:
  8881                           	opt stack 0
  8882  002A94                     _eepromWrite:
  8883                           	opt stack 27
  8884                           
  8885                           ;incstack = 0
  8886                           ;eepromWrite@address stored from wreg
  8887  002A94  6E24               	movwf	eepromWrite@address,c
  8888                           
  8889                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8890  002A96  C024  F022         	movff	eepromWrite@address,??_eepromWrite
  8891  002A9A  0E08               	movlw	8
  8892  002A9C  6E23               	movwf	(??_eepromWrite+1)& (0+255),c
  8893  002A9E                     u4495:
  8894  002A9E  3422               	rlcf	??_eepromWrite,w,c
  8895  002AA0  3222               	rrcf	??_eepromWrite,f,c
  8896  002AA2  2E23               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8897  002AA4  D7FC               	goto	u4495
  8898  002AA6  5022               	movf	??_eepromWrite,w,c
  8899  002AA8  6EAA               	movwf	4010,c	;volatile
  8900                           
  8901                           ;interface.c: 46: EEADR = (signed char)address;
  8902  002AAA  C024  FFA9         	movff	eepromWrite@address,4009	;volatile
  8903                           
  8904                           ;interface.c: 48: EEDATA = data;
  8905  002AAE  C021  FFA8         	movff	eepromWrite@data,4008	;volatile
  8906                           
  8907                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8908  002AB2  9EA6               	bcf	4006,7,c	;volatile
  8909                           
  8910                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8911  002AB4  9CA6               	bcf	4006,6,c	;volatile
  8912                           
  8913                           ;interface.c: 51: EECON1bits.WREN = 1;
  8914  002AB6  84A6               	bsf	4006,2,c	;volatile
  8915                           
  8916                           ;interface.c: 55: EECON2 = 0x55;
  8917  002AB8  0E55               	movlw	85
  8918  002ABA  6EA7               	movwf	4007,c	;volatile
  8919                           
  8920                           ;interface.c: 56: EECON2 = 0xAA;
  8921  002ABC  0EAA               	movlw	170
  8922  002ABE  6EA7               	movwf	4007,c	;volatile
  8923                           
  8924                           ;interface.c: 57: EECON1bits.WR = 1;
  8925  002AC0  82A6               	bsf	4006,1,c	;volatile
  8926  002AC2                     l708:
  8927  002AC2  A8A1               	btfss	4001,4,c	;volatile
  8928  002AC4  D7FE               	goto	l708
  8929                           
  8930                           ;interface.c: 63: }
  8931                           ;interface.c: 65: PIR2bits.EEIF = 0;
  8932  002AC6  98A1               	bcf	4001,4,c	;volatile
  8933                           
  8934                           ;interface.c: 66: EECON1bits.WREN = 0;
  8935  002AC8  94A6               	bcf	4006,2,c	;volatile
  8936  002ACA  0012               	return		;funcret
  8937  002ACC                     __end_of_eepromWrite:
  8938                           	opt stack 0
  8939                           tblptru	equ	0xFF8
  8940                           tblptrh	equ	0xFF7
  8941                           tblptrl	equ	0xFF6
  8942                           tablat	equ	0xFF5
  8943                           prodh	equ	0xFF4
  8944                           prodl	equ	0xFF3
  8945                           intcon	equ	0xFF2
  8946                           intcon2	equ	0xFF1
  8947                           postinc0	equ	0xFEE
  8948                           wreg	equ	0xFE8
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           fsr2h	equ	0xFDA
  8953                           fsr2l	equ	0xFD9
  8954                           status	equ	0xFD8
  8955                           
  8956 ;; *************** function _eepromRead *****************
  8957 ;; Defined at:
  8958 ;;		line 27 in file "interface.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;  address         1    wreg     char 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  address         1   34[COMRAM] char 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  1    wreg      char 
  8965 ;; Registers used:
  8966 ;;		wreg, status,2, status,0
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;Total ram usage:        3 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    2
  8979 ;; This function calls:
  8980 ;;		Nothing
  8981 ;; This function is called by:
  8982 ;;		_addRun
  8983 ;;		_displayLog
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text30
  8988  002ACC                     __ptext30:
  8989                           	opt stack 0
  8990  002ACC                     _eepromRead:
  8991                           	opt stack 27
  8992                           
  8993                           ;incstack = 0
  8994                           ;eepromRead@address stored from wreg
  8995  002ACC  6E23               	movwf	eepromRead@address,c
  8996                           
  8997                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  8998  002ACE  C023  F021         	movff	eepromRead@address,??_eepromRead
  8999  002AD2  0E08               	movlw	8
  9000  002AD4  6E22               	movwf	(??_eepromRead+1)& (0+255),c
  9001  002AD6                     u7015:
  9002  002AD6  3421               	rlcf	??_eepromRead,w,c
  9003  002AD8  3221               	rrcf	??_eepromRead,f,c
  9004  002ADA  2E22               	decfsz	(??_eepromRead+1)& (0+255),f,c
  9005  002ADC  D7FC               	goto	u7015
  9006  002ADE  5021               	movf	??_eepromRead,w,c
  9007  002AE0  6EAA               	movwf	4010,c	;volatile
  9008                           
  9009                           ;interface.c: 30: EEADR = (signed char)address;
  9010  002AE2  C023  FFA9         	movff	eepromRead@address,4009	;volatile
  9011                           
  9012                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  9013  002AE6  9EA6               	bcf	4006,7,c	;volatile
  9014                           
  9015                           ;interface.c: 33: EECON1bits.CFGS = 0;
  9016  002AE8  9CA6               	bcf	4006,6,c	;volatile
  9017                           
  9018                           ;interface.c: 34: EECON1bits.RD = 1;
  9019  002AEA  80A6               	bsf	4006,0,c	;volatile
  9020  002AEC                     l702:
  9021  002AEC  B0A6               	btfsc	4006,0,c	;volatile
  9022  002AEE  D7FE               	goto	l702
  9023                           
  9024                           ;interface.c: 40: return EEDATA;
  9025  002AF0  50A8               	movf	4008,w,c	;volatile
  9026  002AF2  0012               	return	
  9027  002AF4                     __end_of_eepromRead:
  9028                           	opt stack 0
  9029                           tblptru	equ	0xFF8
  9030                           tblptrh	equ	0xFF7
  9031                           tblptrl	equ	0xFF6
  9032                           tablat	equ	0xFF5
  9033                           prodh	equ	0xFF4
  9034                           prodl	equ	0xFF3
  9035                           intcon	equ	0xFF2
  9036                           intcon2	equ	0xFF1
  9037                           postinc0	equ	0xFEE
  9038                           wreg	equ	0xFE8
  9039                           indf2	equ	0xFDF
  9040                           postinc2	equ	0xFDE
  9041                           postdec2	equ	0xFDD
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046 ;; *************** function ___awmod *****************
  9047 ;; Defined at:
  9048 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;  dividend        2   32[COMRAM] int 
  9051 ;;  divisor         2   34[COMRAM] int 
  9052 ;; Auto vars:     Size  Location     Type
  9053 ;;  sign            1   37[COMRAM] unsigned char 
  9054 ;;  counter         1   36[COMRAM] unsigned char 
  9055 ;; Return value:  Size  Location     Type
  9056 ;;                  2   32[COMRAM] int 
  9057 ;; Registers used:
  9058 ;;		wreg, status,2, status,0
  9059 ;; Tracked objects:
  9060 ;;		On entry : 0/0
  9061 ;;		On exit  : 0/0
  9062 ;;		Unchanged: 0/0
  9063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;Total ram usage:        6 bytes
  9069 ;; Hardware stack levels used:    1
  9070 ;; Hardware stack levels required when called:    2
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_main
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text31
  9079  002738                     __ptext31:
  9080                           	opt stack 0
  9081  002738                     ___awmod:
  9082                           	opt stack 28
  9083                           
  9084                           ;incstack = 0
  9085  002738  0E00               	movlw	0
  9086  00273A  6E26               	movwf	___awmod@sign,c
  9087  00273C  AE22               	btfss	___awmod@dividend+1,7,c
  9088  00273E  D006               	goto	l4294
  9089  002740  6C21               	negf	___awmod@dividend,c
  9090  002742  1E22               	comf	___awmod@dividend+1,f,c
  9091  002744  B0D8               	btfsc	status,0,c
  9092  002746  2A22               	incf	___awmod@dividend+1,f,c
  9093  002748  0E01               	movlw	1
  9094  00274A  6E26               	movwf	___awmod@sign,c
  9095  00274C                     l4294:
  9096  00274C  AE24               	btfss	___awmod@divisor+1,7,c
  9097  00274E  D004               	goto	l4298
  9098  002750  6C23               	negf	___awmod@divisor,c
  9099  002752  1E24               	comf	___awmod@divisor+1,f,c
  9100  002754  B0D8               	btfsc	status,0,c
  9101  002756  2A24               	incf	___awmod@divisor+1,f,c
  9102  002758                     l4298:
  9103  002758  5023               	movf	___awmod@divisor,w,c
  9104  00275A  1024               	iorwf	___awmod@divisor+1,w,c
  9105  00275C  B4D8               	btfsc	status,2,c
  9106  00275E  D018               	goto	l4314
  9107  002760  0E01               	movlw	1
  9108  002762  6E25               	movwf	___awmod@counter,c
  9109  002764  D004               	goto	l4304
  9110  002766                     l4302:
  9111  002766  90D8               	bcf	status,0,c
  9112  002768  3623               	rlcf	___awmod@divisor,f,c
  9113  00276A  3624               	rlcf	___awmod@divisor+1,f,c
  9114  00276C  2A25               	incf	___awmod@counter,f,c
  9115  00276E                     l4304:
  9116  00276E  AE24               	btfss	___awmod@divisor+1,7,c
  9117  002770  D7FA               	goto	l4302
  9118  002772                     l4306:
  9119  002772  5023               	movf	___awmod@divisor,w,c
  9120  002774  5C21               	subwf	___awmod@dividend,w,c
  9121  002776  5024               	movf	___awmod@divisor+1,w,c
  9122  002778  5822               	subwfb	___awmod@dividend+1,w,c
  9123  00277A  A0D8               	btfss	status,0,c
  9124  00277C  D004               	goto	l4310
  9125  00277E  5023               	movf	___awmod@divisor,w,c
  9126  002780  5E21               	subwf	___awmod@dividend,f,c
  9127  002782  5024               	movf	___awmod@divisor+1,w,c
  9128  002784  5A22               	subwfb	___awmod@dividend+1,f,c
  9129  002786                     l4310:
  9130  002786  90D8               	bcf	status,0,c
  9131  002788  3224               	rrcf	___awmod@divisor+1,f,c
  9132  00278A  3223               	rrcf	___awmod@divisor,f,c
  9133  00278C  2E25               	decfsz	___awmod@counter,f,c
  9134  00278E  D7F1               	goto	l4306
  9135  002790                     l4314:
  9136  002790  5026               	movf	___awmod@sign,w,c
  9137  002792  B4D8               	btfsc	status,2,c
  9138  002794  D004               	goto	l4318
  9139  002796  6C21               	negf	___awmod@dividend,c
  9140  002798  1E22               	comf	___awmod@dividend+1,f,c
  9141  00279A  B0D8               	btfsc	status,0,c
  9142  00279C  2A22               	incf	___awmod@dividend+1,f,c
  9143  00279E                     l4318:
  9144  00279E  C021  F021         	movff	___awmod@dividend,?___awmod
  9145  0027A2  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  9146  0027A6  0012               	return	
  9147  0027A8                     __end_of___awmod:
  9148                           	opt stack 0
  9149                           tblptru	equ	0xFF8
  9150                           tblptrh	equ	0xFF7
  9151                           tblptrl	equ	0xFF6
  9152                           tablat	equ	0xFF5
  9153                           prodh	equ	0xFF4
  9154                           prodl	equ	0xFF3
  9155                           intcon	equ	0xFF2
  9156                           intcon2	equ	0xFF1
  9157                           postinc0	equ	0xFEE
  9158                           wreg	equ	0xFE8
  9159                           indf2	equ	0xFDF
  9160                           postinc2	equ	0xFDE
  9161                           postdec2	equ	0xFDD
  9162                           fsr2h	equ	0xFDA
  9163                           fsr2l	equ	0xFD9
  9164                           status	equ	0xFD8
  9165                           
  9166 ;; *************** function _PWM2slow *****************
  9167 ;; Defined at:
  9168 ;;		line 60 in file "motors.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;  duty            2   32[COMRAM] int 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;		None
  9173 ;; Return value:  Size  Location     Type
  9174 ;;                  1    wreg      void 
  9175 ;; Registers used:
  9176 ;;		wreg, status,2, status,0
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;Total ram usage:        4 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    2
  9189 ;; This function calls:
  9190 ;;		Nothing
  9191 ;; This function is called by:
  9192 ;;		_main
  9193 ;; This function uses a non-reentrant model
  9194 ;;
  9195                           
  9196                           	psect	text32
  9197  002974                     __ptext32:
  9198                           	opt stack 0
  9199  002974                     _PWM2slow:
  9200                           	opt stack 28
  9201                           
  9202                           ;motors.c: 61: CCP2CONbits.DC2B0 = duty & 1;
  9203                           
  9204                           ;incstack = 0
  9205  002974  C021  F023         	movff	PWM2slow@duty,??_PWM2slow
  9206  002978  0E01               	movlw	1
  9207  00297A  1623               	andwf	??_PWM2slow,f,c
  9208  00297C  3A23               	swapf	??_PWM2slow,f,c
  9209  00297E  50BA               	movf	4026,w,c	;volatile
  9210  002980  1823               	xorwf	??_PWM2slow,w,c
  9211  002982  0BEF               	andlw	-17
  9212  002984  1823               	xorwf	??_PWM2slow,w,c
  9213  002986  6EBA               	movwf	4026,c	;volatile
  9214                           
  9215                           ;motors.c: 62: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9216  002988  3422               	rlcf	PWM2slow@duty+1,w,c
  9217  00298A  3022               	rrcf	PWM2slow@duty+1,w,c
  9218  00298C  6E24               	movwf	(??_PWM2slow+1)& (0+255),c
  9219  00298E  3021               	rrcf	PWM2slow@duty,w,c
  9220  002990  6E23               	movwf	??_PWM2slow& (0+255),c
  9221  002992  0E01               	movlw	1
  9222  002994  1623               	andwf	??_PWM2slow,f,c
  9223  002996  3A23               	swapf	??_PWM2slow,f,c
  9224  002998  4623               	rlncf	??_PWM2slow,f,c
  9225  00299A  50BA               	movf	4026,w,c	;volatile
  9226  00299C  1823               	xorwf	??_PWM2slow,w,c
  9227  00299E  0BDF               	andlw	-33
  9228  0029A0  1823               	xorwf	??_PWM2slow,w,c
  9229  0029A2  6EBA               	movwf	4026,c	;volatile
  9230                           
  9231                           ;motors.c: 63: CCPR2L = (duty >> 2);
  9232  0029A4  C021  F023         	movff	PWM2slow@duty,??_PWM2slow
  9233  0029A8  C022  F024         	movff	PWM2slow@duty+1,??_PWM2slow+1
  9234  0029AC  3424               	rlcf	??_PWM2slow+1,w,c
  9235  0029AE  3224               	rrcf	??_PWM2slow+1,f,c
  9236  0029B0  3223               	rrcf	??_PWM2slow,f,c
  9237  0029B2  3424               	rlcf	??_PWM2slow+1,w,c
  9238  0029B4  3224               	rrcf	??_PWM2slow+1,f,c
  9239  0029B6  3223               	rrcf	??_PWM2slow,f,c
  9240  0029B8  5023               	movf	??_PWM2slow,w,c
  9241  0029BA  6EBB               	movwf	4027,c	;volatile
  9242                           
  9243                           ;motors.c: 65: LATAbits.LATA6 = 1;
  9244  0029BC  8C89               	bsf	3977,6,c	;volatile
  9245                           
  9246                           ;motors.c: 66: LATAbits.LATA7 = 0;
  9247  0029BE  9E89               	bcf	3977,7,c	;volatile
  9248  0029C0  0012               	return		;funcret
  9249  0029C2                     __end_of_PWM2slow:
  9250                           	opt stack 0
  9251                           tblptru	equ	0xFF8
  9252                           tblptrh	equ	0xFF7
  9253                           tblptrl	equ	0xFF6
  9254                           tablat	equ	0xFF5
  9255                           prodh	equ	0xFF4
  9256                           prodl	equ	0xFF3
  9257                           intcon	equ	0xFF2
  9258                           intcon2	equ	0xFF1
  9259                           postinc0	equ	0xFEE
  9260                           wreg	equ	0xFE8
  9261                           indf2	equ	0xFDF
  9262                           postinc2	equ	0xFDE
  9263                           postdec2	equ	0xFDD
  9264                           fsr2h	equ	0xFDA
  9265                           fsr2l	equ	0xFD9
  9266                           status	equ	0xFD8
  9267                           
  9268 ;; *************** function _PWM2off *****************
  9269 ;; Defined at:
  9270 ;;		line 69 in file "motors.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;		None
  9275 ;; Return value:  Size  Location     Type
  9276 ;;                  1    wreg      void 
  9277 ;; Registers used:
  9278 ;;		wreg, status,2
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;Total ram usage:        0 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    2
  9291 ;; This function calls:
  9292 ;;		Nothing
  9293 ;; This function is called by:
  9294 ;;		_main
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text33
  9299  002C4E                     __ptext33:
  9300                           	opt stack 0
  9301  002C4E                     _PWM2off:
  9302                           	opt stack 28
  9303                           
  9304                           ;motors.c: 70: CCP2CONbits.DC2B0 = 0;
  9305                           
  9306                           ;incstack = 0
  9307  002C4E  98BA               	bcf	4026,4,c	;volatile
  9308                           
  9309                           ;motors.c: 71: CCP2CONbits.DC2B1 = 0;
  9310  002C50  9ABA               	bcf	4026,5,c	;volatile
  9311                           
  9312                           ;motors.c: 72: CCPR2L = 0;
  9313  002C52  0E00               	movlw	0
  9314  002C54  6EBB               	movwf	4027,c	;volatile
  9315  002C56  0012               	return		;funcret
  9316  002C58                     __end_of_PWM2off:
  9317                           	opt stack 0
  9318                           tblptru	equ	0xFF8
  9319                           tblptrh	equ	0xFF7
  9320                           tblptrl	equ	0xFF6
  9321                           tablat	equ	0xFF5
  9322                           prodh	equ	0xFF4
  9323                           prodl	equ	0xFF3
  9324                           intcon	equ	0xFF2
  9325                           intcon2	equ	0xFF1
  9326                           postinc0	equ	0xFEE
  9327                           wreg	equ	0xFE8
  9328                           indf2	equ	0xFDF
  9329                           postinc2	equ	0xFDE
  9330                           postdec2	equ	0xFDD
  9331                           fsr2h	equ	0xFDA
  9332                           fsr2l	equ	0xFD9
  9333                           status	equ	0xFD8
  9334                           
  9335 ;; *************** function _PWM2 *****************
  9336 ;; Defined at:
  9337 ;;		line 34 in file "motors.c"
  9338 ;; Parameters:    Size  Location     Type
  9339 ;;  duty            2   32[COMRAM] int 
  9340 ;;  dir             2   34[COMRAM] int 
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;                  1    wreg      void 
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9354 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;Total ram usage:        6 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    2
  9359 ;; This function calls:
  9360 ;;		Nothing
  9361 ;; This function is called by:
  9362 ;;		_main
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           	psect	text34
  9367  0026C0                     __ptext34:
  9368                           	opt stack 0
  9369  0026C0                     _PWM2:
  9370                           	opt stack 28
  9371                           
  9372                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  9373                           
  9374                           ;incstack = 0
  9375  0026C0  C021  F025         	movff	PWM2@duty,??_PWM2
  9376  0026C4  0E01               	movlw	1
  9377  0026C6  1625               	andwf	??_PWM2,f,c
  9378  0026C8  3A25               	swapf	??_PWM2,f,c
  9379  0026CA  50BA               	movf	4026,w,c	;volatile
  9380  0026CC  1825               	xorwf	??_PWM2,w,c
  9381  0026CE  0BEF               	andlw	-17
  9382  0026D0  1825               	xorwf	??_PWM2,w,c
  9383  0026D2  6EBA               	movwf	4026,c	;volatile
  9384                           
  9385                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9386  0026D4  3422               	rlcf	PWM2@duty+1,w,c
  9387  0026D6  3022               	rrcf	PWM2@duty+1,w,c
  9388  0026D8  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9389  0026DA  3021               	rrcf	PWM2@duty,w,c
  9390  0026DC  6E25               	movwf	??_PWM2& (0+255),c
  9391  0026DE  0E01               	movlw	1
  9392  0026E0  1625               	andwf	??_PWM2,f,c
  9393  0026E2  3A25               	swapf	??_PWM2,f,c
  9394  0026E4  4625               	rlncf	??_PWM2,f,c
  9395  0026E6  50BA               	movf	4026,w,c	;volatile
  9396  0026E8  1825               	xorwf	??_PWM2,w,c
  9397  0026EA  0BDF               	andlw	-33
  9398  0026EC  1825               	xorwf	??_PWM2,w,c
  9399  0026EE  6EBA               	movwf	4026,c	;volatile
  9400                           
  9401                           ;motors.c: 44: CCPR2L = (duty >> 2);
  9402  0026F0  C021  F025         	movff	PWM2@duty,??_PWM2
  9403  0026F4  C022  F026         	movff	PWM2@duty+1,??_PWM2+1
  9404  0026F8  3426               	rlcf	??_PWM2+1,w,c
  9405  0026FA  3226               	rrcf	??_PWM2+1,f,c
  9406  0026FC  3225               	rrcf	??_PWM2,f,c
  9407  0026FE  3426               	rlcf	??_PWM2+1,w,c
  9408  002700  3226               	rrcf	??_PWM2+1,f,c
  9409  002702  3225               	rrcf	??_PWM2,f,c
  9410  002704  5025               	movf	??_PWM2,w,c
  9411  002706  6EBB               	movwf	4027,c	;volatile
  9412                           
  9413                           ;motors.c: 46: LATAbits.LATA6 = 0;
  9414  002708  9C89               	bcf	3977,6,c	;volatile
  9415                           
  9416                           ;motors.c: 47: LATAbits.LATA7 = 0;
  9417  00270A  9E89               	bcf	3977,7,c	;volatile
  9418                           
  9419                           ;motors.c: 48: _delay((unsigned long)((50)*(32000000/4000.0)));
  9420  00270C  0E03               	movlw	3
  9421  00270E  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9422  002710  0E08               	movlw	8
  9423  002712  6E25               	movwf	??_PWM2& (0+255),c
  9424  002714  0E77               	movlw	119
  9425  002716                     u8257:
  9426  002716  2EE8               	decfsz	wreg,f,c
  9427  002718  D7FE               	bra	u8257
  9428  00271A  2E25               	decfsz	??_PWM2& (0+255),f,c
  9429  00271C  D7FC               	bra	u8257
  9430  00271E  2E26               	decfsz	(??_PWM2+1)& (0+255),f,c
  9431  002720  D7FA               	bra	u8257
  9432  002722  F000               	nop	
  9433                           
  9434                           ;motors.c: 49: if(dir==1){
  9435  002724  0423               	decf	PWM2@dir,w,c
  9436  002726  1024               	iorwf	PWM2@dir+1,w,c
  9437  002728  A4D8               	btfss	status,2,c
  9438  00272A  D003               	goto	l475
  9439                           
  9440                           ;motors.c: 50: LATAbits.LATA6 = 1;
  9441  00272C  8C89               	bsf	3977,6,c	;volatile
  9442                           
  9443                           ;motors.c: 51: LATAbits.LATA7 = 0;
  9444  00272E  9E89               	bcf	3977,7,c	;volatile
  9445                           
  9446                           ;motors.c: 52: }
  9447  002730  0012               	return	
  9448  002732                     l475:
  9449                           
  9450                           ;motors.c: 53: else{
  9451                           ;motors.c: 54: LATAbits.LATA6 = 0;
  9452  002732  9C89               	bcf	3977,6,c	;volatile
  9453                           
  9454                           ;motors.c: 55: LATAbits.LATA7 = 1;
  9455  002734  8E89               	bsf	3977,7,c	;volatile
  9456  002736  0012               	return	
  9457  002738                     __end_of_PWM2:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           intcon	equ	0xFF2
  9466                           intcon2	equ	0xFF1
  9467                           postinc0	equ	0xFEE
  9468                           wreg	equ	0xFE8
  9469                           indf2	equ	0xFDF
  9470                           postinc2	equ	0xFDE
  9471                           postdec2	equ	0xFDD
  9472                           fsr2h	equ	0xFDA
  9473                           fsr2l	equ	0xFD9
  9474                           status	equ	0xFD8
  9475                           
  9476 ;; *************** function _PWM1off *****************
  9477 ;; Defined at:
  9478 ;;		line 28 in file "motors.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;		None
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      void 
  9485 ;; Registers used:
  9486 ;;		wreg, status,2
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;Total ram usage:        0 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    2
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_main
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	text35
  9507  002C58                     __ptext35:
  9508                           	opt stack 0
  9509  002C58                     _PWM1off:
  9510                           	opt stack 28
  9511                           
  9512                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  9513                           
  9514                           ;incstack = 0
  9515  002C58  98BD               	bcf	4029,4,c	;volatile
  9516                           
  9517                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  9518  002C5A  9ABD               	bcf	4029,5,c	;volatile
  9519                           
  9520                           ;motors.c: 31: CCPR1L = 0;
  9521  002C5C  0E00               	movlw	0
  9522  002C5E  6EBE               	movwf	4030,c	;volatile
  9523  002C60  0012               	return		;funcret
  9524  002C62                     __end_of_PWM1off:
  9525                           	opt stack 0
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodh	equ	0xFF4
  9531                           prodl	equ	0xFF3
  9532                           intcon	equ	0xFF2
  9533                           intcon2	equ	0xFF1
  9534                           postinc0	equ	0xFEE
  9535                           wreg	equ	0xFE8
  9536                           indf2	equ	0xFDF
  9537                           postinc2	equ	0xFDE
  9538                           postdec2	equ	0xFDD
  9539                           fsr2h	equ	0xFDA
  9540                           fsr2l	equ	0xFD9
  9541                           status	equ	0xFD8
  9542                           
  9543 ;; *************** function _PWM1 *****************
  9544 ;; Defined at:
  9545 ;;		line 14 in file "motors.c"
  9546 ;; Parameters:    Size  Location     Type
  9547 ;;  duty            2   32[COMRAM] int 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;		None
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  1    wreg      void 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;Total ram usage:        4 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    2
  9566 ;; This function calls:
  9567 ;;		Nothing
  9568 ;; This function is called by:
  9569 ;;		_main
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           	psect	text36
  9574  0029C2                     __ptext36:
  9575                           	opt stack 0
  9576  0029C2                     _PWM1:
  9577                           	opt stack 28
  9578                           
  9579                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  9580                           
  9581                           ;incstack = 0
  9582  0029C2  C021  F023         	movff	PWM1@duty,??_PWM1
  9583  0029C6  0E01               	movlw	1
  9584  0029C8  1623               	andwf	??_PWM1,f,c
  9585  0029CA  3A23               	swapf	??_PWM1,f,c
  9586  0029CC  50BD               	movf	4029,w,c	;volatile
  9587  0029CE  1823               	xorwf	??_PWM1,w,c
  9588  0029D0  0BEF               	andlw	-17
  9589  0029D2  1823               	xorwf	??_PWM1,w,c
  9590  0029D4  6EBD               	movwf	4029,c	;volatile
  9591                           
  9592                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  9593  0029D6  3422               	rlcf	PWM1@duty+1,w,c
  9594  0029D8  3022               	rrcf	PWM1@duty+1,w,c
  9595  0029DA  6E24               	movwf	(??_PWM1+1)& (0+255),c
  9596  0029DC  3021               	rrcf	PWM1@duty,w,c
  9597  0029DE  6E23               	movwf	??_PWM1& (0+255),c
  9598  0029E0  0E01               	movlw	1
  9599  0029E2  1623               	andwf	??_PWM1,f,c
  9600  0029E4  3A23               	swapf	??_PWM1,f,c
  9601  0029E6  4623               	rlncf	??_PWM1,f,c
  9602  0029E8  50BD               	movf	4029,w,c	;volatile
  9603  0029EA  1823               	xorwf	??_PWM1,w,c
  9604  0029EC  0BDF               	andlw	-33
  9605  0029EE  1823               	xorwf	??_PWM1,w,c
  9606  0029F0  6EBD               	movwf	4029,c	;volatile
  9607                           
  9608                           ;motors.c: 24: CCPR1L = (duty >> 2);
  9609  0029F2  C021  F023         	movff	PWM1@duty,??_PWM1
  9610  0029F6  C022  F024         	movff	PWM1@duty+1,??_PWM1+1
  9611  0029FA  3424               	rlcf	??_PWM1+1,w,c
  9612  0029FC  3224               	rrcf	??_PWM1+1,f,c
  9613  0029FE  3223               	rrcf	??_PWM1,f,c
  9614  002A00  3424               	rlcf	??_PWM1+1,w,c
  9615  002A02  3224               	rrcf	??_PWM1+1,f,c
  9616  002A04  3223               	rrcf	??_PWM1,f,c
  9617  002A06  5023               	movf	??_PWM1,w,c
  9618  002A08  6EBE               	movwf	4030,c	;volatile
  9619  002A0A  0012               	return		;funcret
  9620  002A0C                     __end_of_PWM1:
  9621                           	opt stack 0
  9622                           tblptru	equ	0xFF8
  9623                           tblptrh	equ	0xFF7
  9624                           tblptrl	equ	0xFF6
  9625                           tablat	equ	0xFF5
  9626                           prodh	equ	0xFF4
  9627                           prodl	equ	0xFF3
  9628                           intcon	equ	0xFF2
  9629                           intcon2	equ	0xFF1
  9630                           postinc0	equ	0xFEE
  9631                           wreg	equ	0xFE8
  9632                           indf2	equ	0xFDF
  9633                           postinc2	equ	0xFDE
  9634                           postdec2	equ	0xFDD
  9635                           fsr2h	equ	0xFDA
  9636                           fsr2l	equ	0xFD9
  9637                           status	equ	0xFD8
  9638                           
  9639 ;; *************** function _handler *****************
  9640 ;; Defined at:
  9641 ;;		line 31 in file "main.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  1    wreg      void 
  9648 ;; Registers used:
  9649 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9657 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;Total ram usage:       18 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    1
  9662 ;; This function calls:
  9663 ;;		___awdiv
  9664 ;;		_updateS2
  9665 ;;		i2___wmul
  9666 ;;		i2_startTMR1
  9667 ;;		i2_updateS1
  9668 ;;		i2_updateS3
  9669 ;; This function is called by:
  9670 ;;		Interrupt level 2
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           	psect	intcode
  9675  000008                     __pintcode:
  9676                           	opt stack 0
  9677  000008                     _handler:
  9678                           	opt stack 25
  9679                           
  9680                           ;incstack = 0
  9681  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9682  00000A  ED6D  F00D         	call	int_func,f	;refresh shadow registers
  9683                           tblptru	equ	0xFF8
  9684                           tblptrh	equ	0xFF7
  9685                           tblptrl	equ	0xFF6
  9686                           tablat	equ	0xFF5
  9687                           prodh	equ	0xFF4
  9688                           prodl	equ	0xFF3
  9689                           intcon	equ	0xFF2
  9690                           intcon2	equ	0xFF1
  9691                           postinc0	equ	0xFEE
  9692                           wreg	equ	0xFE8
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700                           	psect	intcode_body
  9701  001ADA                     __pintcode_body:
  9702                           	opt stack 25
  9703  001ADA                     int_func:
  9704                           	opt stack 25
  9705  001ADA  0006               	pop		; remove dummy address from shadow register refresh
  9706  001ADC  CFFA F011          	movff	pclath,??_handler+2
  9707  001AE0  CFFB F012          	movff	pclatu,??_handler+3
  9708  001AE4  CFE9 F013          	movff	fsr0l,??_handler+4
  9709  001AE8  CFEA F014          	movff	fsr0h,??_handler+5
  9710  001AEC  CFE1 F015          	movff	fsr1l,??_handler+6
  9711  001AF0  CFE2 F016          	movff	fsr1h,??_handler+7
  9712  001AF4  CFD9 F017          	movff	fsr2l,??_handler+8
  9713  001AF8  CFDA F018          	movff	fsr2h,??_handler+9
  9714  001AFC  CFF3 F019          	movff	prodl,??_handler+10
  9715  001B00  CFF4 F01A          	movff	prodh,??_handler+11
  9716  001B04  CFF6 F01B          	movff	tblptrl,??_handler+12
  9717  001B08  CFF7 F01C          	movff	tblptrh,??_handler+13
  9718  001B0C  CFF8 F01D          	movff	tblptru,??_handler+14
  9719  001B10  CFF5 F01E          	movff	tablat,??_handler+15
  9720                           
  9721                           ;main.c: 33: (INTCONbits.GIE = 0);
  9722  001B14  9EF2               	bcf	intcon,7,c	;volatile
  9723                           
  9724                           ;main.c: 34: if(TMR0IF){
  9725  001B16  A4F2               	btfss	intcon,2,c	;volatile
  9726  001B18  D00E               	goto	i2l4562
  9727                           
  9728                           ;main.c: 35: TMR0IF = 0;
  9729  001B1A  94F2               	bcf	intcon,2,c	;volatile
  9730                           
  9731                           ;main.c: 36: seconds++;
  9732  001B1C  0100               	movlb	0	; () banked
  9733  001B1E  4BBC               	infsnz	_seconds& (0+255),f,b
  9734  001B20  2BBD               	incf	(_seconds+1)& (0+255),f,b
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 37: TMR0ON = 0;
  9738  001B22  9ED5               	bcf	4053,7,c	;volatile
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;main.c: 40: T0CON = 0b00010111;
  9742  001B24  0E17               	movlw	23
  9743  001B26  6ED5               	movwf	4053,c	;volatile
  9744                           
  9745                           ; BSR set to: 0
  9746                           ;main.c: 41: TMR0H = 0b10000101;
  9747  001B28  0E85               	movlw	133
  9748  001B2A  6ED7               	movwf	4055,c	;volatile
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;main.c: 42: TMR0L = 0b10101110;
  9752  001B2C  0EAE               	movlw	174
  9753  001B2E  6ED6               	movwf	4054,c	;volatile
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;main.c: 43: T0CON = T0CON | 0b10000000;
  9757  001B30  50D5               	movf	4053,w,c	;volatile
  9758  001B32  0980               	iorlw	128
  9759  001B34  6ED5               	movwf	4053,c	;volatile
  9760  001B36                     i2l4562:
  9761                           
  9762                           ;main.c: 44: }
  9763                           ;main.c: 46: if(TMR1IF){
  9764  001B36  A09E               	btfss	3998,0,c	;volatile
  9765  001B38  D0D7               	goto	i2l185
  9766                           
  9767                           ;main.c: 47: TMR1IF = 0;
  9768  001B3A  909E               	bcf	3998,0,c	;volatile
  9769                           
  9770                           ;main.c: 48: updateS1(S1mode);
  9771  001B3C  C05B  F001         	movff	_S1mode,i2updateS1@mode
  9772  001B40  C05C  F002         	movff	_S1mode+1,i2updateS1@mode+1
  9773  001B44  EC15  F00C         	call	i2_updateS1	;wreg free
  9774                           
  9775                           ;main.c: 49: updateS2(S2mode);
  9776  001B48  C059  F001         	movff	_S2mode,updateS2@mode
  9777  001B4C  C05A  F002         	movff	_S2mode+1,updateS2@mode+1
  9778  001B50  EC00  F012         	call	_updateS2	;wreg free
  9779                           
  9780                           ;main.c: 50: updateS3(S3mode);
  9781  001B54  C057  F001         	movff	_S3mode,i2updateS3@mode
  9782  001B58  C058  F002         	movff	_S3mode+1,i2updateS3@mode+1
  9783  001B5C  EC8C  F00F         	call	i2_updateS3	;wreg free
  9784                           
  9785                           ;main.c: 51: soupSteps ++;
  9786  001B60  4A55               	infsnz	_soupSteps,f,c
  9787  001B62  2A56               	incf	_soupSteps+1,f,c
  9788                           
  9789                           ;main.c: 52: sodaSteps ++;
  9790  001B64  4A53               	infsnz	_sodaSteps,f,c
  9791  001B66  2A54               	incf	_sodaSteps+1,f,c
  9792                           
  9793                           ;main.c: 54: if(((tabState == 0) && (sodaSteps == (sodaI*(sodaI+2)/2*100 + 480))) ||
  9794                           ;main.c: 55: ((tabState == 1) && (sodaSteps == (sodaI*(sodaI+1)/2*100 + 325)))){
  9795  001B68  5051               	movf	_tabState,w,c
  9796  001B6A  1052               	iorwf	_tabState+1,w,c
  9797  001B6C  A4D8               	btfss	status,2,c
  9798  001B6E  D033               	goto	i2l4576
  9799  001B70  0E00               	movlw	0
  9800  001B72  6E0A               	movwf	___awdiv@divisor+1,c
  9801  001B74  0E02               	movlw	2
  9802  001B76  6E09               	movwf	___awdiv@divisor,c
  9803  001B78  0E02               	movlw	2
  9804  001B7A  2449               	addwf	_sodaI,w,c
  9805  001B7C  6E01               	movwf	i2___wmul@multiplier,c
  9806  001B7E  0E00               	movlw	0
  9807  001B80  204A               	addwfc	_sodaI+1,w,c
  9808  001B82  6E02               	movwf	i2___wmul@multiplier+1,c
  9809  001B84  C049  F003         	movff	_sodaI,i2___wmul@multiplicand
  9810  001B88  C04A  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9811  001B8C  ECB3  F015         	call	i2___wmul	;wreg free
  9812  001B90  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9813  001B94  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9814  001B98  ECA1  F012         	call	___awdiv	;wreg free
  9815  001B9C  C007  F01F         	movff	?___awdiv,_handler$1821
  9816  001BA0  C008  F020         	movff	?___awdiv+1,_handler$1821+1
  9817  001BA4  0EE0               	movlw	224
  9818  001BA6  6E0F               	movwf	??_handler& (0+255),c
  9819  001BA8  0E01               	movlw	1
  9820  001BAA  6E10               	movwf	(??_handler+1)& (0+255),c
  9821  001BAC  C01F  F001         	movff	_handler$1821,i2___wmul@multiplier
  9822  001BB0  C020  F002         	movff	_handler$1821+1,i2___wmul@multiplier+1
  9823  001BB4  0E00               	movlw	0
  9824  001BB6  6E04               	movwf	i2___wmul@multiplicand+1,c
  9825  001BB8  0E64               	movlw	100
  9826  001BBA  6E03               	movwf	i2___wmul@multiplicand,c
  9827  001BBC  ECB3  F015         	call	i2___wmul	;wreg free
  9828  001BC0  500F               	movf	??_handler,w,c
  9829  001BC2  2601               	addwf	?i2___wmul,f,c
  9830  001BC4  5010               	movf	??_handler+1,w,c
  9831  001BC6  2202               	addwfc	?i2___wmul+1,f,c
  9832  001BC8  5053               	movf	_sodaSteps,w,c
  9833  001BCA  1801               	xorwf	?i2___wmul,w,c
  9834  001BCC  E104               	bnz	i2l4576
  9835  001BCE  5054               	movf	_sodaSteps+1,w,c
  9836  001BD0  1802               	xorwf	?i2___wmul+1,w,c
  9837  001BD2  B4D8               	btfsc	status,2,c
  9838  001BD4  D037               	goto	i2l4580
  9839  001BD6                     i2l4576:
  9840  001BD6  0451               	decf	_tabState,w,c
  9841  001BD8  1052               	iorwf	_tabState+1,w,c
  9842  001BDA  A4D8               	btfss	status,2,c
  9843  001BDC  D041               	goto	i2l4588
  9844  001BDE  0E00               	movlw	0
  9845  001BE0  6E0A               	movwf	___awdiv@divisor+1,c
  9846  001BE2  0E02               	movlw	2
  9847  001BE4  6E09               	movwf	___awdiv@divisor,c
  9848  001BE6  0E01               	movlw	1
  9849  001BE8  2449               	addwf	_sodaI,w,c
  9850  001BEA  6E01               	movwf	i2___wmul@multiplier,c
  9851  001BEC  0E00               	movlw	0
  9852  001BEE  204A               	addwfc	_sodaI+1,w,c
  9853  001BF0  6E02               	movwf	i2___wmul@multiplier+1,c
  9854  001BF2  C049  F003         	movff	_sodaI,i2___wmul@multiplicand
  9855  001BF6  C04A  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9856  001BFA  ECB3  F015         	call	i2___wmul	;wreg free
  9857  001BFE  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9858  001C02  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9859  001C06  ECA1  F012         	call	___awdiv	;wreg free
  9860  001C0A  C007  F01F         	movff	?___awdiv,_handler$1821
  9861  001C0E  C008  F020         	movff	?___awdiv+1,_handler$1821+1
  9862  001C12  0E45               	movlw	69
  9863  001C14  6E0F               	movwf	??_handler& (0+255),c
  9864  001C16  0E01               	movlw	1
  9865  001C18  6E10               	movwf	(??_handler+1)& (0+255),c
  9866  001C1A  C01F  F001         	movff	_handler$1821,i2___wmul@multiplier
  9867  001C1E  C020  F002         	movff	_handler$1821+1,i2___wmul@multiplier+1
  9868  001C22  0E00               	movlw	0
  9869  001C24  6E04               	movwf	i2___wmul@multiplicand+1,c
  9870  001C26  0E64               	movlw	100
  9871  001C28  6E03               	movwf	i2___wmul@multiplicand,c
  9872  001C2A  ECB3  F015         	call	i2___wmul	;wreg free
  9873  001C2E  500F               	movf	??_handler,w,c
  9874  001C30  2601               	addwf	?i2___wmul,f,c
  9875  001C32  5010               	movf	??_handler+1,w,c
  9876  001C34  2202               	addwfc	?i2___wmul+1,f,c
  9877  001C36  5053               	movf	_sodaSteps,w,c
  9878  001C38  1801               	xorwf	?i2___wmul,w,c
  9879  001C3A  E112               	bnz	i2l4588
  9880  001C3C  5054               	movf	_sodaSteps+1,w,c
  9881  001C3E  1802               	xorwf	?i2___wmul+1,w,c
  9882  001C40  A4D8               	btfss	status,2,c
  9883  001C42  D00E               	goto	i2l4588
  9884  001C44                     i2l4580:
  9885                           
  9886                           ;main.c: 56: if(sodaAlign == 1){sodaAlign = 2;}
  9887  001C44  044F               	decf	_sodaAlign,w,c
  9888  001C46  1050               	iorwf	_sodaAlign+1,w,c
  9889  001C48  A4D8               	btfss	status,2,c
  9890  001C4A  D004               	goto	i2l4584
  9891  001C4C  0E00               	movlw	0
  9892  001C4E  6E50               	movwf	_sodaAlign+1,c
  9893  001C50  0E02               	movlw	2
  9894  001C52  D003               	goto	L16
  9895  001C54                     i2l4584:
  9896                           
  9897                           ;main.c: 57: else{sodaAlign = 1;}
  9898  001C54  0E00               	movlw	0
  9899  001C56  6E50               	movwf	_sodaAlign+1,c
  9900  001C58  0E01               	movlw	1
  9901  001C5A                     L16:
  9902  001C5A  6E4F               	movwf	_sodaAlign,c
  9903                           
  9904                           ;main.c: 58: sodaI++;
  9905  001C5C  4A49               	infsnz	_sodaI,f,c
  9906  001C5E  2A4A               	incf	_sodaI+1,f,c
  9907  001C60                     i2l4588:
  9908                           
  9909                           ;main.c: 59: }
  9910                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 420)){
  9911  001C60  0E00               	movlw	0
  9912  001C62  6E0A               	movwf	___awdiv@divisor+1,c
  9913  001C64  0E02               	movlw	2
  9914  001C66  6E09               	movwf	___awdiv@divisor,c
  9915  001C68  0E01               	movlw	1
  9916  001C6A  244B               	addwf	_soupI,w,c
  9917  001C6C  6E01               	movwf	i2___wmul@multiplier,c
  9918  001C6E  0E00               	movlw	0
  9919  001C70  204C               	addwfc	_soupI+1,w,c
  9920  001C72  6E02               	movwf	i2___wmul@multiplier+1,c
  9921  001C74  C04B  F003         	movff	_soupI,i2___wmul@multiplicand
  9922  001C78  C04C  F004         	movff	_soupI+1,i2___wmul@multiplicand+1
  9923  001C7C  ECB3  F015         	call	i2___wmul	;wreg free
  9924  001C80  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9925  001C84  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9926  001C88  ECA1  F012         	call	___awdiv	;wreg free
  9927  001C8C  C007  F01F         	movff	?___awdiv,_handler$1821
  9928  001C90  C008  F020         	movff	?___awdiv+1,_handler$1821+1
  9929                           
  9930                           ;main.c: 59: }
  9931                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 420)){
  9932  001C94  0EA4               	movlw	164
  9933  001C96  6E0F               	movwf	??_handler& (0+255),c
  9934  001C98  0E01               	movlw	1
  9935  001C9A  6E10               	movwf	(??_handler+1)& (0+255),c
  9936  001C9C  C01F  F001         	movff	_handler$1821,i2___wmul@multiplier
  9937  001CA0  C020  F002         	movff	_handler$1821+1,i2___wmul@multiplier+1
  9938  001CA4  0E00               	movlw	0
  9939  001CA6  6E04               	movwf	i2___wmul@multiplicand+1,c
  9940  001CA8  0E64               	movlw	100
  9941  001CAA  6E03               	movwf	i2___wmul@multiplicand,c
  9942  001CAC  ECB3  F015         	call	i2___wmul	;wreg free
  9943  001CB0  500F               	movf	??_handler,w,c
  9944  001CB2  2601               	addwf	?i2___wmul,f,c
  9945  001CB4  5010               	movf	??_handler+1,w,c
  9946  001CB6  2202               	addwfc	?i2___wmul+1,f,c
  9947  001CB8  5055               	movf	_soupSteps,w,c
  9948  001CBA  1801               	xorwf	?i2___wmul,w,c
  9949  001CBC  E112               	bnz	i2l4600
  9950  001CBE  5056               	movf	_soupSteps+1,w,c
  9951  001CC0  1802               	xorwf	?i2___wmul+1,w,c
  9952  001CC2  A4D8               	btfss	status,2,c
  9953  001CC4  D00E               	goto	i2l4600
  9954                           
  9955                           ;main.c: 62: if(soupAlign == 1){soupAlign = 2;}
  9956  001CC6  044D               	decf	_soupAlign,w,c
  9957  001CC8  104E               	iorwf	_soupAlign+1,w,c
  9958  001CCA  A4D8               	btfss	status,2,c
  9959  001CCC  D004               	goto	i2l4596
  9960  001CCE  0E00               	movlw	0
  9961  001CD0  6E4E               	movwf	_soupAlign+1,c
  9962  001CD2  0E02               	movlw	2
  9963  001CD4  D003               	goto	L17
  9964  001CD6                     i2l4596:
  9965                           
  9966                           ;main.c: 63: else{soupAlign = 1;}
  9967  001CD6  0E00               	movlw	0
  9968  001CD8  6E4E               	movwf	_soupAlign+1,c
  9969  001CDA  0E01               	movlw	1
  9970  001CDC                     L17:
  9971  001CDC  6E4D               	movwf	_soupAlign,c
  9972                           
  9973                           ;main.c: 64: soupI ++;
  9974  001CDE  4A4B               	infsnz	_soupI,f,c
  9975  001CE0  2A4C               	incf	_soupI+1,f,c
  9976  001CE2                     i2l4600:
  9977                           
  9978                           ;main.c: 65: }
  9979                           ;main.c: 66: TMR1ON = 0;
  9980  001CE2  90CD               	bcf	4045,0,c	;volatile
  9981                           
  9982                           ;main.c: 68: startTMR1();
  9983  001CE4  EC0E  F016         	call	i2_startTMR1	;wreg free
  9984  001CE8                     i2l185:
  9985  001CE8  C01E  FFF5         	movff	??_handler+15,tablat
  9986  001CEC  C01D  FFF8         	movff	??_handler+14,tblptru
  9987  001CF0  C01C  FFF7         	movff	??_handler+13,tblptrh
  9988  001CF4  C01B  FFF6         	movff	??_handler+12,tblptrl
  9989  001CF8  C01A  FFF4         	movff	??_handler+11,prodh
  9990  001CFC  C019  FFF3         	movff	??_handler+10,prodl
  9991  001D00  C018  FFDA         	movff	??_handler+9,fsr2h
  9992  001D04  C017  FFD9         	movff	??_handler+8,fsr2l
  9993  001D08  C016  FFE2         	movff	??_handler+7,fsr1h
  9994  001D0C  C015  FFE1         	movff	??_handler+6,fsr1l
  9995  001D10  C014  FFEA         	movff	??_handler+5,fsr0h
  9996  001D14  C013  FFE9         	movff	??_handler+4,fsr0l
  9997  001D18  C012  FFFB         	movff	??_handler+3,pclatu
  9998  001D1C  C011  FFFA         	movff	??_handler+2,pclath
  9999  001D20  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10000  001D22  0011               	retfie		f
 10001  001D24                     __end_of_handler:
 10002                           	opt stack 0
 10003                           pclatu	equ	0xFFB
 10004                           pclath	equ	0xFFA
 10005                           tblptru	equ	0xFF8
 10006                           tblptrh	equ	0xFF7
 10007                           tblptrl	equ	0xFF6
 10008                           tablat	equ	0xFF5
 10009                           prodh	equ	0xFF4
 10010                           prodl	equ	0xFF3
 10011                           intcon	equ	0xFF2
 10012                           intcon2	equ	0xFF1
 10013                           postinc0	equ	0xFEE
 10014                           fsr0h	equ	0xFEA
 10015                           fsr0l	equ	0xFE9
 10016                           wreg	equ	0xFE8
 10017                           fsr1h	equ	0xFE2
 10018                           fsr1l	equ	0xFE1
 10019                           indf2	equ	0xFDF
 10020                           postinc2	equ	0xFDE
 10021                           postdec2	equ	0xFDD
 10022                           fsr2h	equ	0xFDA
 10023                           fsr2l	equ	0xFD9
 10024                           status	equ	0xFD8
 10025                           
 10026 ;; *************** function i2_updateS3 *****************
 10027 ;; Defined at:
 10028 ;;		line 191 in file "motors.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;  mode            2    0[COMRAM] int 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		wreg, status,2, status,0
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10045 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10046 ;;Total ram usage:        3 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; This function calls:
 10049 ;;		Nothing
 10050 ;; This function is called by:
 10051 ;;		_handler
 10052 ;; This function uses a non-reentrant model
 10053 ;;
 10054                           
 10055                           	psect	text38
 10056  001F18                     __ptext38:
 10057                           	opt stack 0
 10058  001F18                     i2_updateS3:
 10059                           	opt stack 25
 10060                           
 10061                           ;motors.c: 192: _delay((unsigned long)((5)*(32000000/4000.0)));
 10062                           
 10063                           ;incstack = 0
 10064  001F18  0E34               	movlw	52
 10065  001F1A  6E03               	movwf	??i2_updateS3& (0+255),c
 10066  001F1C  0EF2               	movlw	242
 10067  001F1E                     i2u826_47:
 10068  001F1E  2EE8               	decfsz	wreg,f,c
 10069  001F20  D7FE               	bra	i2u826_47
 10070  001F22  2E03               	decfsz	??i2_updateS3& (0+255),f,c
 10071  001F24  D7FC               	bra	i2u826_47
 10072                           
 10073                           ;motors.c: 194: if(mode == 0){
 10074  001F26  5001               	movf	i2updateS3@mode,w,c
 10075  001F28  1002               	iorwf	i2updateS3@mode+1,w,c
 10076  001F2A  A4D8               	btfss	status,2,c
 10077  001F2C  D005               	goto	i2l4452
 10078                           
 10079                           ;motors.c: 195: LATEbits.LATE2 = 0;
 10080  001F2E  948D               	bcf	3981,2,c	;volatile
 10081                           
 10082                           ;motors.c: 196: LATEbits.LATE1 = 0;
 10083  001F30  928D               	bcf	3981,1,c	;volatile
 10084                           
 10085                           ;motors.c: 197: LATAbits.LATA4 = 0;
 10086  001F32  9889               	bcf	3977,4,c	;volatile
 10087                           
 10088                           ;motors.c: 198: LATDbits.LATD0 = 0;
 10089  001F34  908C               	bcf	3980,0,c	;volatile
 10090                           
 10091                           ;motors.c: 199: }
 10092  001F36  0012               	return	
 10093  001F38                     i2l4452:
 10094                           
 10095                           ;motors.c: 200: else if(mode == 4){
 10096  001F38  0E04               	movlw	4
 10097  001F3A  1801               	xorwf	i2updateS3@mode,w,c
 10098  001F3C  1002               	iorwf	i2updateS3@mode+1,w,c
 10099  001F3E  B4D8               	btfsc	status,2,c
 10100  001F40  0012               	return	
 10101                           
 10102                           ;motors.c: 203: else if(mode == 3){
 10103                           
 10104                           ;motors.c: 202: }
 10105  001F42  0E03               	movlw	3
 10106  001F44  1801               	xorwf	i2updateS3@mode,w,c
 10107  001F46  1002               	iorwf	i2updateS3@mode+1,w,c
 10108  001F48  A4D8               	btfss	status,2,c
 10109  001F4A  D042               	goto	i2l4480
 10110                           
 10111                           ;motors.c: 204: t3++;
 10112  001F4C  4A41               	infsnz	_t3,f,c
 10113  001F4E  2A42               	incf	_t3+1,f,c
 10114                           
 10115                           ;motors.c: 205: if (t3>8) {t3=1;}
 10116  001F50  BE42               	btfsc	_t3+1,7,c
 10117  001F52  D00A               	goto	i2l4464
 10118  001F54  5042               	movf	_t3+1,w,c
 10119  001F56  E104               	bnz	i2u548_40
 10120  001F58  0E09               	movlw	9
 10121  001F5A  5C41               	subwf	_t3,w,c
 10122  001F5C  A0D8               	btfss	status,0,c
 10123  001F5E  D004               	goto	i2l4464
 10124  001F60                     i2u548_40:
 10125  001F60  0E00               	movlw	0
 10126  001F62  6E42               	movwf	_t3+1,c
 10127  001F64  0E01               	movlw	1
 10128  001F66  6E41               	movwf	_t3,c
 10129  001F68                     i2l4464:
 10130                           
 10131                           ;motors.c: 206: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
 10132  001F68  0441               	decf	_t3,w,c
 10133  001F6A  1042               	iorwf	_t3+1,w,c
 10134  001F6C  B4D8               	btfsc	status,2,c
 10135  001F6E  D005               	goto	i2l605
 10136  001F70  0E08               	movlw	8
 10137  001F72  1841               	xorwf	_t3,w,c
 10138  001F74  1042               	iorwf	_t3+1,w,c
 10139  001F76  A4D8               	btfss	status,2,c
 10140  001F78  D002               	goto	i2l603
 10141  001F7A                     i2l605:
 10142  001F7A  848D               	bsf	3981,2,c	;volatile
 10143  001F7C  D001               	goto	i2l4468
 10144  001F7E                     i2l603:
 10145                           
 10146                           ;motors.c: 207: else{LATEbits.LATE2 = 0;}
 10147  001F7E  948D               	bcf	3981,2,c	;volatile
 10148  001F80                     i2l4468:
 10149                           
 10150                           ;motors.c: 208: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
 10151  001F80  0E02               	movlw	2
 10152  001F82  1841               	xorwf	_t3,w,c
 10153  001F84  1042               	iorwf	_t3+1,w,c
 10154  001F86  B4D8               	btfsc	status,2,c
 10155  001F88  D005               	goto	i2l609
 10156  001F8A  0E07               	movlw	7
 10157  001F8C  1841               	xorwf	_t3,w,c
 10158  001F8E  1042               	iorwf	_t3+1,w,c
 10159  001F90  A4D8               	btfss	status,2,c
 10160  001F92  D002               	goto	i2l607
 10161  001F94                     i2l609:
 10162  001F94  828D               	bsf	3981,1,c	;volatile
 10163  001F96  D001               	goto	i2l4472
 10164  001F98                     i2l607:
 10165                           
 10166                           ;motors.c: 209: else{LATEbits.LATE1 = 0;}
 10167  001F98  928D               	bcf	3981,1,c	;volatile
 10168  001F9A                     i2l4472:
 10169                           
 10170                           ;motors.c: 210: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
 10171  001F9A  0E03               	movlw	3
 10172  001F9C  1841               	xorwf	_t3,w,c
 10173  001F9E  1042               	iorwf	_t3+1,w,c
 10174  001FA0  B4D8               	btfsc	status,2,c
 10175  001FA2  D005               	goto	i2l613
 10176  001FA4  0E06               	movlw	6
 10177  001FA6  1841               	xorwf	_t3,w,c
 10178  001FA8  1042               	iorwf	_t3+1,w,c
 10179  001FAA  A4D8               	btfss	status,2,c
 10180  001FAC  D002               	goto	i2l611
 10181  001FAE                     i2l613:
 10182  001FAE  8889               	bsf	3977,4,c	;volatile
 10183  001FB0  D001               	goto	i2l4476
 10184  001FB2                     i2l611:
 10185                           
 10186                           ;motors.c: 211: else{LATAbits.LATA4 = 0;}
 10187  001FB2  9889               	bcf	3977,4,c	;volatile
 10188  001FB4                     i2l4476:
 10189                           
 10190                           ;motors.c: 212: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
 10191  001FB4  0E04               	movlw	4
 10192  001FB6  1841               	xorwf	_t3,w,c
 10193  001FB8  1042               	iorwf	_t3+1,w,c
 10194  001FBA  B4D8               	btfsc	status,2,c
 10195  001FBC  D005               	goto	i2l617
 10196  001FBE  0E05               	movlw	5
 10197  001FC0  1841               	xorwf	_t3,w,c
 10198  001FC2  1042               	iorwf	_t3+1,w,c
 10199  001FC4  A4D8               	btfss	status,2,c
 10200  001FC6  D002               	goto	i2l615
 10201  001FC8                     i2l617:
 10202  001FC8  808C               	bsf	3980,0,c	;volatile
 10203  001FCA  0012               	return	
 10204  001FCC                     i2l615:
 10205                           
 10206                           ;motors.c: 213: else{LATDbits.LATD0 = 0;}
 10207  001FCC  908C               	bcf	3980,0,c	;volatile
 10208                           
 10209                           ;motors.c: 214: }
 10210  001FCE  0012               	return	
 10211  001FD0                     i2l4480:
 10212                           
 10213                           ;motors.c: 215: else if(mode == 5){
 10214  001FD0  0E05               	movlw	5
 10215  001FD2  1801               	xorwf	i2updateS3@mode,w,c
 10216  001FD4  1002               	iorwf	i2updateS3@mode+1,w,c
 10217  001FD6  A4D8               	btfss	status,2,c
 10218  001FD8  D042               	goto	i2l4504
 10219                           
 10220                           ;motors.c: 216: t3++;
 10221  001FDA  4A41               	infsnz	_t3,f,c
 10222  001FDC  2A42               	incf	_t3+1,f,c
 10223                           
 10224                           ;motors.c: 217: if (t3>8) {t3=1;}
 10225  001FDE  BE42               	btfsc	_t3+1,7,c
 10226  001FE0  D00A               	goto	i2l4488
 10227  001FE2  5042               	movf	_t3+1,w,c
 10228  001FE4  E104               	bnz	i2u558_40
 10229  001FE6  0E09               	movlw	9
 10230  001FE8  5C41               	subwf	_t3,w,c
 10231  001FEA  A0D8               	btfss	status,0,c
 10232  001FEC  D004               	goto	i2l4488
 10233  001FEE                     i2u558_40:
 10234  001FEE  0E00               	movlw	0
 10235  001FF0  6E42               	movwf	_t3+1,c
 10236  001FF2  0E01               	movlw	1
 10237  001FF4  6E41               	movwf	_t3,c
 10238  001FF6                     i2l4488:
 10239                           
 10240                           ;motors.c: 218: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
 10241  001FF6  0441               	decf	_t3,w,c
 10242  001FF8  1042               	iorwf	_t3+1,w,c
 10243  001FFA  B4D8               	btfsc	status,2,c
 10244  001FFC  D005               	goto	i2l624
 10245  001FFE  0E08               	movlw	8
 10246  002000  1841               	xorwf	_t3,w,c
 10247  002002  1042               	iorwf	_t3+1,w,c
 10248  002004  A4D8               	btfss	status,2,c
 10249  002006  D002               	goto	i2l622
 10250  002008                     i2l624:
 10251  002008  8889               	bsf	3977,4,c	;volatile
 10252  00200A  D001               	goto	i2l4492
 10253  00200C                     i2l622:
 10254                           
 10255                           ;motors.c: 219: else{LATAbits.LATA4 = 0;}
 10256  00200C  9889               	bcf	3977,4,c	;volatile
 10257  00200E                     i2l4492:
 10258                           
 10259                           ;motors.c: 220: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
 10260  00200E  0E02               	movlw	2
 10261  002010  1841               	xorwf	_t3,w,c
 10262  002012  1042               	iorwf	_t3+1,w,c
 10263  002014  B4D8               	btfsc	status,2,c
 10264  002016  D005               	goto	i2l628
 10265  002018  0E07               	movlw	7
 10266  00201A  1841               	xorwf	_t3,w,c
 10267  00201C  1042               	iorwf	_t3+1,w,c
 10268  00201E  A4D8               	btfss	status,2,c
 10269  002020  D002               	goto	i2l626
 10270  002022                     i2l628:
 10271  002022  808C               	bsf	3980,0,c	;volatile
 10272  002024  D001               	goto	i2l4496
 10273  002026                     i2l626:
 10274                           
 10275                           ;motors.c: 221: else{LATDbits.LATD0 = 0;}
 10276  002026  908C               	bcf	3980,0,c	;volatile
 10277  002028                     i2l4496:
 10278                           
 10279                           ;motors.c: 222: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
 10280  002028  0E03               	movlw	3
 10281  00202A  1841               	xorwf	_t3,w,c
 10282  00202C  1042               	iorwf	_t3+1,w,c
 10283  00202E  B4D8               	btfsc	status,2,c
 10284  002030  D005               	goto	i2l632
 10285  002032  0E06               	movlw	6
 10286  002034  1841               	xorwf	_t3,w,c
 10287  002036  1042               	iorwf	_t3+1,w,c
 10288  002038  A4D8               	btfss	status,2,c
 10289  00203A  D002               	goto	i2l630
 10290  00203C                     i2l632:
 10291  00203C  848D               	bsf	3981,2,c	;volatile
 10292  00203E  D001               	goto	i2l4500
 10293  002040                     i2l630:
 10294                           
 10295                           ;motors.c: 223: else{LATEbits.LATE2 = 0;}
 10296  002040  948D               	bcf	3981,2,c	;volatile
 10297  002042                     i2l4500:
 10298                           
 10299                           ;motors.c: 224: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
 10300  002042  0E04               	movlw	4
 10301  002044  1841               	xorwf	_t3,w,c
 10302  002046  1042               	iorwf	_t3+1,w,c
 10303  002048  B4D8               	btfsc	status,2,c
 10304  00204A  D005               	goto	i2l636
 10305  00204C  0E05               	movlw	5
 10306  00204E  1841               	xorwf	_t3,w,c
 10307  002050  1042               	iorwf	_t3+1,w,c
 10308  002052  A4D8               	btfss	status,2,c
 10309  002054  D002               	goto	i2l634
 10310  002056                     i2l636:
 10311  002056  828D               	bsf	3981,1,c	;volatile
 10312  002058  0012               	return	
 10313  00205A                     i2l634:
 10314                           
 10315                           ;motors.c: 225: else{LATEbits.LATE1 = 0;}
 10316  00205A  928D               	bcf	3981,1,c	;volatile
 10317                           
 10318                           ;motors.c: 226: }
 10319  00205C  0012               	return	
 10320  00205E                     i2l4504:
 10321                           
 10322                           ;motors.c: 227: else{
 10323                           ;motors.c: 228: if(mode == 1){
 10324  00205E  0401               	decf	i2updateS3@mode,w,c
 10325  002060  1002               	iorwf	i2updateS3@mode+1,w,c
 10326  002062  A4D8               	btfss	status,2,c
 10327  002064  D013               	goto	i2l4512
 10328                           
 10329                           ;motors.c: 229: s3 ++;
 10330  002066  0100               	movlb	0	; () banked
 10331  002068  4BBE               	infsnz	_s3& (0+255),f,b
 10332  00206A  2BBF               	incf	(_s3+1)& (0+255),f,b
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;motors.c: 230: if (s3>4) {s3=1;}
 10336  00206C  0100               	movlb	0	; () banked
 10337  00206E  BFBF               	btfsc	(_s3+1)& (0+255),7,b
 10338  002070  D025               	goto	i2l4520
 10339  002072  0100               	movlb	0	; () banked
 10340  002074  51BF               	movf	(_s3+1)& (0+255),w,b
 10341  002076  E105               	bnz	i2u568_40
 10342  002078  0E05               	movlw	5
 10343  00207A  0100               	movlb	0	; () banked
 10344  00207C  5DBE               	subwf	_s3& (0+255),w,b
 10345  00207E  A0D8               	btfss	status,0,c
 10346  002080  D01D               	goto	i2l4520
 10347  002082                     i2u568_40:
 10348                           
 10349                           ; BSR set to: 0
 10350  002082  0E00               	movlw	0
 10351  002084  0100               	movlb	0	; () banked
 10352  002086  6FBF               	movwf	(_s3+1)& (0+255),b
 10353  002088  0E01               	movlw	1
 10354  00208A  D017               	goto	L18
 10355  00208C                     i2l4512:
 10356                           
 10357                           ;motors.c: 232: else if(mode == 2){
 10358  00208C  0E02               	movlw	2
 10359  00208E  1801               	xorwf	i2updateS3@mode,w,c
 10360  002090  1002               	iorwf	i2updateS3@mode+1,w,c
 10361  002092  A4D8               	btfss	status,2,c
 10362  002094  D013               	goto	i2l4520
 10363                           
 10364                           ;motors.c: 233: s3 --;
 10365  002096  0100               	movlb	0	; () banked
 10366  002098  07BE               	decf	_s3& (0+255),f,b
 10367  00209A  A0D8               	btfss	status,0,c
 10368  00209C  07BF               	decf	(_s3+1)& (0+255),f,b
 10369                           
 10370                           ; BSR set to: 0
 10371                           ;motors.c: 234: if (s3<1) {s3=4;}
 10372  00209E  0100               	movlb	0	; () banked
 10373  0020A0  BFBF               	btfsc	(_s3+1)& (0+255),7,b
 10374  0020A2  D007               	goto	i2l4518
 10375  0020A4  0100               	movlb	0	; () banked
 10376  0020A6  51BF               	movf	(_s3+1)& (0+255),w,b
 10377  0020A8  E109               	bnz	i2l4520
 10378  0020AA  0100               	movlb	0	; () banked
 10379  0020AC  05BE               	decf	_s3& (0+255),w,b
 10380  0020AE  B0D8               	btfsc	status,0,c
 10381  0020B0  D005               	goto	i2l4520
 10382  0020B2                     i2l4518:
 10383                           
 10384                           ; BSR set to: 0
 10385  0020B2  0E00               	movlw	0
 10386  0020B4  0100               	movlb	0	; () banked
 10387  0020B6  6FBF               	movwf	(_s3+1)& (0+255),b
 10388  0020B8  0E04               	movlw	4
 10389  0020BA                     L18:
 10390  0020BA  6FBE               	movwf	_s3& (0+255),b
 10391  0020BC                     i2l4520:
 10392                           
 10393                           ;motors.c: 235: }
 10394                           ;motors.c: 236: if (s3 == 1){LATEbits.LATE2 = 1;}
 10395  0020BC  0100               	movlb	0	; () banked
 10396  0020BE  05BE               	decf	_s3& (0+255),w,b
 10397  0020C0  0100               	movlb	0	; () banked
 10398  0020C2  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10399  0020C4  A4D8               	btfss	status,2,c
 10400  0020C6  D002               	goto	i2l644
 10401                           
 10402                           ; BSR set to: 0
 10403  0020C8  848D               	bsf	3981,2,c	;volatile
 10404  0020CA  D001               	goto	i2l4524
 10405  0020CC                     i2l644:
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;motors.c: 237: else{LATEbits.LATE2 = 0;}
 10409  0020CC  948D               	bcf	3981,2,c	;volatile
 10410  0020CE                     i2l4524:
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;motors.c: 238: if (s3 == 2){LATEbits.LATE1 = 1;}
 10414  0020CE  0E02               	movlw	2
 10415  0020D0  0100               	movlb	0	; () banked
 10416  0020D2  19BE               	xorwf	_s3& (0+255),w,b
 10417  0020D4  0100               	movlb	0	; () banked
 10418  0020D6  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10419  0020D8  A4D8               	btfss	status,2,c
 10420  0020DA  D002               	goto	i2l646
 10421                           
 10422                           ; BSR set to: 0
 10423  0020DC  828D               	bsf	3981,1,c	;volatile
 10424  0020DE  D001               	goto	i2l4528
 10425  0020E0                     i2l646:
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;motors.c: 239: else{LATEbits.LATE1 = 0;}
 10429  0020E0  928D               	bcf	3981,1,c	;volatile
 10430  0020E2                     i2l4528:
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;motors.c: 240: if (s3 == 3){LATAbits.LATA4 = 1;}
 10434  0020E2  0E03               	movlw	3
 10435  0020E4  0100               	movlb	0	; () banked
 10436  0020E6  19BE               	xorwf	_s3& (0+255),w,b
 10437  0020E8  0100               	movlb	0	; () banked
 10438  0020EA  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10439  0020EC  A4D8               	btfss	status,2,c
 10440  0020EE  D002               	goto	i2l648
 10441                           
 10442                           ; BSR set to: 0
 10443  0020F0  8889               	bsf	3977,4,c	;volatile
 10444  0020F2  D001               	goto	i2l4532
 10445  0020F4                     i2l648:
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;motors.c: 241: else{LATAbits.LATA4 = 0;}
 10449  0020F4  9889               	bcf	3977,4,c	;volatile
 10450  0020F6                     i2l4532:
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;motors.c: 242: if (s3 == 4){LATDbits.LATD0 = 1;}
 10454  0020F6  0E04               	movlw	4
 10455  0020F8  0100               	movlb	0	; () banked
 10456  0020FA  19BE               	xorwf	_s3& (0+255),w,b
 10457  0020FC  0100               	movlb	0	; () banked
 10458  0020FE  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10459  002100  A4D8               	btfss	status,2,c
 10460  002102  D002               	goto	i2l650
 10461                           
 10462                           ; BSR set to: 0
 10463  002104  808C               	bsf	3980,0,c	;volatile
 10464  002106  0012               	return	
 10465  002108                     i2l650:
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;motors.c: 243: else{LATDbits.LATD0 = 0;}
 10469  002108  908C               	bcf	3980,0,c	;volatile
 10470                           
 10471                           ; BSR set to: 0
 10472                           
 10473                           ; BSR set to: 0
 10474                           
 10475                           ; BSR set to: 0
 10476                           
 10477                           ; BSR set to: 0
 10478  00210A  0012               	return	
 10479  00210C                     __end_ofi2_updateS3:
 10480                           	opt stack 0
 10481                           pclatu	equ	0xFFB
 10482                           pclath	equ	0xFFA
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           intcon2	equ	0xFF1
 10491                           postinc0	equ	0xFEE
 10492                           fsr0h	equ	0xFEA
 10493                           fsr0l	equ	0xFE9
 10494                           wreg	equ	0xFE8
 10495                           fsr1h	equ	0xFE2
 10496                           fsr1l	equ	0xFE1
 10497                           indf2	equ	0xFDF
 10498                           postinc2	equ	0xFDE
 10499                           postdec2	equ	0xFDD
 10500                           fsr2h	equ	0xFDA
 10501                           fsr2l	equ	0xFD9
 10502                           status	equ	0xFD8
 10503                           
 10504 ;; *************** function i2_updateS1 *****************
 10505 ;; Defined at:
 10506 ;;		line 75 in file "motors.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  mode            2    0[COMRAM] int 
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;		None
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      void 
 10513 ;; Registers used:
 10514 ;;		wreg, status,2, status,0
 10515 ;; Tracked objects:
 10516 ;;		On entry : 0/0
 10517 ;;		On exit  : 0/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;Total ram usage:        3 bytes
 10525 ;; Hardware stack levels used:    1
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_handler
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           	psect	text39
 10534  00182A                     __ptext39:
 10535                           	opt stack 0
 10536  00182A                     i2_updateS1:
 10537                           	opt stack 25
 10538                           
 10539                           ;motors.c: 76: _delay((unsigned long)((5)*(32000000/4000.0)));
 10540                           
 10541                           ;incstack = 0
 10542  00182A  0E34               	movlw	52
 10543  00182C  6E03               	movwf	??i2_updateS1& (0+255),c
 10544  00182E  0EF2               	movlw	242
 10545  001830                     i2u827_47:
 10546  001830  2EE8               	decfsz	wreg,f,c
 10547  001832  D7FE               	bra	i2u827_47
 10548  001834  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10549  001836  D7FC               	bra	i2u827_47
 10550                           
 10551                           ;motors.c: 78: if(mode == 0){
 10552  001838  5001               	movf	i2updateS1@mode,w,c
 10553  00183A  1002               	iorwf	i2updateS1@mode+1,w,c
 10554  00183C  A4D8               	btfss	status,2,c
 10555  00183E  D005               	goto	i2l4328
 10556                           
 10557                           ;motors.c: 79: LATDbits.LATD1 = 0;
 10558  001840  928C               	bcf	3980,1,c	;volatile
 10559                           
 10560                           ;motors.c: 80: LATBbits.LATB3 = 0;
 10561  001842  968A               	bcf	3978,3,c	;volatile
 10562                           
 10563                           ;motors.c: 81: LATBbits.LATB2 = 0;
 10564  001844  948A               	bcf	3978,2,c	;volatile
 10565                           
 10566                           ;motors.c: 82: LATBbits.LATB0 = 0;
 10567  001846  908A               	bcf	3978,0,c	;volatile
 10568                           
 10569                           ;motors.c: 83: }
 10570  001848  0012               	return	
 10571  00184A                     i2l4328:
 10572                           
 10573                           ;motors.c: 84: else if(mode == 3){
 10574  00184A  0E03               	movlw	3
 10575  00184C  1801               	xorwf	i2updateS1@mode,w,c
 10576  00184E  1002               	iorwf	i2updateS1@mode+1,w,c
 10577  001850  A4D8               	btfss	status,2,c
 10578  001852  D049               	goto	i2l4354
 10579                           
 10580                           ;motors.c: 85: t++;
 10581  001854  4A45               	infsnz	_t,f,c
 10582  001856  2A46               	incf	_t+1,f,c
 10583                           
 10584                           ;motors.c: 86: if (t>8) {t=1;}
 10585  001858  BE46               	btfsc	_t+1,7,c
 10586  00185A  D00A               	goto	i2l4336
 10587  00185C  5046               	movf	_t+1,w,c
 10588  00185E  E104               	bnz	i2u507_40
 10589  001860  0E09               	movlw	9
 10590  001862  5C45               	subwf	_t,w,c
 10591  001864  A0D8               	btfss	status,0,c
 10592  001866  D004               	goto	i2l4336
 10593  001868                     i2u507_40:
 10594  001868  0E00               	movlw	0
 10595  00186A  6E46               	movwf	_t+1,c
 10596  00186C  0E01               	movlw	1
 10597  00186E  6E45               	movwf	_t,c
 10598  001870                     i2l4336:
 10599                           
 10600                           ;motors.c: 87: _delay((unsigned long)((5)*(32000000/4000.0)));
 10601  001870  0E34               	movlw	52
 10602  001872  6E03               	movwf	??i2_updateS1& (0+255),c
 10603  001874  0EF2               	movlw	242
 10604  001876                     i2u828_47:
 10605  001876  2EE8               	decfsz	wreg,f,c
 10606  001878  D7FE               	bra	i2u828_47
 10607  00187A  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10608  00187C  D7FC               	bra	i2u828_47
 10609                           
 10610                           ;motors.c: 88: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
 10611  00187E  0445               	decf	_t,w,c
 10612  001880  1046               	iorwf	_t+1,w,c
 10613  001882  B4D8               	btfsc	status,2,c
 10614  001884  D005               	goto	i2l492
 10615  001886  0E08               	movlw	8
 10616  001888  1845               	xorwf	_t,w,c
 10617  00188A  1046               	iorwf	_t+1,w,c
 10618  00188C  A4D8               	btfss	status,2,c
 10619  00188E  D002               	goto	i2l490
 10620  001890                     i2l492:
 10621  001890  828C               	bsf	3980,1,c	;volatile
 10622  001892  D001               	goto	i2l4342
 10623  001894                     i2l490:
 10624                           
 10625                           ;motors.c: 89: else{LATDbits.LATD1 = 0;}
 10626  001894  928C               	bcf	3980,1,c	;volatile
 10627  001896                     i2l4342:
 10628                           
 10629                           ;motors.c: 90: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
 10630  001896  0E02               	movlw	2
 10631  001898  1845               	xorwf	_t,w,c
 10632  00189A  1046               	iorwf	_t+1,w,c
 10633  00189C  B4D8               	btfsc	status,2,c
 10634  00189E  D005               	goto	i2l496
 10635  0018A0  0E07               	movlw	7
 10636  0018A2  1845               	xorwf	_t,w,c
 10637  0018A4  1046               	iorwf	_t+1,w,c
 10638  0018A6  A4D8               	btfss	status,2,c
 10639  0018A8  D002               	goto	i2l494
 10640  0018AA                     i2l496:
 10641  0018AA  868A               	bsf	3978,3,c	;volatile
 10642  0018AC  D001               	goto	i2l4346
 10643  0018AE                     i2l494:
 10644                           
 10645                           ;motors.c: 91: else{LATBbits.LATB3 = 0;}
 10646  0018AE  968A               	bcf	3978,3,c	;volatile
 10647  0018B0                     i2l4346:
 10648                           
 10649                           ;motors.c: 92: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
 10650  0018B0  0E03               	movlw	3
 10651  0018B2  1845               	xorwf	_t,w,c
 10652  0018B4  1046               	iorwf	_t+1,w,c
 10653  0018B6  B4D8               	btfsc	status,2,c
 10654  0018B8  D005               	goto	i2l500
 10655  0018BA  0E06               	movlw	6
 10656  0018BC  1845               	xorwf	_t,w,c
 10657  0018BE  1046               	iorwf	_t+1,w,c
 10658  0018C0  A4D8               	btfss	status,2,c
 10659  0018C2  D002               	goto	i2l498
 10660  0018C4                     i2l500:
 10661  0018C4  848A               	bsf	3978,2,c	;volatile
 10662  0018C6  D001               	goto	i2l4350
 10663  0018C8                     i2l498:
 10664                           
 10665                           ;motors.c: 93: else{LATBbits.LATB2 = 0;}
 10666  0018C8  948A               	bcf	3978,2,c	;volatile
 10667  0018CA                     i2l4350:
 10668                           
 10669                           ;motors.c: 94: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
 10670  0018CA  0E04               	movlw	4
 10671  0018CC  1845               	xorwf	_t,w,c
 10672  0018CE  1046               	iorwf	_t+1,w,c
 10673  0018D0  B4D8               	btfsc	status,2,c
 10674  0018D2  D005               	goto	i2l504
 10675  0018D4  0E05               	movlw	5
 10676  0018D6  1845               	xorwf	_t,w,c
 10677  0018D8  1046               	iorwf	_t+1,w,c
 10678  0018DA  A4D8               	btfss	status,2,c
 10679  0018DC  D002               	goto	i2l502
 10680  0018DE                     i2l504:
 10681  0018DE  808A               	bsf	3978,0,c	;volatile
 10682  0018E0  0012               	return	
 10683  0018E2                     i2l502:
 10684                           
 10685                           ;motors.c: 95: else{LATBbits.LATB0 = 0;}
 10686  0018E2  908A               	bcf	3978,0,c	;volatile
 10687                           
 10688                           ;motors.c: 96: }
 10689  0018E4  0012               	return	
 10690  0018E6                     i2l4354:
 10691                           
 10692                           ;motors.c: 97: else if(mode == 5){
 10693  0018E6  0E05               	movlw	5
 10694  0018E8  1801               	xorwf	i2updateS1@mode,w,c
 10695  0018EA  1002               	iorwf	i2updateS1@mode+1,w,c
 10696  0018EC  A4D8               	btfss	status,2,c
 10697  0018EE  D049               	goto	i2l4380
 10698                           
 10699                           ;motors.c: 98: t++;
 10700  0018F0  4A45               	infsnz	_t,f,c
 10701  0018F2  2A46               	incf	_t+1,f,c
 10702                           
 10703                           ;motors.c: 99: if (t>8) {t=1;}
 10704  0018F4  BE46               	btfsc	_t+1,7,c
 10705  0018F6  D00A               	goto	i2l4362
 10706  0018F8  5046               	movf	_t+1,w,c
 10707  0018FA  E104               	bnz	i2u517_40
 10708  0018FC  0E09               	movlw	9
 10709  0018FE  5C45               	subwf	_t,w,c
 10710  001900  A0D8               	btfss	status,0,c
 10711  001902  D004               	goto	i2l4362
 10712  001904                     i2u517_40:
 10713  001904  0E00               	movlw	0
 10714  001906  6E46               	movwf	_t+1,c
 10715  001908  0E01               	movlw	1
 10716  00190A  6E45               	movwf	_t,c
 10717  00190C                     i2l4362:
 10718                           
 10719                           ;motors.c: 100: _delay((unsigned long)((5)*(32000000/4000.0)));
 10720  00190C  0E34               	movlw	52
 10721  00190E  6E03               	movwf	??i2_updateS1& (0+255),c
 10722  001910  0EF2               	movlw	242
 10723  001912                     i2u829_47:
 10724  001912  2EE8               	decfsz	wreg,f,c
 10725  001914  D7FE               	bra	i2u829_47
 10726  001916  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10727  001918  D7FC               	bra	i2u829_47
 10728                           
 10729                           ;motors.c: 101: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
 10730  00191A  0445               	decf	_t,w,c
 10731  00191C  1046               	iorwf	_t+1,w,c
 10732  00191E  B4D8               	btfsc	status,2,c
 10733  001920  D005               	goto	i2l511
 10734  001922  0E08               	movlw	8
 10735  001924  1845               	xorwf	_t,w,c
 10736  001926  1046               	iorwf	_t+1,w,c
 10737  001928  A4D8               	btfss	status,2,c
 10738  00192A  D002               	goto	i2l509
 10739  00192C                     i2l511:
 10740  00192C  848A               	bsf	3978,2,c	;volatile
 10741  00192E  D001               	goto	i2l4368
 10742  001930                     i2l509:
 10743                           
 10744                           ;motors.c: 102: else{LATBbits.LATB2 = 0;}
 10745  001930  948A               	bcf	3978,2,c	;volatile
 10746  001932                     i2l4368:
 10747                           
 10748                           ;motors.c: 103: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
 10749  001932  0E02               	movlw	2
 10750  001934  1845               	xorwf	_t,w,c
 10751  001936  1046               	iorwf	_t+1,w,c
 10752  001938  B4D8               	btfsc	status,2,c
 10753  00193A  D005               	goto	i2l515
 10754  00193C  0E07               	movlw	7
 10755  00193E  1845               	xorwf	_t,w,c
 10756  001940  1046               	iorwf	_t+1,w,c
 10757  001942  A4D8               	btfss	status,2,c
 10758  001944  D002               	goto	i2l513
 10759  001946                     i2l515:
 10760  001946  808A               	bsf	3978,0,c	;volatile
 10761  001948  D001               	goto	i2l4372
 10762  00194A                     i2l513:
 10763                           
 10764                           ;motors.c: 104: else{LATBbits.LATB0 = 0;}
 10765  00194A  908A               	bcf	3978,0,c	;volatile
 10766  00194C                     i2l4372:
 10767                           
 10768                           ;motors.c: 105: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
 10769  00194C  0E03               	movlw	3
 10770  00194E  1845               	xorwf	_t,w,c
 10771  001950  1046               	iorwf	_t+1,w,c
 10772  001952  B4D8               	btfsc	status,2,c
 10773  001954  D005               	goto	i2l519
 10774  001956  0E06               	movlw	6
 10775  001958  1845               	xorwf	_t,w,c
 10776  00195A  1046               	iorwf	_t+1,w,c
 10777  00195C  A4D8               	btfss	status,2,c
 10778  00195E  D002               	goto	i2l517
 10779  001960                     i2l519:
 10780  001960  828C               	bsf	3980,1,c	;volatile
 10781  001962  D001               	goto	i2l4376
 10782  001964                     i2l517:
 10783                           
 10784                           ;motors.c: 106: else{LATDbits.LATD1 = 0;}
 10785  001964  928C               	bcf	3980,1,c	;volatile
 10786  001966                     i2l4376:
 10787                           
 10788                           ;motors.c: 107: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
 10789  001966  0E04               	movlw	4
 10790  001968  1845               	xorwf	_t,w,c
 10791  00196A  1046               	iorwf	_t+1,w,c
 10792  00196C  B4D8               	btfsc	status,2,c
 10793  00196E  D005               	goto	i2l523
 10794  001970  0E05               	movlw	5
 10795  001972  1845               	xorwf	_t,w,c
 10796  001974  1046               	iorwf	_t+1,w,c
 10797  001976  A4D8               	btfss	status,2,c
 10798  001978  D002               	goto	i2l521
 10799  00197A                     i2l523:
 10800  00197A  868A               	bsf	3978,3,c	;volatile
 10801  00197C  0012               	return	
 10802  00197E                     i2l521:
 10803                           
 10804                           ;motors.c: 108: else{LATBbits.LATB3 = 0;}
 10805  00197E  968A               	bcf	3978,3,c	;volatile
 10806                           
 10807                           ;motors.c: 109: }
 10808  001980  0012               	return	
 10809  001982                     i2l4380:
 10810                           
 10811                           ;motors.c: 110: else if(mode == 4){
 10812  001982  0E04               	movlw	4
 10813  001984  1801               	xorwf	i2updateS1@mode,w,c
 10814  001986  1002               	iorwf	i2updateS1@mode+1,w,c
 10815  001988  B4D8               	btfsc	status,2,c
 10816  00198A  0012               	return	
 10817                           
 10818                           ;motors.c: 113: else{
 10819                           ;motors.c: 114: _delay((unsigned long)((10)*(32000000/4000.0)));
 10820                           
 10821                           ;motors.c: 112: }
 10822  00198C  0E68               	movlw	104
 10823  00198E  6E03               	movwf	??i2_updateS1& (0+255),c
 10824  001990  0EE4               	movlw	228
 10825  001992                     i2u830_47:
 10826  001992  2EE8               	decfsz	wreg,f,c
 10827  001994  D7FE               	bra	i2u830_47
 10828  001996  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10829  001998  D7FC               	bra	i2u830_47
 10830  00199A  D000               	nop2	
 10831                           
 10832                           ;motors.c: 116: if(mode == 1 || mode == 5){
 10833  00199C  0401               	decf	i2updateS1@mode,w,c
 10834  00199E  1002               	iorwf	i2updateS1@mode+1,w,c
 10835  0019A0  B4D8               	btfsc	status,2,c
 10836  0019A2  D005               	goto	i2l4390
 10837  0019A4  0E05               	movlw	5
 10838  0019A6  1801               	xorwf	i2updateS1@mode,w,c
 10839  0019A8  1002               	iorwf	i2updateS1@mode+1,w,c
 10840  0019AA  A4D8               	btfss	status,2,c
 10841  0019AC  D013               	goto	i2l4396
 10842  0019AE                     i2l4390:
 10843                           
 10844                           ;motors.c: 117: s1 ++;
 10845  0019AE  0100               	movlb	0	; () banked
 10846  0019B0  4BC0               	infsnz	_s1& (0+255),f,b
 10847  0019B2  2BC1               	incf	(_s1+1)& (0+255),f,b
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;motors.c: 118: if (s1>4) {s1=1;}
 10851  0019B4  0100               	movlb	0	; () banked
 10852  0019B6  BFC1               	btfsc	(_s1+1)& (0+255),7,b
 10853  0019B8  D02A               	goto	i2l4406
 10854  0019BA  0100               	movlb	0	; () banked
 10855  0019BC  51C1               	movf	(_s1+1)& (0+255),w,b
 10856  0019BE  E105               	bnz	i2u529_40
 10857  0019C0  0E05               	movlw	5
 10858  0019C2  0100               	movlb	0	; () banked
 10859  0019C4  5DC0               	subwf	_s1& (0+255),w,b
 10860  0019C6  A0D8               	btfss	status,0,c
 10861  0019C8  D022               	goto	i2l4406
 10862  0019CA                     i2u529_40:
 10863                           
 10864                           ; BSR set to: 0
 10865  0019CA  0E00               	movlw	0
 10866  0019CC  0100               	movlb	0	; () banked
 10867  0019CE  6FC1               	movwf	(_s1+1)& (0+255),b
 10868  0019D0  0E01               	movlw	1
 10869  0019D2  D01C               	goto	L19
 10870  0019D4                     i2l4396:
 10871                           
 10872                           ;motors.c: 121: else if(mode == 2 || mode==6){
 10873  0019D4  0E02               	movlw	2
 10874  0019D6  1801               	xorwf	i2updateS1@mode,w,c
 10875  0019D8  1002               	iorwf	i2updateS1@mode+1,w,c
 10876  0019DA  B4D8               	btfsc	status,2,c
 10877  0019DC  D005               	goto	i2l4400
 10878  0019DE  0E06               	movlw	6
 10879  0019E0  1801               	xorwf	i2updateS1@mode,w,c
 10880  0019E2  1002               	iorwf	i2updateS1@mode+1,w,c
 10881  0019E4  A4D8               	btfss	status,2,c
 10882  0019E6  D013               	goto	i2l4406
 10883  0019E8                     i2l4400:
 10884                           
 10885                           ;motors.c: 122: s1 --;
 10886  0019E8  0100               	movlb	0	; () banked
 10887  0019EA  07C0               	decf	_s1& (0+255),f,b
 10888  0019EC  A0D8               	btfss	status,0,c
 10889  0019EE  07C1               	decf	(_s1+1)& (0+255),f,b
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;motors.c: 123: if (s1<1) {s1=4;}
 10893  0019F0  0100               	movlb	0	; () banked
 10894  0019F2  BFC1               	btfsc	(_s1+1)& (0+255),7,b
 10895  0019F4  D007               	goto	i2l4404
 10896  0019F6  0100               	movlb	0	; () banked
 10897  0019F8  51C1               	movf	(_s1+1)& (0+255),w,b
 10898  0019FA  E109               	bnz	i2l4406
 10899  0019FC  0100               	movlb	0	; () banked
 10900  0019FE  05C0               	decf	_s1& (0+255),w,b
 10901  001A00  B0D8               	btfsc	status,0,c
 10902  001A02  D005               	goto	i2l4406
 10903  001A04                     i2l4404:
 10904                           
 10905                           ; BSR set to: 0
 10906  001A04  0E00               	movlw	0
 10907  001A06  0100               	movlb	0	; () banked
 10908  001A08  6FC1               	movwf	(_s1+1)& (0+255),b
 10909  001A0A  0E04               	movlw	4
 10910  001A0C                     L19:
 10911  001A0C  6FC0               	movwf	_s1& (0+255),b
 10912  001A0E                     i2l4406:
 10913                           
 10914                           ;motors.c: 124: }
 10915                           ;motors.c: 126: if(mode == 1 || mode ==2){
 10916  001A0E  0401               	decf	i2updateS1@mode,w,c
 10917  001A10  1002               	iorwf	i2updateS1@mode+1,w,c
 10918  001A12  B4D8               	btfsc	status,2,c
 10919  001A14  D005               	goto	i2l4410
 10920  001A16  0E02               	movlw	2
 10921  001A18  1801               	xorwf	i2updateS1@mode,w,c
 10922  001A1A  1002               	iorwf	i2updateS1@mode+1,w,c
 10923  001A1C  A4D8               	btfss	status,2,c
 10924  001A1E  D027               	goto	i2l4426
 10925  001A20                     i2l4410:
 10926                           
 10927                           ;motors.c: 127: if (s1 == 1){LATDbits.LATD1 = 1;}
 10928  001A20  0100               	movlb	0	; () banked
 10929  001A22  05C0               	decf	_s1& (0+255),w,b
 10930  001A24  0100               	movlb	0	; () banked
 10931  001A26  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10932  001A28  A4D8               	btfss	status,2,c
 10933  001A2A  D002               	goto	i2l540
 10934                           
 10935                           ; BSR set to: 0
 10936  001A2C  828C               	bsf	3980,1,c	;volatile
 10937  001A2E  D001               	goto	i2l4414
 10938  001A30                     i2l540:
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;motors.c: 128: else{LATDbits.LATD1 = 0;}
 10942  001A30  928C               	bcf	3980,1,c	;volatile
 10943  001A32                     i2l4414:
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;motors.c: 129: if (s1 == 2){LATBbits.LATB3 = 1;}
 10947  001A32  0E02               	movlw	2
 10948  001A34  0100               	movlb	0	; () banked
 10949  001A36  19C0               	xorwf	_s1& (0+255),w,b
 10950  001A38  0100               	movlb	0	; () banked
 10951  001A3A  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10952  001A3C  A4D8               	btfss	status,2,c
 10953  001A3E  D002               	goto	i2l542
 10954                           
 10955                           ; BSR set to: 0
 10956  001A40  868A               	bsf	3978,3,c	;volatile
 10957  001A42  D001               	goto	i2l4418
 10958  001A44                     i2l542:
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;motors.c: 130: else{LATBbits.LATB3 = 0;}
 10962  001A44  968A               	bcf	3978,3,c	;volatile
 10963  001A46                     i2l4418:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;motors.c: 131: if (s1 == 3){LATBbits.LATB2 = 1;}
 10967  001A46  0E03               	movlw	3
 10968  001A48  0100               	movlb	0	; () banked
 10969  001A4A  19C0               	xorwf	_s1& (0+255),w,b
 10970  001A4C  0100               	movlb	0	; () banked
 10971  001A4E  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10972  001A50  A4D8               	btfss	status,2,c
 10973  001A52  D002               	goto	i2l544
 10974                           
 10975                           ; BSR set to: 0
 10976  001A54  848A               	bsf	3978,2,c	;volatile
 10977  001A56  D001               	goto	i2l4422
 10978  001A58                     i2l544:
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;motors.c: 132: else{LATBbits.LATB2 = 0;}
 10982  001A58  948A               	bcf	3978,2,c	;volatile
 10983  001A5A                     i2l4422:
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;motors.c: 133: if (s1 == 4){LATBbits.LATB0 = 1;}
 10987  001A5A  0E04               	movlw	4
 10988  001A5C  0100               	movlb	0	; () banked
 10989  001A5E  19C0               	xorwf	_s1& (0+255),w,b
 10990  001A60  0100               	movlb	0	; () banked
 10991  001A62  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10992  001A64  A4D8               	btfss	status,2,c
 10993  001A66  D002               	goto	i2l546
 10994                           
 10995                           ; BSR set to: 0
 10996  001A68  808A               	bsf	3978,0,c	;volatile
 10997  001A6A  D001               	goto	i2l4426
 10998  001A6C                     i2l546:
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;motors.c: 134: else{LATBbits.LATB0 = 0;}
 11002  001A6C  908A               	bcf	3978,0,c	;volatile
 11003  001A6E                     i2l4426:
 11004                           
 11005                           ;motors.c: 135: }
 11006                           ;motors.c: 136: if(mode == 5 || mode ==6){
 11007  001A6E  0E05               	movlw	5
 11008  001A70  1801               	xorwf	i2updateS1@mode,w,c
 11009  001A72  1002               	iorwf	i2updateS1@mode+1,w,c
 11010  001A74  B4D8               	btfsc	status,2,c
 11011  001A76  D005               	goto	i2l4430
 11012  001A78  0E06               	movlw	6
 11013  001A7A  1801               	xorwf	i2updateS1@mode,w,c
 11014  001A7C  1002               	iorwf	i2updateS1@mode+1,w,c
 11015  001A7E  A4D8               	btfss	status,2,c
 11016  001A80  0012               	return	
 11017  001A82                     i2l4430:
 11018                           
 11019                           ;motors.c: 137: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
 11020  001A82  0100               	movlb	0	; () banked
 11021  001A84  05C0               	decf	_s1& (0+255),w,b
 11022  001A86  0100               	movlb	0	; () banked
 11023  001A88  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11024  001A8A  A4D8               	btfss	status,2,c
 11025  001A8C  D004               	goto	i2l4434
 11026                           
 11027                           ; BSR set to: 0
 11028  001A8E  828C               	bsf	3980,1,c	;volatile
 11029  001A90  868A               	bsf	3978,3,c	;volatile
 11030  001A92  948A               	bcf	3978,2,c	;volatile
 11031  001A94  908A               	bcf	3978,0,c	;volatile
 11032  001A96                     i2l4434:
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;motors.c: 138: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
 11036  001A96  0E02               	movlw	2
 11037  001A98  0100               	movlb	0	; () banked
 11038  001A9A  19C0               	xorwf	_s1& (0+255),w,b
 11039  001A9C  0100               	movlb	0	; () banked
 11040  001A9E  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11041  001AA0  A4D8               	btfss	status,2,c
 11042  001AA2  D004               	goto	i2l4438
 11043                           
 11044                           ; BSR set to: 0
 11045  001AA4  928C               	bcf	3980,1,c	;volatile
 11046  001AA6  868A               	bsf	3978,3,c	;volatile
 11047  001AA8  848A               	bsf	3978,2,c	;volatile
 11048  001AAA  908A               	bcf	3978,0,c	;volatile
 11049  001AAC                     i2l4438:
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;motors.c: 139: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
 11053  001AAC  0E03               	movlw	3
 11054  001AAE  0100               	movlb	0	; () banked
 11055  001AB0  19C0               	xorwf	_s1& (0+255),w,b
 11056  001AB2  0100               	movlb	0	; () banked
 11057  001AB4  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11058  001AB6  A4D8               	btfss	status,2,c
 11059  001AB8  D004               	goto	i2l4442
 11060                           
 11061                           ; BSR set to: 0
 11062  001ABA  928C               	bcf	3980,1,c	;volatile
 11063  001ABC  968A               	bcf	3978,3,c	;volatile
 11064  001ABE  848A               	bsf	3978,2,c	;volatile
 11065  001AC0  808A               	bsf	3978,0,c	;volatile
 11066  001AC2                     i2l4442:
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;motors.c: 140: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
 11070  001AC2  0E04               	movlw	4
 11071  001AC4  0100               	movlb	0	; () banked
 11072  001AC6  19C0               	xorwf	_s1& (0+255),w,b
 11073  001AC8  0100               	movlb	0	; () banked
 11074  001ACA  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11075  001ACC  A4D8               	btfss	status,2,c
 11076  001ACE  0012               	return	
 11077                           
 11078                           ; BSR set to: 0
 11079  001AD0  828C               	bsf	3980,1,c	;volatile
 11080  001AD2  968A               	bcf	3978,3,c	;volatile
 11081  001AD4  948A               	bcf	3978,2,c	;volatile
 11082  001AD6  808A               	bsf	3978,0,c	;volatile
 11083                           
 11084                           ; BSR set to: 0
 11085                           
 11086                           ; BSR set to: 0
 11087                           
 11088                           ; BSR set to: 0
 11089                           
 11090                           ; BSR set to: 0
 11091                           
 11092                           ; BSR set to: 0
 11093  001AD8  0012               	return	
 11094  001ADA                     __end_ofi2_updateS1:
 11095                           	opt stack 0
 11096                           pclatu	equ	0xFFB
 11097                           pclath	equ	0xFFA
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           intcon2	equ	0xFF1
 11106                           postinc0	equ	0xFEE
 11107                           fsr0h	equ	0xFEA
 11108                           fsr0l	equ	0xFE9
 11109                           wreg	equ	0xFE8
 11110                           fsr1h	equ	0xFE2
 11111                           fsr1l	equ	0xFE1
 11112                           indf2	equ	0xFDF
 11113                           postinc2	equ	0xFDE
 11114                           postdec2	equ	0xFDD
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8
 11118                           
 11119 ;; *************** function i2_startTMR1 *****************
 11120 ;; Defined at:
 11121 ;;		line 24 in file "logic.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;		None
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  2    0[None  ] int 
 11128 ;; Registers used:
 11129 ;;		wreg, status,2
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;Total ram usage:        0 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; This function calls:
 11142 ;;		Nothing
 11143 ;; This function is called by:
 11144 ;;		_handler
 11145 ;; This function uses a non-reentrant model
 11146 ;;
 11147                           
 11148                           	psect	text40
 11149  002C1C                     __ptext40:
 11150                           	opt stack 0
 11151  002C1C                     i2_startTMR1:
 11152                           	opt stack 25
 11153                           
 11154                           ;logic.c: 25: T1CON = 0b10110000;
 11155                           
 11156                           ;incstack = 0
 11157  002C1C  0EB0               	movlw	176
 11158  002C1E  6ECD               	movwf	4045,c	;volatile
 11159                           
 11160                           ;logic.c: 26: TMR1H = 0b11011001;
 11161  002C20  0ED9               	movlw	217
 11162  002C22  6ECF               	movwf	4047,c	;volatile
 11163                           
 11164                           ;logic.c: 27: TMR1L = 0b01011011;
 11165  002C24  0E5B               	movlw	91
 11166  002C26  6ECE               	movwf	4046,c	;volatile
 11167                           
 11168                           ;logic.c: 28: TMR1ON = 1;
 11169  002C28  80CD               	bsf	4045,0,c	;volatile
 11170  002C2A  0012               	return		;funcret
 11171  002C2C                     __end_ofi2_startTMR1:
 11172                           	opt stack 0
 11173                           pclatu	equ	0xFFB
 11174                           pclath	equ	0xFFA
 11175                           tblptru	equ	0xFF8
 11176                           tblptrh	equ	0xFF7
 11177                           tblptrl	equ	0xFF6
 11178                           tablat	equ	0xFF5
 11179                           prodh	equ	0xFF4
 11180                           prodl	equ	0xFF3
 11181                           intcon	equ	0xFF2
 11182                           intcon2	equ	0xFF1
 11183                           postinc0	equ	0xFEE
 11184                           fsr0h	equ	0xFEA
 11185                           fsr0l	equ	0xFE9
 11186                           wreg	equ	0xFE8
 11187                           fsr1h	equ	0xFE2
 11188                           fsr1l	equ	0xFE1
 11189                           indf2	equ	0xFDF
 11190                           postinc2	equ	0xFDE
 11191                           postdec2	equ	0xFDD
 11192                           fsr2h	equ	0xFDA
 11193                           fsr2l	equ	0xFD9
 11194                           status	equ	0xFD8
 11195                           
 11196 ;; *************** function i2___wmul *****************
 11197 ;; Defined at:
 11198 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;  multiplier      2    0[COMRAM] unsigned int 
 11201 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;  __wmul          2    4[COMRAM] unsigned int 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  2    0[COMRAM] unsigned int 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0, prodl, prodh
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:        6 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_handler
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text41
 11227  002B66                     __ptext41:
 11228                           	opt stack 0
 11229  002B66                     i2___wmul:
 11230                           	opt stack 25
 11231                           
 11232                           ;incstack = 0
 11233  002B66  5001               	movf	i2___wmul@multiplier,w,c
 11234  002B68  0203               	mulwf	i2___wmul@multiplicand,c
 11235  002B6A  CFF3 F005          	movff	prodl,i2___wmul@product
 11236  002B6E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11237  002B72  5001               	movf	i2___wmul@multiplier,w,c
 11238  002B74  0204               	mulwf	i2___wmul@multiplicand+1,c
 11239  002B76  50F3               	movf	prodl,w,c
 11240  002B78  2606               	addwf	i2___wmul@product+1,f,c
 11241  002B7A  5002               	movf	i2___wmul@multiplier+1,w,c
 11242  002B7C  0203               	mulwf	i2___wmul@multiplicand,c
 11243  002B7E  50F3               	movf	prodl,w,c
 11244  002B80  2606               	addwf	i2___wmul@product+1,f,c
 11245  002B82  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11246  002B86  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11247  002B8A  0012               	return	
 11248  002B8C                     __end_ofi2___wmul:
 11249                           	opt stack 0
 11250                           pclatu	equ	0xFFB
 11251                           pclath	equ	0xFFA
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           intcon2	equ	0xFF1
 11260                           postinc0	equ	0xFEE
 11261                           fsr0h	equ	0xFEA
 11262                           fsr0l	equ	0xFE9
 11263                           wreg	equ	0xFE8
 11264                           fsr1h	equ	0xFE2
 11265                           fsr1l	equ	0xFE1
 11266                           indf2	equ	0xFDF
 11267                           postinc2	equ	0xFDE
 11268                           postdec2	equ	0xFDD
 11269                           fsr2h	equ	0xFDA
 11270                           fsr2l	equ	0xFD9
 11271                           status	equ	0xFD8
 11272                           
 11273 ;; *************** function _updateS2 *****************
 11274 ;; Defined at:
 11275 ;;		line 146 in file "motors.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  mode            2    0[COMRAM] int 
 11278 ;; Auto vars:     Size  Location     Type
 11279 ;;		None
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  1    wreg      void 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;Total ram usage:        3 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; This function calls:
 11296 ;;		Nothing
 11297 ;; This function is called by:
 11298 ;;		_handler
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text42
 11303  002400                     __ptext42:
 11304                           	opt stack 0
 11305  002400                     _updateS2:
 11306                           	opt stack 25
 11307                           
 11308                           ;motors.c: 147: _delay((unsigned long)((5)*(32000000/4000.0)));
 11309                           
 11310                           ;incstack = 0
 11311  002400  0E34               	movlw	52
 11312  002402  6E03               	movwf	??_updateS2& (0+255),c
 11313  002404  0EF2               	movlw	242
 11314  002406                     i2u831_47:
 11315  002406  2EE8               	decfsz	wreg,f,c
 11316  002408  D7FE               	bra	i2u831_47
 11317  00240A  2E03               	decfsz	??_updateS2& (0+255),f,c
 11318  00240C  D7FC               	bra	i2u831_47
 11319                           
 11320                           ;motors.c: 149: if(mode == 0){
 11321  00240E  5001               	movf	updateS2@mode,w,c
 11322  002410  1002               	iorwf	updateS2@mode+1,w,c
 11323  002412  A4D8               	btfss	status,2,c
 11324  002414  D005               	goto	i2l3916
 11325                           
 11326                           ;motors.c: 150: LATCbits.LATC7 = 0;
 11327  002416  9E8B               	bcf	3979,7,c	;volatile
 11328                           
 11329                           ;motors.c: 151: LATCbits.LATC6 = 0;
 11330  002418  9C8B               	bcf	3979,6,c	;volatile
 11331                           
 11332                           ;motors.c: 152: LATCbits.LATC0 = 0;
 11333  00241A  908B               	bcf	3979,0,c	;volatile
 11334                           
 11335                           ;motors.c: 153: LATCbits.LATC5 = 0;
 11336  00241C  9A8B               	bcf	3979,5,c	;volatile
 11337                           
 11338                           ;motors.c: 154: }
 11339  00241E  0012               	return	
 11340  002420                     i2l3916:
 11341                           
 11342                           ;motors.c: 155: else if(mode == 4){
 11343  002420  0E04               	movlw	4
 11344  002422  1801               	xorwf	updateS2@mode,w,c
 11345  002424  1002               	iorwf	updateS2@mode+1,w,c
 11346  002426  B4D8               	btfsc	status,2,c
 11347  002428  0012               	return	
 11348                           
 11349                           ;motors.c: 158: else if(mode == 3){
 11350                           
 11351                           ;motors.c: 157: }
 11352  00242A  0E03               	movlw	3
 11353  00242C  1801               	xorwf	updateS2@mode,w,c
 11354  00242E  1002               	iorwf	updateS2@mode+1,w,c
 11355  002430  A4D8               	btfss	status,2,c
 11356  002432  D042               	goto	i2l3944
 11357                           
 11358                           ;motors.c: 159: t2++;
 11359  002434  4A43               	infsnz	_t2,f,c
 11360  002436  2A44               	incf	_t2+1,f,c
 11361                           
 11362                           ;motors.c: 160: if (t2>8) {t2=1;}
 11363  002438  BE44               	btfsc	_t2+1,7,c
 11364  00243A  D00A               	goto	i2l3928
 11365  00243C  5044               	movf	_t2+1,w,c
 11366  00243E  E104               	bnz	i2u454_40
 11367  002440  0E09               	movlw	9
 11368  002442  5C43               	subwf	_t2,w,c
 11369  002444  A0D8               	btfss	status,0,c
 11370  002446  D004               	goto	i2l3928
 11371  002448                     i2u454_40:
 11372  002448  0E00               	movlw	0
 11373  00244A  6E44               	movwf	_t2+1,c
 11374  00244C  0E01               	movlw	1
 11375  00244E  6E43               	movwf	_t2,c
 11376  002450                     i2l3928:
 11377                           
 11378                           ;motors.c: 161: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
 11379  002450  0443               	decf	_t2,w,c
 11380  002452  1044               	iorwf	_t2+1,w,c
 11381  002454  B4D8               	btfsc	status,2,c
 11382  002456  D005               	goto	i2l566
 11383  002458  0E08               	movlw	8
 11384  00245A  1843               	xorwf	_t2,w,c
 11385  00245C  1044               	iorwf	_t2+1,w,c
 11386  00245E  A4D8               	btfss	status,2,c
 11387  002460  D002               	goto	i2l564
 11388  002462                     i2l566:
 11389  002462  8E8B               	bsf	3979,7,c	;volatile
 11390  002464  D001               	goto	i2l3932
 11391  002466                     i2l564:
 11392                           
 11393                           ;motors.c: 162: else{LATCbits.LATC7 = 0;}
 11394  002466  9E8B               	bcf	3979,7,c	;volatile
 11395  002468                     i2l3932:
 11396                           
 11397                           ;motors.c: 163: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
 11398  002468  0E02               	movlw	2
 11399  00246A  1843               	xorwf	_t2,w,c
 11400  00246C  1044               	iorwf	_t2+1,w,c
 11401  00246E  B4D8               	btfsc	status,2,c
 11402  002470  D005               	goto	i2l570
 11403  002472  0E07               	movlw	7
 11404  002474  1843               	xorwf	_t2,w,c
 11405  002476  1044               	iorwf	_t2+1,w,c
 11406  002478  A4D8               	btfss	status,2,c
 11407  00247A  D002               	goto	i2l568
 11408  00247C                     i2l570:
 11409  00247C  8C8B               	bsf	3979,6,c	;volatile
 11410  00247E  D001               	goto	i2l3936
 11411  002480                     i2l568:
 11412                           
 11413                           ;motors.c: 164: else{LATCbits.LATC6 = 0;}
 11414  002480  9C8B               	bcf	3979,6,c	;volatile
 11415  002482                     i2l3936:
 11416                           
 11417                           ;motors.c: 165: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
 11418  002482  0E03               	movlw	3
 11419  002484  1843               	xorwf	_t2,w,c
 11420  002486  1044               	iorwf	_t2+1,w,c
 11421  002488  B4D8               	btfsc	status,2,c
 11422  00248A  D005               	goto	i2l574
 11423  00248C  0E06               	movlw	6
 11424  00248E  1843               	xorwf	_t2,w,c
 11425  002490  1044               	iorwf	_t2+1,w,c
 11426  002492  A4D8               	btfss	status,2,c
 11427  002494  D002               	goto	i2l572
 11428  002496                     i2l574:
 11429  002496  808B               	bsf	3979,0,c	;volatile
 11430  002498  D001               	goto	i2l3940
 11431  00249A                     i2l572:
 11432                           
 11433                           ;motors.c: 166: else{LATCbits.LATC0 = 0;}
 11434  00249A  908B               	bcf	3979,0,c	;volatile
 11435  00249C                     i2l3940:
 11436                           
 11437                           ;motors.c: 167: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
 11438  00249C  0E04               	movlw	4
 11439  00249E  1843               	xorwf	_t2,w,c
 11440  0024A0  1044               	iorwf	_t2+1,w,c
 11441  0024A2  B4D8               	btfsc	status,2,c
 11442  0024A4  D005               	goto	i2l578
 11443  0024A6  0E05               	movlw	5
 11444  0024A8  1843               	xorwf	_t2,w,c
 11445  0024AA  1044               	iorwf	_t2+1,w,c
 11446  0024AC  A4D8               	btfss	status,2,c
 11447  0024AE  D002               	goto	i2l576
 11448  0024B0                     i2l578:
 11449  0024B0  8A8B               	bsf	3979,5,c	;volatile
 11450  0024B2  0012               	return	
 11451  0024B4                     i2l576:
 11452                           
 11453                           ;motors.c: 168: else{LATCbits.LATC5 = 0;}
 11454  0024B4  9A8B               	bcf	3979,5,c	;volatile
 11455                           
 11456                           ;motors.c: 169: }
 11457  0024B6  0012               	return	
 11458  0024B8                     i2l3944:
 11459                           
 11460                           ;motors.c: 170: else{
 11461                           ;motors.c: 171: if(mode == 1){
 11462  0024B8  0401               	decf	updateS2@mode,w,c
 11463  0024BA  1002               	iorwf	updateS2@mode+1,w,c
 11464  0024BC  A4D8               	btfss	status,2,c
 11465  0024BE  D00E               	goto	i2l3952
 11466                           
 11467                           ;motors.c: 172: s2 ++;
 11468  0024C0  4A5D               	infsnz	_s2,f,c
 11469  0024C2  2A5E               	incf	_s2+1,f,c
 11470                           
 11471                           ;motors.c: 173: if (s2>4) {s2=1;}
 11472  0024C4  BE5E               	btfsc	_s2+1,7,c
 11473  0024C6  D01D               	goto	i2l3960
 11474  0024C8  505E               	movf	_s2+1,w,c
 11475  0024CA  E104               	bnz	i2u464_40
 11476  0024CC  0E05               	movlw	5
 11477  0024CE  5C5D               	subwf	_s2,w,c
 11478  0024D0  A0D8               	btfss	status,0,c
 11479  0024D2  D017               	goto	i2l3960
 11480  0024D4                     i2u464_40:
 11481  0024D4  0E00               	movlw	0
 11482  0024D6  6E5E               	movwf	_s2+1,c
 11483  0024D8  0E01               	movlw	1
 11484  0024DA  D012               	goto	L20
 11485  0024DC                     i2l3952:
 11486                           
 11487                           ;motors.c: 175: else if(mode == 2){
 11488  0024DC  0E02               	movlw	2
 11489  0024DE  1801               	xorwf	updateS2@mode,w,c
 11490  0024E0  1002               	iorwf	updateS2@mode+1,w,c
 11491  0024E2  A4D8               	btfss	status,2,c
 11492  0024E4  D00E               	goto	i2l3960
 11493                           
 11494                           ;motors.c: 176: s2 --;
 11495  0024E6  065D               	decf	_s2,f,c
 11496  0024E8  A0D8               	btfss	status,0,c
 11497  0024EA  065E               	decf	_s2+1,f,c
 11498                           
 11499                           ;motors.c: 177: if (s2<1) {s2=4;}
 11500  0024EC  BE5E               	btfsc	_s2+1,7,c
 11501  0024EE  D005               	goto	i2l3958
 11502  0024F0  505E               	movf	_s2+1,w,c
 11503  0024F2  E107               	bnz	i2l3960
 11504  0024F4  045D               	decf	_s2,w,c
 11505  0024F6  B0D8               	btfsc	status,0,c
 11506  0024F8  D004               	goto	i2l3960
 11507  0024FA                     i2l3958:
 11508  0024FA  0E00               	movlw	0
 11509  0024FC  6E5E               	movwf	_s2+1,c
 11510  0024FE  0E04               	movlw	4
 11511  002500                     L20:
 11512  002500  6E5D               	movwf	_s2,c
 11513  002502                     i2l3960:
 11514                           
 11515                           ;motors.c: 178: }
 11516                           ;motors.c: 180: if (s2 == 1){LATCbits.LATC7 = 1;}
 11517  002502  045D               	decf	_s2,w,c
 11518  002504  105E               	iorwf	_s2+1,w,c
 11519  002506  A4D8               	btfss	status,2,c
 11520  002508  D002               	goto	i2l586
 11521  00250A  8E8B               	bsf	3979,7,c	;volatile
 11522  00250C  D001               	goto	i2l3964
 11523  00250E                     i2l586:
 11524                           
 11525                           ;motors.c: 181: else{LATCbits.LATC7 = 0;}
 11526  00250E  9E8B               	bcf	3979,7,c	;volatile
 11527  002510                     i2l3964:
 11528                           
 11529                           ;motors.c: 182: if (s2 == 2){LATCbits.LATC6 = 1;}
 11530  002510  0E02               	movlw	2
 11531  002512  185D               	xorwf	_s2,w,c
 11532  002514  105E               	iorwf	_s2+1,w,c
 11533  002516  A4D8               	btfss	status,2,c
 11534  002518  D002               	goto	i2l588
 11535  00251A  8C8B               	bsf	3979,6,c	;volatile
 11536  00251C  D001               	goto	i2l3968
 11537  00251E                     i2l588:
 11538                           
 11539                           ;motors.c: 183: else{LATCbits.LATC6 = 0;}
 11540  00251E  9C8B               	bcf	3979,6,c	;volatile
 11541  002520                     i2l3968:
 11542                           
 11543                           ;motors.c: 184: if (s2 == 3){LATCbits.LATC0 = 1;}
 11544  002520  0E03               	movlw	3
 11545  002522  185D               	xorwf	_s2,w,c
 11546  002524  105E               	iorwf	_s2+1,w,c
 11547  002526  A4D8               	btfss	status,2,c
 11548  002528  D002               	goto	i2l590
 11549  00252A  808B               	bsf	3979,0,c	;volatile
 11550  00252C  D001               	goto	i2l3972
 11551  00252E                     i2l590:
 11552                           
 11553                           ;motors.c: 185: else{LATCbits.LATC0 = 0;}
 11554  00252E  908B               	bcf	3979,0,c	;volatile
 11555  002530                     i2l3972:
 11556                           
 11557                           ;motors.c: 186: if (s2 == 4){LATCbits.LATC5 = 1;}
 11558  002530  0E04               	movlw	4
 11559  002532  185D               	xorwf	_s2,w,c
 11560  002534  105E               	iorwf	_s2+1,w,c
 11561  002536  A4D8               	btfss	status,2,c
 11562  002538  D002               	goto	i2l592
 11563  00253A  8A8B               	bsf	3979,5,c	;volatile
 11564  00253C  0012               	return	
 11565  00253E                     i2l592:
 11566                           
 11567                           ;motors.c: 187: else{LATCbits.LATC5 = 0;}
 11568  00253E  9A8B               	bcf	3979,5,c	;volatile
 11569  002540  0012               	return	
 11570  002542                     __end_of_updateS2:
 11571                           	opt stack 0
 11572                           pclatu	equ	0xFFB
 11573                           pclath	equ	0xFFA
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           intcon2	equ	0xFF1
 11582                           postinc0	equ	0xFEE
 11583                           fsr0h	equ	0xFEA
 11584                           fsr0l	equ	0xFE9
 11585                           wreg	equ	0xFE8
 11586                           fsr1h	equ	0xFE2
 11587                           fsr1l	equ	0xFE1
 11588                           indf2	equ	0xFDF
 11589                           postinc2	equ	0xFDE
 11590                           postdec2	equ	0xFDD
 11591                           fsr2h	equ	0xFDA
 11592                           fsr2l	equ	0xFD9
 11593                           status	equ	0xFD8
 11594                           
 11595 ;; *************** function ___awdiv *****************
 11596 ;; Defined at:
 11597 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;  dividend        2    6[COMRAM] int 
 11600 ;;  divisor         2    8[COMRAM] int 
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;  quotient        2   12[COMRAM] int 
 11603 ;;  sign            1   11[COMRAM] unsigned char 
 11604 ;;  counter         1   10[COMRAM] unsigned char 
 11605 ;; Return value:  Size  Location     Type
 11606 ;;                  2    6[COMRAM] int 
 11607 ;; Registers used:
 11608 ;;		wreg, status,2, status,0
 11609 ;; Tracked objects:
 11610 ;;		On entry : 0/0
 11611 ;;		On exit  : 0/0
 11612 ;;		Unchanged: 0/0
 11613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11614 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11617 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;Total ram usage:        8 bytes
 11619 ;; Hardware stack levels used:    1
 11620 ;; This function calls:
 11621 ;;		Nothing
 11622 ;; This function is called by:
 11623 ;;		_handler
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           	psect	text43
 11628  002542                     __ptext43:
 11629                           	opt stack 0
 11630  002542                     ___awdiv:
 11631                           	opt stack 25
 11632                           
 11633                           ;incstack = 0
 11634  002542  0E00               	movlw	0
 11635  002544  6E0C               	movwf	___awdiv@sign,c
 11636  002546  AE0A               	btfss	___awdiv@divisor+1,7,c
 11637  002548  D006               	goto	i2l4250
 11638  00254A  6C09               	negf	___awdiv@divisor,c
 11639  00254C  1E0A               	comf	___awdiv@divisor+1,f,c
 11640  00254E  B0D8               	btfsc	status,0,c
 11641  002550  2A0A               	incf	___awdiv@divisor+1,f,c
 11642  002552  0E01               	movlw	1
 11643  002554  6E0C               	movwf	___awdiv@sign,c
 11644  002556                     i2l4250:
 11645  002556  AE08               	btfss	___awdiv@dividend+1,7,c
 11646  002558  D006               	goto	i2l4256
 11647  00255A  6C07               	negf	___awdiv@dividend,c
 11648  00255C  1E08               	comf	___awdiv@dividend+1,f,c
 11649  00255E  B0D8               	btfsc	status,0,c
 11650  002560  2A08               	incf	___awdiv@dividend+1,f,c
 11651  002562  0E01               	movlw	1
 11652  002564  1A0C               	xorwf	___awdiv@sign,f,c
 11653  002566                     i2l4256:
 11654  002566  0E00               	movlw	0
 11655  002568  6E0E               	movwf	___awdiv@quotient+1,c
 11656  00256A  0E00               	movlw	0
 11657  00256C  6E0D               	movwf	___awdiv@quotient,c
 11658  00256E  5009               	movf	___awdiv@divisor,w,c
 11659  002570  100A               	iorwf	___awdiv@divisor+1,w,c
 11660  002572  B4D8               	btfsc	status,2,c
 11661  002574  D01C               	goto	i2l4278
 11662  002576  0E01               	movlw	1
 11663  002578  6E0B               	movwf	___awdiv@counter,c
 11664  00257A  D004               	goto	i2l4264
 11665  00257C                     i2l4262:
 11666  00257C  90D8               	bcf	status,0,c
 11667  00257E  3609               	rlcf	___awdiv@divisor,f,c
 11668  002580  360A               	rlcf	___awdiv@divisor+1,f,c
 11669  002582  2A0B               	incf	___awdiv@counter,f,c
 11670  002584                     i2l4264:
 11671  002584  AE0A               	btfss	___awdiv@divisor+1,7,c
 11672  002586  D7FA               	goto	i2l4262
 11673  002588                     i2l4266:
 11674  002588  90D8               	bcf	status,0,c
 11675  00258A  360D               	rlcf	___awdiv@quotient,f,c
 11676  00258C  360E               	rlcf	___awdiv@quotient+1,f,c
 11677  00258E  5009               	movf	___awdiv@divisor,w,c
 11678  002590  5C07               	subwf	___awdiv@dividend,w,c
 11679  002592  500A               	movf	___awdiv@divisor+1,w,c
 11680  002594  5808               	subwfb	___awdiv@dividend+1,w,c
 11681  002596  A0D8               	btfss	status,0,c
 11682  002598  D005               	goto	i2l4274
 11683  00259A  5009               	movf	___awdiv@divisor,w,c
 11684  00259C  5E07               	subwf	___awdiv@dividend,f,c
 11685  00259E  500A               	movf	___awdiv@divisor+1,w,c
 11686  0025A0  5A08               	subwfb	___awdiv@dividend+1,f,c
 11687  0025A2  800D               	bsf	___awdiv@quotient,0,c
 11688  0025A4                     i2l4274:
 11689  0025A4  90D8               	bcf	status,0,c
 11690  0025A6  320A               	rrcf	___awdiv@divisor+1,f,c
 11691  0025A8  3209               	rrcf	___awdiv@divisor,f,c
 11692  0025AA  2E0B               	decfsz	___awdiv@counter,f,c
 11693  0025AC  D7ED               	goto	i2l4266
 11694  0025AE                     i2l4278:
 11695  0025AE  500C               	movf	___awdiv@sign,w,c
 11696  0025B0  B4D8               	btfsc	status,2,c
 11697  0025B2  D004               	goto	i2l4282
 11698  0025B4  6C0D               	negf	___awdiv@quotient,c
 11699  0025B6  1E0E               	comf	___awdiv@quotient+1,f,c
 11700  0025B8  B0D8               	btfsc	status,0,c
 11701  0025BA  2A0E               	incf	___awdiv@quotient+1,f,c
 11702  0025BC                     i2l4282:
 11703  0025BC  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11704  0025C0  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11705  0025C4  0012               	return	
 11706  0025C6                     __end_of___awdiv:
 11707                           	opt stack 0
 11708                           pclatu	equ	0xFFB
 11709                           pclath	equ	0xFFA
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           intcon2	equ	0xFF1
 11718                           postinc0	equ	0xFEE
 11719                           fsr0h	equ	0xFEA
 11720                           fsr0l	equ	0xFE9
 11721                           wreg	equ	0xFE8
 11722                           fsr1h	equ	0xFE2
 11723                           fsr1l	equ	0xFE1
 11724                           indf2	equ	0xFDF
 11725                           postinc2	equ	0xFDE
 11726                           postdec2	equ	0xFDD
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           pclatu	equ	0xFFB
 11731                           pclath	equ	0xFFA
 11732                           tblptru	equ	0xFF8
 11733                           tblptrh	equ	0xFF7
 11734                           tblptrl	equ	0xFF6
 11735                           tablat	equ	0xFF5
 11736                           prodh	equ	0xFF4
 11737                           prodl	equ	0xFF3
 11738                           intcon	equ	0xFF2
 11739                           intcon2	equ	0xFF1
 11740                           postinc0	equ	0xFEE
 11741                           fsr0h	equ	0xFEA
 11742                           fsr0l	equ	0xFE9
 11743                           wreg	equ	0xFE8
 11744                           fsr1h	equ	0xFE2
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           postdec2	equ	0xFDD
 11749                           fsr2h	equ	0xFDA
 11750                           fsr2l	equ	0xFD9
 11751                           status	equ	0xFD8
 11752                           
 11753                           	psect	rparam
 11754  0000                     pclatu	equ	0xFFB
 11755                           pclath	equ	0xFFA
 11756                           tblptru	equ	0xFF8
 11757                           tblptrh	equ	0xFF7
 11758                           tblptrl	equ	0xFF6
 11759                           tablat	equ	0xFF5
 11760                           prodh	equ	0xFF4
 11761                           prodl	equ	0xFF3
 11762                           intcon	equ	0xFF2
 11763                           intcon2	equ	0xFF1
 11764                           postinc0	equ	0xFEE
 11765                           fsr0h	equ	0xFEA
 11766                           fsr0l	equ	0xFE9
 11767                           wreg	equ	0xFE8
 11768                           fsr1h	equ	0xFE2
 11769                           fsr1l	equ	0xFE1
 11770                           indf2	equ	0xFDF
 11771                           postinc2	equ	0xFDE
 11772                           postdec2	equ	0xFDD
 11773                           fsr2h	equ	0xFDA
 11774                           fsr2l	equ	0xFD9
 11775                           status	equ	0xFD8
 11776                           
 11777                           	psect	temp
 11778  00005F                     btemp:
 11779                           	opt stack 0
 11780  00005F                     	ds	1
 11781  0000                     int$flags	set	btemp
 11782                           pclatu	equ	0xFFB
 11783                           pclath	equ	0xFFA
 11784                           tblptru	equ	0xFF8
 11785                           tblptrh	equ	0xFF7
 11786                           tblptrl	equ	0xFF6
 11787                           tablat	equ	0xFF5
 11788                           prodh	equ	0xFF4
 11789                           prodl	equ	0xFF3
 11790                           intcon	equ	0xFF2
 11791                           intcon2	equ	0xFF1
 11792                           postinc0	equ	0xFEE
 11793                           fsr0h	equ	0xFEA
 11794                           fsr0l	equ	0xFE9
 11795                           wreg	equ	0xFE8
 11796                           fsr1h	equ	0xFE2
 11797                           fsr1l	equ	0xFE1
 11798                           indf2	equ	0xFDF
 11799                           postinc2	equ	0xFDE
 11800                           postdec2	equ	0xFDD
 11801                           fsr2h	equ	0xFDA
 11802                           fsr2l	equ	0xFD9
 11803                           status	equ	0xFD8


Data Sizes:
    Strings     425
    Constant    42
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      94
    BANK0           128     47      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[16]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[16]), STR_34(CODE[17]), 
		 -> STR_33(CODE[22]), STR_32(CODE[17]), STR_31(CODE[21]), STR_30(CODE[17]), 
		 -> STR_29(CODE[12]), STR_28(CODE[17]), STR_27(CODE[8]), STR_26(CODE[15]), 
		 -> STR_25(CODE[8]), STR_24(CODE[16]), STR_23(CODE[17]), STR_22(CODE[16]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[12]), STR_18(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[11]), 
		 -> STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[3]), STR_8(CODE[16]), STR_7(CODE[16]), STR_6(CODE[12]), 
		 -> STR_5(CODE[12]), STR_4(CODE[17]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_addRun
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _calibrateWheels->_updateS1
    _calibrateWheels->_updateS3
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->___awdiv
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_displayLog
    _homescreen->_printf
    _displayLog->_printf

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   31720
                                             17 BANK0     30    30      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                           _PWM2slow
                            ___awmod
                             _addRun
                    _calibrateWheels
                         _displayLog
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                             35 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             33 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             33 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     571
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             35 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             45 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             32 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    7236
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    8349
                                             56 COMRAM     2     0      2
                                             10 BANK0      7     7      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    7041
                                             44 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1204
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             39 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             32 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateWheels                                      4     4      0    1535
                                             35 COMRAM     4     4      0
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     554
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     686
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _startTMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2493
                                             36 COMRAM    24     2     22
                                              0 BANK0      3     3      0
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     834
                                             32 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      62
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     808
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM2slow                                             4     2      2     194
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 6     2      4     728
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             22    22      0    1982
                                             14 COMRAM    18    18      0
                            ___awdiv
                           _updateS2
                           i2___wmul
                        i2_startTMR1
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     158
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     290
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_startTMR1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _PWM2slow
   ___awmod
   _addRun
     _eepromRead
     _eepromWrite
   _calibrateWheels
     _readADC
     _startTMR1
     _updateS1
     _updateS3
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _startTMR1
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   ___awdiv
     i2___wmul (ARG)
   _updateS2
   i2___wmul
   i2_startTMR1
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      43       5       52.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      5E       1       74.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      34        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 12 14:54:18 2017

                        _s 0047                          _t 0045               ___awdiv@sign 000C  
                       _s1 00C0                         _s2 005D                         _s3 00BE  
                       _t2 0043                         _t3 0041        ___wmul@multiplicand 0023  
              __CFG_BORV$3 000000           ?_calibrateWheels 0001               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l220 0416                        l222 0426                        l231 04B0  
                      l320 0D14                        l240 051A                        l216 03F6  
                      l233 04C0                        l242 052A                        l218 0406  
                      l227 0490                        l500 1614                        l244 053A  
                      l229 04A0                        l502 1632                        l238 050A  
                      l511 167C                        l504 162E                        l521 16CE  
                      l513 169A                        l523 16CA                        l515 1696  
                      l611 1DBE                        l603 1D8A                        l540 1780  
                      l517 16B4                        l509 1680                        l613 1DBA  
                      l605 1D86                        l293 0A54                        l702 2AEC  
                      l542 1794                        l630 1E4C                        l622 1E18  
                      l519 16B0                        l615 1DD8                        l607 1DA4  
                      l544 17A8                        l632 1E48                        l624 1E14  
                      l617 1DD4                        l609 1DA0                        l546 17BC  
                      l490 15E4                        l650 1F14                        l634 1E66  
                      l626 1E32                        l394 2BFA                        l475 2732  
                      l708 2AC2                        l492 15E0                        l644 1ED8  
                      l636 1E62                        l628 1E2E                        l494 15FE  
                      l646 1EEC                        l496 15FA                        l648 1F00  
                      l498 1618                        l828 0F7A                        l781 21AC  
                      l686 2BE4                        l695 2BE0                        l696 2BDC  
                      l793 2268                        l689 2BF2               __CFG_CPB$OFF 000000  
                      _PR2 000FCB                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28               ___awmod@sign 0026                        prod 000FF3  
             PWM2slow@duty 0021                        wreg 000FE8        __end_ofi2_startTMR1 2C2C  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1220 2636  
                     l1273 296A                       l1283 2A8A                       l4004 27DC  
                     l4014 2800                       l4040 2144                       l4008 27E4  
                     l4050 218E                       l4042 2152                       l4034 2116  
                     l3500 1636                       l4044 2162                       l4052 2196  
                     l4036 2126                       l4310 2786                       l4302 2766  
                     l4070 2200                       l4046 2170                       l4038 2134  
                     l3414 25E8                       l4304 276E                       l4080 224A  
                     l4072 220E                       l4064 21D2                       l4048 2180  
                     l3416 25F4                       l6000 0864                       l4306 2772  
                     l4314 2790                       l3522 16B6                       l3514 1682  
                     l3610 1D74                       l4074 221E                       l4082 2252  
                     l4066 21E2                       l4058 21B4                       l3426 2628  
                     l3418 25F8                       l6002 0874                       l3508 165C  
                     l4076 222C                       l4068 21F0                       l5300 2A6C  
                     l6004 088E                       l4318 279E                       l3550 1754  
                     l3542 1724                       l3518 169C                       l3526 16D2  
                     l3622 1DC0                       l3614 1D8C                       l4078 223C  
                     l6022 08EE                       l3560 1782                       l3552 175E  
                     l3536 16FE                       l4088 2270                       l5304 2A80  
                     l5400 1058                       l6120 0B54                       l6112 0B10  
                     l6040 0950                       l6016 08CE                       l3546 1738  
                     l3482 15C0                       l3474 159A                       l3642 1E34  
                     l3634 1E02                       l3650 1E6A                       l3618 1DA6  
                     l3626 1DDC                       l5410 10AC                       l5330 0EAA  
                     l6122 0B76                       l6042 0958                       l6026 0902  
                     l6018 08D8                       l3580 17E6                       l3564 1796  
                     l3572 17BE                       l3556 1770                       l3492 1600  
                     l5260 2BC6                       l5412 10B6                       l5340 0EE2  
                     l5324 0E84                       l6140 0BD8                       l6116 0B28  
                     l6060 09C4                       l6036 0934                       l6044 0960  
                     l4294 274C                       l3670 1EDA                       l3646 1E4E  
                     l3638 1E1A                       l5430 1110                       l5406 1078  
                     l5334 0EB2                       l6134 0BBC                       l6118 0B44  
                     l6070 0A00                       l3584 17FC                       l3576 17D2  
                     l3568 17AA                       l3496 161A                       l3488 15E6  
                     l3664 1EBE                       l5280 2944                       l5424 10EA  
                     l5352 0F4A                       l5328 0E98                       l6160 0C3C  
                     l6144 0BE8                       l6136 0BC6                       l6072 0A10  
                     l6064 09E0                       l4298 2758                       l3850 2BAA  
                     l3674 1EEE                       l3666 1EC8                       l3658 1E98  
                     l5426 10F6                       l5434 1122                       l5418 10CE  
                     l5370 0FD4                       l5450 11E2                       l5514 1240  
                     l6154 0C18                       l6074 0A20                       l6066 09E8  
                     l6162 0C44                       l3588 1812                       l5276 2938  
                     l5436 1128                       l5444 11BC                       l5364 0FB2  
                     l5348 0F44                       l5508 121A                       l5516 1246  
                     l6172 0CB0                       l6092 0A98                       l6076 0A30  
                     l6084 0A5E                       l6068 09F8                       l5700 01FA  
                     l3678 1F02                       l3598 1D44                       l5278 2940  
                     l5438 1170                       l5446 11CE                       l5382 100A  
                     l6166 0C76                       l6158 0C34                       l6094 0AA0  
                     l6086 0A6E                       l3848 2B9C                       l5288 2960  
                     l5296 2A60                       l5448 11D6                       l5384 1010  
                     l5368 0FCE                       l3872 2B3A                       l6176 0CE4  
                     l6168 0C84                       l6096 0AB0                       l6088 0A80  
                     l5800 0418                       l5704 0236                       l5298 2A68  
                     l6186 0D90                       l6098 0AC8                       l5650 007A  
                     l6188 0DA6                       l5804 0428                       l5708 0256  
                     l5398 1046                       l5646 0066                       l5920 0684  
                     l5832 04B2                       l5824 0492                       l5808 0448  
                     l5672 0156                       l5656 0086                       _ADFM 007E07  
                     l5818 047E                       l5674 015E                       l5596 22D0  
                     l5916 0674                       l5860 052C                       l5852 050C  
                     l5828 04A2                       l5836 04C2                       l5692 01C2  
                     l5684 0196                       l5676 016E                       l5598 22D8  
                     l5942 0706                       l5846 04F8                       l5694 01CA  
                     l5686 019E                       l5960 0778                       l5864 053C  
                     l5856 051C                       l5792 03F8                       l5970 07AE  
                     l5786 03E4                       l5946 071A                       l5980 07F2  
                     l5964 0794                       l5868 055C                       l5796 0408  
                     l5974 07CA                       l5886 05BE                       l5976 07D2  
                     l5978 07E2                       l5994 0834                       l5998 0850  
                     STR_1 FF16                       STR_2 FF56                       STR_3 FF26  
                     STR_4 FEC4                       STR_5 FFC7                       STR_6 FFAF  
                     STR_7 FF36                       STR_8 FF66                       STR_9 FFFB  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u4010 1DFA  
                     u4110 1E8E                       u3500 15B8                       u3600 1654  
                     u3720 171A                       u4185 28A0                       u4450 2B38  
                     _PEIE 007F96                       u3910 1D6C                       u7030 1236  
                     u7015 2AD6                       _RCEN 007E2B                       u4495 2A9E  
                     u8007 0668                       u8017 0698                       u8107 136A  
                     u8027 06B2                       u8117 1406                       u8037 076A  
                     u8207 1580                       u8127 1466                       u8047 09B6  
                     u8217 15C6                       u8137 14C6                       u8057 0E2E  
                     u8227 1662                       u8147 1526                       u8067 2A12  
                     u8237 16E2                       u8157 28E4                       u8077 2A46  
                     u8247 2BA2                       u8167 28EE                       u8087 1270  
                     u8257 2716                       u8177 2910                       u8097 12CE  
                     u8187 291A                       u8197 1D2A                       u7840 0D58  
                     u7907 0272                       u7917 02AE                       u7927 02EE  
                     u7937 032E                       u7947 036E                       u7957 03CC  
                     u7967 0466                       u7887 005C                       u7977 04E0  
                     u7897 012C                       u7987 058C                       u7997 05D2  
                     _PWM1 29C2                       _PWM2 26C0                       _RSEN 007E29  
              displayLog@i 008D            __end_of_PWM1off 2C62            __end_of_PWM2off 2C58  
                     _main 0012                       _curr 003D                       _keys FE2B  
                     _time 00AF                       _prev 003F                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 005F                main@standby 00AD                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                 i2_updateS1 182A  
               i2_updateS3 1F18                      ?_PWM1 0021                      ?_PWM2 0021  
         ?_I2C_Master_Init 002E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 25C6                      _ADRES 000FC3  
                    _EEADR 000FA9                      STR_10 FF76                      STR_11 FF86  
                    STR_12 FFFB                      STR_20 FFDE                      STR_21 FFDE  
                    STR_13 FF96                      STR_30 FEB3                      STR_14 FFD3  
                    STR_22 FF46                      STR_15 FFF7                      STR_23 FED5  
                    STR_31 FE6B                      STR_16 FFF7                      STR_40 FEB3  
                    STR_32 FEB3                      STR_24 FEE6                      STR_17 FFF7  
                    STR_25 FFEF                      STR_41 FEA2                      STR_33 FE55  
                    STR_18 FFF7                      STR_34 FEB3                      STR_26 FE5C  
                    STR_42 FE80                      STR_27 FFE7                      STR_19 FFBB  
                    STR_35 FEF6                      STR_36 FEB3                      STR_28 FEB3  
          __end_of___awmod 27A8                      STR_29 FFA3                      STR_37 FE91  
                    STR_38 FEB3                      STR_39 FF06            __end_of___lldiv 2648  
                    _T0CON 000FD5            ___awdiv@divisor 0009                      _T1CON 000FCD  
                    _T2CON 000FCA                      _T3CON 000FB1            __end_of___lwdiv 2974  
          __end_of___lwmod 2A94                      i2l500 18C4                      i2l502 18E2  
                    i2l511 192C                      i2l504 18DE                      i2l521 197E  
                    i2l513 194A                      i2l185 1CE8                      i2l523 197A  
                    i2l515 1946                      i2l611 1FB2                      i2l603 1F7E  
                    i2l540 1A30                      i2l517 1964                      i2l509 1930  
                    i2l613 1FAE                      i2l605 1F7A                      i2l542 1A44  
                    i2l630 2040                      i2l622 200C                      i2l519 1960  
                    i2l615 1FCC                      i2l607 1F98                      i2l544 1A58  
                    i2l632 203C                      i2l624 2008                      i2l617 1FC8  
                    i2l609 1F94                      i2l570 247C                      i2l546 1A6C  
                    i2l490 1894                      i2l650 2108                      i2l634 205A  
                    i2l626 2026                      i2l572 249A                      i2l564 2466  
                    i2l492 1890                      i2l644 20CC                      i2l636 2056  
                    i2l628 2022                      i2l590 252E                      i2l574 2496  
                    i2l566 2462                      i2l494 18AE                      i2l646 20E0  
                    i2l592 253E                      i2l576 24B4                      i2l568 2480  
                    i2l496 18AA                      i2l648 20F4                      i2l586 250E  
                    i2l578 24B0                      i2l498 18C8                      i2l588 251E  
          ___awdiv@counter 000B               updateS1@mode 0021               updateS2@mode 0001  
             updateS3@mode 0021                      _TMR0H 000FD7                      _TMR1H 000FCF  
                    _TMR0L 000FD6                      _TMR3H 000FB3                      _TMR1L 000FCE  
                    _TMR3L 000FB2                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 2C44            __end_of_handler 1D24             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC 2BB0  
          __end_of_initLCD 2A52             __CFG_EBTRB$OFF 000000            __end_of_dpowers FE46  
             main@sodaLoad 0095           __end_of_PWM2slow 29C2            __end_of_isdigit 2BCE  
                    _sodaI 0049               main@sodaSort 00A7                      _soupI 004B  
                    _putch 2C2C                      main@s 0097                      pclath 000FFA  
                    tablat 000FF5           __end_ofi2___wmul 2B8C                      status 000FD8  
             main@soupLoad 0093               main@soupSort 00A5             __CFG_PBADEN$ON 000000  
             __end_of_PWM1 2A0C               __end_of_PWM2 2738            __initialization 2AF4  
             __end_of_main 0E76               __end_of_keys FE3C                     ??_PWM1 0023  
                   ??_PWM2 0025                i2_startTMR1 2C1C                     ??_main 0091  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0022  
       ??_I2C_Master_Start 0022                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0024                     _ADCON2 000FC0                  ??_PWM1off 0021  
                ??_PWM2off 0021                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7           ___awdiv@dividend 0007                     ?_putch 0001  
                   _CVRCON 000FB5                     i2l4400 19E8                     i2l4250 2556  
                   i2l4410 1A20                     i2l4404 1A04                     i2l4500 2042  
                   i2l4262 257C                     i2l4430 1A82                     i2l4422 1A5A  
                   i2l4414 1A32                     i2l4406 1A0E                     i2l4350 18CA  
                   i2l4342 1896                     i2l4264 2584                     i2l4256 2566  
                   i2l4336 1870                     i2l4328 184A                     i2l4520 20BC  
                   i2l4512 208C                     i2l4504 205E                     i2l4600 1CE2  
                   i2l4282 25BC                     i2l4274 25A4                     i2l4266 2588  
                   i2l4442 1AC2                     i2l4434 1A96                     i2l4418 1A46  
                   i2l4426 1A6E                     i2l4362 190C                     i2l4346 18B0  
                   i2l4354 18E6                     i2l4372 194C                     i2l4380 1982  
                   i2l4532 20F6                     i2l4524 20CE                     i2l4452 1F38  
                   i2l4278 25AE                     i2l4438 1AAC                     i2l4390 19AE  
                   i2l4518 20B2                     i2l4376 1966                     i2l4368 1932  
                   i2l4528 20E2                     i2l4472 1F9A                     i2l4464 1F68  
                   i2l4480 1FD0                     i2l4562 1B36                     i2l3940 249C  
                   i2l3932 2468                     i2l3916 2420                     i2l4396 19D4  
                   i2l4492 200E                     i2l4476 1FB4                     i2l4468 1F80  
                   i2l4580 1C44                     i2l3960 2502                     i2l3952 24DC  
                   i2l3936 2482                     i2l3928 2450                     i2l3944 24B8  
                   i2l4496 2028                     i2l4488 1FF6                     i2l4584 1C54  
                   i2l4576 1BD6                     i2l3972 2530                     i2l3964 2510  
                   i2l4596 1CD6                     i2l4588 1C60                     i2l3958 24FA  
                   i2l3968 2520                     _OSCCON 000FD3                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _TMR1IE 007CE8                     _TMR1IF 007CF0  
                   _TMR0ON 007EAF                     _TMR1ON 007E68                     _TMR3ON 007D88  
                   _S1mode 005B                     _S2mode 0059                     _SSPADD 000FC8  
                   _S3mode 0057                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038  
                   _addRun 2294                     ___wmul 2B40                  ??___awdiv 000B  
           __CFG_STVREN$ON 000000                  ??___awmod 0025                ?i2_updateS1 0001  
              ?i2_updateS3 0001                  ??___lldiv 0029                  ??___lwdiv 0025  
                ??___lwmod 002C              displayLog@run 0039           __end_of_keycheck 2BFA  
         calibrateWheels@i 0026                     clear_0 2AFA                     clear_1 2B06  
          eepromWrite@data 0021           __end_of_currtime FE55           ___awdiv@quotient 000D  
          ___awmod@divisor 0023            ___awmod@counter 0025                  ??_lcdInst 0023  
                   _printf 0E76                  ??_handler 000F                  ??_readADC 0021  
                ??_initLCD 0024                  ??_isdigit 0021               __mediumconst FE2A  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            ?_keyinterrupt 0001           __end_of_updateS1 182A           __end_of_updateS2 2542  
         __end_of_updateS3 1F18                 __accesstop 0080    __end_of__initialization 2B0C  
             addRun@sodaNT 0035               addRun@soupNL 0039              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 2C38                  ?_PWM2slow 0021  
                ?i2___wmul 0001         __size_of_lcdNibble 0056          eepromRead@address 0023  
           ??_keyinterrupt 0021             i2updateS1@mode 0001             i2updateS3@mode 0001  
                  ??_putch 0023                 addRun@date 002B        __size_ofi2_updateS1 02B0  
      __size_ofi2_updateS3 01F4                 __pbssBANK0 00AF                 addRun@mins 002F  
               addRun@secs 0031                 addRun@year 0027                    PWM2@dir 0023  
                  ?_addRun 0025                    ?___wmul 0021                    _CCP1CON 000FBD  
                  _CCP2CON 000FBA                 ??_PWM2slow 0023                    ?_printf 002D  
               _labelState 00BA                 ??i2___wmul 0005                 _eepromRead 2ACC  
        displayLog@currRun 008F   __size_of_calibrateWheels 0188               _handler$1821 001F  
       __size_of_startTMR1 0010                 _displayLog 11FE                    _PWM1off 2C58  
                  _PWM2off 2C4E                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                  ?_keycheck 0001          __end_of_lcdNibble 2922  
                  __Hparam 0000                    __Lparam 0000            __size_of_addRun 016C  
                  ___awdiv 2542                  ?_updateS1 0021                  ?_updateS2 0001  
                ?_updateS3 0021                    ___awmod 2738                    ___lldiv 25C6  
          __size_of___wmul 0026                    ___lwdiv 2922                    ___lwmod 2A52  
                _CMCONbits 000FB4                 _homescreen 2810                    __pcinit 2AF4  
                  __ramtop 1000                 _initialize 2648               ?i2_startTMR1 0001  
                  _lcdInst 2C38                    _handler 0008                    __ptext0 0012  
                  __ptext1 27A8                    __ptext2 2C44                    __ptext3 2C62  
                  __ptext4 2C6A                    __ptext5 2B1A                    __ptext6 2BFA  
                  __ptext7 2BCE                    __ptext8 2648                    __ptext9 2A0C  
          __size_of_printf 0388                  _T0CONbits 000FD5                    _readADC 2B8C  
                  _initLCD 2A0C          __end_of_hexpowers FE4E                    _dpowers FE3C  
                  _isdigit 2BB0           ___awmod@dividend 0021                    _seconds 00BC  
                  _sodaCnt 00B6   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _soupCnt 00B8  
           main@prevSodaIR 00A9             __pintcode_body 1ADA       end_of_initialization 2B0C  
           main@prevSoupIR 00AB                 ??_keycheck 0021              __Lmediumconst FE2A  
                  int_func 1ADA        i2___wmul@multiplier 0001  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0025            ___lldiv@counter 002D  
     __end_of_keyinterrupt 2BE4                    printf@c 0089                    printf@f 002D  
         I2C_Master_Init@c 002E           I2C_Master_Read@a 0022                    postdec2 000FDD  
        __end_of_startTMR1 2C1C                    postinc0 000FEE                    postinc2 000FDE  
             ??i2_updateS1 0003               ??i2_updateS3 0003                 ??_updateS1 0023  
               ??_updateS2 0003                 ??_updateS3 0023                  _PORTBbits 000F81  
              ?_eepromRead 0001              addRun@currRun 003B                 _updateTime 27A8  
              ?_displayLog 0039         __end_ofi2_updateS1 1ADA         __end_ofi2_updateS3 210C  
        ??_calibrateWheels 0024                _CCP1CONbits 000FBD              ??_eepromWrite 0022  
              printf@width 0087                _CCP2CONbits 000FBA                 main@sodaNT 00A3  
               main@soupNL 009F                ?_homescreen 0001             __end_of_addRun 2400  
           __end_of___wmul 2B66                ?_initialize 0001          __size_of_PWM2slow 004E  
         i2___wmul@product 0005             __end_of_printf 11FE        start_initialization 2AF4  
              updateTime@j 0024          __size_ofi2___wmul 0026          ??_I2C_Master_Init 0032  
        ??_I2C_Master_Read 0022          ??_I2C_Master_Wait 0021          ??_I2C_Master_Stop 0022  
         __CFG_OSC$INTIO67 000000        __size_of_eepromRead 0028                   ??_addRun 0080  
      __end_of_eepromWrite 2ACC                   ??___wmul 0025        __size_of_displayLog 037C  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0035                addRun@hours 002D  
              addRun@sodaT 0033                addRun@month 0029                addRun@soupL 0037  
     __size_ofi2_startTMR1 0010                __pbssCOMRAM 003D              __pcstackBANK0 0080  
              ?_updateTime 0001               _isdigit$1451 0022                   ?_PWM1off 0001  
                 ?_PWM2off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0016  
      __size_of_initialize 0078                  addRun@dur 0025           _I2C_Master_Start 2C6A  
         _I2C_Master_Write 2C44          __size_of_keycheck 0016           ___lwdiv@dividend 0021  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FE2A  
                _lcdNibble 28CC                   ?___awdiv 0007                   ?___awmod 0021  
                 ?___lldiv 0021                   PWM1@duty 0021                   PWM2@duty 0021  
                 ?___lwdiv 0021                   ?___lwmod 0028          __size_of_updateS1 02B0  
        __size_of_updateS2 0142          __size_of_updateS3 01F4                   ?_lcdInst 0001  
                 ?_handler 0001                   ?_readADC 0001                   ?_initLCD 0001  
                 ?_isdigit 0001               _keyinterrupt 2BCE                  _hexpowers FE46  
         ___lwdiv@quotient 0026             __size_of_putch 000C         eepromWrite@address 0024  
      calibrateWheels@prev 0024             ___wmul@product 0025                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite 2A94                  _sodaAlign 004F  
                 i2u507_40 1868                   _PIR2bits 000FA1                   i2u517_40 1904  
                 i2u454_40 2448                   i2u464_40 24D4                   i2u529_40 19CA  
                 i2u548_40 1F60                   i2u558_40 1FEE                  _sodaSteps 0053  
                 i2u830_47 1992                   i2u831_47 2406                   i2u568_40 2082  
                 i2u826_47 1F1E                   i2u827_47 1830                   i2u828_47 1876  
                 i2u829_47 1912           __CFG_WDTPS$32768 000000        __size_of_updateTime 0068  
               ?_lcdNibble 0001                   _PWM2slow 2974                  _startTMR1 2C0C  
               _ADCON0bits 000FC2          ___wmul@multiplier 0021                  _soupAlign 004D  
                 i2___wmul 2B66              lcdNibble@data 0022               ??_eepromRead 0021  
               printf@flag 0086              lcdNibble@temp 0021                  _soupSteps 0055  
               printf@prec 0083                  main@sodaT 00A1            _calibrateWheels 210C  
                main@soupL 009D           main@prevSodaLoad 009B               ??_displayLog 008A  
      I2C_Master_Read@temp 0023           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
         main@prevSoupLoad 0099                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead 2AF4         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0039           __size_of___awdiv 0084           __size_of___awmod 0070  
       __end_of_displayLog 157A      i2___wmul@multiplicand 0003           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             readADC@channel 0022  
             ??_initialize 0036                 ?_startTMR1 0001           __size_of_lcdInst 000C  
         __size_of_handler 1D1C            _I2C_Master_Init 2872           __size_of_readADC 0024  
          _I2C_Master_Read 2B1A           __size_of_initLCD 0046            _I2C_Master_Wait 2BFA  
          _I2C_Master_Stop 2C62           __size_of_isdigit 001E            ___lwdiv@divisor 0023  
          ___lwdiv@counter 0025                   __ptext10 2872                   __ptext11 25C6  
                 __ptext20 2C38                   __ptext12 2810                   __ptext21 28CC  
                 __ptext13 11FE                   __ptext30 2ACC                   __ptext22 2BE4  
                 __ptext14 0E76                   __ptext31 2738                   __ptext23 210C  
                 __ptext15 2C2C                   __ptext40 2C1C                   __ptext32 2974  
                 __ptext24 1D24                   __ptext16 2BB0                   __ptext41 2B66  
                 __ptext33 2C4E                   __ptext25 157A                   __ptext17 2B40  
                 __ptext42 2400                   __ptext34 26C0                   __ptext26 2C0C  
                 __ptext18 2A52                   __ptext43 2542                   __ptext35 2C58  
                 __ptext27 2B8C                   __ptext19 2922                   __ptext36 29C2  
                 __ptext28 2294                   __ptext29 2A94                   __ptext38 1F18  
                 __ptext39 182A              __size_of_PWM1 004A              __size_of_PWM2 0078  
       __end_of_homescreen 2872                   _keycheck 2BE4                   _tabState 0051  
            __size_of_main 0E64                   _currtime FE4E                   _keypress 00C2  
       __end_of_initialize 26C0                ??_lcdNibble 0021                   int$flags 005F  
                 _updateS1 157A                   _updateS2 2400                   _updateS3 1D24  
                printf@idx 0080                  printf@val 0084    __end_of_calibrateWheels 2294  
                putch@data 0023   __end_of_I2C_Master_Start 2C72                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write 2C4E                 _INTCONbits 000FF2               ??_updateTime 0024  
                 isdigit@c 0023                   intlevel2 0000           ___lwmod@dividend 0028  
         ___lldiv@dividend 0021                   printf@ap 0081         __end_of_updateTime 2810  
  __end_of_I2C_Master_Init 28CC    __end_of_I2C_Master_Read 2B40    __end_of_I2C_Master_Wait 2C0C  
  __end_of_I2C_Master_Stop 2C6A                lcdInst@data 0023              ??i2_startTMR1 0001  
              ??_startTMR1 0021           ___lldiv@quotient 0029          I2C_Master_Write@d 0022  
          ___lwmod@divisor 002A            ___lwmod@counter 002C               ?_eepromWrite 0021  
