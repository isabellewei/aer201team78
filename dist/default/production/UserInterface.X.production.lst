

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 08 13:01:30 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 1.41
    45                           ; Generated 25/01/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4620 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	smallconst
    80  001000                     __psmallconst:
    81                           	opt stack 0
    82  001000  00                 	db	0
    83  001001                     _keys:
    84                           	opt stack 0
    85  001001  31                 	db	49
    86  001002  32                 	db	50
    87  001003  33                 	db	51
    88  001004  41                 	db	65
    89  001005  34                 	db	52
    90  001006  35                 	db	53
    91  001007  36                 	db	54
    92  001008  42                 	db	66
    93  001009  37                 	db	55
    94  00100A  38                 	db	56
    95  00100B  39                 	db	57
    96  00100C  43                 	db	67
    97  00100D  2A                 	db	42
    98  00100E  30                 	db	48
    99  00100F  23                 	db	35
   100  001010  44                 	db	68
   101  001011  00                 	db	0
   102  001012                     __end_of_keys:
   103                           	opt stack 0
   104  001012                     _dpowers:
   105                           	opt stack 0
   106  001012  0001               	dw	1
   107  001014  000A               	dw	10
   108  001016  0064               	dw	100
   109  001018  03E8               	dw	1000
   110  00101A  2710               	dw	10000
   111  00101C                     __end_of_dpowers:
   112                           	opt stack 0
   113  00101C                     _hexpowers:
   114                           	opt stack 0
   115  00101C  0001               	dw	1
   116  00101E  0010               	dw	16
   117  001020  0100               	dw	256
   118  001022  1000               	dw	4096
   119  001024                     __end_of_hexpowers:
   120                           	opt stack 0
   121  001024                     _currtime:
   122                           	opt stack 0
   123  001024  30                 	db	48
   124  001025  26                 	db	38
   125  001026  13                 	db	19
   126  001027  04                 	db	4
   127  001028  01                 	db	1
   128  001029  03                 	db	3
   129  00102A  17                 	db	23
   130  00102B                     __end_of_currtime:
   131                           	opt stack 0
   132  0000                     _PIR2bits	set	4001
   133  0000                     _EECON2	set	4007
   134  0000                     _EEDATA	set	4008
   135  0000                     _EECON1bits	set	4006
   136  0000                     _EEADR	set	4009
   137  0000                     _EEADRH	set	4010
   138  0000                     _LATCbits	set	3979
   139  0000                     _TMR0L	set	4054
   140  0000                     _CCPR2L	set	4027
   141  0000                     _CCP2CONbits	set	4026
   142  0000                     _CCP1CONbits	set	4029
   143  0000                     _SSPBUF	set	4041
   144  0000                     _SSPADD	set	4040
   145  0000                     _SSPCON2	set	4037
   146  0000                     _SSPCON1	set	4038
   147  0000                     _SSPSTAT	set	4039
   148  0000                     _ADRESH	set	4036
   149  0000                     _T0CON	set	4053
   150  0000                     _CMCONbits	set	4020
   151  0000                     _CVRCON	set	4021
   152  0000                     _ADCON1	set	4033
   153  0000                     _LATEbits	set	3981
   154  0000                     _LATDbits	set	3980
   155  0000                     _LATE	set	3981
   156  0000                     _LATD	set	3980
   157  0000                     _LATC	set	3979
   158  0000                     _LATB	set	3978
   159  0000                     _LATA	set	3977
   160  0000                     _T2CON	set	4042
   161  0000                     _CCPR1L	set	4030
   162  0000                     _CCP1CON	set	4029
   163  0000                     _PR2	set	4043
   164  0000                     _TRISE	set	3990
   165  0000                     _TRISD	set	3989
   166  0000                     _TRISC	set	3988
   167  0000                     _TRISB	set	3987
   168  0000                     _TRISA	set	3986
   169  0000                     _OSCTUNEbits	set	3995
   170  0000                     _OSCCON	set	4051
   171  0000                     _PORTB	set	3969
   172  0000                     _PORTBbits	set	3969
   173  0000                     _ADCON0bits	set	4034
   174  0000                     _ADCON0	set	4034
   175  0000                     _ACKEN	set	32300
   176  0000                     _ACKDT	set	32301
   177  0000                     _RCEN	set	32299
   178  0000                     _PEN	set	32298
   179  0000                     _RSEN	set	32297
   180  0000                     _SEN	set	32296
   181  0000                     _TRISC4	set	31908
   182  0000                     _TRISC3	set	31907
   183  0000                     _ADFM	set	32263
   184  0000                     _nRBPU	set	32655
   185  00102B                     STR_3:
   186  00102B  46                 	db	70	;'F'
   187  00102C  69                 	db	105	;'i'
   188  00102D  6E                 	db	110	;'n'
   189  00102E  69                 	db	105	;'i'
   190  00102F  73                 	db	115	;'s'
   191  001030  68                 	db	104	;'h'
   192  001031  65                 	db	101	;'e'
   193  001032  64                 	db	100	;'d'
   194  001033  20                 	db	32
   195  001034  73                 	db	115	;'s'
   196  001035  6F                 	db	111	;'o'
   197  001036  72                 	db	114	;'r'
   198  001037  74                 	db	116	;'t'
   199  001038  69                 	db	105	;'i'
   200  001039  6E                 	db	110	;'n'
   201  00103A  67                 	db	103	;'g'
   202  00103B  21                 	db	33
   203  00103C  20                 	db	32
   204  00103D  00                 	db	0
   205  00103E                     STR_14:
   206  00103E  30                 	db	48	;'0'
   207  00103F  31                 	db	49	;'1'
   208  001040  32                 	db	50	;'2'
   209  001041  33                 	db	51	;'3'
   210  001042  34                 	db	52	;'4'
   211  001043  35                 	db	53	;'5'
   212  001044  36                 	db	54	;'6'
   213  001045  37                 	db	55	;'7'
   214  001046  38                 	db	56	;'8'
   215  001047  39                 	db	57	;'9'
   216  001048  61                 	db	97	;'a'
   217  001049  62                 	db	98	;'b'
   218  00104A  63                 	db	99	;'c'
   219  00104B  64                 	db	100	;'d'
   220  00104C  65                 	db	101	;'e'
   221  00104D  66                 	db	102	;'f'
   222  00104E  00                 	db	0
   223  00104F                     STR_4:
   224  00104F  25                 	db	37
   225  001050  30                 	db	48	;'0'
   226  001051  32                 	db	50	;'2'
   227  001052  78                 	db	120	;'x'
   228  001053  2F                 	db	47
   229  001054  25                 	db	37
   230  001055  30                 	db	48	;'0'
   231  001056  32                 	db	50	;'2'
   232  001057  78                 	db	120	;'x'
   233  001058  2F                 	db	47
   234  001059  25                 	db	37
   235  00105A  30                 	db	48	;'0'
   236  00105B  32                 	db	50	;'2'
   237  00105C  78                 	db	120	;'x'
   238  00105D  20                 	db	32
   239  00105E  00                 	db	0
   240  00105F                     STR_11:
   241  00105F  23                 	db	35
   242  001060  20                 	db	32
   243  001061  73                 	db	115	;'s'
   244  001062  6F                 	db	111	;'o'
   245  001063  64                 	db	100	;'d'
   246  001064  61                 	db	97	;'a'
   247  001065  20                 	db	32
   248  001066  63                 	db	99	;'c'
   249  001067  61                 	db	97	;'a'
   250  001068  6E                 	db	110	;'n'
   251  001069  73                 	db	115	;'s'
   252  00106A  3A                 	db	58	;':'
   253  00106B  20                 	db	32
   254  00106C  25                 	db	37
   255  00106D  64                 	db	100	;'d'
   256  00106E  00                 	db	0
   257  00106F                     STR_8:
   258  00106F  52                 	db	82	;'R'
   259  001070  75                 	db	117	;'u'
   260  001071  6E                 	db	110	;'n'
   261  001072  23                 	db	35
   262  001073  31                 	db	49	;'1'
   263  001074  20                 	db	32
   264  001075  20                 	db	32
   265  001076  20                 	db	32
   266  001077  20                 	db	32
   267  001078  41                 	db	65	;'A'
   268  001079  3A                 	db	58	;':'
   269  00107A  4E                 	db	78	;'N'
   270  00107B  65                 	db	101	;'e'
   271  00107C  78                 	db	120	;'x'
   272  00107D  74                 	db	116	;'t'
   273  00107E  00                 	db	0
   274  00107F                     STR_1:
   275  00107F  53                 	db	83	;'S'
   276  001080  6F                 	db	111	;'o'
   277  001081  72                 	db	114	;'r'
   278  001082  74                 	db	116	;'t'
   279  001083  69                 	db	105	;'i'
   280  001084  6E                 	db	110	;'n'
   281  001085  67                 	db	103	;'g'
   282  001086  20                 	db	32
   283  001087  63                 	db	99	;'c'
   284  001088  61                 	db	97	;'a'
   285  001089  6E                 	db	110	;'n'
   286  00108A  73                 	db	115	;'s'
   287  00108B  2E                 	db	46
   288  00108C  2E                 	db	46
   289  00108D  2E                 	db	46
   290  00108E  00                 	db	0
   291  00108F                     STR_2:
   292  00108F  41                 	db	65	;'A'
   293  001090  6E                 	db	110	;'n'
   294  001091  79                 	db	121	;'y'
   295  001092  20                 	db	32
   296  001093  6B                 	db	107	;'k'
   297  001094  65                 	db	101	;'e'
   298  001095  79                 	db	121	;'y'
   299  001096  20                 	db	32
   300  001097  74                 	db	116	;'t'
   301  001098  6F                 	db	111	;'o'
   302  001099  20                 	db	32
   303  00109A  73                 	db	115	;'s'
   304  00109B  74                 	db	116	;'t'
   305  00109C  6F                 	db	111	;'o'
   306  00109D  70                 	db	112	;'p'
   307  00109E  00                 	db	0
   308  00109F                     STR_13:
   309  00109F  23                 	db	35
   310  0010A0  20                 	db	32
   311  0010A1  73                 	db	115	;'s'
   312  0010A2  6F                 	db	111	;'o'
   313  0010A3  75                 	db	117	;'u'
   314  0010A4  70                 	db	112	;'p'
   315  0010A5  20                 	db	32
   316  0010A6  63                 	db	99	;'c'
   317  0010A7  61                 	db	97	;'a'
   318  0010A8  6E                 	db	110	;'n'
   319  0010A9  73                 	db	115	;'s'
   320  0010AA  3A                 	db	58	;':'
   321  0010AB  20                 	db	32
   322  0010AC  34                 	db	52	;'4'
   323  0010AD  00                 	db	0
   324  0010AE                     STR_6:
   325  0010AE  25                 	db	37
   326  0010AF  30                 	db	48	;'0'
   327  0010B0  32                 	db	50	;'2'
   328  0010B1  78                 	db	120	;'x'
   329  0010B2  3A                 	db	58	;':'
   330  0010B3  25                 	db	37
   331  0010B4  30                 	db	48	;'0'
   332  0010B5  32                 	db	50	;'2'
   333  0010B6  78                 	db	120	;'x'
   334  0010B7  3A                 	db	58	;':'
   335  0010B8  25                 	db	37
   336  0010B9  30                 	db	48	;'0'
   337  0010BA  32                 	db	50	;'2'
   338  0010BB  78                 	db	120	;'x'
   339  0010BC  00                 	db	0
   340  0010BD                     STR_9:
   341  0010BD  23                 	db	35
   342  0010BE  20                 	db	32
   343  0010BF  6F                 	db	111	;'o'
   344  0010C0  66                 	db	102	;'f'
   345  0010C1  20                 	db	32
   346  0010C2  63                 	db	99	;'c'
   347  0010C3  61                 	db	97	;'a'
   348  0010C4  6E                 	db	110	;'n'
   349  0010C5  73                 	db	115	;'s'
   350  0010C6  3A                 	db	58	;':'
   351  0010C7  20                 	db	32
   352  0010C8  25                 	db	37
   353  0010C9  64                 	db	100	;'d'
   354  0010CA  00                 	db	0
   355  0010CB                     STR_7:
   356  0010CB  20                 	db	32
   357  0010CC  32                 	db	50	;'2'
   358  0010CD  3A                 	db	58	;':'
   359  0010CE  4C                 	db	76	;'L'
   360  0010CF  6F                 	db	111	;'o'
   361  0010D0  67                 	db	103	;'g'
   362  0010D1  73                 	db	115	;'s'
   363  0010D2  00                 	db	0
   364  0010D3                     STR_5:
   365  0010D3  33                 	db	51	;'3'
   366  0010D4  3A                 	db	58	;':'
   367  0010D5  53                 	db	83	;'S'
   368  0010D6  74                 	db	116	;'t'
   369  0010D7  61                 	db	97	;'a'
   370  0010D8  72                 	db	114	;'r'
   371  0010D9  74                 	db	116	;'t'
   372  0010DA  00                 	db	0
   373  0000                     
   374                           ; #config settings
   375  0010DB  00                 	db	0	; dummy byte at the end
   376  0000                     
   377                           	psect	cinit
   378  001D50                     __pcinit:
   379                           	opt stack 0
   380  001D50                     start_initialization:
   381                           	opt stack 0
   382  001D50                     __initialization:
   383                           	opt stack 0
   384                           
   385                           ; Clear objects allocated to COMRAM (14 bytes)
   386  001D50  EE00  F036         	lfsr	0,__pbssCOMRAM
   387  001D54  0E0E               	movlw	14
   388  001D56                     clear_0:
   389  001D56  6AEE               	clrf	postinc0,c
   390  001D58  06E8               	decf	wreg,f,c
   391  001D5A  E1FD               	bnz	clear_0
   392  001D5C                     end_of_initialization:
   393                           	opt stack 0
   394  001D5C                     __end_of__initialization:
   395                           	opt stack 0
   396  001D5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   397  001D5E  6EF8               	movwf	tblptru,c
   398  001D60  0100               	movlb	0
   399  001D62  EFF4  F009         	goto	_main	;jump to C main() function
   400                           tblptru	equ	0xFF8
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           
   404                           	psect	bssCOMRAM
   405  000036                     __pbssCOMRAM:
   406                           	opt stack 0
   407  000036                     _time:
   408                           	opt stack 0
   409  000036                     	ds	7
   410  00003D                     _curr:
   411                           	opt stack 0
   412  00003D                     	ds	2
   413  00003F                     _prev:
   414                           	opt stack 0
   415  00003F                     	ds	2
   416  000041                     _s:
   417                           	opt stack 0
   418  000041                     	ds	2
   419  000043                     _keypress:
   420                           	opt stack 0
   421  000043                     	ds	1
   422                           tblptru	equ	0xFF8
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426                           	psect	cstackCOMRAM
   427  000001                     __pcstackCOMRAM:
   428                           	opt stack 0
   429  000001                     ??_updateStepper:
   430  000001                     ??_eepromRead:
   431  000001                     ??_isdigit:
   432  000001                     ??_readADC:
   433  000001                     ??_I2C_Master_Wait:
   434  000001                     ?___wmul:
   435                           	opt stack 0
   436  000001                     ?___lwdiv:
   437                           	opt stack 0
   438  000001                     ?___lldiv:
   439                           	opt stack 0
   440  000001                     lcdNibble@temp:
   441                           	opt stack 0
   442  000001                     PWM1@duty:
   443                           	opt stack 0
   444  000001                     ___wmul@multiplier:
   445                           	opt stack 0
   446  000001                     ___lwdiv@dividend:
   447                           	opt stack 0
   448  000001                     ___lldiv@dividend:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x0
   452  000001                     	ds	1
   453  000002                     readADC@channel:
   454                           	opt stack 0
   455  000002                     lcdNibble@data:
   456                           	opt stack 0
   457  000002                     I2C_Master_Read@a:
   458                           	opt stack 0
   459  000002                     _isdigit$1016:
   460                           	opt stack 0
   461  000002                     I2C_Master_Write@d:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x1
   465  000002                     	ds	1
   466  000003                     ??_PWM1:
   467  000003                     lcdInst@data:
   468                           	opt stack 0
   469  000003                     putch@data:
   470                           	opt stack 0
   471  000003                     I2C_Master_Read@temp:
   472                           	opt stack 0
   473  000003                     eepromRead@address:
   474                           	opt stack 0
   475  000003                     isdigit@c:
   476                           	opt stack 0
   477  000003                     ___wmul@multiplicand:
   478                           	opt stack 0
   479  000003                     ___lwdiv@divisor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x2
   483  000003                     	ds	1
   484  000004                     ??_initLCD:
   485  000004                     updateTime@j:
   486                           	opt stack 0
   487  000004                     eepromWrite@data:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x3
   491  000004                     	ds	1
   492  000005                     ??_eepromWrite:
   493  000005                     ___wmul@product:
   494                           	opt stack 0
   495  000005                     ___lwdiv@quotient:
   496                           	opt stack 0
   497  000005                     ___lldiv@divisor:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x4
   501  000005                     	ds	2
   502  000007                     ?_backlogTest:
   503                           	opt stack 0
   504  000007                     ?_timePassed:
   505                           	opt stack 0
   506  000007                     eepromWrite@address:
   507                           	opt stack 0
   508  000007                     ___lwdiv@counter:
   509                           	opt stack 0
   510  000007                     backlogTest@blockedStart:
   511                           	opt stack 0
   512  000007                     timePassed@start:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x6
   516  000007                     	ds	1
   517  000008                     ?___lwmod:
   518                           	opt stack 0
   519  000008                     ___lwmod@dividend:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x7
   523  000008                     	ds	1
   524  000009                     ??_timePassed:
   525  000009                     backlogTest@motorStatus:
   526                           	opt stack 0
   527  000009                     ___lldiv@quotient:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x8
   531  000009                     	ds	1
   532  00000A                     ___lwmod@divisor:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x9
   536  00000A                     	ds	1
   537  00000B                     ??_backlogTest:
   538                           
   539                           ; 1 bytes @ 0xA
   540  00000B                     	ds	1
   541  00000C                     ___lwmod@counter:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0xB
   545  00000C                     	ds	1
   546  00000D                     ?_printf:
   547                           	opt stack 0
   548  00000D                     ___lldiv@counter:
   549                           	opt stack 0
   550  00000D                     updateEEPROM@time:
   551                           	opt stack 0
   552  00000D                     printf@f:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0xC
   556  00000D                     	ds	1
   557  00000E                     I2C_Master_Init@c:
   558                           	opt stack 0
   559                           
   560                           ; 4 bytes @ 0xD
   561  00000E                     	ds	1
   562  00000F                     
   563                           ; 1 bytes @ 0xE
   564  00000F                     	ds	3
   565  000012                     ??_I2C_Master_Init:
   566                           
   567                           ; 1 bytes @ 0x11
   568  000012                     	ds	3
   569  000015                     ??_printf:
   570                           
   571                           ; 1 bytes @ 0x14
   572  000015                     	ds	1
   573  000016                     
   574                           ; 1 bytes @ 0x15
   575  000016                     	ds	3
   576  000019                     printf@idx:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x18
   580  000019                     	ds	1
   581  00001A                     printf@ap:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x19
   585  00001A                     	ds	2
   586  00001C                     printf@prec:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x1B
   590  00001C                     	ds	1
   591  00001D                     printf@val:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x1C
   595  00001D                     	ds	2
   596  00001F                     printf@flag:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x1E
   600  00001F                     	ds	1
   601  000020                     printf@width:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x1F
   605  000020                     	ds	2
   606  000022                     printf@c:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x21
   610  000022                     	ds	1
   611  000023                     ??_displayLogs:
   612                           
   613                           ; 1 bytes @ 0x22
   614  000023                     	ds	1
   615  000024                     ??_main:
   616                           
   617                           ; 1 bytes @ 0x23
   618  000024                     	ds	2
   619  000026                     main@s:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x25
   623  000026                     	ds	2
   624  000028                     main@soupLoad:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x27
   628  000028                     	ds	2
   629  00002A                     main@sodaLoad:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x29
   633  00002A                     	ds	2
   634  00002C                     main@canCheck:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2B
   638  00002C                     	ds	2
   639  00002E                     main@startTime:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x2D
   643  00002E                     	ds	2
   644  000030                     main@prevUnblock:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x2F
   648  000030                     	ds	2
   649  000032                     main@standby:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x31
   653  000032                     	ds	2
   654  000034                     main@dc:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x33
   658  000034                     	ds	2
   659                           tblptru	equ	0xFF8
   660                           postinc0	equ	0xFEE
   661                           wreg	equ	0xFE8
   662                           
   663 ;;
   664 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   665 ;;
   666 ;; *************** function _main *****************
   667 ;; Defined at:
   668 ;;		line 101 in file "main.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;  dc              2   51[COMRAM] int 
   673 ;;  standby         2   49[COMRAM] int 
   674 ;;  prevUnblock     2   47[COMRAM] int 
   675 ;;  startTime       2   45[COMRAM] int 
   676 ;;  canCheck        2   43[COMRAM] int 
   677 ;;  sodaLoad        2   41[COMRAM] int 
   678 ;;  soupLoad        2   39[COMRAM] int 
   679 ;;  s               2   37[COMRAM] int 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2  121[None  ] int 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;Total ram usage:       18 bytes
   694 ;; Hardware stack levels required when called:    4
   695 ;; This function calls:
   696 ;;		_PWM1
   697 ;;		_PWM1off
   698 ;;		___wmul
   699 ;;		_backlogTest
   700 ;;		_displayLogs
   701 ;;		_homescreen
   702 ;;		_initialize
   703 ;;		_keyinterrupt
   704 ;;		_lcdInst
   705 ;;		_printf
   706 ;;		_readADC
   707 ;;		_timePassed
   708 ;;		_updateEEPROM
   709 ;;		_updateStepper
   710 ;;		_updateTime
   711 ;; This function is called by:
   712 ;;		Startup code after reset
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text0
   717  0013E8                     __ptext0:
   718                           	opt stack 0
   719  0013E8                     _main:
   720                           	opt stack 27
   721                           
   722                           ;main.c: 102: initialize();
   723                           
   724                           ;incstack = 0
   725  0013E8  EC2A  F00C         	call	_initialize	;wreg free
   726                           
   727                           ;main.c: 103: int standby = 1;
   728  0013EC  0E00               	movlw	0
   729  0013EE  6E33               	movwf	main@standby+1,c
   730  0013F0  0E01               	movlw	1
   731  0013F2  6E32               	movwf	main@standby,c
   732                           
   733                           ;main.c: 104: int s = 0;
   734  0013F4  0E00               	movlw	0
   735  0013F6  6E27               	movwf	main@s+1,c
   736  0013F8  0E00               	movlw	0
   737  0013FA  6E26               	movwf	main@s,c
   738                           
   739                           ;main.c: 105: int dc = 0;
   740  0013FC  0E00               	movlw	0
   741  0013FE  6E35               	movwf	main@dc+1,c
   742  001400  0E00               	movlw	0
   743  001402  6E34               	movwf	main@dc,c
   744                           
   745                           ;main.c: 106: int startTime;
   746                           ;main.c: 107: int prevUnblock = 0;
   747  001404  0E00               	movlw	0
   748  001406  6E31               	movwf	main@prevUnblock+1,c
   749  001408  0E00               	movlw	0
   750  00140A  6E30               	movwf	main@prevUnblock,c
   751                           
   752                           ;main.c: 108: int soupLoad = 1;
   753  00140C  0E00               	movlw	0
   754  00140E  6E29               	movwf	main@soupLoad+1,c
   755  001410  0E01               	movlw	1
   756  001412  6E28               	movwf	main@soupLoad,c
   757                           
   758                           ;main.c: 109: int sodaLoad = 1;
   759  001414  0E00               	movlw	0
   760  001416  6E2B               	movwf	main@sodaLoad+1,c
   761  001418  0E01               	movlw	1
   762  00141A  6E2A               	movwf	main@sodaLoad,c
   763                           
   764                           ;main.c: 110: int canCheck;
   765                           ;main.c: 113: _delay((unsigned long)((10)*(32000000/4000.0)));
   766  00141C  0E68               	movlw	104
   767  00141E  6E24               	movwf	??_main& (0+255),c
   768  001420  0EE4               	movlw	228
   769  001422                     u1347:
   770  001422  2EE8               	decfsz	wreg,f,c
   771  001424  D7FE               	bra	u1347
   772  001426  2E24               	decfsz	??_main& (0+255),f,c
   773  001428  D7FC               	bra	u1347
   774  00142A  D000               	nop2	
   775  00142C                     l2088:
   776                           
   777                           ;main.c: 117: updateTime();
   778  00142C  ECA3  F00C         	call	_updateTime	;wreg free
   779                           
   780                           ;main.c: 118: updateStepper();
   781  001430  EC9B  F00B         	call	_updateStepper	;wreg free
   782                           
   783                           ;main.c: 120: if (standby){
   784  001434  5032               	movf	main@standby,w,c
   785  001436  1033               	iorwf	main@standby+1,w,c
   786  001438  B4D8               	btfsc	status,2,c
   787  00143A  D055               	goto	l2126
   788                           
   789                           ;main.c: 121: keypress = (0);
   790  00143C  0E00               	movlw	0
   791  00143E  6E43               	movwf	_keypress,c	;volatile
   792                           
   793                           ;main.c: 122: homescreen();
   794  001440  ECD6  F00C         	call	_homescreen	;wreg free
   795                           
   796                           ;main.c: 123: keyinterrupt();
   797  001444  ECB3  F00E         	call	_keyinterrupt	;wreg free
   798                           
   799                           ;main.c: 126: if(keypress == 2){
   800  001448  0E02               	movlw	2
   801  00144A  1843               	xorwf	_keypress,w,c	;volatile
   802  00144C  A4D8               	btfss	status,2,c
   803  00144E  D045               	goto	l2122
   804                           
   805                           ;main.c: 127: standby = 0;
   806  001450  0E00               	movlw	0
   807  001452  6E33               	movwf	main@standby+1,c
   808  001454  0E00               	movlw	0
   809  001456  6E32               	movwf	main@standby,c
   810                           
   811                           ;main.c: 128: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
   812  001458  0E01               	movlw	1
   813  00145A  ECD6  F00E         	call	_lcdInst
   814  00145E  0E68               	movlw	104
   815  001460  6E24               	movwf	??_main& (0+255),c
   816  001462  0EE4               	movlw	228
   817  001464                     u1357:
   818  001464  2EE8               	decfsz	wreg,f,c
   819  001466  D7FE               	bra	u1357
   820  001468  2E24               	decfsz	??_main& (0+255),f,c
   821  00146A  D7FC               	bra	u1357
   822  00146C  D000               	nop2	
   823                           
   824                           ;main.c: 129: printf("Sorting cans...");
   825  00146E  0E7F               	movlw	low STR_1
   826  001470  6E0D               	movwf	printf@f,c
   827  001472  0E10               	movlw	high STR_1
   828  001474  6E0E               	movwf	printf@f+1,c
   829  001476  EC6E  F008         	call	_printf	;wreg free
   830                           
   831                           ;main.c: 130: lcdInst(0b11000000);;
   832  00147A  0EC0               	movlw	192
   833  00147C  ECD6  F00E         	call	_lcdInst
   834                           
   835                           ;main.c: 131: printf("Any key to stop");
   836  001480  0E8F               	movlw	low STR_2
   837  001482  6E0D               	movwf	printf@f,c
   838  001484  0E10               	movlw	high STR_2
   839  001486  6E0E               	movwf	printf@f+1,c
   840  001488  EC6E  F008         	call	_printf	;wreg free
   841                           
   842                           ;main.c: 132: PWM1(100);
   843  00148C  0E00               	movlw	0
   844  00148E  6E02               	movwf	PWM1@duty+1,c
   845  001490  0E64               	movlw	100
   846  001492  6E01               	movwf	PWM1@duty,c
   847  001494  ECAD  F00D         	call	_PWM1	;wreg free
   848                           
   849                           ;main.c: 133: dc = 1;
   850  001498  0E00               	movlw	0
   851  00149A  6E35               	movwf	main@dc+1,c
   852  00149C  0E01               	movlw	1
   853  00149E  6E34               	movwf	main@dc,c
   854                           
   855                           ;main.c: 134: startTime = time[0] + 60*time[1] + 3600*time[2];
   856  0014A0  C038  F001         	movff	_time+2,___wmul@multiplier
   857  0014A4  6A02               	clrf	___wmul@multiplier+1,c
   858  0014A6  0E0E               	movlw	14
   859  0014A8  6E04               	movwf	___wmul@multiplicand+1,c
   860  0014AA  0E10               	movlw	16
   861  0014AC  6E03               	movwf	___wmul@multiplicand,c
   862  0014AE  EC74  F00E         	call	___wmul	;wreg free
   863  0014B2  5037               	movf	_time+1,w,c
   864  0014B4  0D3C               	mullw	60
   865  0014B6  5036               	movf	_time,w,c
   866  0014B8  6E24               	movwf	??_main& (0+255),c
   867  0014BA  6A25               	clrf	(??_main+1)& (0+255),c
   868  0014BC  50F3               	movf	prodl,w,c
   869  0014BE  2624               	addwf	??_main,f,c
   870  0014C0  50F4               	movf	prodh,w,c
   871  0014C2  2225               	addwfc	??_main+1,f,c
   872  0014C4  5001               	movf	?___wmul,w,c
   873  0014C6  2424               	addwf	??_main,w,c
   874  0014C8  6E2E               	movwf	main@startTime,c
   875  0014CA  5002               	movf	?___wmul+1,w,c
   876  0014CC  2025               	addwfc	??_main+1,w,c
   877  0014CE  6E2F               	movwf	main@startTime+1,c
   878                           
   879                           ;main.c: 135: canCheck = startTime;
   880  0014D0  C02E  F02C         	movff	main@startTime,main@canCheck
   881  0014D4  C02F  F02D         	movff	main@startTime+1,main@canCheck+1
   882                           
   883                           ;main.c: 137: }
   884  0014D8  D7A9               	goto	l2088
   885  0014DA                     l2122:
   886                           
   887                           ;main.c: 138: else if(keypress == 1){
   888  0014DA  0443               	decf	_keypress,w,c	;volatile
   889  0014DC  A4D8               	btfss	status,2,c
   890  0014DE  D7A6               	goto	l2088
   891                           
   892                           ;main.c: 140: displayLogs();
   893  0014E0  EC38  F00B         	call	_displayLogs	;wreg free
   894                           
   895                           ;main.c: 141: }
   896                           ;main.c: 143: }
   897  0014E4  D7A3               	goto	l2088
   898  0014E6                     l2126:
   899                           
   900                           ;main.c: 144: else{
   901                           ;main.c: 145: keypress = (0);
   902  0014E6  0E00               	movlw	0
   903  0014E8  6E43               	movwf	_keypress,c	;volatile
   904                           
   905                           ;main.c: 146: keyinterrupt();
   906  0014EA  ECB3  F00E         	call	_keyinterrupt	;wreg free
   907                           
   908                           ;main.c: 147: if (keypress != (0)) {
   909  0014EE  5043               	movf	_keypress,w,c	;volatile
   910  0014F0  B4D8               	btfsc	status,2,c
   911  0014F2  D004               	goto	l2134
   912                           
   913                           ;main.c: 148: standby = 1;
   914  0014F4  0E00               	movlw	0
   915  0014F6  6E33               	movwf	main@standby+1,c
   916  0014F8  0E01               	movlw	1
   917  0014FA  6E32               	movwf	main@standby,c
   918  0014FC                     l2134:
   919                           
   920                           ;main.c: 149: }
   921                           ;main.c: 151: readADC(2);
   922  0014FC  0E02               	movlw	2
   923  0014FE  EC87  F00E         	call	_readADC
   924                           
   925                           ;main.c: 152: if (dc ^ backlogTest(prevUnblock, dc)){
   926  001502  C030  F007         	movff	main@prevUnblock,backlogTest@blockedStart
   927  001506  C031  F008         	movff	main@prevUnblock+1,backlogTest@blockedStart+1
   928  00150A  C034  F009         	movff	main@dc,backlogTest@motorStatus
   929  00150E  C035  F00A         	movff	main@dc+1,backlogTest@motorStatus+1
   930  001512  EC67  F00C         	call	_backlogTest	;wreg free
   931  001516  5034               	movf	main@dc,w,c
   932  001518  1A07               	xorwf	?_backlogTest,f,c
   933  00151A  5035               	movf	main@dc+1,w,c
   934  00151C  1A08               	xorwf	?_backlogTest+1,f,c
   935  00151E  5007               	movf	?_backlogTest,w,c
   936  001520  1008               	iorwf	?_backlogTest+1,w,c
   937  001522  B4D8               	btfsc	status,2,c
   938  001524  D033               	goto	l2148
   939                           
   940                           ;main.c: 153: dc = backlogTest(prevUnblock, dc);
   941  001526  C030  F007         	movff	main@prevUnblock,backlogTest@blockedStart
   942  00152A  C031  F008         	movff	main@prevUnblock+1,backlogTest@blockedStart+1
   943  00152E  C034  F009         	movff	main@dc,backlogTest@motorStatus
   944  001532  C035  F00A         	movff	main@dc+1,backlogTest@motorStatus+1
   945  001536  EC67  F00C         	call	_backlogTest	;wreg free
   946  00153A  C007  F034         	movff	?_backlogTest,main@dc
   947  00153E  C008  F035         	movff	?_backlogTest+1,main@dc+1
   948                           
   949                           ;main.c: 154: if (dc){PWM1(500);}
   950  001542  5034               	movf	main@dc,w,c
   951  001544  1035               	iorwf	main@dc+1,w,c
   952  001546  B4D8               	btfsc	status,2,c
   953  001548  D007               	goto	l2144
   954  00154A  0E01               	movlw	1
   955  00154C  6E02               	movwf	PWM1@duty+1,c
   956  00154E  0EF4               	movlw	244
   957  001550  6E01               	movwf	PWM1@duty,c
   958  001552  ECAD  F00D         	call	_PWM1	;wreg free
   959  001556  D01A               	goto	l2148
   960  001558                     l2144:
   961                           
   962                           ;main.c: 155: else {
   963                           ;main.c: 156: PWM1off();
   964  001558  ECE1  F00E         	call	_PWM1off	;wreg free
   965                           
   966                           ;main.c: 157: prevUnblock = time[0] + 60*time[1] + 3600*time[2];
   967  00155C  C038  F001         	movff	_time+2,___wmul@multiplier
   968  001560  6A02               	clrf	___wmul@multiplier+1,c
   969  001562  0E0E               	movlw	14
   970  001564  6E04               	movwf	___wmul@multiplicand+1,c
   971  001566  0E10               	movlw	16
   972  001568  6E03               	movwf	___wmul@multiplicand,c
   973  00156A  EC74  F00E         	call	___wmul	;wreg free
   974  00156E  5037               	movf	_time+1,w,c
   975  001570  0D3C               	mullw	60
   976  001572  5036               	movf	_time,w,c
   977  001574  6E24               	movwf	??_main& (0+255),c
   978  001576  6A25               	clrf	(??_main+1)& (0+255),c
   979  001578  50F3               	movf	prodl,w,c
   980  00157A  2624               	addwf	??_main,f,c
   981  00157C  50F4               	movf	prodh,w,c
   982  00157E  2225               	addwfc	??_main+1,f,c
   983  001580  5001               	movf	?___wmul,w,c
   984  001582  2424               	addwf	??_main,w,c
   985  001584  6E30               	movwf	main@prevUnblock,c
   986  001586  5002               	movf	?___wmul+1,w,c
   987  001588  2025               	addwfc	??_main+1,w,c
   988  00158A  6E31               	movwf	main@prevUnblock+1,c
   989  00158C                     l2148:
   990                           
   991                           ;main.c: 158: }
   992                           ;main.c: 159: }
   993                           ;main.c: 161: if(timePassed(canCheck) > 10){
   994  00158C  C02C  F007         	movff	main@canCheck,timePassed@start
   995  001590  C02D  F008         	movff	main@canCheck+1,timePassed@start+1
   996  001594  EC88  F00D         	call	_timePassed	;wreg free
   997  001598  BE08               	btfsc	?_timePassed+1,7,c
   998  00159A  D036               	goto	l2164
   999  00159C  5008               	movf	?_timePassed+1,w,c
  1000  00159E  E104               	bnz	u1280
  1001  0015A0  0E0B               	movlw	11
  1002  0015A2  5C07               	subwf	?_timePassed,w,c
  1003  0015A4  A0D8               	btfss	status,0,c
  1004  0015A6  D030               	goto	l2164
  1005  0015A8                     u1280:
  1006                           
  1007                           ;main.c: 162: readADC(3);
  1008  0015A8  0E03               	movlw	3
  1009  0015AA  EC87  F00E         	call	_readADC
  1010                           
  1011                           ;main.c: 163: soupLoad = ADRESH;
  1012  0015AE  CFC4 F028          	movff	4036,main@soupLoad	;volatile
  1013  0015B2  6A29               	clrf	main@soupLoad+1,c
  1014                           
  1015                           ;main.c: 164: readADC(4);
  1016  0015B4  0E04               	movlw	4
  1017  0015B6  EC87  F00E         	call	_readADC
  1018                           
  1019                           ;main.c: 165: sodaLoad = ADRESH;
  1020  0015BA  CFC4 F02A          	movff	4036,main@sodaLoad	;volatile
  1021  0015BE  6A2B               	clrf	main@sodaLoad+1,c
  1022                           
  1023                           ;main.c: 166: if (!soupLoad & !sodaLoad){
  1024  0015C0  5028               	movf	main@soupLoad,w,c
  1025  0015C2  1029               	iorwf	main@soupLoad+1,w,c
  1026  0015C4  A4D8               	btfss	status,2,c
  1027  0015C6  D008               	goto	l2162
  1028  0015C8  502A               	movf	main@sodaLoad,w,c
  1029  0015CA  102B               	iorwf	main@sodaLoad+1,w,c
  1030  0015CC  A4D8               	btfss	status,2,c
  1031  0015CE  D004               	goto	l2162
  1032                           
  1033                           ;main.c: 167: standby = 1;
  1034  0015D0  0E00               	movlw	0
  1035  0015D2  6E33               	movwf	main@standby+1,c
  1036  0015D4  0E01               	movlw	1
  1037  0015D6  6E32               	movwf	main@standby,c
  1038  0015D8                     l2162:
  1039                           
  1040                           ;main.c: 168: }
  1041                           ;main.c: 169: canCheck = time[0] + 60*time[1] + 3600*time[2];
  1042  0015D8  C038  F001         	movff	_time+2,___wmul@multiplier
  1043  0015DC  6A02               	clrf	___wmul@multiplier+1,c
  1044  0015DE  0E0E               	movlw	14
  1045  0015E0  6E04               	movwf	___wmul@multiplicand+1,c
  1046  0015E2  0E10               	movlw	16
  1047  0015E4  6E03               	movwf	___wmul@multiplicand,c
  1048  0015E6  EC74  F00E         	call	___wmul	;wreg free
  1049  0015EA  5037               	movf	_time+1,w,c
  1050  0015EC  0D3C               	mullw	60
  1051  0015EE  5036               	movf	_time,w,c
  1052  0015F0  6E24               	movwf	??_main& (0+255),c
  1053  0015F2  6A25               	clrf	(??_main+1)& (0+255),c
  1054  0015F4  50F3               	movf	prodl,w,c
  1055  0015F6  2624               	addwf	??_main,f,c
  1056  0015F8  50F4               	movf	prodh,w,c
  1057  0015FA  2225               	addwfc	??_main+1,f,c
  1058  0015FC  5001               	movf	?___wmul,w,c
  1059  0015FE  2424               	addwf	??_main,w,c
  1060  001600  6E2C               	movwf	main@canCheck,c
  1061  001602  5002               	movf	?___wmul+1,w,c
  1062  001604  2025               	addwfc	??_main+1,w,c
  1063  001606  6E2D               	movwf	main@canCheck+1,c
  1064  001608                     l2164:
  1065                           
  1066                           ;main.c: 170: }
  1067                           ;main.c: 173: if(standby){
  1068  001608  5032               	movf	main@standby,w,c
  1069  00160A  1033               	iorwf	main@standby+1,w,c
  1070  00160C  B4D8               	btfsc	status,2,c
  1071  00160E  D70E               	goto	l2088
  1072                           
  1073                           ;main.c: 174: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1074  001610  0E01               	movlw	1
  1075  001612  ECD6  F00E         	call	_lcdInst
  1076  001616  0E68               	movlw	104
  1077  001618  6E24               	movwf	??_main& (0+255),c
  1078  00161A  0EE4               	movlw	228
  1079  00161C                     u1367:
  1080  00161C  2EE8               	decfsz	wreg,f,c
  1081  00161E  D7FE               	bra	u1367
  1082  001620  2E24               	decfsz	??_main& (0+255),f,c
  1083  001622  D7FC               	bra	u1367
  1084  001624  D000               	nop2	
  1085                           
  1086                           ;main.c: 175: printf("Finished sorting! ");
  1087  001626  0E2B               	movlw	low STR_3
  1088  001628  6E0D               	movwf	printf@f,c
  1089  00162A  0E10               	movlw	high STR_3
  1090  00162C  6E0E               	movwf	printf@f+1,c
  1091  00162E  EC6E  F008         	call	_printf	;wreg free
  1092                           
  1093                           ;main.c: 176: _delay((unsigned long)((500)*(32000000/4000.0)));
  1094  001632  0E15               	movlw	21
  1095  001634  6E25               	movwf	(??_main+1)& (0+255),c
  1096  001636  0E4B               	movlw	75
  1097  001638  6E24               	movwf	??_main& (0+255),c
  1098  00163A  0EBE               	movlw	190
  1099  00163C                     u1377:
  1100  00163C  2EE8               	decfsz	wreg,f,c
  1101  00163E  D7FE               	bra	u1377
  1102  001640  2E24               	decfsz	??_main& (0+255),f,c
  1103  001642  D7FC               	bra	u1377
  1104  001644  2E25               	decfsz	(??_main+1)& (0+255),f,c
  1105  001646  D7FA               	bra	u1377
  1106  001648  D000               	nop2	
  1107                           
  1108                           ;main.c: 177: PWM1off();
  1109  00164A  ECE1  F00E         	call	_PWM1off	;wreg free
  1110                           
  1111                           ;main.c: 178: dc = 0;
  1112  00164E  0E00               	movlw	0
  1113  001650  6E35               	movwf	main@dc+1,c
  1114  001652  0E00               	movlw	0
  1115  001654  6E34               	movwf	main@dc,c
  1116                           
  1117                           ;main.c: 179: updateEEPROM(timePassed(startTime));
  1118  001656  C02E  F007         	movff	main@startTime,timePassed@start
  1119  00165A  C02F  F008         	movff	main@startTime+1,timePassed@start+1
  1120  00165E  EC88  F00D         	call	_timePassed	;wreg free
  1121  001662  C007  F00D         	movff	?_timePassed,updateEEPROM@time
  1122  001666  C008  F00E         	movff	?_timePassed+1,updateEEPROM@time+1
  1123  00166A  EC32  F00E         	call	_updateEEPROM	;wreg free
  1124  00166E  D6DE               	goto	l2088
  1125  001670                     __end_of_main:
  1126                           	opt stack 0
  1127                           tblptru	equ	0xFF8
  1128                           prodh	equ	0xFF4
  1129                           prodl	equ	0xFF3
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           status	equ	0xFD8
  1133                           
  1134 ;; *************** function _updateTime *****************
  1135 ;; Defined at:
  1136 ;;		line 89 in file "I2C.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;		None
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  j               1    3[COMRAM] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;Total ram usage:        1 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    2
  1157 ;; This function calls:
  1158 ;;		_I2C_Master_Read
  1159 ;;		_I2C_Master_Start
  1160 ;;		_I2C_Master_Stop
  1161 ;;		_I2C_Master_Write
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text1
  1168  001946                     __ptext1:
  1169                           	opt stack 0
  1170  001946                     _updateTime:
  1171                           	opt stack 28
  1172                           
  1173                           ;I2C.c: 91: I2C_Master_Start();
  1174                           
  1175                           ;incstack = 0
  1176  001946  ECEA  F00E         	call	_I2C_Master_Start	;wreg free
  1177                           
  1178                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  1179  00194A  0E00               	movlw	0
  1180  00194C  6E03               	movwf	I2C_Master_Write@d+1,c
  1181  00194E  0ED0               	movlw	208
  1182  001950  6E02               	movwf	I2C_Master_Write@d,c
  1183  001952  ECDC  F00E         	call	_I2C_Master_Write	;wreg free
  1184                           
  1185                           ;I2C.c: 93: I2C_Master_Write(0x00);
  1186  001956  0E00               	movlw	0
  1187  001958  6E03               	movwf	I2C_Master_Write@d+1,c
  1188  00195A  0E00               	movlw	0
  1189  00195C  6E02               	movwf	I2C_Master_Write@d,c
  1190  00195E  ECDC  F00E         	call	_I2C_Master_Write	;wreg free
  1191                           
  1192                           ;I2C.c: 94: I2C_Master_Stop();
  1193  001962  ECE6  F00E         	call	_I2C_Master_Stop	;wreg free
  1194                           
  1195                           ;I2C.c: 97: I2C_Master_Start();
  1196  001966  ECEA  F00E         	call	_I2C_Master_Start	;wreg free
  1197                           
  1198                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  1199  00196A  0E00               	movlw	0
  1200  00196C  6E03               	movwf	I2C_Master_Write@d+1,c
  1201  00196E  0ED1               	movlw	209
  1202  001970  6E02               	movwf	I2C_Master_Write@d,c
  1203  001972  ECDC  F00E         	call	_I2C_Master_Write	;wreg free
  1204                           
  1205                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  1206  001976  0E00               	movlw	0
  1207  001978  6E04               	movwf	updateTime@j,c
  1208  00197A                     l1982:
  1209  00197A  0E05               	movlw	5
  1210  00197C  6404               	cpfsgt	updateTime@j,c
  1211  00197E  D001               	goto	l1986
  1212  001980  D00E               	goto	l1992
  1213  001982                     l1986:
  1214                           
  1215                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  1216  001982  5004               	movf	updateTime@j,w,c
  1217  001984  0D01               	mullw	1
  1218  001986  0E36               	movlw	low _time
  1219  001988  24F3               	addwf	prodl,w,c
  1220  00198A  6ED9               	movwf	fsr2l,c
  1221  00198C  0E00               	movlw	high _time
  1222  00198E  20F4               	addwfc	prodh,w,c
  1223  001990  6EDA               	movwf	fsr2h,c
  1224  001992  0E01               	movlw	1
  1225  001994  EC61  F00E         	call	_I2C_Master_Read
  1226  001998  6EDF               	movwf	indf2,c
  1227  00199A  2A04               	incf	updateTime@j,f,c
  1228  00199C  D7EE               	goto	l1982
  1229  00199E                     l1992:
  1230                           
  1231                           ;I2C.c: 101: }
  1232                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  1233  00199E  0E00               	movlw	0
  1234  0019A0  EC61  F00E         	call	_I2C_Master_Read
  1235  0019A4  6E3C               	movwf	_time+6,c
  1236                           
  1237                           ;I2C.c: 103: I2C_Master_Stop();
  1238  0019A6  ECE6  F00E         	call	_I2C_Master_Stop	;wreg free
  1239  0019AA  0012               	return		;funcret
  1240  0019AC                     __end_of_updateTime:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           prodh	equ	0xFF4
  1244                           prodl	equ	0xFF3
  1245                           postinc0	equ	0xFEE
  1246                           wreg	equ	0xFE8
  1247                           indf2	equ	0xFDF
  1248                           fsr2h	equ	0xFDA
  1249                           fsr2l	equ	0xFD9
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _I2C_Master_Write *****************
  1253 ;; Defined at:
  1254 ;;		line 54 in file "I2C.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  d               2    1[COMRAM] unsigned int 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      void 
  1261 ;; Registers used:
  1262 ;;		wreg, status,2, status,0, cstack
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;Total ram usage:        2 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    1
  1275 ;; This function calls:
  1276 ;;		_I2C_Master_Wait
  1277 ;; This function is called by:
  1278 ;;		_updateTime
  1279 ;;		_set_time
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text2
  1284  001DB8                     __ptext2:
  1285                           	opt stack 0
  1286  001DB8                     _I2C_Master_Write:
  1287                           	opt stack 28
  1288                           
  1289                           ;I2C.c: 56: I2C_Master_Wait();
  1290                           
  1291                           ;incstack = 0
  1292  001DB8  ECC7  F00E         	call	_I2C_Master_Wait	;wreg free
  1293                           
  1294                           ;I2C.c: 57: SSPBUF = d;
  1295  001DBC  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  1296  001DC0  0012               	return		;funcret
  1297  001DC2                     __end_of_I2C_Master_Write:
  1298                           	opt stack 0
  1299                           tblptru	equ	0xFF8
  1300                           prodh	equ	0xFF4
  1301                           prodl	equ	0xFF3
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           indf2	equ	0xFDF
  1305                           fsr2h	equ	0xFDA
  1306                           fsr2l	equ	0xFD9
  1307                           status	equ	0xFD8
  1308                           
  1309 ;; *************** function _I2C_Master_Stop *****************
  1310 ;; Defined at:
  1311 ;;		line 48 in file "I2C.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;Total ram usage:        0 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    1
  1332 ;; This function calls:
  1333 ;;		_I2C_Master_Wait
  1334 ;; This function is called by:
  1335 ;;		_updateTime
  1336 ;;		_set_time
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           	psect	text3
  1341  001DCC                     __ptext3:
  1342                           	opt stack 0
  1343  001DCC                     _I2C_Master_Stop:
  1344                           	opt stack 28
  1345                           
  1346                           ;I2C.c: 50: I2C_Master_Wait();
  1347                           
  1348                           ;incstack = 0
  1349  001DCC  ECC7  F00E         	call	_I2C_Master_Wait	;wreg free
  1350                           
  1351                           ;I2C.c: 51: PEN = 1;
  1352  001DD0  84C5               	bsf	4037,2,c	;volatile
  1353  001DD2  0012               	return		;funcret
  1354  001DD4                     __end_of_I2C_Master_Stop:
  1355                           	opt stack 0
  1356                           tblptru	equ	0xFF8
  1357                           prodh	equ	0xFF4
  1358                           prodl	equ	0xFF3
  1359                           postinc0	equ	0xFEE
  1360                           wreg	equ	0xFE8
  1361                           indf2	equ	0xFDF
  1362                           fsr2h	equ	0xFDA
  1363                           fsr2l	equ	0xFD9
  1364                           status	equ	0xFD8
  1365                           
  1366 ;; *************** function _I2C_Master_Start *****************
  1367 ;; Defined at:
  1368 ;;		line 36 in file "I2C.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    1
  1389 ;; This function calls:
  1390 ;;		_I2C_Master_Wait
  1391 ;; This function is called by:
  1392 ;;		_updateTime
  1393 ;;		_set_time
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text4
  1398  001DD4                     __ptext4:
  1399                           	opt stack 0
  1400  001DD4                     _I2C_Master_Start:
  1401                           	opt stack 28
  1402                           
  1403                           ;I2C.c: 38: I2C_Master_Wait();
  1404                           
  1405                           ;incstack = 0
  1406  001DD4  ECC7  F00E         	call	_I2C_Master_Wait	;wreg free
  1407                           
  1408                           ;I2C.c: 39: SEN = 1;
  1409  001DD8  80C5               	bsf	4037,0,c	;volatile
  1410  001DDA  0012               	return		;funcret
  1411  001DDC                     __end_of_I2C_Master_Start:
  1412                           	opt stack 0
  1413                           tblptru	equ	0xFF8
  1414                           prodh	equ	0xFF4
  1415                           prodl	equ	0xFF3
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           indf2	equ	0xFDF
  1419                           fsr2h	equ	0xFDA
  1420                           fsr2l	equ	0xFD9
  1421                           status	equ	0xFD8
  1422                           
  1423 ;; *************** function _I2C_Master_Read *****************
  1424 ;; Defined at:
  1425 ;;		line 60 in file "I2C.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  a               1    wreg     unsigned char 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  a               1    1[COMRAM] unsigned char 
  1430 ;;  temp            1    2[COMRAM] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      unsigned char 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1444 ;;Total ram usage:        2 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    1
  1447 ;; This function calls:
  1448 ;;		_I2C_Master_Wait
  1449 ;; This function is called by:
  1450 ;;		_updateTime
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text5
  1455  001CC2                     __ptext5:
  1456                           	opt stack 0
  1457  001CC2                     _I2C_Master_Read:
  1458                           	opt stack 28
  1459                           
  1460                           ;incstack = 0
  1461                           ;I2C_Master_Read@a stored from wreg
  1462  001CC2  6E02               	movwf	I2C_Master_Read@a,c
  1463                           
  1464                           ;I2C.c: 62: unsigned char temp;
  1465                           ;I2C.c: 63: I2C_Master_Wait();
  1466  001CC4  ECC7  F00E         	call	_I2C_Master_Wait	;wreg free
  1467                           
  1468                           ;I2C.c: 64: RCEN = 1;
  1469  001CC8  86C5               	bsf	4037,3,c	;volatile
  1470                           
  1471                           ;I2C.c: 65: I2C_Master_Wait();
  1472  001CCA  ECC7  F00E         	call	_I2C_Master_Wait	;wreg free
  1473                           
  1474                           ;I2C.c: 66: temp = SSPBUF;
  1475  001CCE  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  1476                           
  1477                           ;I2C.c: 67: I2C_Master_Wait();
  1478  001CD2  ECC7  F00E         	call	_I2C_Master_Wait	;wreg free
  1479                           
  1480                           ;I2C.c: 68: ACKDT = (a)?0:1;
  1481  001CD6  5002               	movf	I2C_Master_Read@a,w,c
  1482  001CD8  A4D8               	btfss	status,2,c
  1483  001CDA  D002               	goto	u400
  1484  001CDC  8AC5               	bsf	4037,5,c	;volatile
  1485  001CDE  D001               	goto	l1334
  1486  001CE0                     u400:
  1487  001CE0  9AC5               	bcf	4037,5,c	;volatile
  1488  001CE2                     l1334:
  1489                           
  1490                           ;I2C.c: 69: ACKEN = 1;
  1491  001CE2  88C5               	bsf	4037,4,c	;volatile
  1492                           
  1493                           ;I2C.c: 70: return temp;
  1494  001CE4  5003               	movf	I2C_Master_Read@temp,w,c
  1495  001CE6  0012               	return	
  1496  001CE8                     __end_of_I2C_Master_Read:
  1497                           	opt stack 0
  1498                           tblptru	equ	0xFF8
  1499                           prodh	equ	0xFF4
  1500                           prodl	equ	0xFF3
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           indf2	equ	0xFDF
  1504                           fsr2h	equ	0xFDA
  1505                           fsr2l	equ	0xFD9
  1506                           status	equ	0xFD8
  1507                           
  1508 ;; *************** function _I2C_Master_Wait *****************
  1509 ;; Defined at:
  1510 ;;		line 31 in file "I2C.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;		None
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;Total ram usage:        1 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_I2C_Master_Start
  1534 ;;		_I2C_Master_Stop
  1535 ;;		_I2C_Master_Write
  1536 ;;		_I2C_Master_Read
  1537 ;;		_I2C_Master_RepeatedStart
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text6
  1542  001D8E                     __ptext6:
  1543                           	opt stack 0
  1544  001D8E                     _I2C_Master_Wait:
  1545                           	opt stack 28
  1546  001D8E                     l197:
  1547  001D8E  B4C7               	btfsc	4039,2,c	;volatile
  1548  001D90  D7FE               	goto	l197
  1549  001D92  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  1550  001D96  0E1F               	movlw	31
  1551  001D98  1601               	andwf	??_I2C_Master_Wait,f,c
  1552  001D9A  B4D8               	btfsc	status,2,c
  1553  001D9C  0012               	return	
  1554  001D9E  D7F7               	goto	l197
  1555  001DA0                     __end_of_I2C_Master_Wait:
  1556                           	opt stack 0
  1557                           tblptru	equ	0xFF8
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           indf2	equ	0xFDF
  1563                           fsr2h	equ	0xFDA
  1564                           fsr2l	equ	0xFD9
  1565                           status	equ	0xFD8
  1566                           
  1567 ;; *************** function _updateStepper *****************
  1568 ;; Defined at:
  1569 ;;		line 49 in file "motors.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;		None
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2, status,0
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;Total ram usage:        4 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text7
  1597  001736                     __ptext7:
  1598                           	opt stack 0
  1599  001736                     _updateStepper:
  1600                           	opt stack 30
  1601                           
  1602                           ;motors.c: 50: if (TMR0L>prev) {curr = TMR0L-prev;}
  1603                           
  1604                           ;incstack = 0
  1605  001736  50D6               	movf	4054,w,c	;volatile
  1606  001738  6E01               	movwf	??_updateStepper& (0+255),c
  1607  00173A  6A02               	clrf	(??_updateStepper+1)& (0+255),c
  1608  00173C  5001               	movf	??_updateStepper,w,c
  1609  00173E  5C3F               	subwf	_prev,w,c
  1610  001740  5040               	movf	_prev+1,w,c
  1611  001742  0A80               	xorlw	128
  1612  001744  6E03               	movwf	(??_updateStepper+2)& (0+255),c
  1613  001746  5002               	movf	??_updateStepper+1,w,c
  1614  001748  0A80               	xorlw	128
  1615  00174A  5803               	subwfb	(??_updateStepper+2)& (0+255),w,c
  1616  00174C  B0D8               	btfsc	status,0,c
  1617  00174E  D00E               	goto	l1432
  1618  001750  C03F  F001         	movff	_prev,??_updateStepper
  1619  001754  C040  F002         	movff	_prev+1,??_updateStepper+1
  1620  001758  1E01               	comf	??_updateStepper,f,c
  1621  00175A  1E02               	comf	??_updateStepper+1,f,c
  1622  00175C  4A01               	infsnz	??_updateStepper,f,c
  1623  00175E  2A02               	incf	??_updateStepper+1,f,c
  1624  001760  50D6               	movf	4054,w,c	;volatile
  1625  001762  2401               	addwf	??_updateStepper,w,c
  1626  001764  6E3D               	movwf	_curr,c
  1627  001766  0E00               	movlw	0
  1628  001768  2002               	addwfc	??_updateStepper+1,w,c
  1629  00176A  D014               	goto	L1
  1630  00176C                     l1432:
  1631                           
  1632                           ;motors.c: 51: else {curr = TMR0L-prev + 255;}
  1633  00176C  C03F  F001         	movff	_prev,??_updateStepper
  1634  001770  C040  F002         	movff	_prev+1,??_updateStepper+1
  1635  001774  1E01               	comf	??_updateStepper,f,c
  1636  001776  1E02               	comf	??_updateStepper+1,f,c
  1637  001778  4A01               	infsnz	??_updateStepper,f,c
  1638  00177A  2A02               	incf	??_updateStepper+1,f,c
  1639  00177C  50D6               	movf	4054,w,c	;volatile
  1640  00177E  6E03               	movwf	(??_updateStepper+2)& (0+255),c
  1641  001780  6A04               	clrf	(??_updateStepper+3)& (0+255),c
  1642  001782  5001               	movf	??_updateStepper,w,c
  1643  001784  2603               	addwf	??_updateStepper+2,f,c
  1644  001786  5002               	movf	??_updateStepper+1,w,c
  1645  001788  2204               	addwfc	??_updateStepper+3,f,c
  1646  00178A  0EFF               	movlw	255
  1647  00178C  2403               	addwf	??_updateStepper+2,w,c
  1648  00178E  6E3D               	movwf	_curr,c
  1649  001790  0E00               	movlw	0
  1650  001792  2004               	addwfc	??_updateStepper+3,w,c
  1651  001794                     L1:
  1652  001794  6E3E               	movwf	_curr+1,c
  1653                           
  1654                           ;motors.c: 53: if (curr > 50) {
  1655  001796  BE3E               	btfsc	_curr+1,7,c
  1656  001798  D00F               	goto	l1440
  1657  00179A  503E               	movf	_curr+1,w,c
  1658  00179C  E104               	bnz	u520
  1659  00179E  0E33               	movlw	51
  1660  0017A0  5C3D               	subwf	_curr,w,c
  1661  0017A2  A0D8               	btfss	status,0,c
  1662  0017A4  D009               	goto	l1440
  1663  0017A6                     u520:
  1664                           
  1665                           ;motors.c: 54: s++;
  1666  0017A6  4A41               	infsnz	_s,f,c
  1667  0017A8  2A42               	incf	_s+1,f,c
  1668                           
  1669                           ;motors.c: 55: curr = 0;
  1670  0017AA  0E00               	movlw	0
  1671  0017AC  6E3E               	movwf	_curr+1,c
  1672  0017AE  0E00               	movlw	0
  1673  0017B0  6E3D               	movwf	_curr,c
  1674                           
  1675                           ;motors.c: 56: prev = TMR0L;
  1676  0017B2  CFD6 F03F          	movff	4054,_prev	;volatile
  1677  0017B6  6A40               	clrf	_prev+1,c
  1678  0017B8                     l1440:
  1679                           
  1680                           ;motors.c: 57: }
  1681                           ;motors.c: 58: if (s>4) {s=1;}
  1682  0017B8  BE42               	btfsc	_s+1,7,c
  1683  0017BA  0012               	return	
  1684  0017BC  5042               	movf	_s+1,w,c
  1685  0017BE  E104               	bnz	u530
  1686  0017C0  0E05               	movlw	5
  1687  0017C2  5C41               	subwf	_s,w,c
  1688  0017C4  A0D8               	btfss	status,0,c
  1689  0017C6  0012               	return	
  1690  0017C8                     u530:
  1691  0017C8  0E00               	movlw	0
  1692  0017CA  6E42               	movwf	_s+1,c
  1693  0017CC  0E01               	movlw	1
  1694  0017CE  6E41               	movwf	_s,c
  1695  0017D0  0012               	return	
  1696  0017D2                     __end_of_updateStepper:
  1697                           	opt stack 0
  1698                           tblptru	equ	0xFF8
  1699                           prodh	equ	0xFF4
  1700                           prodl	equ	0xFF3
  1701                           postinc0	equ	0xFEE
  1702                           wreg	equ	0xFE8
  1703                           indf2	equ	0xFDF
  1704                           fsr2h	equ	0xFDA
  1705                           fsr2l	equ	0xFD9
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _updateEEPROM *****************
  1709 ;; Defined at:
  1710 ;;		line 72 in file "interface.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  time            2   12[COMRAM] int 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;		None
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1724 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;Total ram usage:        2 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    1
  1731 ;; This function calls:
  1732 ;;		_eepromRead
  1733 ;;		_eepromWrite
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text8
  1740  001C64                     __ptext8:
  1741                           	opt stack 0
  1742  001C64                     _updateEEPROM:
  1743                           	opt stack 29
  1744                           
  1745                           ;interface.c: 73: eepromWrite(40, eepromRead(30));
  1746                           
  1747                           ;incstack = 0
  1748  001C64  0E1E               	movlw	30
  1749  001C66  EC4D  F00E         	call	_eepromRead
  1750  001C6A  6E04               	movwf	eepromWrite@data,c
  1751  001C6C  0E28               	movlw	40
  1752  001C6E  EC16  F00E         	call	_eepromWrite
  1753                           
  1754                           ;interface.c: 74: eepromWrite(30, eepromRead(20));
  1755  001C72  0E14               	movlw	20
  1756  001C74  EC4D  F00E         	call	_eepromRead
  1757  001C78  6E04               	movwf	eepromWrite@data,c
  1758  001C7A  0E1E               	movlw	30
  1759  001C7C  EC16  F00E         	call	_eepromWrite
  1760                           
  1761                           ;interface.c: 75: eepromWrite(20, eepromRead(10));
  1762  001C80  0E0A               	movlw	10
  1763  001C82  EC4D  F00E         	call	_eepromRead
  1764  001C86  6E04               	movwf	eepromWrite@data,c
  1765  001C88  0E14               	movlw	20
  1766  001C8A  EC16  F00E         	call	_eepromWrite
  1767                           
  1768                           ;interface.c: 76: eepromWrite(10, time);
  1769  001C8E  C00D  F004         	movff	updateEEPROM@time,eepromWrite@data
  1770  001C92  0E0A               	movlw	10
  1771  001C94  EC16  F00E         	call	_eepromWrite
  1772  001C98  0012               	return		;funcret
  1773  001C9A                     __end_of_updateEEPROM:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           prodh	equ	0xFF4
  1777                           prodl	equ	0xFF3
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           indf2	equ	0xFDF
  1781                           fsr2h	equ	0xFDA
  1782                           fsr2l	equ	0xFD9
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _eepromWrite *****************
  1786 ;; Defined at:
  1787 ;;		line 46 in file "interface.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  address         1    wreg     char 
  1790 ;;  data            1    3[COMRAM] char 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  address         1    6[COMRAM] char 
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1802 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;Total ram usage:        4 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_updateEEPROM
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text9
  1816  001C2C                     __ptext9:
  1817                           	opt stack 0
  1818  001C2C                     _eepromWrite:
  1819                           	opt stack 29
  1820                           
  1821                           ;incstack = 0
  1822                           ;eepromWrite@address stored from wreg
  1823  001C2C  6E07               	movwf	eepromWrite@address,c
  1824                           
  1825                           ;interface.c: 48: EEADRH = (signed char)(address >> 8);
  1826  001C2E  C007  F005         	movff	eepromWrite@address,??_eepromWrite
  1827  001C32  0E08               	movlw	8
  1828  001C34  6E06               	movwf	(??_eepromWrite+1)& (0+255),c
  1829  001C36                     u1165:
  1830  001C36  3405               	rlcf	??_eepromWrite,w,c
  1831  001C38  3205               	rrcf	??_eepromWrite,f,c
  1832  001C3A  2E06               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  1833  001C3C  D7FC               	goto	u1165
  1834  001C3E  5005               	movf	??_eepromWrite,w,c
  1835  001C40  6EAA               	movwf	4010,c	;volatile
  1836                           
  1837                           ;interface.c: 49: EEADR = (signed char)address;
  1838  001C42  C007  FFA9         	movff	eepromWrite@address,4009	;volatile
  1839                           
  1840                           ;interface.c: 51: EEDATA = data;
  1841  001C46  C004  FFA8         	movff	eepromWrite@data,4008	;volatile
  1842                           
  1843                           ;interface.c: 52: EECON1bits.EEPGD = 0;
  1844  001C4A  9EA6               	bcf	4006,7,c	;volatile
  1845                           
  1846                           ;interface.c: 53: EECON1bits.CFGS = 0;
  1847  001C4C  9CA6               	bcf	4006,6,c	;volatile
  1848                           
  1849                           ;interface.c: 54: EECON1bits.WREN = 1;
  1850  001C4E  84A6               	bsf	4006,2,c	;volatile
  1851                           
  1852                           ;interface.c: 58: EECON2 = 0x55;
  1853  001C50  0E55               	movlw	85
  1854  001C52  6EA7               	movwf	4007,c	;volatile
  1855                           
  1856                           ;interface.c: 59: EECON2 = 0xAA;
  1857  001C54  0EAA               	movlw	170
  1858  001C56  6EA7               	movwf	4007,c	;volatile
  1859                           
  1860                           ;interface.c: 60: EECON1bits.WR = 1;
  1861  001C58  82A6               	bsf	4006,1,c	;volatile
  1862  001C5A                     l340:
  1863  001C5A  A8A1               	btfss	4001,4,c	;volatile
  1864  001C5C  D7FE               	goto	l340
  1865                           
  1866                           ;interface.c: 66: }
  1867                           ;interface.c: 68: PIR2bits.EEIF = 0;
  1868  001C5E  98A1               	bcf	4001,4,c	;volatile
  1869                           
  1870                           ;interface.c: 69: EECON1bits.WREN = 0;
  1871  001C60  94A6               	bcf	4006,2,c	;volatile
  1872  001C62  0012               	return		;funcret
  1873  001C64                     __end_of_eepromWrite:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           prodh	equ	0xFF4
  1877                           prodl	equ	0xFF3
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           indf2	equ	0xFDF
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function _timePassed *****************
  1886 ;; Defined at:
  1887 ;;		line 19 in file "logic.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  start           2    6[COMRAM] int 
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  2    6[COMRAM] int 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;Total ram usage:        6 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    1
  1908 ;; This function calls:
  1909 ;;		___wmul
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text10
  1916  001B10                     __ptext10:
  1917                           	opt stack 0
  1918  001B10                     _timePassed:
  1919                           	opt stack 29
  1920                           
  1921                           ;logic.c: 21: else{return time[0] + 60*time[1] + 3600*time[2] - start;}
  1922                           
  1923                           ;logic.c: 20: if(time[0] + 60*time[1] + 3600*time[2] >= 86400){return time[0] + 60*time[
      +                          1] + 3600*time[2] + 86400 - start;}
  1924                           
  1925                           ;incstack = 0
  1926  001B10  C007  F009         	movff	timePassed@start,??_timePassed
  1927  001B14  C008  F00A         	movff	timePassed@start+1,??_timePassed+1
  1928  001B18  1E09               	comf	??_timePassed,f,c
  1929  001B1A  1E0A               	comf	??_timePassed+1,f,c
  1930  001B1C  4A09               	infsnz	??_timePassed,f,c
  1931  001B1E  2A0A               	incf	??_timePassed+1,f,c
  1932  001B20  C038  F001         	movff	_time+2,___wmul@multiplier
  1933  001B24  6A02               	clrf	___wmul@multiplier+1,c
  1934  001B26  0E0E               	movlw	14
  1935  001B28  6E04               	movwf	___wmul@multiplicand+1,c
  1936  001B2A  0E10               	movlw	16
  1937  001B2C  6E03               	movwf	___wmul@multiplicand,c
  1938  001B2E  EC74  F00E         	call	___wmul	;wreg free
  1939  001B32  5037               	movf	_time+1,w,c
  1940  001B34  0D3C               	mullw	60
  1941  001B36  5036               	movf	_time,w,c
  1942  001B38  6E0B               	movwf	(??_timePassed+2)& (0+255),c
  1943  001B3A  6A0C               	clrf	(??_timePassed+3)& (0+255),c
  1944  001B3C  50F3               	movf	prodl,w,c
  1945  001B3E  260B               	addwf	??_timePassed+2,f,c
  1946  001B40  50F4               	movf	prodh,w,c
  1947  001B42  220C               	addwfc	??_timePassed+3,f,c
  1948  001B44  5001               	movf	?___wmul,w,c
  1949  001B46  260B               	addwf	??_timePassed+2,f,c
  1950  001B48  5002               	movf	?___wmul+1,w,c
  1951  001B4A  220C               	addwfc	??_timePassed+3,f,c
  1952  001B4C  5009               	movf	??_timePassed,w,c
  1953  001B4E  240B               	addwf	??_timePassed+2,w,c
  1954  001B50  6E07               	movwf	?_timePassed,c
  1955  001B52  500A               	movf	??_timePassed+1,w,c
  1956  001B54  200C               	addwfc	??_timePassed+3,w,c
  1957  001B56  6E08               	movwf	?_timePassed+1,c
  1958  001B58  0012               	return	
  1959  001B5A                     __end_of_timePassed:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           indf2	equ	0xFDF
  1967                           fsr2h	equ	0xFDA
  1968                           fsr2l	equ	0xFD9
  1969                           status	equ	0xFD8
  1970                           
  1971 ;; *************** function _readADC *****************
  1972 ;; Defined at:
  1973 ;;		line 17 in file "main.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;  channel         1    wreg     unsigned char 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  channel         1    1[COMRAM] unsigned char 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;Total ram usage:        2 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text11
  2001  001D0E                     __ptext11:
  2002                           	opt stack 0
  2003  001D0E                     _readADC:
  2004                           	opt stack 30
  2005                           
  2006                           ;incstack = 0
  2007                           ;readADC@channel stored from wreg
  2008  001D0E  6E02               	movwf	readADC@channel,c
  2009                           
  2010                           ;main.c: 19: ADCON0 = ((channel <<2));
  2011  001D10  4402               	rlncf	readADC@channel,w,c
  2012  001D12  46E8               	rlncf	wreg,f,c
  2013  001D14  0BFC               	andlw	252
  2014  001D16  6EC2               	movwf	4034,c	;volatile
  2015                           
  2016                           ;main.c: 20: ADCON0bits.ADON = 1;
  2017  001D18  80C2               	bsf	4034,0,c	;volatile
  2018                           
  2019                           ;main.c: 21: ADCON0bits.GO = 1;
  2020  001D1A  82C2               	bsf	4034,1,c	;volatile
  2021                           
  2022                           ;main.c: 22: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0))
      +                          );}
  2023  001D1C  D007               	goto	l1380
  2024  001D1E                     l1378:
  2025  001D1E  0E34               	movlw	52
  2026  001D20  6E01               	movwf	??_readADC& (0+255),c
  2027  001D22  0EF2               	movlw	242
  2028  001D24                     u1387:
  2029  001D24  2EE8               	decfsz	wreg,f,c
  2030  001D26  D7FE               	bra	u1387
  2031  001D28  2E01               	decfsz	??_readADC& (0+255),f,c
  2032  001D2A  D7FC               	bra	u1387
  2033  001D2C                     l1380:
  2034  001D2C  A2C2               	btfss	4034,1,c	;volatile
  2035  001D2E  0012               	return	
  2036  001D30  D7F6               	goto	l1378
  2037  001D32                     __end_of_readADC:
  2038                           	opt stack 0
  2039                           tblptru	equ	0xFF8
  2040                           prodh	equ	0xFF4
  2041                           prodl	equ	0xFF3
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _keyinterrupt *****************
  2050 ;; Defined at:
  2051 ;;		line 38 in file "main.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;		None
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        0 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; This function calls:
  2072 ;;		Nothing
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text12
  2079  001D66                     __ptext12:
  2080                           	opt stack 0
  2081  001D66                     _keyinterrupt:
  2082                           	opt stack 30
  2083                           
  2084                           ;main.c: 39: if(PORTBbits.RB1 == 1){
  2085                           
  2086                           ;incstack = 0
  2087  001D66  A281               	btfss	3969,1,c	;volatile
  2088  001D68  D006               	goto	l112
  2089                           
  2090                           ;main.c: 40: keypress = (PORTB & 0xF0)>>4;
  2091  001D6A  3881               	swapf	3969,w,c	;volatile
  2092  001D6C  0B0F               	andlw	15
  2093  001D6E  0B0F               	andlw	15
  2094  001D70  6E43               	movwf	_keypress,c	;volatile
  2095  001D72                     l113:
  2096  001D72  B281               	btfsc	3969,1,c	;volatile
  2097  001D74  D7FE               	goto	l113
  2098  001D76                     l112:
  2099                           
  2100                           ;main.c: 46: }
  2101                           ;main.c: 52: }
  2102                           ;main.c: 53: __nop();
  2103  001D76  F000               	nop	
  2104  001D78  0012               	return		;funcret
  2105  001D7A                     __end_of_keyinterrupt:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           indf2	equ	0xFDF
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _initialize *****************
  2118 ;; Defined at:
  2119 ;;		line 57 in file "main.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;Total ram usage:        0 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    3
  2140 ;; This function calls:
  2141 ;;		_I2C_Master_Init
  2142 ;;		_initLCD
  2143 ;; This function is called by:
  2144 ;;		_main
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text13
  2149  001854                     __ptext13:
  2150                           	opt stack 0
  2151  001854                     _initialize:
  2152                           	opt stack 27
  2153                           
  2154                           ;main.c: 58: OSCCON = 0xF2;
  2155                           
  2156                           ;incstack = 0
  2157  001854  0EF2               	movlw	242
  2158  001856  6ED3               	movwf	4051,c	;volatile
  2159                           
  2160                           ;main.c: 59: OSCTUNEbits.PLLEN = 1;
  2161  001858  8C9B               	bsf	3995,6,c	;volatile
  2162                           
  2163                           ;main.c: 61: TRISA = 0b11001111;
  2164  00185A  0ECF               	movlw	207
  2165  00185C  6E92               	movwf	3986,c	;volatile
  2166                           
  2167                           ;main.c: 62: TRISB = 0b11110010;
  2168  00185E  0EF2               	movlw	242
  2169  001860  6E93               	movwf	3987,c	;volatile
  2170                           
  2171                           ;main.c: 63: TRISC = 0b00011100;
  2172  001862  0E1C               	movlw	28
  2173  001864  6E94               	movwf	3988,c	;volatile
  2174                           
  2175                           ;main.c: 65: TRISD = 0x00;
  2176  001866  0E00               	movlw	0
  2177  001868  6E95               	movwf	3989,c	;volatile
  2178                           
  2179                           ;main.c: 66: TRISE = 0x00;
  2180  00186A  0E00               	movlw	0
  2181  00186C  6E96               	movwf	3990,c	;volatile
  2182                           
  2183                           ;main.c: 68: PR2 = 0xff;
  2184  00186E  68CB               	setf	4043,c	;volatile
  2185                           
  2186                           ;main.c: 69: CCP1CON = 0b00001100;
  2187  001870  0E0C               	movlw	12
  2188  001872  6EBD               	movwf	4029,c	;volatile
  2189                           
  2190                           ;main.c: 70: CCPR1L = 0x00;
  2191  001874  0E00               	movlw	0
  2192  001876  6EBE               	movwf	4030,c	;volatile
  2193                           
  2194                           ;main.c: 71: T2CON = 0b00000101;
  2195  001878  0E05               	movlw	5
  2196  00187A  6ECA               	movwf	4042,c	;volatile
  2197                           
  2198                           ;main.c: 73: LATA = 0b01010101;
  2199  00187C  0E55               	movlw	85
  2200  00187E  6E89               	movwf	3977,c	;volatile
  2201                           
  2202                           ;main.c: 74: LATB = 0b01010101;
  2203  001880  0E55               	movlw	85
  2204  001882  6E8A               	movwf	3978,c	;volatile
  2205                           
  2206                           ;main.c: 75: LATC = 0b01010101;
  2207  001884  0E55               	movlw	85
  2208  001886  6E8B               	movwf	3979,c	;volatile
  2209                           
  2210                           ;main.c: 76: LATD = 0x00;
  2211  001888  0E00               	movlw	0
  2212  00188A  6E8C               	movwf	3980,c	;volatile
  2213                           
  2214                           ;main.c: 77: LATE = 0x00;
  2215  00188C  0E00               	movlw	0
  2216  00188E  6E8D               	movwf	3981,c	;volatile
  2217                           
  2218                           ;main.c: 78: LATDbits.LATD0 = 1;
  2219  001890  808C               	bsf	3980,0,c	;volatile
  2220                           
  2221                           ;main.c: 79: LATDbits.LATD1 = 0;
  2222  001892  928C               	bcf	3980,1,c	;volatile
  2223                           
  2224                           ;main.c: 80: LATEbits.LATE0 = 1;
  2225  001894  808D               	bsf	3981,0,c	;volatile
  2226                           
  2227                           ;main.c: 81: LATEbits.LATE1 = 0;
  2228  001896  928D               	bcf	3981,1,c	;volatile
  2229                           
  2230                           ;main.c: 83: ADCON0 = 0x00;
  2231  001898  0E00               	movlw	0
  2232  00189A  6EC2               	movwf	4034,c	;volatile
  2233                           
  2234                           ;main.c: 84: ADCON1 = 0xFF;
  2235  00189C  68C1               	setf	4033,c	;volatile
  2236                           
  2237                           ;main.c: 86: initLCD();
  2238  00189E  ECD2  F00D         	call	_initLCD	;wreg free
  2239                           
  2240                           ;main.c: 88: I2C_Master_Init(10000);
  2241  0018A2  0E10               	movlw	16
  2242  0018A4  6E0E               	movwf	I2C_Master_Init@c,c
  2243  0018A6  0E27               	movlw	39
  2244  0018A8  6E0F               	movwf	I2C_Master_Init@c+1,c
  2245  0018AA  0E00               	movlw	0
  2246  0018AC  6E10               	movwf	I2C_Master_Init@c+2,c
  2247  0018AE  0E00               	movlw	0
  2248  0018B0  6E11               	movwf	I2C_Master_Init@c+3,c
  2249  0018B2  EC07  F00D         	call	_I2C_Master_Init	;wreg free
  2250                           
  2251                           ;main.c: 91: nRBPU = 0;
  2252  0018B6  9EF1               	bcf	intcon2,7,c	;volatile
  2253                           
  2254                           ;main.c: 92: ADCON0 = 00000001;
  2255  0018B8  0E01               	movlw	1
  2256  0018BA  6EC2               	movwf	4034,c	;volatile
  2257                           
  2258                           ;main.c: 93: ADCON1 = 0b00001001;
  2259  0018BC  0E09               	movlw	9
  2260  0018BE  6EC1               	movwf	4033,c	;volatile
  2261                           
  2262                           ;main.c: 94: CVRCON = 0x00;
  2263  0018C0  0E00               	movlw	0
  2264  0018C2  6EB5               	movwf	4021,c	;volatile
  2265                           
  2266                           ;main.c: 95: CMCONbits.CIS = 0;
  2267  0018C4  96B4               	bcf	4020,3,c	;volatile
  2268                           
  2269                           ;main.c: 96: ADFM = 1;
  2270  0018C6  8EC0               	bsf	4032,7,c	;volatile
  2271                           
  2272                           ;main.c: 98: T0CON = 11010010;
  2273  0018C8  0EDA               	movlw	218
  2274  0018CA  6ED5               	movwf	4053,c	;volatile
  2275  0018CC  0012               	return		;funcret
  2276  0018CE                     __end_of_initialize:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           intcon2	equ	0xFF1
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           indf2	equ	0xFDF
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _initLCD *****************
  2290 ;; Defined at:
  2291 ;;		line 11 in file "lcd.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        1 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    2
  2312 ;; This function calls:
  2313 ;;		_lcdInst
  2314 ;; This function is called by:
  2315 ;;		_initialize
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text14
  2320  001BA4                     __ptext14:
  2321                           	opt stack 0
  2322  001BA4                     _initLCD:
  2323                           	opt stack 27
  2324                           
  2325                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  2326                           
  2327                           ;incstack = 0
  2328  001BA4  0E9C               	movlw	156
  2329  001BA6  6E04               	movwf	??_initLCD& (0+255),c
  2330  001BA8  0ED7               	movlw	215
  2331  001BAA                     u1397:
  2332  001BAA  2EE8               	decfsz	wreg,f,c
  2333  001BAC  D7FE               	bra	u1397
  2334  001BAE  2E04               	decfsz	??_initLCD& (0+255),f,c
  2335  001BB0  D7FC               	bra	u1397
  2336  001BB2  F000               	nop	
  2337                           
  2338                           ;lcd.c: 13: lcdInst(0b00110011);
  2339  001BB4  0E33               	movlw	51
  2340  001BB6  ECD6  F00E         	call	_lcdInst
  2341                           
  2342                           ;lcd.c: 14: lcdInst(0b00110010);
  2343  001BBA  0E32               	movlw	50
  2344  001BBC  ECD6  F00E         	call	_lcdInst
  2345                           
  2346                           ;lcd.c: 15: lcdInst(0b00101000);
  2347  001BC0  0E28               	movlw	40
  2348  001BC2  ECD6  F00E         	call	_lcdInst
  2349                           
  2350                           ;lcd.c: 16: lcdInst(0b00001111);
  2351  001BC6  0E0F               	movlw	15
  2352  001BC8  ECD6  F00E         	call	_lcdInst
  2353                           
  2354                           ;lcd.c: 17: lcdInst(0b00000110);
  2355  001BCC  0E06               	movlw	6
  2356  001BCE  ECD6  F00E         	call	_lcdInst
  2357                           
  2358                           ;lcd.c: 18: lcdInst(0b00000001);
  2359  001BD2  0E01               	movlw	1
  2360  001BD4  ECD6  F00E         	call	_lcdInst
  2361                           
  2362                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  2363  001BD8  0E9C               	movlw	156
  2364  001BDA  6E04               	movwf	??_initLCD& (0+255),c
  2365  001BDC  0ED7               	movlw	215
  2366  001BDE                     u1407:
  2367  001BDE  2EE8               	decfsz	wreg,f,c
  2368  001BE0  D7FE               	bra	u1407
  2369  001BE2  2E04               	decfsz	??_initLCD& (0+255),f,c
  2370  001BE4  D7FC               	bra	u1407
  2371  001BE6  F000               	nop	
  2372  001BE8  0012               	return		;funcret
  2373  001BEA                     __end_of_initLCD:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           prodh	equ	0xFF4
  2377                           prodl	equ	0xFF3
  2378                           intcon2	equ	0xFF1
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _I2C_Master_Init *****************
  2387 ;; Defined at:
  2388 ;;		line 20 in file "I2C.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  c               4   13[COMRAM] const unsigned long 
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      void 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;Total ram usage:        8 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    1
  2409 ;; This function calls:
  2410 ;;		___lldiv
  2411 ;; This function is called by:
  2412 ;;		_initialize
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text15
  2417  001A0E                     __ptext15:
  2418                           	opt stack 0
  2419  001A0E                     _I2C_Master_Init:
  2420                           	opt stack 28
  2421                           
  2422                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  2423                           
  2424                           ;incstack = 0
  2425  001A0E  0E00               	movlw	0
  2426  001A10  6EC7               	movwf	4039,c	;volatile
  2427                           
  2428                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  2429  001A12  0E28               	movlw	40
  2430  001A14  6EC6               	movwf	4038,c	;volatile
  2431                           
  2432                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  2433  001A16  0E00               	movlw	0
  2434  001A18  6EC5               	movwf	4037,c	;volatile
  2435                           
  2436                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  2437  001A1A  0E00               	movlw	0
  2438  001A1C  6E01               	movwf	___lldiv@dividend,c
  2439  001A1E  0E48               	movlw	72
  2440  001A20  6E02               	movwf	___lldiv@dividend+1,c
  2441  001A22  0EE8               	movlw	232
  2442  001A24  6E03               	movwf	___lldiv@dividend+2,c
  2443  001A26  0E01               	movlw	1
  2444  001A28  6E04               	movwf	___lldiv@dividend+3,c
  2445  001A2A  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2446  001A2E  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2447  001A32  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2448  001A36  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2449  001A3A  0E02               	movlw	2
  2450  001A3C                     u925:
  2451  001A3C  90D8               	bcf	status,0,c
  2452  001A3E  3612               	rlcf	??_I2C_Master_Init,f,c
  2453  001A40  3613               	rlcf	??_I2C_Master_Init+1,f,c
  2454  001A42  3614               	rlcf	??_I2C_Master_Init+2,f,c
  2455  001A44  3615               	rlcf	??_I2C_Master_Init+3,f,c
  2456  001A46  2EE8               	decfsz	wreg,f,c
  2457  001A48  D7F9               	goto	u925
  2458  001A4A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  2459  001A4E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2460  001A52  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2461  001A56  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2462  001A5A  ECE9  F00B         	call	___lldiv	;wreg free
  2463  001A5E  0401               	decf	?___lldiv,w,c
  2464  001A60  6EC8               	movwf	4040,c	;volatile
  2465                           
  2466                           ;I2C.c: 27: TRISC3 = 1;
  2467  001A62  8694               	bsf	3988,3,c	;volatile
  2468                           
  2469                           ;I2C.c: 28: TRISC4 = 1;
  2470  001A64  8894               	bsf	3988,4,c	;volatile
  2471  001A66  0012               	return		;funcret
  2472  001A68                     __end_of_I2C_Master_Init:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           prodh	equ	0xFF4
  2476                           prodl	equ	0xFF3
  2477                           intcon2	equ	0xFF1
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           indf2	equ	0xFDF
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           status	equ	0xFD8
  2484                           
  2485 ;; *************** function ___lldiv *****************
  2486 ;; Defined at:
  2487 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  dividend        4    0[COMRAM] unsigned long 
  2490 ;;  divisor         4    4[COMRAM] unsigned long 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  quotient        4    8[COMRAM] unsigned long 
  2493 ;;  counter         1   12[COMRAM] unsigned char 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  4    0[COMRAM] unsigned long 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2503 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;Total ram usage:       13 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		_I2C_Master_Init
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text16
  2517  0017D2                     __ptext16:
  2518                           	opt stack 0
  2519  0017D2                     ___lldiv:
  2520                           	opt stack 28
  2521                           
  2522                           ;incstack = 0
  2523  0017D2  0E00               	movlw	0
  2524  0017D4  6E09               	movwf	___lldiv@quotient,c
  2525  0017D6  0E00               	movlw	0
  2526  0017D8  6E0A               	movwf	___lldiv@quotient+1,c
  2527  0017DA  0E00               	movlw	0
  2528  0017DC  6E0B               	movwf	___lldiv@quotient+2,c
  2529  0017DE  0E00               	movlw	0
  2530  0017E0  6E0C               	movwf	___lldiv@quotient+3,c
  2531  0017E2  5005               	movf	___lldiv@divisor,w,c
  2532  0017E4  1006               	iorwf	___lldiv@divisor+1,w,c
  2533  0017E6  1007               	iorwf	___lldiv@divisor+2,w,c
  2534  0017E8  1008               	iorwf	___lldiv@divisor+3,w,c
  2535  0017EA  B4D8               	btfsc	status,2,c
  2536  0017EC  D02A               	goto	l786
  2537  0017EE  0E01               	movlw	1
  2538  0017F0  6E0D               	movwf	___lldiv@counter,c
  2539  0017F2  D006               	goto	l1740
  2540  0017F4                     l1738:
  2541  0017F4  90D8               	bcf	status,0,c
  2542  0017F6  3605               	rlcf	___lldiv@divisor,f,c
  2543  0017F8  3606               	rlcf	___lldiv@divisor+1,f,c
  2544  0017FA  3607               	rlcf	___lldiv@divisor+2,f,c
  2545  0017FC  3608               	rlcf	___lldiv@divisor+3,f,c
  2546  0017FE  2A0D               	incf	___lldiv@counter,f,c
  2547  001800                     l1740:
  2548  001800  AE08               	btfss	___lldiv@divisor+3,7,c
  2549  001802  D7F8               	goto	l1738
  2550  001804                     l1742:
  2551  001804  90D8               	bcf	status,0,c
  2552  001806  3609               	rlcf	___lldiv@quotient,f,c
  2553  001808  360A               	rlcf	___lldiv@quotient+1,f,c
  2554  00180A  360B               	rlcf	___lldiv@quotient+2,f,c
  2555  00180C  360C               	rlcf	___lldiv@quotient+3,f,c
  2556  00180E  5005               	movf	___lldiv@divisor,w,c
  2557  001810  5C01               	subwf	___lldiv@dividend,w,c
  2558  001812  5006               	movf	___lldiv@divisor+1,w,c
  2559  001814  5802               	subwfb	___lldiv@dividend+1,w,c
  2560  001816  5007               	movf	___lldiv@divisor+2,w,c
  2561  001818  5803               	subwfb	___lldiv@dividend+2,w,c
  2562  00181A  5008               	movf	___lldiv@divisor+3,w,c
  2563  00181C  5804               	subwfb	___lldiv@dividend+3,w,c
  2564  00181E  A0D8               	btfss	status,0,c
  2565  001820  D009               	goto	l1750
  2566  001822  5005               	movf	___lldiv@divisor,w,c
  2567  001824  5E01               	subwf	___lldiv@dividend,f,c
  2568  001826  5006               	movf	___lldiv@divisor+1,w,c
  2569  001828  5A02               	subwfb	___lldiv@dividend+1,f,c
  2570  00182A  5007               	movf	___lldiv@divisor+2,w,c
  2571  00182C  5A03               	subwfb	___lldiv@dividend+2,f,c
  2572  00182E  5008               	movf	___lldiv@divisor+3,w,c
  2573  001830  5A04               	subwfb	___lldiv@dividend+3,f,c
  2574  001832  8009               	bsf	___lldiv@quotient,0,c
  2575  001834                     l1750:
  2576  001834  90D8               	bcf	status,0,c
  2577  001836  3208               	rrcf	___lldiv@divisor+3,f,c
  2578  001838  3207               	rrcf	___lldiv@divisor+2,f,c
  2579  00183A  3206               	rrcf	___lldiv@divisor+1,f,c
  2580  00183C  3205               	rrcf	___lldiv@divisor,f,c
  2581  00183E  2E0D               	decfsz	___lldiv@counter,f,c
  2582  001840  D7E1               	goto	l1742
  2583  001842                     l786:
  2584  001842  C009  F001         	movff	___lldiv@quotient,?___lldiv
  2585  001846  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  2586  00184A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  2587  00184E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  2588  001852  0012               	return		;funcret
  2589  001854                     __end_of___lldiv:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           prodh	equ	0xFF4
  2593                           prodl	equ	0xFF3
  2594                           intcon2	equ	0xFF1
  2595                           postinc0	equ	0xFEE
  2596                           wreg	equ	0xFE8
  2597                           indf2	equ	0xFDF
  2598                           fsr2h	equ	0xFDA
  2599                           fsr2l	equ	0xFD9
  2600                           status	equ	0xFD8
  2601                           
  2602 ;; *************** function _homescreen *****************
  2603 ;; Defined at:
  2604 ;;		line 3 in file "interface.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    3
  2625 ;; This function calls:
  2626 ;;		_lcdInst
  2627 ;;		_printf
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text17
  2634  0019AC                     __ptext17:
  2635                           	opt stack 0
  2636  0019AC                     _homescreen:
  2637                           	opt stack 27
  2638                           
  2639                           ;interface.c: 4: lcdInst(0b10000000);;
  2640                           
  2641                           ;incstack = 0
  2642  0019AC  0E80               	movlw	128
  2643  0019AE  ECD6  F00E         	call	_lcdInst
  2644                           
  2645                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  2646  0019B2  0E4F               	movlw	low STR_4
  2647  0019B4  6E0D               	movwf	printf@f,c
  2648  0019B6  0E10               	movlw	high STR_4
  2649  0019B8  6E0E               	movwf	printf@f+1,c
  2650  0019BA  C03C  F00F         	movff	_time+6,?_printf+2
  2651  0019BE  6A10               	clrf	?_printf+3,c
  2652  0019C0  C03B  F011         	movff	_time+5,?_printf+4
  2653  0019C4  6A12               	clrf	?_printf+5,c
  2654  0019C6  C03A  F013         	movff	_time+4,?_printf+6
  2655  0019CA  6A14               	clrf	?_printf+7,c
  2656  0019CC  EC6E  F008         	call	_printf	;wreg free
  2657                           
  2658                           ;interface.c: 6: printf("3:Start");
  2659  0019D0  0ED3               	movlw	low STR_5
  2660  0019D2  6E0D               	movwf	printf@f,c
  2661  0019D4  0E10               	movlw	high STR_5
  2662  0019D6  6E0E               	movwf	printf@f+1,c
  2663  0019D8  EC6E  F008         	call	_printf	;wreg free
  2664                           
  2665                           ;interface.c: 7: lcdInst(0b11000000);;
  2666  0019DC  0EC0               	movlw	192
  2667  0019DE  ECD6  F00E         	call	_lcdInst
  2668                           
  2669                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2670  0019E2  0EAE               	movlw	low STR_6
  2671  0019E4  6E0D               	movwf	printf@f,c
  2672  0019E6  0E10               	movlw	high STR_6
  2673  0019E8  6E0E               	movwf	printf@f+1,c
  2674  0019EA  C038  F00F         	movff	_time+2,?_printf+2
  2675  0019EE  6A10               	clrf	?_printf+3,c
  2676  0019F0  C037  F011         	movff	_time+1,?_printf+4
  2677  0019F4  6A12               	clrf	?_printf+5,c
  2678  0019F6  C036  F013         	movff	_time,?_printf+6
  2679  0019FA  6A14               	clrf	?_printf+7,c
  2680  0019FC  EC6E  F008         	call	_printf	;wreg free
  2681                           
  2682                           ;interface.c: 9: printf(" 2:Logs");
  2683  001A00  0ECB               	movlw	low STR_7
  2684  001A02  6E0D               	movwf	printf@f,c
  2685  001A04  0E10               	movlw	high STR_7
  2686  001A06  6E0E               	movwf	printf@f+1,c
  2687  001A08  EC6E  F008         	call	_printf	;wreg free
  2688  001A0C  0012               	return		;funcret
  2689  001A0E                     __end_of_homescreen:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           intcon2	equ	0xFF1
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           indf2	equ	0xFDF
  2698                           fsr2h	equ	0xFDA
  2699                           fsr2l	equ	0xFD9
  2700                           status	equ	0xFD8
  2701                           
  2702 ;; *************** function _displayLogs *****************
  2703 ;; Defined at:
  2704 ;;		line 12 in file "interface.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;Total ram usage:        1 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    3
  2725 ;; This function calls:
  2726 ;;		_eepromRead
  2727 ;;		_keycheck
  2728 ;;		_lcdInst
  2729 ;;		_printf
  2730 ;; This function is called by:
  2731 ;;		_main
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text18
  2736  001670                     __ptext18:
  2737                           	opt stack 0
  2738  001670                     _displayLogs:
  2739                           	opt stack 27
  2740                           
  2741                           ;interface.c: 13: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2742                           
  2743                           ;incstack = 0
  2744  001670  0E01               	movlw	1
  2745  001672  ECD6  F00E         	call	_lcdInst
  2746  001676  0E68               	movlw	104
  2747  001678  6E23               	movwf	??_displayLogs& (0+255),c
  2748  00167A  0EE4               	movlw	228
  2749  00167C                     u1417:
  2750  00167C  2EE8               	decfsz	wreg,f,c
  2751  00167E  D7FE               	bra	u1417
  2752  001680  2E23               	decfsz	??_displayLogs& (0+255),f,c
  2753  001682  D7FC               	bra	u1417
  2754  001684  D000               	nop2	
  2755                           
  2756                           ;interface.c: 14: printf("Run#1    A:Next");
  2757  001686  0E6F               	movlw	low STR_8
  2758  001688  6E0D               	movwf	printf@f,c
  2759  00168A  0E10               	movlw	high STR_8
  2760  00168C  6E0E               	movwf	printf@f+1,c
  2761  00168E  EC6E  F008         	call	_printf	;wreg free
  2762                           
  2763                           ;interface.c: 15: lcdInst(0b11000000);;
  2764  001692  0EC0               	movlw	192
  2765  001694  ECD6  F00E         	call	_lcdInst
  2766                           
  2767                           ;interface.c: 16: printf("# of cans: %d", eepromRead(10));
  2768  001698  0EBD               	movlw	low STR_9
  2769  00169A  6E0D               	movwf	printf@f,c
  2770  00169C  0E10               	movlw	high STR_9
  2771  00169E  6E0E               	movwf	printf@f+1,c
  2772  0016A0  0E0A               	movlw	10
  2773  0016A2  EC4D  F00E         	call	_eepromRead
  2774  0016A6  6E0F               	movwf	?_printf+2,c
  2775  0016A8  6A10               	clrf	?_printf+3,c
  2776  0016AA  BE0F               	btfsc	?_printf+2,7,c
  2777  0016AC  0610               	decf	?_printf+3,f,c
  2778  0016AE  EC6E  F008         	call	_printf	;wreg free
  2779                           
  2780                           ;interface.c: 17: keycheck();
  2781  0016B2  ECBD  F00E         	call	_keycheck	;wreg free
  2782                           
  2783                           ;interface.c: 18: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2784  0016B6  0E01               	movlw	1
  2785  0016B8  ECD6  F00E         	call	_lcdInst
  2786  0016BC  0E68               	movlw	104
  2787  0016BE  6E23               	movwf	??_displayLogs& (0+255),c
  2788  0016C0  0EE4               	movlw	228
  2789  0016C2                     u1427:
  2790  0016C2  2EE8               	decfsz	wreg,f,c
  2791  0016C4  D7FE               	bra	u1427
  2792  0016C6  2E23               	decfsz	??_displayLogs& (0+255),f,c
  2793  0016C8  D7FC               	bra	u1427
  2794  0016CA  D000               	nop2	
  2795                           
  2796                           ;interface.c: 19: printf("Run#1    A:Next");
  2797  0016CC  0E6F               	movlw	low STR_8
  2798  0016CE  6E0D               	movwf	printf@f,c
  2799  0016D0  0E10               	movlw	high STR_8
  2800  0016D2  6E0E               	movwf	printf@f+1,c
  2801  0016D4  EC6E  F008         	call	_printf	;wreg free
  2802                           
  2803                           ;interface.c: 20: lcdInst(0b11000000);;
  2804  0016D8  0EC0               	movlw	192
  2805  0016DA  ECD6  F00E         	call	_lcdInst
  2806                           
  2807                           ;interface.c: 21: printf("# soda cans: %d", eepromRead(20));
  2808  0016DE  0E5F               	movlw	low STR_11
  2809  0016E0  6E0D               	movwf	printf@f,c
  2810  0016E2  0E10               	movlw	high STR_11
  2811  0016E4  6E0E               	movwf	printf@f+1,c
  2812  0016E6  0E14               	movlw	20
  2813  0016E8  EC4D  F00E         	call	_eepromRead
  2814  0016EC  6E0F               	movwf	?_printf+2,c
  2815  0016EE  6A10               	clrf	?_printf+3,c
  2816  0016F0  BE0F               	btfsc	?_printf+2,7,c
  2817  0016F2  0610               	decf	?_printf+3,f,c
  2818  0016F4  EC6E  F008         	call	_printf	;wreg free
  2819                           
  2820                           ;interface.c: 22: keycheck();
  2821  0016F8  ECBD  F00E         	call	_keycheck	;wreg free
  2822                           
  2823                           ;interface.c: 23: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2824  0016FC  0E01               	movlw	1
  2825  0016FE  ECD6  F00E         	call	_lcdInst
  2826  001702  0E68               	movlw	104
  2827  001704  6E23               	movwf	??_displayLogs& (0+255),c
  2828  001706  0EE4               	movlw	228
  2829  001708                     u1437:
  2830  001708  2EE8               	decfsz	wreg,f,c
  2831  00170A  D7FE               	bra	u1437
  2832  00170C  2E23               	decfsz	??_displayLogs& (0+255),f,c
  2833  00170E  D7FC               	bra	u1437
  2834  001710  D000               	nop2	
  2835                           
  2836                           ;interface.c: 24: printf("Run#1    A:Next");
  2837  001712  0E6F               	movlw	low STR_8
  2838  001714  6E0D               	movwf	printf@f,c
  2839  001716  0E10               	movlw	high STR_8
  2840  001718  6E0E               	movwf	printf@f+1,c
  2841  00171A  EC6E  F008         	call	_printf	;wreg free
  2842                           
  2843                           ;interface.c: 25: lcdInst(0b11000000);;
  2844  00171E  0EC0               	movlw	192
  2845  001720  ECD6  F00E         	call	_lcdInst
  2846                           
  2847                           ;interface.c: 26: printf("# soup cans: 4");
  2848  001724  0E9F               	movlw	low STR_13
  2849  001726  6E0D               	movwf	printf@f,c
  2850  001728  0E10               	movlw	high STR_13
  2851  00172A  6E0E               	movwf	printf@f+1,c
  2852  00172C  EC6E  F008         	call	_printf	;wreg free
  2853                           
  2854                           ;interface.c: 27: keycheck();
  2855  001730  ECBD  F00E         	call	_keycheck	;wreg free
  2856  001734  0012               	return		;funcret
  2857  001736                     __end_of_displayLogs:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           intcon2	equ	0xFF1
  2863                           postinc0	equ	0xFEE
  2864                           wreg	equ	0xFE8
  2865                           indf2	equ	0xFDF
  2866                           fsr2h	equ	0xFDA
  2867                           fsr2l	equ	0xFD9
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function _printf *****************
  2871 ;; Defined at:
  2872 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2875 ;;		 -> STR_13(15), STR_12(16), STR_11(16), STR_10(16), 
  2876 ;;		 -> STR_9(14), STR_8(16), STR_7(8), STR_6(15), 
  2877 ;;		 -> STR_5(8), STR_4(16), STR_3(19), STR_2(16), 
  2878 ;;		 -> STR_1(16), 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  idx             1   24[COMRAM] unsigned char 
  2881 ;;  tmpval          4    0        struct .
  2882 ;;  cp              3    0        PTR const unsigned char 
  2883 ;;  width           2   31[COMRAM] int 
  2884 ;;  val             2   28[COMRAM] unsigned int 
  2885 ;;  ap              2   25[COMRAM] PTR void [1]
  2886 ;;		 -> ?_printf(2), 
  2887 ;;  len             2    0        unsigned int 
  2888 ;;  c               1   33[COMRAM] char 
  2889 ;;  flag            1   30[COMRAM] unsigned char 
  2890 ;;  prec            1   27[COMRAM] char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2   12[COMRAM] int 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2900 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;Total ram usage:       22 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    2
  2907 ;; This function calls:
  2908 ;;		___lwdiv
  2909 ;;		___lwmod
  2910 ;;		___wmul
  2911 ;;		_isdigit
  2912 ;;		_putch
  2913 ;; This function is called by:
  2914 ;;		_main
  2915 ;;		_homescreen
  2916 ;;		_displayLogs
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text19
  2921  0010DC                     __ptext19:
  2922                           	opt stack 0
  2923  0010DC                     _printf:
  2924                           	opt stack 28
  2925                           
  2926                           ;doprnt.c: 466: va_list ap;
  2927                           ;doprnt.c: 499: signed char c;
  2928                           ;doprnt.c: 501: int width;
  2929                           ;doprnt.c: 506: signed char prec;
  2930                           ;doprnt.c: 508: unsigned char flag;
  2931                           ;doprnt.c: 523: union {
  2932                           ;doprnt.c: 524: unsigned long vd;
  2933                           ;doprnt.c: 525: double integ;
  2934                           ;doprnt.c: 526: } tmpval;
  2935                           ;doprnt.c: 528: unsigned int val;
  2936                           ;doprnt.c: 529: unsigned len;
  2937                           ;doprnt.c: 530: const char * cp;
  2938                           ;doprnt.c: 533: *ap = __va_start();
  2939                           
  2940                           ;incstack = 0
  2941  0010DC  0E0F               	movlw	low (?_printf+2)
  2942  0010DE  6E1A               	movwf	printf@ap,c
  2943  0010E0  0E00               	movlw	high (?_printf+2)
  2944  0010E2  6E1B               	movwf	printf@ap+1,c
  2945                           
  2946                           ;doprnt.c: 536: while(c = *f++) {
  2947  0010E4  D174               	goto	l1928
  2948  0010E6                     l1802:
  2949                           
  2950                           ;doprnt.c: 538: if(c != '%')
  2951  0010E6  0E25               	movlw	37
  2952  0010E8  1822               	xorwf	printf@c,w,c
  2953  0010EA  B4D8               	btfsc	status,2,c
  2954  0010EC  D004               	goto	l1806
  2955                           
  2956                           ;doprnt.c: 540: {
  2957                           ;doprnt.c: 541: (putch(c) );
  2958  0010EE  5022               	movf	printf@c,w,c
  2959  0010F0  ECD0  F00E         	call	_putch
  2960                           
  2961                           ;doprnt.c: 542: continue;
  2962  0010F4  D16C               	goto	l1928
  2963  0010F6                     l1806:
  2964                           
  2965                           ;doprnt.c: 543: }
  2966                           ;doprnt.c: 546: width = 0;
  2967  0010F6  0E00               	movlw	0
  2968  0010F8  6E21               	movwf	printf@width+1,c
  2969  0010FA  0E00               	movlw	0
  2970  0010FC  6E20               	movwf	printf@width,c
  2971                           
  2972                           ;doprnt.c: 548: flag = 0;
  2973  0010FE  0E00               	movlw	0
  2974  001100  6E1F               	movwf	printf@flag,c
  2975                           
  2976                           ;doprnt.c: 551: switch(*f) {
  2977                           
  2978                           ;doprnt.c: 550: for(;;) {
  2979  001102  D003               	goto	l1812
  2980  001104                     l1808:
  2981                           
  2982                           ;doprnt.c: 580: flag |= 0x04;
  2983  001104  841F               	bsf	printf@flag,2,c
  2984                           
  2985                           ;doprnt.c: 581: f++;
  2986  001106  4A0D               	infsnz	printf@f,f,c
  2987  001108  2A0E               	incf	printf@f+1,f,c
  2988  00110A                     l1812:
  2989  00110A  C00D  FFF6         	movff	printf@f,tblptrl
  2990  00110E  C00E  FFF7         	movff	printf@f+1,tblptrh
  2991  001112                     	if	0	;tblptru may be non-zero
  2992  001112                     	endif
  2993  001112                     	if	0	;tblptru may be non-zero
  2994  001112                     	endif
  2995  001112  0008               	tblrd		*
  2996  001114  50F5               	movf	tablat,w,c
  2997                           
  2998                           ; Switch size 1, requested type "space"
  2999                           ; Number of cases is 1, Range of values is 48 to 48
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte            4     3 (average)
  3003                           ;	Chosen strategy is simple_byte
  3004  001116  0A30               	xorlw	48	; case 48
  3005  001118  B4D8               	btfsc	status,2,c
  3006  00111A  D7F4               	goto	l1808
  3007                           
  3008                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3009                           
  3010                           ;doprnt.c: 586: }
  3011                           
  3012                           ;doprnt.c: 585: break;
  3013  00111C  C00D  FFF6         	movff	printf@f,tblptrl
  3014  001120  C00E  FFF7         	movff	printf@f+1,tblptrh
  3015  001124                     	if	0	;tblptru may be non-zero
  3016  001124                     	endif
  3017  001124                     	if	0	;tblptru may be non-zero
  3018  001124                     	endif
  3019  001124  0008               	tblrd		*
  3020  001126  50F5               	movf	tablat,w,c
  3021  001128  EC99  F00E         	call	_isdigit
  3022  00112C  A0D8               	btfss	status,0,c
  3023  00112E  D035               	goto	l1830
  3024                           
  3025                           ;doprnt.c: 598: width = 0;
  3026  001130  0E00               	movlw	0
  3027  001132  6E21               	movwf	printf@width+1,c
  3028  001134  0E00               	movlw	0
  3029  001136  6E20               	movwf	printf@width,c
  3030  001138                     l1818:
  3031                           
  3032                           ;doprnt.c: 600: width *= 10;
  3033  001138  C020  F001         	movff	printf@width,___wmul@multiplier
  3034  00113C  C021  F002         	movff	printf@width+1,___wmul@multiplier+1
  3035  001140  0E00               	movlw	0
  3036  001142  6E04               	movwf	___wmul@multiplicand+1,c
  3037  001144  0E0A               	movlw	10
  3038  001146  6E03               	movwf	___wmul@multiplicand,c
  3039  001148  EC74  F00E         	call	___wmul	;wreg free
  3040  00114C  C001  F020         	movff	?___wmul,printf@width
  3041  001150  C002  F021         	movff	?___wmul+1,printf@width+1
  3042                           
  3043                           ;doprnt.c: 601: width += *f++ - '0';
  3044  001154  0ED0               	movlw	208
  3045  001156  6E15               	movwf	??_printf& (0+255),c
  3046  001158  0EFF               	movlw	255
  3047  00115A  6E16               	movwf	(??_printf+1)& (0+255),c
  3048  00115C  C00D  FFF6         	movff	printf@f,tblptrl
  3049  001160  C00E  FFF7         	movff	printf@f+1,tblptrh
  3050  001164                     	if	0	;tblptru may be non-zero
  3051  001164                     	endif
  3052  001164                     	if	0	;tblptru may be non-zero
  3053  001164                     	endif
  3054  001164  0008               	tblrd		*
  3055  001166  50F5               	movf	tablat,w,c
  3056  001168  6E17               	movwf	(??_printf+2)& (0+255),c
  3057  00116A  6A18               	clrf	(??_printf+3)& (0+255),c
  3058  00116C  5015               	movf	??_printf,w,c
  3059  00116E  2617               	addwf	??_printf+2,f,c
  3060  001170  5016               	movf	??_printf+1,w,c
  3061  001172  2218               	addwfc	??_printf+3,f,c
  3062  001174  5017               	movf	??_printf+2,w,c
  3063  001176  2620               	addwf	printf@width,f,c
  3064  001178  5018               	movf	??_printf+3,w,c
  3065  00117A  2221               	addwfc	printf@width+1,f,c
  3066  00117C  4A0D               	infsnz	printf@f,f,c
  3067  00117E  2A0E               	incf	printf@f+1,f,c
  3068                           
  3069                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3070  001180  C00D  FFF6         	movff	printf@f,tblptrl
  3071  001184  C00E  FFF7         	movff	printf@f+1,tblptrh
  3072  001188                     	if	0	;tblptru may be non-zero
  3073  001188                     	endif
  3074  001188                     	if	0	;tblptru may be non-zero
  3075  001188                     	endif
  3076  001188  0008               	tblrd		*
  3077  00118A  50F5               	movf	tablat,w,c
  3078  00118C  EC99  F00E         	call	_isdigit
  3079  001190  A0D8               	btfss	status,0,c
  3080  001192  D003               	goto	l1830
  3081  001194  D7D1               	goto	l1818
  3082  001196                     l1826:
  3083                           
  3084                           ;doprnt.c: 721: flag |= 0x80;
  3085  001196  8E1F               	bsf	printf@flag,7,c
  3086                           
  3087                           ;doprnt.c: 723: break;
  3088  001198  D017               	goto	l394
  3089  00119A                     l1830:
  3090  00119A  C00D  FFF6         	movff	printf@f,tblptrl
  3091  00119E  C00E  FFF7         	movff	printf@f+1,tblptrh
  3092  0011A2  4A0D               	infsnz	printf@f,f,c
  3093  0011A4  2A0E               	incf	printf@f+1,f,c
  3094  0011A6                     	if	0	;tblptru may be non-zero
  3095  0011A6                     	endif
  3096  0011A6                     	if	0	;tblptru may be non-zero
  3097  0011A6                     	endif
  3098  0011A6  0008               	tblrd		*
  3099  0011A8  CFF5 F022          	movff	tablat,printf@c
  3100  0011AC  5022               	movf	printf@c,w,c
  3101                           
  3102                           ; Switch size 1, requested type "space"
  3103                           ; Number of cases is 4, Range of values is 0 to 120
  3104                           ; switch strategies available:
  3105                           ; Name         Instructions Cycles
  3106                           ; simple_byte           13     7 (average)
  3107                           ;	Chosen strategy is simple_byte
  3108  0011AE  0A00               	xorlw	0	; case 0
  3109  0011B0  B4D8               	btfsc	status,2,c
  3110  0011B2  0012               	return	
  3111  0011B4  0A64               	xorlw	100	; case 100
  3112  0011B6  B4D8               	btfsc	status,2,c
  3113  0011B8  D007               	goto	l394
  3114  0011BA  0A0D               	xorlw	13	; case 105
  3115  0011BC  B4D8               	btfsc	status,2,c
  3116  0011BE  D004               	goto	l394
  3117  0011C0  0A11               	xorlw	17	; case 120
  3118  0011C2  B4D8               	btfsc	status,2,c
  3119  0011C4  D7E8               	goto	l1826
  3120  0011C6  D103               	goto	l1928
  3121  0011C8                     l394:
  3122                           
  3123                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3124  0011C8  BE1F               	btfsc	printf@flag,7,c
  3125  0011CA  D015               	goto	l1842
  3126                           
  3127                           ;doprnt.c: 1253: {
  3128                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3129  0011CC  C01A  FFD9         	movff	printf@ap,fsr2l
  3130  0011D0  C01B  FFDA         	movff	printf@ap+1,fsr2h
  3131  0011D4  CFDE F01D          	movff	postinc2,printf@val
  3132  0011D8  CFDD F01E          	movff	postdec2,printf@val+1
  3133  0011DC  0E02               	movlw	2
  3134  0011DE  261A               	addwf	printf@ap,f,c
  3135  0011E0  0E00               	movlw	0
  3136  0011E2  221B               	addwfc	printf@ap+1,f,c
  3137                           
  3138                           ;doprnt.c: 1261: if((int)val < 0) {
  3139  0011E4  AE1E               	btfss	printf@val+1,7,c
  3140  0011E6  D044               	goto	l1876
  3141                           
  3142                           ;doprnt.c: 1262: flag |= 0x03;
  3143  0011E8  0E03               	movlw	3
  3144  0011EA  121F               	iorwf	printf@flag,f,c
  3145                           
  3146                           ;doprnt.c: 1263: val = -val;
  3147  0011EC  6C1D               	negf	printf@val,c
  3148  0011EE  1E1E               	comf	printf@val+1,f,c
  3149  0011F0  B0D8               	btfsc	status,0,c
  3150  0011F2  2A1E               	incf	printf@val+1,f,c
  3151                           
  3152                           ;doprnt.c: 1264: }
  3153                           ;doprnt.c: 1266: }
  3154  0011F4  D03D               	goto	l1876
  3155  0011F6                     l1842:
  3156                           
  3157                           ;doprnt.c: 1268: else
  3158                           ;doprnt.c: 1273: {
  3159                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3160  0011F6  C01A  FFD9         	movff	printf@ap,fsr2l
  3161  0011FA  C01B  FFDA         	movff	printf@ap+1,fsr2h
  3162  0011FE  CFDE F01D          	movff	postinc2,printf@val
  3163  001202  CFDD F01E          	movff	postdec2,printf@val+1
  3164  001206  0E02               	movlw	2
  3165  001208  261A               	addwf	printf@ap,f,c
  3166  00120A  0E00               	movlw	0
  3167  00120C  221B               	addwfc	printf@ap+1,f,c
  3168                           
  3169                           ;doprnt.c: 1287: }
  3170                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3171  00120E  D030               	goto	l1876
  3172  001210                     l1846:
  3173                           
  3174                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3175  001210  0E01               	movlw	1
  3176  001212  6E22               	movwf	printf@c,c
  3177  001214                     l1848:
  3178  001214  0E05               	movlw	5
  3179  001216  1822               	xorwf	printf@c,w,c
  3180  001218  B4D8               	btfsc	status,2,c
  3181  00121A  D032               	goto	l1878
  3182                           
  3183                           ;doprnt.c: 1306: if(val < dpowers[c])
  3184  00121C  5022               	movf	printf@c,w,c
  3185  00121E  0D02               	mullw	2
  3186  001220  0E12               	movlw	low _dpowers
  3187  001222  24F3               	addwf	prodl,w,c
  3188  001224  6EF6               	movwf	tblptrl,c
  3189  001226  0E10               	movlw	high _dpowers
  3190  001228  20F4               	addwfc	prodh,w,c
  3191  00122A  6EF7               	movwf	tblptrh,c
  3192  00122C                     	if	0	;There are less than 3 active tblptr bytes
  3193  00122C                     	endif
  3194  00122C  0009               	tblrd		*+
  3195  00122E  50F5               	movf	tablat,w,c
  3196  001230  5C1D               	subwf	printf@val,w,c
  3197  001232  0009               	tblrd		*+
  3198  001234  50F5               	movf	tablat,w,c
  3199  001236  581E               	subwfb	printf@val+1,w,c
  3200  001238  A0D8               	btfss	status,0,c
  3201  00123A  D022               	goto	l1878
  3202                           
  3203                           ;doprnt.c: 1307: break;
  3204  00123C  2A22               	incf	printf@c,f,c
  3205  00123E  D7EA               	goto	l1848
  3206  001240                     l1860:
  3207                           
  3208                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3209  001240  0E01               	movlw	1
  3210  001242  6E22               	movwf	printf@c,c
  3211  001244                     l1862:
  3212  001244  0E04               	movlw	4
  3213  001246  1822               	xorwf	printf@c,w,c
  3214  001248  B4D8               	btfsc	status,2,c
  3215  00124A  D01A               	goto	l1878
  3216                           
  3217                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3218  00124C  5022               	movf	printf@c,w,c
  3219  00124E  0D02               	mullw	2
  3220  001250  0E1C               	movlw	low _hexpowers
  3221  001252  24F3               	addwf	prodl,w,c
  3222  001254  6EF6               	movwf	tblptrl,c
  3223  001256  0E10               	movlw	high _hexpowers
  3224  001258  20F4               	addwfc	prodh,w,c
  3225  00125A  6EF7               	movwf	tblptrh,c
  3226  00125C                     	if	0	;There are less than 3 active tblptr bytes
  3227  00125C                     	endif
  3228  00125C  0009               	tblrd		*+
  3229  00125E  50F5               	movf	tablat,w,c
  3230  001260  5C1D               	subwf	printf@val,w,c
  3231  001262  0009               	tblrd		*+
  3232  001264  50F5               	movf	tablat,w,c
  3233  001266  581E               	subwfb	printf@val+1,w,c
  3234  001268  A0D8               	btfss	status,0,c
  3235  00126A  D00A               	goto	l1878
  3236                           
  3237                           ;doprnt.c: 1318: break;
  3238  00126C  2A22               	incf	printf@c,f,c
  3239  00126E  D7EA               	goto	l1862
  3240  001270                     l1876:
  3241  001270  501F               	movf	printf@flag,w,c
  3242  001272  0B80               	andlw	128
  3243                           
  3244                           ; Switch size 1, requested type "space"
  3245                           ; Number of cases is 2, Range of values is 0 to 128
  3246                           ; switch strategies available:
  3247                           ; Name         Instructions Cycles
  3248                           ; simple_byte            7     4 (average)
  3249                           ;	Chosen strategy is simple_byte
  3250  001274  0A00               	xorlw	0	; case 0
  3251  001276  B4D8               	btfsc	status,2,c
  3252  001278  D7CB               	goto	l1846
  3253  00127A  0A80               	xorlw	128	; case 128
  3254  00127C  B4D8               	btfsc	status,2,c
  3255  00127E  D7E0               	goto	l1860
  3256  001280                     l1878:
  3257                           
  3258                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3259  001280  5020               	movf	printf@width,w,c
  3260  001282  1021               	iorwf	printf@width+1,w,c
  3261  001284  B4D8               	btfsc	status,2,c
  3262  001286  D009               	goto	l1884
  3263  001288  C01F  F015         	movff	printf@flag,??_printf
  3264  00128C  0E03               	movlw	3
  3265  00128E  1615               	andwf	??_printf,f,c
  3266  001290  B4D8               	btfsc	status,2,c
  3267  001292  D003               	goto	l1884
  3268                           
  3269                           ;doprnt.c: 1346: width--;
  3270  001294  0620               	decf	printf@width,f,c
  3271  001296  A0D8               	btfss	status,0,c
  3272  001298  0621               	decf	printf@width+1,f,c
  3273  00129A                     l1884:
  3274                           
  3275                           ;doprnt.c: 1381: if(width > c)
  3276  00129A  0E80               	movlw	128
  3277  00129C  BE22               	btfsc	printf@c,7,c
  3278  00129E  0E7F               	movlw	127
  3279  0012A0  6E15               	movwf	??_printf& (0+255),c
  3280  0012A2  5020               	movf	printf@width,w,c
  3281  0012A4  5C22               	subwf	printf@c,w,c
  3282  0012A6  5021               	movf	printf@width+1,w,c
  3283  0012A8  0A80               	xorlw	128
  3284  0012AA  5815               	subwfb	??_printf& (0+255),w,c
  3285  0012AC  B0D8               	btfsc	status,0,c
  3286  0012AE  D007               	goto	l1888
  3287                           
  3288                           ;doprnt.c: 1382: width -= c;
  3289  0012B0  5022               	movf	printf@c,w,c
  3290  0012B2  5E20               	subwf	printf@width,f,c
  3291  0012B4  0E00               	movlw	0
  3292  0012B6  BE22               	btfsc	printf@c,7,c
  3293  0012B8  0EFF               	movlw	255
  3294  0012BA  5A21               	subwfb	printf@width+1,f,c
  3295  0012BC  D004               	goto	l1890
  3296  0012BE                     l1888:
  3297                           
  3298                           ;doprnt.c: 1383: else
  3299                           ;doprnt.c: 1384: width = 0;
  3300  0012BE  0E00               	movlw	0
  3301  0012C0  6E21               	movwf	printf@width+1,c
  3302  0012C2  0E00               	movlw	0
  3303  0012C4  6E20               	movwf	printf@width,c
  3304  0012C6                     l1890:
  3305                           
  3306                           ;doprnt.c: 1387: if(flag & 0x04) {
  3307  0012C6  A41F               	btfss	printf@flag,2,c
  3308  0012C8  D014               	goto	l1902
  3309                           
  3310                           ;doprnt.c: 1392: if(flag & 0x03)
  3311  0012CA  C01F  F015         	movff	printf@flag,??_printf
  3312  0012CE  0E03               	movlw	3
  3313  0012D0  1615               	andwf	??_printf,f,c
  3314  0012D2  B4D8               	btfsc	status,2,c
  3315  0012D4  D003               	goto	l1896
  3316                           
  3317                           ;doprnt.c: 1393: (putch('-') );
  3318  0012D6  0E2D               	movlw	45
  3319  0012D8  ECD0  F00E         	call	_putch
  3320  0012DC                     l1896:
  3321                           
  3322                           ;doprnt.c: 1415: if(width)
  3323  0012DC  5020               	movf	printf@width,w,c
  3324  0012DE  1021               	iorwf	printf@width+1,w,c
  3325  0012E0  B4D8               	btfsc	status,2,c
  3326  0012E2  D01E               	goto	l1912
  3327                           
  3328                           ;doprnt.c: 1417: (putch('0') );
  3329                           
  3330                           ;doprnt.c: 1416: do
  3331  0012E4  0E30               	movlw	48
  3332  0012E6  ECD0  F00E         	call	_putch
  3333                           
  3334                           ;doprnt.c: 1418: while(--width);
  3335  0012EA  0620               	decf	printf@width,f,c
  3336  0012EC  A0D8               	btfss	status,0,c
  3337  0012EE  0621               	decf	printf@width+1,f,c
  3338  0012F0  D7F5               	goto	l1896
  3339  0012F2                     l1902:
  3340                           
  3341                           ;doprnt.c: 1422: {
  3342                           ;doprnt.c: 1424: if(width
  3343                           ;doprnt.c: 1428: )
  3344  0012F2  5020               	movf	printf@width,w,c
  3345  0012F4  1021               	iorwf	printf@width+1,w,c
  3346  0012F6  B4D8               	btfsc	status,2,c
  3347  0012F8  D00A               	goto	l1908
  3348  0012FA                     l1904:
  3349                           
  3350                           ;doprnt.c: 1430: (putch(' ') );
  3351  0012FA  0E20               	movlw	32
  3352  0012FC  ECD0  F00E         	call	_putch
  3353                           
  3354                           ;doprnt.c: 1431: while(--width);
  3355  001300  0620               	decf	printf@width,f,c
  3356  001302  A0D8               	btfss	status,0,c
  3357  001304  0621               	decf	printf@width+1,f,c
  3358  001306  5020               	movf	printf@width,w,c
  3359  001308  1021               	iorwf	printf@width+1,w,c
  3360  00130A  A4D8               	btfss	status,2,c
  3361  00130C  D7F6               	goto	l1904
  3362  00130E                     l1908:
  3363                           
  3364                           ;doprnt.c: 1438: if(flag & 0x03)
  3365  00130E  C01F  F015         	movff	printf@flag,??_printf
  3366  001312  0E03               	movlw	3
  3367  001314  1615               	andwf	??_printf,f,c
  3368  001316  B4D8               	btfsc	status,2,c
  3369  001318  D003               	goto	l1912
  3370                           
  3371                           ;doprnt.c: 1439: (putch('-') );
  3372  00131A  0E2D               	movlw	45
  3373  00131C  ECD0  F00E         	call	_putch
  3374  001320                     l1912:
  3375                           
  3376                           ;doprnt.c: 1469: }
  3377                           ;doprnt.c: 1472: prec = c;
  3378  001320  C022  F01C         	movff	printf@c,printf@prec
  3379                           
  3380                           ;doprnt.c: 1474: while(prec--) {
  3381  001324  D050               	goto	l1926
  3382  001326                     l1914:
  3383                           
  3384                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3385  001326  501C               	movf	printf@prec,w,c
  3386  001328  0D02               	mullw	2
  3387  00132A  0E12               	movlw	low _dpowers
  3388  00132C  24F3               	addwf	prodl,w,c
  3389  00132E  6EF6               	movwf	tblptrl,c
  3390  001330  0E10               	movlw	high _dpowers
  3391  001332  20F4               	addwfc	prodh,w,c
  3392  001334  6EF7               	movwf	tblptrh,c
  3393  001336                     	if	0	;There are less than 3 active tblptr bytes
  3394  001336                     	endif
  3395  001336  0009               	tblrd		*+
  3396  001338  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3397  00133C  000A               	tblrd		*-
  3398  00133E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3399  001342  C01D  F001         	movff	printf@val,___lwdiv@dividend
  3400  001346  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3401  00134A  EC5F  F00D         	call	___lwdiv	;wreg free
  3402  00134E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3403  001352  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3404  001356  0E00               	movlw	0
  3405  001358  6E0B               	movwf	___lwmod@divisor+1,c
  3406  00135A  0E0A               	movlw	10
  3407  00135C  6E0A               	movwf	___lwmod@divisor,c
  3408  00135E  ECF5  F00D         	call	___lwmod	;wreg free
  3409  001362  5008               	movf	?___lwmod,w,c
  3410  001364  0F30               	addlw	48
  3411  001366  6E22               	movwf	printf@c,c
  3412                           
  3413                           ;doprnt.c: 1491: break;
  3414  001368  D02B               	goto	l1924
  3415  00136A                     l1916:
  3416                           
  3417                           ;doprnt.c: 1499: {
  3418                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3419  00136A  C01D  F001         	movff	printf@val,___lwdiv@dividend
  3420  00136E  C01E  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3421  001372  501C               	movf	printf@prec,w,c
  3422  001374  0D02               	mullw	2
  3423  001376  0E1C               	movlw	low _hexpowers
  3424  001378  24F3               	addwf	prodl,w,c
  3425  00137A  6EF6               	movwf	tblptrl,c
  3426  00137C  0E10               	movlw	high _hexpowers
  3427  00137E  20F4               	addwfc	prodh,w,c
  3428  001380  6EF7               	movwf	tblptrh,c
  3429  001382                     	if	0	;There are less than 3 active tblptr bytes
  3430  001382                     	endif
  3431  001382  0009               	tblrd		*+
  3432  001384  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3433  001388  000A               	tblrd		*-
  3434  00138A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3435  00138E  EC5F  F00D         	call	___lwdiv	;wreg free
  3436  001392  5001               	movf	?___lwdiv,w,c
  3437  001394  0B0F               	andlw	15
  3438  001396  6E19               	movwf	printf@idx,c
  3439                           
  3440                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3441  001398  5019               	movf	printf@idx,w,c
  3442  00139A  0D01               	mullw	1
  3443  00139C  0E3E               	movlw	low STR_14
  3444  00139E  24F3               	addwf	prodl,w,c
  3445  0013A0  6EF6               	movwf	tblptrl,c
  3446  0013A2  0E10               	movlw	high STR_14
  3447  0013A4  20F4               	addwfc	prodh,w,c
  3448  0013A6  6EF7               	movwf	tblptrh,c
  3449  0013A8                     	if	0	;There are less than 3 active tblptr bytes
  3450  0013A8                     	endif
  3451  0013A8  0008               	tblrd		*
  3452  0013AA  CFF5 F022          	movff	tablat,printf@c
  3453                           
  3454                           ;doprnt.c: 1523: }
  3455                           
  3456                           ;doprnt.c: 1508: }
  3457                           ;doprnt.c: 1510: break;
  3458  0013AE  D008               	goto	l1924
  3459  0013B0                     l1922:
  3460  0013B0  501F               	movf	printf@flag,w,c
  3461  0013B2  0B80               	andlw	128
  3462                           
  3463                           ; Switch size 1, requested type "space"
  3464                           ; Number of cases is 2, Range of values is 0 to 128
  3465                           ; switch strategies available:
  3466                           ; Name         Instructions Cycles
  3467                           ; simple_byte            7     4 (average)
  3468                           ;	Chosen strategy is simple_byte
  3469  0013B4  0A00               	xorlw	0	; case 0
  3470  0013B6  B4D8               	btfsc	status,2,c
  3471  0013B8  D7B6               	goto	l1914
  3472  0013BA  0A80               	xorlw	128	; case 128
  3473  0013BC  B4D8               	btfsc	status,2,c
  3474  0013BE  D7D5               	goto	l1916
  3475  0013C0                     l1924:
  3476                           
  3477                           ;doprnt.c: 1524: (putch(c) );
  3478  0013C0  5022               	movf	printf@c,w,c
  3479  0013C2  ECD0  F00E         	call	_putch
  3480  0013C6                     l1926:
  3481  0013C6  061C               	decf	printf@prec,f,c
  3482  0013C8  281C               	incf	printf@prec,w,c
  3483  0013CA  A4D8               	btfss	status,2,c
  3484  0013CC  D7F1               	goto	l1922
  3485  0013CE                     l1928:
  3486  0013CE  C00D  FFF6         	movff	printf@f,tblptrl
  3487  0013D2  C00E  FFF7         	movff	printf@f+1,tblptrh
  3488  0013D6  4A0D               	infsnz	printf@f,f,c
  3489  0013D8  2A0E               	incf	printf@f+1,f,c
  3490  0013DA                     	if	0	;tblptru may be non-zero
  3491  0013DA                     	endif
  3492  0013DA                     	if	0	;tblptru may be non-zero
  3493  0013DA                     	endif
  3494  0013DA  0008               	tblrd		*
  3495  0013DC  CFF5 F022          	movff	tablat,printf@c
  3496  0013E0  5022               	movf	printf@c,w,c
  3497  0013E2  B4D8               	btfsc	status,2,c
  3498  0013E4  0012               	return	
  3499  0013E6  D67F               	goto	l1802
  3500  0013E8                     __end_of_printf:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon2	equ	0xFF1
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           indf2	equ	0xFDF
  3512                           postinc2	equ	0xFDE
  3513                           postdec2	equ	0xFDD
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _putch *****************
  3519 ;; Defined at:
  3520 ;;		line 27 in file "lcd.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  data            1    wreg     unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  data            1    2[COMRAM] unsigned char 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        1 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    1
  3541 ;; This function calls:
  3542 ;;		_lcdNibble
  3543 ;; This function is called by:
  3544 ;;		_printf
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text20
  3549  001DA0                     __ptext20:
  3550                           	opt stack 0
  3551  001DA0                     _putch:
  3552                           	opt stack 28
  3553                           
  3554                           ;incstack = 0
  3555                           ;putch@data stored from wreg
  3556  001DA0  6E03               	movwf	putch@data,c
  3557                           
  3558                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  3559  001DA2  848C               	bsf	3980,2,c	;volatile
  3560                           
  3561                           ;lcd.c: 29: lcdNibble(data);
  3562  001DA4  5003               	movf	putch@data,w,c
  3563  001DA6  EC34  F00D         	call	_lcdNibble
  3564  001DAA  0012               	return		;funcret
  3565  001DAC                     __end_of_putch:
  3566                           	opt stack 0
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           prodh	equ	0xFF4
  3572                           prodl	equ	0xFF3
  3573                           intcon2	equ	0xFF1
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           indf2	equ	0xFDF
  3577                           postinc2	equ	0xFDE
  3578                           postdec2	equ	0xFDD
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _isdigit *****************
  3584 ;; Defined at:
  3585 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  c               1    wreg     unsigned char 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  c               1    2[COMRAM] unsigned char 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;		None               void
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;Total ram usage:        3 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; This function calls:
  3606 ;;		Nothing
  3607 ;; This function is called by:
  3608 ;;		_printf
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text21
  3613  001D32                     __ptext21:
  3614                           	opt stack 0
  3615  001D32                     _isdigit:
  3616                           	opt stack 29
  3617                           
  3618                           ;incstack = 0
  3619                           ;isdigit@c stored from wreg
  3620  001D32  6E03               	movwf	isdigit@c,c
  3621  001D34  0E00               	movlw	0
  3622  001D36  6E02               	movwf	_isdigit$1016,c
  3623  001D38  0E3A               	movlw	58
  3624  001D3A  6003               	cpfslt	isdigit@c,c
  3625  001D3C  D005               	goto	l1722
  3626  001D3E  0E2F               	movlw	47
  3627  001D40  6403               	cpfsgt	isdigit@c,c
  3628  001D42  D002               	goto	l1722
  3629  001D44  0E01               	movlw	1
  3630  001D46  6E02               	movwf	_isdigit$1016,c
  3631  001D48                     l1722:
  3632  001D48  C002  F001         	movff	_isdigit$1016,??_isdigit
  3633  001D4C  3001               	rrcf	??_isdigit,w,c
  3634  001D4E  0012               	return	
  3635  001D50                     __end_of_isdigit:
  3636                           	opt stack 0
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon2	equ	0xFF1
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function ___lwmod *****************
  3654 ;; Defined at:
  3655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  dividend        2    7[COMRAM] unsigned int 
  3658 ;;  divisor         2    9[COMRAM] unsigned int 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  counter         1   11[COMRAM] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    7[COMRAM] unsigned int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3670 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;Total ram usage:        5 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; This function calls:
  3677 ;;		Nothing
  3678 ;; This function is called by:
  3679 ;;		_printf
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text22
  3684  001BEA                     __ptext22:
  3685                           	opt stack 0
  3686  001BEA                     ___lwmod:
  3687                           	opt stack 29
  3688                           
  3689                           ;incstack = 0
  3690  001BEA  500A               	movf	___lwmod@divisor,w,c
  3691  001BEC  100B               	iorwf	___lwmod@divisor+1,w,c
  3692  001BEE  B4D8               	btfsc	status,2,c
  3693  001BF0  D018               	goto	l849
  3694  001BF2  0E01               	movlw	1
  3695  001BF4  6E0C               	movwf	___lwmod@counter,c
  3696  001BF6  D004               	goto	l1782
  3697  001BF8                     l1780:
  3698  001BF8  90D8               	bcf	status,0,c
  3699  001BFA  360A               	rlcf	___lwmod@divisor,f,c
  3700  001BFC  360B               	rlcf	___lwmod@divisor+1,f,c
  3701  001BFE  2A0C               	incf	___lwmod@counter,f,c
  3702  001C00                     l1782:
  3703  001C00  AE0B               	btfss	___lwmod@divisor+1,7,c
  3704  001C02  D7FA               	goto	l1780
  3705  001C04                     l1784:
  3706  001C04  500A               	movf	___lwmod@divisor,w,c
  3707  001C06  5C08               	subwf	___lwmod@dividend,w,c
  3708  001C08  500B               	movf	___lwmod@divisor+1,w,c
  3709  001C0A  5809               	subwfb	___lwmod@dividend+1,w,c
  3710  001C0C  A0D8               	btfss	status,0,c
  3711  001C0E  D004               	goto	l1788
  3712  001C10  500A               	movf	___lwmod@divisor,w,c
  3713  001C12  5E08               	subwf	___lwmod@dividend,f,c
  3714  001C14  500B               	movf	___lwmod@divisor+1,w,c
  3715  001C16  5A09               	subwfb	___lwmod@dividend+1,f,c
  3716  001C18                     l1788:
  3717  001C18  90D8               	bcf	status,0,c
  3718  001C1A  320B               	rrcf	___lwmod@divisor+1,f,c
  3719  001C1C  320A               	rrcf	___lwmod@divisor,f,c
  3720  001C1E  2E0C               	decfsz	___lwmod@counter,f,c
  3721  001C20  D7F1               	goto	l1784
  3722  001C22                     l849:
  3723  001C22  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3724  001C26  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3725  001C2A  0012               	return		;funcret
  3726  001C2C                     __end_of___lwmod:
  3727                           	opt stack 0
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           intcon2	equ	0xFF1
  3735                           postinc0	equ	0xFEE
  3736                           wreg	equ	0xFE8
  3737                           indf2	equ	0xFDF
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function ___lwdiv *****************
  3745 ;; Defined at:
  3746 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  dividend        2    0[COMRAM] unsigned int 
  3749 ;;  divisor         2    2[COMRAM] unsigned int 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  quotient        2    4[COMRAM] unsigned int 
  3752 ;;  counter         1    6[COMRAM] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  2    0[COMRAM] unsigned int 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2, status,0
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3762 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;Total ram usage:        7 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_printf
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text23
  3776  001ABE                     __ptext23:
  3777                           	opt stack 0
  3778  001ABE                     ___lwdiv:
  3779                           	opt stack 29
  3780                           
  3781                           ;incstack = 0
  3782  001ABE  0E00               	movlw	0
  3783  001AC0  6E06               	movwf	___lwdiv@quotient+1,c
  3784  001AC2  0E00               	movlw	0
  3785  001AC4  6E05               	movwf	___lwdiv@quotient,c
  3786  001AC6  5003               	movf	___lwdiv@divisor,w,c
  3787  001AC8  1004               	iorwf	___lwdiv@divisor+1,w,c
  3788  001ACA  B4D8               	btfsc	status,2,c
  3789  001ACC  D01C               	goto	l839
  3790  001ACE  0E01               	movlw	1
  3791  001AD0  6E07               	movwf	___lwdiv@counter,c
  3792  001AD2  D004               	goto	l1762
  3793  001AD4                     l1760:
  3794  001AD4  90D8               	bcf	status,0,c
  3795  001AD6  3603               	rlcf	___lwdiv@divisor,f,c
  3796  001AD8  3604               	rlcf	___lwdiv@divisor+1,f,c
  3797  001ADA  2A07               	incf	___lwdiv@counter,f,c
  3798  001ADC                     l1762:
  3799  001ADC  AE04               	btfss	___lwdiv@divisor+1,7,c
  3800  001ADE  D7FA               	goto	l1760
  3801  001AE0                     l1764:
  3802  001AE0  90D8               	bcf	status,0,c
  3803  001AE2  3605               	rlcf	___lwdiv@quotient,f,c
  3804  001AE4  3606               	rlcf	___lwdiv@quotient+1,f,c
  3805  001AE6  5003               	movf	___lwdiv@divisor,w,c
  3806  001AE8  5C01               	subwf	___lwdiv@dividend,w,c
  3807  001AEA  5004               	movf	___lwdiv@divisor+1,w,c
  3808  001AEC  5802               	subwfb	___lwdiv@dividend+1,w,c
  3809  001AEE  A0D8               	btfss	status,0,c
  3810  001AF0  D005               	goto	l1772
  3811  001AF2  5003               	movf	___lwdiv@divisor,w,c
  3812  001AF4  5E01               	subwf	___lwdiv@dividend,f,c
  3813  001AF6  5004               	movf	___lwdiv@divisor+1,w,c
  3814  001AF8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3815  001AFA  8005               	bsf	___lwdiv@quotient,0,c
  3816  001AFC                     l1772:
  3817  001AFC  90D8               	bcf	status,0,c
  3818  001AFE  3204               	rrcf	___lwdiv@divisor+1,f,c
  3819  001B00  3203               	rrcf	___lwdiv@divisor,f,c
  3820  001B02  2E07               	decfsz	___lwdiv@counter,f,c
  3821  001B04  D7ED               	goto	l1764
  3822  001B06                     l839:
  3823  001B06  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3824  001B0A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3825  001B0E  0012               	return		;funcret
  3826  001B10                     __end_of___lwdiv:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon2	equ	0xFF1
  3835                           postinc0	equ	0xFEE
  3836                           wreg	equ	0xFE8
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _lcdInst *****************
  3845 ;; Defined at:
  3846 ;;		line 22 in file "lcd.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  data            1    wreg     unsigned char 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  data            1    2[COMRAM] unsigned char 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;Total ram usage:        1 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    1
  3867 ;; This function calls:
  3868 ;;		_lcdNibble
  3869 ;; This function is called by:
  3870 ;;		_main
  3871 ;;		_initLCD
  3872 ;;		_homescreen
  3873 ;;		_displayLogs
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text24
  3878  001DAC                     __ptext24:
  3879                           	opt stack 0
  3880  001DAC                     _lcdInst:
  3881                           	opt stack 29
  3882                           
  3883                           ;incstack = 0
  3884                           ;lcdInst@data stored from wreg
  3885  001DAC  6E03               	movwf	lcdInst@data,c
  3886                           
  3887                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  3888  001DAE  948C               	bcf	3980,2,c	;volatile
  3889                           
  3890                           ;lcd.c: 24: lcdNibble(data);
  3891  001DB0  5003               	movf	lcdInst@data,w,c
  3892  001DB2  EC34  F00D         	call	_lcdNibble
  3893  001DB6  0012               	return		;funcret
  3894  001DB8                     __end_of_lcdInst:
  3895                           	opt stack 0
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           intcon2	equ	0xFF1
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           indf2	equ	0xFDF
  3906                           postinc2	equ	0xFDE
  3907                           postdec2	equ	0xFDD
  3908                           fsr2h	equ	0xFDA
  3909                           fsr2l	equ	0xFD9
  3910                           status	equ	0xFD8
  3911                           
  3912 ;; *************** function _lcdNibble *****************
  3913 ;; Defined at:
  3914 ;;		line 32 in file "lcd.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  data            1    wreg     unsigned char 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;  data            1    1[COMRAM] unsigned char 
  3919 ;;  temp            1    0[COMRAM] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;Total ram usage:        2 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_lcdInst
  3939 ;;		_putch
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text25
  3944  001A68                     __ptext25:
  3945                           	opt stack 0
  3946  001A68                     _lcdNibble:
  3947                           	opt stack 28
  3948                           
  3949                           ;incstack = 0
  3950                           ;lcdNibble@data stored from wreg
  3951  001A68  6E02               	movwf	lcdNibble@data,c
  3952                           
  3953                           ;lcd.c: 34: char temp = data & 0xF0;
  3954  001A6A  5002               	movf	lcdNibble@data,w,c
  3955  001A6C  0BF0               	andlw	240
  3956  001A6E  6E01               	movwf	lcdNibble@temp,c
  3957                           
  3958                           ;lcd.c: 35: LATD = LATD & 0x0F;
  3959  001A70  508C               	movf	3980,w,c	;volatile
  3960  001A72  0B0F               	andlw	15
  3961  001A74  6E8C               	movwf	3980,c	;volatile
  3962                           
  3963                           ;lcd.c: 36: LATD = temp | LATD;
  3964  001A76  5001               	movf	lcdNibble@temp,w,c
  3965  001A78  108C               	iorwf	3980,w,c	;volatile
  3966  001A7A  6E8C               	movwf	3980,c	;volatile
  3967                           
  3968                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  3969  001A7C  968C               	bcf	3980,3,c	;volatile
  3970                           
  3971                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3972  001A7E  0E42               	movlw	66
  3973  001A80                     u1447:
  3974  001A80  2EE8               	decfsz	wreg,f,c
  3975  001A82  D7FE               	bra	u1447
  3976  001A84  D000               	nop2	
  3977                           
  3978                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  3979  001A86  868C               	bsf	3980,3,c	;volatile
  3980                           
  3981                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  3982  001A88  0E42               	movlw	66
  3983  001A8A                     u1457:
  3984  001A8A  2EE8               	decfsz	wreg,f,c
  3985  001A8C  D7FE               	bra	u1457
  3986  001A8E  D000               	nop2	
  3987                           
  3988                           ;lcd.c: 43: data = data << 4;
  3989  001A90  3802               	swapf	lcdNibble@data,w,c
  3990  001A92  0BF0               	andlw	240
  3991  001A94  6E02               	movwf	lcdNibble@data,c
  3992                           
  3993                           ;lcd.c: 45: temp = data & 0xF0;
  3994  001A96  5002               	movf	lcdNibble@data,w,c
  3995  001A98  0BF0               	andlw	240
  3996  001A9A  6E01               	movwf	lcdNibble@temp,c
  3997                           
  3998                           ;lcd.c: 46: LATD = LATD & 0x0F;
  3999  001A9C  508C               	movf	3980,w,c	;volatile
  4000  001A9E  0B0F               	andlw	15
  4001  001AA0  6E8C               	movwf	3980,c	;volatile
  4002                           
  4003                           ;lcd.c: 47: LATD = temp | LATD;
  4004  001AA2  5001               	movf	lcdNibble@temp,w,c
  4005  001AA4  108C               	iorwf	3980,w,c	;volatile
  4006  001AA6  6E8C               	movwf	3980,c	;volatile
  4007                           
  4008                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  4009  001AA8  968C               	bcf	3980,3,c	;volatile
  4010                           
  4011                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4012  001AAA  0E42               	movlw	66
  4013  001AAC                     u1467:
  4014  001AAC  2EE8               	decfsz	wreg,f,c
  4015  001AAE  D7FE               	bra	u1467
  4016  001AB0  D000               	nop2	
  4017                           
  4018                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  4019  001AB2  868C               	bsf	3980,3,c	;volatile
  4020                           
  4021                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  4022  001AB4  0E42               	movlw	66
  4023  001AB6                     u1477:
  4024  001AB6  2EE8               	decfsz	wreg,f,c
  4025  001AB8  D7FE               	bra	u1477
  4026  001ABA  D000               	nop2	
  4027  001ABC  0012               	return		;funcret
  4028  001ABE                     __end_of_lcdNibble:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon2	equ	0xFF1
  4037                           postinc0	equ	0xFEE
  4038                           wreg	equ	0xFE8
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _keycheck *****************
  4047 ;; Defined at:
  4048 ;;		line 26 in file "main.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;Total ram usage:        0 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_displayLogs
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text26
  4076  001D7A                     __ptext26:
  4077                           	opt stack 0
  4078  001D7A                     _keycheck:
  4079                           	opt stack 29
  4080  001D7A                     l103:
  4081  001D7A  A281               	btfss	3969,1,c	;volatile
  4082  001D7C  D7FE               	goto	l103
  4083                           
  4084                           ;main.c: 30: }
  4085                           ;main.c: 31: keypress = (PORTB & 0xF0)>>4;
  4086  001D7E  3881               	swapf	3969,w,c	;volatile
  4087  001D80  0B0F               	andlw	15
  4088  001D82  0B0F               	andlw	15
  4089  001D84  6E43               	movwf	_keypress,c	;volatile
  4090  001D86                     l106:
  4091  001D86  B281               	btfsc	3969,1,c	;volatile
  4092  001D88  D7FE               	goto	l106
  4093                           
  4094                           ;main.c: 34: }
  4095                           ;main.c: 35: __nop();
  4096  001D8A  F000               	nop	
  4097                           
  4098                           ;main.c: 36: return;
  4099  001D8C  0012               	return		;funcret
  4100  001D8E                     __end_of_keycheck:
  4101                           	opt stack 0
  4102                           tblptru	equ	0xFF8
  4103                           tblptrh	equ	0xFF7
  4104                           tblptrl	equ	0xFF6
  4105                           tablat	equ	0xFF5
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           intcon2	equ	0xFF1
  4109                           postinc0	equ	0xFEE
  4110                           wreg	equ	0xFE8
  4111                           indf2	equ	0xFDF
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118 ;; *************** function _eepromRead *****************
  4119 ;; Defined at:
  4120 ;;		line 30 in file "interface.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  address         1    wreg     char 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  address         1    2[COMRAM] char 
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      char 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;Total ram usage:        3 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_displayLogs
  4144 ;;		_updateEEPROM
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text27
  4149  001C9A                     __ptext27:
  4150                           	opt stack 0
  4151  001C9A                     _eepromRead:
  4152                           	opt stack 29
  4153                           
  4154                           ;incstack = 0
  4155                           ;eepromRead@address stored from wreg
  4156  001C9A  6E03               	movwf	eepromRead@address,c
  4157                           
  4158                           ;interface.c: 32: EEADRH = (signed char)(address >> 8);
  4159  001C9C  C003  F001         	movff	eepromRead@address,??_eepromRead
  4160  001CA0  0E08               	movlw	8
  4161  001CA2  6E02               	movwf	(??_eepromRead+1)& (0+255),c
  4162  001CA4                     u425:
  4163  001CA4  3401               	rlcf	??_eepromRead,w,c
  4164  001CA6  3201               	rrcf	??_eepromRead,f,c
  4165  001CA8  2E02               	decfsz	(??_eepromRead+1)& (0+255),f,c
  4166  001CAA  D7FC               	goto	u425
  4167  001CAC  5001               	movf	??_eepromRead,w,c
  4168  001CAE  6EAA               	movwf	4010,c	;volatile
  4169                           
  4170                           ;interface.c: 33: EEADR = (signed char)address;
  4171  001CB0  C003  FFA9         	movff	eepromRead@address,4009	;volatile
  4172                           
  4173                           ;interface.c: 35: EECON1bits.EEPGD = 0;
  4174  001CB4  9EA6               	bcf	4006,7,c	;volatile
  4175                           
  4176                           ;interface.c: 36: EECON1bits.CFGS = 0;
  4177  001CB6  9CA6               	bcf	4006,6,c	;volatile
  4178                           
  4179                           ;interface.c: 37: EECON1bits.RD = 1;
  4180  001CB8  80A6               	bsf	4006,0,c	;volatile
  4181  001CBA                     l334:
  4182  001CBA  B0A6               	btfsc	4006,0,c	;volatile
  4183  001CBC  D7FE               	goto	l334
  4184                           
  4185                           ;interface.c: 43: return EEDATA;
  4186  001CBE  50A8               	movf	4008,w,c	;volatile
  4187  001CC0  0012               	return	
  4188  001CC2                     __end_of_eepromRead:
  4189                           	opt stack 0
  4190                           tblptru	equ	0xFF8
  4191                           tblptrh	equ	0xFF7
  4192                           tblptrl	equ	0xFF6
  4193                           tablat	equ	0xFF5
  4194                           prodh	equ	0xFF4
  4195                           prodl	equ	0xFF3
  4196                           intcon2	equ	0xFF1
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           indf2	equ	0xFDF
  4200                           postinc2	equ	0xFDE
  4201                           postdec2	equ	0xFDD
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _backlogTest *****************
  4207 ;; Defined at:
  4208 ;;		line 3 in file "logic.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  blockedStart    2    6[COMRAM] int 
  4211 ;;  motorStatus     2    8[COMRAM] int 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  2    6[COMRAM] int 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;Total ram usage:        8 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    1
  4230 ;; This function calls:
  4231 ;;		___wmul
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text28
  4238  0018CE                     __ptext28:
  4239                           	opt stack 0
  4240  0018CE                     _backlogTest:
  4241                           	opt stack 29
  4242                           
  4243                           ;logic.c: 4: if (ADRESH == 0){
  4244                           
  4245                           ;incstack = 0
  4246  0018CE  50C4               	movf	4036,w,c	;volatile
  4247  0018D0  A4D8               	btfss	status,2,c
  4248  0018D2  D005               	goto	l2046
  4249                           
  4250                           ;logic.c: 5: return 1;
  4251  0018D4  0E00               	movlw	0
  4252  0018D6  6E08               	movwf	?_backlogTest+1,c
  4253  0018D8  0E01               	movlw	1
  4254  0018DA  6E07               	movwf	?_backlogTest,c
  4255                           
  4256                           ;logic.c: 6: }
  4257  0018DC  0012               	return	
  4258  0018DE                     l2046:
  4259                           
  4260                           ;logic.c: 7: else{
  4261                           ;logic.c: 8: if (time[0] + 60*time[1] + 3600*time[2] - blockedStart > 3){
  4262  0018DE  C007  F00B         	movff	backlogTest@blockedStart,??_backlogTest
  4263  0018E2  C008  F00C         	movff	backlogTest@blockedStart+1,??_backlogTest+1
  4264  0018E6  1E0B               	comf	??_backlogTest,f,c
  4265  0018E8  1E0C               	comf	??_backlogTest+1,f,c
  4266  0018EA  4A0B               	infsnz	??_backlogTest,f,c
  4267  0018EC  2A0C               	incf	??_backlogTest+1,f,c
  4268  0018EE  C038  F001         	movff	_time+2,___wmul@multiplier
  4269  0018F2  6A02               	clrf	___wmul@multiplier+1,c
  4270  0018F4  0E0E               	movlw	14
  4271  0018F6  6E04               	movwf	___wmul@multiplicand+1,c
  4272  0018F8  0E10               	movlw	16
  4273  0018FA  6E03               	movwf	___wmul@multiplicand,c
  4274  0018FC  EC74  F00E         	call	___wmul	;wreg free
  4275  001900  5037               	movf	_time+1,w,c
  4276  001902  0D3C               	mullw	60
  4277  001904  5036               	movf	_time,w,c
  4278  001906  6E0D               	movwf	(??_backlogTest+2)& (0+255),c
  4279  001908  6A0E               	clrf	(??_backlogTest+3)& (0+255),c
  4280  00190A  50F3               	movf	prodl,w,c
  4281  00190C  260D               	addwf	??_backlogTest+2,f,c
  4282  00190E  50F4               	movf	prodh,w,c
  4283  001910  220E               	addwfc	??_backlogTest+3,f,c
  4284  001912  5001               	movf	?___wmul,w,c
  4285  001914  260D               	addwf	??_backlogTest+2,f,c
  4286  001916  5002               	movf	?___wmul+1,w,c
  4287  001918  220E               	addwfc	??_backlogTest+3,f,c
  4288  00191A  500B               	movf	??_backlogTest,w,c
  4289  00191C  260D               	addwf	??_backlogTest+2,f,c
  4290  00191E  500C               	movf	??_backlogTest+1,w,c
  4291  001920  220E               	addwfc	??_backlogTest+3,f,c
  4292  001922  BE0E               	btfsc	??_backlogTest+3,7,c
  4293  001924  D00B               	goto	l2054
  4294  001926  500E               	movf	??_backlogTest+3,w,c
  4295  001928  E104               	bnz	u1210
  4296  00192A  0E04               	movlw	4
  4297  00192C  5C0D               	subwf	??_backlogTest+2,w,c
  4298  00192E  A0D8               	btfss	status,0,c
  4299  001930  D005               	goto	l2054
  4300  001932                     u1210:
  4301                           
  4302                           ;logic.c: 10: return 1;
  4303  001932  0E00               	movlw	0
  4304  001934  6E08               	movwf	?_backlogTest+1,c
  4305  001936  0E01               	movlw	1
  4306  001938  6E07               	movwf	?_backlogTest,c
  4307                           
  4308                           ;logic.c: 11: }
  4309  00193A  0012               	return	
  4310  00193C                     l2054:
  4311                           
  4312                           ;logic.c: 12: else{
  4313                           ;logic.c: 14: return 0;
  4314  00193C  0E00               	movlw	0
  4315  00193E  6E08               	movwf	?_backlogTest+1,c
  4316  001940  0E00               	movlw	0
  4317  001942  6E07               	movwf	?_backlogTest,c
  4318  001944  0012               	return	
  4319  001946                     __end_of_backlogTest:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon2	equ	0xFF1
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function ___wmul *****************
  4338 ;; Defined at:
  4339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  multiplier      2    0[COMRAM] unsigned int 
  4342 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  product         2    4[COMRAM] unsigned int 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  2    0[COMRAM] unsigned int 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, prodl, prodh
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        6 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;;		_backlogTest
  4365 ;;		_timePassed
  4366 ;;		_printf
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text29
  4371  001CE8                     __ptext29:
  4372                           	opt stack 0
  4373  001CE8                     ___wmul:
  4374                           	opt stack 29
  4375                           
  4376                           ;incstack = 0
  4377  001CE8  5001               	movf	___wmul@multiplier,w,c
  4378  001CEA  0203               	mulwf	___wmul@multiplicand,c
  4379  001CEC  CFF3 F005          	movff	prodl,___wmul@product
  4380  001CF0  CFF4 F006          	movff	prodh,___wmul@product+1
  4381  001CF4  5001               	movf	___wmul@multiplier,w,c
  4382  001CF6  0204               	mulwf	___wmul@multiplicand+1,c
  4383  001CF8  50F3               	movf	prodl,w,c
  4384  001CFA  2606               	addwf	___wmul@product+1,f,c
  4385  001CFC  5002               	movf	___wmul@multiplier+1,w,c
  4386  001CFE  0203               	mulwf	___wmul@multiplicand,c
  4387  001D00  50F3               	movf	prodl,w,c
  4388  001D02  2606               	addwf	___wmul@product+1,f,c
  4389  001D04  C005  F001         	movff	___wmul@product,?___wmul
  4390  001D08  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4391  001D0C  0012               	return	
  4392  001D0E                     __end_of___wmul:
  4393                           	opt stack 0
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           intcon2	equ	0xFF1
  4401                           postinc0	equ	0xFEE
  4402                           wreg	equ	0xFE8
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _PWM1off *****************
  4411 ;; Defined at:
  4412 ;;		line 22 in file "motors.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_main
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text30
  4440  001DC2                     __ptext30:
  4441                           	opt stack 0
  4442  001DC2                     _PWM1off:
  4443                           	opt stack 30
  4444                           
  4445                           ;motors.c: 23: CCP1CONbits.DC1B0 = 0;
  4446                           
  4447                           ;incstack = 0
  4448  001DC2  98BD               	bcf	4029,4,c	;volatile
  4449                           
  4450                           ;motors.c: 24: CCP1CONbits.DC1B1 = 0;
  4451  001DC4  9ABD               	bcf	4029,5,c	;volatile
  4452                           
  4453                           ;motors.c: 25: CCPR1L = 0;
  4454  001DC6  0E00               	movlw	0
  4455  001DC8  6EBE               	movwf	4030,c	;volatile
  4456  001DCA  0012               	return		;funcret
  4457  001DCC                     __end_of_PWM1off:
  4458                           	opt stack 0
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           prodh	equ	0xFF4
  4464                           prodl	equ	0xFF3
  4465                           intcon2	equ	0xFF1
  4466                           postinc0	equ	0xFEE
  4467                           wreg	equ	0xFE8
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           fsr2h	equ	0xFDA
  4472                           fsr2l	equ	0xFD9
  4473                           status	equ	0xFD8
  4474                           
  4475 ;; *************** function _PWM1 *****************
  4476 ;; Defined at:
  4477 ;;		line 8 in file "motors.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;  duty            2    0[COMRAM] int 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;		None
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;Total ram usage:        4 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_main
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text31
  4505  001B5A                     __ptext31:
  4506                           	opt stack 0
  4507  001B5A                     _PWM1:
  4508                           	opt stack 30
  4509                           
  4510                           ;motors.c: 16: CCP1CONbits.DC1B0 = duty & 1;
  4511                           
  4512                           ;incstack = 0
  4513  001B5A  C001  F003         	movff	PWM1@duty,??_PWM1
  4514  001B5E  0E01               	movlw	1
  4515  001B60  1603               	andwf	??_PWM1,f,c
  4516  001B62  3A03               	swapf	??_PWM1,f,c
  4517  001B64  50BD               	movf	4029,w,c	;volatile
  4518  001B66  1803               	xorwf	??_PWM1,w,c
  4519  001B68  0BEF               	andlw	-17
  4520  001B6A  1803               	xorwf	??_PWM1,w,c
  4521  001B6C  6EBD               	movwf	4029,c	;volatile
  4522                           
  4523                           ;motors.c: 17: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  4524  001B6E  3402               	rlcf	PWM1@duty+1,w,c
  4525  001B70  3002               	rrcf	PWM1@duty+1,w,c
  4526  001B72  6E04               	movwf	(??_PWM1+1)& (0+255),c
  4527  001B74  3001               	rrcf	PWM1@duty,w,c
  4528  001B76  6E03               	movwf	??_PWM1& (0+255),c
  4529  001B78  0E01               	movlw	1
  4530  001B7A  1603               	andwf	??_PWM1,f,c
  4531  001B7C  3A03               	swapf	??_PWM1,f,c
  4532  001B7E  4603               	rlncf	??_PWM1,f,c
  4533  001B80  50BD               	movf	4029,w,c	;volatile
  4534  001B82  1803               	xorwf	??_PWM1,w,c
  4535  001B84  0BDF               	andlw	-33
  4536  001B86  1803               	xorwf	??_PWM1,w,c
  4537  001B88  6EBD               	movwf	4029,c	;volatile
  4538                           
  4539                           ;motors.c: 18: CCPR1L = (duty >> 2);
  4540  001B8A  C001  F003         	movff	PWM1@duty,??_PWM1
  4541  001B8E  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  4542  001B92  3404               	rlcf	??_PWM1+1,w,c
  4543  001B94  3204               	rrcf	??_PWM1+1,f,c
  4544  001B96  3203               	rrcf	??_PWM1,f,c
  4545  001B98  3404               	rlcf	??_PWM1+1,w,c
  4546  001B9A  3204               	rrcf	??_PWM1+1,f,c
  4547  001B9C  3203               	rrcf	??_PWM1,f,c
  4548  001B9E  5003               	movf	??_PWM1,w,c
  4549  001BA0  6EBE               	movwf	4030,c	;volatile
  4550  001BA2  0012               	return		;funcret
  4551  001BA4                     __end_of_PWM1:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon2	equ	0xFF1
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           postdec2	equ	0xFDD
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           intcon2	equ	0xFF1
  4575                           postinc0	equ	0xFEE
  4576                           wreg	equ	0xFE8
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584                           	psect	rparam
  4585  0000                     tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon2	equ	0xFF1
  4592                           postinc0	equ	0xFEE
  4593                           wreg	equ	0xFE8
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8


Data Sizes:
    Strings     176
    Constant    42
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     53      67
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_13(CODE[15]), STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[14]), STR_8(CODE[16]), STR_7(CODE[8]), STR_6(CODE[15]), 
		 -> STR_5(CODE[8]), STR_4(CODE[16]), STR_3(CODE[19]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLogs
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _updateEEPROM->_timePassed
    _eepromWrite->_eepromRead
    _timePassed->___wmul
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _backlogTest->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   17077
                                             35 COMRAM    18    18      0
                               _PWM1
                            _PWM1off
                             ___wmul
                        _backlogTest
                        _displayLogs
                         _homescreen
                         _initialize
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _timePassed
                       _updateEEPROM
                      _updateStepper
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     504
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateStepper                                        4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _updateEEPROM                                         2     0      2     438
                                             12 COMRAM     2     0      2
                         _eepromRead
                        _eepromWrite
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     322
                                              3 COMRAM     4     3      1
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _timePassed                                           6     4      2    1227
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     466
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    3837
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    3867
                                             34 COMRAM     1     1      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    3747
                                             12 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _backlogTest                                          8     4      4    1333
                                              6 COMRAM     8     4      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1055
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   ___wmul
   _backlogTest
     ___wmul
   _displayLogs
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _timePassed
     ___wmul
   _updateEEPROM
     _eepromRead
     _eepromWrite
       _eepromRead (ARG)
     _timePassed (ARG)
       ___wmul
   _updateStepper
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     35      43       1       52.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      43      34        0.0%
DATA                 0      0      43       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 08 13:01:30 2017

            _updateStepper 1736                          _s 0041               ?_displayLogs 0001  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l103 1D7A                        l112 1D76  
                      l113 1D72                        l106 1D86                        l340 1C5A  
                      l334 1CBA                        l197 1D8E                        l394 11C8  
                      l839 1B06                        l849 1C22                        l786 1842  
             __CFG_CPB$OFF 000000                        u400 1CE0                        _PR2 000FCB  
                      u520 17A6                        _PEN 007E2A                        u425 1CA4  
                      u530 17C8               __CFG_CPD$OFF 000000                        _SEN 007E28  
                      u925 1A3C                        prod 000FF3                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000       __size_of_backlogTest 0078  
                     l2122 14DA                       l2054 193C                       l2046 18DE  
                     l1334 1CE2                       l2134 14FC                       l2126 14E6  
                     l1440 17B8                       l1432 176C                       l2144 1558  
                     l2162 15D8                       l1380 1D2C                       l2164 1608  
                     l2148 158C                       l2088 142C                       l1722 1D48  
                     l1802 10E6                       l1378 1D1E                       l1812 110A  
                     l1740 1800                       l1902 12F2                       l1830 119A  
                     l1806 10F6                       l1750 1834                       l1742 1804  
                     l1760 1AD4                       l1904 12FA                       l1912 1320  
                     l1808 1104                       l1762 1ADC                       l1914 1326  
                     l1922 13B0                       l1842 11F6                       l1826 1196  
                     l1818 1138                       l1738 17F4                       l1772 1AFC  
                     l1764 1AE0                       l1780 1BF8                       l1916 136A  
                     l1924 13C0                       l1908 130E                       l1860 1240  
                     l1782 1C00                       l1926 13C6                       l1862 1244  
                     l1846 1210                       l1784 1C04                       l1848 1214  
                     l1928 13CE                       l1890 12C6                       l1788 1C18  
                     l1884 129A                       l1876 1270                       l1878 1280  
                     l1982 197A                       l1896 12DC                       l1888 12BE  
                     l1992 199E                       l1986 1982                       _ADFM 007E07  
                     STR_1 107F                       STR_2 108F                       STR_3 102B  
                     STR_4 104F                       STR_5 10D3                       STR_6 10AE  
                     STR_7 10CB                       STR_8 106F                       STR_9 10BD  
                     u1210 1932                       u1165 1C36                       _LATA 000F89  
                     _LATB 000F8A                       u1407 1BDE                       _LATC 000F8B  
                     u1280 15A8                       _LATD 000F8C                       u1417 167C  
                     _LATE 000F8D                       u1427 16C2                       u1347 1422  
                     u1437 1708                       u1357 1464                       u1447 1A80  
                     u1367 161C                       u1457 1A8A                       u1377 163C  
                     u1467 1AAC                       u1387 1D24                       u1477 1AB6  
                     u1397 1BAA                       _RCEN 007E2B                       _PWM1 1B5A  
                     _RSEN 007E29            __end_of_PWM1off 1DCC                       _main 13E8  
                     _curr 003D                       _keys 1001                       _time 0036  
                     _prev 003F                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                main@standby 0032                       prodh 000FF4  
             main@canCheck 002C                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000             ?_updateStepper 0001              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ?_PWM1 0001           ?_I2C_Master_Init 000E  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    _EEADR 000FA9                      STR_10 106F                      STR_11 105F  
                    STR_12 106F                      STR_13 109F                      STR_14 103E  
          __end_of___lldiv 1854                      _T0CON 000FD5                      _T2CON 000FCA  
          __end_of___lwdiv 1B10            __end_of___lwmod 1C2C                      _TMR0L 000FD6  
                    _PORTB 000F81                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000            timePassed@start 0007              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 1DB8             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 1D32            __end_of_initLCD 1BEA  
           __CFG_EBTRB$OFF 000000            __end_of_dpowers 101C               main@sodaLoad 002A  
          __end_of_isdigit 1D50                      _putch 1DA0                      main@s 0026  
                    tablat 000FF5                      status 000FD8               main@soupLoad 0028  
           __CFG_PBADEN$ON 000000               __end_of_PWM1 1BA4            __initialization 1D50  
             __end_of_main 1670               __end_of_keys 1012    backlogTest@blockedStart 0007  
                   ??_PWM1 0003                     ??_main 0024              __activetblptr 000002  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002         ??_I2C_Master_Start 0002  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0004  
                ??_PWM1off 0001                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7                     ?_putch 0001                     _CVRCON 000FB5  
                   _OSCCON 000FD3                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9            ??_updateStepper 0001  
           __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038                     ___wmul 1CE8  
           __CFG_STVREN$ON 000000                  ??___lldiv 0009                  ??___lwdiv 0005  
                ??___lwmod 000C           __end_of_keycheck 1D8E                     clear_0 1D56  
          eepromWrite@data 0004           __end_of_currtime 102B                  ??_lcdInst 0003  
                   _printf 10DC       __size_of_displayLogs 00C6                     main@dc 0034  
                ??_readADC 0001                  ??_initLCD 0004                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8              ?_keyinterrupt 0001              main@startTime 002E  
               __accesstop 0080    __end_of__initialization 1D5C              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 1DAC         __size_of_lcdNibble 0056  
        eepromRead@address 0003             ??_keyinterrupt 0001                    ??_putch 0003  
   backlogTest@motorStatus 0009                    ?___wmul 0001                    _CCP1CON 000FBD  
         updateEEPROM@time 000D                    ?_printf 000D                 _eepromRead 1C9A  
            ??_backlogTest 000B                    _PWM1off 1DC2                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7                  ?_keycheck 0001  
        __end_of_lcdNibble 1ABE                    __Hparam 0000                    __Lparam 0000  
                  ___lldiv 17D2            __size_of___wmul 0026                    ___lwdiv 1ABE  
                  ___lwmod 1BEA                  _CMCONbits 000FB4                 _homescreen 19AC  
             __psmallconst 1000                    __pcinit 1D50                    __ramtop 1000  
               _initialize 1854                    _lcdInst 1DAC                    __ptext0 13E8  
                  __ptext1 1946                    __ptext2 1DB8                    __ptext3 1DCC  
                  __ptext4 1DD4                    __ptext5 1CC2                    __ptext6 1D8E  
                  __ptext7 1736                    __ptext8 1C64                    __ptext9 1C2C  
          __size_of_printf 030C                    _readADC 1D0E                    _initLCD 1BA4  
        __end_of_hexpowers 1024                    _dpowers 1012                    _isdigit 1D32  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008       end_of_initialization 1D5C        __end_of_backlogTest 1946  
               ??_keycheck 0001              __Lmediumconst 0000  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
     __end_of_keyinterrupt 1D7A                 _timePassed 1B10                    printf@c 0022  
                  printf@f 000D           I2C_Master_Init@c 000E           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                _PORTBbits 000F81                ?_eepromRead 0001                 _updateTime 1946  
            ?_updateEEPROM 000D                _CCP1CONbits 000FBD              ??_eepromWrite 0005  
              printf@width 0020                _CCP2CONbits 000FBA      __end_of_updateStepper 17D2  
            ??_displayLogs 0023                ?_homescreen 0001             __end_of___wmul 1D0E  
              ?_initialize 0001             __end_of_printf 13E8        start_initialization 1D50  
              updateTime@j 0004                _backlogTest 18CE             ??_updateEEPROM 000F  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002        __size_of_eepromRead 0028                ?_timePassed 0007  
      __end_of_eepromWrite 1C64                   ??___wmul 0005           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 0015        __end_of_displayLogs 1736                __pbssCOMRAM 0036  
              ?_updateTime 0001               _isdigit$1016 0002                   ?_PWM1off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0014        __size_of_initialize 007A  
         _I2C_Master_Start 1DD4           _I2C_Master_Write 1DB8          __size_of_keycheck 0014  
         ___lwdiv@dividend 0001          __CFG_CCP2MX$PORTC 000000                  _lcdNibble 1A68  
                 ?___lldiv 0001                   PWM1@duty 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008                   ?_lcdInst 0001                   ?_readADC 0001  
                 ?_initLCD 0001                __smallconst 1000                   ?_isdigit 0001  
             _keyinterrupt 1D66                  _hexpowers 101C           ___lwdiv@quotient 0005  
      __size_of_timePassed 004A             __size_of_putch 000C         eepromWrite@address 0007  
           ___wmul@product 0005                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite 1C2C                   _PIR2bits 000FA1  
         __CFG_WDTPS$32768 000000        __size_of_updateTime 0066                 ?_lcdNibble 0001  
     __end_of_updateEEPROM 1C9A                _displayLogs 1670                 _ADCON0bits 000FC2  
        ___wmul@multiplier 0001              lcdNibble@data 0002               ??_eepromRead 0001  
               printf@flag 001F              lcdNibble@temp 0001                 printf@prec 001C  
      I2C_Master_Read@temp 0003           __size_of_PWM1off 000A                 _EECON1bits 000FA6  
                 __Hrparam 0000                   __Lrparam 0000         __end_of_eepromRead 1CC2  
       __CFG_BOREN$SBORDIS 000000               ??_homescreen 0023           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             readADC@channel 0002  
             ??_initialize 0016           __size_of_lcdInst 000C            _I2C_Master_Init 1A0E  
         __size_of_readADC 0024            _I2C_Master_Read 1CC2           __size_of_initLCD 0046  
          _I2C_Master_Wait 1D8E            _I2C_Master_Stop 1DCC           __size_of_isdigit 001E  
             ?_backlogTest 0007            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 1B10                   __ptext11 1D0E                   __ptext20 1DA0  
                 __ptext12 1D66                   __ptext21 1D32                   __ptext13 1854  
                 __ptext30 1DC2                   __ptext22 1BEA                   __ptext14 1BA4  
                 __ptext31 1B5A                   __ptext23 1ABE                   __ptext15 1A0E  
                 __ptext24 1DAC                   __ptext16 17D2                   __ptext25 1A68  
                 __ptext17 19AC                   __ptext26 1D7A                   __ptext18 1670  
                 __ptext27 1C9A                   __ptext19 10DC                   __ptext28 18CE  
                 __ptext29 1CE8              __size_of_PWM1 004A         __end_of_homescreen 1A0E  
                 _keycheck 1D7A              __size_of_main 0288                   _currtime 1024  
                 _keypress 0043         __end_of_initialize 18CE               ??_timePassed 0009  
              ??_lcdNibble 0001                  printf@idx 0019                  printf@val 001D  
          main@prevUnblock 0030                  putch@data 0003   __end_of_I2C_Master_Start 1DDC  
              _OSCTUNEbits 000F9B   __end_of_I2C_Master_Write 1DC2               ??_updateTime 0004  
                 isdigit@c 0003     __size_of_updateStepper 009C         __end_of_timePassed 1B5A  
         ___lwmod@dividend 0008           ___lldiv@dividend 0001      __size_of_updateEEPROM 0036  
                 printf@ap 001A         __end_of_updateTime 19AC    __end_of_I2C_Master_Init 1A68  
  __end_of_I2C_Master_Read 1CE8    __end_of_I2C_Master_Wait 1DA0    __end_of_I2C_Master_Stop 1DD4  
              lcdInst@data 0003           ___lldiv@quotient 0009          I2C_Master_Write@d 0002  
          ___lwmod@divisor 000A            ___lwmod@counter 000C               _updateEEPROM 1C64  
             ?_eepromWrite 0004  
