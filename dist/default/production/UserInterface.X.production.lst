

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 12 03:48:58 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.41
    61                           ; Generated 25/01/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4620 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	mediumconst
    96  00FE2A                     __pmediumconst:
    97                           	opt stack 0
    98  00FE2A  00                 	db	0
    99  00FE2B                     _keys:
   100                           	opt stack 0
   101  00FE2B  31                 	db	49
   102  00FE2C  32                 	db	50
   103  00FE2D  33                 	db	51
   104  00FE2E  41                 	db	65
   105  00FE2F  34                 	db	52
   106  00FE30  35                 	db	53
   107  00FE31  36                 	db	54
   108  00FE32  42                 	db	66
   109  00FE33  37                 	db	55
   110  00FE34  38                 	db	56
   111  00FE35  39                 	db	57
   112  00FE36  43                 	db	67
   113  00FE37  2A                 	db	42
   114  00FE38  30                 	db	48
   115  00FE39  23                 	db	35
   116  00FE3A  44                 	db	68
   117  00FE3B  00                 	db	0
   118  00FE3C                     __end_of_keys:
   119                           	opt stack 0
   120  00FE3C                     _dpowers:
   121                           	opt stack 0
   122  00FE3C  0001               	dw	1
   123  00FE3E  000A               	dw	10
   124  00FE40  0064               	dw	100
   125  00FE42  03E8               	dw	1000
   126  00FE44  2710               	dw	10000
   127  00FE46                     __end_of_dpowers:
   128                           	opt stack 0
   129  00FE46                     _hexpowers:
   130                           	opt stack 0
   131  00FE46  0001               	dw	1
   132  00FE48  0010               	dw	16
   133  00FE4A  0100               	dw	256
   134  00FE4C  1000               	dw	4096
   135  00FE4E                     __end_of_hexpowers:
   136                           	opt stack 0
   137  00FE4E                     _currtime:
   138                           	opt stack 0
   139  00FE4E  30                 	db	48
   140  00FE4F  03                 	db	3
   141  00FE50  01                 	db	1
   142  00FE51  04                 	db	4
   143  00FE52  12                 	db	18
   144  00FE53  04                 	db	4
   145  00FE54  17                 	db	23
   146  00FE55                     __end_of_currtime:
   147                           	opt stack 0
   148  0000                     _ADRES	set	4035
   149  0000                     _TMR1L	set	4046
   150  0000                     _TMR1H	set	4047
   151  0000                     _T1CON	set	4045
   152  0000                     _TMR3L	set	4018
   153  0000                     _TMR3H	set	4019
   154  0000                     _T3CON	set	4017
   155  0000                     _ADCON0bits	set	4034
   156  0000                     _ADCON0	set	4034
   157  0000                     _PIR2bits	set	4001
   158  0000                     _EECON2	set	4007
   159  0000                     _EEDATA	set	4008
   160  0000                     _EECON1bits	set	4006
   161  0000                     _EEADR	set	4009
   162  0000                     _EEADRH	set	4010
   163  0000                     _PORTB	set	3969
   164  0000                     _PORTBbits	set	3969
   165  0000                     _CCP2CONbits	set	4026
   166  0000                     _CCP1CONbits	set	4029
   167  0000                     _SSPBUF	set	4041
   168  0000                     _SSPADD	set	4040
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPCON1	set	4038
   171  0000                     _SSPSTAT	set	4039
   172  0000                     _ADRESH	set	4036
   173  0000                     _LATAbits	set	3977
   174  0000                     _LATEbits	set	3981
   175  0000                     _LATCbits	set	3979
   176  0000                     _LATBbits	set	3978
   177  0000                     _LATDbits	set	3980
   178  0000                     _T0CONbits	set	4053
   179  0000                     _CMCONbits	set	4020
   180  0000                     _CVRCON	set	4021
   181  0000                     _ADCON2	set	4032
   182  0000                     _ADCON1	set	4033
   183  0000                     _LATE	set	3981
   184  0000                     _LATD	set	3980
   185  0000                     _LATC	set	3979
   186  0000                     _LATB	set	3978
   187  0000                     _LATA	set	3977
   188  0000                     _T2CON	set	4042
   189  0000                     _CCPR2L	set	4027
   190  0000                     _CCP2CON	set	4026
   191  0000                     _CCPR1L	set	4030
   192  0000                     _CCP1CON	set	4029
   193  0000                     _PR2	set	4043
   194  0000                     _TRISE	set	3990
   195  0000                     _TRISD	set	3989
   196  0000                     _TRISC	set	3988
   197  0000                     _TRISB	set	3987
   198  0000                     _TRISA	set	3986
   199  0000                     _OSCTUNEbits	set	3995
   200  0000                     _OSCCON	set	4051
   201  0000                     _TMR0L	set	4054
   202  0000                     _TMR0H	set	4055
   203  0000                     _T0CON	set	4053
   204  0000                     _INTCONbits	set	4082
   205  0000                     _TMR3ON	set	32136
   206  0000                     _ACKEN	set	32300
   207  0000                     _ACKDT	set	32301
   208  0000                     _RCEN	set	32299
   209  0000                     _PEN	set	32298
   210  0000                     _RSEN	set	32297
   211  0000                     _SEN	set	32296
   212  0000                     _TRISC4	set	31908
   213  0000                     _TRISC3	set	31907
   214  0000                     _PEIE	set	32662
   215  0000                     _TMR1IE	set	31976
   216  0000                     _TMR0IE	set	32661
   217  0000                     _ADFM	set	32263
   218  0000                     _nRBPU	set	32655
   219  0000                     _TMR1ON	set	32360
   220  0000                     _TMR1IF	set	31984
   221  0000                     _TMR0ON	set	32431
   222  0000                     _TMR0IF	set	32658
   223  00FE55                     STR_33:
   224  00FE55  53                 	db	83	;'S'
   225  00FE56  74                 	db	116	;'t'
   226  00FE57  61                 	db	97	;'a'
   227  00FE58  72                 	db	114	;'r'
   228  00FE59  74                 	db	116	;'t'
   229  00FE5A  3A                 	db	58	;':'
   230  00FE5B  20                 	db	32
   231  00FE5C  25                 	db	37
   232  00FE5D  30                 	db	48	;'0'
   233  00FE5E  32                 	db	50	;'2'
   234  00FE5F  78                 	db	120	;'x'
   235  00FE60  3A                 	db	58	;':'
   236  00FE61  25                 	db	37
   237  00FE62  30                 	db	48	;'0'
   238  00FE63  32                 	db	50	;'2'
   239  00FE64  78                 	db	120	;'x'
   240  00FE65  3A                 	db	58	;':'
   241  00FE66  25                 	db	37
   242  00FE67  30                 	db	48	;'0'
   243  00FE68  32                 	db	50	;'2'
   244  00FE69  78                 	db	120	;'x'
   245  00FE6A  00                 	db	0
   246  00FE6B                     STR_31:
   247  00FE6B  44                 	db	68	;'D'
   248  00FE6C  61                 	db	97	;'a'
   249  00FE6D  74                 	db	116	;'t'
   250  00FE6E  65                 	db	101	;'e'
   251  00FE6F  3A                 	db	58	;':'
   252  00FE70  20                 	db	32
   253  00FE71  25                 	db	37
   254  00FE72  30                 	db	48	;'0'
   255  00FE73  32                 	db	50	;'2'
   256  00FE74  78                 	db	120	;'x'
   257  00FE75  2F                 	db	47
   258  00FE76  25                 	db	37
   259  00FE77  30                 	db	48	;'0'
   260  00FE78  32                 	db	50	;'2'
   261  00FE79  78                 	db	120	;'x'
   262  00FE7A  2F                 	db	47
   263  00FE7B  25                 	db	37
   264  00FE7C  30                 	db	48	;'0'
   265  00FE7D  32                 	db	50	;'2'
   266  00FE7E  78                 	db	120	;'x'
   267  00FE7F  00                 	db	0
   268  00FE80                     STR_42:
   269  00FE80  30                 	db	48	;'0'
   270  00FE81  31                 	db	49	;'1'
   271  00FE82  32                 	db	50	;'2'
   272  00FE83  33                 	db	51	;'3'
   273  00FE84  34                 	db	52	;'4'
   274  00FE85  35                 	db	53	;'5'
   275  00FE86  36                 	db	54	;'6'
   276  00FE87  37                 	db	55	;'7'
   277  00FE88  38                 	db	56	;'8'
   278  00FE89  39                 	db	57	;'9'
   279  00FE8A  61                 	db	97	;'a'
   280  00FE8B  62                 	db	98	;'b'
   281  00FE8C  63                 	db	99	;'c'
   282  00FE8D  64                 	db	100	;'d'
   283  00FE8E  65                 	db	101	;'e'
   284  00FE8F  66                 	db	102	;'f'
   285  00FE90  00                 	db	0
   286  00FE91                     STR_37:
   287  00FE91  53                 	db	83	;'S'
   288  00FE92  6F                 	db	111	;'o'
   289  00FE93  64                 	db	100	;'d'
   290  00FE94  61                 	db	97	;'a'
   291  00FE95  20                 	db	32
   292  00FE96  77                 	db	119	;'w'
   293  00FE97  2F                 	db	47
   294  00FE98  6F                 	db	111	;'o'
   295  00FE99  20                 	db	32
   296  00FE9A  74                 	db	116	;'t'
   297  00FE9B  61                 	db	97	;'a'
   298  00FE9C  62                 	db	98	;'b'
   299  00FE9D  3A                 	db	58	;':'
   300  00FE9E  20                 	db	32
   301  00FE9F  25                 	db	37
   302  00FEA0  64                 	db	100	;'d'
   303  00FEA1  00                 	db	0
   304  00FEA2                     STR_41:
   305  00FEA2  53                 	db	83	;'S'
   306  00FEA3  6F                 	db	111	;'o'
   307  00FEA4  75                 	db	117	;'u'
   308  00FEA5  70                 	db	112	;'p'
   309  00FEA6  20                 	db	32
   310  00FEA7  77                 	db	119	;'w'
   311  00FEA8  2F                 	db	47
   312  00FEA9  6F                 	db	111	;'o'
   313  00FEAA  20                 	db	32
   314  00FEAB  6C                 	db	108	;'l'
   315  00FEAC  62                 	db	98	;'b'
   316  00FEAD  6C                 	db	108	;'l'
   317  00FEAE  3A                 	db	58	;':'
   318  00FEAF  20                 	db	32
   319  00FEB0  25                 	db	37
   320  00FEB1  64                 	db	100	;'d'
   321  00FEB2  00                 	db	0
   322  00FEB3                     STR_28:
   323  00FEB3  52                 	db	82	;'R'
   324  00FEB4  75                 	db	117	;'u'
   325  00FEB5  6E                 	db	110	;'n'
   326  00FEB6  23                 	db	35
   327  00FEB7  25                 	db	37
   328  00FEB8  64                 	db	100	;'d'
   329  00FEB9  20                 	db	32
   330  00FEBA  20                 	db	32
   331  00FEBB  20                 	db	32
   332  00FEBC  20                 	db	32
   333  00FEBD  41                 	db	65	;'A'
   334  00FEBE  3A                 	db	58	;':'
   335  00FEBF  4E                 	db	78	;'N'
   336  00FEC0  65                 	db	101	;'e'
   337  00FEC1  78                 	db	120	;'x'
   338  00FEC2  74                 	db	116	;'t'
   339  00FEC3  00                 	db	0
   340  00FEC4                     STR_4:
   341  00FEC4  74                 	db	116	;'t'
   342  00FEC5  65                 	db	101	;'e'
   343  00FEC6  73                 	db	115	;'s'
   344  00FEC7  74                 	db	116	;'t'
   345  00FEC8  69                 	db	105	;'i'
   346  00FEC9  6E                 	db	110	;'n'
   347  00FECA  67                 	db	103	;'g'
   348  00FECB  20                 	db	32
   349  00FECC  50                 	db	80	;'P'
   350  00FECD  57                 	db	87	;'W'
   351  00FECE  4D                 	db	77	;'M'
   352  00FECF  32                 	db	50	;'2'
   353  00FED0  20                 	db	32
   354  00FED1  43                 	db	67	;'C'
   355  00FED2  43                 	db	67	;'C'
   356  00FED3  57                 	db	87	;'W'
   357  00FED4  00                 	db	0
   358  00FED5                     STR_23:
   359  00FED5  56                 	db	86	;'V'
   360  00FED6  69                 	db	105	;'i'
   361  00FED7  65                 	db	101	;'e'
   362  00FED8  77                 	db	119	;'w'
   363  00FED9  20                 	db	32
   364  00FEDA  4C                 	db	76	;'L'
   365  00FEDB  6F                 	db	111	;'o'
   366  00FEDC  67                 	db	103	;'g'
   367  00FEDD  73                 	db	115	;'s'
   368  00FEDE  3F                 	db	63	;'?'
   369  00FEDF  20                 	db	32
   370  00FEE0  42                 	db	66	;'B'
   371  00FEE1  3A                 	db	58	;':'
   372  00FEE2  59                 	db	89	;'Y'
   373  00FEE3  65                 	db	101	;'e'
   374  00FEE4  73                 	db	115	;'s'
   375  00FEE5  00                 	db	0
   376  00FEE6                     STR_24:
   377  00FEE6  25                 	db	37
   378  00FEE7  30                 	db	48	;'0'
   379  00FEE8  32                 	db	50	;'2'
   380  00FEE9  78                 	db	120	;'x'
   381  00FEEA  2F                 	db	47
   382  00FEEB  25                 	db	37
   383  00FEEC  30                 	db	48	;'0'
   384  00FEED  32                 	db	50	;'2'
   385  00FEEE  78                 	db	120	;'x'
   386  00FEEF  2F                 	db	47
   387  00FEF0  25                 	db	37
   388  00FEF1  30                 	db	48	;'0'
   389  00FEF2  32                 	db	50	;'2'
   390  00FEF3  78                 	db	120	;'x'
   391  00FEF4  20                 	db	32
   392  00FEF5  00                 	db	0
   393  00FEF6                     STR_35:
   394  00FEF6  53                 	db	83	;'S'
   395  00FEF7  6F                 	db	111	;'o'
   396  00FEF8  64                 	db	100	;'d'
   397  00FEF9  61                 	db	97	;'a'
   398  00FEFA  20                 	db	32
   399  00FEFB  77                 	db	119	;'w'
   400  00FEFC  2F                 	db	47
   401  00FEFD  20                 	db	32
   402  00FEFE  74                 	db	116	;'t'
   403  00FEFF  61                 	db	97	;'a'
   404  00FF00  62                 	db	98	;'b'
   405  00FF01  3A                 	db	58	;':'
   406  00FF02  20                 	db	32
   407  00FF03  25                 	db	37
   408  00FF04  64                 	db	100	;'d'
   409  00FF05  00                 	db	0
   410  00FF06                     STR_39:
   411  00FF06  53                 	db	83	;'S'
   412  00FF07  6F                 	db	111	;'o'
   413  00FF08  75                 	db	117	;'u'
   414  00FF09  70                 	db	112	;'p'
   415  00FF0A  20                 	db	32
   416  00FF0B  77                 	db	119	;'w'
   417  00FF0C  2F                 	db	47
   418  00FF0D  20                 	db	32
   419  00FF0E  6C                 	db	108	;'l'
   420  00FF0F  62                 	db	98	;'b'
   421  00FF10  6C                 	db	108	;'l'
   422  00FF11  3A                 	db	58	;':'
   423  00FF12  20                 	db	32
   424  00FF13  25                 	db	37
   425  00FF14  64                 	db	100	;'d'
   426  00FF15  00                 	db	0
   427  00FF16                     STR_1:
   428  00FF16  53                 	db	83	;'S'
   429  00FF17  6F                 	db	111	;'o'
   430  00FF18  72                 	db	114	;'r'
   431  00FF19  74                 	db	116	;'t'
   432  00FF1A  69                 	db	105	;'i'
   433  00FF1B  6E                 	db	110	;'n'
   434  00FF1C  67                 	db	103	;'g'
   435  00FF1D  20                 	db	32
   436  00FF1E  63                 	db	99	;'c'
   437  00FF1F  61                 	db	97	;'a'
   438  00FF20  6E                 	db	110	;'n'
   439  00FF21  73                 	db	115	;'s'
   440  00FF22  2E                 	db	46
   441  00FF23  2E                 	db	46
   442  00FF24  2E                 	db	46
   443  00FF25  00                 	db	0
   444  00FF26                     STR_3:
   445  00FF26  74                 	db	116	;'t'
   446  00FF27  65                 	db	101	;'e'
   447  00FF28  73                 	db	115	;'s'
   448  00FF29  74                 	db	116	;'t'
   449  00FF2A  69                 	db	105	;'i'
   450  00FF2B  6E                 	db	110	;'n'
   451  00FF2C  67                 	db	103	;'g'
   452  00FF2D  20                 	db	32
   453  00FF2E  50                 	db	80	;'P'
   454  00FF2F  57                 	db	87	;'W'
   455  00FF30  4D                 	db	77	;'M'
   456  00FF31  32                 	db	50	;'2'
   457  00FF32  20                 	db	32
   458  00FF33  43                 	db	67	;'C'
   459  00FF34  57                 	db	87	;'W'
   460  00FF35  00                 	db	0
   461  00FF36                     STR_7:
   462  00FF36  74                 	db	116	;'t'
   463  00FF37  65                 	db	101	;'e'
   464  00FF38  73                 	db	115	;'s'
   465  00FF39  74                 	db	116	;'t'
   466  00FF3A  69                 	db	105	;'i'
   467  00FF3B  6E                 	db	110	;'n'
   468  00FF3C  67                 	db	103	;'g'
   469  00FF3D  20                 	db	32
   470  00FF3E  53                 	db	83	;'S'
   471  00FF3F  20                 	db	32
   472  00FF40  73                 	db	115	;'s'
   473  00FF41  68                 	db	104	;'h'
   474  00FF42  61                 	db	97	;'a'
   475  00FF43  6B                 	db	107	;'k'
   476  00FF44  65                 	db	101	;'e'
   477  00FF45  00                 	db	0
   478  00FF46                     STR_22:
   479  00FF46  53                 	db	83	;'S'
   480  00FF47  6F                 	db	111	;'o'
   481  00FF48  72                 	db	114	;'r'
   482  00FF49  74                 	db	116	;'t'
   483  00FF4A  20                 	db	32
   484  00FF4B  64                 	db	100	;'d'
   485  00FF4C  6F                 	db	111	;'o'
   486  00FF4D  6E                 	db	110	;'n'
   487  00FF4E  65                 	db	101	;'e'
   488  00FF4F  21                 	db	33
   489  00FF50  20                 	db	32
   490  00FF51  41                 	db	65	;'A'
   491  00FF52  3A                 	db	58	;':'
   492  00FF53  4E                 	db	78	;'N'
   493  00FF54  6F                 	db	111	;'o'
   494  00FF55  00                 	db	0
   495  00FF56                     STR_2:
   496  00FF56  41                 	db	65	;'A'
   497  00FF57  6E                 	db	110	;'n'
   498  00FF58  79                 	db	121	;'y'
   499  00FF59  20                 	db	32
   500  00FF5A  6B                 	db	107	;'k'
   501  00FF5B  65                 	db	101	;'e'
   502  00FF5C  79                 	db	121	;'y'
   503  00FF5D  20                 	db	32
   504  00FF5E  74                 	db	116	;'t'
   505  00FF5F  6F                 	db	111	;'o'
   506  00FF60  20                 	db	32
   507  00FF61  73                 	db	115	;'s'
   508  00FF62  74                 	db	116	;'t'
   509  00FF63  6F                 	db	111	;'o'
   510  00FF64  70                 	db	112	;'p'
   511  00FF65  00                 	db	0
   512  00FF66                     STR_8:
   513  00FF66  74                 	db	116	;'t'
   514  00FF67  65                 	db	101	;'e'
   515  00FF68  73                 	db	115	;'s'
   516  00FF69  74                 	db	116	;'t'
   517  00FF6A  69                 	db	105	;'i'
   518  00FF6B  6E                 	db	110	;'n'
   519  00FF6C  67                 	db	103	;'g'
   520  00FF6D  20                 	db	32
   521  00FF6E  53                 	db	83	;'S'
   522  00FF6F  31                 	db	49	;'1'
   523  00FF70  20                 	db	32
   524  00FF71  70                 	db	112	;'p'
   525  00FF72  69                 	db	105	;'i'
   526  00FF73  6E                 	db	110	;'n'
   527  00FF74  73                 	db	115	;'s'
   528  00FF75  00                 	db	0
   529  00FF76                     STR_10:
   530  00FF76  74                 	db	116	;'t'
   531  00FF77  65                 	db	101	;'e'
   532  00FF78  73                 	db	115	;'s'
   533  00FF79  74                 	db	116	;'t'
   534  00FF7A  69                 	db	105	;'i'
   535  00FF7B  6E                 	db	110	;'n'
   536  00FF7C  67                 	db	103	;'g'
   537  00FF7D  20                 	db	32
   538  00FF7E  53                 	db	83	;'S'
   539  00FF7F  32                 	db	50	;'2'
   540  00FF80  20                 	db	32
   541  00FF81  70                 	db	112	;'p'
   542  00FF82  69                 	db	105	;'i'
   543  00FF83  6E                 	db	110	;'n'
   544  00FF84  73                 	db	115	;'s'
   545  00FF85  00                 	db	0
   546  00FF86                     STR_11:
   547  00FF86  74                 	db	116	;'t'
   548  00FF87  65                 	db	101	;'e'
   549  00FF88  73                 	db	115	;'s'
   550  00FF89  74                 	db	116	;'t'
   551  00FF8A  69                 	db	105	;'i'
   552  00FF8B  6E                 	db	110	;'n'
   553  00FF8C  67                 	db	103	;'g'
   554  00FF8D  20                 	db	32
   555  00FF8E  53                 	db	83	;'S'
   556  00FF8F  33                 	db	51	;'3'
   557  00FF90  20                 	db	32
   558  00FF91  70                 	db	112	;'p'
   559  00FF92  69                 	db	105	;'i'
   560  00FF93  6E                 	db	110	;'n'
   561  00FF94  73                 	db	115	;'s'
   562  00FF95  00                 	db	0
   563  00FF96                     STR_13:
   564  00FF96  74                 	db	116	;'t'
   565  00FF97  65                 	db	101	;'e'
   566  00FF98  73                 	db	115	;'s'
   567  00FF99  74                 	db	116	;'t'
   568  00FF9A  69                 	db	105	;'i'
   569  00FF9B  6E                 	db	110	;'n'
   570  00FF9C  67                 	db	103	;'g'
   571  00FF9D  20                 	db	32
   572  00FF9E  50                 	db	80	;'P'
   573  00FF9F  57                 	db	87	;'W'
   574  00FFA0  4D                 	db	77	;'M'
   575  00FFA1  31                 	db	49	;'1'
   576  00FFA2  00                 	db	0
   577  00FFA3                     STR_29:
   578  00FFA3  52                 	db	82	;'R'
   579  00FFA4  75                 	db	117	;'u'
   580  00FFA5  6E                 	db	110	;'n'
   581  00FFA6  74                 	db	116	;'t'
   582  00FFA7  69                 	db	105	;'i'
   583  00FFA8  6D                 	db	109	;'m'
   584  00FFA9  65                 	db	101	;'e'
   585  00FFAA  3A                 	db	58	;':'
   586  00FFAB  20                 	db	32
   587  00FFAC  25                 	db	37
   588  00FFAD  64                 	db	100	;'d'
   589  00FFAE  00                 	db	0
   590  00FFAF                     STR_6:
   591  00FFAF  74                 	db	116	;'t'
   592  00FFB0  65                 	db	101	;'e'
   593  00FFB1  73                 	db	115	;'s'
   594  00FFB2  74                 	db	116	;'t'
   595  00FFB3  69                 	db	105	;'i'
   596  00FFB4  6E                 	db	110	;'n'
   597  00FFB5  67                 	db	103	;'g'
   598  00FFB6  20                 	db	32
   599  00FFB7  53                 	db	83	;'S'
   600  00FFB8  20                 	db	32
   601  00FFB9  62                 	db	98	;'b'
   602  00FFBA  00                 	db	0
   603  00FFBB                     STR_19:
   604  00FFBB  6C                 	db	108	;'l'
   605  00FFBC  61                 	db	97	;'a'
   606  00FFBD  62                 	db	98	;'b'
   607  00FFBE  65                 	db	101	;'e'
   608  00FFBF  6C                 	db	108	;'l'
   609  00FFC0  20                 	db	32
   610  00FFC1  20                 	db	32
   611  00FFC2  20                 	db	32
   612  00FFC3  74                 	db	116	;'t'
   613  00FFC4  61                 	db	97	;'a'
   614  00FFC5  62                 	db	98	;'b'
   615  00FFC6  00                 	db	0
   616  00FFC7                     STR_5:
   617  00FFC7  74                 	db	116	;'t'
   618  00FFC8  65                 	db	101	;'e'
   619  00FFC9  73                 	db	115	;'s'
   620  00FFCA  74                 	db	116	;'t'
   621  00FFCB  69                 	db	105	;'i'
   622  00FFCC  6E                 	db	110	;'n'
   623  00FFCD  67                 	db	103	;'g'
   624  00FFCE  20                 	db	32
   625  00FFCF  53                 	db	83	;'S'
   626  00FFD0  20                 	db	32
   627  00FFD1  66                 	db	102	;'f'
   628  00FFD2  00                 	db	0
   629  00FFD3                     STR_14:
   630  00FFD3  74                 	db	116	;'t'
   631  00FFD4  65                 	db	101	;'e'
   632  00FFD5  73                 	db	115	;'s'
   633  00FFD6  74                 	db	116	;'t'
   634  00FFD7  69                 	db	105	;'i'
   635  00FFD8  6E                 	db	110	;'n'
   636  00FFD9  67                 	db	103	;'g'
   637  00FFDA  20                 	db	32
   638  00FFDB  49                 	db	73	;'I'
   639  00FFDC  52                 	db	82	;'R'
   640  00FFDD  00                 	db	0
   641  00FFDE                     STR_20:
   642  00FFDE  25                 	db	37
   643  00FFDF  78                 	db	120	;'x'
   644  00FFE0  20                 	db	32
   645  00FFE1  20                 	db	32
   646  00FFE2  20                 	db	32
   647  00FFE3  20                 	db	32
   648  00FFE4  20                 	db	32
   649  00FFE5  20                 	db	32
   650  00FFE6  00                 	db	0
   651  00FFE7                     STR_27:
   652  00FFE7  20                 	db	32
   653  00FFE8  41                 	db	65	;'A'
   654  00FFE9  3A                 	db	58	;':'
   655  00FFEA  4C                 	db	76	;'L'
   656  00FFEB  6F                 	db	111	;'o'
   657  00FFEC  67                 	db	103	;'g'
   658  00FFED  73                 	db	115	;'s'
   659  00FFEE  00                 	db	0
   660  00FFEF                     STR_25:
   661  00FFEF  33                 	db	51	;'3'
   662  00FFF0  3A                 	db	58	;':'
   663  00FFF1  53                 	db	83	;'S'
   664  00FFF2  74                 	db	116	;'t'
   665  00FFF3  61                 	db	97	;'a'
   666  00FFF4  72                 	db	114	;'r'
   667  00FFF5  74                 	db	116	;'t'
   668  00FFF6  00                 	db	0
   669  00FFF7                     STR_15:
   670  00FFF7  25                 	db	37
   671  00FFF8  78                 	db	120	;'x'
   672  00FFF9  20                 	db	32
   673  00FFFA  00                 	db	0
   674  00FFFB                     STR_9:
   675  00FFFB  25                 	db	37
   676  00FFFC  78                 	db	120	;'x'
   677  00FFFD  00                 	db	0
   678  0000                     
   679                           ; #config settings
   680  00FFFE  00                 	db	0	; dummy byte at the end
   681  0000                     
   682                           	psect	cinit
   683  002AEA                     __pcinit:
   684                           	opt stack 0
   685  002AEA                     start_initialization:
   686                           	opt stack 0
   687  002AEA                     __initialization:
   688                           	opt stack 0
   689                           
   690                           ; Clear objects allocated to BANK0 (20 bytes)
   691  002AEA  EE00  F0AF         	lfsr	0,__pbssBANK0
   692  002AEE  0E14               	movlw	20
   693  002AF0                     clear_0:
   694  002AF0  6AEE               	clrf	postinc0,c
   695  002AF2  06E8               	decf	wreg,f,c
   696  002AF4  E1FD               	bnz	clear_0
   697                           
   698                           ; Clear objects allocated to COMRAM (34 bytes)
   699  002AF6  EE00  F03D         	lfsr	0,__pbssCOMRAM
   700  002AFA  0E22               	movlw	34
   701  002AFC                     clear_1:
   702  002AFC  6AEE               	clrf	postinc0,c
   703  002AFE  06E8               	decf	wreg,f,c
   704  002B00  E1FD               	bnz	clear_1
   705  002B02                     end_of_initialization:
   706                           	opt stack 0
   707  002B02                     __end_of__initialization:
   708                           	opt stack 0
   709  002B02  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   710  002B04  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   711  002B06  0E00               	movlw	low (__Lmediumconst shr (0+16))
   712  002B08  6EF8               	movwf	tblptru,c
   713  002B0A  0100               	movlb	0
   714  002B0C  EF09  F000         	goto	_main	;jump to C main() function
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           	psect	bssCOMRAM
   720  00003D                     __pbssCOMRAM:
   721                           	opt stack 0
   722  00003D                     _curr:
   723                           	opt stack 0
   724  00003D                     	ds	2
   725  00003F                     _prev:
   726                           	opt stack 0
   727  00003F                     	ds	2
   728  000041                     _t3:
   729                           	opt stack 0
   730  000041                     	ds	2
   731  000043                     _t2:
   732                           	opt stack 0
   733  000043                     	ds	2
   734  000045                     _t:
   735                           	opt stack 0
   736  000045                     	ds	2
   737  000047                     _s:
   738                           	opt stack 0
   739  000047                     	ds	2
   740  000049                     _sodaI:
   741                           	opt stack 0
   742  000049                     	ds	2
   743  00004B                     _soupI:
   744                           	opt stack 0
   745  00004B                     	ds	2
   746  00004D                     _soupAlign:
   747                           	opt stack 0
   748  00004D                     	ds	2
   749  00004F                     _sodaAlign:
   750                           	opt stack 0
   751  00004F                     	ds	2
   752  000051                     _tabState:
   753                           	opt stack 0
   754  000051                     	ds	2
   755  000053                     _sodaSteps:
   756                           	opt stack 0
   757  000053                     	ds	2
   758  000055                     _soupSteps:
   759                           	opt stack 0
   760  000055                     	ds	2
   761  000057                     _S3mode:
   762                           	opt stack 0
   763  000057                     	ds	2
   764  000059                     _S2mode:
   765                           	opt stack 0
   766  000059                     	ds	2
   767  00005B                     _S1mode:
   768                           	opt stack 0
   769  00005B                     	ds	2
   770  00005D                     _s2:
   771                           	opt stack 0
   772  00005D                     	ds	2
   773                           tblptru	equ	0xFF8
   774                           postinc0	equ	0xFEE
   775                           wreg	equ	0xFE8
   776                           
   777                           	psect	bssBANK0
   778  0000AF                     __pbssBANK0:
   779                           	opt stack 0
   780  0000AF                     _time:
   781                           	opt stack 0
   782  0000AF                     	ds	7
   783  0000B6                     _sodaCnt:
   784                           	opt stack 0
   785  0000B6                     	ds	2
   786  0000B8                     _soupCnt:
   787                           	opt stack 0
   788  0000B8                     	ds	2
   789  0000BA                     _labelState:
   790                           	opt stack 0
   791  0000BA                     	ds	2
   792  0000BC                     _seconds:
   793                           	opt stack 0
   794  0000BC                     	ds	2
   795  0000BE                     _s3:
   796                           	opt stack 0
   797  0000BE                     	ds	2
   798  0000C0                     _s1:
   799                           	opt stack 0
   800  0000C0                     	ds	2
   801  0000C2                     _keypress:
   802                           	opt stack 0
   803  0000C2                     	ds	1
   804                           tblptru	equ	0xFF8
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808                           	psect	cstackBANK0
   809  000080                     __pcstackBANK0:
   810                           	opt stack 0
   811  000080                     ??_addRun:
   812  000080                     printf@idx:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x0
   816  000080                     	ds	1
   817  000081                     printf@ap:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1
   821  000081                     	ds	2
   822  000083                     printf@prec:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x3
   826  000083                     	ds	1
   827  000084                     printf@val:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x4
   831  000084                     	ds	2
   832  000086                     printf@flag:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x6
   836  000086                     	ds	1
   837  000087                     printf@width:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x7
   841  000087                     	ds	2
   842  000089                     printf@c:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x9
   846  000089                     	ds	1
   847  00008A                     ??_displayLog:
   848                           
   849                           ; 1 bytes @ 0xA
   850  00008A                     	ds	3
   851  00008D                     displayLog@i:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0xD
   855  00008D                     	ds	2
   856  00008F                     displayLog@currRun:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0xF
   860  00008F                     	ds	2
   861  000091                     ??_main:
   862                           
   863                           ; 1 bytes @ 0x11
   864  000091                     	ds	2
   865  000093                     main@soupLoad:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x13
   869  000093                     	ds	2
   870  000095                     main@sodaLoad:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x15
   874  000095                     	ds	2
   875  000097                     main@s:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x17
   879  000097                     	ds	2
   880  000099                     main@prevSoupLoad:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x19
   884  000099                     	ds	2
   885  00009B                     main@prevSodaLoad:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x1B
   889  00009B                     	ds	2
   890  00009D                     main@soupL:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x1D
   894  00009D                     	ds	2
   895  00009F                     main@soupNL:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x1F
   899  00009F                     	ds	2
   900  0000A1                     main@sodaT:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x21
   904  0000A1                     	ds	2
   905  0000A3                     main@sodaNT:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x23
   909  0000A3                     	ds	2
   910  0000A5                     main@soupSort:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x25
   914  0000A5                     	ds	2
   915  0000A7                     main@sodaSort:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x27
   919  0000A7                     	ds	2
   920  0000A9                     main@prevSodaIR:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x29
   924  0000A9                     	ds	2
   925  0000AB                     main@prevSoupIR:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x2B
   929  0000AB                     	ds	2
   930  0000AD                     main@standby:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x2D
   934  0000AD                     	ds	2
   935                           tblptru	equ	0xFF8
   936                           postinc0	equ	0xFEE
   937                           wreg	equ	0xFE8
   938                           
   939                           	psect	cstackCOMRAM
   940  000001                     __pcstackCOMRAM:
   941                           	opt stack 0
   942  000001                     ?i2___wmul:
   943                           	opt stack 0
   944  000001                     updateS2@mode:
   945                           	opt stack 0
   946  000001                     i2updateS1@mode:
   947                           	opt stack 0
   948  000001                     i2updateS3@mode:
   949                           	opt stack 0
   950  000001                     i2___wmul@multiplier:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x0
   954  000001                     	ds	2
   955  000003                     ??_updateS2:
   956  000003                     ??i2_updateS1:
   957  000003                     ??i2_updateS3:
   958  000003                     i2___wmul@multiplicand:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x2
   962  000003                     	ds	2
   963  000005                     i2___wmul@product:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x4
   967  000005                     	ds	2
   968  000007                     ?___awdiv:
   969                           	opt stack 0
   970  000007                     ___awdiv@dividend:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x6
   974  000007                     	ds	2
   975  000009                     ___awdiv@divisor:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x8
   979  000009                     	ds	2
   980  00000B                     ___awdiv@counter:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0xA
   984  00000B                     	ds	1
   985  00000C                     ___awdiv@sign:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0xB
   989  00000C                     	ds	1
   990  00000D                     ___awdiv@quotient:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0xC
   994  00000D                     	ds	2
   995  00000F                     ??_handler:
   996                           
   997                           ; 1 bytes @ 0xE
   998  00000F                     	ds	16
   999  00001F                     _handler$1821:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x1E
  1003  00001F                     	ds	2
  1004  000021                     ??_readADC:
  1005  000021                     ??_isdigit:
  1006  000021                     ??_I2C_Master_Wait:
  1007  000021                     ??_eepromRead:
  1008  000021                     ?___wmul:
  1009                           	opt stack 0
  1010  000021                     ?___awmod:
  1011                           	opt stack 0
  1012  000021                     ?___lwdiv:
  1013                           	opt stack 0
  1014  000021                     ?___lldiv:
  1015                           	opt stack 0
  1016  000021                     lcdNibble@temp:
  1017                           	opt stack 0
  1018  000021                     eepromWrite@data:
  1019                           	opt stack 0
  1020  000021                     PWM1@duty:
  1021                           	opt stack 0
  1022  000021                     PWM2@duty:
  1023                           	opt stack 0
  1024  000021                     PWM2slow@duty:
  1025                           	opt stack 0
  1026  000021                     updateS1@mode:
  1027                           	opt stack 0
  1028  000021                     updateS3@mode:
  1029                           	opt stack 0
  1030  000021                     ___wmul@multiplier:
  1031                           	opt stack 0
  1032  000021                     ___awmod@dividend:
  1033                           	opt stack 0
  1034  000021                     ___lwdiv@dividend:
  1035                           	opt stack 0
  1036  000021                     ___lldiv@dividend:
  1037                           	opt stack 0
  1038                           
  1039                           ; 4 bytes @ 0x20
  1040  000021                     	ds	1
  1041  000022                     ??_eepromWrite:
  1042  000022                     lcdNibble@data:
  1043                           	opt stack 0
  1044  000022                     I2C_Master_Read@a:
  1045                           	opt stack 0
  1046  000022                     readADC@channel:
  1047                           	opt stack 0
  1048  000022                     _isdigit$1451:
  1049                           	opt stack 0
  1050  000022                     I2C_Master_Write@d:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x21
  1054  000022                     	ds	1
  1055  000023                     ??_updateS1:
  1056  000023                     ??_updateS3:
  1057  000023                     ??_PWM1:
  1058  000023                     ??_PWM2slow:
  1059  000023                     lcdInst@data:
  1060                           	opt stack 0
  1061  000023                     putch@data:
  1062                           	opt stack 0
  1063  000023                     I2C_Master_Read@temp:
  1064                           	opt stack 0
  1065  000023                     eepromRead@address:
  1066                           	opt stack 0
  1067  000023                     isdigit@c:
  1068                           	opt stack 0
  1069  000023                     PWM2@dir:
  1070                           	opt stack 0
  1071  000023                     ___wmul@multiplicand:
  1072                           	opt stack 0
  1073  000023                     ___awmod@divisor:
  1074                           	opt stack 0
  1075  000023                     ___lwdiv@divisor:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x22
  1079  000023                     	ds	1
  1080  000024                     ??_initLCD:
  1081  000024                     updateTime@j:
  1082                           	opt stack 0
  1083  000024                     eepromWrite@address:
  1084                           	opt stack 0
  1085  000024                     calibrateWheels@prev:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x23
  1089  000024                     	ds	1
  1090  000025                     ??_PWM2:
  1091  000025                     ___awmod@counter:
  1092                           	opt stack 0
  1093  000025                     ___lwdiv@counter:
  1094                           	opt stack 0
  1095  000025                     addRun@dur:
  1096                           	opt stack 0
  1097  000025                     ___wmul@product:
  1098                           	opt stack 0
  1099  000025                     ___lldiv@divisor:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0x24
  1103  000025                     	ds	1
  1104  000026                     ___awmod@sign:
  1105                           	opt stack 0
  1106  000026                     calibrateWheels@i:
  1107                           	opt stack 0
  1108  000026                     ___lwdiv@quotient:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x25
  1112  000026                     	ds	1
  1113  000027                     addRun@year:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x26
  1117  000027                     	ds	1
  1118  000028                     ?___lwmod:
  1119                           	opt stack 0
  1120  000028                     ___lwmod@dividend:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x27
  1124  000028                     	ds	1
  1125  000029                     addRun@month:
  1126                           	opt stack 0
  1127  000029                     ___lldiv@quotient:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x28
  1131  000029                     	ds	1
  1132  00002A                     ___lwmod@divisor:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x29
  1136  00002A                     	ds	1
  1137  00002B                     addRun@date:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x2A
  1141  00002B                     	ds	1
  1142  00002C                     ___lwmod@counter:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x2B
  1146  00002C                     	ds	1
  1147  00002D                     ?_printf:
  1148                           	opt stack 0
  1149  00002D                     ___lldiv@counter:
  1150                           	opt stack 0
  1151  00002D                     addRun@hours:
  1152                           	opt stack 0
  1153  00002D                     printf@f:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2C
  1157  00002D                     	ds	1
  1158  00002E                     I2C_Master_Init@c:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x2D
  1162  00002E                     	ds	1
  1163  00002F                     addRun@mins:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x2E
  1167  00002F                     	ds	2
  1168  000031                     addRun@secs:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x30
  1172  000031                     	ds	1
  1173  000032                     ??_I2C_Master_Init:
  1174                           
  1175                           ; 1 bytes @ 0x31
  1176  000032                     	ds	1
  1177  000033                     addRun@sodaT:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x32
  1181  000033                     	ds	2
  1182  000035                     ??_printf:
  1183  000035                     addRun@sodaNT:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x34
  1187  000035                     	ds	1
  1188  000036                     
  1189                           ; 1 bytes @ 0x35
  1190  000036                     	ds	1
  1191  000037                     addRun@soupL:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x36
  1195  000037                     	ds	2
  1196  000039                     addRun@soupNL:
  1197                           	opt stack 0
  1198  000039                     displayLog@run:
  1199                           	opt stack 0
  1200                           
  1201                           ; 2 bytes @ 0x38
  1202  000039                     	ds	2
  1203  00003B                     addRun@currRun:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x3A
  1207  00003B                     	ds	2
  1208                           tblptru	equ	0xFF8
  1209                           postinc0	equ	0xFEE
  1210                           wreg	equ	0xFE8
  1211                           
  1212 ;;
  1213 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1214 ;;
  1215 ;; *************** function _main *****************
  1216 ;; Defined at:
  1217 ;;		line 118 in file "main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  standby         2   45[BANK0 ] int 
  1222 ;;  prevSoupIR      2   43[BANK0 ] int 
  1223 ;;  prevSodaIR      2   41[BANK0 ] int 
  1224 ;;  sodaSort        2   39[BANK0 ] int 
  1225 ;;  soupSort        2   37[BANK0 ] int 
  1226 ;;  sodaNT          2   35[BANK0 ] int 
  1227 ;;  sodaT           2   33[BANK0 ] int 
  1228 ;;  soupNL          2   31[BANK0 ] int 
  1229 ;;  soupL           2   29[BANK0 ] int 
  1230 ;;  prevSodaLoad    2   27[BANK0 ] int 
  1231 ;;  prevSoupLoad    2   25[BANK0 ] int 
  1232 ;;  s               2   23[BANK0 ] int 
  1233 ;;  sodaLoad        2   21[BANK0 ] int 
  1234 ;;  soupLoad        2   19[BANK0 ] int 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  2  190[None  ] int 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1247 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1248 ;;Total ram usage:       30 bytes
  1249 ;; Hardware stack levels required when called:    6
  1250 ;; This function calls:
  1251 ;;		_PWM1
  1252 ;;		_PWM1off
  1253 ;;		_PWM2
  1254 ;;		_PWM2off
  1255 ;;		_PWM2slow
  1256 ;;		___awmod
  1257 ;;		_addRun
  1258 ;;		_calibrateWheels
  1259 ;;		_displayLog
  1260 ;;		_homescreen
  1261 ;;		_initialize
  1262 ;;		_keycheck
  1263 ;;		_keyinterrupt
  1264 ;;		_lcdInst
  1265 ;;		_printf
  1266 ;;		_readADC
  1267 ;;		_startTMR1
  1268 ;;		_updateS1
  1269 ;;		_updateS3
  1270 ;;		_updateTime
  1271 ;; This function is called by:
  1272 ;;		Startup code after reset
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text0
  1277  000012                     __ptext0:
  1278                           	opt stack 0
  1279  000012                     _main:
  1280                           	opt stack 25
  1281                           
  1282                           ;main.c: 119: LATA = 0;
  1283                           
  1284                           ;incstack = 0
  1285  000012  0E00               	movlw	0
  1286  000014  6E89               	movwf	3977,c	;volatile
  1287                           
  1288                           ;main.c: 121: initialize();
  1289  000016  EC1F  F013         	call	_initialize	;wreg free
  1290                           
  1291                           ;main.c: 122: int standby = 1;
  1292  00001A  0E00               	movlw	0
  1293  00001C  0100               	movlb	0	; () banked
  1294  00001E  6FAE               	movwf	(main@standby+1)& (0+255),b
  1295  000020  0E01               	movlw	1
  1296  000022  6FAD               	movwf	main@standby& (0+255),b
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 123: int s = 0;
  1300  000024  0E00               	movlw	0
  1301  000026  0100               	movlb	0	; () banked
  1302  000028  6F98               	movwf	(main@s+1)& (0+255),b
  1303  00002A  0E00               	movlw	0
  1304  00002C  6F97               	movwf	main@s& (0+255),b
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 124: int prevSodaIR;
  1308                           ;main.c: 125: int prevSoupIR;
  1309                           ;main.c: 127: int soupLoad = 1;
  1310  00002E  0E00               	movlw	0
  1311  000030  0100               	movlb	0	; () banked
  1312  000032  6F94               	movwf	(main@soupLoad+1)& (0+255),b
  1313  000034  0E01               	movlw	1
  1314  000036  6F93               	movwf	main@soupLoad& (0+255),b
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;main.c: 128: int sodaLoad = 1;
  1318  000038  0E00               	movlw	0
  1319  00003A  0100               	movlb	0	; () banked
  1320  00003C  6F96               	movwf	(main@sodaLoad+1)& (0+255),b
  1321  00003E  0E01               	movlw	1
  1322  000040  6F95               	movwf	main@sodaLoad& (0+255),b
  1323                           
  1324                           ; BSR set to: 0
  1325                           ;main.c: 131: int soupSort;
  1326                           ;main.c: 132: int prevSoupLoad;
  1327                           ;main.c: 133: int sodaSort;
  1328                           ;main.c: 134: int prevSodaLoad;
  1329                           ;main.c: 136: int soupL;
  1330                           ;main.c: 137: int soupNL ;
  1331                           ;main.c: 138: int sodaT;
  1332                           ;main.c: 139: int sodaNT;
  1333                           ;main.c: 141: T0CON = 0b00010111;
  1334  000042  0E17               	movlw	23
  1335  000044  6ED5               	movwf	4053,c	;volatile
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 142: TMR0H = 0b10000101;
  1339  000046  0E85               	movlw	133
  1340  000048  6ED7               	movwf	4055,c	;volatile
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 143: TMR0L = 0b10101110;
  1344  00004A  0EAE               	movlw	174
  1345  00004C  6ED6               	movwf	4054,c	;volatile
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 144: T0CONbits.TMR0ON = 1;
  1349  00004E  8ED5               	bsf	4053,7,c	;volatile
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;main.c: 145: startTMR1();
  1353  000050  EC01  F016         	call	_startTMR1	;wreg free
  1354                           
  1355                           ;main.c: 148: _delay((unsigned long)((10)*(32000000/4000.0)));
  1356  000054  0E68               	movlw	104
  1357  000056  0100               	movlb	0	; () banked
  1358  000058  6F91               	movwf	??_main& (0+255),b
  1359  00005A  0EE4               	movlw	228
  1360  00005C                     u7887:
  1361  00005C  2EE8               	decfsz	wreg,f,c
  1362  00005E  D7FE               	bra	u7887
  1363  000060  2F91               	decfsz	??_main& (0+255),f,b
  1364  000062  D7FC               	bra	u7887
  1365  000064  F000               	nop	
  1366  000066                     l5655:
  1367                           
  1368                           ;main.c: 151: if (standby == 1){
  1369  000066  0100               	movlb	0	; () banked
  1370  000068  05AD               	decf	main@standby& (0+255),w,b
  1371  00006A  0100               	movlb	0	; () banked
  1372  00006C  11AE               	iorwf	(main@standby+1)& (0+255),w,b
  1373  00006E  A4D8               	btfss	status,2,c
  1374  000070  D0F2               	goto	l5717
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 152: keypress = (0);
  1378  000072  0E00               	movlw	0
  1379  000074  0100               	movlb	0	; () banked
  1380  000076  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1381                           
  1382                           ;main.c: 153: while(keypress == (0)){
  1383  000078  D006               	goto	l5665
  1384  00007A                     l5659:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 154: updateTime();
  1388  00007A  ECCF  F013         	call	_updateTime	;wreg free
  1389                           
  1390                           ;main.c: 155: homescreen();
  1391  00007E  EC03  F014         	call	_homescreen	;wreg free
  1392                           
  1393                           ;main.c: 156: keyinterrupt();
  1394  000082  ECE2  F015         	call	_keyinterrupt	;wreg free
  1395  000086                     l5665:
  1396  000086  0100               	movlb	0	; () banked
  1397  000088  51C2               	movf	_keypress& (0+255),w,b	;volatile
  1398  00008A  B4D8               	btfsc	status,2,c
  1399  00008C  D7F6               	goto	l5659
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 157: }
  1403                           ;main.c: 159: if(keypress == 2){
  1404                           
  1405                           ; BSR set to: 0
  1406  00008E  0E02               	movlw	2
  1407  000090  0100               	movlb	0	; () banked
  1408  000092  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1409  000094  A4D8               	btfss	status,2,c
  1410  000096  D0B1               	goto	l5709
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 161: standby = 0;
  1414  000098  0E00               	movlw	0
  1415  00009A  0100               	movlb	0	; () banked
  1416  00009C  6FAE               	movwf	(main@standby+1)& (0+255),b
  1417  00009E  0E00               	movlw	0
  1418  0000A0  6FAD               	movwf	main@standby& (0+255),b
  1419                           
  1420                           ;main.c: 162: seconds = 0;
  1421  0000A2  0E00               	movlw	0
  1422  0000A4  0100               	movlb	0	; () banked
  1423  0000A6  6FBD               	movwf	(_seconds+1)& (0+255),b
  1424  0000A8  0E00               	movlw	0
  1425  0000AA  6FBC               	movwf	_seconds& (0+255),b
  1426                           
  1427                           ;main.c: 163: labelState = 0;
  1428  0000AC  0E00               	movlw	0
  1429  0000AE  0100               	movlb	0	; () banked
  1430  0000B0  6FBB               	movwf	(_labelState+1)& (0+255),b
  1431  0000B2  0E00               	movlw	0
  1432  0000B4  6FBA               	movwf	_labelState& (0+255),b
  1433                           
  1434                           ;main.c: 164: soupSort = 0;
  1435  0000B6  0E00               	movlw	0
  1436  0000B8  0100               	movlb	0	; () banked
  1437  0000BA  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  1438  0000BC  0E00               	movlw	0
  1439  0000BE  6FA5               	movwf	main@soupSort& (0+255),b
  1440                           
  1441                           ;main.c: 165: tabState = 0;
  1442  0000C0  0E00               	movlw	0
  1443  0000C2  6E52               	movwf	_tabState+1,c
  1444  0000C4  0E00               	movlw	0
  1445  0000C6  6E51               	movwf	_tabState,c
  1446                           
  1447                           ;main.c: 166: sodaSort = 0;
  1448  0000C8  0E00               	movlw	0
  1449  0000CA  0100               	movlb	0	; () banked
  1450  0000CC  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  1451  0000CE  0E00               	movlw	0
  1452  0000D0  6FA7               	movwf	main@sodaSort& (0+255),b
  1453                           
  1454                           ;main.c: 167: soupSteps = 0;
  1455  0000D2  0E00               	movlw	0
  1456  0000D4  6E56               	movwf	_soupSteps+1,c
  1457  0000D6  0E00               	movlw	0
  1458  0000D8  6E55               	movwf	_soupSteps,c
  1459                           
  1460                           ;main.c: 168: sodaSteps = 0;
  1461  0000DA  0E00               	movlw	0
  1462  0000DC  6E54               	movwf	_sodaSteps+1,c
  1463  0000DE  0E00               	movlw	0
  1464  0000E0  6E53               	movwf	_sodaSteps,c
  1465                           
  1466                           ;main.c: 169: soupL = 0;
  1467  0000E2  0E00               	movlw	0
  1468  0000E4  0100               	movlb	0	; () banked
  1469  0000E6  6F9E               	movwf	(main@soupL+1)& (0+255),b
  1470  0000E8  0E00               	movlw	0
  1471  0000EA  6F9D               	movwf	main@soupL& (0+255),b
  1472                           
  1473                           ;main.c: 170: soupNL = 0;
  1474  0000EC  0E00               	movlw	0
  1475  0000EE  0100               	movlb	0	; () banked
  1476  0000F0  6FA0               	movwf	(main@soupNL+1)& (0+255),b
  1477  0000F2  0E00               	movlw	0
  1478  0000F4  6F9F               	movwf	main@soupNL& (0+255),b
  1479                           
  1480                           ;main.c: 171: sodaT = 0;
  1481  0000F6  0E00               	movlw	0
  1482  0000F8  0100               	movlb	0	; () banked
  1483  0000FA  6FA2               	movwf	(main@sodaT+1)& (0+255),b
  1484  0000FC  0E00               	movlw	0
  1485  0000FE  6FA1               	movwf	main@sodaT& (0+255),b
  1486                           
  1487                           ;main.c: 172: sodaNT = 0;
  1488  000100  0E00               	movlw	0
  1489  000102  0100               	movlb	0	; () banked
  1490  000104  6FA4               	movwf	(main@sodaNT+1)& (0+255),b
  1491  000106  0E00               	movlw	0
  1492  000108  6FA3               	movwf	main@sodaNT& (0+255),b
  1493                           
  1494                           ;main.c: 173: prevSoupIR = 0;
  1495  00010A  0E00               	movlw	0
  1496  00010C  0100               	movlb	0	; () banked
  1497  00010E  6FAC               	movwf	(main@prevSoupIR+1)& (0+255),b
  1498  000110  0E00               	movlw	0
  1499  000112  6FAB               	movwf	main@prevSoupIR& (0+255),b
  1500                           
  1501                           ;main.c: 174: prevSodaIR = 0;
  1502  000114  0E00               	movlw	0
  1503  000116  0100               	movlb	0	; () banked
  1504  000118  6FAA               	movwf	(main@prevSodaIR+1)& (0+255),b
  1505  00011A  0E00               	movlw	0
  1506  00011C  6FA9               	movwf	main@prevSodaIR& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 176: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1510  00011E  0E01               	movlw	1
  1511  000120  EC17  F016         	call	_lcdInst
  1512  000124  0E34               	movlw	52
  1513  000126  0100               	movlb	0	; () banked
  1514  000128  6F91               	movwf	??_main& (0+255),b
  1515  00012A  0EF1               	movlw	241
  1516  00012C                     u7897:
  1517  00012C  2EE8               	decfsz	wreg,f,c
  1518  00012E  D7FE               	bra	u7897
  1519  000130  2F91               	decfsz	??_main& (0+255),f,b
  1520  000132  D7FC               	bra	u7897
  1521  000134  D000               	nop2	
  1522                           
  1523                           ;main.c: 177: printf("Sorting cans...");
  1524  000136  0E16               	movlw	low STR_1
  1525  000138  6E2D               	movwf	printf@f,c
  1526  00013A  0EFF               	movlw	high STR_1
  1527  00013C  6E2E               	movwf	printf@f+1,c
  1528  00013E  EC36  F007         	call	_printf	;wreg free
  1529                           
  1530                           ;main.c: 178: lcdInst(0b11000000);;
  1531  000142  0EC0               	movlw	192
  1532  000144  EC17  F016         	call	_lcdInst
  1533                           
  1534                           ;main.c: 179: printf("Any key to stop");
  1535  000148  0E56               	movlw	low STR_2
  1536  00014A  6E2D               	movwf	printf@f,c
  1537  00014C  0EFF               	movlw	high STR_2
  1538  00014E  6E2E               	movwf	printf@f+1,c
  1539  000150  EC36  F007         	call	_printf	;wreg free
  1540                           
  1541                           ;main.c: 181: while(soupSteps < 12){
  1542  000154  D004               	goto	l5683
  1543  000156                     l5681:
  1544                           
  1545                           ;main.c: 182: S2mode = 2;
  1546  000156  0E00               	movlw	0
  1547  000158  6E5A               	movwf	_S2mode+1,c
  1548  00015A  0E02               	movlw	2
  1549  00015C  6E59               	movwf	_S2mode,c
  1550  00015E                     l5683:
  1551  00015E  BE56               	btfsc	_soupSteps+1,7,c
  1552  000160  D7FA               	goto	l5681
  1553  000162  5056               	movf	_soupSteps+1,w,c
  1554  000164  E104               	bnz	l5685
  1555  000166  0E0C               	movlw	12
  1556  000168  5C55               	subwf	_soupSteps,w,c
  1557  00016A  A0D8               	btfss	status,0,c
  1558  00016C  D7F4               	goto	l5681
  1559  00016E                     l5685:
  1560                           
  1561                           ;main.c: 183: }
  1562                           ;main.c: 184: S2mode = 4;
  1563  00016E  0E00               	movlw	0
  1564  000170  6E5A               	movwf	_S2mode+1,c
  1565  000172  0E04               	movlw	4
  1566  000174  6E59               	movwf	_S2mode,c
  1567                           
  1568                           ;main.c: 185: calibrateWheels();
  1569  000176  EC81  F010         	call	_calibrateWheels	;wreg free
  1570                           
  1571                           ;main.c: 186: if(s1 == 2 || s1 == 3){S1mode = 3;}
  1572  00017A  0E02               	movlw	2
  1573  00017C  0100               	movlb	0	; () banked
  1574  00017E  19C0               	xorwf	_s1& (0+255),w,b
  1575  000180  0100               	movlb	0	; () banked
  1576  000182  11C1               	iorwf	(_s1+1)& (0+255),w,b
  1577  000184  B4D8               	btfsc	status,2,c
  1578  000186  D007               	goto	l5693
  1579                           
  1580                           ; BSR set to: 0
  1581  000188  0E03               	movlw	3
  1582  00018A  0100               	movlb	0	; () banked
  1583  00018C  19C0               	xorwf	_s1& (0+255),w,b
  1584  00018E  0100               	movlb	0	; () banked
  1585  000190  11C1               	iorwf	(_s1+1)& (0+255),w,b
  1586  000192  A4D8               	btfss	status,2,c
  1587  000194  D004               	goto	l5695
  1588  000196                     l5693:
  1589                           
  1590                           ; BSR set to: 0
  1591  000196  0E00               	movlw	0
  1592  000198  6E5C               	movwf	_S1mode+1,c
  1593  00019A  0E03               	movlw	3
  1594  00019C  D003               	goto	L1
  1595  00019E                     l5695:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;main.c: 187: else{S1mode = 5;}
  1599  00019E  0E00               	movlw	0
  1600  0001A0  6E5C               	movwf	_S1mode+1,c
  1601  0001A2  0E05               	movlw	5
  1602  0001A4                     L1:
  1603  0001A4  6E5B               	movwf	_S1mode,c
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 188: if(s3 == 2 || s3 == 3){S3mode = 3;}
  1607                           
  1608                           ; BSR set to: 0
  1609  0001A6  0E02               	movlw	2
  1610  0001A8  0100               	movlb	0	; () banked
  1611  0001AA  19BE               	xorwf	_s3& (0+255),w,b
  1612  0001AC  0100               	movlb	0	; () banked
  1613  0001AE  11BF               	iorwf	(_s3+1)& (0+255),w,b
  1614  0001B0  B4D8               	btfsc	status,2,c
  1615  0001B2  D007               	goto	l5701
  1616                           
  1617                           ; BSR set to: 0
  1618  0001B4  0E03               	movlw	3
  1619  0001B6  0100               	movlb	0	; () banked
  1620  0001B8  19BE               	xorwf	_s3& (0+255),w,b
  1621  0001BA  0100               	movlb	0	; () banked
  1622  0001BC  11BF               	iorwf	(_s3+1)& (0+255),w,b
  1623  0001BE  A4D8               	btfss	status,2,c
  1624  0001C0  D004               	goto	l5703
  1625  0001C2                     l5701:
  1626                           
  1627                           ; BSR set to: 0
  1628  0001C2  0E00               	movlw	0
  1629  0001C4  6E58               	movwf	_S3mode+1,c
  1630  0001C6  0E03               	movlw	3
  1631  0001C8  D003               	goto	L2
  1632  0001CA                     l5703:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 189: else{S3mode = 5;}
  1636  0001CA  0E00               	movlw	0
  1637  0001CC  6E58               	movwf	_S3mode+1,c
  1638  0001CE  0E05               	movlw	5
  1639  0001D0                     L2:
  1640  0001D0  6E57               	movwf	_S3mode,c
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 190: PWM2(900, 1);
  1644                           
  1645                           ; BSR set to: 0
  1646  0001D2  0E03               	movlw	3
  1647  0001D4  6E22               	movwf	PWM2@duty+1,c
  1648  0001D6  0E84               	movlw	132
  1649  0001D8  6E21               	movwf	PWM2@duty,c
  1650  0001DA  0E00               	movlw	0
  1651  0001DC  6E24               	movwf	PWM2@dir+1,c
  1652  0001DE  0E01               	movlw	1
  1653  0001E0  6E23               	movwf	PWM2@dir,c
  1654  0001E2  EC5B  F013         	call	_PWM2	;wreg free
  1655                           
  1656                           ;main.c: 191: PWM1(400);
  1657  0001E6  0E01               	movlw	1
  1658  0001E8  6E22               	movwf	PWM1@duty+1,c
  1659  0001EA  0E90               	movlw	144
  1660  0001EC  6E21               	movwf	PWM1@duty,c
  1661  0001EE  ECDC  F014         	call	_PWM1	;wreg free
  1662                           
  1663                           ;main.c: 193: keypress = (0);
  1664  0001F2  0E00               	movlw	0
  1665  0001F4  0100               	movlb	0	; () banked
  1666  0001F6  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1667                           
  1668                           ;main.c: 195: }
  1669  0001F8  D736               	goto	l5655
  1670  0001FA                     l5709:
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 196: else if(keypress == 3){
  1674  0001FA  0E03               	movlw	3
  1675  0001FC  0100               	movlb	0	; () banked
  1676  0001FE  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1677  000200  A4D8               	btfss	status,2,c
  1678  000202  D019               	goto	l5713
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 197: displayLog(1);
  1682  000204  0E00               	movlw	0
  1683  000206  6E3A               	movwf	displayLog@run+1,c
  1684  000208  0E01               	movlw	1
  1685  00020A  6E39               	movwf	displayLog@run,c
  1686  00020C  ECFA  F008         	call	_displayLog	;wreg free
  1687                           
  1688                           ;main.c: 198: displayLog(2);
  1689  000210  0E00               	movlw	0
  1690  000212  6E3A               	movwf	displayLog@run+1,c
  1691  000214  0E02               	movlw	2
  1692  000216  6E39               	movwf	displayLog@run,c
  1693  000218  ECFA  F008         	call	_displayLog	;wreg free
  1694                           
  1695                           ;main.c: 199: displayLog(3);
  1696  00021C  0E00               	movlw	0
  1697  00021E  6E3A               	movwf	displayLog@run+1,c
  1698  000220  0E03               	movlw	3
  1699  000222  6E39               	movwf	displayLog@run,c
  1700  000224  ECFA  F008         	call	_displayLog	;wreg free
  1701                           
  1702                           ;main.c: 200: displayLog(4);
  1703  000228  0E00               	movlw	0
  1704  00022A  6E3A               	movwf	displayLog@run+1,c
  1705  00022C  0E04               	movlw	4
  1706  00022E  6E39               	movwf	displayLog@run,c
  1707  000230  ECFA  F008         	call	_displayLog	;wreg free
  1708                           
  1709                           ;main.c: 201: }
  1710  000234  D718               	goto	l5655
  1711  000236                     l5713:
  1712                           
  1713                           ;main.c: 202: else if(keypress == 15 ) {
  1714  000236  0E0F               	movlw	15
  1715  000238  0100               	movlb	0	; () banked
  1716  00023A  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  1717  00023C  A4D8               	btfss	status,2,c
  1718  00023E  D713               	goto	l5655
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 203: standby = 2;
  1722  000240  0E00               	movlw	0
  1723  000242  0100               	movlb	0	; () banked
  1724  000244  6FAE               	movwf	(main@standby+1)& (0+255),b
  1725  000246  0E02               	movlw	2
  1726  000248  6FAD               	movwf	main@standby& (0+255),b
  1727                           
  1728                           ;main.c: 204: s = 1;
  1729  00024A  0E00               	movlw	0
  1730  00024C  0100               	movlb	0	; () banked
  1731  00024E  6F98               	movwf	(main@s+1)& (0+255),b
  1732  000250  0E01               	movlw	1
  1733  000252  6F97               	movwf	main@s& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 205: }
  1737                           ;main.c: 207: }
  1738                           
  1739                           ; BSR set to: 0
  1740                           
  1741                           ; BSR set to: 0
  1742  000254  D708               	goto	l5655
  1743  000256                     l5717:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 208: else if(standby == 2){
  1747  000256  0E02               	movlw	2
  1748  000258  0100               	movlb	0	; () banked
  1749  00025A  19AD               	xorwf	main@standby& (0+255),w,b
  1750  00025C  0100               	movlb	0	; () banked
  1751  00025E  11AE               	iorwf	(main@standby+1)& (0+255),w,b
  1752  000260  A4D8               	btfss	status,2,c
  1753  000262  D25B               	goto	l5955
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 211: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1757  000264  0E01               	movlw	1
  1758  000266  EC17  F016         	call	_lcdInst
  1759  00026A  0E34               	movlw	52
  1760  00026C  0100               	movlb	0	; () banked
  1761  00026E  6F91               	movwf	??_main& (0+255),b
  1762  000270  0EF1               	movlw	241
  1763  000272                     u7907:
  1764  000272  2EE8               	decfsz	wreg,f,c
  1765  000274  D7FE               	bra	u7907
  1766  000276  2F91               	decfsz	??_main& (0+255),f,b
  1767  000278  D7FC               	bra	u7907
  1768  00027A  D000               	nop2	
  1769                           
  1770                           ;main.c: 212: printf("testing PWM2 CW");
  1771  00027C  0E26               	movlw	low STR_3
  1772  00027E  6E2D               	movwf	printf@f,c
  1773  000280  0EFF               	movlw	high STR_3
  1774  000282  6E2E               	movwf	printf@f+1,c
  1775  000284  EC36  F007         	call	_printf	;wreg free
  1776                           
  1777                           ;main.c: 213: PWM2(900, 1);
  1778  000288  0E03               	movlw	3
  1779  00028A  6E22               	movwf	PWM2@duty+1,c
  1780  00028C  0E84               	movlw	132
  1781  00028E  6E21               	movwf	PWM2@duty,c
  1782  000290  0E00               	movlw	0
  1783  000292  6E24               	movwf	PWM2@dir+1,c
  1784  000294  0E01               	movlw	1
  1785  000296  6E23               	movwf	PWM2@dir,c
  1786  000298  EC5B  F013         	call	_PWM2	;wreg free
  1787                           
  1788                           ;main.c: 214: keycheck();
  1789  00029C  ECED  F015         	call	_keycheck	;wreg free
  1790                           
  1791                           ;main.c: 216: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1792  0002A0  0E01               	movlw	1
  1793  0002A2  EC17  F016         	call	_lcdInst
  1794  0002A6  0E34               	movlw	52
  1795  0002A8  0100               	movlb	0	; () banked
  1796  0002AA  6F91               	movwf	??_main& (0+255),b
  1797  0002AC  0EF1               	movlw	241
  1798  0002AE                     u7917:
  1799  0002AE  2EE8               	decfsz	wreg,f,c
  1800  0002B0  D7FE               	bra	u7917
  1801  0002B2  2F91               	decfsz	??_main& (0+255),f,b
  1802  0002B4  D7FC               	bra	u7917
  1803  0002B6  D000               	nop2	
  1804                           
  1805                           ;main.c: 217: printf("testing PWM2 CCW");
  1806  0002B8  0EC4               	movlw	low STR_4
  1807  0002BA  6E2D               	movwf	printf@f,c
  1808  0002BC  0EFE               	movlw	high STR_4
  1809  0002BE  6E2E               	movwf	printf@f+1,c
  1810  0002C0  EC36  F007         	call	_printf	;wreg free
  1811                           
  1812                           ;main.c: 218: PWM2(900, 2);
  1813  0002C4  0E03               	movlw	3
  1814  0002C6  6E22               	movwf	PWM2@duty+1,c
  1815  0002C8  0E84               	movlw	132
  1816  0002CA  6E21               	movwf	PWM2@duty,c
  1817  0002CC  0E00               	movlw	0
  1818  0002CE  6E24               	movwf	PWM2@dir+1,c
  1819  0002D0  0E02               	movlw	2
  1820  0002D2  6E23               	movwf	PWM2@dir,c
  1821  0002D4  EC5B  F013         	call	_PWM2	;wreg free
  1822                           
  1823                           ;main.c: 219: keycheck();
  1824  0002D8  ECED  F015         	call	_keycheck	;wreg free
  1825                           
  1826                           ;main.c: 221: PWM2off();
  1827  0002DC  EC22  F016         	call	_PWM2off	;wreg free
  1828                           
  1829                           ;main.c: 223: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1830  0002E0  0E01               	movlw	1
  1831  0002E2  EC17  F016         	call	_lcdInst
  1832  0002E6  0E34               	movlw	52
  1833  0002E8  0100               	movlb	0	; () banked
  1834  0002EA  6F91               	movwf	??_main& (0+255),b
  1835  0002EC  0EF1               	movlw	241
  1836  0002EE                     u7927:
  1837  0002EE  2EE8               	decfsz	wreg,f,c
  1838  0002F0  D7FE               	bra	u7927
  1839  0002F2  2F91               	decfsz	??_main& (0+255),f,b
  1840  0002F4  D7FC               	bra	u7927
  1841  0002F6  D000               	nop2	
  1842                           
  1843                           ;main.c: 224: printf("testing S f");
  1844  0002F8  0EC7               	movlw	low STR_5
  1845  0002FA  6E2D               	movwf	printf@f,c
  1846  0002FC  0EFF               	movlw	high STR_5
  1847  0002FE  6E2E               	movwf	printf@f+1,c
  1848  000300  EC36  F007         	call	_printf	;wreg free
  1849                           
  1850                           ;main.c: 225: S1mode = 1;
  1851  000304  0E00               	movlw	0
  1852  000306  6E5C               	movwf	_S1mode+1,c
  1853  000308  0E01               	movlw	1
  1854  00030A  6E5B               	movwf	_S1mode,c
  1855                           
  1856                           ;main.c: 226: S2mode = 1;
  1857  00030C  0E00               	movlw	0
  1858  00030E  6E5A               	movwf	_S2mode+1,c
  1859  000310  0E01               	movlw	1
  1860  000312  6E59               	movwf	_S2mode,c
  1861                           
  1862                           ;main.c: 227: S3mode = 1;
  1863  000314  0E00               	movlw	0
  1864  000316  6E58               	movwf	_S3mode+1,c
  1865  000318  0E01               	movlw	1
  1866  00031A  6E57               	movwf	_S3mode,c
  1867                           
  1868                           ;main.c: 228: keycheck();
  1869  00031C  ECED  F015         	call	_keycheck	;wreg free
  1870                           
  1871                           ;main.c: 230: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1872  000320  0E01               	movlw	1
  1873  000322  EC17  F016         	call	_lcdInst
  1874  000326  0E34               	movlw	52
  1875  000328  0100               	movlb	0	; () banked
  1876  00032A  6F91               	movwf	??_main& (0+255),b
  1877  00032C  0EF1               	movlw	241
  1878  00032E                     u7937:
  1879  00032E  2EE8               	decfsz	wreg,f,c
  1880  000330  D7FE               	bra	u7937
  1881  000332  2F91               	decfsz	??_main& (0+255),f,b
  1882  000334  D7FC               	bra	u7937
  1883  000336  D000               	nop2	
  1884                           
  1885                           ;main.c: 231: printf("testing S b");
  1886  000338  0EAF               	movlw	low STR_6
  1887  00033A  6E2D               	movwf	printf@f,c
  1888  00033C  0EFF               	movlw	high STR_6
  1889  00033E  6E2E               	movwf	printf@f+1,c
  1890  000340  EC36  F007         	call	_printf	;wreg free
  1891                           
  1892                           ;main.c: 232: S1mode = 2;
  1893  000344  0E00               	movlw	0
  1894  000346  6E5C               	movwf	_S1mode+1,c
  1895  000348  0E02               	movlw	2
  1896  00034A  6E5B               	movwf	_S1mode,c
  1897                           
  1898                           ;main.c: 233: S2mode = 2;
  1899  00034C  0E00               	movlw	0
  1900  00034E  6E5A               	movwf	_S2mode+1,c
  1901  000350  0E02               	movlw	2
  1902  000352  6E59               	movwf	_S2mode,c
  1903                           
  1904                           ;main.c: 234: S3mode = 2;
  1905  000354  0E00               	movlw	0
  1906  000356  6E58               	movwf	_S3mode+1,c
  1907  000358  0E02               	movlw	2
  1908  00035A  6E57               	movwf	_S3mode,c
  1909                           
  1910                           ;main.c: 235: keycheck();
  1911  00035C  ECED  F015         	call	_keycheck	;wreg free
  1912                           
  1913                           ;main.c: 237: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1914  000360  0E01               	movlw	1
  1915  000362  EC17  F016         	call	_lcdInst
  1916  000366  0E34               	movlw	52
  1917  000368  0100               	movlb	0	; () banked
  1918  00036A  6F91               	movwf	??_main& (0+255),b
  1919  00036C  0EF1               	movlw	241
  1920  00036E                     u7947:
  1921  00036E  2EE8               	decfsz	wreg,f,c
  1922  000370  D7FE               	bra	u7947
  1923  000372  2F91               	decfsz	??_main& (0+255),f,b
  1924  000374  D7FC               	bra	u7947
  1925  000376  D000               	nop2	
  1926                           
  1927                           ;main.c: 238: printf("testing S shake");
  1928  000378  0E36               	movlw	low STR_7
  1929  00037A  6E2D               	movwf	printf@f,c
  1930  00037C  0EFF               	movlw	high STR_7
  1931  00037E  6E2E               	movwf	printf@f+1,c
  1932  000380  EC36  F007         	call	_printf	;wreg free
  1933                           
  1934                           ;main.c: 239: S1mode = 3;
  1935  000384  0E00               	movlw	0
  1936  000386  6E5C               	movwf	_S1mode+1,c
  1937  000388  0E03               	movlw	3
  1938  00038A  6E5B               	movwf	_S1mode,c
  1939                           
  1940                           ;main.c: 240: S2mode = 3;
  1941  00038C  0E00               	movlw	0
  1942  00038E  6E5A               	movwf	_S2mode+1,c
  1943  000390  0E03               	movlw	3
  1944  000392  6E59               	movwf	_S2mode,c
  1945                           
  1946                           ;main.c: 241: S3mode = 3;
  1947  000394  0E00               	movlw	0
  1948  000396  6E58               	movwf	_S3mode+1,c
  1949  000398  0E03               	movlw	3
  1950  00039A  6E57               	movwf	_S3mode,c
  1951                           
  1952                           ;main.c: 242: keycheck();
  1953  00039C  ECED  F015         	call	_keycheck	;wreg free
  1954                           
  1955                           ;main.c: 244: S1mode = 4;
  1956  0003A0  0E00               	movlw	0
  1957  0003A2  6E5C               	movwf	_S1mode+1,c
  1958  0003A4  0E04               	movlw	4
  1959  0003A6  6E5B               	movwf	_S1mode,c
  1960                           
  1961                           ;main.c: 245: S2mode = 4;
  1962  0003A8  0E00               	movlw	0
  1963  0003AA  6E5A               	movwf	_S2mode+1,c
  1964  0003AC  0E04               	movlw	4
  1965  0003AE  6E59               	movwf	_S2mode,c
  1966                           
  1967                           ;main.c: 246: S3mode = 4;
  1968  0003B0  0E00               	movlw	0
  1969  0003B2  6E58               	movwf	_S3mode+1,c
  1970  0003B4  0E04               	movlw	4
  1971  0003B6  6E57               	movwf	_S3mode,c
  1972                           
  1973                           ;main.c: 248: keypress = (0);
  1974  0003B8  0E00               	movlw	0
  1975  0003BA  0100               	movlb	0	; () banked
  1976  0003BC  6FC2               	movwf	_keypress& (0+255),b	;volatile
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;main.c: 249: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1980  0003BE  0E01               	movlw	1
  1981  0003C0  EC17  F016         	call	_lcdInst
  1982  0003C4  0E34               	movlw	52
  1983  0003C6  0100               	movlb	0	; () banked
  1984  0003C8  6F91               	movwf	??_main& (0+255),b
  1985  0003CA  0EF1               	movlw	241
  1986  0003CC                     u7957:
  1987  0003CC  2EE8               	decfsz	wreg,f,c
  1988  0003CE  D7FE               	bra	u7957
  1989  0003D0  2F91               	decfsz	??_main& (0+255),f,b
  1990  0003D2  D7FC               	bra	u7957
  1991  0003D4  D000               	nop2	
  1992                           
  1993                           ;main.c: 250: printf("testing S1 pins");
  1994  0003D6  0E66               	movlw	low STR_8
  1995  0003D8  6E2D               	movwf	printf@f,c
  1996  0003DA  0EFF               	movlw	high STR_8
  1997  0003DC  6E2E               	movwf	printf@f+1,c
  1998  0003DE  EC36  F007         	call	_printf	;wreg free
  1999                           
  2000                           ;main.c: 251: while(keypress!=3){
  2001  0003E2  D032               	goto	l5817
  2002  0003E4                     l5795:
  2003                           
  2004                           ;main.c: 253: keyinterrupt();
  2005  0003E4  ECE2  F015         	call	_keyinterrupt	;wreg free
  2006                           
  2007                           ;main.c: 255: if (keypress == 2){LATDbits.LATD1 = 1;}
  2008  0003E8  0E02               	movlw	2
  2009  0003EA  0100               	movlb	0	; () banked
  2010  0003EC  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2011  0003EE  A4D8               	btfss	status,2,c
  2012  0003F0  D002               	goto	l216
  2013                           
  2014                           ; BSR set to: 0
  2015  0003F2  828C               	bsf	3980,1,c	;volatile
  2016  0003F4  D001               	goto	l5801
  2017  0003F6                     l216:
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 256: else{LATDbits.LATD1 = 0;}
  2021  0003F6  928C               	bcf	3980,1,c	;volatile
  2022  0003F8                     l5801:
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;main.c: 257: if (keypress == 6){LATBbits.LATB3 = 1;}
  2026  0003F8  0E06               	movlw	6
  2027  0003FA  0100               	movlb	0	; () banked
  2028  0003FC  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2029  0003FE  A4D8               	btfss	status,2,c
  2030  000400  D002               	goto	l218
  2031                           
  2032                           ; BSR set to: 0
  2033  000402  868A               	bsf	3978,3,c	;volatile
  2034  000404  D001               	goto	l5805
  2035  000406                     l218:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;main.c: 258: else{LATBbits.LATB3 = 0;}
  2039  000406  968A               	bcf	3978,3,c	;volatile
  2040  000408                     l5805:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 259: if (keypress == 10){LATBbits.LATB2 = 1;}
  2044  000408  0E0A               	movlw	10
  2045  00040A  0100               	movlb	0	; () banked
  2046  00040C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2047  00040E  A4D8               	btfss	status,2,c
  2048  000410  D002               	goto	l220
  2049                           
  2050                           ; BSR set to: 0
  2051  000412  848A               	bsf	3978,2,c	;volatile
  2052  000414  D001               	goto	l5809
  2053  000416                     l220:
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;main.c: 260: else{LATBbits.LATB2 = 0;}
  2057  000416  948A               	bcf	3978,2,c	;volatile
  2058  000418                     l5809:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 261: if (keypress == 14){LATBbits.LATB0 = 1;}
  2062  000418  0E0E               	movlw	14
  2063  00041A  0100               	movlb	0	; () banked
  2064  00041C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2065  00041E  A4D8               	btfss	status,2,c
  2066  000420  D002               	goto	l222
  2067                           
  2068                           ; BSR set to: 0
  2069  000422  808A               	bsf	3978,0,c	;volatile
  2070  000424  D001               	goto	l5813
  2071  000426                     l222:
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;main.c: 262: else{LATBbits.LATB0 = 0;}
  2075  000426  908A               	bcf	3978,0,c	;volatile
  2076  000428                     l5813:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;main.c: 264: readADC(1);
  2080  000428  0E01               	movlw	1
  2081  00042A  ECC1  F015         	call	_readADC
  2082                           
  2083                           ;main.c: 265: lcdInst(0b11000000);;
  2084  00042E  0EC0               	movlw	192
  2085  000430  EC17  F016         	call	_lcdInst
  2086                           
  2087                           ;main.c: 266: printf("%x", ADRES);
  2088  000434  0EFB               	movlw	low STR_9
  2089  000436  6E2D               	movwf	printf@f,c
  2090  000438  0EFF               	movlw	high STR_9
  2091  00043A  6E2E               	movwf	printf@f+1,c
  2092  00043C  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2093  000440  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2094  000444  EC36  F007         	call	_printf	;wreg free
  2095  000448                     l5817:
  2096  000448  0E03               	movlw	3
  2097  00044A  0100               	movlb	0	; () banked
  2098  00044C  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2099  00044E  A4D8               	btfss	status,2,c
  2100  000450  D7C9               	goto	l5795
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;main.c: 267: }
  2104                           ;main.c: 269: keypress = (0);
  2105                           
  2106                           ; BSR set to: 0
  2107  000452  0E00               	movlw	0
  2108  000454  0100               	movlb	0	; () banked
  2109  000456  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 270: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2113  000458  0E01               	movlw	1
  2114  00045A  EC17  F016         	call	_lcdInst
  2115  00045E  0E34               	movlw	52
  2116  000460  0100               	movlb	0	; () banked
  2117  000462  6F91               	movwf	??_main& (0+255),b
  2118  000464  0EF1               	movlw	241
  2119  000466                     u7967:
  2120  000466  2EE8               	decfsz	wreg,f,c
  2121  000468  D7FE               	bra	u7967
  2122  00046A  2F91               	decfsz	??_main& (0+255),f,b
  2123  00046C  D7FC               	bra	u7967
  2124  00046E  D000               	nop2	
  2125                           
  2126                           ;main.c: 271: printf("testing S2 pins");
  2127  000470  0E76               	movlw	low STR_10
  2128  000472  6E2D               	movwf	printf@f,c
  2129  000474  0EFF               	movlw	high STR_10
  2130  000476  6E2E               	movwf	printf@f+1,c
  2131  000478  EC36  F007         	call	_printf	;wreg free
  2132                           
  2133                           ;main.c: 272: while(keypress!=3){
  2134  00047C  D022               	goto	l5845
  2135  00047E                     l5827:
  2136                           
  2137                           ;main.c: 274: keyinterrupt();
  2138  00047E  ECE2  F015         	call	_keyinterrupt	;wreg free
  2139                           
  2140                           ;main.c: 276: if (keypress == 2){LATCbits.LATC7 = 1;}
  2141  000482  0E02               	movlw	2
  2142  000484  0100               	movlb	0	; () banked
  2143  000486  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2144  000488  A4D8               	btfss	status,2,c
  2145  00048A  D002               	goto	l227
  2146                           
  2147                           ; BSR set to: 0
  2148  00048C  8E8B               	bsf	3979,7,c	;volatile
  2149  00048E  D001               	goto	l5833
  2150  000490                     l227:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 277: else{LATCbits.LATC7 = 0;}
  2154  000490  9E8B               	bcf	3979,7,c	;volatile
  2155  000492                     l5833:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 278: if (keypress == 6){LATCbits.LATC6 = 1;}
  2159  000492  0E06               	movlw	6
  2160  000494  0100               	movlb	0	; () banked
  2161  000496  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2162  000498  A4D8               	btfss	status,2,c
  2163  00049A  D002               	goto	l229
  2164                           
  2165                           ; BSR set to: 0
  2166  00049C  8C8B               	bsf	3979,6,c	;volatile
  2167  00049E  D001               	goto	l5837
  2168  0004A0                     l229:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;main.c: 279: else{LATCbits.LATC6 = 0;}
  2172  0004A0  9C8B               	bcf	3979,6,c	;volatile
  2173  0004A2                     l5837:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;main.c: 280: if (keypress == 10){LATCbits.LATC0 = 1;}
  2177  0004A2  0E0A               	movlw	10
  2178  0004A4  0100               	movlb	0	; () banked
  2179  0004A6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2180  0004A8  A4D8               	btfss	status,2,c
  2181  0004AA  D002               	goto	l231
  2182                           
  2183                           ; BSR set to: 0
  2184  0004AC  808B               	bsf	3979,0,c	;volatile
  2185  0004AE  D001               	goto	l5841
  2186  0004B0                     l231:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 281: else{LATCbits.LATC0 = 0;}
  2190  0004B0  908B               	bcf	3979,0,c	;volatile
  2191  0004B2                     l5841:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;main.c: 282: if (keypress == 14){LATCbits.LATC5 = 1;}
  2195  0004B2  0E0E               	movlw	14
  2196  0004B4  0100               	movlb	0	; () banked
  2197  0004B6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2198  0004B8  A4D8               	btfss	status,2,c
  2199  0004BA  D002               	goto	l233
  2200                           
  2201                           ; BSR set to: 0
  2202  0004BC  8A8B               	bsf	3979,5,c	;volatile
  2203  0004BE  D001               	goto	l5845
  2204  0004C0                     l233:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;main.c: 283: else{LATCbits.LATC5 = 0;}
  2208  0004C0  9A8B               	bcf	3979,5,c	;volatile
  2209  0004C2                     l5845:
  2210  0004C2  0E03               	movlw	3
  2211  0004C4  0100               	movlb	0	; () banked
  2212  0004C6  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2213  0004C8  A4D8               	btfss	status,2,c
  2214  0004CA  D7D9               	goto	l5827
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 284: }
  2218                           ;main.c: 286: keypress = (0);
  2219                           
  2220                           ; BSR set to: 0
  2221  0004CC  0E00               	movlw	0
  2222  0004CE  0100               	movlb	0	; () banked
  2223  0004D0  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;main.c: 287: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2227  0004D2  0E01               	movlw	1
  2228  0004D4  EC17  F016         	call	_lcdInst
  2229  0004D8  0E34               	movlw	52
  2230  0004DA  0100               	movlb	0	; () banked
  2231  0004DC  6F91               	movwf	??_main& (0+255),b
  2232  0004DE  0EF1               	movlw	241
  2233  0004E0                     u7977:
  2234  0004E0  2EE8               	decfsz	wreg,f,c
  2235  0004E2  D7FE               	bra	u7977
  2236  0004E4  2F91               	decfsz	??_main& (0+255),f,b
  2237  0004E6  D7FC               	bra	u7977
  2238  0004E8  D000               	nop2	
  2239                           
  2240                           ;main.c: 288: printf("testing S3 pins");
  2241  0004EA  0E86               	movlw	low STR_11
  2242  0004EC  6E2D               	movwf	printf@f,c
  2243  0004EE  0EFF               	movlw	high STR_11
  2244  0004F0  6E2E               	movwf	printf@f+1,c
  2245  0004F2  EC36  F007         	call	_printf	;wreg free
  2246                           
  2247                           ;main.c: 289: while(keypress!=3){
  2248  0004F6  D032               	goto	l5877
  2249  0004F8                     l5855:
  2250                           
  2251                           ;main.c: 291: keyinterrupt();
  2252  0004F8  ECE2  F015         	call	_keyinterrupt	;wreg free
  2253                           
  2254                           ;main.c: 293: if (keypress == 2){LATEbits.LATE2 = 1;}
  2255  0004FC  0E02               	movlw	2
  2256  0004FE  0100               	movlb	0	; () banked
  2257  000500  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2258  000502  A4D8               	btfss	status,2,c
  2259  000504  D002               	goto	l238
  2260                           
  2261                           ; BSR set to: 0
  2262  000506  848D               	bsf	3981,2,c	;volatile
  2263  000508  D001               	goto	l5861
  2264  00050A                     l238:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main.c: 294: else{LATEbits.LATE2 = 0;}
  2268  00050A  948D               	bcf	3981,2,c	;volatile
  2269  00050C                     l5861:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 295: if (keypress == 6){LATEbits.LATE1 = 1;}
  2273  00050C  0E06               	movlw	6
  2274  00050E  0100               	movlb	0	; () banked
  2275  000510  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2276  000512  A4D8               	btfss	status,2,c
  2277  000514  D002               	goto	l240
  2278                           
  2279                           ; BSR set to: 0
  2280  000516  828D               	bsf	3981,1,c	;volatile
  2281  000518  D001               	goto	l5865
  2282  00051A                     l240:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;main.c: 296: else{LATEbits.LATE1 = 0;}
  2286  00051A  928D               	bcf	3981,1,c	;volatile
  2287  00051C                     l5865:
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;main.c: 297: if (keypress == 10){LATAbits.LATA4 = 1;}
  2291  00051C  0E0A               	movlw	10
  2292  00051E  0100               	movlb	0	; () banked
  2293  000520  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2294  000522  A4D8               	btfss	status,2,c
  2295  000524  D002               	goto	l242
  2296                           
  2297                           ; BSR set to: 0
  2298  000526  8889               	bsf	3977,4,c	;volatile
  2299  000528  D001               	goto	l5869
  2300  00052A                     l242:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;main.c: 298: else{LATAbits.LATA4 = 0;}
  2304  00052A  9889               	bcf	3977,4,c	;volatile
  2305  00052C                     l5869:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 299: if (keypress == 14){LATDbits.LATD0 = 1;}
  2309  00052C  0E0E               	movlw	14
  2310  00052E  0100               	movlb	0	; () banked
  2311  000530  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2312  000532  A4D8               	btfss	status,2,c
  2313  000534  D002               	goto	l244
  2314                           
  2315                           ; BSR set to: 0
  2316  000536  808C               	bsf	3980,0,c	;volatile
  2317  000538  D001               	goto	l5873
  2318  00053A                     l244:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;main.c: 300: else{LATDbits.LATD0 = 0;}
  2322  00053A  908C               	bcf	3980,0,c	;volatile
  2323  00053C                     l5873:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 302: readADC(5);
  2327  00053C  0E05               	movlw	5
  2328  00053E  ECC1  F015         	call	_readADC
  2329                           
  2330                           ;main.c: 303: lcdInst(0b11000000);;
  2331  000542  0EC0               	movlw	192
  2332  000544  EC17  F016         	call	_lcdInst
  2333                           
  2334                           ;main.c: 304: printf("%x", ADRES);
  2335  000548  0EFB               	movlw	low STR_9
  2336  00054A  6E2D               	movwf	printf@f,c
  2337  00054C  0EFF               	movlw	high STR_9
  2338  00054E  6E2E               	movwf	printf@f+1,c
  2339  000550  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2340  000554  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2341  000558  EC36  F007         	call	_printf	;wreg free
  2342  00055C                     l5877:
  2343  00055C  0E03               	movlw	3
  2344  00055E  0100               	movlb	0	; () banked
  2345  000560  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  2346  000562  A4D8               	btfss	status,2,c
  2347  000564  D7C9               	goto	l5855
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;main.c: 305: }
  2351                           ;main.c: 307: S1mode = 0;
  2352                           
  2353                           ; BSR set to: 0
  2354  000566  0E00               	movlw	0
  2355  000568  6E5C               	movwf	_S1mode+1,c
  2356  00056A  0E00               	movlw	0
  2357  00056C  6E5B               	movwf	_S1mode,c
  2358                           
  2359                           ;main.c: 308: S2mode = 0;
  2360  00056E  0E00               	movlw	0
  2361  000570  6E5A               	movwf	_S2mode+1,c
  2362  000572  0E00               	movlw	0
  2363  000574  6E59               	movwf	_S2mode,c
  2364                           
  2365                           ;main.c: 309: S3mode = 0;
  2366  000576  0E00               	movlw	0
  2367  000578  6E58               	movwf	_S3mode+1,c
  2368  00057A  0E00               	movlw	0
  2369  00057C  6E57               	movwf	_S3mode,c
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;main.c: 311: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2373  00057E  0E01               	movlw	1
  2374  000580  EC17  F016         	call	_lcdInst
  2375  000584  0E34               	movlw	52
  2376  000586  0100               	movlb	0	; () banked
  2377  000588  6F91               	movwf	??_main& (0+255),b
  2378  00058A  0EF1               	movlw	241
  2379  00058C                     u7987:
  2380  00058C  2EE8               	decfsz	wreg,f,c
  2381  00058E  D7FE               	bra	u7987
  2382  000590  2F91               	decfsz	??_main& (0+255),f,b
  2383  000592  D7FC               	bra	u7987
  2384  000594  D000               	nop2	
  2385                           
  2386                           ;main.c: 312: printf("testing PWM1");
  2387  000596  0E96               	movlw	low STR_13
  2388  000598  6E2D               	movwf	printf@f,c
  2389  00059A  0EFF               	movlw	high STR_13
  2390  00059C  6E2E               	movwf	printf@f+1,c
  2391  00059E  EC36  F007         	call	_printf	;wreg free
  2392                           
  2393                           ;main.c: 313: PWM1(400);
  2394  0005A2  0E01               	movlw	1
  2395  0005A4  6E22               	movwf	PWM1@duty+1,c
  2396  0005A6  0E90               	movlw	144
  2397  0005A8  6E21               	movwf	PWM1@duty,c
  2398  0005AA  ECDC  F014         	call	_PWM1	;wreg free
  2399                           
  2400                           ;main.c: 314: keycheck();
  2401  0005AE  ECED  F015         	call	_keycheck	;wreg free
  2402                           
  2403                           ;main.c: 315: PWM1off();
  2404  0005B2  EC27  F016         	call	_PWM1off	;wreg free
  2405                           
  2406                           ;main.c: 317: keypress = (0);
  2407  0005B6  0E00               	movlw	0
  2408  0005B8  0100               	movlb	0	; () banked
  2409  0005BA  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2410                           
  2411                           ;main.c: 318: while(keypress==(0)){
  2412  0005BC  D05B               	goto	l5925
  2413  0005BE                     l5895:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;main.c: 319: keypress = (0);
  2417  0005BE  0E00               	movlw	0
  2418  0005C0  0100               	movlb	0	; () banked
  2419  0005C2  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;main.c: 321: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2423  0005C4  0E01               	movlw	1
  2424  0005C6  EC17  F016         	call	_lcdInst
  2425  0005CA  0E34               	movlw	52
  2426  0005CC  0100               	movlb	0	; () banked
  2427  0005CE  6F91               	movwf	??_main& (0+255),b
  2428  0005D0  0EF1               	movlw	241
  2429  0005D2                     u7997:
  2430  0005D2  2EE8               	decfsz	wreg,f,c
  2431  0005D4  D7FE               	bra	u7997
  2432  0005D6  2F91               	decfsz	??_main& (0+255),f,b
  2433  0005D8  D7FC               	bra	u7997
  2434  0005DA  D000               	nop2	
  2435                           
  2436                           ;main.c: 322: printf("testing IR");
  2437  0005DC  0ED3               	movlw	low STR_14
  2438  0005DE  6E2D               	movwf	printf@f,c
  2439  0005E0  0EFF               	movlw	high STR_14
  2440  0005E2  6E2E               	movwf	printf@f+1,c
  2441  0005E4  EC36  F007         	call	_printf	;wreg free
  2442                           
  2443                           ;main.c: 323: lcdInst(0b11000000);;
  2444  0005E8  0EC0               	movlw	192
  2445  0005EA  EC17  F016         	call	_lcdInst
  2446                           
  2447                           ;main.c: 324: readADC(1);
  2448  0005EE  0E01               	movlw	1
  2449  0005F0  ECC1  F015         	call	_readADC
  2450                           
  2451                           ;main.c: 325: printf("%x ", ADRES);
  2452  0005F4  0EF7               	movlw	low STR_15
  2453  0005F6  6E2D               	movwf	printf@f,c
  2454  0005F8  0EFF               	movlw	high STR_15
  2455  0005FA  6E2E               	movwf	printf@f+1,c
  2456  0005FC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2457  000600  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2458  000604  EC36  F007         	call	_printf	;wreg free
  2459                           
  2460                           ;main.c: 326: readADC(0);
  2461  000608  0E00               	movlw	0
  2462  00060A  ECC1  F015         	call	_readADC
  2463                           
  2464                           ;main.c: 327: printf("%x ", ADRES);
  2465  00060E  0EF7               	movlw	low STR_15
  2466  000610  6E2D               	movwf	printf@f,c
  2467  000612  0EFF               	movlw	high STR_15
  2468  000614  6E2E               	movwf	printf@f+1,c
  2469  000616  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2470  00061A  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2471  00061E  EC36  F007         	call	_printf	;wreg free
  2472                           
  2473                           ;main.c: 328: readADC(2);
  2474  000622  0E02               	movlw	2
  2475  000624  ECC1  F015         	call	_readADC
  2476                           
  2477                           ;main.c: 329: printf("%x ", ADRES);
  2478  000628  0EF7               	movlw	low STR_15
  2479  00062A  6E2D               	movwf	printf@f,c
  2480  00062C  0EFF               	movlw	high STR_15
  2481  00062E  6E2E               	movwf	printf@f+1,c
  2482  000630  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2483  000634  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2484  000638  EC36  F007         	call	_printf	;wreg free
  2485                           
  2486                           ;main.c: 330: readADC(5);
  2487  00063C  0E05               	movlw	5
  2488  00063E  ECC1  F015         	call	_readADC
  2489                           
  2490                           ;main.c: 331: printf("%x ", ADRES);
  2491  000642  0EF7               	movlw	low STR_15
  2492  000644  6E2D               	movwf	printf@f,c
  2493  000646  0EFF               	movlw	high STR_15
  2494  000648  6E2E               	movwf	printf@f+1,c
  2495  00064A  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2496  00064E  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2497  000652  EC36  F007         	call	_printf	;wreg free
  2498                           
  2499                           ;main.c: 332: keyinterrupt();
  2500  000656  ECE2  F015         	call	_keyinterrupt	;wreg free
  2501                           
  2502                           ;main.c: 333: _delay((unsigned long)((100)*(32000000/4000.0)));
  2503  00065A  0E05               	movlw	5
  2504  00065C  0100               	movlb	0	; () banked
  2505  00065E  6F92               	movwf	(??_main+1)& (0+255),b
  2506  000660  0E0F               	movlw	15
  2507  000662  0100               	movlb	0	; () banked
  2508  000664  6F91               	movwf	??_main& (0+255),b
  2509  000666  0EF1               	movlw	241
  2510  000668                     u8007:
  2511  000668  2EE8               	decfsz	wreg,f,c
  2512  00066A  D7FE               	bra	u8007
  2513  00066C  2F91               	decfsz	??_main& (0+255),f,b
  2514  00066E  D7FC               	bra	u8007
  2515  000670  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2516  000672  D7FA               	bra	u8007
  2517  000674                     l5925:
  2518  000674  0100               	movlb	0	; () banked
  2519  000676  51C2               	movf	_keypress& (0+255),w,b	;volatile
  2520  000678  B4D8               	btfsc	status,2,c
  2521  00067A  D7A1               	goto	l5895
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;main.c: 334: }
  2525                           ;main.c: 336: keypress = (0);
  2526                           
  2527                           ; BSR set to: 0
  2528  00067C  0E00               	movlw	0
  2529  00067E  0100               	movlb	0	; () banked
  2530  000680  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2531                           
  2532                           ;main.c: 337: while(keypress==(0)){
  2533  000682  D041               	goto	l5951
  2534  000684                     l5929:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;main.c: 338: keypress = (0);
  2538  000684  0E00               	movlw	0
  2539  000686  0100               	movlb	0	; () banked
  2540  000688  6FC2               	movwf	_keypress& (0+255),b	;volatile
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;main.c: 339: _delay((unsigned long)((50)*(32000000/4000.0)));
  2544  00068A  0E03               	movlw	3
  2545  00068C  0100               	movlb	0	; () banked
  2546  00068E  6F92               	movwf	(??_main+1)& (0+255),b
  2547  000690  0E08               	movlw	8
  2548  000692  0100               	movlb	0	; () banked
  2549  000694  6F91               	movwf	??_main& (0+255),b
  2550  000696  0E77               	movlw	119
  2551  000698                     u8017:
  2552  000698  2EE8               	decfsz	wreg,f,c
  2553  00069A  D7FE               	bra	u8017
  2554  00069C  2F91               	decfsz	??_main& (0+255),f,b
  2555  00069E  D7FC               	bra	u8017
  2556  0006A0  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2557  0006A2  D7FA               	bra	u8017
  2558                           
  2559                           ;main.c: 340: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2560  0006A4  0E01               	movlw	1
  2561  0006A6  EC17  F016         	call	_lcdInst
  2562  0006AA  0E34               	movlw	52
  2563  0006AC  0100               	movlb	0	; () banked
  2564  0006AE  6F91               	movwf	??_main& (0+255),b
  2565  0006B0  0EF1               	movlw	241
  2566  0006B2                     u8027:
  2567  0006B2  2EE8               	decfsz	wreg,f,c
  2568  0006B4  D7FE               	bra	u8027
  2569  0006B6  2F91               	decfsz	??_main& (0+255),f,b
  2570  0006B8  D7FC               	bra	u8027
  2571  0006BA  D000               	nop2	
  2572                           
  2573                           ;main.c: 341: printf("label   tab");
  2574  0006BC  0EBB               	movlw	low STR_19
  2575  0006BE  6E2D               	movwf	printf@f,c
  2576  0006C0  0EFF               	movlw	high STR_19
  2577  0006C2  6E2E               	movwf	printf@f+1,c
  2578  0006C4  EC36  F007         	call	_printf	;wreg free
  2579                           
  2580                           ;main.c: 342: lcdInst(0b11000000);;
  2581  0006C8  0EC0               	movlw	192
  2582  0006CA  EC17  F016         	call	_lcdInst
  2583                           
  2584                           ;main.c: 343: readADC(4);
  2585  0006CE  0E04               	movlw	4
  2586  0006D0  ECC1  F015         	call	_readADC
  2587                           
  2588                           ;main.c: 344: printf("%x      ", ADRES);
  2589  0006D4  0EDE               	movlw	low STR_20
  2590  0006D6  6E2D               	movwf	printf@f,c
  2591  0006D8  0EFF               	movlw	high STR_20
  2592  0006DA  6E2E               	movwf	printf@f+1,c
  2593  0006DC  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2594  0006E0  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2595  0006E4  EC36  F007         	call	_printf	;wreg free
  2596                           
  2597                           ;main.c: 345: readADC(3);
  2598  0006E8  0E03               	movlw	3
  2599  0006EA  ECC1  F015         	call	_readADC
  2600                           
  2601                           ;main.c: 346: printf("%x      ", ADRES);
  2602  0006EE  0EDE               	movlw	low STR_20
  2603  0006F0  6E2D               	movwf	printf@f,c
  2604  0006F2  0EFF               	movlw	high STR_20
  2605  0006F4  6E2E               	movwf	printf@f+1,c
  2606  0006F6  CFC3 F02F          	movff	4035,?_printf+2	;volatile
  2607  0006FA  CFC4 F030          	movff	4036,?_printf+3	;volatile
  2608  0006FE  EC36  F007         	call	_printf	;wreg free
  2609                           
  2610                           ;main.c: 347: keyinterrupt();
  2611  000702  ECE2  F015         	call	_keyinterrupt	;wreg free
  2612  000706                     l5951:
  2613  000706  0100               	movlb	0	; () banked
  2614  000708  51C2               	movf	_keypress& (0+255),w,b	;volatile
  2615  00070A  B4D8               	btfsc	status,2,c
  2616  00070C  D7BB               	goto	l5929
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 348: }
  2620                           ;main.c: 350: standby = 1;
  2621                           
  2622                           ; BSR set to: 0
  2623  00070E  0E00               	movlw	0
  2624  000710  0100               	movlb	0	; () banked
  2625  000712  6FAE               	movwf	(main@standby+1)& (0+255),b
  2626  000714  0E01               	movlw	1
  2627  000716  6FAD               	movwf	main@standby& (0+255),b
  2628                           
  2629                           ;main.c: 356: }
  2630  000718  D4A6               	goto	l5655
  2631  00071A                     l5955:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;main.c: 361: readADC(2);
  2635  00071A  0E02               	movlw	2
  2636  00071C  ECC1  F015         	call	_readADC
  2637                           
  2638                           ;main.c: 362: if(ADRES <= 0x130){
  2639  000720  0E31               	movlw	49
  2640  000722  5CC3               	subwf	4035,w,c	;volatile
  2641  000724  0E01               	movlw	1
  2642  000726  58C4               	subwfb	4036,w,c	;volatile
  2643  000728  B0D8               	btfsc	status,0,c
  2644  00072A  D026               	goto	l5969
  2645                           
  2646                           ;main.c: 363: prevSoupLoad = seconds;
  2647  00072C  C0BC  F099         	movff	_seconds,main@prevSoupLoad
  2648  000730  C0BD  F09A         	movff	_seconds+1,main@prevSoupLoad+1
  2649                           
  2650                           ;main.c: 364: soupCnt = 1;
  2651  000734  0E00               	movlw	0
  2652  000736  0100               	movlb	0	; () banked
  2653  000738  6FB9               	movwf	(_soupCnt+1)& (0+255),b
  2654  00073A  0E01               	movlw	1
  2655  00073C  6FB8               	movwf	_soupCnt& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 365: if (!soupSort){
  2659  00073E  0100               	movlb	0	; () banked
  2660  000740  51A5               	movf	main@soupSort& (0+255),w,b
  2661  000742  0100               	movlb	0	; () banked
  2662  000744  11A6               	iorwf	(main@soupSort+1)& (0+255),w,b
  2663  000746  A4D8               	btfss	status,2,c
  2664  000748  D017               	goto	l5969
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 366: soupSort = 1;
  2668  00074A  0E00               	movlw	0
  2669  00074C  0100               	movlb	0	; () banked
  2670  00074E  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  2671  000750  0E01               	movlw	1
  2672  000752  6FA5               	movwf	main@soupSort& (0+255),b
  2673                           
  2674                           ;main.c: 367: soupSteps = 0;
  2675  000754  0E00               	movlw	0
  2676  000756  6E56               	movwf	_soupSteps+1,c
  2677  000758  0E00               	movlw	0
  2678  00075A  6E55               	movwf	_soupSteps,c
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;main.c: 368: _delay((unsigned long)((150)*(32000000/4000.0)));
  2682  00075C  0E07               	movlw	7
  2683  00075E  0100               	movlb	0	; () banked
  2684  000760  6F92               	movwf	(??_main+1)& (0+255),b
  2685  000762  0E17               	movlw	23
  2686  000764  0100               	movlb	0	; () banked
  2687  000766  6F91               	movwf	??_main& (0+255),b
  2688  000768  0E6A               	movlw	106
  2689  00076A                     u8037:
  2690  00076A  2EE8               	decfsz	wreg,f,c
  2691  00076C  D7FE               	bra	u8037
  2692  00076E  2F91               	decfsz	??_main& (0+255),f,b
  2693  000770  D7FC               	bra	u8037
  2694  000772  2F92               	decfsz	(??_main+1)& (0+255),f,b
  2695  000774  D7FA               	bra	u8037
  2696  000776  F000               	nop	
  2697  000778                     l5969:
  2698                           
  2699                           ;main.c: 369: }
  2700                           ;main.c: 370: }
  2701                           ;main.c: 374: if (soupSort){
  2702  000778  0100               	movlb	0	; () banked
  2703  00077A  51A5               	movf	main@soupSort& (0+255),w,b
  2704  00077C  0100               	movlb	0	; () banked
  2705  00077E  11A6               	iorwf	(main@soupSort+1)& (0+255),w,b
  2706  000780  B4D8               	btfsc	status,2,c
  2707  000782  D0EE               	goto	l6053
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;main.c: 375: if (soupSteps < 120){
  2711  000784  BE56               	btfsc	_soupSteps+1,7,c
  2712  000786  D006               	goto	l5973
  2713  000788  5056               	movf	_soupSteps+1,w,c
  2714  00078A  E111               	bnz	l5979
  2715  00078C  0E78               	movlw	120
  2716  00078E  5C55               	subwf	_soupSteps,w,c
  2717  000790  B0D8               	btfsc	status,0,c
  2718  000792  D00D               	goto	l5979
  2719  000794                     l5973:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 376: readADC(4);
  2723  000794  0E04               	movlw	4
  2724  000796  ECC1  F015         	call	_readADC
  2725                           
  2726                           ;main.c: 377: if(ADRES<0x200){labelState = 1;}
  2727  00079A  0E02               	movlw	2
  2728  00079C  5CC4               	subwf	4036,w,c	;volatile
  2729  00079E  B0D8               	btfsc	status,0,c
  2730  0007A0  D0DF               	goto	l6053
  2731  0007A2  0E00               	movlw	0
  2732  0007A4  0100               	movlb	0	; () banked
  2733  0007A6  6FBB               	movwf	(_labelState+1)& (0+255),b
  2734  0007A8  0E01               	movlw	1
  2735  0007AA  6FBA               	movwf	_labelState& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;main.c: 379: }
  2739  0007AC  D0D9               	goto	l6053
  2740  0007AE                     l5979:
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;main.c: 380: else if (labelState == 1){
  2744  0007AE  0100               	movlb	0	; () banked
  2745  0007B0  05BA               	decf	_labelState& (0+255),w,b
  2746  0007B2  0100               	movlb	0	; () banked
  2747  0007B4  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2748  0007B6  A4D8               	btfss	status,2,c
  2749  0007B8  D03D               	goto	l6003
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;main.c: 381: if(soupSteps < (120+70)){
  2753  0007BA  BE56               	btfsc	_soupSteps+1,7,c
  2754  0007BC  D006               	goto	l5983
  2755  0007BE  5056               	movf	_soupSteps+1,w,c
  2756  0007C0  E108               	bnz	l5985
  2757  0007C2  0EBE               	movlw	190
  2758  0007C4  5C55               	subwf	_soupSteps,w,c
  2759  0007C6  B0D8               	btfsc	status,0,c
  2760  0007C8  D004               	goto	l5985
  2761  0007CA                     l5983:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 382: S1mode = 1;
  2765  0007CA  0E00               	movlw	0
  2766  0007CC  6E5C               	movwf	_S1mode+1,c
  2767  0007CE  0E01               	movlw	1
  2768  0007D0  D042               	goto	L3
  2769  0007D2                     l5985:
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;main.c: 385: else if(soupSteps < (120+70+55)){
  2773  0007D2  BE56               	btfsc	_soupSteps+1,7,c
  2774  0007D4  D006               	goto	l5987
  2775  0007D6  5056               	movf	_soupSteps+1,w,c
  2776  0007D8  E10C               	bnz	l5989
  2777  0007DA  0EF5               	movlw	245
  2778  0007DC  5C55               	subwf	_soupSteps,w,c
  2779  0007DE  B0D8               	btfsc	status,0,c
  2780  0007E0  D008               	goto	l5989
  2781  0007E2                     l5987:
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 386: S1mode = 2;
  2785  0007E2  0E00               	movlw	0
  2786  0007E4  6E5C               	movwf	_S1mode+1,c
  2787  0007E6  0E02               	movlw	2
  2788  0007E8  6E5B               	movwf	_S1mode,c
  2789                           
  2790                           ;main.c: 387: soupAlign = 2;
  2791  0007EA  0E00               	movlw	0
  2792  0007EC  6E4E               	movwf	_soupAlign+1,c
  2793  0007EE  0E02               	movlw	2
  2794  0007F0  D048               	goto	L4
  2795  0007F2                     l5989:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 390: else{
  2799                           ;main.c: 391: S1mode = 4;
  2800  0007F2  0E00               	movlw	0
  2801  0007F4  6E5C               	movwf	_S1mode+1,c
  2802  0007F6  0E04               	movlw	4
  2803  0007F8  6E5B               	movwf	_S1mode,c
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;main.c: 393: updateS1(soupAlign);
  2807  0007FA  C04D  F021         	movff	_soupAlign,updateS1@mode
  2808  0007FE  C04E  F022         	movff	_soupAlign+1,updateS1@mode+1
  2809  000802  ECB8  F00A         	call	_updateS1	;wreg free
  2810                           
  2811                           ;main.c: 394: readADC(1);
  2812  000806  0E01               	movlw	1
  2813  000808  ECC1  F015         	call	_readADC
  2814                           
  2815                           ;main.c: 396: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  2816  00080C  0100               	movlb	0	; () banked
  2817  00080E  51AB               	movf	main@prevSoupIR& (0+255),w,b
  2818  000810  5CC3               	subwf	4035,w,c	;volatile
  2819  000812  0100               	movlb	0	; () banked
  2820  000814  51AC               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2821  000816  58C4               	subwfb	4036,w,c	;volatile
  2822  000818  B0D8               	btfsc	status,0,c
  2823  00081A  D059               	goto	l6025
  2824                           
  2825                           ; BSR set to: 0
  2826  00081C  0EAB               	movlw	171
  2827  00081E  5CC3               	subwf	4035,w,c	;volatile
  2828  000820  0E03               	movlw	3
  2829  000822  58C4               	subwfb	4036,w,c	;volatile
  2830  000824  A0D8               	btfss	status,0,c
  2831  000826  D053               	goto	l6025
  2832                           
  2833                           ; BSR set to: 0
  2834  000828  0E00               	movlw	0
  2835  00082A  0100               	movlb	0	; () banked
  2836  00082C  6FBB               	movwf	(_labelState+1)& (0+255),b
  2837  00082E  0E65               	movlw	101
  2838  000830  6FBA               	movwf	_labelState& (0+255),b
  2839  000832  D04D               	goto	l6025
  2840  000834                     l6003:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 401: else if(labelState == 0){
  2844  000834  0100               	movlb	0	; () banked
  2845  000836  51BA               	movf	_labelState& (0+255),w,b
  2846  000838  0100               	movlb	0	; () banked
  2847  00083A  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2848  00083C  A4D8               	btfss	status,2,c
  2849  00083E  D04C               	goto	l6027
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 402: if(soupSteps < (120+70)){
  2853  000840  BE56               	btfsc	_soupSteps+1,7,c
  2854  000842  D006               	goto	l6007
  2855  000844  5056               	movf	_soupSteps+1,w,c
  2856  000846  E10E               	bnz	l6009
  2857  000848  0EBE               	movlw	190
  2858  00084A  5C55               	subwf	_soupSteps,w,c
  2859  00084C  B0D8               	btfsc	status,0,c
  2860  00084E  D00A               	goto	l6009
  2861  000850                     l6007:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;main.c: 403: S1mode = 2;
  2865  000850  0E00               	movlw	0
  2866  000852  6E5C               	movwf	_S1mode+1,c
  2867  000854  0E02               	movlw	2
  2868  000856                     L3:
  2869  000856  6E5B               	movwf	_S1mode,c
  2870                           
  2871                           ;main.c: 404: soupCnt = 0;
  2872  000858  0E00               	movlw	0
  2873  00085A  0100               	movlb	0	; () banked
  2874  00085C  6FB9               	movwf	(_soupCnt+1)& (0+255),b
  2875  00085E  0E00               	movlw	0
  2876  000860  6FB8               	movwf	_soupCnt& (0+255),b
  2877                           
  2878                           ;main.c: 405: }
  2879  000862  D07E               	goto	l6053
  2880  000864                     l6009:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;main.c: 406: else if(soupSteps < (120+70+58)){
  2884  000864  BE56               	btfsc	_soupSteps+1,7,c
  2885  000866  D006               	goto	l6011
  2886  000868  5056               	movf	_soupSteps+1,w,c
  2887  00086A  E111               	bnz	l6013
  2888  00086C  0EF8               	movlw	248
  2889  00086E  5C55               	subwf	_soupSteps,w,c
  2890  000870  B0D8               	btfsc	status,0,c
  2891  000872  D00D               	goto	l6013
  2892  000874                     l6011:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 407: S1mode = 1;
  2896  000874  0E00               	movlw	0
  2897  000876  6E5C               	movwf	_S1mode+1,c
  2898  000878  0E01               	movlw	1
  2899  00087A  6E5B               	movwf	_S1mode,c
  2900                           
  2901                           ;main.c: 408: soupAlign = 1;
  2902  00087C  0E00               	movlw	0
  2903  00087E  6E4E               	movwf	_soupAlign+1,c
  2904  000880  0E01               	movlw	1
  2905  000882                     L4:
  2906  000882  6E4D               	movwf	_soupAlign,c
  2907                           
  2908                           ;main.c: 409: soupI = 1;
  2909  000884  0E00               	movlw	0
  2910  000886  6E4C               	movwf	_soupI+1,c
  2911  000888  0E01               	movlw	1
  2912  00088A  6E4B               	movwf	_soupI,c
  2913                           
  2914                           ;main.c: 410: }
  2915  00088C  D069               	goto	l6053
  2916  00088E                     l6013:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 411: else{
  2920                           ;main.c: 412: S1mode = 4;
  2921  00088E  0E00               	movlw	0
  2922  000890  6E5C               	movwf	_S1mode+1,c
  2923  000892  0E04               	movlw	4
  2924  000894  6E5B               	movwf	_S1mode,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;main.c: 414: updateS1(soupAlign);
  2928  000896  C04D  F021         	movff	_soupAlign,updateS1@mode
  2929  00089A  C04E  F022         	movff	_soupAlign+1,updateS1@mode+1
  2930  00089E  ECB8  F00A         	call	_updateS1	;wreg free
  2931                           
  2932                           ;main.c: 415: readADC(1);
  2933  0008A2  0E01               	movlw	1
  2934  0008A4  ECC1  F015         	call	_readADC
  2935                           
  2936                           ;main.c: 417: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  2937  0008A8  0100               	movlb	0	; () banked
  2938  0008AA  51AB               	movf	main@prevSoupIR& (0+255),w,b
  2939  0008AC  5CC3               	subwf	4035,w,c	;volatile
  2940  0008AE  0100               	movlb	0	; () banked
  2941  0008B0  51AC               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2942  0008B2  58C4               	subwfb	4036,w,c	;volatile
  2943  0008B4  B0D8               	btfsc	status,0,c
  2944  0008B6  D00B               	goto	l6025
  2945                           
  2946                           ; BSR set to: 0
  2947  0008B8  0EAB               	movlw	171
  2948  0008BA  5CC3               	subwf	4035,w,c	;volatile
  2949  0008BC  0E03               	movlw	3
  2950  0008BE  58C4               	subwfb	4036,w,c	;volatile
  2951  0008C0  A0D8               	btfss	status,0,c
  2952  0008C2  D005               	goto	l6025
  2953                           
  2954                           ; BSR set to: 0
  2955  0008C4  0E00               	movlw	0
  2956  0008C6  0100               	movlb	0	; () banked
  2957  0008C8  6FBB               	movwf	(_labelState+1)& (0+255),b
  2958  0008CA  0E64               	movlw	100
  2959  0008CC  D7B1               	goto	L12
  2960  0008CE                     l6025:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 418: prevSoupIR = ADRES;
  2964  0008CE  CFC3 F0AB          	movff	4035,main@prevSoupIR	;volatile
  2965  0008D2  CFC4 F0AC          	movff	4036,main@prevSoupIR+1	;volatile
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;main.c: 419: }
  2969                           ;main.c: 420: }
  2970                           
  2971                           ; BSR set to: 0
  2972  0008D6  D044               	goto	l6053
  2973  0008D8                     l6027:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 421: else{
  2977                           ;main.c: 422: if(labelState == 101){soupNL++;}
  2978  0008D8  0E65               	movlw	101
  2979  0008DA  0100               	movlb	0	; () banked
  2980  0008DC  19BA               	xorwf	_labelState& (0+255),w,b
  2981  0008DE  0100               	movlb	0	; () banked
  2982  0008E0  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  2983  0008E2  A4D8               	btfss	status,2,c
  2984  0008E4  D004               	goto	l6031
  2985                           
  2986                           ; BSR set to: 0
  2987  0008E6  0100               	movlb	0	; () banked
  2988  0008E8  4B9F               	infsnz	main@soupNL& (0+255),f,b
  2989  0008EA  2BA0               	incf	(main@soupNL+1)& (0+255),f,b
  2990  0008EC  D00A               	goto	l6035
  2991  0008EE                     l6031:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 423: else if(labelState == 100){soupL++;}
  2995  0008EE  0E64               	movlw	100
  2996  0008F0  0100               	movlb	0	; () banked
  2997  0008F2  19BA               	xorwf	_labelState& (0+255),w,b
  2998  0008F4  0100               	movlb	0	; () banked
  2999  0008F6  11BB               	iorwf	(_labelState+1)& (0+255),w,b
  3000  0008F8  A4D8               	btfss	status,2,c
  3001  0008FA  D003               	goto	l6035
  3002                           
  3003                           ; BSR set to: 0
  3004  0008FC  0100               	movlb	0	; () banked
  3005  0008FE  4B9D               	infsnz	main@soupL& (0+255),f,b
  3006  000900  2B9E               	incf	(main@soupL+1)& (0+255),f,b
  3007  000902                     l6035:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;main.c: 424: soupSteps = 0;
  3011  000902  0E00               	movlw	0
  3012  000904  6E56               	movwf	_soupSteps+1,c
  3013  000906  0E00               	movlw	0
  3014  000908  6E55               	movwf	_soupSteps,c
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 425: prevSoupIR = 0;
  3018  00090A  0E00               	movlw	0
  3019  00090C  0100               	movlb	0	; () banked
  3020  00090E  6FAC               	movwf	(main@prevSoupIR+1)& (0+255),b
  3021  000910  0E00               	movlw	0
  3022  000912  6FAB               	movwf	main@prevSoupIR& (0+255),b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;main.c: 426: labelState = 0;
  3026  000914  0E00               	movlw	0
  3027  000916  0100               	movlb	0	; () banked
  3028  000918  6FBB               	movwf	(_labelState+1)& (0+255),b
  3029  00091A  0E00               	movlw	0
  3030  00091C  6FBA               	movwf	_labelState& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;main.c: 427: if (soupCnt == 0) {soupSort = 0;}
  3034  00091E  0100               	movlb	0	; () banked
  3035  000920  51B8               	movf	_soupCnt& (0+255),w,b
  3036  000922  0100               	movlb	0	; () banked
  3037  000924  11B9               	iorwf	(_soupCnt+1)& (0+255),w,b
  3038  000926  A4D8               	btfss	status,2,c
  3039  000928  D005               	goto	l6045
  3040                           
  3041                           ; BSR set to: 0
  3042  00092A  0E00               	movlw	0
  3043  00092C  0100               	movlb	0	; () banked
  3044  00092E  6FA6               	movwf	(main@soupSort+1)& (0+255),b
  3045  000930  0E00               	movlw	0
  3046  000932  6FA5               	movwf	main@soupSort& (0+255),b
  3047  000934                     l6045:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;main.c: 429: if(s1 == 2 || s1 == 3){S1mode = 3;}
  3051  000934  0E02               	movlw	2
  3052  000936  0100               	movlb	0	; () banked
  3053  000938  19C0               	xorwf	_s1& (0+255),w,b
  3054  00093A  0100               	movlb	0	; () banked
  3055  00093C  11C1               	iorwf	(_s1+1)& (0+255),w,b
  3056  00093E  B4D8               	btfsc	status,2,c
  3057  000940  D007               	goto	l6049
  3058                           
  3059                           ; BSR set to: 0
  3060  000942  0E03               	movlw	3
  3061  000944  0100               	movlb	0	; () banked
  3062  000946  19C0               	xorwf	_s1& (0+255),w,b
  3063  000948  0100               	movlb	0	; () banked
  3064  00094A  11C1               	iorwf	(_s1+1)& (0+255),w,b
  3065  00094C  A4D8               	btfss	status,2,c
  3066  00094E  D004               	goto	l6051
  3067  000950                     l6049:
  3068                           
  3069                           ; BSR set to: 0
  3070  000950  0E00               	movlw	0
  3071  000952  6E5C               	movwf	_S1mode+1,c
  3072  000954  0E03               	movlw	3
  3073  000956  D003               	goto	L5
  3074  000958                     l6051:
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;main.c: 430: else{S1mode = 5;}
  3078  000958  0E00               	movlw	0
  3079  00095A  6E5C               	movwf	_S1mode+1,c
  3080  00095C  0E05               	movlw	5
  3081  00095E                     L5:
  3082  00095E  6E5B               	movwf	_S1mode,c
  3083  000960                     l6053:
  3084                           
  3085                           ;main.c: 431: }
  3086                           ;main.c: 432: }
  3087                           ;main.c: 436: lcdInst(0b11000000);;
  3088  000960  0EC0               	movlw	192
  3089  000962  EC17  F016         	call	_lcdInst
  3090                           
  3091                           ;main.c: 438: readADC(0);
  3092  000966  0E00               	movlw	0
  3093  000968  ECC1  F015         	call	_readADC
  3094                           
  3095                           ;main.c: 439: if(ADRES <= 0x130){
  3096  00096C  0E31               	movlw	49
  3097  00096E  5CC3               	subwf	4035,w,c	;volatile
  3098  000970  0E01               	movlw	1
  3099  000972  58C4               	subwfb	4036,w,c	;volatile
  3100  000974  B0D8               	btfsc	status,0,c
  3101  000976  D026               	goto	l6069
  3102                           
  3103                           ;main.c: 440: prevSodaLoad = seconds;
  3104  000978  C0BC  F09B         	movff	_seconds,main@prevSodaLoad
  3105  00097C  C0BD  F09C         	movff	_seconds+1,main@prevSodaLoad+1
  3106                           
  3107                           ;main.c: 441: sodaCnt = 1;
  3108  000980  0E00               	movlw	0
  3109  000982  0100               	movlb	0	; () banked
  3110  000984  6FB7               	movwf	(_sodaCnt+1)& (0+255),b
  3111  000986  0E01               	movlw	1
  3112  000988  6FB6               	movwf	_sodaCnt& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;main.c: 442: if (!sodaSort){
  3116  00098A  0100               	movlb	0	; () banked
  3117  00098C  51A7               	movf	main@sodaSort& (0+255),w,b
  3118  00098E  0100               	movlb	0	; () banked
  3119  000990  11A8               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3120  000992  A4D8               	btfss	status,2,c
  3121  000994  D017               	goto	l6069
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 443: sodaSort = 1;
  3125  000996  0E00               	movlw	0
  3126  000998  0100               	movlb	0	; () banked
  3127  00099A  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  3128  00099C  0E01               	movlw	1
  3129  00099E  6FA7               	movwf	main@sodaSort& (0+255),b
  3130                           
  3131                           ;main.c: 444: sodaSteps = 0;
  3132  0009A0  0E00               	movlw	0
  3133  0009A2  6E54               	movwf	_sodaSteps+1,c
  3134  0009A4  0E00               	movlw	0
  3135  0009A6  6E53               	movwf	_sodaSteps,c
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 445: _delay((unsigned long)((150)*(32000000/4000.0)));
  3139  0009A8  0E07               	movlw	7
  3140  0009AA  0100               	movlb	0	; () banked
  3141  0009AC  6F92               	movwf	(??_main+1)& (0+255),b
  3142  0009AE  0E17               	movlw	23
  3143  0009B0  0100               	movlb	0	; () banked
  3144  0009B2  6F91               	movwf	??_main& (0+255),b
  3145  0009B4  0E6A               	movlw	106
  3146  0009B6                     u8047:
  3147  0009B6  2EE8               	decfsz	wreg,f,c
  3148  0009B8  D7FE               	bra	u8047
  3149  0009BA  2F91               	decfsz	??_main& (0+255),f,b
  3150  0009BC  D7FC               	bra	u8047
  3151  0009BE  2F92               	decfsz	(??_main+1)& (0+255),f,b
  3152  0009C0  D7FA               	bra	u8047
  3153  0009C2  F000               	nop	
  3154  0009C4                     l6069:
  3155                           
  3156                           ;main.c: 446: }
  3157                           ;main.c: 447: }
  3158                           ;main.c: 451: if (sodaSort){
  3159  0009C4  0100               	movlb	0	; () banked
  3160  0009C6  51A7               	movf	main@sodaSort& (0+255),w,b
  3161  0009C8  0100               	movlb	0	; () banked
  3162  0009CA  11A8               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3163  0009CC  B4D8               	btfsc	status,2,c
  3164  0009CE  D155               	goto	l6181
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;main.c: 452: if(sodaSteps < 48){
  3168  0009D0  BE54               	btfsc	_sodaSteps+1,7,c
  3169  0009D2  D006               	goto	l6073
  3170  0009D4  5054               	movf	_sodaSteps+1,w,c
  3171  0009D6  E108               	bnz	l6075
  3172  0009D8  0E30               	movlw	48
  3173  0009DA  5C53               	subwf	_sodaSteps,w,c
  3174  0009DC  B0D8               	btfsc	status,0,c
  3175  0009DE  D004               	goto	l6075
  3176  0009E0                     l6073:
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;main.c: 454: S2mode = 4;
  3180  0009E0  0E00               	movlw	0
  3181  0009E2  6E5A               	movwf	_S2mode+1,c
  3182  0009E4  0E04               	movlw	4
  3183  0009E6  D065               	goto	L8
  3184  0009E8                     l6075:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 456: else if (sodaSteps < (48+43)){
  3188  0009E8  BE54               	btfsc	_sodaSteps+1,7,c
  3189  0009EA  D006               	goto	l6077
  3190  0009EC  5054               	movf	_sodaSteps+1,w,c
  3191  0009EE  E108               	bnz	l6079
  3192  0009F0  0E5B               	movlw	91
  3193  0009F2  5C53               	subwf	_sodaSteps,w,c
  3194  0009F4  B0D8               	btfsc	status,0,c
  3195  0009F6  D004               	goto	l6079
  3196  0009F8                     l6077:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 457: S3mode = 1;
  3200  0009F8  0E00               	movlw	0
  3201  0009FA  6E58               	movwf	_S3mode+1,c
  3202  0009FC  0E01               	movlw	1
  3203  0009FE  D13C               	goto	L11
  3204  000A00                     l6079:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 460: else if (sodaSteps < (48+43+10)){
  3208  000A00  BE54               	btfsc	_sodaSteps+1,7,c
  3209  000A02  D006               	goto	l6081
  3210  000A04  5054               	movf	_sodaSteps+1,w,c
  3211  000A06  E10C               	bnz	l6083
  3212  000A08  0E65               	movlw	101
  3213  000A0A  5C53               	subwf	_sodaSteps,w,c
  3214  000A0C  B0D8               	btfsc	status,0,c
  3215  000A0E  D008               	goto	l6083
  3216  000A10                     l6081:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 461: S3mode = 4;
  3220  000A10  0E00               	movlw	0
  3221  000A12  6E58               	movwf	_S3mode+1,c
  3222  000A14  0E04               	movlw	4
  3223  000A16  6E57               	movwf	_S3mode,c
  3224                           
  3225                           ;main.c: 462: S2mode = 1;
  3226  000A18  0E00               	movlw	0
  3227  000A1A  6E5A               	movwf	_S2mode+1,c
  3228  000A1C  0E01               	movlw	1
  3229  000A1E  D049               	goto	L8
  3230  000A20                     l6083:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 464: else if (sodaSteps < (48+43+10+15)){
  3234  000A20  BE54               	btfsc	_sodaSteps+1,7,c
  3235  000A22  D006               	goto	l6085
  3236  000A24  5054               	movf	_sodaSteps+1,w,c
  3237  000A26  E11B               	bnz	l6093
  3238  000A28  0E74               	movlw	116
  3239  000A2A  5C53               	subwf	_sodaSteps,w,c
  3240  000A2C  B0D8               	btfsc	status,0,c
  3241  000A2E  D017               	goto	l6093
  3242  000A30                     l6085:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 465: S3mode = 4;
  3246  000A30  0E00               	movlw	0
  3247  000A32  6E58               	movwf	_S3mode+1,c
  3248  000A34  0E04               	movlw	4
  3249  000A36  6E57               	movwf	_S3mode,c
  3250                           
  3251                           ;main.c: 466: S2mode = 0;
  3252  000A38  0E00               	movlw	0
  3253  000A3A  6E5A               	movwf	_S2mode+1,c
  3254  000A3C  0E00               	movlw	0
  3255  000A3E  6E59               	movwf	_S2mode,c
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 467: readADC(3);
  3259  000A40  0E03               	movlw	3
  3260  000A42  ECC1  F015         	call	_readADC
  3261                           
  3262                           ;main.c: 468: if(ADRESH<=1){tabState = 1;}
  3263  000A46  0E02               	movlw	2
  3264  000A48  60C4               	cpfslt	4036,c	;volatile
  3265  000A4A  D004               	goto	l293
  3266  000A4C  0E00               	movlw	0
  3267  000A4E  6E52               	movwf	_tabState+1,c
  3268  000A50  0E01               	movlw	1
  3269  000A52  6E51               	movwf	_tabState,c
  3270  000A54                     l293:
  3271                           
  3272                           ;main.c: 470: s2 = 1;
  3273  000A54  0E00               	movlw	0
  3274  000A56  6E5E               	movwf	_s2+1,c
  3275  000A58  0E01               	movlw	1
  3276  000A5A  6E5D               	movwf	_s2,c
  3277                           
  3278                           ;main.c: 471: }
  3279  000A5C  D10E               	goto	l6181
  3280  000A5E                     l6093:
  3281                           
  3282                           ;main.c: 472: else if (sodaSteps < (48+43+10+15+4)){
  3283  000A5E  BE54               	btfsc	_sodaSteps+1,7,c
  3284  000A60  D006               	goto	l6095
  3285  000A62  5054               	movf	_sodaSteps+1,w,c
  3286  000A64  E117               	bnz	l6103
  3287  000A66  0E78               	movlw	120
  3288  000A68  5C53               	subwf	_sodaSteps,w,c
  3289  000A6A  B0D8               	btfsc	status,0,c
  3290  000A6C  D013               	goto	l6103
  3291  000A6E                     l6095:
  3292                           
  3293                           ;main.c: 473: S3mode = 4;
  3294  000A6E  0E00               	movlw	0
  3295  000A70  6E58               	movwf	_S3mode+1,c
  3296  000A72  0E04               	movlw	4
  3297  000A74  6E57               	movwf	_S3mode,c
  3298                           
  3299                           ;main.c: 474: S2mode = 1;
  3300  000A76  0E00               	movlw	0
  3301  000A78  6E5A               	movwf	_S2mode+1,c
  3302  000A7A  0E01               	movlw	1
  3303  000A7C  6E59               	movwf	_S2mode,c
  3304                           
  3305                           ;main.c: 475: readADC(3);
  3306  000A7E  0E03               	movlw	3
  3307  000A80  ECC1  F015         	call	_readADC
  3308                           
  3309                           ;main.c: 476: if(ADRESH<=1){tabState = 1;}
  3310  000A84  0E02               	movlw	2
  3311  000A86  60C4               	cpfslt	4036,c	;volatile
  3312  000A88  D0F8               	goto	l6181
  3313  000A8A  0E00               	movlw	0
  3314  000A8C  6E52               	movwf	_tabState+1,c
  3315  000A8E  0E01               	movlw	1
  3316  000A90  6E51               	movwf	_tabState,c
  3317                           
  3318                           ;main.c: 478: }
  3319  000A92  D0F3               	goto	l6181
  3320  000A94                     l6103:
  3321                           
  3322                           ;main.c: 479: else if (sodaSteps < (48+43+10+15+14)){
  3323  000A94  BE54               	btfsc	_sodaSteps+1,7,c
  3324  000A96  D006               	goto	l6105
  3325  000A98  5054               	movf	_sodaSteps+1,w,c
  3326  000A9A  E10D               	bnz	l6107
  3327  000A9C  0E82               	movlw	130
  3328  000A9E  5C53               	subwf	_sodaSteps,w,c
  3329  000AA0  B0D8               	btfsc	status,0,c
  3330  000AA2  D009               	goto	l6107
  3331  000AA4                     l6105:
  3332                           
  3333                           ;main.c: 480: S3mode = 4;
  3334  000AA4  0E00               	movlw	0
  3335  000AA6  6E58               	movwf	_S3mode+1,c
  3336  000AA8  0E04               	movlw	4
  3337  000AAA  6E57               	movwf	_S3mode,c
  3338                           
  3339                           ;main.c: 481: S2mode = 2;
  3340  000AAC  0E00               	movlw	0
  3341  000AAE  6E5A               	movwf	_S2mode+1,c
  3342  000AB0  0E02               	movlw	2
  3343  000AB2                     L8:
  3344  000AB2  6E59               	movwf	_S2mode,c
  3345                           
  3346                           ;main.c: 482: }
  3347  000AB4  D0E2               	goto	l6181
  3348  000AB6                     l6107:
  3349                           
  3350                           ;main.c: 483: else if (tabState == 1){
  3351  000AB6  0451               	decf	_tabState,w,c
  3352  000AB8  1052               	iorwf	_tabState+1,w,c
  3353  000ABA  A4D8               	btfss	status,2,c
  3354  000ABC  D044               	goto	l6131
  3355                           
  3356                           ;main.c: 484: if(sodaSteps < (48+43+10+15+14+30)){
  3357  000ABE  BE54               	btfsc	_sodaSteps+1,7,c
  3358  000AC0  D006               	goto	l6111
  3359  000AC2  5054               	movf	_sodaSteps+1,w,c
  3360  000AC4  E108               	bnz	l6113
  3361  000AC6  0EA0               	movlw	160
  3362  000AC8  5C53               	subwf	_sodaSteps,w,c
  3363  000ACA  B0D8               	btfsc	status,0,c
  3364  000ACC  D004               	goto	l6113
  3365  000ACE                     l6111:
  3366                           
  3367                           ;main.c: 485: S3mode = 1;
  3368  000ACE  0E00               	movlw	0
  3369  000AD0  6E58               	movwf	_S3mode+1,c
  3370  000AD2  0E01               	movlw	1
  3371  000AD4  D047               	goto	L9
  3372  000AD6                     l6113:
  3373                           
  3374                           ;main.c: 489: else if(sodaSteps < (48+43+10+15+14+30+55)){
  3375  000AD6  BE54               	btfsc	_sodaSteps+1,7,c
  3376  000AD8  D006               	goto	l6115
  3377  000ADA  5054               	movf	_sodaSteps+1,w,c
  3378  000ADC  E110               	bnz	l6117
  3379  000ADE  0ED7               	movlw	215
  3380  000AE0  5C53               	subwf	_sodaSteps,w,c
  3381  000AE2  B0D8               	btfsc	status,0,c
  3382  000AE4  D00C               	goto	l6117
  3383  000AE6                     l6115:
  3384                           
  3385                           ;main.c: 490: S3mode = 2;
  3386  000AE6  0E00               	movlw	0
  3387  000AE8  6E58               	movwf	_S3mode+1,c
  3388  000AEA  0E02               	movlw	2
  3389  000AEC  6E57               	movwf	_S3mode,c
  3390                           
  3391                           ;main.c: 491: S2mode = 4;
  3392  000AEE  0E00               	movlw	0
  3393  000AF0  6E5A               	movwf	_S2mode+1,c
  3394  000AF2  0E04               	movlw	4
  3395  000AF4  6E59               	movwf	_S2mode,c
  3396                           
  3397                           ;main.c: 492: sodaAlign = 2;
  3398  000AF6  0E00               	movlw	0
  3399  000AF8  6E50               	movwf	_sodaAlign+1,c
  3400  000AFA  0E02               	movlw	2
  3401  000AFC  D051               	goto	L10
  3402  000AFE                     l6117:
  3403                           
  3404                           ;main.c: 495: else {
  3405                           ;main.c: 496: S2mode = 4;
  3406  000AFE  0E00               	movlw	0
  3407  000B00  6E5A               	movwf	_S2mode+1,c
  3408  000B02  0E04               	movlw	4
  3409  000B04  6E59               	movwf	_S2mode,c
  3410                           
  3411                           ;main.c: 497: S3mode = 4;
  3412  000B06  0E00               	movlw	0
  3413  000B08  6E58               	movwf	_S3mode+1,c
  3414  000B0A  0E04               	movlw	4
  3415  000B0C  6E57               	movwf	_S3mode,c
  3416                           
  3417                           ;main.c: 498: updateS3(sodaAlign);
  3418  000B0E  C04F  F021         	movff	_sodaAlign,updateS3@mode
  3419  000B12  C050  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3420  000B16  EC8D  F00E         	call	_updateS3	;wreg free
  3421                           
  3422                           ;main.c: 499: readADC(5);
  3423  000B1A  0E05               	movlw	5
  3424  000B1C  ECC1  F015         	call	_readADC
  3425                           
  3426                           ;main.c: 500: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3427  000B20  0100               	movlb	0	; () banked
  3428  000B22  51A9               	movf	main@prevSodaIR& (0+255),w,b
  3429  000B24  5CC3               	subwf	4035,w,c	;volatile
  3430  000B26  0100               	movlb	0	; () banked
  3431  000B28  51AA               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3432  000B2A  58C4               	subwfb	4036,w,c	;volatile
  3433  000B2C  B0D8               	btfsc	status,0,c
  3434  000B2E  D061               	goto	l6153
  3435                           
  3436                           ; BSR set to: 0
  3437  000B30  0EAB               	movlw	171
  3438  000B32  5CC3               	subwf	4035,w,c	;volatile
  3439  000B34  0E03               	movlw	3
  3440  000B36  58C4               	subwfb	4036,w,c	;volatile
  3441  000B38  A0D8               	btfss	status,0,c
  3442  000B3A  D05B               	goto	l6153
  3443                           
  3444                           ; BSR set to: 0
  3445  000B3C  0E00               	movlw	0
  3446  000B3E  6E52               	movwf	_tabState+1,c
  3447  000B40  0E65               	movlw	101
  3448  000B42  6E51               	movwf	_tabState,c
  3449  000B44  D056               	goto	l6153
  3450  000B46                     l6131:
  3451                           
  3452                           ;main.c: 505: else if(tabState == 0){
  3453  000B46  5051               	movf	_tabState,w,c
  3454  000B48  1052               	iorwf	_tabState+1,w,c
  3455  000B4A  A4D8               	btfss	status,2,c
  3456  000B4C  D057               	goto	l6155
  3457                           
  3458                           ;main.c: 506: if(sodaSteps < (48+43+10+15+14+(43+75))){
  3459  000B4E  BE54               	btfsc	_sodaSteps+1,7,c
  3460  000B50  D006               	goto	l6135
  3461  000B52  5054               	movf	_sodaSteps+1,w,c
  3462  000B54  E112               	bnz	l6137
  3463  000B56  0EF8               	movlw	248
  3464  000B58  5C53               	subwf	_sodaSteps,w,c
  3465  000B5A  B0D8               	btfsc	status,0,c
  3466  000B5C  D00E               	goto	l6137
  3467  000B5E                     l6135:
  3468                           
  3469                           ;main.c: 507: S3mode = 2;
  3470  000B5E  0E00               	movlw	0
  3471  000B60  6E58               	movwf	_S3mode+1,c
  3472  000B62  0E02               	movlw	2
  3473  000B64                     L9:
  3474  000B64  6E57               	movwf	_S3mode,c
  3475                           
  3476                           ;main.c: 508: S2mode = 4;
  3477  000B66  0E00               	movlw	0
  3478  000B68  6E5A               	movwf	_S2mode+1,c
  3479  000B6A  0E04               	movlw	4
  3480  000B6C  6E59               	movwf	_S2mode,c
  3481                           
  3482                           ;main.c: 509: sodaCnt = 0;
  3483  000B6E  0E00               	movlw	0
  3484  000B70  0100               	movlb	0	; () banked
  3485  000B72  6FB7               	movwf	(_sodaCnt+1)& (0+255),b
  3486  000B74  0E00               	movlw	0
  3487  000B76  6FB6               	movwf	_sodaCnt& (0+255),b
  3488                           
  3489                           ;main.c: 510: }
  3490  000B78  D080               	goto	l6181
  3491  000B7A                     l6137:
  3492                           
  3493                           ;main.c: 511: else if(sodaSteps < (48+43+10+15+14+(43+75)+65)){
  3494  000B7A  BE54               	btfsc	_sodaSteps+1,7,c
  3495  000B7C  D006               	goto	l6139
  3496  000B7E  0E39               	movlw	57
  3497  000B80  5C53               	subwf	_sodaSteps,w,c
  3498  000B82  0E01               	movlw	1
  3499  000B84  5854               	subwfb	_sodaSteps+1,w,c
  3500  000B86  B0D8               	btfsc	status,0,c
  3501  000B88  D011               	goto	l6141
  3502  000B8A                     l6139:
  3503                           
  3504                           ;main.c: 512: S3mode = 1;
  3505  000B8A  0E00               	movlw	0
  3506  000B8C  6E58               	movwf	_S3mode+1,c
  3507  000B8E  0E01               	movlw	1
  3508  000B90  6E57               	movwf	_S3mode,c
  3509                           
  3510                           ;main.c: 513: S2mode = 4;
  3511  000B92  0E00               	movlw	0
  3512  000B94  6E5A               	movwf	_S2mode+1,c
  3513  000B96  0E04               	movlw	4
  3514  000B98  6E59               	movwf	_S2mode,c
  3515                           
  3516                           ;main.c: 514: sodaAlign = 1;
  3517  000B9A  0E00               	movlw	0
  3518  000B9C  6E50               	movwf	_sodaAlign+1,c
  3519  000B9E  0E01               	movlw	1
  3520  000BA0                     L10:
  3521  000BA0  6E4F               	movwf	_sodaAlign,c
  3522                           
  3523                           ;main.c: 515: sodaI = 1;
  3524  000BA2  0E00               	movlw	0
  3525  000BA4  6E4A               	movwf	_sodaI+1,c
  3526  000BA6  0E01               	movlw	1
  3527  000BA8  6E49               	movwf	_sodaI,c
  3528                           
  3529                           ;main.c: 516: }
  3530  000BAA  D067               	goto	l6181
  3531  000BAC                     l6141:
  3532                           
  3533                           ;main.c: 517: else {
  3534                           ;main.c: 518: S3mode = 4;
  3535  000BAC  0E00               	movlw	0
  3536  000BAE  6E58               	movwf	_S3mode+1,c
  3537  000BB0  0E04               	movlw	4
  3538  000BB2  6E57               	movwf	_S3mode,c
  3539                           
  3540                           ;main.c: 519: S2mode = 4;
  3541  000BB4  0E00               	movlw	0
  3542  000BB6  6E5A               	movwf	_S2mode+1,c
  3543  000BB8  0E04               	movlw	4
  3544  000BBA  6E59               	movwf	_S2mode,c
  3545                           
  3546                           ;main.c: 520: updateS3(sodaAlign);
  3547  000BBC  C04F  F021         	movff	_sodaAlign,updateS3@mode
  3548  000BC0  C050  F022         	movff	_sodaAlign+1,updateS3@mode+1
  3549  000BC4  EC8D  F00E         	call	_updateS3	;wreg free
  3550                           
  3551                           ;main.c: 521: readADC(5);
  3552  000BC8  0E05               	movlw	5
  3553  000BCA  ECC1  F015         	call	_readADC
  3554                           
  3555                           ;main.c: 522: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  3556  000BCE  0100               	movlb	0	; () banked
  3557  000BD0  51A9               	movf	main@prevSodaIR& (0+255),w,b
  3558  000BD2  5CC3               	subwf	4035,w,c	;volatile
  3559  000BD4  0100               	movlb	0	; () banked
  3560  000BD6  51AA               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3561  000BD8  58C4               	subwfb	4036,w,c	;volatile
  3562  000BDA  B0D8               	btfsc	status,0,c
  3563  000BDC  D00A               	goto	l6153
  3564                           
  3565                           ; BSR set to: 0
  3566  000BDE  0EAB               	movlw	171
  3567  000BE0  5CC3               	subwf	4035,w,c	;volatile
  3568  000BE2  0E03               	movlw	3
  3569  000BE4  58C4               	subwfb	4036,w,c	;volatile
  3570  000BE6  A0D8               	btfss	status,0,c
  3571  000BE8  D004               	goto	l6153
  3572                           
  3573                           ; BSR set to: 0
  3574  000BEA  0E00               	movlw	0
  3575  000BEC  6E52               	movwf	_tabState+1,c
  3576  000BEE  0E64               	movlw	100
  3577  000BF0  D7A8               	goto	L13
  3578  000BF2                     l6153:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;main.c: 523: prevSodaIR = ADRES;
  3582  000BF2  CFC3 F0A9          	movff	4035,main@prevSodaIR	;volatile
  3583  000BF6  CFC4 F0AA          	movff	4036,main@prevSodaIR+1	;volatile
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;main.c: 525: }
  3587                           ;main.c: 526: }
  3588                           
  3589                           ; BSR set to: 0
  3590  000BFA  D03F               	goto	l6181
  3591  000BFC                     l6155:
  3592                           
  3593                           ;main.c: 527: else{
  3594                           ;main.c: 528: if(tabState==101){sodaT++;}
  3595  000BFC  0E65               	movlw	101
  3596  000BFE  1851               	xorwf	_tabState,w,c
  3597  000C00  1052               	iorwf	_tabState+1,w,c
  3598  000C02  A4D8               	btfss	status,2,c
  3599  000C04  D004               	goto	l6159
  3600  000C06  0100               	movlb	0	; () banked
  3601  000C08  4BA1               	infsnz	main@sodaT& (0+255),f,b
  3602  000C0A  2BA2               	incf	(main@sodaT+1)& (0+255),f,b
  3603  000C0C  D008               	goto	l6163
  3604  000C0E                     l6159:
  3605                           
  3606                           ;main.c: 529: else if(tabState==100){sodaNT++;}
  3607  000C0E  0E64               	movlw	100
  3608  000C10  1851               	xorwf	_tabState,w,c
  3609  000C12  1052               	iorwf	_tabState+1,w,c
  3610  000C14  A4D8               	btfss	status,2,c
  3611  000C16  D003               	goto	l6163
  3612  000C18  0100               	movlb	0	; () banked
  3613  000C1A  4BA3               	infsnz	main@sodaNT& (0+255),f,b
  3614  000C1C  2BA4               	incf	(main@sodaNT+1)& (0+255),f,b
  3615  000C1E                     l6163:
  3616                           
  3617                           ;main.c: 530: sodaSteps = 0;
  3618  000C1E  0E00               	movlw	0
  3619  000C20  6E54               	movwf	_sodaSteps+1,c
  3620  000C22  0E00               	movlw	0
  3621  000C24  6E53               	movwf	_sodaSteps,c
  3622                           
  3623                           ;main.c: 531: tabState = 0;
  3624  000C26  0E00               	movlw	0
  3625  000C28  6E52               	movwf	_tabState+1,c
  3626  000C2A  0E00               	movlw	0
  3627  000C2C  6E51               	movwf	_tabState,c
  3628                           
  3629                           ;main.c: 532: prevSodaIR = 0;
  3630  000C2E  0E00               	movlw	0
  3631  000C30  0100               	movlb	0	; () banked
  3632  000C32  6FAA               	movwf	(main@prevSodaIR+1)& (0+255),b
  3633  000C34  0E00               	movlw	0
  3634  000C36  6FA9               	movwf	main@prevSodaIR& (0+255),b
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;main.c: 533: if (sodaCnt == 0) {sodaSort = 0;}
  3638  000C38  0100               	movlb	0	; () banked
  3639  000C3A  51B6               	movf	_sodaCnt& (0+255),w,b
  3640  000C3C  0100               	movlb	0	; () banked
  3641  000C3E  11B7               	iorwf	(_sodaCnt+1)& (0+255),w,b
  3642  000C40  A4D8               	btfss	status,2,c
  3643  000C42  D005               	goto	l6173
  3644                           
  3645                           ; BSR set to: 0
  3646  000C44  0E00               	movlw	0
  3647  000C46  0100               	movlb	0	; () banked
  3648  000C48  6FA8               	movwf	(main@sodaSort+1)& (0+255),b
  3649  000C4A  0E00               	movlw	0
  3650  000C4C  6FA7               	movwf	main@sodaSort& (0+255),b
  3651  000C4E                     l6173:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;main.c: 535: if(s3 == 2 || s3 == 3){S3mode = 3;}
  3655  000C4E  0E02               	movlw	2
  3656  000C50  0100               	movlb	0	; () banked
  3657  000C52  19BE               	xorwf	_s3& (0+255),w,b
  3658  000C54  0100               	movlb	0	; () banked
  3659  000C56  11BF               	iorwf	(_s3+1)& (0+255),w,b
  3660  000C58  B4D8               	btfsc	status,2,c
  3661  000C5A  D007               	goto	l6177
  3662                           
  3663                           ; BSR set to: 0
  3664  000C5C  0E03               	movlw	3
  3665  000C5E  0100               	movlb	0	; () banked
  3666  000C60  19BE               	xorwf	_s3& (0+255),w,b
  3667  000C62  0100               	movlb	0	; () banked
  3668  000C64  11BF               	iorwf	(_s3+1)& (0+255),w,b
  3669  000C66  A4D8               	btfss	status,2,c
  3670  000C68  D004               	goto	l6179
  3671  000C6A                     l6177:
  3672                           
  3673                           ; BSR set to: 0
  3674  000C6A  0E00               	movlw	0
  3675  000C6C  6E58               	movwf	_S3mode+1,c
  3676  000C6E  0E03               	movlw	3
  3677  000C70  D003               	goto	L11
  3678  000C72                     l6179:
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;main.c: 536: else{S3mode = 5;}
  3682  000C72  0E00               	movlw	0
  3683  000C74  6E58               	movwf	_S3mode+1,c
  3684  000C76  0E05               	movlw	5
  3685  000C78                     L11:
  3686  000C78  6E57               	movwf	_S3mode,c
  3687  000C7A                     l6181:
  3688                           
  3689                           ;main.c: 537: }
  3690                           ;main.c: 538: }
  3691                           ;main.c: 541: if(seconds%7==2){PWM2slow(750);}
  3692  000C7A  C0BC  F021         	movff	_seconds,___awmod@dividend
  3693  000C7E  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3694  000C82  0E00               	movlw	0
  3695  000C84  6E24               	movwf	___awmod@divisor+1,c
  3696  000C86  0E07               	movlw	7
  3697  000C88  6E23               	movwf	___awmod@divisor,c
  3698  000C8A  EC97  F013         	call	___awmod	;wreg free
  3699  000C8E  0E02               	movlw	2
  3700  000C90  1821               	xorwf	?___awmod,w,c
  3701  000C92  1022               	iorwf	?___awmod+1,w,c
  3702  000C94  A4D8               	btfss	status,2,c
  3703  000C96  D007               	goto	l6185
  3704  000C98  0E02               	movlw	2
  3705  000C9A  6E22               	movwf	PWM2slow@duty+1,c
  3706  000C9C  0EEE               	movlw	238
  3707  000C9E  6E21               	movwf	PWM2slow@duty,c
  3708  000CA0  ECB5  F014         	call	_PWM2slow	;wreg free
  3709  000CA4  D032               	goto	l323
  3710  000CA6                     l6185:
  3711                           
  3712                           ;main.c: 542: else if(seconds%7==5){PWM2(900,2);}
  3713  000CA6  C0BC  F021         	movff	_seconds,___awmod@dividend
  3714  000CAA  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3715  000CAE  0E00               	movlw	0
  3716  000CB0  6E24               	movwf	___awmod@divisor+1,c
  3717  000CB2  0E07               	movlw	7
  3718  000CB4  6E23               	movwf	___awmod@divisor,c
  3719  000CB6  EC97  F013         	call	___awmod	;wreg free
  3720  000CBA  0E05               	movlw	5
  3721  000CBC  1821               	xorwf	?___awmod,w,c
  3722  000CBE  1022               	iorwf	?___awmod+1,w,c
  3723  000CC0  A4D8               	btfss	status,2,c
  3724  000CC2  D00B               	goto	l6189
  3725  000CC4  0E03               	movlw	3
  3726  000CC6  6E22               	movwf	PWM2@duty+1,c
  3727  000CC8  0E84               	movlw	132
  3728  000CCA  6E21               	movwf	PWM2@duty,c
  3729  000CCC  0E00               	movlw	0
  3730  000CCE  6E24               	movwf	PWM2@dir+1,c
  3731  000CD0  0E02               	movlw	2
  3732  000CD2  6E23               	movwf	PWM2@dir,c
  3733  000CD4  EC5B  F013         	call	_PWM2	;wreg free
  3734  000CD8  D018               	goto	l323
  3735  000CDA                     l6189:
  3736                           
  3737                           ;main.c: 543: else if(seconds%7 == 0){PWM2(900, 1);}
  3738  000CDA  C0BC  F021         	movff	_seconds,___awmod@dividend
  3739  000CDE  C0BD  F022         	movff	_seconds+1,___awmod@dividend+1
  3740  000CE2  0E00               	movlw	0
  3741  000CE4  6E24               	movwf	___awmod@divisor+1,c
  3742  000CE6  0E07               	movlw	7
  3743  000CE8  6E23               	movwf	___awmod@divisor,c
  3744  000CEA  EC97  F013         	call	___awmod	;wreg free
  3745  000CEE  5021               	movf	?___awmod,w,c
  3746  000CF0  1022               	iorwf	?___awmod+1,w,c
  3747  000CF2  A4D8               	btfss	status,2,c
  3748  000CF4  D00A               	goto	l323
  3749  000CF6  0E03               	movlw	3
  3750  000CF8  6E22               	movwf	PWM2@duty+1,c
  3751  000CFA  0E84               	movlw	132
  3752  000CFC  6E21               	movwf	PWM2@duty,c
  3753  000CFE  0E00               	movlw	0
  3754  000D00  6E24               	movwf	PWM2@dir+1,c
  3755  000D02  0E01               	movlw	1
  3756  000D04  6E23               	movwf	PWM2@dir,c
  3757  000D06  EC5B  F013         	call	_PWM2	;wreg free
  3758  000D0A                     l323:
  3759                           
  3760                           ;main.c: 545: keyinterrupt();
  3761  000D0A  ECE2  F015         	call	_keyinterrupt	;wreg free
  3762                           
  3763                           ;main.c: 546: }while(keypress==(0) &&
  3764                           ;main.c: 547: ((seconds -prevSoupLoad) < 13 || (seconds-prevSodaLoad) < 13)
  3765                           ;main.c: 548: && seconds < 180);
  3766  000D0E  0100               	movlb	0	; () banked
  3767  000D10  51C2               	movf	_keypress& (0+255),w,b	;volatile
  3768  000D12  A4D8               	btfss	status,2,c
  3769  000D14  D043               	goto	l6201
  3770                           
  3771                           ; BSR set to: 0
  3772  000D16  C099  F091         	movff	main@prevSoupLoad,??_main
  3773  000D1A  C09A  F092         	movff	main@prevSoupLoad+1,??_main+1
  3774  000D1E  0100               	movlb	0	; () banked
  3775  000D20  1F91               	comf	??_main& (0+255),f,b
  3776  000D22  1F92               	comf	(??_main+1)& (0+255),f,b
  3777  000D24  4B91               	infsnz	??_main& (0+255),f,b
  3778  000D26  2B92               	incf	(??_main+1)& (0+255),f,b
  3779  000D28  0100               	movlb	0	; () banked
  3780  000D2A  51BC               	movf	_seconds& (0+255),w,b
  3781  000D2C  0100               	movlb	0	; () banked
  3782  000D2E  2791               	addwf	??_main& (0+255),f,b
  3783  000D30  0100               	movlb	0	; () banked
  3784  000D32  51BD               	movf	(_seconds+1)& (0+255),w,b
  3785  000D34  0100               	movlb	0	; () banked
  3786  000D36  2392               	addwfc	(??_main+1)& (0+255),f,b
  3787  000D38  0100               	movlb	0	; () banked
  3788  000D3A  BF92               	btfsc	(??_main+1)& (0+255),7,b
  3789  000D3C  D024               	goto	l6199
  3790  000D3E  0100               	movlb	0	; () banked
  3791  000D40  5192               	movf	(??_main+1)& (0+255),w,b
  3792  000D42  E105               	bnz	u7840
  3793  000D44  0E0D               	movlw	13
  3794  000D46  0100               	movlb	0	; () banked
  3795  000D48  5D91               	subwf	??_main& (0+255),w,b
  3796  000D4A  A0D8               	btfss	status,0,c
  3797  000D4C  D01C               	goto	l6199
  3798  000D4E                     u7840:
  3799                           
  3800                           ; BSR set to: 0
  3801  000D4E  C09B  F091         	movff	main@prevSodaLoad,??_main
  3802  000D52  C09C  F092         	movff	main@prevSodaLoad+1,??_main+1
  3803  000D56  0100               	movlb	0	; () banked
  3804  000D58  1F91               	comf	??_main& (0+255),f,b
  3805  000D5A  1F92               	comf	(??_main+1)& (0+255),f,b
  3806  000D5C  4B91               	infsnz	??_main& (0+255),f,b
  3807  000D5E  2B92               	incf	(??_main+1)& (0+255),f,b
  3808  000D60  0100               	movlb	0	; () banked
  3809  000D62  51BC               	movf	_seconds& (0+255),w,b
  3810  000D64  0100               	movlb	0	; () banked
  3811  000D66  2791               	addwf	??_main& (0+255),f,b
  3812  000D68  0100               	movlb	0	; () banked
  3813  000D6A  51BD               	movf	(_seconds+1)& (0+255),w,b
  3814  000D6C  0100               	movlb	0	; () banked
  3815  000D6E  2392               	addwfc	(??_main+1)& (0+255),f,b
  3816  000D70  0100               	movlb	0	; () banked
  3817  000D72  BF92               	btfsc	(??_main+1)& (0+255),7,b
  3818  000D74  D008               	goto	l6199
  3819  000D76  0100               	movlb	0	; () banked
  3820  000D78  5192               	movf	(??_main+1)& (0+255),w,b
  3821  000D7A  E110               	bnz	l6201
  3822  000D7C  0E0D               	movlw	13
  3823  000D7E  0100               	movlb	0	; () banked
  3824  000D80  5D91               	subwf	??_main& (0+255),w,b
  3825  000D82  B0D8               	btfsc	status,0,c
  3826  000D84  D00B               	goto	l6201
  3827  000D86                     l6199:
  3828                           
  3829                           ; BSR set to: 0
  3830  000D86  0100               	movlb	0	; () banked
  3831  000D88  BFBD               	btfsc	(_seconds+1)& (0+255),7,b
  3832  000D8A  D4C7               	goto	l5955
  3833  000D8C  0100               	movlb	0	; () banked
  3834  000D8E  51BD               	movf	(_seconds+1)& (0+255),w,b
  3835  000D90  E105               	bnz	l6201
  3836  000D92  0EB4               	movlw	180
  3837  000D94  0100               	movlb	0	; () banked
  3838  000D96  5DBC               	subwf	_seconds& (0+255),w,b
  3839  000D98  A0D8               	btfss	status,0,c
  3840  000D9A  D4BF               	goto	l5955
  3841  000D9C                     l6201:
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;main.c: 550: standby = 1;
  3845  000D9C  0E00               	movlw	0
  3846  000D9E  0100               	movlb	0	; () banked
  3847  000DA0  6FAE               	movwf	(main@standby+1)& (0+255),b
  3848  000DA2  0E01               	movlw	1
  3849  000DA4  6FAD               	movwf	main@standby& (0+255),b
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;main.c: 551: PWM2off();
  3853  000DA6  EC22  F016         	call	_PWM2off	;wreg free
  3854                           
  3855                           ;main.c: 552: PWM1off();
  3856  000DAA  EC27  F016         	call	_PWM1off	;wreg free
  3857                           
  3858                           ;main.c: 553: S1mode = 0;
  3859  000DAE  0E00               	movlw	0
  3860  000DB0  6E5C               	movwf	_S1mode+1,c
  3861  000DB2  0E00               	movlw	0
  3862  000DB4  6E5B               	movwf	_S1mode,c
  3863                           
  3864                           ;main.c: 554: S2mode = 0;
  3865  000DB6  0E00               	movlw	0
  3866  000DB8  6E5A               	movwf	_S2mode+1,c
  3867  000DBA  0E00               	movlw	0
  3868  000DBC  6E59               	movwf	_S2mode,c
  3869                           
  3870                           ;main.c: 555: S3mode = 0;
  3871  000DBE  0E00               	movlw	0
  3872  000DC0  6E58               	movwf	_S3mode+1,c
  3873  000DC2  0E00               	movlw	0
  3874  000DC4  6E57               	movwf	_S3mode,c
  3875                           
  3876                           ;main.c: 558: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  3877  000DC6  C0BC  F025         	movff	_seconds,addRun@dur
  3878  000DCA  C0BD  F026         	movff	_seconds+1,addRun@dur+1
  3879  000DCE  C0B5  F027         	movff	_time+6,addRun@year
  3880  000DD2  6A28               	clrf	addRun@year+1,c
  3881  000DD4  C0B4  F029         	movff	_time+5,addRun@month
  3882  000DD8  6A2A               	clrf	addRun@month+1,c
  3883  000DDA  C0B3  F02B         	movff	_time+4,addRun@date
  3884  000DDE  6A2C               	clrf	addRun@date+1,c
  3885  000DE0  C0B1  F02D         	movff	_time+2,addRun@hours
  3886  000DE4  6A2E               	clrf	addRun@hours+1,c
  3887  000DE6  C0B0  F02F         	movff	_time+1,addRun@mins
  3888  000DEA  6A30               	clrf	addRun@mins+1,c
  3889  000DEC  C0AF  F031         	movff	_time,addRun@secs
  3890  000DF0  6A32               	clrf	addRun@secs+1,c
  3891  000DF2  C0A1  F033         	movff	main@sodaT,addRun@sodaT
  3892  000DF6  C0A2  F034         	movff	main@sodaT+1,addRun@sodaT+1
  3893  000DFA  C0A3  F035         	movff	main@sodaNT,addRun@sodaNT
  3894  000DFE  C0A4  F036         	movff	main@sodaNT+1,addRun@sodaNT+1
  3895  000E02  C09D  F037         	movff	main@soupL,addRun@soupL
  3896  000E06  C09E  F038         	movff	main@soupL+1,addRun@soupL+1
  3897  000E0A  C09F  F039         	movff	main@soupNL,addRun@soupNL
  3898  000E0E  C0A0  F03A         	movff	main@soupNL+1,addRun@soupNL+1
  3899  000E12  EC45  F011         	call	_addRun	;wreg free
  3900                           
  3901                           ;main.c: 560: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3902  000E16  0E01               	movlw	1
  3903  000E18  EC17  F016         	call	_lcdInst
  3904  000E1C  0E34               	movlw	52
  3905  000E1E  0100               	movlb	0	; () banked
  3906  000E20  6F91               	movwf	??_main& (0+255),b
  3907  000E22  0EF1               	movlw	241
  3908  000E24                     u8057:
  3909  000E24  2EE8               	decfsz	wreg,f,c
  3910  000E26  D7FE               	bra	u8057
  3911  000E28  2F91               	decfsz	??_main& (0+255),f,b
  3912  000E2A  D7FC               	bra	u8057
  3913  000E2C  D000               	nop2	
  3914                           
  3915                           ;main.c: 561: printf("Sort done! A:No");
  3916  000E2E  0E46               	movlw	low STR_22
  3917  000E30  6E2D               	movwf	printf@f,c
  3918  000E32  0EFF               	movlw	high STR_22
  3919  000E34  6E2E               	movwf	printf@f+1,c
  3920  000E36  EC36  F007         	call	_printf	;wreg free
  3921                           
  3922                           ;main.c: 562: lcdInst(0b11000000);;
  3923  000E3A  0EC0               	movlw	192
  3924  000E3C  EC17  F016         	call	_lcdInst
  3925                           
  3926                           ;main.c: 563: printf("View Logs? B:Yes");
  3927  000E40  0ED5               	movlw	low STR_23
  3928  000E42  6E2D               	movwf	printf@f,c
  3929  000E44  0EFE               	movlw	high STR_23
  3930  000E46  6E2E               	movwf	printf@f+1,c
  3931  000E48  EC36  F007         	call	_printf	;wreg free
  3932                           
  3933                           ;main.c: 564: keycheck();
  3934  000E4C  ECED  F015         	call	_keycheck	;wreg free
  3935                           
  3936                           ;main.c: 565: if(keypress == 7){
  3937  000E50  0E07               	movlw	7
  3938  000E52  0100               	movlb	0	; () banked
  3939  000E54  19C2               	xorwf	_keypress& (0+255),w,b	;volatile
  3940  000E56  A4D8               	btfss	status,2,c
  3941  000E58  EF33  F000         	goto	l5655
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;main.c: 566: displayLog(1);
  3945  000E5C  0E00               	movlw	0
  3946  000E5E  6E3A               	movwf	displayLog@run+1,c
  3947  000E60  0E01               	movlw	1
  3948  000E62  6E39               	movwf	displayLog@run,c
  3949  000E64  ECFA  F008         	call	_displayLog	;wreg free
  3950  000E68  EF33  F000         	goto	l5655
  3951  000E6C                     __end_of_main:
  3952                           	opt stack 0
  3953                           tblptru	equ	0xFF8
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _updateTime *****************
  3959 ;; Defined at:
  3960 ;;		line 89 in file "I2C.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;		None
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  j               1   35[COMRAM] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;Total ram usage:        1 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    4
  3981 ;; This function calls:
  3982 ;;		_I2C_Master_Read
  3983 ;;		_I2C_Master_Start
  3984 ;;		_I2C_Master_Stop
  3985 ;;		_I2C_Master_Write
  3986 ;; This function is called by:
  3987 ;;		_main
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text1
  3992  00279E                     __ptext1:
  3993                           	opt stack 0
  3994  00279E                     _updateTime:
  3995                           	opt stack 26
  3996                           
  3997                           ;I2C.c: 91: I2C_Master_Start();
  3998                           
  3999                           ;incstack = 0
  4000  00279E  EC30  F016         	call	_I2C_Master_Start	;wreg free
  4001                           
  4002                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  4003  0027A2  0E00               	movlw	0
  4004  0027A4  6E23               	movwf	I2C_Master_Write@d+1,c
  4005  0027A6  0ED0               	movlw	208
  4006  0027A8  6E22               	movwf	I2C_Master_Write@d,c
  4007  0027AA  EC1D  F016         	call	_I2C_Master_Write	;wreg free
  4008                           
  4009                           ;I2C.c: 93: I2C_Master_Write(0x00);
  4010  0027AE  0E00               	movlw	0
  4011  0027B0  6E23               	movwf	I2C_Master_Write@d+1,c
  4012  0027B2  0E00               	movlw	0
  4013  0027B4  6E22               	movwf	I2C_Master_Write@d,c
  4014  0027B6  EC1D  F016         	call	_I2C_Master_Write	;wreg free
  4015                           
  4016                           ;I2C.c: 94: I2C_Master_Stop();
  4017  0027BA  EC2C  F016         	call	_I2C_Master_Stop	;wreg free
  4018                           
  4019                           ;I2C.c: 97: I2C_Master_Start();
  4020  0027BE  EC30  F016         	call	_I2C_Master_Start	;wreg free
  4021                           
  4022                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  4023  0027C2  0E00               	movlw	0
  4024  0027C4  6E23               	movwf	I2C_Master_Write@d+1,c
  4025  0027C6  0ED1               	movlw	209
  4026  0027C8  6E22               	movwf	I2C_Master_Write@d,c
  4027  0027CA  EC1D  F016         	call	_I2C_Master_Write	;wreg free
  4028                           
  4029                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  4030  0027CE  0E00               	movlw	0
  4031  0027D0  6E24               	movwf	updateTime@j,c
  4032  0027D2                     l4009:
  4033  0027D2  0E05               	movlw	5
  4034  0027D4  6424               	cpfsgt	updateTime@j,c
  4035  0027D6  D001               	goto	l4013
  4036  0027D8  D00E               	goto	l4019
  4037  0027DA                     l4013:
  4038                           
  4039                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  4040  0027DA  5024               	movf	updateTime@j,w,c
  4041  0027DC  0D01               	mullw	1
  4042  0027DE  0EAF               	movlw	low _time
  4043  0027E0  24F3               	addwf	prodl,w,c
  4044  0027E2  6ED9               	movwf	fsr2l,c
  4045  0027E4  0E00               	movlw	high _time
  4046  0027E6  20F4               	addwfc	prodh,w,c
  4047  0027E8  6EDA               	movwf	fsr2h,c
  4048  0027EA  0E01               	movlw	1
  4049  0027EC  EC88  F015         	call	_I2C_Master_Read
  4050  0027F0  6EDF               	movwf	indf2,c
  4051  0027F2  2A24               	incf	updateTime@j,f,c
  4052  0027F4  D7EE               	goto	l4009
  4053  0027F6                     l4019:
  4054                           
  4055                           ;I2C.c: 101: }
  4056                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  4057  0027F6  0E00               	movlw	0
  4058  0027F8  EC88  F015         	call	_I2C_Master_Read
  4059  0027FC  0100               	movlb	0	; () banked
  4060  0027FE  6FB5               	movwf	(_time+6)& (0+255),b
  4061                           
  4062                           ;I2C.c: 103: I2C_Master_Stop();
  4063  002800  EC2C  F016         	call	_I2C_Master_Stop	;wreg free
  4064  002804  0012               	return		;funcret
  4065  002806                     __end_of_updateTime:
  4066                           	opt stack 0
  4067                           tblptru	equ	0xFF8
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           postinc0	equ	0xFEE
  4071                           wreg	equ	0xFE8
  4072                           indf2	equ	0xFDF
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8
  4076                           
  4077 ;; *************** function _I2C_Master_Write *****************
  4078 ;; Defined at:
  4079 ;;		line 54 in file "I2C.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  d               2   33[COMRAM] unsigned int 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, status,2, status,0, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4093 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;Total ram usage:        2 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    3
  4100 ;; This function calls:
  4101 ;;		_I2C_Master_Wait
  4102 ;; This function is called by:
  4103 ;;		_updateTime
  4104 ;;		_set_time
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text2
  4109  002C3A                     __ptext2:
  4110                           	opt stack 0
  4111  002C3A                     _I2C_Master_Write:
  4112                           	opt stack 26
  4113                           
  4114                           ;I2C.c: 56: I2C_Master_Wait();
  4115                           
  4116                           ;incstack = 0
  4117  002C3A  ECF8  F015         	call	_I2C_Master_Wait	;wreg free
  4118                           
  4119                           ;I2C.c: 57: SSPBUF = d;
  4120  002C3E  C022  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4121  002C42  0012               	return		;funcret
  4122  002C44                     __end_of_I2C_Master_Write:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           prodh	equ	0xFF4
  4126                           prodl	equ	0xFF3
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           indf2	equ	0xFDF
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function _I2C_Master_Stop *****************
  4135 ;; Defined at:
  4136 ;;		line 48 in file "I2C.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    3
  4157 ;; This function calls:
  4158 ;;		_I2C_Master_Wait
  4159 ;; This function is called by:
  4160 ;;		_updateTime
  4161 ;;		_set_time
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text3
  4166  002C58                     __ptext3:
  4167                           	opt stack 0
  4168  002C58                     _I2C_Master_Stop:
  4169                           	opt stack 26
  4170                           
  4171                           ;I2C.c: 50: I2C_Master_Wait();
  4172                           
  4173                           ;incstack = 0
  4174  002C58  ECF8  F015         	call	_I2C_Master_Wait	;wreg free
  4175                           
  4176                           ;I2C.c: 51: PEN = 1;
  4177  002C5C  84C5               	bsf	4037,2,c	;volatile
  4178  002C5E  0012               	return		;funcret
  4179  002C60                     __end_of_I2C_Master_Stop:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           postinc0	equ	0xFEE
  4185                           wreg	equ	0xFE8
  4186                           indf2	equ	0xFDF
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _I2C_Master_Start *****************
  4192 ;; Defined at:
  4193 ;;		line 36 in file "I2C.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    3
  4214 ;; This function calls:
  4215 ;;		_I2C_Master_Wait
  4216 ;; This function is called by:
  4217 ;;		_updateTime
  4218 ;;		_set_time
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text4
  4223  002C60                     __ptext4:
  4224                           	opt stack 0
  4225  002C60                     _I2C_Master_Start:
  4226                           	opt stack 26
  4227                           
  4228                           ;I2C.c: 38: I2C_Master_Wait();
  4229                           
  4230                           ;incstack = 0
  4231  002C60  ECF8  F015         	call	_I2C_Master_Wait	;wreg free
  4232                           
  4233                           ;I2C.c: 39: SEN = 1;
  4234  002C64  80C5               	bsf	4037,0,c	;volatile
  4235  002C66  0012               	return		;funcret
  4236  002C68                     __end_of_I2C_Master_Start:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           postinc0	equ	0xFEE
  4242                           wreg	equ	0xFE8
  4243                           indf2	equ	0xFDF
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _I2C_Master_Read *****************
  4249 ;; Defined at:
  4250 ;;		line 60 in file "I2C.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  a               1    wreg     unsigned char 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;  a               1   33[COMRAM] unsigned char 
  4255 ;;  temp            1   34[COMRAM] unsigned char 
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      unsigned char 
  4258 ;; Registers used:
  4259 ;;		wreg, status,2, status,0, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;Total ram usage:        2 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    3
  4272 ;; This function calls:
  4273 ;;		_I2C_Master_Wait
  4274 ;; This function is called by:
  4275 ;;		_updateTime
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text5
  4280  002B10                     __ptext5:
  4281                           	opt stack 0
  4282  002B10                     _I2C_Master_Read:
  4283                           	opt stack 26
  4284                           
  4285                           ;incstack = 0
  4286                           ;I2C_Master_Read@a stored from wreg
  4287  002B10  6E22               	movwf	I2C_Master_Read@a,c
  4288                           
  4289                           ;I2C.c: 62: unsigned char temp;
  4290                           ;I2C.c: 63: I2C_Master_Wait();
  4291  002B12  ECF8  F015         	call	_I2C_Master_Wait	;wreg free
  4292                           
  4293                           ;I2C.c: 64: RCEN = 1;
  4294  002B16  86C5               	bsf	4037,3,c	;volatile
  4295                           
  4296                           ;I2C.c: 65: I2C_Master_Wait();
  4297  002B18  ECF8  F015         	call	_I2C_Master_Wait	;wreg free
  4298                           
  4299                           ;I2C.c: 66: temp = SSPBUF;
  4300  002B1C  CFC9 F023          	movff	4041,I2C_Master_Read@temp	;volatile
  4301                           
  4302                           ;I2C.c: 67: I2C_Master_Wait();
  4303  002B20  ECF8  F015         	call	_I2C_Master_Wait	;wreg free
  4304                           
  4305                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4306  002B24  5022               	movf	I2C_Master_Read@a,w,c
  4307  002B26  A4D8               	btfss	status,2,c
  4308  002B28  D002               	goto	u4450
  4309  002B2A  8AC5               	bsf	4037,5,c	;volatile
  4310  002B2C  D001               	goto	l3877
  4311  002B2E                     u4450:
  4312  002B2E  9AC5               	bcf	4037,5,c	;volatile
  4313  002B30                     l3877:
  4314                           
  4315                           ;I2C.c: 69: ACKEN = 1;
  4316  002B30  88C5               	bsf	4037,4,c	;volatile
  4317                           
  4318                           ;I2C.c: 70: return temp;
  4319  002B32  5023               	movf	I2C_Master_Read@temp,w,c
  4320  002B34  0012               	return	
  4321  002B36                     __end_of_I2C_Master_Read:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           prodh	equ	0xFF4
  4325                           prodl	equ	0xFF3
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           indf2	equ	0xFDF
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _I2C_Master_Wait *****************
  4334 ;; Defined at:
  4335 ;;		line 31 in file "I2C.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;Total ram usage:        1 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    2
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_I2C_Master_Start
  4360 ;;		_I2C_Master_Stop
  4361 ;;		_I2C_Master_Write
  4362 ;;		_I2C_Master_Read
  4363 ;;		_I2C_Master_RepeatedStart
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text6
  4368  002BF0                     __ptext6:
  4369                           	opt stack 0
  4370  002BF0                     _I2C_Master_Wait:
  4371                           	opt stack 26
  4372  002BF0                     l395:
  4373  002BF0  B4C7               	btfsc	4039,2,c	;volatile
  4374  002BF2  D7FE               	goto	l395
  4375  002BF4  CFC5 F021          	movff	4037,??_I2C_Master_Wait	;volatile
  4376  002BF8  0E1F               	movlw	31
  4377  002BFA  1621               	andwf	??_I2C_Master_Wait,f,c
  4378  002BFC  B4D8               	btfsc	status,2,c
  4379  002BFE  0012               	return	
  4380  002C00  D7F7               	goto	l395
  4381  002C02                     __end_of_I2C_Master_Wait:
  4382                           	opt stack 0
  4383                           tblptru	equ	0xFF8
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           indf2	equ	0xFDF
  4389                           fsr2h	equ	0xFDA
  4390                           fsr2l	equ	0xFD9
  4391                           status	equ	0xFD8
  4392                           
  4393 ;; *************** function _keyinterrupt *****************
  4394 ;; Defined at:
  4395 ;;		line 19 in file "interface.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;		None
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      void 
  4402 ;; Registers used:
  4403 ;;		wreg, status,2, status,0
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;Total ram usage:        0 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    2
  4416 ;; This function calls:
  4417 ;;		Nothing
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text7
  4424  002BC4                     __ptext7:
  4425                           	opt stack 0
  4426  002BC4                     _keyinterrupt:
  4427                           	opt stack 28
  4428                           
  4429                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  4430                           
  4431                           ;incstack = 0
  4432  002BC4  A281               	btfss	3969,1,c	;volatile
  4433  002BC6  D007               	goto	l696
  4434                           
  4435                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  4436  002BC8  3881               	swapf	3969,w,c	;volatile
  4437  002BCA  0B0F               	andlw	15
  4438  002BCC  0B0F               	andlw	15
  4439  002BCE  0100               	movlb	0	; () banked
  4440  002BD0  6FC2               	movwf	_keypress& (0+255),b	;volatile
  4441  002BD2                     l697:
  4442  002BD2  B281               	btfsc	3969,1,c	;volatile
  4443  002BD4  D7FE               	goto	l697
  4444  002BD6                     l696:
  4445                           
  4446                           ;interface.c: 23: }
  4447                           ;interface.c: 24: __nop();
  4448  002BD6  F000               	nop	
  4449  002BD8  0012               	return		;funcret
  4450  002BDA                     __end_of_keyinterrupt:
  4451                           	opt stack 0
  4452                           tblptru	equ	0xFF8
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           indf2	equ	0xFDF
  4458                           fsr2h	equ	0xFDA
  4459                           fsr2l	equ	0xFD9
  4460                           status	equ	0xFD8
  4461                           
  4462 ;; *************** function _initialize *****************
  4463 ;; Defined at:
  4464 ;;		line 72 in file "main.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    5
  4485 ;; This function calls:
  4486 ;;		_I2C_Master_Init
  4487 ;;		_initLCD
  4488 ;; This function is called by:
  4489 ;;		_main
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text8
  4494  00263E                     __ptext8:
  4495                           	opt stack 0
  4496  00263E                     _initialize:
  4497                           	opt stack 25
  4498                           
  4499                           ;main.c: 74: OSCCON = 0xF0;
  4500                           
  4501                           ;incstack = 0
  4502  00263E  0EF0               	movlw	240
  4503  002640  6ED3               	movwf	4051,c	;volatile
  4504                           
  4505                           ;main.c: 75: OSCTUNEbits.PLLEN = 1;
  4506  002642  8C9B               	bsf	3995,6,c	;volatile
  4507                           
  4508                           ;main.c: 77: TRISA = 0b00101111;
  4509  002644  0E2F               	movlw	47
  4510  002646  6E92               	movwf	3986,c	;volatile
  4511                           
  4512                           ;main.c: 78: TRISB = 0b11110010;
  4513  002648  0EF2               	movlw	242
  4514  00264A  6E93               	movwf	3987,c	;volatile
  4515                           
  4516                           ;main.c: 79: TRISC = 0b00000000;
  4517  00264C  0E00               	movlw	0
  4518  00264E  6E94               	movwf	3988,c	;volatile
  4519                           
  4520                           ;main.c: 81: TRISD = 0x00;
  4521  002650  0E00               	movlw	0
  4522  002652  6E95               	movwf	3989,c	;volatile
  4523                           
  4524                           ;main.c: 82: TRISE = 0b00000001;
  4525  002654  0E01               	movlw	1
  4526  002656  6E96               	movwf	3990,c	;volatile
  4527                           
  4528                           ;main.c: 84: PR2 = 0xff;
  4529  002658  68CB               	setf	4043,c	;volatile
  4530                           
  4531                           ;main.c: 85: CCP1CON = 0b00001100;
  4532  00265A  0E0C               	movlw	12
  4533  00265C  6EBD               	movwf	4029,c	;volatile
  4534                           
  4535                           ;main.c: 86: CCPR1L = 0x00;
  4536  00265E  0E00               	movlw	0
  4537  002660  6EBE               	movwf	4030,c	;volatile
  4538                           
  4539                           ;main.c: 87: CCP2CON = 0b00001100;
  4540  002662  0E0C               	movlw	12
  4541  002664  6EBA               	movwf	4026,c	;volatile
  4542                           
  4543                           ;main.c: 88: CCPR2L = 0x00;
  4544  002666  0E00               	movlw	0
  4545  002668  6EBB               	movwf	4027,c	;volatile
  4546                           
  4547                           ;main.c: 89: T2CON = 0b00000101;
  4548  00266A  0E05               	movlw	5
  4549  00266C  6ECA               	movwf	4042,c	;volatile
  4550                           
  4551                           ;main.c: 91: LATA = 0x00;
  4552  00266E  0E00               	movlw	0
  4553  002670  6E89               	movwf	3977,c	;volatile
  4554                           
  4555                           ;main.c: 92: LATB = 0x00;
  4556  002672  0E00               	movlw	0
  4557  002674  6E8A               	movwf	3978,c	;volatile
  4558                           
  4559                           ;main.c: 93: LATC = 0x00;
  4560  002676  0E00               	movlw	0
  4561  002678  6E8B               	movwf	3979,c	;volatile
  4562                           
  4563                           ;main.c: 94: LATD = 0x00;
  4564  00267A  0E00               	movlw	0
  4565  00267C  6E8C               	movwf	3980,c	;volatile
  4566                           
  4567                           ;main.c: 95: LATE = 0x00;
  4568  00267E  0E00               	movlw	0
  4569  002680  6E8D               	movwf	3981,c	;volatile
  4570                           
  4571                           ;main.c: 97: initLCD();
  4572  002682  EC01  F015         	call	_initLCD	;wreg free
  4573                           
  4574                           ;main.c: 99: I2C_Master_Init(32000);
  4575  002686  0E00               	movlw	0
  4576  002688  6E2E               	movwf	I2C_Master_Init@c,c
  4577  00268A  0E7D               	movlw	125
  4578  00268C  6E2F               	movwf	I2C_Master_Init@c+1,c
  4579  00268E  0E00               	movlw	0
  4580  002690  6E30               	movwf	I2C_Master_Init@c+2,c
  4581  002692  0E00               	movlw	0
  4582  002694  6E31               	movwf	I2C_Master_Init@c+3,c
  4583  002696  EC34  F014         	call	_I2C_Master_Init	;wreg free
  4584                           
  4585                           ;main.c: 102: nRBPU = 0;
  4586  00269A  9EF1               	bcf	intcon2,7,c	;volatile
  4587                           
  4588                           ;main.c: 104: ADCON1 = 0b00001001;
  4589  00269C  0E09               	movlw	9
  4590  00269E  6EC1               	movwf	4033,c	;volatile
  4591                           
  4592                           ;main.c: 105: ADCON2 = 0b10001001;
  4593  0026A0  0E89               	movlw	137
  4594  0026A2  6EC0               	movwf	4032,c	;volatile
  4595                           
  4596                           ;main.c: 106: CVRCON = 0x00;
  4597  0026A4  0E00               	movlw	0
  4598  0026A6  6EB5               	movwf	4021,c	;volatile
  4599                           
  4600                           ;main.c: 107: CMCONbits.CIS = 0;
  4601  0026A8  96B4               	bcf	4020,3,c	;volatile
  4602                           
  4603                           ;main.c: 108: ADFM = 1;
  4604  0026AA  8EC0               	bsf	4032,7,c	;volatile
  4605                           
  4606                           ;main.c: 110: TMR0IE = 1;
  4607  0026AC  8AF2               	bsf	intcon,5,c	;volatile
  4608                           
  4609                           ;main.c: 111: TMR1IE = 1;
  4610  0026AE  809D               	bsf	3997,0,c	;volatile
  4611                           
  4612                           ;main.c: 113: PEIE = 1;
  4613  0026B0  8CF2               	bsf	intcon,6,c	;volatile
  4614                           
  4615                           ;main.c: 115: (INTCONbits.GIE = 1);
  4616  0026B2  8EF2               	bsf	intcon,7,c	;volatile
  4617  0026B4  0012               	return		;funcret
  4618  0026B6                     __end_of_initialize:
  4619                           	opt stack 0
  4620                           tblptru	equ	0xFF8
  4621                           prodh	equ	0xFF4
  4622                           prodl	equ	0xFF3
  4623                           intcon	equ	0xFF2
  4624                           intcon2	equ	0xFF1
  4625                           postinc0	equ	0xFEE
  4626                           wreg	equ	0xFE8
  4627                           indf2	equ	0xFDF
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _initLCD *****************
  4633 ;; Defined at:
  4634 ;;		line 11 in file "lcd.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;		None
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;		None
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      void 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2, status,0, cstack
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;Total ram usage:        1 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    4
  4655 ;; This function calls:
  4656 ;;		_lcdInst
  4657 ;; This function is called by:
  4658 ;;		_initialize
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text9
  4663  002A02                     __ptext9:
  4664                           	opt stack 0
  4665  002A02                     _initLCD:
  4666                           	opt stack 25
  4667                           
  4668                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  4669                           
  4670                           ;incstack = 0
  4671  002A02  0E9C               	movlw	156
  4672  002A04  6E24               	movwf	??_initLCD& (0+255),c
  4673  002A06  0ED7               	movlw	215
  4674  002A08                     u8067:
  4675  002A08  2EE8               	decfsz	wreg,f,c
  4676  002A0A  D7FE               	bra	u8067
  4677  002A0C  2E24               	decfsz	??_initLCD& (0+255),f,c
  4678  002A0E  D7FC               	bra	u8067
  4679  002A10  F000               	nop	
  4680                           
  4681                           ;lcd.c: 13: lcdInst(0b00110011);
  4682  002A12  0E33               	movlw	51
  4683  002A14  EC17  F016         	call	_lcdInst
  4684                           
  4685                           ;lcd.c: 14: lcdInst(0b00110010);
  4686  002A18  0E32               	movlw	50
  4687  002A1A  EC17  F016         	call	_lcdInst
  4688                           
  4689                           ;lcd.c: 15: lcdInst(0b00101000);
  4690  002A1E  0E28               	movlw	40
  4691  002A20  EC17  F016         	call	_lcdInst
  4692                           
  4693                           ;lcd.c: 16: lcdInst(0b00001111);
  4694  002A24  0E0F               	movlw	15
  4695  002A26  EC17  F016         	call	_lcdInst
  4696                           
  4697                           ;lcd.c: 17: lcdInst(0b00000110);
  4698  002A2A  0E06               	movlw	6
  4699  002A2C  EC17  F016         	call	_lcdInst
  4700                           
  4701                           ;lcd.c: 18: lcdInst(0b00000001);
  4702  002A30  0E01               	movlw	1
  4703  002A32  EC17  F016         	call	_lcdInst
  4704                           
  4705                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  4706  002A36  0E9C               	movlw	156
  4707  002A38  6E24               	movwf	??_initLCD& (0+255),c
  4708  002A3A  0ED7               	movlw	215
  4709  002A3C                     u8077:
  4710  002A3C  2EE8               	decfsz	wreg,f,c
  4711  002A3E  D7FE               	bra	u8077
  4712  002A40  2E24               	decfsz	??_initLCD& (0+255),f,c
  4713  002A42  D7FC               	bra	u8077
  4714  002A44  F000               	nop	
  4715  002A46  0012               	return		;funcret
  4716  002A48                     __end_of_initLCD:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           intcon	equ	0xFF2
  4722                           intcon2	equ	0xFF1
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           indf2	equ	0xFDF
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8
  4729                           
  4730 ;; *************** function _I2C_Master_Init *****************
  4731 ;; Defined at:
  4732 ;;		line 20 in file "I2C.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;  c               4   45[COMRAM] const unsigned long 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;		None
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, status,2, status,0, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;Total ram usage:        8 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    3
  4753 ;; This function calls:
  4754 ;;		___lldiv
  4755 ;; This function is called by:
  4756 ;;		_initialize
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text10
  4761  002868                     __ptext10:
  4762                           	opt stack 0
  4763  002868                     _I2C_Master_Init:
  4764                           	opt stack 26
  4765                           
  4766                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  4767                           
  4768                           ;incstack = 0
  4769  002868  0E00               	movlw	0
  4770  00286A  6EC7               	movwf	4039,c	;volatile
  4771                           
  4772                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  4773  00286C  0E28               	movlw	40
  4774  00286E  6EC6               	movwf	4038,c	;volatile
  4775                           
  4776                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  4777  002870  0E00               	movlw	0
  4778  002872  6EC5               	movwf	4037,c	;volatile
  4779                           
  4780                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  4781  002874  0E00               	movlw	0
  4782  002876  6E21               	movwf	___lldiv@dividend,c
  4783  002878  0E48               	movlw	72
  4784  00287A  6E22               	movwf	___lldiv@dividend+1,c
  4785  00287C  0EE8               	movlw	232
  4786  00287E  6E23               	movwf	___lldiv@dividend+2,c
  4787  002880  0E01               	movlw	1
  4788  002882  6E24               	movwf	___lldiv@dividend+3,c
  4789  002884  C02E  F032         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4790  002888  C02F  F033         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4791  00288C  C030  F034         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4792  002890  C031  F035         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4793  002894  0E02               	movlw	2
  4794  002896                     u4185:
  4795  002896  90D8               	bcf	status,0,c
  4796  002898  3632               	rlcf	??_I2C_Master_Init,f,c
  4797  00289A  3633               	rlcf	??_I2C_Master_Init+1,f,c
  4798  00289C  3634               	rlcf	??_I2C_Master_Init+2,f,c
  4799  00289E  3635               	rlcf	??_I2C_Master_Init+3,f,c
  4800  0028A0  2EE8               	decfsz	wreg,f,c
  4801  0028A2  D7F9               	goto	u4185
  4802  0028A4  C032  F025         	movff	??_I2C_Master_Init,___lldiv@divisor
  4803  0028A8  C033  F026         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4804  0028AC  C034  F027         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4805  0028B0  C035  F028         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4806  0028B4  ECDE  F012         	call	___lldiv	;wreg free
  4807  0028B8  0421               	decf	?___lldiv,w,c
  4808  0028BA  6EC8               	movwf	4040,c	;volatile
  4809                           
  4810                           ;I2C.c: 27: TRISC3 = 1;
  4811  0028BC  8694               	bsf	3988,3,c	;volatile
  4812                           
  4813                           ;I2C.c: 28: TRISC4 = 1;
  4814  0028BE  8894               	bsf	3988,4,c	;volatile
  4815  0028C0  0012               	return		;funcret
  4816  0028C2                     __end_of_I2C_Master_Init:
  4817                           	opt stack 0
  4818                           tblptru	equ	0xFF8
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           intcon2	equ	0xFF1
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           indf2	equ	0xFDF
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function ___lldiv *****************
  4831 ;; Defined at:
  4832 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  dividend        4   32[COMRAM] unsigned long 
  4835 ;;  divisor         4   36[COMRAM] unsigned long 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  quotient        4   40[COMRAM] unsigned long 
  4838 ;;  counter         1   44[COMRAM] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  4   32[COMRAM] unsigned long 
  4841 ;; Registers used:
  4842 ;;		wreg, status,2, status,0
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4848 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;Total ram usage:       13 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    2
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_I2C_Master_Init
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text11
  4863  0025BC                     __ptext11:
  4864                           	opt stack 0
  4865  0025BC                     ___lldiv:
  4866                           	opt stack 26
  4867                           
  4868                           ;incstack = 0
  4869  0025BC  0E00               	movlw	0
  4870  0025BE  6E29               	movwf	___lldiv@quotient,c
  4871  0025C0  0E00               	movlw	0
  4872  0025C2  6E2A               	movwf	___lldiv@quotient+1,c
  4873  0025C4  0E00               	movlw	0
  4874  0025C6  6E2B               	movwf	___lldiv@quotient+2,c
  4875  0025C8  0E00               	movlw	0
  4876  0025CA  6E2C               	movwf	___lldiv@quotient+3,c
  4877  0025CC  5025               	movf	___lldiv@divisor,w,c
  4878  0025CE  1026               	iorwf	___lldiv@divisor+1,w,c
  4879  0025D0  1027               	iorwf	___lldiv@divisor+2,w,c
  4880  0025D2  1028               	iorwf	___lldiv@divisor+3,w,c
  4881  0025D4  B4D8               	btfsc	status,2,c
  4882  0025D6  D02A               	goto	l1221
  4883  0025D8  0E01               	movlw	1
  4884  0025DA  6E2D               	movwf	___lldiv@counter,c
  4885  0025DC  D006               	goto	l3421
  4886  0025DE                     l3419:
  4887  0025DE  90D8               	bcf	status,0,c
  4888  0025E0  3625               	rlcf	___lldiv@divisor,f,c
  4889  0025E2  3626               	rlcf	___lldiv@divisor+1,f,c
  4890  0025E4  3627               	rlcf	___lldiv@divisor+2,f,c
  4891  0025E6  3628               	rlcf	___lldiv@divisor+3,f,c
  4892  0025E8  2A2D               	incf	___lldiv@counter,f,c
  4893  0025EA                     l3421:
  4894  0025EA  AE28               	btfss	___lldiv@divisor+3,7,c
  4895  0025EC  D7F8               	goto	l3419
  4896  0025EE                     l3423:
  4897  0025EE  90D8               	bcf	status,0,c
  4898  0025F0  3629               	rlcf	___lldiv@quotient,f,c
  4899  0025F2  362A               	rlcf	___lldiv@quotient+1,f,c
  4900  0025F4  362B               	rlcf	___lldiv@quotient+2,f,c
  4901  0025F6  362C               	rlcf	___lldiv@quotient+3,f,c
  4902  0025F8  5025               	movf	___lldiv@divisor,w,c
  4903  0025FA  5C21               	subwf	___lldiv@dividend,w,c
  4904  0025FC  5026               	movf	___lldiv@divisor+1,w,c
  4905  0025FE  5822               	subwfb	___lldiv@dividend+1,w,c
  4906  002600  5027               	movf	___lldiv@divisor+2,w,c
  4907  002602  5823               	subwfb	___lldiv@dividend+2,w,c
  4908  002604  5028               	movf	___lldiv@divisor+3,w,c
  4909  002606  5824               	subwfb	___lldiv@dividend+3,w,c
  4910  002608  A0D8               	btfss	status,0,c
  4911  00260A  D009               	goto	l3431
  4912  00260C  5025               	movf	___lldiv@divisor,w,c
  4913  00260E  5E21               	subwf	___lldiv@dividend,f,c
  4914  002610  5026               	movf	___lldiv@divisor+1,w,c
  4915  002612  5A22               	subwfb	___lldiv@dividend+1,f,c
  4916  002614  5027               	movf	___lldiv@divisor+2,w,c
  4917  002616  5A23               	subwfb	___lldiv@dividend+2,f,c
  4918  002618  5028               	movf	___lldiv@divisor+3,w,c
  4919  00261A  5A24               	subwfb	___lldiv@dividend+3,f,c
  4920  00261C  8029               	bsf	___lldiv@quotient,0,c
  4921  00261E                     l3431:
  4922  00261E  90D8               	bcf	status,0,c
  4923  002620  3228               	rrcf	___lldiv@divisor+3,f,c
  4924  002622  3227               	rrcf	___lldiv@divisor+2,f,c
  4925  002624  3226               	rrcf	___lldiv@divisor+1,f,c
  4926  002626  3225               	rrcf	___lldiv@divisor,f,c
  4927  002628  2E2D               	decfsz	___lldiv@counter,f,c
  4928  00262A  D7E1               	goto	l3423
  4929  00262C                     l1221:
  4930  00262C  C029  F021         	movff	___lldiv@quotient,?___lldiv
  4931  002630  C02A  F022         	movff	___lldiv@quotient+1,?___lldiv+1
  4932  002634  C02B  F023         	movff	___lldiv@quotient+2,?___lldiv+2
  4933  002638  C02C  F024         	movff	___lldiv@quotient+3,?___lldiv+3
  4934  00263C  0012               	return		;funcret
  4935  00263E                     __end_of___lldiv:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           prodh	equ	0xFF4
  4939                           prodl	equ	0xFF3
  4940                           intcon	equ	0xFF2
  4941                           intcon2	equ	0xFF1
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           indf2	equ	0xFDF
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _homescreen *****************
  4950 ;; Defined at:
  4951 ;;		line 3 in file "interface.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;		None
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      void 
  4958 ;; Registers used:
  4959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;Total ram usage:        0 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    5
  4972 ;; This function calls:
  4973 ;;		_lcdInst
  4974 ;;		_printf
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text12
  4981  002806                     __ptext12:
  4982                           	opt stack 0
  4983  002806                     _homescreen:
  4984                           	opt stack 25
  4985                           
  4986                           ;interface.c: 4: lcdInst(0b10000000);;
  4987                           
  4988                           ;incstack = 0
  4989  002806  0E80               	movlw	128
  4990  002808  EC17  F016         	call	_lcdInst
  4991                           
  4992                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  4993  00280C  0EE6               	movlw	low STR_24
  4994  00280E  6E2D               	movwf	printf@f,c
  4995  002810  0EFE               	movlw	high STR_24
  4996  002812  6E2E               	movwf	printf@f+1,c
  4997  002814  C0B5  F02F         	movff	_time+6,?_printf+2
  4998  002818  6A30               	clrf	?_printf+3,c
  4999  00281A  C0B4  F031         	movff	_time+5,?_printf+4
  5000  00281E  6A32               	clrf	?_printf+5,c
  5001  002820  C0B3  F033         	movff	_time+4,?_printf+6
  5002  002824  6A34               	clrf	?_printf+7,c
  5003  002826  EC36  F007         	call	_printf	;wreg free
  5004                           
  5005                           ;interface.c: 6: printf("3:Start");
  5006  00282A  0EEF               	movlw	low STR_25
  5007  00282C  6E2D               	movwf	printf@f,c
  5008  00282E  0EFF               	movlw	high STR_25
  5009  002830  6E2E               	movwf	printf@f+1,c
  5010  002832  EC36  F007         	call	_printf	;wreg free
  5011                           
  5012                           ;interface.c: 7: lcdInst(0b11000000);;
  5013  002836  0EC0               	movlw	192
  5014  002838  EC17  F016         	call	_lcdInst
  5015                           
  5016                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5017  00283C  0E5C               	movlw	low (STR_33+7)
  5018  00283E  6E2D               	movwf	printf@f,c
  5019  002840  0EFE               	movlw	high (STR_33+7)
  5020  002842  6E2E               	movwf	printf@f+1,c
  5021  002844  C0B1  F02F         	movff	_time+2,?_printf+2
  5022  002848  6A30               	clrf	?_printf+3,c
  5023  00284A  C0B0  F031         	movff	_time+1,?_printf+4
  5024  00284E  6A32               	clrf	?_printf+5,c
  5025  002850  C0AF  F033         	movff	_time,?_printf+6
  5026  002854  6A34               	clrf	?_printf+7,c
  5027  002856  EC36  F007         	call	_printf	;wreg free
  5028                           
  5029                           ;interface.c: 9: printf(" A:Logs");
  5030  00285A  0EE7               	movlw	low STR_27
  5031  00285C  6E2D               	movwf	printf@f,c
  5032  00285E  0EFF               	movlw	high STR_27
  5033  002860  6E2E               	movwf	printf@f+1,c
  5034  002862  EC36  F007         	call	_printf	;wreg free
  5035  002866  0012               	return		;funcret
  5036  002868                     __end_of_homescreen:
  5037                           	opt stack 0
  5038                           tblptru	equ	0xFF8
  5039                           prodh	equ	0xFF4
  5040                           prodl	equ	0xFF3
  5041                           intcon	equ	0xFF2
  5042                           intcon2	equ	0xFF1
  5043                           postinc0	equ	0xFEE
  5044                           wreg	equ	0xFE8
  5045                           indf2	equ	0xFDF
  5046                           fsr2h	equ	0xFDA
  5047                           fsr2l	equ	0xFD9
  5048                           status	equ	0xFD8
  5049                           
  5050 ;; *************** function _displayLog *****************
  5051 ;; Defined at:
  5052 ;;		line 87 in file "interface.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  run             2   56[COMRAM] int 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  currRun         2   15[BANK0 ] int 
  5057 ;;  i               2   13[BANK0 ] int 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;Total ram usage:        9 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    5
  5074 ;; This function calls:
  5075 ;;		_eepromRead
  5076 ;;		_keycheck
  5077 ;;		_lcdInst
  5078 ;;		_printf
  5079 ;; This function is called by:
  5080 ;;		_main
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text13
  5085  0011F4                     __ptext13:
  5086                           	opt stack 0
  5087  0011F4                     _displayLog:
  5088                           	opt stack 25
  5089                           
  5090                           ;interface.c: 88: int currRun = eepromRead(0);
  5091                           
  5092                           ;incstack = 0
  5093  0011F4  0E00               	movlw	0
  5094  0011F6  EC61  F015         	call	_eepromRead
  5095  0011FA  0100               	movlb	0	; () banked
  5096  0011FC  6F8F               	movwf	displayLog@currRun& (0+255),b
  5097  0011FE  6B90               	clrf	(displayLog@currRun+1)& (0+255),b
  5098  001200  BF8F               	btfsc	displayLog@currRun& (0+255),7,b
  5099  001202  0790               	decf	(displayLog@currRun+1)& (0+255),f,b
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;interface.c: 89: int i;
  5103                           ;interface.c: 90: for (i=1;i<(run);i++){
  5104  001204  0E00               	movlw	0
  5105  001206  0100               	movlb	0	; () banked
  5106  001208  6F8E               	movwf	(displayLog@i+1)& (0+255),b
  5107  00120A  0E01               	movlw	1
  5108  00120C  6F8D               	movwf	displayLog@i& (0+255),b
  5109  00120E  D016               	goto	l5525
  5110  001210                     l5517:
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;interface.c: 91: currRun++;
  5114  001210  0100               	movlb	0	; () banked
  5115  001212  4B8F               	infsnz	displayLog@currRun& (0+255),f,b
  5116  001214  2B90               	incf	(displayLog@currRun+1)& (0+255),f,b
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  5120  001216  0100               	movlb	0	; () banked
  5121  001218  BF90               	btfsc	(displayLog@currRun+1)& (0+255),7,b
  5122  00121A  D00D               	goto	l5523
  5123  00121C  0100               	movlb	0	; () banked
  5124  00121E  5190               	movf	(displayLog@currRun+1)& (0+255),w,b
  5125  001220  E105               	bnz	u7030
  5126  001222  0E05               	movlw	5
  5127  001224  0100               	movlb	0	; () banked
  5128  001226  5D8F               	subwf	displayLog@currRun& (0+255),w,b
  5129  001228  A0D8               	btfss	status,0,c
  5130  00122A  D005               	goto	l5523
  5131  00122C                     u7030:
  5132                           
  5133                           ; BSR set to: 0
  5134  00122C  0E00               	movlw	0
  5135  00122E  0100               	movlb	0	; () banked
  5136  001230  6F90               	movwf	(displayLog@currRun+1)& (0+255),b
  5137  001232  0E01               	movlw	1
  5138  001234  6F8F               	movwf	displayLog@currRun& (0+255),b
  5139  001236                     l5523:
  5140                           
  5141                           ; BSR set to: 0
  5142  001236  0100               	movlb	0	; () banked
  5143  001238  4B8D               	infsnz	displayLog@i& (0+255),f,b
  5144  00123A  2B8E               	incf	(displayLog@i+1)& (0+255),f,b
  5145  00123C                     l5525:
  5146                           
  5147                           ; BSR set to: 0
  5148  00123C  5039               	movf	displayLog@run,w,c
  5149  00123E  0100               	movlb	0	; () banked
  5150  001240  5D8D               	subwf	displayLog@i& (0+255),w,b
  5151  001242  0100               	movlb	0	; () banked
  5152  001244  518E               	movf	(displayLog@i+1)& (0+255),w,b
  5153  001246  0A80               	xorlw	128
  5154  001248  0100               	movlb	0	; () banked
  5155  00124A  6F8A               	movwf	??_displayLog& (0+255),b
  5156  00124C  503A               	movf	displayLog@run+1,w,c
  5157  00124E  0A80               	xorlw	128
  5158  001250  0100               	movlb	0	; () banked
  5159  001252  598A               	subwfb	??_displayLog& (0+255),w,b
  5160  001254  A0D8               	btfss	status,0,c
  5161  001256  D7DC               	goto	l5517
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;interface.c: 93: }
  5165                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5166                           
  5167                           ; BSR set to: 0
  5168  001258  0E01               	movlw	1
  5169  00125A  EC17  F016         	call	_lcdInst
  5170  00125E  0E34               	movlw	52
  5171  001260  0100               	movlb	0	; () banked
  5172  001262  6F8A               	movwf	??_displayLog& (0+255),b
  5173  001264  0EF1               	movlw	241
  5174  001266                     u8087:
  5175  001266  2EE8               	decfsz	wreg,f,c
  5176  001268  D7FE               	bra	u8087
  5177  00126A  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5178  00126C  D7FC               	bra	u8087
  5179  00126E  D000               	nop2	
  5180                           
  5181                           ;interface.c: 96: printf("Run#%d    A:Next", run);
  5182  001270  0EB3               	movlw	low STR_28
  5183  001272  6E2D               	movwf	printf@f,c
  5184  001274  0EFE               	movlw	high STR_28
  5185  001276  6E2E               	movwf	printf@f+1,c
  5186  001278  C039  F02F         	movff	displayLog@run,?_printf+2
  5187  00127C  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5188  001280  EC36  F007         	call	_printf	;wreg free
  5189                           
  5190                           ;interface.c: 97: lcdInst(0b11000000);;
  5191  001284  0EC0               	movlw	192
  5192  001286  EC17  F016         	call	_lcdInst
  5193                           
  5194                           ;interface.c: 98: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  5195  00128A  0EA3               	movlw	low STR_29
  5196  00128C  6E2D               	movwf	printf@f,c
  5197  00128E  0EFF               	movlw	high STR_29
  5198  001290  6E2E               	movwf	printf@f+1,c
  5199  001292  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5200  001296  0100               	movlb	0	; () banked
  5201  001298  3B8A               	swapf	??_displayLog& (0+255),f,b
  5202  00129A  0EF0               	movlw	240
  5203  00129C  178A               	andwf	??_displayLog& (0+255),f,b
  5204  00129E  0100               	movlb	0	; () banked
  5205  0012A0  298A               	incf	??_displayLog& (0+255),w,b
  5206  0012A2  EC61  F015         	call	_eepromRead
  5207  0012A6  6E2F               	movwf	?_printf+2,c
  5208  0012A8  6A30               	clrf	?_printf+3,c
  5209  0012AA  BE2F               	btfsc	?_printf+2,7,c
  5210  0012AC  0630               	decf	?_printf+3,f,c
  5211  0012AE  EC36  F007         	call	_printf	;wreg free
  5212                           
  5213                           ;interface.c: 99: keycheck();
  5214  0012B2  ECED  F015         	call	_keycheck	;wreg free
  5215                           
  5216                           ;interface.c: 100: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5217  0012B6  0E01               	movlw	1
  5218  0012B8  EC17  F016         	call	_lcdInst
  5219  0012BC  0E34               	movlw	52
  5220  0012BE  0100               	movlb	0	; () banked
  5221  0012C0  6F8A               	movwf	??_displayLog& (0+255),b
  5222  0012C2  0EF1               	movlw	241
  5223  0012C4                     u8097:
  5224  0012C4  2EE8               	decfsz	wreg,f,c
  5225  0012C6  D7FE               	bra	u8097
  5226  0012C8  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5227  0012CA  D7FC               	bra	u8097
  5228  0012CC  D000               	nop2	
  5229                           
  5230                           ;interface.c: 101: printf("Run#%d    A:Next", run);
  5231  0012CE  0EB3               	movlw	low STR_28
  5232  0012D0  6E2D               	movwf	printf@f,c
  5233  0012D2  0EFE               	movlw	high STR_28
  5234  0012D4  6E2E               	movwf	printf@f+1,c
  5235  0012D6  C039  F02F         	movff	displayLog@run,?_printf+2
  5236  0012DA  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5237  0012DE  EC36  F007         	call	_printf	;wreg free
  5238                           
  5239                           ;interface.c: 102: lcdInst(0b11000000);;
  5240  0012E2  0EC0               	movlw	192
  5241  0012E4  EC17  F016         	call	_lcdInst
  5242                           
  5243                           ;interface.c: 103: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  5244  0012E8  0E6B               	movlw	low STR_31
  5245  0012EA  6E2D               	movwf	printf@f,c
  5246  0012EC  0EFE               	movlw	high STR_31
  5247  0012EE  6E2E               	movwf	printf@f+1,c
  5248  0012F0  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5249  0012F4  0100               	movlb	0	; () banked
  5250  0012F6  3B8A               	swapf	??_displayLog& (0+255),f,b
  5251  0012F8  0EF0               	movlw	240
  5252  0012FA  178A               	andwf	??_displayLog& (0+255),f,b
  5253  0012FC  0100               	movlb	0	; () banked
  5254  0012FE  518A               	movf	??_displayLog& (0+255),w,b
  5255  001300  0F02               	addlw	2
  5256  001302  EC61  F015         	call	_eepromRead
  5257  001306  6E2F               	movwf	?_printf+2,c
  5258  001308  6A30               	clrf	?_printf+3,c
  5259  00130A  BE2F               	btfsc	?_printf+2,7,c
  5260  00130C  0630               	decf	?_printf+3,f,c
  5261  00130E  C08F  F08B         	movff	displayLog@currRun,??_displayLog+1
  5262  001312  0100               	movlb	0	; () banked
  5263  001314  3B8B               	swapf	(??_displayLog+1)& (0+255),f,b
  5264  001316  0EF0               	movlw	240
  5265  001318  178B               	andwf	(??_displayLog+1)& (0+255),f,b
  5266  00131A  0100               	movlb	0	; () banked
  5267  00131C  518B               	movf	(??_displayLog+1)& (0+255),w,b
  5268  00131E  0F03               	addlw	3
  5269  001320  EC61  F015         	call	_eepromRead
  5270  001324  6E31               	movwf	?_printf+4,c
  5271  001326  6A32               	clrf	?_printf+5,c
  5272  001328  BE31               	btfsc	?_printf+4,7,c
  5273  00132A  0632               	decf	?_printf+5,f,c
  5274  00132C  C08F  F08C         	movff	displayLog@currRun,??_displayLog+2
  5275  001330  0100               	movlb	0	; () banked
  5276  001332  3B8C               	swapf	(??_displayLog+2)& (0+255),f,b
  5277  001334  0EF0               	movlw	240
  5278  001336  178C               	andwf	(??_displayLog+2)& (0+255),f,b
  5279  001338  0100               	movlb	0	; () banked
  5280  00133A  518C               	movf	(??_displayLog+2)& (0+255),w,b
  5281  00133C  0F04               	addlw	4
  5282  00133E  EC61  F015         	call	_eepromRead
  5283  001342  6E33               	movwf	?_printf+6,c
  5284  001344  6A34               	clrf	?_printf+7,c
  5285  001346  BE33               	btfsc	?_printf+6,7,c
  5286  001348  0634               	decf	?_printf+7,f,c
  5287  00134A  EC36  F007         	call	_printf	;wreg free
  5288                           
  5289                           ;interface.c: 104: keycheck();
  5290  00134E  ECED  F015         	call	_keycheck	;wreg free
  5291                           
  5292                           ;interface.c: 105: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5293  001352  0E01               	movlw	1
  5294  001354  EC17  F016         	call	_lcdInst
  5295  001358  0E34               	movlw	52
  5296  00135A  0100               	movlb	0	; () banked
  5297  00135C  6F8A               	movwf	??_displayLog& (0+255),b
  5298  00135E  0EF1               	movlw	241
  5299  001360                     u8107:
  5300  001360  2EE8               	decfsz	wreg,f,c
  5301  001362  D7FE               	bra	u8107
  5302  001364  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5303  001366  D7FC               	bra	u8107
  5304  001368  D000               	nop2	
  5305                           
  5306                           ;interface.c: 106: printf("Run#%d    A:Next", run);
  5307  00136A  0EB3               	movlw	low STR_28
  5308  00136C  6E2D               	movwf	printf@f,c
  5309  00136E  0EFE               	movlw	high STR_28
  5310  001370  6E2E               	movwf	printf@f+1,c
  5311  001372  C039  F02F         	movff	displayLog@run,?_printf+2
  5312  001376  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5313  00137A  EC36  F007         	call	_printf	;wreg free
  5314                           
  5315                           ;interface.c: 107: lcdInst(0b11000000);;
  5316  00137E  0EC0               	movlw	192
  5317  001380  EC17  F016         	call	_lcdInst
  5318                           
  5319                           ;interface.c: 108: printf("Start: %02x:%02x:%02x", eepromRead(currRun*0x10 + 5), eepromR
      +                          ead(currRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  5320  001384  0E55               	movlw	low STR_33
  5321  001386  6E2D               	movwf	printf@f,c
  5322  001388  0EFE               	movlw	high STR_33
  5323  00138A  6E2E               	movwf	printf@f+1,c
  5324  00138C  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5325  001390  0100               	movlb	0	; () banked
  5326  001392  3B8A               	swapf	??_displayLog& (0+255),f,b
  5327  001394  0EF0               	movlw	240
  5328  001396  178A               	andwf	??_displayLog& (0+255),f,b
  5329  001398  0100               	movlb	0	; () banked
  5330  00139A  518A               	movf	??_displayLog& (0+255),w,b
  5331  00139C  0F05               	addlw	5
  5332  00139E  EC61  F015         	call	_eepromRead
  5333  0013A2  6E2F               	movwf	?_printf+2,c
  5334  0013A4  6A30               	clrf	?_printf+3,c
  5335  0013A6  BE2F               	btfsc	?_printf+2,7,c
  5336  0013A8  0630               	decf	?_printf+3,f,c
  5337  0013AA  C08F  F08B         	movff	displayLog@currRun,??_displayLog+1
  5338  0013AE  0100               	movlb	0	; () banked
  5339  0013B0  3B8B               	swapf	(??_displayLog+1)& (0+255),f,b
  5340  0013B2  0EF0               	movlw	240
  5341  0013B4  178B               	andwf	(??_displayLog+1)& (0+255),f,b
  5342  0013B6  0100               	movlb	0	; () banked
  5343  0013B8  518B               	movf	(??_displayLog+1)& (0+255),w,b
  5344  0013BA  0F06               	addlw	6
  5345  0013BC  EC61  F015         	call	_eepromRead
  5346  0013C0  6E31               	movwf	?_printf+4,c
  5347  0013C2  6A32               	clrf	?_printf+5,c
  5348  0013C4  BE31               	btfsc	?_printf+4,7,c
  5349  0013C6  0632               	decf	?_printf+5,f,c
  5350  0013C8  C08F  F08C         	movff	displayLog@currRun,??_displayLog+2
  5351  0013CC  0100               	movlb	0	; () banked
  5352  0013CE  3B8C               	swapf	(??_displayLog+2)& (0+255),f,b
  5353  0013D0  0EF0               	movlw	240
  5354  0013D2  178C               	andwf	(??_displayLog+2)& (0+255),f,b
  5355  0013D4  0100               	movlb	0	; () banked
  5356  0013D6  518C               	movf	(??_displayLog+2)& (0+255),w,b
  5357  0013D8  0F07               	addlw	7
  5358  0013DA  EC61  F015         	call	_eepromRead
  5359  0013DE  6E33               	movwf	?_printf+6,c
  5360  0013E0  6A34               	clrf	?_printf+7,c
  5361  0013E2  BE33               	btfsc	?_printf+6,7,c
  5362  0013E4  0634               	decf	?_printf+7,f,c
  5363  0013E6  EC36  F007         	call	_printf	;wreg free
  5364                           
  5365                           ;interface.c: 109: keycheck();
  5366  0013EA  ECED  F015         	call	_keycheck	;wreg free
  5367                           
  5368                           ;interface.c: 110: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5369  0013EE  0E01               	movlw	1
  5370  0013F0  EC17  F016         	call	_lcdInst
  5371  0013F4  0E34               	movlw	52
  5372  0013F6  0100               	movlb	0	; () banked
  5373  0013F8  6F8A               	movwf	??_displayLog& (0+255),b
  5374  0013FA  0EF1               	movlw	241
  5375  0013FC                     u8117:
  5376  0013FC  2EE8               	decfsz	wreg,f,c
  5377  0013FE  D7FE               	bra	u8117
  5378  001400  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5379  001402  D7FC               	bra	u8117
  5380  001404  D000               	nop2	
  5381                           
  5382                           ;interface.c: 111: printf("Run#%d    A:Next", run);
  5383  001406  0EB3               	movlw	low STR_28
  5384  001408  6E2D               	movwf	printf@f,c
  5385  00140A  0EFE               	movlw	high STR_28
  5386  00140C  6E2E               	movwf	printf@f+1,c
  5387  00140E  C039  F02F         	movff	displayLog@run,?_printf+2
  5388  001412  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5389  001416  EC36  F007         	call	_printf	;wreg free
  5390                           
  5391                           ;interface.c: 112: lcdInst(0b11000000);;
  5392  00141A  0EC0               	movlw	192
  5393  00141C  EC17  F016         	call	_lcdInst
  5394                           
  5395                           ;interface.c: 113: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  5396  001420  0EF6               	movlw	low STR_35
  5397  001422  6E2D               	movwf	printf@f,c
  5398  001424  0EFE               	movlw	high STR_35
  5399  001426  6E2E               	movwf	printf@f+1,c
  5400  001428  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5401  00142C  0100               	movlb	0	; () banked
  5402  00142E  3B8A               	swapf	??_displayLog& (0+255),f,b
  5403  001430  0EF0               	movlw	240
  5404  001432  178A               	andwf	??_displayLog& (0+255),f,b
  5405  001434  0100               	movlb	0	; () banked
  5406  001436  518A               	movf	??_displayLog& (0+255),w,b
  5407  001438  0F08               	addlw	8
  5408  00143A  EC61  F015         	call	_eepromRead
  5409  00143E  6E2F               	movwf	?_printf+2,c
  5410  001440  6A30               	clrf	?_printf+3,c
  5411  001442  BE2F               	btfsc	?_printf+2,7,c
  5412  001444  0630               	decf	?_printf+3,f,c
  5413  001446  EC36  F007         	call	_printf	;wreg free
  5414                           
  5415                           ;interface.c: 114: keycheck();
  5416  00144A  ECED  F015         	call	_keycheck	;wreg free
  5417                           
  5418                           ;interface.c: 115: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5419  00144E  0E01               	movlw	1
  5420  001450  EC17  F016         	call	_lcdInst
  5421  001454  0E34               	movlw	52
  5422  001456  0100               	movlb	0	; () banked
  5423  001458  6F8A               	movwf	??_displayLog& (0+255),b
  5424  00145A  0EF1               	movlw	241
  5425  00145C                     u8127:
  5426  00145C  2EE8               	decfsz	wreg,f,c
  5427  00145E  D7FE               	bra	u8127
  5428  001460  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5429  001462  D7FC               	bra	u8127
  5430  001464  D000               	nop2	
  5431                           
  5432                           ;interface.c: 116: printf("Run#%d    A:Next", run);
  5433  001466  0EB3               	movlw	low STR_28
  5434  001468  6E2D               	movwf	printf@f,c
  5435  00146A  0EFE               	movlw	high STR_28
  5436  00146C  6E2E               	movwf	printf@f+1,c
  5437  00146E  C039  F02F         	movff	displayLog@run,?_printf+2
  5438  001472  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5439  001476  EC36  F007         	call	_printf	;wreg free
  5440                           
  5441                           ;interface.c: 117: lcdInst(0b11000000);;
  5442  00147A  0EC0               	movlw	192
  5443  00147C  EC17  F016         	call	_lcdInst
  5444                           
  5445                           ;interface.c: 118: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  5446  001480  0E91               	movlw	low STR_37
  5447  001482  6E2D               	movwf	printf@f,c
  5448  001484  0EFE               	movlw	high STR_37
  5449  001486  6E2E               	movwf	printf@f+1,c
  5450  001488  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5451  00148C  0100               	movlb	0	; () banked
  5452  00148E  3B8A               	swapf	??_displayLog& (0+255),f,b
  5453  001490  0EF0               	movlw	240
  5454  001492  178A               	andwf	??_displayLog& (0+255),f,b
  5455  001494  0100               	movlb	0	; () banked
  5456  001496  518A               	movf	??_displayLog& (0+255),w,b
  5457  001498  0F09               	addlw	9
  5458  00149A  EC61  F015         	call	_eepromRead
  5459  00149E  6E2F               	movwf	?_printf+2,c
  5460  0014A0  6A30               	clrf	?_printf+3,c
  5461  0014A2  BE2F               	btfsc	?_printf+2,7,c
  5462  0014A4  0630               	decf	?_printf+3,f,c
  5463  0014A6  EC36  F007         	call	_printf	;wreg free
  5464                           
  5465                           ;interface.c: 119: keycheck();
  5466  0014AA  ECED  F015         	call	_keycheck	;wreg free
  5467                           
  5468                           ;interface.c: 120: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5469  0014AE  0E01               	movlw	1
  5470  0014B0  EC17  F016         	call	_lcdInst
  5471  0014B4  0E34               	movlw	52
  5472  0014B6  0100               	movlb	0	; () banked
  5473  0014B8  6F8A               	movwf	??_displayLog& (0+255),b
  5474  0014BA  0EF1               	movlw	241
  5475  0014BC                     u8137:
  5476  0014BC  2EE8               	decfsz	wreg,f,c
  5477  0014BE  D7FE               	bra	u8137
  5478  0014C0  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5479  0014C2  D7FC               	bra	u8137
  5480  0014C4  D000               	nop2	
  5481                           
  5482                           ;interface.c: 121: printf("Run#%d    A:Next", run);
  5483  0014C6  0EB3               	movlw	low STR_28
  5484  0014C8  6E2D               	movwf	printf@f,c
  5485  0014CA  0EFE               	movlw	high STR_28
  5486  0014CC  6E2E               	movwf	printf@f+1,c
  5487  0014CE  C039  F02F         	movff	displayLog@run,?_printf+2
  5488  0014D2  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5489  0014D6  EC36  F007         	call	_printf	;wreg free
  5490                           
  5491                           ;interface.c: 122: lcdInst(0b11000000);;
  5492  0014DA  0EC0               	movlw	192
  5493  0014DC  EC17  F016         	call	_lcdInst
  5494                           
  5495                           ;interface.c: 123: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  5496  0014E0  0E06               	movlw	low STR_39
  5497  0014E2  6E2D               	movwf	printf@f,c
  5498  0014E4  0EFF               	movlw	high STR_39
  5499  0014E6  6E2E               	movwf	printf@f+1,c
  5500  0014E8  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5501  0014EC  0100               	movlb	0	; () banked
  5502  0014EE  3B8A               	swapf	??_displayLog& (0+255),f,b
  5503  0014F0  0EF0               	movlw	240
  5504  0014F2  178A               	andwf	??_displayLog& (0+255),f,b
  5505  0014F4  0100               	movlb	0	; () banked
  5506  0014F6  518A               	movf	??_displayLog& (0+255),w,b
  5507  0014F8  0F0A               	addlw	10
  5508  0014FA  EC61  F015         	call	_eepromRead
  5509  0014FE  6E2F               	movwf	?_printf+2,c
  5510  001500  6A30               	clrf	?_printf+3,c
  5511  001502  BE2F               	btfsc	?_printf+2,7,c
  5512  001504  0630               	decf	?_printf+3,f,c
  5513  001506  EC36  F007         	call	_printf	;wreg free
  5514                           
  5515                           ;interface.c: 124: keycheck();
  5516  00150A  ECED  F015         	call	_keycheck	;wreg free
  5517                           
  5518                           ;interface.c: 125: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5519  00150E  0E01               	movlw	1
  5520  001510  EC17  F016         	call	_lcdInst
  5521  001514  0E34               	movlw	52
  5522  001516  0100               	movlb	0	; () banked
  5523  001518  6F8A               	movwf	??_displayLog& (0+255),b
  5524  00151A  0EF1               	movlw	241
  5525  00151C                     u8147:
  5526  00151C  2EE8               	decfsz	wreg,f,c
  5527  00151E  D7FE               	bra	u8147
  5528  001520  2F8A               	decfsz	??_displayLog& (0+255),f,b
  5529  001522  D7FC               	bra	u8147
  5530  001524  D000               	nop2	
  5531                           
  5532                           ;interface.c: 126: printf("Run#%d    A:Next", run);
  5533  001526  0EB3               	movlw	low STR_28
  5534  001528  6E2D               	movwf	printf@f,c
  5535  00152A  0EFE               	movlw	high STR_28
  5536  00152C  6E2E               	movwf	printf@f+1,c
  5537  00152E  C039  F02F         	movff	displayLog@run,?_printf+2
  5538  001532  C03A  F030         	movff	displayLog@run+1,?_printf+3
  5539  001536  EC36  F007         	call	_printf	;wreg free
  5540                           
  5541                           ;interface.c: 127: lcdInst(0b11000000);;
  5542  00153A  0EC0               	movlw	192
  5543  00153C  EC17  F016         	call	_lcdInst
  5544                           
  5545                           ;interface.c: 128: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  5546  001540  0EA2               	movlw	low STR_41
  5547  001542  6E2D               	movwf	printf@f,c
  5548  001544  0EFE               	movlw	high STR_41
  5549  001546  6E2E               	movwf	printf@f+1,c
  5550  001548  C08F  F08A         	movff	displayLog@currRun,??_displayLog
  5551  00154C  0100               	movlb	0	; () banked
  5552  00154E  3B8A               	swapf	??_displayLog& (0+255),f,b
  5553  001550  0EF0               	movlw	240
  5554  001552  178A               	andwf	??_displayLog& (0+255),f,b
  5555  001554  0100               	movlb	0	; () banked
  5556  001556  518A               	movf	??_displayLog& (0+255),w,b
  5557  001558  0F0B               	addlw	11
  5558  00155A  EC61  F015         	call	_eepromRead
  5559  00155E  6E2F               	movwf	?_printf+2,c
  5560  001560  6A30               	clrf	?_printf+3,c
  5561  001562  BE2F               	btfsc	?_printf+2,7,c
  5562  001564  0630               	decf	?_printf+3,f,c
  5563  001566  EC36  F007         	call	_printf	;wreg free
  5564                           
  5565                           ;interface.c: 129: keycheck();
  5566  00156A  ECED  F015         	call	_keycheck	;wreg free
  5567  00156E  0012               	return		;funcret
  5568  001570                     __end_of_displayLog:
  5569                           	opt stack 0
  5570                           tblptru	equ	0xFF8
  5571                           prodh	equ	0xFF4
  5572                           prodl	equ	0xFF3
  5573                           intcon	equ	0xFF2
  5574                           intcon2	equ	0xFF1
  5575                           postinc0	equ	0xFEE
  5576                           wreg	equ	0xFE8
  5577                           indf2	equ	0xFDF
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _printf *****************
  5583 ;; Defined at:
  5584 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  f               2   44[COMRAM] PTR const unsigned char 
  5587 ;;		 -> STR_41(17), STR_40(17), STR_39(16), STR_38(17), 
  5588 ;;		 -> STR_37(17), STR_36(17), STR_35(16), STR_34(17), 
  5589 ;;		 -> STR_33(22), STR_32(17), STR_31(21), STR_30(17), 
  5590 ;;		 -> STR_29(12), STR_28(17), STR_27(8), STR_26(15), 
  5591 ;;		 -> STR_25(8), STR_24(16), STR_23(17), STR_22(16), 
  5592 ;;		 -> STR_21(9), STR_20(9), STR_19(12), STR_18(4), 
  5593 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(11), 
  5594 ;;		 -> STR_13(13), STR_12(3), STR_11(16), STR_10(16), 
  5595 ;;		 -> STR_9(3), STR_8(16), STR_7(16), STR_6(12), 
  5596 ;;		 -> STR_5(12), STR_4(17), STR_3(16), STR_2(16), 
  5597 ;;		 -> STR_1(16), 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  idx             1    0[BANK0 ] unsigned char 
  5600 ;;  tmpval          4    0        struct .
  5601 ;;  cp              3    0        PTR const unsigned char 
  5602 ;;  width           2    7[BANK0 ] int 
  5603 ;;  val             2    4[BANK0 ] unsigned int 
  5604 ;;  ap              2    1[BANK0 ] PTR void [1]
  5605 ;;		 -> ?_printf(2), 
  5606 ;;  len             2    0        unsigned int 
  5607 ;;  c               1    9[BANK0 ] char 
  5608 ;;  flag            1    6[BANK0 ] unsigned char 
  5609 ;;  prec            1    3[BANK0 ] char 
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  2   44[COMRAM] int 
  5612 ;; Registers used:
  5613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5619 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Totals:        12      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;Total ram usage:       22 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; Hardware stack levels required when called:    4
  5626 ;; This function calls:
  5627 ;;		___lwdiv
  5628 ;;		___lwmod
  5629 ;;		___wmul
  5630 ;;		_isdigit
  5631 ;;		_putch
  5632 ;; This function is called by:
  5633 ;;		_main
  5634 ;;		_homescreen
  5635 ;;		_displayLog
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text14
  5640  000E6C                     __ptext14:
  5641                           	opt stack 0
  5642  000E6C                     _printf:
  5643                           	opt stack 26
  5644                           
  5645                           ;doprnt.c: 466: va_list ap;
  5646                           ;doprnt.c: 499: signed char c;
  5647                           ;doprnt.c: 501: int width;
  5648                           ;doprnt.c: 506: signed char prec;
  5649                           ;doprnt.c: 508: unsigned char flag;
  5650                           ;doprnt.c: 523: union {
  5651                           ;doprnt.c: 524: unsigned long vd;
  5652                           ;doprnt.c: 525: double integ;
  5653                           ;doprnt.c: 526: } tmpval;
  5654                           ;doprnt.c: 528: unsigned int val;
  5655                           ;doprnt.c: 529: unsigned len;
  5656                           ;doprnt.c: 530: const char * cp;
  5657                           ;doprnt.c: 533: *ap = __va_start();
  5658                           
  5659                           ;incstack = 0
  5660  000E6C  0E2F               	movlw	low (?_printf+2)
  5661  000E6E  0100               	movlb	0	; () banked
  5662  000E70  6F81               	movwf	printf@ap& (0+255),b
  5663  000E72  0E00               	movlw	high (?_printf+2)
  5664  000E74  0100               	movlb	0	; () banked
  5665  000E76  6F82               	movwf	(printf@ap+1)& (0+255),b
  5666                           
  5667                           ;doprnt.c: 536: while(c = *f++) {
  5668  000E78  D1AF               	goto	l5459
  5669  000E7A                     l5333:
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;doprnt.c: 538: if(c != '%')
  5673  000E7A  0E25               	movlw	37
  5674  000E7C  0100               	movlb	0	; () banked
  5675  000E7E  1989               	xorwf	printf@c& (0+255),w,b
  5676  000E80  B4D8               	btfsc	status,2,c
  5677  000E82  D005               	goto	l5337
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;doprnt.c: 540: {
  5681                           ;doprnt.c: 541: (putch(c) );
  5682  000E84  0100               	movlb	0	; () banked
  5683  000E86  5189               	movf	printf@c& (0+255),w,b
  5684  000E88  EC11  F016         	call	_putch
  5685                           
  5686                           ;doprnt.c: 542: continue;
  5687  000E8C  D1A5               	goto	l5459
  5688  000E8E                     l5337:
  5689                           
  5690                           ;doprnt.c: 543: }
  5691                           ;doprnt.c: 546: width = 0;
  5692  000E8E  0E00               	movlw	0
  5693  000E90  0100               	movlb	0	; () banked
  5694  000E92  6F88               	movwf	(printf@width+1)& (0+255),b
  5695  000E94  0E00               	movlw	0
  5696  000E96  6F87               	movwf	printf@width& (0+255),b
  5697                           
  5698                           ;doprnt.c: 548: flag = 0;
  5699  000E98  0E00               	movlw	0
  5700  000E9A  0100               	movlb	0	; () banked
  5701  000E9C  6F86               	movwf	printf@flag& (0+255),b
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;doprnt.c: 551: switch(*f) {
  5705                           
  5706                           ;doprnt.c: 550: for(;;) {
  5707  000E9E  D004               	goto	l5343
  5708  000EA0                     l5339:
  5709                           
  5710                           ;doprnt.c: 580: flag |= 0x04;
  5711  000EA0  0100               	movlb	0	; () banked
  5712  000EA2  8586               	bsf	printf@flag& (0+255),2,b
  5713                           
  5714                           ;doprnt.c: 581: f++;
  5715  000EA4  4A2D               	infsnz	printf@f,f,c
  5716  000EA6  2A2E               	incf	printf@f+1,f,c
  5717  000EA8                     l5343:
  5718  000EA8  C02D  FFF6         	movff	printf@f,tblptrl
  5719  000EAC  C02E  FFF7         	movff	printf@f+1,tblptrh
  5720  000EB0                     	if	0	;tblptru may be non-zero
  5721  000EB0                     	endif
  5722  000EB0                     	if	0	;tblptru may be non-zero
  5723  000EB0                     	endif
  5724  000EB0  0008               	tblrd		*
  5725  000EB2  50F5               	movf	tablat,w,c
  5726                           
  5727                           ; Switch size 1, requested type "space"
  5728                           ; Number of cases is 1, Range of values is 48 to 48
  5729                           ; switch strategies available:
  5730                           ; Name         Instructions Cycles
  5731                           ; simple_byte            4     3 (average)
  5732                           ;	Chosen strategy is simple_byte
  5733  000EB4  0A30               	xorlw	48	; case 48
  5734  000EB6  B4D8               	btfsc	status,2,c
  5735  000EB8  D7F3               	goto	l5339
  5736                           
  5737                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5738                           
  5739                           ;doprnt.c: 586: }
  5740                           
  5741                           ;doprnt.c: 585: break;
  5742  000EBA  C02D  FFF6         	movff	printf@f,tblptrl
  5743  000EBE  C02E  FFF7         	movff	printf@f+1,tblptrh
  5744  000EC2                     	if	0	;tblptru may be non-zero
  5745  000EC2                     	endif
  5746  000EC2                     	if	0	;tblptru may be non-zero
  5747  000EC2                     	endif
  5748  000EC2  0008               	tblrd		*
  5749  000EC4  50F5               	movf	tablat,w,c
  5750  000EC6  ECD3  F015         	call	_isdigit
  5751  000ECA  A0D8               	btfss	status,0,c
  5752  000ECC  D039               	goto	l5361
  5753                           
  5754                           ;doprnt.c: 598: width = 0;
  5755  000ECE  0E00               	movlw	0
  5756  000ED0  0100               	movlb	0	; () banked
  5757  000ED2  6F88               	movwf	(printf@width+1)& (0+255),b
  5758  000ED4  0E00               	movlw	0
  5759  000ED6  6F87               	movwf	printf@width& (0+255),b
  5760  000ED8                     l5349:
  5761                           
  5762                           ;doprnt.c: 600: width *= 10;
  5763  000ED8  C087  F021         	movff	printf@width,___wmul@multiplier
  5764  000EDC  C088  F022         	movff	printf@width+1,___wmul@multiplier+1
  5765  000EE0  0E00               	movlw	0
  5766  000EE2  6E24               	movwf	___wmul@multiplicand+1,c
  5767  000EE4  0E0A               	movlw	10
  5768  000EE6  6E23               	movwf	___wmul@multiplicand,c
  5769  000EE8  EC9B  F015         	call	___wmul	;wreg free
  5770  000EEC  C021  F087         	movff	?___wmul,printf@width
  5771  000EF0  C022  F088         	movff	?___wmul+1,printf@width+1
  5772                           
  5773                           ;doprnt.c: 601: width += *f++ - '0';
  5774  000EF4  0ED0               	movlw	208
  5775  000EF6  6E35               	movwf	??_printf& (0+255),c
  5776  000EF8  0EFF               	movlw	255
  5777  000EFA  6E36               	movwf	(??_printf+1)& (0+255),c
  5778  000EFC  C02D  FFF6         	movff	printf@f,tblptrl
  5779  000F00  C02E  FFF7         	movff	printf@f+1,tblptrh
  5780  000F04                     	if	0	;tblptru may be non-zero
  5781  000F04                     	endif
  5782  000F04                     	if	0	;tblptru may be non-zero
  5783  000F04                     	endif
  5784  000F04  0008               	tblrd		*
  5785  000F06  50F5               	movf	tablat,w,c
  5786  000F08  6E37               	movwf	(??_printf+2)& (0+255),c
  5787  000F0A  6A38               	clrf	(??_printf+3)& (0+255),c
  5788  000F0C  5035               	movf	??_printf,w,c
  5789  000F0E  2637               	addwf	??_printf+2,f,c
  5790  000F10  5036               	movf	??_printf+1,w,c
  5791  000F12  2238               	addwfc	??_printf+3,f,c
  5792  000F14  5037               	movf	??_printf+2,w,c
  5793  000F16  0100               	movlb	0	; () banked
  5794  000F18  2787               	addwf	printf@width& (0+255),f,b
  5795  000F1A  5038               	movf	??_printf+3,w,c
  5796  000F1C  0100               	movlb	0	; () banked
  5797  000F1E  2388               	addwfc	(printf@width+1)& (0+255),f,b
  5798                           
  5799                           ; BSR set to: 0
  5800  000F20  4A2D               	infsnz	printf@f,f,c
  5801  000F22  2A2E               	incf	printf@f+1,f,c
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5805  000F24  C02D  FFF6         	movff	printf@f,tblptrl
  5806  000F28  C02E  FFF7         	movff	printf@f+1,tblptrh
  5807  000F2C                     	if	0	;tblptru may be non-zero
  5808  000F2C                     	endif
  5809  000F2C                     	if	0	;tblptru may be non-zero
  5810  000F2C                     	endif
  5811  000F2C  0008               	tblrd		*
  5812  000F2E  50F5               	movf	tablat,w,c
  5813  000F30  ECD3  F015         	call	_isdigit
  5814  000F34  A0D8               	btfss	status,0,c
  5815  000F36  D004               	goto	l5361
  5816  000F38  D7CF               	goto	l5349
  5817  000F3A                     l5357:
  5818                           
  5819                           ;doprnt.c: 721: flag |= 0x80;
  5820  000F3A  0100               	movlb	0	; () banked
  5821  000F3C  8F86               	bsf	printf@flag& (0+255),7,b
  5822                           
  5823                           ;doprnt.c: 723: break;
  5824  000F3E  D018               	goto	l829
  5825  000F40                     l5361:
  5826  000F40  C02D  FFF6         	movff	printf@f,tblptrl
  5827  000F44  C02E  FFF7         	movff	printf@f+1,tblptrh
  5828  000F48  4A2D               	infsnz	printf@f,f,c
  5829  000F4A  2A2E               	incf	printf@f+1,f,c
  5830  000F4C                     	if	0	;tblptru may be non-zero
  5831  000F4C                     	endif
  5832  000F4C                     	if	0	;tblptru may be non-zero
  5833  000F4C                     	endif
  5834  000F4C  0008               	tblrd		*
  5835  000F4E  CFF5 F089          	movff	tablat,printf@c
  5836  000F52  0100               	movlb	0	; () banked
  5837  000F54  5189               	movf	printf@c& (0+255),w,b
  5838                           
  5839                           ; Switch size 1, requested type "space"
  5840                           ; Number of cases is 4, Range of values is 0 to 120
  5841                           ; switch strategies available:
  5842                           ; Name         Instructions Cycles
  5843                           ; simple_byte           13     7 (average)
  5844                           ;	Chosen strategy is simple_byte
  5845  000F56  0A00               	xorlw	0	; case 0
  5846  000F58  B4D8               	btfsc	status,2,c
  5847  000F5A  0012               	return	
  5848  000F5C  0A64               	xorlw	100	; case 100
  5849  000F5E  B4D8               	btfsc	status,2,c
  5850  000F60  D007               	goto	l829
  5851  000F62  0A0D               	xorlw	13	; case 105
  5852  000F64  B4D8               	btfsc	status,2,c
  5853  000F66  D004               	goto	l829
  5854  000F68  0A11               	xorlw	17	; case 120
  5855  000F6A  B4D8               	btfsc	status,2,c
  5856  000F6C  D7E6               	goto	l5357
  5857  000F6E  D134               	goto	l5459
  5858  000F70                     l829:
  5859                           
  5860                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5861  000F70  0100               	movlb	0	; () banked
  5862  000F72  BF86               	btfsc	printf@flag& (0+255),7,b
  5863  000F74  D019               	goto	l5373
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;doprnt.c: 1253: {
  5867                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5868  000F76  C081  FFD9         	movff	printf@ap,fsr2l
  5869  000F7A  C082  FFDA         	movff	printf@ap+1,fsr2h
  5870  000F7E  CFDE F084          	movff	postinc2,printf@val
  5871  000F82  CFDD F085          	movff	postdec2,printf@val+1
  5872                           
  5873                           ; BSR set to: 0
  5874  000F86  0E02               	movlw	2
  5875  000F88  0100               	movlb	0	; () banked
  5876  000F8A  2781               	addwf	printf@ap& (0+255),f,b
  5877  000F8C  0E00               	movlw	0
  5878  000F8E  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;doprnt.c: 1261: if((int)val < 0) {
  5882  000F90  0100               	movlb	0	; () banked
  5883  000F92  AF85               	btfss	(printf@val+1)& (0+255),7,b
  5884  000F94  D053               	goto	l5407
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;doprnt.c: 1262: flag |= 0x03;
  5888  000F96  0E03               	movlw	3
  5889  000F98  0100               	movlb	0	; () banked
  5890  000F9A  1386               	iorwf	printf@flag& (0+255),f,b
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;doprnt.c: 1263: val = -val;
  5894  000F9C  0100               	movlb	0	; () banked
  5895  000F9E  6D84               	negf	printf@val& (0+255),b
  5896  000FA0  1F85               	comf	(printf@val+1)& (0+255),f,b
  5897  000FA2  B0D8               	btfsc	status,0,c
  5898  000FA4  2B85               	incf	(printf@val+1)& (0+255),f,b
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;doprnt.c: 1264: }
  5902                           ;doprnt.c: 1266: }
  5903  000FA6  D04A               	goto	l5407
  5904  000FA8                     l5373:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;doprnt.c: 1268: else
  5908                           ;doprnt.c: 1273: {
  5909                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5910  000FA8  C081  FFD9         	movff	printf@ap,fsr2l
  5911  000FAC  C082  FFDA         	movff	printf@ap+1,fsr2h
  5912  000FB0  CFDE F084          	movff	postinc2,printf@val
  5913  000FB4  CFDD F085          	movff	postdec2,printf@val+1
  5914                           
  5915                           ; BSR set to: 0
  5916  000FB8  0E02               	movlw	2
  5917  000FBA  0100               	movlb	0	; () banked
  5918  000FBC  2781               	addwf	printf@ap& (0+255),f,b
  5919  000FBE  0E00               	movlw	0
  5920  000FC0  2382               	addwfc	(printf@ap+1)& (0+255),f,b
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;doprnt.c: 1287: }
  5924                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5925  000FC2  D03C               	goto	l5407
  5926  000FC4                     l5377:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5930  000FC4  0E01               	movlw	1
  5931  000FC6  0100               	movlb	0	; () banked
  5932  000FC8  6F89               	movwf	printf@c& (0+255),b
  5933  000FCA                     l5379:
  5934                           
  5935                           ; BSR set to: 0
  5936  000FCA  0E05               	movlw	5
  5937  000FCC  0100               	movlb	0	; () banked
  5938  000FCE  1989               	xorwf	printf@c& (0+255),w,b
  5939  000FD0  B4D8               	btfsc	status,2,c
  5940  000FD2  D03D               	goto	l5409
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;doprnt.c: 1306: if(val < dpowers[c])
  5944                           
  5945                           ; BSR set to: 0
  5946                           
  5947                           ; BSR set to: 0
  5948  000FD4  0100               	movlb	0	; () banked
  5949  000FD6  5189               	movf	printf@c& (0+255),w,b
  5950  000FD8  0D02               	mullw	2
  5951  000FDA  0E3C               	movlw	low _dpowers
  5952  000FDC  24F3               	addwf	prodl,w,c
  5953  000FDE  6EF6               	movwf	tblptrl,c
  5954  000FE0  0EFE               	movlw	high _dpowers
  5955  000FE2  20F4               	addwfc	prodh,w,c
  5956  000FE4  6EF7               	movwf	tblptrh,c
  5957  000FE6                     	if	0	;There are less than 3 active tblptr bytes
  5958  000FE6                     	endif
  5959  000FE6  0009               	tblrd		*+
  5960  000FE8  50F5               	movf	tablat,w,c
  5961  000FEA  0100               	movlb	0	; () banked
  5962  000FEC  5D84               	subwf	printf@val& (0+255),w,b
  5963  000FEE  0009               	tblrd		*+
  5964  000FF0  50F5               	movf	tablat,w,c
  5965  000FF2  0100               	movlb	0	; () banked
  5966  000FF4  5985               	subwfb	(printf@val+1)& (0+255),w,b
  5967  000FF6  A0D8               	btfss	status,0,c
  5968  000FF8  D02A               	goto	l5409
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;doprnt.c: 1307: break;
  5976  000FFA  0100               	movlb	0	; () banked
  5977  000FFC  2B89               	incf	printf@c& (0+255),f,b
  5978  000FFE  D7E5               	goto	l5379
  5979  001000                     l5391:
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5983  001000  0E01               	movlw	1
  5984  001002  0100               	movlb	0	; () banked
  5985  001004  6F89               	movwf	printf@c& (0+255),b
  5986  001006                     l5393:
  5987                           
  5988                           ; BSR set to: 0
  5989  001006  0E04               	movlw	4
  5990  001008  0100               	movlb	0	; () banked
  5991  00100A  1989               	xorwf	printf@c& (0+255),w,b
  5992  00100C  B4D8               	btfsc	status,2,c
  5993  00100E  D01F               	goto	l5409
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5997                           
  5998                           ; BSR set to: 0
  5999                           
  6000                           ; BSR set to: 0
  6001  001010  0100               	movlb	0	; () banked
  6002  001012  5189               	movf	printf@c& (0+255),w,b
  6003  001014  0D02               	mullw	2
  6004  001016  0E46               	movlw	low _hexpowers
  6005  001018  24F3               	addwf	prodl,w,c
  6006  00101A  6EF6               	movwf	tblptrl,c
  6007  00101C  0EFE               	movlw	high _hexpowers
  6008  00101E  20F4               	addwfc	prodh,w,c
  6009  001020  6EF7               	movwf	tblptrh,c
  6010  001022                     	if	0	;There are less than 3 active tblptr bytes
  6011  001022                     	endif
  6012  001022  0009               	tblrd		*+
  6013  001024  50F5               	movf	tablat,w,c
  6014  001026  0100               	movlb	0	; () banked
  6015  001028  5D84               	subwf	printf@val& (0+255),w,b
  6016  00102A  0009               	tblrd		*+
  6017  00102C  50F5               	movf	tablat,w,c
  6018  00102E  0100               	movlb	0	; () banked
  6019  001030  5985               	subwfb	(printf@val+1)& (0+255),w,b
  6020  001032  A0D8               	btfss	status,0,c
  6021  001034  D00C               	goto	l5409
  6022                           
  6023                           ; BSR set to: 0
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;doprnt.c: 1318: break;
  6029  001036  0100               	movlb	0	; () banked
  6030  001038  2B89               	incf	printf@c& (0+255),f,b
  6031  00103A  D7E5               	goto	l5393
  6032  00103C                     l5407:
  6033                           
  6034                           ; BSR set to: 0
  6035  00103C  0100               	movlb	0	; () banked
  6036  00103E  5186               	movf	printf@flag& (0+255),w,b
  6037  001040  0B80               	andlw	128
  6038                           
  6039                           ; Switch size 1, requested type "space"
  6040                           ; Number of cases is 2, Range of values is 0 to 128
  6041                           ; switch strategies available:
  6042                           ; Name         Instructions Cycles
  6043                           ; simple_byte            7     4 (average)
  6044                           ;	Chosen strategy is simple_byte
  6045  001042  0A00               	xorlw	0	; case 0
  6046  001044  B4D8               	btfsc	status,2,c
  6047  001046  D7BE               	goto	l5377
  6048  001048  0A80               	xorlw	128	; case 128
  6049  00104A  B4D8               	btfsc	status,2,c
  6050  00104C  D7D9               	goto	l5391
  6051  00104E                     l5409:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6055  00104E  0100               	movlb	0	; () banked
  6056  001050  5187               	movf	printf@width& (0+255),w,b
  6057  001052  0100               	movlb	0	; () banked
  6058  001054  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6059  001056  B4D8               	btfsc	status,2,c
  6060  001058  D00A               	goto	l5415
  6061                           
  6062                           ; BSR set to: 0
  6063  00105A  C086  F035         	movff	printf@flag,??_printf
  6064  00105E  0E03               	movlw	3
  6065  001060  1635               	andwf	??_printf,f,c
  6066  001062  B4D8               	btfsc	status,2,c
  6067  001064  D004               	goto	l5415
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;doprnt.c: 1346: width--;
  6071  001066  0100               	movlb	0	; () banked
  6072  001068  0787               	decf	printf@width& (0+255),f,b
  6073  00106A  A0D8               	btfss	status,0,c
  6074  00106C  0788               	decf	(printf@width+1)& (0+255),f,b
  6075  00106E                     l5415:
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;doprnt.c: 1381: if(width > c)
  6079  00106E  0E80               	movlw	128
  6080  001070  0100               	movlb	0	; () banked
  6081  001072  BF89               	btfsc	printf@c& (0+255),7,b
  6082  001074  0E7F               	movlw	127
  6083  001076  6E35               	movwf	??_printf& (0+255),c
  6084  001078  0100               	movlb	0	; () banked
  6085  00107A  5187               	movf	printf@width& (0+255),w,b
  6086  00107C  0100               	movlb	0	; () banked
  6087  00107E  5D89               	subwf	printf@c& (0+255),w,b
  6088  001080  0100               	movlb	0	; () banked
  6089  001082  5188               	movf	(printf@width+1)& (0+255),w,b
  6090  001084  0A80               	xorlw	128
  6091  001086  5835               	subwfb	??_printf& (0+255),w,c
  6092  001088  B0D8               	btfsc	status,0,c
  6093  00108A  D00B               	goto	l5419
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;doprnt.c: 1382: width -= c;
  6097  00108C  0100               	movlb	0	; () banked
  6098  00108E  5189               	movf	printf@c& (0+255),w,b
  6099  001090  0100               	movlb	0	; () banked
  6100  001092  5F87               	subwf	printf@width& (0+255),f,b
  6101  001094  0E00               	movlw	0
  6102  001096  0100               	movlb	0	; () banked
  6103  001098  BF89               	btfsc	printf@c& (0+255),7,b
  6104  00109A  0EFF               	movlw	255
  6105  00109C  0100               	movlb	0	; () banked
  6106  00109E  5B88               	subwfb	(printf@width+1)& (0+255),f,b
  6107  0010A0  D005               	goto	l5421
  6108  0010A2                     l5419:
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;doprnt.c: 1383: else
  6112                           ;doprnt.c: 1384: width = 0;
  6113  0010A2  0E00               	movlw	0
  6114  0010A4  0100               	movlb	0	; () banked
  6115  0010A6  6F88               	movwf	(printf@width+1)& (0+255),b
  6116  0010A8  0E00               	movlw	0
  6117  0010AA  6F87               	movwf	printf@width& (0+255),b
  6118  0010AC                     l5421:
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;doprnt.c: 1387: if(flag & 0x04) {
  6122  0010AC  0100               	movlb	0	; () banked
  6123  0010AE  A586               	btfss	printf@flag& (0+255),2,b
  6124  0010B0  D017               	goto	l5433
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;doprnt.c: 1392: if(flag & 0x03)
  6128  0010B2  C086  F035         	movff	printf@flag,??_printf
  6129  0010B6  0E03               	movlw	3
  6130  0010B8  1635               	andwf	??_printf,f,c
  6131  0010BA  B4D8               	btfsc	status,2,c
  6132  0010BC  D003               	goto	l5427
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;doprnt.c: 1393: (putch('-') );
  6136  0010BE  0E2D               	movlw	45
  6137  0010C0  EC11  F016         	call	_putch
  6138  0010C4                     l5427:
  6139                           
  6140                           ;doprnt.c: 1415: if(width)
  6141  0010C4  0100               	movlb	0	; () banked
  6142  0010C6  5187               	movf	printf@width& (0+255),w,b
  6143  0010C8  0100               	movlb	0	; () banked
  6144  0010CA  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6145  0010CC  B4D8               	btfsc	status,2,c
  6146  0010CE  D024               	goto	l5443
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;doprnt.c: 1417: (putch('0') );
  6150                           
  6151                           ; BSR set to: 0
  6152                           
  6153                           ;doprnt.c: 1416: do
  6154  0010D0  0E30               	movlw	48
  6155  0010D2  EC11  F016         	call	_putch
  6156                           
  6157                           ;doprnt.c: 1418: while(--width);
  6158  0010D6  0100               	movlb	0	; () banked
  6159  0010D8  0787               	decf	printf@width& (0+255),f,b
  6160  0010DA  A0D8               	btfss	status,0,c
  6161  0010DC  0788               	decf	(printf@width+1)& (0+255),f,b
  6162  0010DE  D7F2               	goto	l5427
  6163  0010E0                     l5433:
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;doprnt.c: 1422: {
  6167                           ;doprnt.c: 1424: if(width
  6168                           ;doprnt.c: 1428: )
  6169  0010E0  0100               	movlb	0	; () banked
  6170  0010E2  5187               	movf	printf@width& (0+255),w,b
  6171  0010E4  0100               	movlb	0	; () banked
  6172  0010E6  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6173  0010E8  B4D8               	btfsc	status,2,c
  6174  0010EA  D00D               	goto	l5439
  6175  0010EC                     l5435:
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;doprnt.c: 1430: (putch(' ') );
  6179  0010EC  0E20               	movlw	32
  6180  0010EE  EC11  F016         	call	_putch
  6181                           
  6182                           ;doprnt.c: 1431: while(--width);
  6183  0010F2  0100               	movlb	0	; () banked
  6184  0010F4  0787               	decf	printf@width& (0+255),f,b
  6185  0010F6  A0D8               	btfss	status,0,c
  6186  0010F8  0788               	decf	(printf@width+1)& (0+255),f,b
  6187  0010FA  0100               	movlb	0	; () banked
  6188  0010FC  5187               	movf	printf@width& (0+255),w,b
  6189  0010FE  0100               	movlb	0	; () banked
  6190  001100  1188               	iorwf	(printf@width+1)& (0+255),w,b
  6191  001102  A4D8               	btfss	status,2,c
  6192  001104  D7F3               	goto	l5435
  6193  001106                     l5439:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;doprnt.c: 1438: if(flag & 0x03)
  6197  001106  C086  F035         	movff	printf@flag,??_printf
  6198  00110A  0E03               	movlw	3
  6199  00110C  1635               	andwf	??_printf,f,c
  6200  00110E  B4D8               	btfsc	status,2,c
  6201  001110  D003               	goto	l5443
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;doprnt.c: 1439: (putch('-') );
  6205  001112  0E2D               	movlw	45
  6206  001114  EC11  F016         	call	_putch
  6207  001118                     l5443:
  6208                           
  6209                           ;doprnt.c: 1469: }
  6210                           ;doprnt.c: 1472: prec = c;
  6211  001118  C089  F083         	movff	printf@c,printf@prec
  6212                           
  6213                           ;doprnt.c: 1474: while(prec--) {
  6214  00111C  D057               	goto	l5457
  6215  00111E                     l5445:
  6216                           
  6217                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6218  00111E  0100               	movlb	0	; () banked
  6219  001120  5183               	movf	printf@prec& (0+255),w,b
  6220  001122  0D02               	mullw	2
  6221  001124  0E3C               	movlw	low _dpowers
  6222  001126  24F3               	addwf	prodl,w,c
  6223  001128  6EF6               	movwf	tblptrl,c
  6224  00112A  0EFE               	movlw	high _dpowers
  6225  00112C  20F4               	addwfc	prodh,w,c
  6226  00112E  6EF7               	movwf	tblptrh,c
  6227  001130                     	if	0	;There are less than 3 active tblptr bytes
  6228  001130                     	endif
  6229  001130  0009               	tblrd		*+
  6230  001132  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6231  001136  000A               	tblrd		*-
  6232  001138  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6233  00113C  C084  F021         	movff	printf@val,___lwdiv@dividend
  6234  001140  C085  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6235  001144  EC8C  F014         	call	___lwdiv	;wreg free
  6236  001148  C021  F028         	movff	?___lwdiv,___lwmod@dividend
  6237  00114C  C022  F029         	movff	?___lwdiv+1,___lwmod@dividend+1
  6238  001150  0E00               	movlw	0
  6239  001152  6E2B               	movwf	___lwmod@divisor+1,c
  6240  001154  0E0A               	movlw	10
  6241  001156  6E2A               	movwf	___lwmod@divisor,c
  6242  001158  EC24  F015         	call	___lwmod	;wreg free
  6243  00115C  5028               	movf	?___lwmod,w,c
  6244  00115E  0F30               	addlw	48
  6245  001160  0100               	movlb	0	; () banked
  6246  001162  6F89               	movwf	printf@c& (0+255),b
  6247                           
  6248                           ;doprnt.c: 1491: break;
  6249  001164  D02F               	goto	l5455
  6250  001166                     l5447:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;doprnt.c: 1499: {
  6254                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6255  001166  C084  F021         	movff	printf@val,___lwdiv@dividend
  6256  00116A  C085  F022         	movff	printf@val+1,___lwdiv@dividend+1
  6257  00116E  0100               	movlb	0	; () banked
  6258  001170  5183               	movf	printf@prec& (0+255),w,b
  6259  001172  0D02               	mullw	2
  6260  001174  0E46               	movlw	low _hexpowers
  6261  001176  24F3               	addwf	prodl,w,c
  6262  001178  6EF6               	movwf	tblptrl,c
  6263  00117A  0EFE               	movlw	high _hexpowers
  6264  00117C  20F4               	addwfc	prodh,w,c
  6265  00117E  6EF7               	movwf	tblptrh,c
  6266  001180                     	if	0	;There are less than 3 active tblptr bytes
  6267  001180                     	endif
  6268  001180  0009               	tblrd		*+
  6269  001182  CFF5 F023          	movff	tablat,___lwdiv@divisor
  6270  001186  000A               	tblrd		*-
  6271  001188  CFF5 F024          	movff	tablat,___lwdiv@divisor+1
  6272  00118C  EC8C  F014         	call	___lwdiv	;wreg free
  6273  001190  5021               	movf	?___lwdiv,w,c
  6274  001192  0B0F               	andlw	15
  6275  001194  0100               	movlb	0	; () banked
  6276  001196  6F80               	movwf	printf@idx& (0+255),b
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6280  001198  0100               	movlb	0	; () banked
  6281  00119A  5180               	movf	printf@idx& (0+255),w,b
  6282  00119C  0D01               	mullw	1
  6283  00119E  0E80               	movlw	low STR_42
  6284  0011A0  24F3               	addwf	prodl,w,c
  6285  0011A2  6EF6               	movwf	tblptrl,c
  6286  0011A4  0EFE               	movlw	high STR_42
  6287  0011A6  20F4               	addwfc	prodh,w,c
  6288  0011A8  6EF7               	movwf	tblptrh,c
  6289  0011AA                     	if	0	;There are less than 3 active tblptr bytes
  6290  0011AA                     	endif
  6291  0011AA  0008               	tblrd		*
  6292  0011AC  CFF5 F089          	movff	tablat,printf@c
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;doprnt.c: 1523: }
  6296                           
  6297                           ;doprnt.c: 1508: }
  6298                           ;doprnt.c: 1510: break;
  6299  0011B0  D009               	goto	l5455
  6300  0011B2                     l5453:
  6301  0011B2  0100               	movlb	0	; () banked
  6302  0011B4  5186               	movf	printf@flag& (0+255),w,b
  6303  0011B6  0B80               	andlw	128
  6304                           
  6305                           ; Switch size 1, requested type "space"
  6306                           ; Number of cases is 2, Range of values is 0 to 128
  6307                           ; switch strategies available:
  6308                           ; Name         Instructions Cycles
  6309                           ; simple_byte            7     4 (average)
  6310                           ;	Chosen strategy is simple_byte
  6311  0011B8  0A00               	xorlw	0	; case 0
  6312  0011BA  B4D8               	btfsc	status,2,c
  6313  0011BC  D7B0               	goto	l5445
  6314  0011BE  0A80               	xorlw	128	; case 128
  6315  0011C0  B4D8               	btfsc	status,2,c
  6316  0011C2  D7D1               	goto	l5447
  6317  0011C4                     l5455:
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;doprnt.c: 1524: (putch(c) );
  6321  0011C4  0100               	movlb	0	; () banked
  6322  0011C6  5189               	movf	printf@c& (0+255),w,b
  6323  0011C8  EC11  F016         	call	_putch
  6324  0011CC                     l5457:
  6325  0011CC  0100               	movlb	0	; () banked
  6326  0011CE  0783               	decf	printf@prec& (0+255),f,b
  6327  0011D0  0100               	movlb	0	; () banked
  6328  0011D2  2983               	incf	printf@prec& (0+255),w,b
  6329  0011D4  A4D8               	btfss	status,2,c
  6330  0011D6  D7ED               	goto	l5453
  6331  0011D8                     l5459:
  6332  0011D8  C02D  FFF6         	movff	printf@f,tblptrl
  6333  0011DC  C02E  FFF7         	movff	printf@f+1,tblptrh
  6334  0011E0  4A2D               	infsnz	printf@f,f,c
  6335  0011E2  2A2E               	incf	printf@f+1,f,c
  6336  0011E4                     	if	0	;tblptru may be non-zero
  6337  0011E4                     	endif
  6338  0011E4                     	if	0	;tblptru may be non-zero
  6339  0011E4                     	endif
  6340  0011E4  0008               	tblrd		*
  6341  0011E6  CFF5 F089          	movff	tablat,printf@c
  6342  0011EA  0100               	movlb	0	; () banked
  6343  0011EC  5189               	movf	printf@c& (0+255),w,b
  6344  0011EE  B4D8               	btfsc	status,2,c
  6345  0011F0  0012               	return	
  6346  0011F2  D643               	goto	l5333
  6347  0011F4                     __end_of_printf:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           intcon2	equ	0xFF1
  6357                           postinc0	equ	0xFEE
  6358                           wreg	equ	0xFE8
  6359                           indf2	equ	0xFDF
  6360                           postinc2	equ	0xFDE
  6361                           postdec2	equ	0xFDD
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _putch *****************
  6367 ;; Defined at:
  6368 ;;		line 27 in file "lcd.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;  data            1    wreg     unsigned char 
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;  data            1   34[COMRAM] unsigned char 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;Total ram usage:        1 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    3
  6389 ;; This function calls:
  6390 ;;		_lcdNibble
  6391 ;; This function is called by:
  6392 ;;		_printf
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           	psect	text15
  6397  002C22                     __ptext15:
  6398                           	opt stack 0
  6399  002C22                     _putch:
  6400                           	opt stack 26
  6401                           
  6402                           ;incstack = 0
  6403                           ;putch@data stored from wreg
  6404  002C22  6E23               	movwf	putch@data,c
  6405                           
  6406                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6407  002C24  848C               	bsf	3980,2,c	;volatile
  6408                           
  6409                           ;lcd.c: 29: lcdNibble(data);
  6410  002C26  5023               	movf	putch@data,w,c
  6411  002C28  EC61  F014         	call	_lcdNibble
  6412  002C2C  0012               	return		;funcret
  6413  002C2E                     __end_of_putch:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           intcon2	equ	0xFF1
  6423                           postinc0	equ	0xFEE
  6424                           wreg	equ	0xFE8
  6425                           indf2	equ	0xFDF
  6426                           postinc2	equ	0xFDE
  6427                           postdec2	equ	0xFDD
  6428                           fsr2h	equ	0xFDA
  6429                           fsr2l	equ	0xFD9
  6430                           status	equ	0xFD8
  6431                           
  6432 ;; *************** function _isdigit *****************
  6433 ;; Defined at:
  6434 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  c               1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  c               1   34[COMRAM] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;		None               void
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;Total ram usage:        3 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    2
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_printf
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           	psect	text16
  6463  002BA6                     __ptext16:
  6464                           	opt stack 0
  6465  002BA6                     _isdigit:
  6466                           	opt stack 27
  6467                           
  6468                           ;incstack = 0
  6469                           ;isdigit@c stored from wreg
  6470  002BA6  6E23               	movwf	isdigit@c,c
  6471  002BA8  0E00               	movlw	0
  6472  002BAA  6E22               	movwf	_isdigit$1451,c
  6473  002BAC  0E3A               	movlw	58
  6474  002BAE  6023               	cpfslt	isdigit@c,c
  6475  002BB0  D005               	goto	l5269
  6476  002BB2  0E2F               	movlw	47
  6477  002BB4  6423               	cpfsgt	isdigit@c,c
  6478  002BB6  D002               	goto	l5269
  6479  002BB8  0E01               	movlw	1
  6480  002BBA  6E22               	movwf	_isdigit$1451,c
  6481  002BBC                     l5269:
  6482  002BBC  C022  F021         	movff	_isdigit$1451,??_isdigit
  6483  002BC0  3021               	rrcf	??_isdigit,w,c
  6484  002BC2  0012               	return	
  6485  002BC4                     __end_of_isdigit:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodh	equ	0xFF4
  6492                           prodl	equ	0xFF3
  6493                           intcon	equ	0xFF2
  6494                           intcon2	equ	0xFF1
  6495                           postinc0	equ	0xFEE
  6496                           wreg	equ	0xFE8
  6497                           indf2	equ	0xFDF
  6498                           postinc2	equ	0xFDE
  6499                           postdec2	equ	0xFDD
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8
  6503                           
  6504 ;; *************** function ___wmul *****************
  6505 ;; Defined at:
  6506 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  multiplier      2   32[COMRAM] unsigned int 
  6509 ;;  multiplicand    2   34[COMRAM] unsigned int 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  product         2   36[COMRAM] unsigned int 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  2   32[COMRAM] unsigned int 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, prodl, prodh
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6521 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;Total ram usage:        6 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    2
  6528 ;; This function calls:
  6529 ;;		Nothing
  6530 ;; This function is called by:
  6531 ;;		_printf
  6532 ;;		_timePassed
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text17
  6537  002B36                     __ptext17:
  6538                           	opt stack 0
  6539  002B36                     ___wmul:
  6540                           	opt stack 27
  6541                           
  6542                           ;incstack = 0
  6543  002B36  5021               	movf	___wmul@multiplier,w,c
  6544  002B38  0223               	mulwf	___wmul@multiplicand,c
  6545  002B3A  CFF3 F025          	movff	prodl,___wmul@product
  6546  002B3E  CFF4 F026          	movff	prodh,___wmul@product+1
  6547  002B42  5021               	movf	___wmul@multiplier,w,c
  6548  002B44  0224               	mulwf	___wmul@multiplicand+1,c
  6549  002B46  50F3               	movf	prodl,w,c
  6550  002B48  2626               	addwf	___wmul@product+1,f,c
  6551  002B4A  5022               	movf	___wmul@multiplier+1,w,c
  6552  002B4C  0223               	mulwf	___wmul@multiplicand,c
  6553  002B4E  50F3               	movf	prodl,w,c
  6554  002B50  2626               	addwf	___wmul@product+1,f,c
  6555  002B52  C025  F021         	movff	___wmul@product,?___wmul
  6556  002B56  C026  F022         	movff	___wmul@product+1,?___wmul+1
  6557  002B5A  0012               	return	
  6558  002B5C                     __end_of___wmul:
  6559                           	opt stack 0
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           intcon2	equ	0xFF1
  6568                           postinc0	equ	0xFEE
  6569                           wreg	equ	0xFE8
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function ___lwmod *****************
  6578 ;; Defined at:
  6579 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  dividend        2   39[COMRAM] unsigned int 
  6582 ;;  divisor         2   41[COMRAM] unsigned int 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  counter         1   43[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  2   39[COMRAM] unsigned int 
  6587 ;; Registers used:
  6588 ;;		wreg, status,2, status,0
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6594 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;Total ram usage:        5 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    2
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_printf
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text18
  6609  002A48                     __ptext18:
  6610                           	opt stack 0
  6611  002A48                     ___lwmod:
  6612                           	opt stack 27
  6613                           
  6614                           ;incstack = 0
  6615  002A48  502A               	movf	___lwmod@divisor,w,c
  6616  002A4A  102B               	iorwf	___lwmod@divisor+1,w,c
  6617  002A4C  B4D8               	btfsc	status,2,c
  6618  002A4E  D018               	goto	l1284
  6619  002A50  0E01               	movlw	1
  6620  002A52  6E2C               	movwf	___lwmod@counter,c
  6621  002A54  D004               	goto	l5307
  6622  002A56                     l5305:
  6623  002A56  90D8               	bcf	status,0,c
  6624  002A58  362A               	rlcf	___lwmod@divisor,f,c
  6625  002A5A  362B               	rlcf	___lwmod@divisor+1,f,c
  6626  002A5C  2A2C               	incf	___lwmod@counter,f,c
  6627  002A5E                     l5307:
  6628  002A5E  AE2B               	btfss	___lwmod@divisor+1,7,c
  6629  002A60  D7FA               	goto	l5305
  6630  002A62                     l5309:
  6631  002A62  502A               	movf	___lwmod@divisor,w,c
  6632  002A64  5C28               	subwf	___lwmod@dividend,w,c
  6633  002A66  502B               	movf	___lwmod@divisor+1,w,c
  6634  002A68  5829               	subwfb	___lwmod@dividend+1,w,c
  6635  002A6A  A0D8               	btfss	status,0,c
  6636  002A6C  D004               	goto	l5313
  6637  002A6E  502A               	movf	___lwmod@divisor,w,c
  6638  002A70  5E28               	subwf	___lwmod@dividend,f,c
  6639  002A72  502B               	movf	___lwmod@divisor+1,w,c
  6640  002A74  5A29               	subwfb	___lwmod@dividend+1,f,c
  6641  002A76                     l5313:
  6642  002A76  90D8               	bcf	status,0,c
  6643  002A78  322B               	rrcf	___lwmod@divisor+1,f,c
  6644  002A7A  322A               	rrcf	___lwmod@divisor,f,c
  6645  002A7C  2E2C               	decfsz	___lwmod@counter,f,c
  6646  002A7E  D7F1               	goto	l5309
  6647  002A80                     l1284:
  6648  002A80  C028  F028         	movff	___lwmod@dividend,?___lwmod
  6649  002A84  C029  F029         	movff	___lwmod@dividend+1,?___lwmod+1
  6650  002A88  0012               	return		;funcret
  6651  002A8A                     __end_of___lwmod:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           intcon2	equ	0xFF1
  6661                           postinc0	equ	0xFEE
  6662                           wreg	equ	0xFE8
  6663                           indf2	equ	0xFDF
  6664                           postinc2	equ	0xFDE
  6665                           postdec2	equ	0xFDD
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function ___lwdiv *****************
  6671 ;; Defined at:
  6672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  dividend        2   32[COMRAM] unsigned int 
  6675 ;;  divisor         2   34[COMRAM] unsigned int 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  quotient        2   37[COMRAM] unsigned int 
  6678 ;;  counter         1   36[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  2   32[COMRAM] unsigned int 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:        7 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    2
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		_printf
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text19
  6703  002918                     __ptext19:
  6704                           	opt stack 0
  6705  002918                     ___lwdiv:
  6706                           	opt stack 27
  6707                           
  6708                           ;incstack = 0
  6709  002918  0E00               	movlw	0
  6710  00291A  6E27               	movwf	___lwdiv@quotient+1,c
  6711  00291C  0E00               	movlw	0
  6712  00291E  6E26               	movwf	___lwdiv@quotient,c
  6713  002920  5023               	movf	___lwdiv@divisor,w,c
  6714  002922  1024               	iorwf	___lwdiv@divisor+1,w,c
  6715  002924  B4D8               	btfsc	status,2,c
  6716  002926  D01C               	goto	l1274
  6717  002928  0E01               	movlw	1
  6718  00292A  6E25               	movwf	___lwdiv@counter,c
  6719  00292C  D004               	goto	l5287
  6720  00292E                     l5285:
  6721  00292E  90D8               	bcf	status,0,c
  6722  002930  3623               	rlcf	___lwdiv@divisor,f,c
  6723  002932  3624               	rlcf	___lwdiv@divisor+1,f,c
  6724  002934  2A25               	incf	___lwdiv@counter,f,c
  6725  002936                     l5287:
  6726  002936  AE24               	btfss	___lwdiv@divisor+1,7,c
  6727  002938  D7FA               	goto	l5285
  6728  00293A                     l5289:
  6729  00293A  90D8               	bcf	status,0,c
  6730  00293C  3626               	rlcf	___lwdiv@quotient,f,c
  6731  00293E  3627               	rlcf	___lwdiv@quotient+1,f,c
  6732  002940  5023               	movf	___lwdiv@divisor,w,c
  6733  002942  5C21               	subwf	___lwdiv@dividend,w,c
  6734  002944  5024               	movf	___lwdiv@divisor+1,w,c
  6735  002946  5822               	subwfb	___lwdiv@dividend+1,w,c
  6736  002948  A0D8               	btfss	status,0,c
  6737  00294A  D005               	goto	l5297
  6738  00294C  5023               	movf	___lwdiv@divisor,w,c
  6739  00294E  5E21               	subwf	___lwdiv@dividend,f,c
  6740  002950  5024               	movf	___lwdiv@divisor+1,w,c
  6741  002952  5A22               	subwfb	___lwdiv@dividend+1,f,c
  6742  002954  8026               	bsf	___lwdiv@quotient,0,c
  6743  002956                     l5297:
  6744  002956  90D8               	bcf	status,0,c
  6745  002958  3224               	rrcf	___lwdiv@divisor+1,f,c
  6746  00295A  3223               	rrcf	___lwdiv@divisor,f,c
  6747  00295C  2E25               	decfsz	___lwdiv@counter,f,c
  6748  00295E  D7ED               	goto	l5289
  6749  002960                     l1274:
  6750  002960  C026  F021         	movff	___lwdiv@quotient,?___lwdiv
  6751  002964  C027  F022         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6752  002968  0012               	return		;funcret
  6753  00296A                     __end_of___lwdiv:
  6754                           	opt stack 0
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           intcon2	equ	0xFF1
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           indf2	equ	0xFDF
  6766                           postinc2	equ	0xFDE
  6767                           postdec2	equ	0xFDD
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _lcdInst *****************
  6773 ;; Defined at:
  6774 ;;		line 22 in file "lcd.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  data            1    wreg     unsigned char 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  data            1   34[COMRAM] unsigned char 
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg, status,2, status,0, cstack
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/0
  6785 ;;		On exit  : 0/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;Total ram usage:        1 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:    3
  6795 ;; This function calls:
  6796 ;;		_lcdNibble
  6797 ;; This function is called by:
  6798 ;;		_main
  6799 ;;		_initLCD
  6800 ;;		_homescreen
  6801 ;;		_displayLog
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text20
  6806  002C2E                     __ptext20:
  6807                           	opt stack 0
  6808  002C2E                     _lcdInst:
  6809                           	opt stack 27
  6810                           
  6811                           ;incstack = 0
  6812                           ;lcdInst@data stored from wreg
  6813  002C2E  6E23               	movwf	lcdInst@data,c
  6814                           
  6815                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6816  002C30  948C               	bcf	3980,2,c	;volatile
  6817                           
  6818                           ;lcd.c: 24: lcdNibble(data);
  6819  002C32  5023               	movf	lcdInst@data,w,c
  6820  002C34  EC61  F014         	call	_lcdNibble
  6821  002C38  0012               	return		;funcret
  6822  002C3A                     __end_of_lcdInst:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           intcon	equ	0xFF2
  6831                           intcon2	equ	0xFF1
  6832                           postinc0	equ	0xFEE
  6833                           wreg	equ	0xFE8
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _lcdNibble *****************
  6842 ;; Defined at:
  6843 ;;		line 32 in file "lcd.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  data            1    wreg     unsigned char 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  data            1   33[COMRAM] unsigned char 
  6848 ;;  temp            1   32[COMRAM] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  1    wreg      void 
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;Total ram usage:        2 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    2
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_lcdInst
  6869 ;;		_putch
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text21
  6874  0028C2                     __ptext21:
  6875                           	opt stack 0
  6876  0028C2                     _lcdNibble:
  6877                           	opt stack 26
  6878                           
  6879                           ;incstack = 0
  6880                           ;lcdNibble@data stored from wreg
  6881  0028C2  6E22               	movwf	lcdNibble@data,c
  6882                           
  6883                           ;lcd.c: 34: char temp = data & 0xF0;
  6884  0028C4  5022               	movf	lcdNibble@data,w,c
  6885  0028C6  0BF0               	andlw	240
  6886  0028C8  6E21               	movwf	lcdNibble@temp,c
  6887                           
  6888                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6889  0028CA  508C               	movf	3980,w,c	;volatile
  6890  0028CC  0B0F               	andlw	15
  6891  0028CE  6E8C               	movwf	3980,c	;volatile
  6892                           
  6893                           ;lcd.c: 36: LATD = temp | LATD;
  6894  0028D0  5021               	movf	lcdNibble@temp,w,c
  6895  0028D2  108C               	iorwf	3980,w,c	;volatile
  6896  0028D4  6E8C               	movwf	3980,c	;volatile
  6897                           
  6898                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6899  0028D6  968C               	bcf	3980,3,c	;volatile
  6900                           
  6901                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6902  0028D8  0E42               	movlw	66
  6903  0028DA                     u8157:
  6904  0028DA  2EE8               	decfsz	wreg,f,c
  6905  0028DC  D7FE               	bra	u8157
  6906  0028DE  D000               	nop2	
  6907                           
  6908                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6909  0028E0  868C               	bsf	3980,3,c	;volatile
  6910                           
  6911                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6912  0028E2  0E42               	movlw	66
  6913  0028E4                     u8167:
  6914  0028E4  2EE8               	decfsz	wreg,f,c
  6915  0028E6  D7FE               	bra	u8167
  6916  0028E8  D000               	nop2	
  6917                           
  6918                           ;lcd.c: 43: data = data << 4;
  6919  0028EA  3822               	swapf	lcdNibble@data,w,c
  6920  0028EC  0BF0               	andlw	240
  6921  0028EE  6E22               	movwf	lcdNibble@data,c
  6922                           
  6923                           ;lcd.c: 45: temp = data & 0xF0;
  6924  0028F0  5022               	movf	lcdNibble@data,w,c
  6925  0028F2  0BF0               	andlw	240
  6926  0028F4  6E21               	movwf	lcdNibble@temp,c
  6927                           
  6928                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6929  0028F6  508C               	movf	3980,w,c	;volatile
  6930  0028F8  0B0F               	andlw	15
  6931  0028FA  6E8C               	movwf	3980,c	;volatile
  6932                           
  6933                           ;lcd.c: 47: LATD = temp | LATD;
  6934  0028FC  5021               	movf	lcdNibble@temp,w,c
  6935  0028FE  108C               	iorwf	3980,w,c	;volatile
  6936  002900  6E8C               	movwf	3980,c	;volatile
  6937                           
  6938                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6939  002902  968C               	bcf	3980,3,c	;volatile
  6940                           
  6941                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6942  002904  0E42               	movlw	66
  6943  002906                     u8177:
  6944  002906  2EE8               	decfsz	wreg,f,c
  6945  002908  D7FE               	bra	u8177
  6946  00290A  D000               	nop2	
  6947                           
  6948                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6949  00290C  868C               	bsf	3980,3,c	;volatile
  6950                           
  6951                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6952  00290E  0E42               	movlw	66
  6953  002910                     u8187:
  6954  002910  2EE8               	decfsz	wreg,f,c
  6955  002912  D7FE               	bra	u8187
  6956  002914  D000               	nop2	
  6957  002916  0012               	return		;funcret
  6958  002918                     __end_of_lcdNibble:
  6959                           	opt stack 0
  6960                           tblptru	equ	0xFF8
  6961                           tblptrh	equ	0xFF7
  6962                           tblptrl	equ	0xFF6
  6963                           tablat	equ	0xFF5
  6964                           prodh	equ	0xFF4
  6965                           prodl	equ	0xFF3
  6966                           intcon	equ	0xFF2
  6967                           intcon2	equ	0xFF1
  6968                           postinc0	equ	0xFEE
  6969                           wreg	equ	0xFE8
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _keycheck *****************
  6978 ;; Defined at:
  6979 ;;		line 12 in file "interface.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;                  1    wreg      void 
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;Total ram usage:        0 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    2
  7000 ;; This function calls:
  7001 ;;		Nothing
  7002 ;; This function is called by:
  7003 ;;		_main
  7004 ;;		_displayLog
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text22
  7009  002BDA                     __ptext22:
  7010                           	opt stack 0
  7011  002BDA                     _keycheck:
  7012                           	opt stack 28
  7013  002BDA                     l687:
  7014  002BDA  A281               	btfss	3969,1,c	;volatile
  7015  002BDC  D7FE               	goto	l687
  7016                           
  7017                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  7018  002BDE  3881               	swapf	3969,w,c	;volatile
  7019  002BE0  0B0F               	andlw	15
  7020  002BE2  0B0F               	andlw	15
  7021  002BE4  0100               	movlb	0	; () banked
  7022  002BE6  6FC2               	movwf	_keypress& (0+255),b	;volatile
  7023  002BE8                     l690:
  7024  002BE8  B281               	btfsc	3969,1,c	;volatile
  7025  002BEA  D7FE               	goto	l690
  7026                           
  7027                           ;interface.c: 16: __nop();
  7028  002BEC  F000               	nop	
  7029                           
  7030                           ;interface.c: 17: return;
  7031  002BEE  0012               	return		;funcret
  7032  002BF0                     __end_of_keycheck:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           postinc0	equ	0xFEE
  7043                           wreg	equ	0xFE8
  7044                           indf2	equ	0xFDF
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _calibrateWheels *****************
  7052 ;; Defined at:
  7053 ;;		line 31 in file "logic.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  i               2   37[COMRAM] int 
  7058 ;;  prev            2   35[COMRAM] int 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      void 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        4 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    3
  7075 ;; This function calls:
  7076 ;;		_readADC
  7077 ;;		_startTMR1
  7078 ;;		_updateS1
  7079 ;;		_updateS3
  7080 ;; This function is called by:
  7081 ;;		_main
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text23
  7086  002102                     __ptext23:
  7087                           	opt stack 0
  7088  002102                     _calibrateWheels:
  7089                           	opt stack 27
  7090                           
  7091                           ;logic.c: 32: TMR1ON = 0;
  7092                           
  7093                           ;incstack = 0
  7094  002102  90CD               	bcf	4045,0,c	;volatile
  7095                           
  7096                           ;logic.c: 33: int i = 1;
  7097  002104  0E00               	movlw	0
  7098  002106  6E27               	movwf	calibrateWheels@i+1,c
  7099  002108  0E01               	movlw	1
  7100  00210A  6E26               	movwf	calibrateWheels@i,c
  7101  00210C                     l4039:
  7102                           
  7103                           ;logic.c: 36: if (i < 20){updateS1(1);}
  7104  00210C  BE27               	btfsc	calibrateWheels@i+1,7,c
  7105  00210E  D006               	goto	l4041
  7106  002110  5027               	movf	calibrateWheels@i+1,w,c
  7107  002112  E10B               	bnz	l4043
  7108  002114  0E14               	movlw	20
  7109  002116  5C26               	subwf	calibrateWheels@i,w,c
  7110  002118  B0D8               	btfsc	status,0,c
  7111  00211A  D007               	goto	l4043
  7112  00211C                     l4041:
  7113  00211C  0E00               	movlw	0
  7114  00211E  6E22               	movwf	updateS1@mode+1,c
  7115  002120  0E01               	movlw	1
  7116  002122  6E21               	movwf	updateS1@mode,c
  7117  002124  ECB8  F00A         	call	_updateS1	;wreg free
  7118  002128  D031               	goto	l4057
  7119  00212A                     l4043:
  7120                           
  7121                           ;logic.c: 37: else if(i<(20+40)){updateS1(2);}
  7122  00212A  BE27               	btfsc	calibrateWheels@i+1,7,c
  7123  00212C  D006               	goto	l4045
  7124  00212E  5027               	movf	calibrateWheels@i+1,w,c
  7125  002130  E10B               	bnz	l4047
  7126  002132  0E3C               	movlw	60
  7127  002134  5C26               	subwf	calibrateWheels@i,w,c
  7128  002136  B0D8               	btfsc	status,0,c
  7129  002138  D007               	goto	l4047
  7130  00213A                     l4045:
  7131  00213A  0E00               	movlw	0
  7132  00213C  6E22               	movwf	updateS1@mode+1,c
  7133  00213E  0E02               	movlw	2
  7134  002140  6E21               	movwf	updateS1@mode,c
  7135  002142  ECB8  F00A         	call	_updateS1	;wreg free
  7136  002146  D022               	goto	l4057
  7137  002148                     l4047:
  7138                           
  7139                           ;logic.c: 38: else if(i<(20+40+80)){updateS1(1);}
  7140  002148  BE27               	btfsc	calibrateWheels@i+1,7,c
  7141  00214A  D006               	goto	l4049
  7142  00214C  5027               	movf	calibrateWheels@i+1,w,c
  7143  00214E  E10B               	bnz	l4051
  7144  002150  0E8C               	movlw	140
  7145  002152  5C26               	subwf	calibrateWheels@i,w,c
  7146  002154  B0D8               	btfsc	status,0,c
  7147  002156  D007               	goto	l4051
  7148  002158                     l4049:
  7149  002158  0E00               	movlw	0
  7150  00215A  6E22               	movwf	updateS1@mode+1,c
  7151  00215C  0E01               	movlw	1
  7152  00215E  6E21               	movwf	updateS1@mode,c
  7153  002160  ECB8  F00A         	call	_updateS1	;wreg free
  7154  002164  D013               	goto	l4057
  7155  002166                     l4051:
  7156                           
  7157                           ;logic.c: 39: else if(i<(20+40+80+100)){updateS1(2);}
  7158  002166  BE27               	btfsc	calibrateWheels@i+1,7,c
  7159  002168  D006               	goto	l4053
  7160  00216A  5027               	movf	calibrateWheels@i+1,w,c
  7161  00216C  E10B               	bnz	l4055
  7162  00216E  0EF0               	movlw	240
  7163  002170  5C26               	subwf	calibrateWheels@i,w,c
  7164  002172  B0D8               	btfsc	status,0,c
  7165  002174  D007               	goto	l4055
  7166  002176                     l4053:
  7167  002176  0E00               	movlw	0
  7168  002178  6E22               	movwf	updateS1@mode+1,c
  7169  00217A  0E02               	movlw	2
  7170  00217C  6E21               	movwf	updateS1@mode,c
  7171  00217E  ECB8  F00A         	call	_updateS1	;wreg free
  7172  002182  D004               	goto	l4057
  7173  002184                     l4055:
  7174                           
  7175                           ;logic.c: 40: else{i=1;}
  7176  002184  0E00               	movlw	0
  7177  002186  6E27               	movwf	calibrateWheels@i+1,c
  7178  002188  0E01               	movlw	1
  7179  00218A  6E26               	movwf	calibrateWheels@i,c
  7180  00218C                     l4057:
  7181                           
  7182                           ;logic.c: 42: i++;
  7183  00218C  4A26               	infsnz	calibrateWheels@i,f,c
  7184  00218E  2A27               	incf	calibrateWheels@i+1,f,c
  7185                           
  7186                           ;logic.c: 43: if (i==1){prev = 0;}
  7187  002190  0426               	decf	calibrateWheels@i,w,c
  7188  002192  1027               	iorwf	calibrateWheels@i+1,w,c
  7189  002194  A4D8               	btfss	status,2,c
  7190  002196  D005               	goto	l782
  7191  002198  0E00               	movlw	0
  7192  00219A  6E25               	movwf	calibrateWheels@prev+1,c
  7193  00219C  0E00               	movlw	0
  7194  00219E  6E24               	movwf	calibrateWheels@prev,c
  7195  0021A0  D004               	goto	l4063
  7196  0021A2                     l782:
  7197                           
  7198                           ;logic.c: 44: else{prev = ADRES;}
  7199  0021A2  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7200  0021A6  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7201  0021AA                     l4063:
  7202                           
  7203                           ;logic.c: 45: readADC(1);
  7204  0021AA  0E01               	movlw	1
  7205  0021AC  ECC1  F015         	call	_readADC
  7206                           
  7207                           ;logic.c: 46: }while(ADRES>prev || ADRES<0x3aa);
  7208  0021B0  50C3               	movf	4035,w,c	;volatile
  7209  0021B2  5C24               	subwf	calibrateWheels@prev,w,c
  7210  0021B4  50C4               	movf	4036,w,c	;volatile
  7211  0021B6  5825               	subwfb	calibrateWheels@prev+1,w,c
  7212  0021B8  A0D8               	btfss	status,0,c
  7213  0021BA  D7A8               	goto	l4039
  7214  0021BC  0EAA               	movlw	170
  7215  0021BE  5CC3               	subwf	4035,w,c	;volatile
  7216  0021C0  0E03               	movlw	3
  7217  0021C2  58C4               	subwfb	4036,w,c	;volatile
  7218  0021C4  A0D8               	btfss	status,0,c
  7219  0021C6  D7A2               	goto	l4039
  7220  0021C8                     l4069:
  7221                           
  7222                           ;logic.c: 49: if (i < 20){updateS3(1);}
  7223  0021C8  BE27               	btfsc	calibrateWheels@i+1,7,c
  7224  0021CA  D006               	goto	l4071
  7225  0021CC  5027               	movf	calibrateWheels@i+1,w,c
  7226  0021CE  E10B               	bnz	l4073
  7227  0021D0  0E14               	movlw	20
  7228  0021D2  5C26               	subwf	calibrateWheels@i,w,c
  7229  0021D4  B0D8               	btfsc	status,0,c
  7230  0021D6  D007               	goto	l4073
  7231  0021D8                     l4071:
  7232  0021D8  0E00               	movlw	0
  7233  0021DA  6E22               	movwf	updateS3@mode+1,c
  7234  0021DC  0E01               	movlw	1
  7235  0021DE  6E21               	movwf	updateS3@mode,c
  7236  0021E0  EC8D  F00E         	call	_updateS3	;wreg free
  7237  0021E4  D031               	goto	l4087
  7238  0021E6                     l4073:
  7239                           
  7240                           ;logic.c: 50: else if(i<(20+40)){updateS3(2);}
  7241  0021E6  BE27               	btfsc	calibrateWheels@i+1,7,c
  7242  0021E8  D006               	goto	l4075
  7243  0021EA  5027               	movf	calibrateWheels@i+1,w,c
  7244  0021EC  E10B               	bnz	l4077
  7245  0021EE  0E3C               	movlw	60
  7246  0021F0  5C26               	subwf	calibrateWheels@i,w,c
  7247  0021F2  B0D8               	btfsc	status,0,c
  7248  0021F4  D007               	goto	l4077
  7249  0021F6                     l4075:
  7250  0021F6  0E00               	movlw	0
  7251  0021F8  6E22               	movwf	updateS3@mode+1,c
  7252  0021FA  0E02               	movlw	2
  7253  0021FC  6E21               	movwf	updateS3@mode,c
  7254  0021FE  EC8D  F00E         	call	_updateS3	;wreg free
  7255  002202  D022               	goto	l4087
  7256  002204                     l4077:
  7257                           
  7258                           ;logic.c: 51: else if(i<(20+40+80)){updateS3(1);}
  7259  002204  BE27               	btfsc	calibrateWheels@i+1,7,c
  7260  002206  D006               	goto	l4079
  7261  002208  5027               	movf	calibrateWheels@i+1,w,c
  7262  00220A  E10B               	bnz	l4081
  7263  00220C  0E8C               	movlw	140
  7264  00220E  5C26               	subwf	calibrateWheels@i,w,c
  7265  002210  B0D8               	btfsc	status,0,c
  7266  002212  D007               	goto	l4081
  7267  002214                     l4079:
  7268  002214  0E00               	movlw	0
  7269  002216  6E22               	movwf	updateS3@mode+1,c
  7270  002218  0E01               	movlw	1
  7271  00221A  6E21               	movwf	updateS3@mode,c
  7272  00221C  EC8D  F00E         	call	_updateS3	;wreg free
  7273  002220  D013               	goto	l4087
  7274  002222                     l4081:
  7275                           
  7276                           ;logic.c: 52: else if(i<(20+40+80+100)){updateS3(2);}
  7277  002222  BE27               	btfsc	calibrateWheels@i+1,7,c
  7278  002224  D006               	goto	l4083
  7279  002226  5027               	movf	calibrateWheels@i+1,w,c
  7280  002228  E10B               	bnz	l4085
  7281  00222A  0EF0               	movlw	240
  7282  00222C  5C26               	subwf	calibrateWheels@i,w,c
  7283  00222E  B0D8               	btfsc	status,0,c
  7284  002230  D007               	goto	l4085
  7285  002232                     l4083:
  7286  002232  0E00               	movlw	0
  7287  002234  6E22               	movwf	updateS3@mode+1,c
  7288  002236  0E02               	movlw	2
  7289  002238  6E21               	movwf	updateS3@mode,c
  7290  00223A  EC8D  F00E         	call	_updateS3	;wreg free
  7291  00223E  D004               	goto	l4087
  7292  002240                     l4085:
  7293                           
  7294                           ;logic.c: 53: else{i=1;}
  7295  002240  0E00               	movlw	0
  7296  002242  6E27               	movwf	calibrateWheels@i+1,c
  7297  002244  0E01               	movlw	1
  7298  002246  6E26               	movwf	calibrateWheels@i,c
  7299  002248                     l4087:
  7300                           
  7301                           ;logic.c: 55: i++;
  7302  002248  4A26               	infsnz	calibrateWheels@i,f,c
  7303  00224A  2A27               	incf	calibrateWheels@i+1,f,c
  7304                           
  7305                           ;logic.c: 56: if (i==1){prev = 0;}
  7306  00224C  0426               	decf	calibrateWheels@i,w,c
  7307  00224E  1027               	iorwf	calibrateWheels@i+1,w,c
  7308  002250  A4D8               	btfss	status,2,c
  7309  002252  D005               	goto	l794
  7310  002254  0E00               	movlw	0
  7311  002256  6E25               	movwf	calibrateWheels@prev+1,c
  7312  002258  0E00               	movlw	0
  7313  00225A  6E24               	movwf	calibrateWheels@prev,c
  7314  00225C  D004               	goto	l4093
  7315  00225E                     l794:
  7316                           
  7317                           ;logic.c: 57: else{prev = ADRES;}
  7318  00225E  CFC3 F024          	movff	4035,calibrateWheels@prev	;volatile
  7319  002262  CFC4 F025          	movff	4036,calibrateWheels@prev+1	;volatile
  7320  002266                     l4093:
  7321                           
  7322                           ;logic.c: 58: readADC(5);
  7323  002266  0E05               	movlw	5
  7324  002268  ECC1  F015         	call	_readADC
  7325                           
  7326                           ;logic.c: 59: }while(ADRES>prev || ADRES<0x3aa);
  7327  00226C  50C3               	movf	4035,w,c	;volatile
  7328  00226E  5C24               	subwf	calibrateWheels@prev,w,c
  7329  002270  50C4               	movf	4036,w,c	;volatile
  7330  002272  5825               	subwfb	calibrateWheels@prev+1,w,c
  7331  002274  A0D8               	btfss	status,0,c
  7332  002276  D7A8               	goto	l4069
  7333  002278  0EAA               	movlw	170
  7334  00227A  5CC3               	subwf	4035,w,c	;volatile
  7335  00227C  0E03               	movlw	3
  7336  00227E  58C4               	subwfb	4036,w,c	;volatile
  7337  002280  A0D8               	btfss	status,0,c
  7338  002282  D7A2               	goto	l4069
  7339                           
  7340                           ;logic.c: 60: startTMR1();
  7341  002284  EC01  F016         	call	_startTMR1	;wreg free
  7342  002288  0012               	return		;funcret
  7343  00228A                     __end_of_calibrateWheels:
  7344                           	opt stack 0
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           intcon2	equ	0xFF1
  7353                           postinc0	equ	0xFEE
  7354                           wreg	equ	0xFE8
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _updateS3 *****************
  7363 ;; Defined at:
  7364 ;;		line 191 in file "motors.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  mode            2   32[COMRAM] int 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;		None
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, status,0
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7378 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;Total ram usage:        3 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    2
  7385 ;; This function calls:
  7386 ;;		Nothing
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;;		_calibrateWheels
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           	psect	text24
  7394  001D1A                     __ptext24:
  7395                           	opt stack 0
  7396  001D1A                     _updateS3:
  7397                           	opt stack 28
  7398                           
  7399                           ;motors.c: 192: _delay((unsigned long)((5)*(32000000/4000.0)));
  7400                           
  7401                           ;incstack = 0
  7402  001D1A  0E34               	movlw	52
  7403  001D1C  6E23               	movwf	??_updateS3& (0+255),c
  7404  001D1E  0EF2               	movlw	242
  7405  001D20                     u8197:
  7406  001D20  2EE8               	decfsz	wreg,f,c
  7407  001D22  D7FE               	bra	u8197
  7408  001D24  2E23               	decfsz	??_updateS3& (0+255),f,c
  7409  001D26  D7FC               	bra	u8197
  7410                           
  7411                           ;motors.c: 194: if(mode == 0){
  7412  001D28  5021               	movf	updateS3@mode,w,c
  7413  001D2A  1022               	iorwf	updateS3@mode+1,w,c
  7414  001D2C  A4D8               	btfss	status,2,c
  7415  001D2E  D005               	goto	l3603
  7416                           
  7417                           ;motors.c: 195: LATEbits.LATE2 = 0;
  7418  001D30  948D               	bcf	3981,2,c	;volatile
  7419                           
  7420                           ;motors.c: 196: LATEbits.LATE1 = 0;
  7421  001D32  928D               	bcf	3981,1,c	;volatile
  7422                           
  7423                           ;motors.c: 197: LATAbits.LATA4 = 0;
  7424  001D34  9889               	bcf	3977,4,c	;volatile
  7425                           
  7426                           ;motors.c: 198: LATDbits.LATD0 = 0;
  7427  001D36  908C               	bcf	3980,0,c	;volatile
  7428                           
  7429                           ;motors.c: 199: }
  7430  001D38  0012               	return	
  7431  001D3A                     l3603:
  7432                           
  7433                           ;motors.c: 200: else if(mode == 4){
  7434  001D3A  0E04               	movlw	4
  7435  001D3C  1821               	xorwf	updateS3@mode,w,c
  7436  001D3E  1022               	iorwf	updateS3@mode+1,w,c
  7437  001D40  B4D8               	btfsc	status,2,c
  7438  001D42  0012               	return	
  7439                           
  7440                           ;motors.c: 203: else if(mode == 3){
  7441                           
  7442                           ;motors.c: 202: }
  7443  001D44  0E03               	movlw	3
  7444  001D46  1821               	xorwf	updateS3@mode,w,c
  7445  001D48  1022               	iorwf	updateS3@mode+1,w,c
  7446  001D4A  A4D8               	btfss	status,2,c
  7447  001D4C  D042               	goto	l3631
  7448                           
  7449                           ;motors.c: 204: t3++;
  7450  001D4E  4A41               	infsnz	_t3,f,c
  7451  001D50  2A42               	incf	_t3+1,f,c
  7452                           
  7453                           ;motors.c: 205: if (t3>8) {t3=1;}
  7454  001D52  BE42               	btfsc	_t3+1,7,c
  7455  001D54  D00A               	goto	l3615
  7456  001D56  5042               	movf	_t3+1,w,c
  7457  001D58  E104               	bnz	u3910
  7458  001D5A  0E09               	movlw	9
  7459  001D5C  5C41               	subwf	_t3,w,c
  7460  001D5E  A0D8               	btfss	status,0,c
  7461  001D60  D004               	goto	l3615
  7462  001D62                     u3910:
  7463  001D62  0E00               	movlw	0
  7464  001D64  6E42               	movwf	_t3+1,c
  7465  001D66  0E01               	movlw	1
  7466  001D68  6E41               	movwf	_t3,c
  7467  001D6A                     l3615:
  7468                           
  7469                           ;motors.c: 206: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  7470  001D6A  0441               	decf	_t3,w,c
  7471  001D6C  1042               	iorwf	_t3+1,w,c
  7472  001D6E  B4D8               	btfsc	status,2,c
  7473  001D70  D005               	goto	l606
  7474  001D72  0E08               	movlw	8
  7475  001D74  1841               	xorwf	_t3,w,c
  7476  001D76  1042               	iorwf	_t3+1,w,c
  7477  001D78  A4D8               	btfss	status,2,c
  7478  001D7A  D002               	goto	l604
  7479  001D7C                     l606:
  7480  001D7C  848D               	bsf	3981,2,c	;volatile
  7481  001D7E  D001               	goto	l3619
  7482  001D80                     l604:
  7483                           
  7484                           ;motors.c: 207: else{LATEbits.LATE2 = 0;}
  7485  001D80  948D               	bcf	3981,2,c	;volatile
  7486  001D82                     l3619:
  7487                           
  7488                           ;motors.c: 208: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  7489  001D82  0E02               	movlw	2
  7490  001D84  1841               	xorwf	_t3,w,c
  7491  001D86  1042               	iorwf	_t3+1,w,c
  7492  001D88  B4D8               	btfsc	status,2,c
  7493  001D8A  D005               	goto	l610
  7494  001D8C  0E07               	movlw	7
  7495  001D8E  1841               	xorwf	_t3,w,c
  7496  001D90  1042               	iorwf	_t3+1,w,c
  7497  001D92  A4D8               	btfss	status,2,c
  7498  001D94  D002               	goto	l608
  7499  001D96                     l610:
  7500  001D96  828D               	bsf	3981,1,c	;volatile
  7501  001D98  D001               	goto	l3623
  7502  001D9A                     l608:
  7503                           
  7504                           ;motors.c: 209: else{LATEbits.LATE1 = 0;}
  7505  001D9A  928D               	bcf	3981,1,c	;volatile
  7506  001D9C                     l3623:
  7507                           
  7508                           ;motors.c: 210: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  7509  001D9C  0E03               	movlw	3
  7510  001D9E  1841               	xorwf	_t3,w,c
  7511  001DA0  1042               	iorwf	_t3+1,w,c
  7512  001DA2  B4D8               	btfsc	status,2,c
  7513  001DA4  D005               	goto	l614
  7514  001DA6  0E06               	movlw	6
  7515  001DA8  1841               	xorwf	_t3,w,c
  7516  001DAA  1042               	iorwf	_t3+1,w,c
  7517  001DAC  A4D8               	btfss	status,2,c
  7518  001DAE  D002               	goto	l612
  7519  001DB0                     l614:
  7520  001DB0  8889               	bsf	3977,4,c	;volatile
  7521  001DB2  D001               	goto	l3627
  7522  001DB4                     l612:
  7523                           
  7524                           ;motors.c: 211: else{LATAbits.LATA4 = 0;}
  7525  001DB4  9889               	bcf	3977,4,c	;volatile
  7526  001DB6                     l3627:
  7527                           
  7528                           ;motors.c: 212: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  7529  001DB6  0E04               	movlw	4
  7530  001DB8  1841               	xorwf	_t3,w,c
  7531  001DBA  1042               	iorwf	_t3+1,w,c
  7532  001DBC  B4D8               	btfsc	status,2,c
  7533  001DBE  D005               	goto	l618
  7534  001DC0  0E05               	movlw	5
  7535  001DC2  1841               	xorwf	_t3,w,c
  7536  001DC4  1042               	iorwf	_t3+1,w,c
  7537  001DC6  A4D8               	btfss	status,2,c
  7538  001DC8  D002               	goto	l616
  7539  001DCA                     l618:
  7540  001DCA  808C               	bsf	3980,0,c	;volatile
  7541  001DCC  0012               	return	
  7542  001DCE                     l616:
  7543                           
  7544                           ;motors.c: 213: else{LATDbits.LATD0 = 0;}
  7545  001DCE  908C               	bcf	3980,0,c	;volatile
  7546                           
  7547                           ;motors.c: 214: }
  7548  001DD0  0012               	return	
  7549  001DD2                     l3631:
  7550                           
  7551                           ;motors.c: 215: else if(mode == 5){
  7552  001DD2  0E05               	movlw	5
  7553  001DD4  1821               	xorwf	updateS3@mode,w,c
  7554  001DD6  1022               	iorwf	updateS3@mode+1,w,c
  7555  001DD8  A4D8               	btfss	status,2,c
  7556  001DDA  D042               	goto	l3655
  7557                           
  7558                           ;motors.c: 216: t3++;
  7559  001DDC  4A41               	infsnz	_t3,f,c
  7560  001DDE  2A42               	incf	_t3+1,f,c
  7561                           
  7562                           ;motors.c: 217: if (t3>8) {t3=1;}
  7563  001DE0  BE42               	btfsc	_t3+1,7,c
  7564  001DE2  D00A               	goto	l3639
  7565  001DE4  5042               	movf	_t3+1,w,c
  7566  001DE6  E104               	bnz	u4010
  7567  001DE8  0E09               	movlw	9
  7568  001DEA  5C41               	subwf	_t3,w,c
  7569  001DEC  A0D8               	btfss	status,0,c
  7570  001DEE  D004               	goto	l3639
  7571  001DF0                     u4010:
  7572  001DF0  0E00               	movlw	0
  7573  001DF2  6E42               	movwf	_t3+1,c
  7574  001DF4  0E01               	movlw	1
  7575  001DF6  6E41               	movwf	_t3,c
  7576  001DF8                     l3639:
  7577                           
  7578                           ;motors.c: 218: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
  7579  001DF8  0441               	decf	_t3,w,c
  7580  001DFA  1042               	iorwf	_t3+1,w,c
  7581  001DFC  B4D8               	btfsc	status,2,c
  7582  001DFE  D005               	goto	l625
  7583  001E00  0E08               	movlw	8
  7584  001E02  1841               	xorwf	_t3,w,c
  7585  001E04  1042               	iorwf	_t3+1,w,c
  7586  001E06  A4D8               	btfss	status,2,c
  7587  001E08  D002               	goto	l623
  7588  001E0A                     l625:
  7589  001E0A  8889               	bsf	3977,4,c	;volatile
  7590  001E0C  D001               	goto	l3643
  7591  001E0E                     l623:
  7592                           
  7593                           ;motors.c: 219: else{LATAbits.LATA4 = 0;}
  7594  001E0E  9889               	bcf	3977,4,c	;volatile
  7595  001E10                     l3643:
  7596                           
  7597                           ;motors.c: 220: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
  7598  001E10  0E02               	movlw	2
  7599  001E12  1841               	xorwf	_t3,w,c
  7600  001E14  1042               	iorwf	_t3+1,w,c
  7601  001E16  B4D8               	btfsc	status,2,c
  7602  001E18  D005               	goto	l629
  7603  001E1A  0E07               	movlw	7
  7604  001E1C  1841               	xorwf	_t3,w,c
  7605  001E1E  1042               	iorwf	_t3+1,w,c
  7606  001E20  A4D8               	btfss	status,2,c
  7607  001E22  D002               	goto	l627
  7608  001E24                     l629:
  7609  001E24  808C               	bsf	3980,0,c	;volatile
  7610  001E26  D001               	goto	l3647
  7611  001E28                     l627:
  7612                           
  7613                           ;motors.c: 221: else{LATDbits.LATD0 = 0;}
  7614  001E28  908C               	bcf	3980,0,c	;volatile
  7615  001E2A                     l3647:
  7616                           
  7617                           ;motors.c: 222: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
  7618  001E2A  0E03               	movlw	3
  7619  001E2C  1841               	xorwf	_t3,w,c
  7620  001E2E  1042               	iorwf	_t3+1,w,c
  7621  001E30  B4D8               	btfsc	status,2,c
  7622  001E32  D005               	goto	l633
  7623  001E34  0E06               	movlw	6
  7624  001E36  1841               	xorwf	_t3,w,c
  7625  001E38  1042               	iorwf	_t3+1,w,c
  7626  001E3A  A4D8               	btfss	status,2,c
  7627  001E3C  D002               	goto	l631
  7628  001E3E                     l633:
  7629  001E3E  848D               	bsf	3981,2,c	;volatile
  7630  001E40  D001               	goto	l3651
  7631  001E42                     l631:
  7632                           
  7633                           ;motors.c: 223: else{LATEbits.LATE2 = 0;}
  7634  001E42  948D               	bcf	3981,2,c	;volatile
  7635  001E44                     l3651:
  7636                           
  7637                           ;motors.c: 224: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
  7638  001E44  0E04               	movlw	4
  7639  001E46  1841               	xorwf	_t3,w,c
  7640  001E48  1042               	iorwf	_t3+1,w,c
  7641  001E4A  B4D8               	btfsc	status,2,c
  7642  001E4C  D005               	goto	l637
  7643  001E4E  0E05               	movlw	5
  7644  001E50  1841               	xorwf	_t3,w,c
  7645  001E52  1042               	iorwf	_t3+1,w,c
  7646  001E54  A4D8               	btfss	status,2,c
  7647  001E56  D002               	goto	l635
  7648  001E58                     l637:
  7649  001E58  828D               	bsf	3981,1,c	;volatile
  7650  001E5A  0012               	return	
  7651  001E5C                     l635:
  7652                           
  7653                           ;motors.c: 225: else{LATEbits.LATE1 = 0;}
  7654  001E5C  928D               	bcf	3981,1,c	;volatile
  7655                           
  7656                           ;motors.c: 226: }
  7657  001E5E  0012               	return	
  7658  001E60                     l3655:
  7659                           
  7660                           ;motors.c: 227: else{
  7661                           ;motors.c: 228: if(mode == 1){
  7662  001E60  0421               	decf	updateS3@mode,w,c
  7663  001E62  1022               	iorwf	updateS3@mode+1,w,c
  7664  001E64  A4D8               	btfss	status,2,c
  7665  001E66  D013               	goto	l3663
  7666                           
  7667                           ;motors.c: 229: s3 ++;
  7668  001E68  0100               	movlb	0	; () banked
  7669  001E6A  4BBE               	infsnz	_s3& (0+255),f,b
  7670  001E6C  2BBF               	incf	(_s3+1)& (0+255),f,b
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;motors.c: 230: if (s3>4) {s3=1;}
  7674  001E6E  0100               	movlb	0	; () banked
  7675  001E70  BFBF               	btfsc	(_s3+1)& (0+255),7,b
  7676  001E72  D025               	goto	l3671
  7677  001E74  0100               	movlb	0	; () banked
  7678  001E76  51BF               	movf	(_s3+1)& (0+255),w,b
  7679  001E78  E105               	bnz	u4110
  7680  001E7A  0E05               	movlw	5
  7681  001E7C  0100               	movlb	0	; () banked
  7682  001E7E  5DBE               	subwf	_s3& (0+255),w,b
  7683  001E80  A0D8               	btfss	status,0,c
  7684  001E82  D01D               	goto	l3671
  7685  001E84                     u4110:
  7686                           
  7687                           ; BSR set to: 0
  7688  001E84  0E00               	movlw	0
  7689  001E86  0100               	movlb	0	; () banked
  7690  001E88  6FBF               	movwf	(_s3+1)& (0+255),b
  7691  001E8A  0E01               	movlw	1
  7692  001E8C  D017               	goto	L14
  7693  001E8E                     l3663:
  7694                           
  7695                           ;motors.c: 232: else if(mode == 2){
  7696  001E8E  0E02               	movlw	2
  7697  001E90  1821               	xorwf	updateS3@mode,w,c
  7698  001E92  1022               	iorwf	updateS3@mode+1,w,c
  7699  001E94  A4D8               	btfss	status,2,c
  7700  001E96  D013               	goto	l3671
  7701                           
  7702                           ;motors.c: 233: s3 --;
  7703  001E98  0100               	movlb	0	; () banked
  7704  001E9A  07BE               	decf	_s3& (0+255),f,b
  7705  001E9C  A0D8               	btfss	status,0,c
  7706  001E9E  07BF               	decf	(_s3+1)& (0+255),f,b
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;motors.c: 234: if (s3<1) {s3=4;}
  7710  001EA0  0100               	movlb	0	; () banked
  7711  001EA2  BFBF               	btfsc	(_s3+1)& (0+255),7,b
  7712  001EA4  D007               	goto	l3669
  7713  001EA6  0100               	movlb	0	; () banked
  7714  001EA8  51BF               	movf	(_s3+1)& (0+255),w,b
  7715  001EAA  E109               	bnz	l3671
  7716  001EAC  0100               	movlb	0	; () banked
  7717  001EAE  05BE               	decf	_s3& (0+255),w,b
  7718  001EB0  B0D8               	btfsc	status,0,c
  7719  001EB2  D005               	goto	l3671
  7720  001EB4                     l3669:
  7721                           
  7722                           ; BSR set to: 0
  7723  001EB4  0E00               	movlw	0
  7724  001EB6  0100               	movlb	0	; () banked
  7725  001EB8  6FBF               	movwf	(_s3+1)& (0+255),b
  7726  001EBA  0E04               	movlw	4
  7727  001EBC                     L14:
  7728  001EBC  6FBE               	movwf	_s3& (0+255),b
  7729  001EBE                     l3671:
  7730                           
  7731                           ;motors.c: 235: }
  7732                           ;motors.c: 236: if (s3 == 1){LATEbits.LATE2 = 1;}
  7733  001EBE  0100               	movlb	0	; () banked
  7734  001EC0  05BE               	decf	_s3& (0+255),w,b
  7735  001EC2  0100               	movlb	0	; () banked
  7736  001EC4  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7737  001EC6  A4D8               	btfss	status,2,c
  7738  001EC8  D002               	goto	l645
  7739                           
  7740                           ; BSR set to: 0
  7741  001ECA  848D               	bsf	3981,2,c	;volatile
  7742  001ECC  D001               	goto	l3675
  7743  001ECE                     l645:
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;motors.c: 237: else{LATEbits.LATE2 = 0;}
  7747  001ECE  948D               	bcf	3981,2,c	;volatile
  7748  001ED0                     l3675:
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;motors.c: 238: if (s3 == 2){LATEbits.LATE1 = 1;}
  7752  001ED0  0E02               	movlw	2
  7753  001ED2  0100               	movlb	0	; () banked
  7754  001ED4  19BE               	xorwf	_s3& (0+255),w,b
  7755  001ED6  0100               	movlb	0	; () banked
  7756  001ED8  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7757  001EDA  A4D8               	btfss	status,2,c
  7758  001EDC  D002               	goto	l647
  7759                           
  7760                           ; BSR set to: 0
  7761  001EDE  828D               	bsf	3981,1,c	;volatile
  7762  001EE0  D001               	goto	l3679
  7763  001EE2                     l647:
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;motors.c: 239: else{LATEbits.LATE1 = 0;}
  7767  001EE2  928D               	bcf	3981,1,c	;volatile
  7768  001EE4                     l3679:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;motors.c: 240: if (s3 == 3){LATAbits.LATA4 = 1;}
  7772  001EE4  0E03               	movlw	3
  7773  001EE6  0100               	movlb	0	; () banked
  7774  001EE8  19BE               	xorwf	_s3& (0+255),w,b
  7775  001EEA  0100               	movlb	0	; () banked
  7776  001EEC  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7777  001EEE  A4D8               	btfss	status,2,c
  7778  001EF0  D002               	goto	l649
  7779                           
  7780                           ; BSR set to: 0
  7781  001EF2  8889               	bsf	3977,4,c	;volatile
  7782  001EF4  D001               	goto	l3683
  7783  001EF6                     l649:
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;motors.c: 241: else{LATAbits.LATA4 = 0;}
  7787  001EF6  9889               	bcf	3977,4,c	;volatile
  7788  001EF8                     l3683:
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;motors.c: 242: if (s3 == 4){LATDbits.LATD0 = 1;}
  7792  001EF8  0E04               	movlw	4
  7793  001EFA  0100               	movlb	0	; () banked
  7794  001EFC  19BE               	xorwf	_s3& (0+255),w,b
  7795  001EFE  0100               	movlb	0	; () banked
  7796  001F00  11BF               	iorwf	(_s3+1)& (0+255),w,b
  7797  001F02  A4D8               	btfss	status,2,c
  7798  001F04  D002               	goto	l651
  7799                           
  7800                           ; BSR set to: 0
  7801  001F06  808C               	bsf	3980,0,c	;volatile
  7802  001F08  0012               	return	
  7803  001F0A                     l651:
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;motors.c: 243: else{LATDbits.LATD0 = 0;}
  7807  001F0A  908C               	bcf	3980,0,c	;volatile
  7808                           
  7809                           ; BSR set to: 0
  7810                           
  7811                           ; BSR set to: 0
  7812                           
  7813                           ; BSR set to: 0
  7814                           
  7815                           ; BSR set to: 0
  7816  001F0C  0012               	return	
  7817  001F0E                     __end_of_updateS3:
  7818                           	opt stack 0
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           prodh	equ	0xFF4
  7824                           prodl	equ	0xFF3
  7825                           intcon	equ	0xFF2
  7826                           intcon2	equ	0xFF1
  7827                           postinc0	equ	0xFEE
  7828                           wreg	equ	0xFE8
  7829                           indf2	equ	0xFDF
  7830                           postinc2	equ	0xFDE
  7831                           postdec2	equ	0xFDD
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function _updateS1 *****************
  7837 ;; Defined at:
  7838 ;;		line 75 in file "motors.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  mode            2   32[COMRAM] int 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2, status,0
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;Total ram usage:        3 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    2
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_main
  7863 ;;		_calibrateWheels
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           	psect	text25
  7868  001570                     __ptext25:
  7869                           	opt stack 0
  7870  001570                     _updateS1:
  7871                           	opt stack 28
  7872                           
  7873                           ;motors.c: 76: _delay((unsigned long)((5)*(32000000/4000.0)));
  7874                           
  7875                           ;incstack = 0
  7876  001570  0E34               	movlw	52
  7877  001572  6E23               	movwf	??_updateS1& (0+255),c
  7878  001574  0EF2               	movlw	242
  7879  001576                     u8207:
  7880  001576  2EE8               	decfsz	wreg,f,c
  7881  001578  D7FE               	bra	u8207
  7882  00157A  2E23               	decfsz	??_updateS1& (0+255),f,c
  7883  00157C  D7FC               	bra	u8207
  7884                           
  7885                           ;motors.c: 78: if(mode == 0){
  7886  00157E  5021               	movf	updateS1@mode,w,c
  7887  001580  1022               	iorwf	updateS1@mode+1,w,c
  7888  001582  A4D8               	btfss	status,2,c
  7889  001584  D005               	goto	l3479
  7890                           
  7891                           ;motors.c: 79: LATDbits.LATD1 = 0;
  7892  001586  928C               	bcf	3980,1,c	;volatile
  7893                           
  7894                           ;motors.c: 80: LATBbits.LATB3 = 0;
  7895  001588  968A               	bcf	3978,3,c	;volatile
  7896                           
  7897                           ;motors.c: 81: LATBbits.LATB2 = 0;
  7898  00158A  948A               	bcf	3978,2,c	;volatile
  7899                           
  7900                           ;motors.c: 82: LATBbits.LATB0 = 0;
  7901  00158C  908A               	bcf	3978,0,c	;volatile
  7902                           
  7903                           ;motors.c: 83: }
  7904  00158E  0012               	return	
  7905  001590                     l3479:
  7906                           
  7907                           ;motors.c: 84: else if(mode == 3){
  7908  001590  0E03               	movlw	3
  7909  001592  1821               	xorwf	updateS1@mode,w,c
  7910  001594  1022               	iorwf	updateS1@mode+1,w,c
  7911  001596  A4D8               	btfss	status,2,c
  7912  001598  D049               	goto	l3505
  7913                           
  7914                           ;motors.c: 85: t++;
  7915  00159A  4A45               	infsnz	_t,f,c
  7916  00159C  2A46               	incf	_t+1,f,c
  7917                           
  7918                           ;motors.c: 86: if (t>8) {t=1;}
  7919  00159E  BE46               	btfsc	_t+1,7,c
  7920  0015A0  D00A               	goto	l3487
  7921  0015A2  5046               	movf	_t+1,w,c
  7922  0015A4  E104               	bnz	u3500
  7923  0015A6  0E09               	movlw	9
  7924  0015A8  5C45               	subwf	_t,w,c
  7925  0015AA  A0D8               	btfss	status,0,c
  7926  0015AC  D004               	goto	l3487
  7927  0015AE                     u3500:
  7928  0015AE  0E00               	movlw	0
  7929  0015B0  6E46               	movwf	_t+1,c
  7930  0015B2  0E01               	movlw	1
  7931  0015B4  6E45               	movwf	_t,c
  7932  0015B6                     l3487:
  7933                           
  7934                           ;motors.c: 87: _delay((unsigned long)((5)*(32000000/4000.0)));
  7935  0015B6  0E34               	movlw	52
  7936  0015B8  6E23               	movwf	??_updateS1& (0+255),c
  7937  0015BA  0EF2               	movlw	242
  7938  0015BC                     u8217:
  7939  0015BC  2EE8               	decfsz	wreg,f,c
  7940  0015BE  D7FE               	bra	u8217
  7941  0015C0  2E23               	decfsz	??_updateS1& (0+255),f,c
  7942  0015C2  D7FC               	bra	u8217
  7943                           
  7944                           ;motors.c: 88: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  7945  0015C4  0445               	decf	_t,w,c
  7946  0015C6  1046               	iorwf	_t+1,w,c
  7947  0015C8  B4D8               	btfsc	status,2,c
  7948  0015CA  D005               	goto	l493
  7949  0015CC  0E08               	movlw	8
  7950  0015CE  1845               	xorwf	_t,w,c
  7951  0015D0  1046               	iorwf	_t+1,w,c
  7952  0015D2  A4D8               	btfss	status,2,c
  7953  0015D4  D002               	goto	l491
  7954  0015D6                     l493:
  7955  0015D6  828C               	bsf	3980,1,c	;volatile
  7956  0015D8  D001               	goto	l3493
  7957  0015DA                     l491:
  7958                           
  7959                           ;motors.c: 89: else{LATDbits.LATD1 = 0;}
  7960  0015DA  928C               	bcf	3980,1,c	;volatile
  7961  0015DC                     l3493:
  7962                           
  7963                           ;motors.c: 90: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  7964  0015DC  0E02               	movlw	2
  7965  0015DE  1845               	xorwf	_t,w,c
  7966  0015E0  1046               	iorwf	_t+1,w,c
  7967  0015E2  B4D8               	btfsc	status,2,c
  7968  0015E4  D005               	goto	l497
  7969  0015E6  0E07               	movlw	7
  7970  0015E8  1845               	xorwf	_t,w,c
  7971  0015EA  1046               	iorwf	_t+1,w,c
  7972  0015EC  A4D8               	btfss	status,2,c
  7973  0015EE  D002               	goto	l495
  7974  0015F0                     l497:
  7975  0015F0  868A               	bsf	3978,3,c	;volatile
  7976  0015F2  D001               	goto	l3497
  7977  0015F4                     l495:
  7978                           
  7979                           ;motors.c: 91: else{LATBbits.LATB3 = 0;}
  7980  0015F4  968A               	bcf	3978,3,c	;volatile
  7981  0015F6                     l3497:
  7982                           
  7983                           ;motors.c: 92: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  7984  0015F6  0E03               	movlw	3
  7985  0015F8  1845               	xorwf	_t,w,c
  7986  0015FA  1046               	iorwf	_t+1,w,c
  7987  0015FC  B4D8               	btfsc	status,2,c
  7988  0015FE  D005               	goto	l501
  7989  001600  0E06               	movlw	6
  7990  001602  1845               	xorwf	_t,w,c
  7991  001604  1046               	iorwf	_t+1,w,c
  7992  001606  A4D8               	btfss	status,2,c
  7993  001608  D002               	goto	l499
  7994  00160A                     l501:
  7995  00160A  848A               	bsf	3978,2,c	;volatile
  7996  00160C  D001               	goto	l3501
  7997  00160E                     l499:
  7998                           
  7999                           ;motors.c: 93: else{LATBbits.LATB2 = 0;}
  8000  00160E  948A               	bcf	3978,2,c	;volatile
  8001  001610                     l3501:
  8002                           
  8003                           ;motors.c: 94: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  8004  001610  0E04               	movlw	4
  8005  001612  1845               	xorwf	_t,w,c
  8006  001614  1046               	iorwf	_t+1,w,c
  8007  001616  B4D8               	btfsc	status,2,c
  8008  001618  D005               	goto	l505
  8009  00161A  0E05               	movlw	5
  8010  00161C  1845               	xorwf	_t,w,c
  8011  00161E  1046               	iorwf	_t+1,w,c
  8012  001620  A4D8               	btfss	status,2,c
  8013  001622  D002               	goto	l503
  8014  001624                     l505:
  8015  001624  808A               	bsf	3978,0,c	;volatile
  8016  001626  0012               	return	
  8017  001628                     l503:
  8018                           
  8019                           ;motors.c: 95: else{LATBbits.LATB0 = 0;}
  8020  001628  908A               	bcf	3978,0,c	;volatile
  8021                           
  8022                           ;motors.c: 96: }
  8023  00162A  0012               	return	
  8024  00162C                     l3505:
  8025                           
  8026                           ;motors.c: 97: else if(mode == 5){
  8027  00162C  0E05               	movlw	5
  8028  00162E  1821               	xorwf	updateS1@mode,w,c
  8029  001630  1022               	iorwf	updateS1@mode+1,w,c
  8030  001632  A4D8               	btfss	status,2,c
  8031  001634  D049               	goto	l3531
  8032                           
  8033                           ;motors.c: 98: t++;
  8034  001636  4A45               	infsnz	_t,f,c
  8035  001638  2A46               	incf	_t+1,f,c
  8036                           
  8037                           ;motors.c: 99: if (t>8) {t=1;}
  8038  00163A  BE46               	btfsc	_t+1,7,c
  8039  00163C  D00A               	goto	l3513
  8040  00163E  5046               	movf	_t+1,w,c
  8041  001640  E104               	bnz	u3600
  8042  001642  0E09               	movlw	9
  8043  001644  5C45               	subwf	_t,w,c
  8044  001646  A0D8               	btfss	status,0,c
  8045  001648  D004               	goto	l3513
  8046  00164A                     u3600:
  8047  00164A  0E00               	movlw	0
  8048  00164C  6E46               	movwf	_t+1,c
  8049  00164E  0E01               	movlw	1
  8050  001650  6E45               	movwf	_t,c
  8051  001652                     l3513:
  8052                           
  8053                           ;motors.c: 100: _delay((unsigned long)((5)*(32000000/4000.0)));
  8054  001652  0E34               	movlw	52
  8055  001654  6E23               	movwf	??_updateS1& (0+255),c
  8056  001656  0EF2               	movlw	242
  8057  001658                     u8227:
  8058  001658  2EE8               	decfsz	wreg,f,c
  8059  00165A  D7FE               	bra	u8227
  8060  00165C  2E23               	decfsz	??_updateS1& (0+255),f,c
  8061  00165E  D7FC               	bra	u8227
  8062                           
  8063                           ;motors.c: 101: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
  8064  001660  0445               	decf	_t,w,c
  8065  001662  1046               	iorwf	_t+1,w,c
  8066  001664  B4D8               	btfsc	status,2,c
  8067  001666  D005               	goto	l512
  8068  001668  0E08               	movlw	8
  8069  00166A  1845               	xorwf	_t,w,c
  8070  00166C  1046               	iorwf	_t+1,w,c
  8071  00166E  A4D8               	btfss	status,2,c
  8072  001670  D002               	goto	l510
  8073  001672                     l512:
  8074  001672  848A               	bsf	3978,2,c	;volatile
  8075  001674  D001               	goto	l3519
  8076  001676                     l510:
  8077                           
  8078                           ;motors.c: 102: else{LATBbits.LATB2 = 0;}
  8079  001676  948A               	bcf	3978,2,c	;volatile
  8080  001678                     l3519:
  8081                           
  8082                           ;motors.c: 103: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
  8083  001678  0E02               	movlw	2
  8084  00167A  1845               	xorwf	_t,w,c
  8085  00167C  1046               	iorwf	_t+1,w,c
  8086  00167E  B4D8               	btfsc	status,2,c
  8087  001680  D005               	goto	l516
  8088  001682  0E07               	movlw	7
  8089  001684  1845               	xorwf	_t,w,c
  8090  001686  1046               	iorwf	_t+1,w,c
  8091  001688  A4D8               	btfss	status,2,c
  8092  00168A  D002               	goto	l514
  8093  00168C                     l516:
  8094  00168C  808A               	bsf	3978,0,c	;volatile
  8095  00168E  D001               	goto	l3523
  8096  001690                     l514:
  8097                           
  8098                           ;motors.c: 104: else{LATBbits.LATB0 = 0;}
  8099  001690  908A               	bcf	3978,0,c	;volatile
  8100  001692                     l3523:
  8101                           
  8102                           ;motors.c: 105: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
  8103  001692  0E03               	movlw	3
  8104  001694  1845               	xorwf	_t,w,c
  8105  001696  1046               	iorwf	_t+1,w,c
  8106  001698  B4D8               	btfsc	status,2,c
  8107  00169A  D005               	goto	l520
  8108  00169C  0E06               	movlw	6
  8109  00169E  1845               	xorwf	_t,w,c
  8110  0016A0  1046               	iorwf	_t+1,w,c
  8111  0016A2  A4D8               	btfss	status,2,c
  8112  0016A4  D002               	goto	l518
  8113  0016A6                     l520:
  8114  0016A6  828C               	bsf	3980,1,c	;volatile
  8115  0016A8  D001               	goto	l3527
  8116  0016AA                     l518:
  8117                           
  8118                           ;motors.c: 106: else{LATDbits.LATD1 = 0;}
  8119  0016AA  928C               	bcf	3980,1,c	;volatile
  8120  0016AC                     l3527:
  8121                           
  8122                           ;motors.c: 107: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
  8123  0016AC  0E04               	movlw	4
  8124  0016AE  1845               	xorwf	_t,w,c
  8125  0016B0  1046               	iorwf	_t+1,w,c
  8126  0016B2  B4D8               	btfsc	status,2,c
  8127  0016B4  D005               	goto	l524
  8128  0016B6  0E05               	movlw	5
  8129  0016B8  1845               	xorwf	_t,w,c
  8130  0016BA  1046               	iorwf	_t+1,w,c
  8131  0016BC  A4D8               	btfss	status,2,c
  8132  0016BE  D002               	goto	l522
  8133  0016C0                     l524:
  8134  0016C0  868A               	bsf	3978,3,c	;volatile
  8135  0016C2  0012               	return	
  8136  0016C4                     l522:
  8137                           
  8138                           ;motors.c: 108: else{LATBbits.LATB3 = 0;}
  8139  0016C4  968A               	bcf	3978,3,c	;volatile
  8140                           
  8141                           ;motors.c: 109: }
  8142  0016C6  0012               	return	
  8143  0016C8                     l3531:
  8144                           
  8145                           ;motors.c: 110: else if(mode == 4){
  8146  0016C8  0E04               	movlw	4
  8147  0016CA  1821               	xorwf	updateS1@mode,w,c
  8148  0016CC  1022               	iorwf	updateS1@mode+1,w,c
  8149  0016CE  B4D8               	btfsc	status,2,c
  8150  0016D0  0012               	return	
  8151                           
  8152                           ;motors.c: 113: else{
  8153                           ;motors.c: 114: _delay((unsigned long)((10)*(32000000/4000.0)));
  8154                           
  8155                           ;motors.c: 112: }
  8156  0016D2  0E68               	movlw	104
  8157  0016D4  6E23               	movwf	??_updateS1& (0+255),c
  8158  0016D6  0EE4               	movlw	228
  8159  0016D8                     u8237:
  8160  0016D8  2EE8               	decfsz	wreg,f,c
  8161  0016DA  D7FE               	bra	u8237
  8162  0016DC  2E23               	decfsz	??_updateS1& (0+255),f,c
  8163  0016DE  D7FC               	bra	u8237
  8164  0016E0  D000               	nop2	
  8165                           
  8166                           ;motors.c: 116: if(mode == 1 || mode == 5){
  8167  0016E2  0421               	decf	updateS1@mode,w,c
  8168  0016E4  1022               	iorwf	updateS1@mode+1,w,c
  8169  0016E6  B4D8               	btfsc	status,2,c
  8170  0016E8  D005               	goto	l3541
  8171  0016EA  0E05               	movlw	5
  8172  0016EC  1821               	xorwf	updateS1@mode,w,c
  8173  0016EE  1022               	iorwf	updateS1@mode+1,w,c
  8174  0016F0  A4D8               	btfss	status,2,c
  8175  0016F2  D013               	goto	l3547
  8176  0016F4                     l3541:
  8177                           
  8178                           ;motors.c: 117: s1 ++;
  8179  0016F4  0100               	movlb	0	; () banked
  8180  0016F6  4BC0               	infsnz	_s1& (0+255),f,b
  8181  0016F8  2BC1               	incf	(_s1+1)& (0+255),f,b
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;motors.c: 118: if (s1>4) {s1=1;}
  8185  0016FA  0100               	movlb	0	; () banked
  8186  0016FC  BFC1               	btfsc	(_s1+1)& (0+255),7,b
  8187  0016FE  D02A               	goto	l3557
  8188  001700  0100               	movlb	0	; () banked
  8189  001702  51C1               	movf	(_s1+1)& (0+255),w,b
  8190  001704  E105               	bnz	u3720
  8191  001706  0E05               	movlw	5
  8192  001708  0100               	movlb	0	; () banked
  8193  00170A  5DC0               	subwf	_s1& (0+255),w,b
  8194  00170C  A0D8               	btfss	status,0,c
  8195  00170E  D022               	goto	l3557
  8196  001710                     u3720:
  8197                           
  8198                           ; BSR set to: 0
  8199  001710  0E00               	movlw	0
  8200  001712  0100               	movlb	0	; () banked
  8201  001714  6FC1               	movwf	(_s1+1)& (0+255),b
  8202  001716  0E01               	movlw	1
  8203  001718  D01C               	goto	L15
  8204  00171A                     l3547:
  8205                           
  8206                           ;motors.c: 121: else if(mode == 2 || mode==6){
  8207  00171A  0E02               	movlw	2
  8208  00171C  1821               	xorwf	updateS1@mode,w,c
  8209  00171E  1022               	iorwf	updateS1@mode+1,w,c
  8210  001720  B4D8               	btfsc	status,2,c
  8211  001722  D005               	goto	l3551
  8212  001724  0E06               	movlw	6
  8213  001726  1821               	xorwf	updateS1@mode,w,c
  8214  001728  1022               	iorwf	updateS1@mode+1,w,c
  8215  00172A  A4D8               	btfss	status,2,c
  8216  00172C  D013               	goto	l3557
  8217  00172E                     l3551:
  8218                           
  8219                           ;motors.c: 122: s1 --;
  8220  00172E  0100               	movlb	0	; () banked
  8221  001730  07C0               	decf	_s1& (0+255),f,b
  8222  001732  A0D8               	btfss	status,0,c
  8223  001734  07C1               	decf	(_s1+1)& (0+255),f,b
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;motors.c: 123: if (s1<1) {s1=4;}
  8227  001736  0100               	movlb	0	; () banked
  8228  001738  BFC1               	btfsc	(_s1+1)& (0+255),7,b
  8229  00173A  D007               	goto	l3555
  8230  00173C  0100               	movlb	0	; () banked
  8231  00173E  51C1               	movf	(_s1+1)& (0+255),w,b
  8232  001740  E109               	bnz	l3557
  8233  001742  0100               	movlb	0	; () banked
  8234  001744  05C0               	decf	_s1& (0+255),w,b
  8235  001746  B0D8               	btfsc	status,0,c
  8236  001748  D005               	goto	l3557
  8237  00174A                     l3555:
  8238                           
  8239                           ; BSR set to: 0
  8240  00174A  0E00               	movlw	0
  8241  00174C  0100               	movlb	0	; () banked
  8242  00174E  6FC1               	movwf	(_s1+1)& (0+255),b
  8243  001750  0E04               	movlw	4
  8244  001752                     L15:
  8245  001752  6FC0               	movwf	_s1& (0+255),b
  8246  001754                     l3557:
  8247                           
  8248                           ;motors.c: 124: }
  8249                           ;motors.c: 126: if(mode == 1 || mode ==2){
  8250  001754  0421               	decf	updateS1@mode,w,c
  8251  001756  1022               	iorwf	updateS1@mode+1,w,c
  8252  001758  B4D8               	btfsc	status,2,c
  8253  00175A  D005               	goto	l3561
  8254  00175C  0E02               	movlw	2
  8255  00175E  1821               	xorwf	updateS1@mode,w,c
  8256  001760  1022               	iorwf	updateS1@mode+1,w,c
  8257  001762  A4D8               	btfss	status,2,c
  8258  001764  D027               	goto	l3577
  8259  001766                     l3561:
  8260                           
  8261                           ;motors.c: 127: if (s1 == 1){LATDbits.LATD1 = 1;}
  8262  001766  0100               	movlb	0	; () banked
  8263  001768  05C0               	decf	_s1& (0+255),w,b
  8264  00176A  0100               	movlb	0	; () banked
  8265  00176C  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8266  00176E  A4D8               	btfss	status,2,c
  8267  001770  D002               	goto	l541
  8268                           
  8269                           ; BSR set to: 0
  8270  001772  828C               	bsf	3980,1,c	;volatile
  8271  001774  D001               	goto	l3565
  8272  001776                     l541:
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;motors.c: 128: else{LATDbits.LATD1 = 0;}
  8276  001776  928C               	bcf	3980,1,c	;volatile
  8277  001778                     l3565:
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;motors.c: 129: if (s1 == 2){LATBbits.LATB3 = 1;}
  8281  001778  0E02               	movlw	2
  8282  00177A  0100               	movlb	0	; () banked
  8283  00177C  19C0               	xorwf	_s1& (0+255),w,b
  8284  00177E  0100               	movlb	0	; () banked
  8285  001780  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8286  001782  A4D8               	btfss	status,2,c
  8287  001784  D002               	goto	l543
  8288                           
  8289                           ; BSR set to: 0
  8290  001786  868A               	bsf	3978,3,c	;volatile
  8291  001788  D001               	goto	l3569
  8292  00178A                     l543:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;motors.c: 130: else{LATBbits.LATB3 = 0;}
  8296  00178A  968A               	bcf	3978,3,c	;volatile
  8297  00178C                     l3569:
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;motors.c: 131: if (s1 == 3){LATBbits.LATB2 = 1;}
  8301  00178C  0E03               	movlw	3
  8302  00178E  0100               	movlb	0	; () banked
  8303  001790  19C0               	xorwf	_s1& (0+255),w,b
  8304  001792  0100               	movlb	0	; () banked
  8305  001794  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8306  001796  A4D8               	btfss	status,2,c
  8307  001798  D002               	goto	l545
  8308                           
  8309                           ; BSR set to: 0
  8310  00179A  848A               	bsf	3978,2,c	;volatile
  8311  00179C  D001               	goto	l3573
  8312  00179E                     l545:
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;motors.c: 132: else{LATBbits.LATB2 = 0;}
  8316  00179E  948A               	bcf	3978,2,c	;volatile
  8317  0017A0                     l3573:
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;motors.c: 133: if (s1 == 4){LATBbits.LATB0 = 1;}
  8321  0017A0  0E04               	movlw	4
  8322  0017A2  0100               	movlb	0	; () banked
  8323  0017A4  19C0               	xorwf	_s1& (0+255),w,b
  8324  0017A6  0100               	movlb	0	; () banked
  8325  0017A8  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8326  0017AA  A4D8               	btfss	status,2,c
  8327  0017AC  D002               	goto	l547
  8328                           
  8329                           ; BSR set to: 0
  8330  0017AE  808A               	bsf	3978,0,c	;volatile
  8331  0017B0  D001               	goto	l3577
  8332  0017B2                     l547:
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;motors.c: 134: else{LATBbits.LATB0 = 0;}
  8336  0017B2  908A               	bcf	3978,0,c	;volatile
  8337  0017B4                     l3577:
  8338                           
  8339                           ;motors.c: 135: }
  8340                           ;motors.c: 136: if(mode == 5 || mode ==6){
  8341  0017B4  0E05               	movlw	5
  8342  0017B6  1821               	xorwf	updateS1@mode,w,c
  8343  0017B8  1022               	iorwf	updateS1@mode+1,w,c
  8344  0017BA  B4D8               	btfsc	status,2,c
  8345  0017BC  D005               	goto	l3581
  8346  0017BE  0E06               	movlw	6
  8347  0017C0  1821               	xorwf	updateS1@mode,w,c
  8348  0017C2  1022               	iorwf	updateS1@mode+1,w,c
  8349  0017C4  A4D8               	btfss	status,2,c
  8350  0017C6  0012               	return	
  8351  0017C8                     l3581:
  8352                           
  8353                           ;motors.c: 137: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  8354  0017C8  0100               	movlb	0	; () banked
  8355  0017CA  05C0               	decf	_s1& (0+255),w,b
  8356  0017CC  0100               	movlb	0	; () banked
  8357  0017CE  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8358  0017D0  A4D8               	btfss	status,2,c
  8359  0017D2  D004               	goto	l3585
  8360                           
  8361                           ; BSR set to: 0
  8362  0017D4  828C               	bsf	3980,1,c	;volatile
  8363  0017D6  868A               	bsf	3978,3,c	;volatile
  8364  0017D8  948A               	bcf	3978,2,c	;volatile
  8365  0017DA  908A               	bcf	3978,0,c	;volatile
  8366  0017DC                     l3585:
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;motors.c: 138: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  8370  0017DC  0E02               	movlw	2
  8371  0017DE  0100               	movlb	0	; () banked
  8372  0017E0  19C0               	xorwf	_s1& (0+255),w,b
  8373  0017E2  0100               	movlb	0	; () banked
  8374  0017E4  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8375  0017E6  A4D8               	btfss	status,2,c
  8376  0017E8  D004               	goto	l3589
  8377                           
  8378                           ; BSR set to: 0
  8379  0017EA  928C               	bcf	3980,1,c	;volatile
  8380  0017EC  868A               	bsf	3978,3,c	;volatile
  8381  0017EE  848A               	bsf	3978,2,c	;volatile
  8382  0017F0  908A               	bcf	3978,0,c	;volatile
  8383  0017F2                     l3589:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;motors.c: 139: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  8387  0017F2  0E03               	movlw	3
  8388  0017F4  0100               	movlb	0	; () banked
  8389  0017F6  19C0               	xorwf	_s1& (0+255),w,b
  8390  0017F8  0100               	movlb	0	; () banked
  8391  0017FA  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8392  0017FC  A4D8               	btfss	status,2,c
  8393  0017FE  D004               	goto	l3593
  8394                           
  8395                           ; BSR set to: 0
  8396  001800  928C               	bcf	3980,1,c	;volatile
  8397  001802  968A               	bcf	3978,3,c	;volatile
  8398  001804  848A               	bsf	3978,2,c	;volatile
  8399  001806  808A               	bsf	3978,0,c	;volatile
  8400  001808                     l3593:
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;motors.c: 140: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  8404  001808  0E04               	movlw	4
  8405  00180A  0100               	movlb	0	; () banked
  8406  00180C  19C0               	xorwf	_s1& (0+255),w,b
  8407  00180E  0100               	movlb	0	; () banked
  8408  001810  11C1               	iorwf	(_s1+1)& (0+255),w,b
  8409  001812  A4D8               	btfss	status,2,c
  8410  001814  0012               	return	
  8411                           
  8412                           ; BSR set to: 0
  8413  001816  828C               	bsf	3980,1,c	;volatile
  8414  001818  968A               	bcf	3978,3,c	;volatile
  8415  00181A  948A               	bcf	3978,2,c	;volatile
  8416  00181C  808A               	bsf	3978,0,c	;volatile
  8417                           
  8418                           ; BSR set to: 0
  8419                           
  8420                           ; BSR set to: 0
  8421                           
  8422                           ; BSR set to: 0
  8423                           
  8424                           ; BSR set to: 0
  8425                           
  8426                           ; BSR set to: 0
  8427  00181E  0012               	return	
  8428  001820                     __end_of_updateS1:
  8429                           	opt stack 0
  8430                           tblptru	equ	0xFF8
  8431                           tblptrh	equ	0xFF7
  8432                           tblptrl	equ	0xFF6
  8433                           tablat	equ	0xFF5
  8434                           prodh	equ	0xFF4
  8435                           prodl	equ	0xFF3
  8436                           intcon	equ	0xFF2
  8437                           intcon2	equ	0xFF1
  8438                           postinc0	equ	0xFEE
  8439                           wreg	equ	0xFE8
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           postdec2	equ	0xFDD
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _startTMR1 *****************
  8448 ;; Defined at:
  8449 ;;		line 24 in file "logic.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;		None
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  2   24[None  ] int 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;Total ram usage:        0 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    2
  8470 ;; This function calls:
  8471 ;;		Nothing
  8472 ;; This function is called by:
  8473 ;;		_main
  8474 ;;		_calibrateWheels
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text26
  8479  002C02                     __ptext26:
  8480                           	opt stack 0
  8481  002C02                     _startTMR1:
  8482                           	opt stack 28
  8483                           
  8484                           ;logic.c: 25: T1CON = 0b10110000;
  8485                           
  8486                           ;incstack = 0
  8487  002C02  0EB0               	movlw	176
  8488  002C04  6ECD               	movwf	4045,c	;volatile
  8489                           
  8490                           ;logic.c: 26: TMR1H = 0b11101001;
  8491  002C06  0EE9               	movlw	233
  8492  002C08  6ECF               	movwf	4047,c	;volatile
  8493                           
  8494                           ;logic.c: 27: TMR1L = 0b01011011;
  8495  002C0A  0E5B               	movlw	91
  8496  002C0C  6ECE               	movwf	4046,c	;volatile
  8497                           
  8498                           ;logic.c: 28: TMR1ON = 1;
  8499  002C0E  80CD               	bsf	4045,0,c	;volatile
  8500  002C10  0012               	return		;funcret
  8501  002C12                     __end_of_startTMR1:
  8502                           	opt stack 0
  8503                           tblptru	equ	0xFF8
  8504                           tblptrh	equ	0xFF7
  8505                           tblptrl	equ	0xFF6
  8506                           tablat	equ	0xFF5
  8507                           prodh	equ	0xFF4
  8508                           prodl	equ	0xFF3
  8509                           intcon	equ	0xFF2
  8510                           intcon2	equ	0xFF1
  8511                           postinc0	equ	0xFEE
  8512                           wreg	equ	0xFE8
  8513                           indf2	equ	0xFDF
  8514                           postinc2	equ	0xFDE
  8515                           postdec2	equ	0xFDD
  8516                           fsr2h	equ	0xFDA
  8517                           fsr2l	equ	0xFD9
  8518                           status	equ	0xFD8
  8519                           
  8520 ;; *************** function _readADC *****************
  8521 ;; Defined at:
  8522 ;;		line 9 in file "logic.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;  channel         1    wreg     unsigned char 
  8525 ;; Auto vars:     Size  Location     Type
  8526 ;;  channel         1   33[COMRAM] unsigned char 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      void 
  8529 ;; Registers used:
  8530 ;;		wreg, status,2, status,0, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;Total ram usage:        2 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    2
  8543 ;; This function calls:
  8544 ;;		Nothing
  8545 ;; This function is called by:
  8546 ;;		_main
  8547 ;;		_calibrateWheels
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           	psect	text27
  8552  002B82                     __ptext27:
  8553                           	opt stack 0
  8554  002B82                     _readADC:
  8555                           	opt stack 28
  8556                           
  8557                           ;incstack = 0
  8558                           ;readADC@channel stored from wreg
  8559  002B82  6E22               	movwf	readADC@channel,c
  8560                           
  8561                           ;logic.c: 11: ADCON0 = ((channel <<2));
  8562  002B84  4422               	rlncf	readADC@channel,w,c
  8563  002B86  46E8               	rlncf	wreg,f,c
  8564  002B88  0BFC               	andlw	252
  8565  002B8A  6EC2               	movwf	4034,c	;volatile
  8566                           
  8567                           ;logic.c: 12: ADCON0bits.ADON = 1;
  8568  002B8C  80C2               	bsf	4034,0,c	;volatile
  8569                           
  8570                           ;logic.c: 13: ADCON0bits.GO = 1;
  8571  002B8E  82C2               	bsf	4034,1,c	;volatile
  8572                           
  8573                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  8574  002B90  D007               	goto	l3855
  8575  002B92                     l3853:
  8576  002B92  0E34               	movlw	52
  8577  002B94  6E21               	movwf	??_readADC& (0+255),c
  8578  002B96  0EF2               	movlw	242
  8579  002B98                     u8247:
  8580  002B98  2EE8               	decfsz	wreg,f,c
  8581  002B9A  D7FE               	bra	u8247
  8582  002B9C  2E21               	decfsz	??_readADC& (0+255),f,c
  8583  002B9E  D7FC               	bra	u8247
  8584  002BA0                     l3855:
  8585  002BA0  A2C2               	btfss	4034,1,c	;volatile
  8586  002BA2  0012               	return	
  8587  002BA4  D7F6               	goto	l3853
  8588  002BA6                     __end_of_readADC:
  8589                           	opt stack 0
  8590                           tblptru	equ	0xFF8
  8591                           tblptrh	equ	0xFF7
  8592                           tblptrl	equ	0xFF6
  8593                           tablat	equ	0xFF5
  8594                           prodh	equ	0xFF4
  8595                           prodl	equ	0xFF3
  8596                           intcon	equ	0xFF2
  8597                           intcon2	equ	0xFF1
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           indf2	equ	0xFDF
  8601                           postinc2	equ	0xFDE
  8602                           postdec2	equ	0xFDD
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8
  8606                           
  8607 ;; *************** function _addRun *****************
  8608 ;; Defined at:
  8609 ;;		line 69 in file "interface.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  dur             2   36[COMRAM] int 
  8612 ;;  year            2   38[COMRAM] int 
  8613 ;;  month           2   40[COMRAM] int 
  8614 ;;  date            2   42[COMRAM] int 
  8615 ;;  hours           2   44[COMRAM] int 
  8616 ;;  mins            2   46[COMRAM] int 
  8617 ;;  secs            2   48[COMRAM] int 
  8618 ;;  sodaT           2   50[COMRAM] int 
  8619 ;;  sodaNT          2   52[COMRAM] int 
  8620 ;;  soupL           2   54[COMRAM] int 
  8621 ;;  soupNL          2   56[COMRAM] int 
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;  currRun         2   58[COMRAM] int 
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      void 
  8626 ;; Registers used:
  8627 ;;		wreg, status,2, status,0, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/0
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8633 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Totals:        24       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;Total ram usage:       27 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    3
  8640 ;; This function calls:
  8641 ;;		_eepromRead
  8642 ;;		_eepromWrite
  8643 ;; This function is called by:
  8644 ;;		_main
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           	psect	text28
  8649  00228A                     __ptext28:
  8650                           	opt stack 0
  8651  00228A                     _addRun:
  8652                           	opt stack 27
  8653                           
  8654                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  8655                           
  8656                           ;incstack = 0
  8657  00228A  0EFF               	movlw	255
  8658  00228C  0100               	movlb	0	; () banked
  8659  00228E  6F80               	movwf	??_addRun& (0+255),b
  8660  002290  0EFF               	movlw	255
  8661  002292  0100               	movlb	0	; () banked
  8662  002294  6F81               	movwf	(??_addRun+1)& (0+255),b
  8663  002296  0E00               	movlw	0
  8664  002298  EC61  F015         	call	_eepromRead
  8665  00229C  0100               	movlb	0	; () banked
  8666  00229E  6F82               	movwf	(??_addRun+2)& (0+255),b
  8667  0022A0  0100               	movlb	0	; () banked
  8668  0022A2  5180               	movf	??_addRun& (0+255),w,b
  8669  0022A4  0100               	movlb	0	; () banked
  8670  0022A6  2582               	addwf	(??_addRun+2)& (0+255),w,b
  8671  0022A8  6E3B               	movwf	addRun@currRun,c
  8672  0022AA  0E00               	movlw	0
  8673  0022AC  0100               	movlb	0	; () banked
  8674  0022AE  BF82               	btfsc	(??_addRun+2)& (0+255),7,b
  8675  0022B0  0EFF               	movlw	255
  8676  0022B2  0100               	movlb	0	; () banked
  8677  0022B4  2181               	addwfc	(??_addRun+1)& (0+255),w,b
  8678  0022B6  6E3C               	movwf	addRun@currRun+1,c
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  8682  0022B8  BE3C               	btfsc	addRun@currRun+1,7,c
  8683  0022BA  D005               	goto	l5605
  8684  0022BC  503C               	movf	addRun@currRun+1,w,c
  8685  0022BE  E107               	bnz	l5607
  8686  0022C0  043B               	decf	addRun@currRun,w,c
  8687  0022C2  B0D8               	btfsc	status,0,c
  8688  0022C4  D004               	goto	l5607
  8689  0022C6                     l5605:
  8690                           
  8691                           ; BSR set to: 0
  8692  0022C6  0E00               	movlw	0
  8693  0022C8  6E3C               	movwf	addRun@currRun+1,c
  8694  0022CA  0E04               	movlw	4
  8695  0022CC  6E3B               	movwf	addRun@currRun,c
  8696  0022CE                     l5607:
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;interface.c: 72: eepromWrite(0, currRun);
  8700  0022CE  C03B  F021         	movff	addRun@currRun,eepromWrite@data
  8701  0022D2  0E00               	movlw	0
  8702  0022D4  EC45  F015         	call	_eepromWrite
  8703                           
  8704                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  8705  0022D8  C025  F021         	movff	addRun@dur,eepromWrite@data
  8706  0022DC  C03B  F080         	movff	addRun@currRun,??_addRun
  8707  0022E0  0100               	movlb	0	; () banked
  8708  0022E2  3B80               	swapf	??_addRun& (0+255),f,b
  8709  0022E4  0EF0               	movlw	240
  8710  0022E6  1780               	andwf	??_addRun& (0+255),f,b
  8711  0022E8  0100               	movlb	0	; () banked
  8712  0022EA  2980               	incf	??_addRun& (0+255),w,b
  8713  0022EC  EC45  F015         	call	_eepromWrite
  8714                           
  8715                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  8716  0022F0  C027  F021         	movff	addRun@year,eepromWrite@data
  8717  0022F4  C03B  F080         	movff	addRun@currRun,??_addRun
  8718  0022F8  0100               	movlb	0	; () banked
  8719  0022FA  3B80               	swapf	??_addRun& (0+255),f,b
  8720  0022FC  0EF0               	movlw	240
  8721  0022FE  1780               	andwf	??_addRun& (0+255),f,b
  8722  002300  0100               	movlb	0	; () banked
  8723  002302  5180               	movf	??_addRun& (0+255),w,b
  8724  002304  0F02               	addlw	2
  8725  002306  EC45  F015         	call	_eepromWrite
  8726                           
  8727                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  8728  00230A  C029  F021         	movff	addRun@month,eepromWrite@data
  8729  00230E  C03B  F080         	movff	addRun@currRun,??_addRun
  8730  002312  0100               	movlb	0	; () banked
  8731  002314  3B80               	swapf	??_addRun& (0+255),f,b
  8732  002316  0EF0               	movlw	240
  8733  002318  1780               	andwf	??_addRun& (0+255),f,b
  8734  00231A  0100               	movlb	0	; () banked
  8735  00231C  5180               	movf	??_addRun& (0+255),w,b
  8736  00231E  0F03               	addlw	3
  8737  002320  EC45  F015         	call	_eepromWrite
  8738                           
  8739                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8740  002324  C02B  F021         	movff	addRun@date,eepromWrite@data
  8741  002328  C03B  F080         	movff	addRun@currRun,??_addRun
  8742  00232C  0100               	movlb	0	; () banked
  8743  00232E  3B80               	swapf	??_addRun& (0+255),f,b
  8744  002330  0EF0               	movlw	240
  8745  002332  1780               	andwf	??_addRun& (0+255),f,b
  8746  002334  0100               	movlb	0	; () banked
  8747  002336  5180               	movf	??_addRun& (0+255),w,b
  8748  002338  0F04               	addlw	4
  8749  00233A  EC45  F015         	call	_eepromWrite
  8750                           
  8751                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8752  00233E  C02D  F021         	movff	addRun@hours,eepromWrite@data
  8753  002342  C03B  F080         	movff	addRun@currRun,??_addRun
  8754  002346  0100               	movlb	0	; () banked
  8755  002348  3B80               	swapf	??_addRun& (0+255),f,b
  8756  00234A  0EF0               	movlw	240
  8757  00234C  1780               	andwf	??_addRun& (0+255),f,b
  8758  00234E  0100               	movlb	0	; () banked
  8759  002350  5180               	movf	??_addRun& (0+255),w,b
  8760  002352  0F05               	addlw	5
  8761  002354  EC45  F015         	call	_eepromWrite
  8762                           
  8763                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8764  002358  C02F  F021         	movff	addRun@mins,eepromWrite@data
  8765  00235C  C03B  F080         	movff	addRun@currRun,??_addRun
  8766  002360  0100               	movlb	0	; () banked
  8767  002362  3B80               	swapf	??_addRun& (0+255),f,b
  8768  002364  0EF0               	movlw	240
  8769  002366  1780               	andwf	??_addRun& (0+255),f,b
  8770  002368  0100               	movlb	0	; () banked
  8771  00236A  5180               	movf	??_addRun& (0+255),w,b
  8772  00236C  0F06               	addlw	6
  8773  00236E  EC45  F015         	call	_eepromWrite
  8774                           
  8775                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8776  002372  C031  F021         	movff	addRun@secs,eepromWrite@data
  8777  002376  C03B  F080         	movff	addRun@currRun,??_addRun
  8778  00237A  0100               	movlb	0	; () banked
  8779  00237C  3B80               	swapf	??_addRun& (0+255),f,b
  8780  00237E  0EF0               	movlw	240
  8781  002380  1780               	andwf	??_addRun& (0+255),f,b
  8782  002382  0100               	movlb	0	; () banked
  8783  002384  5180               	movf	??_addRun& (0+255),w,b
  8784  002386  0F07               	addlw	7
  8785  002388  EC45  F015         	call	_eepromWrite
  8786                           
  8787                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8788  00238C  C033  F021         	movff	addRun@sodaT,eepromWrite@data
  8789  002390  C03B  F080         	movff	addRun@currRun,??_addRun
  8790  002394  0100               	movlb	0	; () banked
  8791  002396  3B80               	swapf	??_addRun& (0+255),f,b
  8792  002398  0EF0               	movlw	240
  8793  00239A  1780               	andwf	??_addRun& (0+255),f,b
  8794  00239C  0100               	movlb	0	; () banked
  8795  00239E  5180               	movf	??_addRun& (0+255),w,b
  8796  0023A0  0F08               	addlw	8
  8797  0023A2  EC45  F015         	call	_eepromWrite
  8798                           
  8799                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8800  0023A6  C035  F021         	movff	addRun@sodaNT,eepromWrite@data
  8801  0023AA  C03B  F080         	movff	addRun@currRun,??_addRun
  8802  0023AE  0100               	movlb	0	; () banked
  8803  0023B0  3B80               	swapf	??_addRun& (0+255),f,b
  8804  0023B2  0EF0               	movlw	240
  8805  0023B4  1780               	andwf	??_addRun& (0+255),f,b
  8806  0023B6  0100               	movlb	0	; () banked
  8807  0023B8  5180               	movf	??_addRun& (0+255),w,b
  8808  0023BA  0F09               	addlw	9
  8809  0023BC  EC45  F015         	call	_eepromWrite
  8810                           
  8811                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8812  0023C0  C037  F021         	movff	addRun@soupL,eepromWrite@data
  8813  0023C4  C03B  F080         	movff	addRun@currRun,??_addRun
  8814  0023C8  0100               	movlb	0	; () banked
  8815  0023CA  3B80               	swapf	??_addRun& (0+255),f,b
  8816  0023CC  0EF0               	movlw	240
  8817  0023CE  1780               	andwf	??_addRun& (0+255),f,b
  8818  0023D0  0100               	movlb	0	; () banked
  8819  0023D2  5180               	movf	??_addRun& (0+255),w,b
  8820  0023D4  0F0A               	addlw	10
  8821  0023D6  EC45  F015         	call	_eepromWrite
  8822                           
  8823                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8824  0023DA  C039  F021         	movff	addRun@soupNL,eepromWrite@data
  8825  0023DE  C03B  F080         	movff	addRun@currRun,??_addRun
  8826  0023E2  0100               	movlb	0	; () banked
  8827  0023E4  3B80               	swapf	??_addRun& (0+255),f,b
  8828  0023E6  0EF0               	movlw	240
  8829  0023E8  1780               	andwf	??_addRun& (0+255),f,b
  8830  0023EA  0100               	movlb	0	; () banked
  8831  0023EC  5180               	movf	??_addRun& (0+255),w,b
  8832  0023EE  0F0B               	addlw	11
  8833  0023F0  EC45  F015         	call	_eepromWrite
  8834  0023F4  0012               	return		;funcret
  8835  0023F6                     __end_of_addRun:
  8836                           	opt stack 0
  8837                           tblptru	equ	0xFF8
  8838                           tblptrh	equ	0xFF7
  8839                           tblptrl	equ	0xFF6
  8840                           tablat	equ	0xFF5
  8841                           prodh	equ	0xFF4
  8842                           prodl	equ	0xFF3
  8843                           intcon	equ	0xFF2
  8844                           intcon2	equ	0xFF1
  8845                           postinc0	equ	0xFEE
  8846                           wreg	equ	0xFE8
  8847                           indf2	equ	0xFDF
  8848                           postinc2	equ	0xFDE
  8849                           postdec2	equ	0xFDD
  8850                           fsr2h	equ	0xFDA
  8851                           fsr2l	equ	0xFD9
  8852                           status	equ	0xFD8
  8853                           
  8854 ;; *************** function _eepromWrite *****************
  8855 ;; Defined at:
  8856 ;;		line 43 in file "interface.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  address         1    wreg     char 
  8859 ;;  data            1   32[COMRAM] char 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  address         1   35[COMRAM] char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      void 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8871 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;Total ram usage:        4 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    2
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		_addRun
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text29
  8886  002A8A                     __ptext29:
  8887                           	opt stack 0
  8888  002A8A                     _eepromWrite:
  8889                           	opt stack 27
  8890                           
  8891                           ;incstack = 0
  8892                           ;eepromWrite@address stored from wreg
  8893  002A8A  6E24               	movwf	eepromWrite@address,c
  8894                           
  8895                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8896  002A8C  C024  F022         	movff	eepromWrite@address,??_eepromWrite
  8897  002A90  0E08               	movlw	8
  8898  002A92  6E23               	movwf	(??_eepromWrite+1)& (0+255),c
  8899  002A94                     u4495:
  8900  002A94  3422               	rlcf	??_eepromWrite,w,c
  8901  002A96  3222               	rrcf	??_eepromWrite,f,c
  8902  002A98  2E23               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8903  002A9A  D7FC               	goto	u4495
  8904  002A9C  5022               	movf	??_eepromWrite,w,c
  8905  002A9E  6EAA               	movwf	4010,c	;volatile
  8906                           
  8907                           ;interface.c: 46: EEADR = (signed char)address;
  8908  002AA0  C024  FFA9         	movff	eepromWrite@address,4009	;volatile
  8909                           
  8910                           ;interface.c: 48: EEDATA = data;
  8911  002AA4  C021  FFA8         	movff	eepromWrite@data,4008	;volatile
  8912                           
  8913                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8914  002AA8  9EA6               	bcf	4006,7,c	;volatile
  8915                           
  8916                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8917  002AAA  9CA6               	bcf	4006,6,c	;volatile
  8918                           
  8919                           ;interface.c: 51: EECON1bits.WREN = 1;
  8920  002AAC  84A6               	bsf	4006,2,c	;volatile
  8921                           
  8922                           ;interface.c: 55: EECON2 = 0x55;
  8923  002AAE  0E55               	movlw	85
  8924  002AB0  6EA7               	movwf	4007,c	;volatile
  8925                           
  8926                           ;interface.c: 56: EECON2 = 0xAA;
  8927  002AB2  0EAA               	movlw	170
  8928  002AB4  6EA7               	movwf	4007,c	;volatile
  8929                           
  8930                           ;interface.c: 57: EECON1bits.WR = 1;
  8931  002AB6  82A6               	bsf	4006,1,c	;volatile
  8932  002AB8                     l709:
  8933  002AB8  A8A1               	btfss	4001,4,c	;volatile
  8934  002ABA  D7FE               	goto	l709
  8935                           
  8936                           ;interface.c: 63: }
  8937                           ;interface.c: 65: PIR2bits.EEIF = 0;
  8938  002ABC  98A1               	bcf	4001,4,c	;volatile
  8939                           
  8940                           ;interface.c: 66: EECON1bits.WREN = 0;
  8941  002ABE  94A6               	bcf	4006,2,c	;volatile
  8942  002AC0  0012               	return		;funcret
  8943  002AC2                     __end_of_eepromWrite:
  8944                           	opt stack 0
  8945                           tblptru	equ	0xFF8
  8946                           tblptrh	equ	0xFF7
  8947                           tblptrl	equ	0xFF6
  8948                           tablat	equ	0xFF5
  8949                           prodh	equ	0xFF4
  8950                           prodl	equ	0xFF3
  8951                           intcon	equ	0xFF2
  8952                           intcon2	equ	0xFF1
  8953                           postinc0	equ	0xFEE
  8954                           wreg	equ	0xFE8
  8955                           indf2	equ	0xFDF
  8956                           postinc2	equ	0xFDE
  8957                           postdec2	equ	0xFDD
  8958                           fsr2h	equ	0xFDA
  8959                           fsr2l	equ	0xFD9
  8960                           status	equ	0xFD8
  8961                           
  8962 ;; *************** function _eepromRead *****************
  8963 ;; Defined at:
  8964 ;;		line 27 in file "interface.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;  address         1    wreg     char 
  8967 ;; Auto vars:     Size  Location     Type
  8968 ;;  address         1   34[COMRAM] char 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  1    wreg      char 
  8971 ;; Registers used:
  8972 ;;		wreg, status,2, status,0
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;Total ram usage:        3 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    2
  8985 ;; This function calls:
  8986 ;;		Nothing
  8987 ;; This function is called by:
  8988 ;;		_addRun
  8989 ;;		_displayLog
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text30
  8994  002AC2                     __ptext30:
  8995                           	opt stack 0
  8996  002AC2                     _eepromRead:
  8997                           	opt stack 27
  8998                           
  8999                           ;incstack = 0
  9000                           ;eepromRead@address stored from wreg
  9001  002AC2  6E23               	movwf	eepromRead@address,c
  9002                           
  9003                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  9004  002AC4  C023  F021         	movff	eepromRead@address,??_eepromRead
  9005  002AC8  0E08               	movlw	8
  9006  002ACA  6E22               	movwf	(??_eepromRead+1)& (0+255),c
  9007  002ACC                     u7015:
  9008  002ACC  3421               	rlcf	??_eepromRead,w,c
  9009  002ACE  3221               	rrcf	??_eepromRead,f,c
  9010  002AD0  2E22               	decfsz	(??_eepromRead+1)& (0+255),f,c
  9011  002AD2  D7FC               	goto	u7015
  9012  002AD4  5021               	movf	??_eepromRead,w,c
  9013  002AD6  6EAA               	movwf	4010,c	;volatile
  9014                           
  9015                           ;interface.c: 30: EEADR = (signed char)address;
  9016  002AD8  C023  FFA9         	movff	eepromRead@address,4009	;volatile
  9017                           
  9018                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  9019  002ADC  9EA6               	bcf	4006,7,c	;volatile
  9020                           
  9021                           ;interface.c: 33: EECON1bits.CFGS = 0;
  9022  002ADE  9CA6               	bcf	4006,6,c	;volatile
  9023                           
  9024                           ;interface.c: 34: EECON1bits.RD = 1;
  9025  002AE0  80A6               	bsf	4006,0,c	;volatile
  9026  002AE2                     l703:
  9027  002AE2  B0A6               	btfsc	4006,0,c	;volatile
  9028  002AE4  D7FE               	goto	l703
  9029                           
  9030                           ;interface.c: 40: return EEDATA;
  9031  002AE6  50A8               	movf	4008,w,c	;volatile
  9032  002AE8  0012               	return	
  9033  002AEA                     __end_of_eepromRead:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           intcon	equ	0xFF2
  9042                           intcon2	equ	0xFF1
  9043                           postinc0	equ	0xFEE
  9044                           wreg	equ	0xFE8
  9045                           indf2	equ	0xFDF
  9046                           postinc2	equ	0xFDE
  9047                           postdec2	equ	0xFDD
  9048                           fsr2h	equ	0xFDA
  9049                           fsr2l	equ	0xFD9
  9050                           status	equ	0xFD8
  9051                           
  9052 ;; *************** function ___awmod *****************
  9053 ;; Defined at:
  9054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  dividend        2   32[COMRAM] int 
  9057 ;;  divisor         2   34[COMRAM] int 
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;  sign            1   37[COMRAM] unsigned char 
  9060 ;;  counter         1   36[COMRAM] unsigned char 
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  2   32[COMRAM] int 
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9074 ;;Total ram usage:        6 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; Hardware stack levels required when called:    2
  9077 ;; This function calls:
  9078 ;;		Nothing
  9079 ;; This function is called by:
  9080 ;;		_main
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           	psect	text31
  9085  00272E                     __ptext31:
  9086                           	opt stack 0
  9087  00272E                     ___awmod:
  9088                           	opt stack 28
  9089                           
  9090                           ;incstack = 0
  9091  00272E  0E00               	movlw	0
  9092  002730  6E26               	movwf	___awmod@sign,c
  9093  002732  AE22               	btfss	___awmod@dividend+1,7,c
  9094  002734  D006               	goto	l4299
  9095  002736  6C21               	negf	___awmod@dividend,c
  9096  002738  1E22               	comf	___awmod@dividend+1,f,c
  9097  00273A  B0D8               	btfsc	status,0,c
  9098  00273C  2A22               	incf	___awmod@dividend+1,f,c
  9099  00273E  0E01               	movlw	1
  9100  002740  6E26               	movwf	___awmod@sign,c
  9101  002742                     l4299:
  9102  002742  AE24               	btfss	___awmod@divisor+1,7,c
  9103  002744  D004               	goto	l4303
  9104  002746  6C23               	negf	___awmod@divisor,c
  9105  002748  1E24               	comf	___awmod@divisor+1,f,c
  9106  00274A  B0D8               	btfsc	status,0,c
  9107  00274C  2A24               	incf	___awmod@divisor+1,f,c
  9108  00274E                     l4303:
  9109  00274E  5023               	movf	___awmod@divisor,w,c
  9110  002750  1024               	iorwf	___awmod@divisor+1,w,c
  9111  002752  B4D8               	btfsc	status,2,c
  9112  002754  D018               	goto	l4319
  9113  002756  0E01               	movlw	1
  9114  002758  6E25               	movwf	___awmod@counter,c
  9115  00275A  D004               	goto	l4309
  9116  00275C                     l4307:
  9117  00275C  90D8               	bcf	status,0,c
  9118  00275E  3623               	rlcf	___awmod@divisor,f,c
  9119  002760  3624               	rlcf	___awmod@divisor+1,f,c
  9120  002762  2A25               	incf	___awmod@counter,f,c
  9121  002764                     l4309:
  9122  002764  AE24               	btfss	___awmod@divisor+1,7,c
  9123  002766  D7FA               	goto	l4307
  9124  002768                     l4311:
  9125  002768  5023               	movf	___awmod@divisor,w,c
  9126  00276A  5C21               	subwf	___awmod@dividend,w,c
  9127  00276C  5024               	movf	___awmod@divisor+1,w,c
  9128  00276E  5822               	subwfb	___awmod@dividend+1,w,c
  9129  002770  A0D8               	btfss	status,0,c
  9130  002772  D004               	goto	l4315
  9131  002774  5023               	movf	___awmod@divisor,w,c
  9132  002776  5E21               	subwf	___awmod@dividend,f,c
  9133  002778  5024               	movf	___awmod@divisor+1,w,c
  9134  00277A  5A22               	subwfb	___awmod@dividend+1,f,c
  9135  00277C                     l4315:
  9136  00277C  90D8               	bcf	status,0,c
  9137  00277E  3224               	rrcf	___awmod@divisor+1,f,c
  9138  002780  3223               	rrcf	___awmod@divisor,f,c
  9139  002782  2E25               	decfsz	___awmod@counter,f,c
  9140  002784  D7F1               	goto	l4311
  9141  002786                     l4319:
  9142  002786  5026               	movf	___awmod@sign,w,c
  9143  002788  B4D8               	btfsc	status,2,c
  9144  00278A  D004               	goto	l4323
  9145  00278C  6C21               	negf	___awmod@dividend,c
  9146  00278E  1E22               	comf	___awmod@dividend+1,f,c
  9147  002790  B0D8               	btfsc	status,0,c
  9148  002792  2A22               	incf	___awmod@dividend+1,f,c
  9149  002794                     l4323:
  9150  002794  C021  F021         	movff	___awmod@dividend,?___awmod
  9151  002798  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  9152  00279C  0012               	return	
  9153  00279E                     __end_of___awmod:
  9154                           	opt stack 0
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon2	equ	0xFF1
  9163                           postinc0	equ	0xFEE
  9164                           wreg	equ	0xFE8
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172 ;; *************** function _PWM2slow *****************
  9173 ;; Defined at:
  9174 ;;		line 60 in file "motors.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;  duty            2   32[COMRAM] int 
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;		None
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, status,2, status,0
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9188 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;Total ram usage:        4 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    2
  9195 ;; This function calls:
  9196 ;;		Nothing
  9197 ;; This function is called by:
  9198 ;;		_main
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text32
  9203  00296A                     __ptext32:
  9204                           	opt stack 0
  9205  00296A                     _PWM2slow:
  9206                           	opt stack 28
  9207                           
  9208                           ;motors.c: 61: CCP2CONbits.DC2B0 = duty & 1;
  9209                           
  9210                           ;incstack = 0
  9211  00296A  C021  F023         	movff	PWM2slow@duty,??_PWM2slow
  9212  00296E  0E01               	movlw	1
  9213  002970  1623               	andwf	??_PWM2slow,f,c
  9214  002972  3A23               	swapf	??_PWM2slow,f,c
  9215  002974  50BA               	movf	4026,w,c	;volatile
  9216  002976  1823               	xorwf	??_PWM2slow,w,c
  9217  002978  0BEF               	andlw	-17
  9218  00297A  1823               	xorwf	??_PWM2slow,w,c
  9219  00297C  6EBA               	movwf	4026,c	;volatile
  9220                           
  9221                           ;motors.c: 62: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9222  00297E  3422               	rlcf	PWM2slow@duty+1,w,c
  9223  002980  3022               	rrcf	PWM2slow@duty+1,w,c
  9224  002982  6E24               	movwf	(??_PWM2slow+1)& (0+255),c
  9225  002984  3021               	rrcf	PWM2slow@duty,w,c
  9226  002986  6E23               	movwf	??_PWM2slow& (0+255),c
  9227  002988  0E01               	movlw	1
  9228  00298A  1623               	andwf	??_PWM2slow,f,c
  9229  00298C  3A23               	swapf	??_PWM2slow,f,c
  9230  00298E  4623               	rlncf	??_PWM2slow,f,c
  9231  002990  50BA               	movf	4026,w,c	;volatile
  9232  002992  1823               	xorwf	??_PWM2slow,w,c
  9233  002994  0BDF               	andlw	-33
  9234  002996  1823               	xorwf	??_PWM2slow,w,c
  9235  002998  6EBA               	movwf	4026,c	;volatile
  9236                           
  9237                           ;motors.c: 63: CCPR2L = (duty >> 2);
  9238  00299A  C021  F023         	movff	PWM2slow@duty,??_PWM2slow
  9239  00299E  C022  F024         	movff	PWM2slow@duty+1,??_PWM2slow+1
  9240  0029A2  3424               	rlcf	??_PWM2slow+1,w,c
  9241  0029A4  3224               	rrcf	??_PWM2slow+1,f,c
  9242  0029A6  3223               	rrcf	??_PWM2slow,f,c
  9243  0029A8  3424               	rlcf	??_PWM2slow+1,w,c
  9244  0029AA  3224               	rrcf	??_PWM2slow+1,f,c
  9245  0029AC  3223               	rrcf	??_PWM2slow,f,c
  9246  0029AE  5023               	movf	??_PWM2slow,w,c
  9247  0029B0  6EBB               	movwf	4027,c	;volatile
  9248                           
  9249                           ;motors.c: 65: LATAbits.LATA6 = 1;
  9250  0029B2  8C89               	bsf	3977,6,c	;volatile
  9251                           
  9252                           ;motors.c: 66: LATAbits.LATA7 = 0;
  9253  0029B4  9E89               	bcf	3977,7,c	;volatile
  9254  0029B6  0012               	return		;funcret
  9255  0029B8                     __end_of_PWM2slow:
  9256                           	opt stack 0
  9257                           tblptru	equ	0xFF8
  9258                           tblptrh	equ	0xFF7
  9259                           tblptrl	equ	0xFF6
  9260                           tablat	equ	0xFF5
  9261                           prodh	equ	0xFF4
  9262                           prodl	equ	0xFF3
  9263                           intcon	equ	0xFF2
  9264                           intcon2	equ	0xFF1
  9265                           postinc0	equ	0xFEE
  9266                           wreg	equ	0xFE8
  9267                           indf2	equ	0xFDF
  9268                           postinc2	equ	0xFDE
  9269                           postdec2	equ	0xFDD
  9270                           fsr2h	equ	0xFDA
  9271                           fsr2l	equ	0xFD9
  9272                           status	equ	0xFD8
  9273                           
  9274 ;; *************** function _PWM2off *****************
  9275 ;; Defined at:
  9276 ;;		line 69 in file "motors.c"
  9277 ;; Parameters:    Size  Location     Type
  9278 ;;		None
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;                  1    wreg      void 
  9283 ;; Registers used:
  9284 ;;		wreg, status,2
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;Total ram usage:        0 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    2
  9297 ;; This function calls:
  9298 ;;		Nothing
  9299 ;; This function is called by:
  9300 ;;		_main
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           	psect	text33
  9305  002C44                     __ptext33:
  9306                           	opt stack 0
  9307  002C44                     _PWM2off:
  9308                           	opt stack 28
  9309                           
  9310                           ;motors.c: 70: CCP2CONbits.DC2B0 = 0;
  9311                           
  9312                           ;incstack = 0
  9313  002C44  98BA               	bcf	4026,4,c	;volatile
  9314                           
  9315                           ;motors.c: 71: CCP2CONbits.DC2B1 = 0;
  9316  002C46  9ABA               	bcf	4026,5,c	;volatile
  9317                           
  9318                           ;motors.c: 72: CCPR2L = 0;
  9319  002C48  0E00               	movlw	0
  9320  002C4A  6EBB               	movwf	4027,c	;volatile
  9321  002C4C  0012               	return		;funcret
  9322  002C4E                     __end_of_PWM2off:
  9323                           	opt stack 0
  9324                           tblptru	equ	0xFF8
  9325                           tblptrh	equ	0xFF7
  9326                           tblptrl	equ	0xFF6
  9327                           tablat	equ	0xFF5
  9328                           prodh	equ	0xFF4
  9329                           prodl	equ	0xFF3
  9330                           intcon	equ	0xFF2
  9331                           intcon2	equ	0xFF1
  9332                           postinc0	equ	0xFEE
  9333                           wreg	equ	0xFE8
  9334                           indf2	equ	0xFDF
  9335                           postinc2	equ	0xFDE
  9336                           postdec2	equ	0xFDD
  9337                           fsr2h	equ	0xFDA
  9338                           fsr2l	equ	0xFD9
  9339                           status	equ	0xFD8
  9340                           
  9341 ;; *************** function _PWM2 *****************
  9342 ;; Defined at:
  9343 ;;		line 34 in file "motors.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;  duty            2   32[COMRAM] int 
  9346 ;;  dir             2   34[COMRAM] int 
  9347 ;; Auto vars:     Size  Location     Type
  9348 ;;		None
  9349 ;; Return value:  Size  Location     Type
  9350 ;;                  1    wreg      void 
  9351 ;; Registers used:
  9352 ;;		wreg, status,2, status,0
  9353 ;; Tracked objects:
  9354 ;;		On entry : 0/0
  9355 ;;		On exit  : 0/0
  9356 ;;		Unchanged: 0/0
  9357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;Total ram usage:        6 bytes
  9363 ;; Hardware stack levels used:    1
  9364 ;; Hardware stack levels required when called:    2
  9365 ;; This function calls:
  9366 ;;		Nothing
  9367 ;; This function is called by:
  9368 ;;		_main
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text34
  9373  0026B6                     __ptext34:
  9374                           	opt stack 0
  9375  0026B6                     _PWM2:
  9376                           	opt stack 28
  9377                           
  9378                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  9379                           
  9380                           ;incstack = 0
  9381  0026B6  C021  F025         	movff	PWM2@duty,??_PWM2
  9382  0026BA  0E01               	movlw	1
  9383  0026BC  1625               	andwf	??_PWM2,f,c
  9384  0026BE  3A25               	swapf	??_PWM2,f,c
  9385  0026C0  50BA               	movf	4026,w,c	;volatile
  9386  0026C2  1825               	xorwf	??_PWM2,w,c
  9387  0026C4  0BEF               	andlw	-17
  9388  0026C6  1825               	xorwf	??_PWM2,w,c
  9389  0026C8  6EBA               	movwf	4026,c	;volatile
  9390                           
  9391                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  9392  0026CA  3422               	rlcf	PWM2@duty+1,w,c
  9393  0026CC  3022               	rrcf	PWM2@duty+1,w,c
  9394  0026CE  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9395  0026D0  3021               	rrcf	PWM2@duty,w,c
  9396  0026D2  6E25               	movwf	??_PWM2& (0+255),c
  9397  0026D4  0E01               	movlw	1
  9398  0026D6  1625               	andwf	??_PWM2,f,c
  9399  0026D8  3A25               	swapf	??_PWM2,f,c
  9400  0026DA  4625               	rlncf	??_PWM2,f,c
  9401  0026DC  50BA               	movf	4026,w,c	;volatile
  9402  0026DE  1825               	xorwf	??_PWM2,w,c
  9403  0026E0  0BDF               	andlw	-33
  9404  0026E2  1825               	xorwf	??_PWM2,w,c
  9405  0026E4  6EBA               	movwf	4026,c	;volatile
  9406                           
  9407                           ;motors.c: 44: CCPR2L = (duty >> 2);
  9408  0026E6  C021  F025         	movff	PWM2@duty,??_PWM2
  9409  0026EA  C022  F026         	movff	PWM2@duty+1,??_PWM2+1
  9410  0026EE  3426               	rlcf	??_PWM2+1,w,c
  9411  0026F0  3226               	rrcf	??_PWM2+1,f,c
  9412  0026F2  3225               	rrcf	??_PWM2,f,c
  9413  0026F4  3426               	rlcf	??_PWM2+1,w,c
  9414  0026F6  3226               	rrcf	??_PWM2+1,f,c
  9415  0026F8  3225               	rrcf	??_PWM2,f,c
  9416  0026FA  5025               	movf	??_PWM2,w,c
  9417  0026FC  6EBB               	movwf	4027,c	;volatile
  9418                           
  9419                           ;motors.c: 46: LATAbits.LATA6 = 0;
  9420  0026FE  9C89               	bcf	3977,6,c	;volatile
  9421                           
  9422                           ;motors.c: 47: LATAbits.LATA7 = 0;
  9423  002700  9E89               	bcf	3977,7,c	;volatile
  9424                           
  9425                           ;motors.c: 48: _delay((unsigned long)((50)*(32000000/4000.0)));
  9426  002702  0E03               	movlw	3
  9427  002704  6E26               	movwf	(??_PWM2+1)& (0+255),c
  9428  002706  0E08               	movlw	8
  9429  002708  6E25               	movwf	??_PWM2& (0+255),c
  9430  00270A  0E77               	movlw	119
  9431  00270C                     u8257:
  9432  00270C  2EE8               	decfsz	wreg,f,c
  9433  00270E  D7FE               	bra	u8257
  9434  002710  2E25               	decfsz	??_PWM2& (0+255),f,c
  9435  002712  D7FC               	bra	u8257
  9436  002714  2E26               	decfsz	(??_PWM2+1)& (0+255),f,c
  9437  002716  D7FA               	bra	u8257
  9438  002718  F000               	nop	
  9439                           
  9440                           ;motors.c: 49: if(dir==1){
  9441  00271A  0423               	decf	PWM2@dir,w,c
  9442  00271C  1024               	iorwf	PWM2@dir+1,w,c
  9443  00271E  A4D8               	btfss	status,2,c
  9444  002720  D003               	goto	l476
  9445                           
  9446                           ;motors.c: 50: LATAbits.LATA6 = 1;
  9447  002722  8C89               	bsf	3977,6,c	;volatile
  9448                           
  9449                           ;motors.c: 51: LATAbits.LATA7 = 0;
  9450  002724  9E89               	bcf	3977,7,c	;volatile
  9451                           
  9452                           ;motors.c: 52: }
  9453  002726  0012               	return	
  9454  002728                     l476:
  9455                           
  9456                           ;motors.c: 53: else{
  9457                           ;motors.c: 54: LATAbits.LATA6 = 0;
  9458  002728  9C89               	bcf	3977,6,c	;volatile
  9459                           
  9460                           ;motors.c: 55: LATAbits.LATA7 = 1;
  9461  00272A  8E89               	bsf	3977,7,c	;volatile
  9462  00272C  0012               	return	
  9463  00272E                     __end_of_PWM2:
  9464                           	opt stack 0
  9465                           tblptru	equ	0xFF8
  9466                           tblptrh	equ	0xFF7
  9467                           tblptrl	equ	0xFF6
  9468                           tablat	equ	0xFF5
  9469                           prodh	equ	0xFF4
  9470                           prodl	equ	0xFF3
  9471                           intcon	equ	0xFF2
  9472                           intcon2	equ	0xFF1
  9473                           postinc0	equ	0xFEE
  9474                           wreg	equ	0xFE8
  9475                           indf2	equ	0xFDF
  9476                           postinc2	equ	0xFDE
  9477                           postdec2	equ	0xFDD
  9478                           fsr2h	equ	0xFDA
  9479                           fsr2l	equ	0xFD9
  9480                           status	equ	0xFD8
  9481                           
  9482 ;; *************** function _PWM1off *****************
  9483 ;; Defined at:
  9484 ;;		line 28 in file "motors.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;		None
  9487 ;; Auto vars:     Size  Location     Type
  9488 ;;		None
  9489 ;; Return value:  Size  Location     Type
  9490 ;;                  1    wreg      void 
  9491 ;; Registers used:
  9492 ;;		wreg, status,2
  9493 ;; Tracked objects:
  9494 ;;		On entry : 0/0
  9495 ;;		On exit  : 0/0
  9496 ;;		Unchanged: 0/0
  9497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9502 ;;Total ram usage:        0 bytes
  9503 ;; Hardware stack levels used:    1
  9504 ;; Hardware stack levels required when called:    2
  9505 ;; This function calls:
  9506 ;;		Nothing
  9507 ;; This function is called by:
  9508 ;;		_main
  9509 ;; This function uses a non-reentrant model
  9510 ;;
  9511                           
  9512                           	psect	text35
  9513  002C4E                     __ptext35:
  9514                           	opt stack 0
  9515  002C4E                     _PWM1off:
  9516                           	opt stack 28
  9517                           
  9518                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  9519                           
  9520                           ;incstack = 0
  9521  002C4E  98BD               	bcf	4029,4,c	;volatile
  9522                           
  9523                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  9524  002C50  9ABD               	bcf	4029,5,c	;volatile
  9525                           
  9526                           ;motors.c: 31: CCPR1L = 0;
  9527  002C52  0E00               	movlw	0
  9528  002C54  6EBE               	movwf	4030,c	;volatile
  9529  002C56  0012               	return		;funcret
  9530  002C58                     __end_of_PWM1off:
  9531                           	opt stack 0
  9532                           tblptru	equ	0xFF8
  9533                           tblptrh	equ	0xFF7
  9534                           tblptrl	equ	0xFF6
  9535                           tablat	equ	0xFF5
  9536                           prodh	equ	0xFF4
  9537                           prodl	equ	0xFF3
  9538                           intcon	equ	0xFF2
  9539                           intcon2	equ	0xFF1
  9540                           postinc0	equ	0xFEE
  9541                           wreg	equ	0xFE8
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           fsr2h	equ	0xFDA
  9546                           fsr2l	equ	0xFD9
  9547                           status	equ	0xFD8
  9548                           
  9549 ;; *************** function _PWM1 *****************
  9550 ;; Defined at:
  9551 ;;		line 14 in file "motors.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  duty            2   32[COMRAM] int 
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9565 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;Total ram usage:        4 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    2
  9572 ;; This function calls:
  9573 ;;		Nothing
  9574 ;; This function is called by:
  9575 ;;		_main
  9576 ;; This function uses a non-reentrant model
  9577 ;;
  9578                           
  9579                           	psect	text36
  9580  0029B8                     __ptext36:
  9581                           	opt stack 0
  9582  0029B8                     _PWM1:
  9583                           	opt stack 28
  9584                           
  9585                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  9586                           
  9587                           ;incstack = 0
  9588  0029B8  C021  F023         	movff	PWM1@duty,??_PWM1
  9589  0029BC  0E01               	movlw	1
  9590  0029BE  1623               	andwf	??_PWM1,f,c
  9591  0029C0  3A23               	swapf	??_PWM1,f,c
  9592  0029C2  50BD               	movf	4029,w,c	;volatile
  9593  0029C4  1823               	xorwf	??_PWM1,w,c
  9594  0029C6  0BEF               	andlw	-17
  9595  0029C8  1823               	xorwf	??_PWM1,w,c
  9596  0029CA  6EBD               	movwf	4029,c	;volatile
  9597                           
  9598                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  9599  0029CC  3422               	rlcf	PWM1@duty+1,w,c
  9600  0029CE  3022               	rrcf	PWM1@duty+1,w,c
  9601  0029D0  6E24               	movwf	(??_PWM1+1)& (0+255),c
  9602  0029D2  3021               	rrcf	PWM1@duty,w,c
  9603  0029D4  6E23               	movwf	??_PWM1& (0+255),c
  9604  0029D6  0E01               	movlw	1
  9605  0029D8  1623               	andwf	??_PWM1,f,c
  9606  0029DA  3A23               	swapf	??_PWM1,f,c
  9607  0029DC  4623               	rlncf	??_PWM1,f,c
  9608  0029DE  50BD               	movf	4029,w,c	;volatile
  9609  0029E0  1823               	xorwf	??_PWM1,w,c
  9610  0029E2  0BDF               	andlw	-33
  9611  0029E4  1823               	xorwf	??_PWM1,w,c
  9612  0029E6  6EBD               	movwf	4029,c	;volatile
  9613                           
  9614                           ;motors.c: 24: CCPR1L = (duty >> 2);
  9615  0029E8  C021  F023         	movff	PWM1@duty,??_PWM1
  9616  0029EC  C022  F024         	movff	PWM1@duty+1,??_PWM1+1
  9617  0029F0  3424               	rlcf	??_PWM1+1,w,c
  9618  0029F2  3224               	rrcf	??_PWM1+1,f,c
  9619  0029F4  3223               	rrcf	??_PWM1,f,c
  9620  0029F6  3424               	rlcf	??_PWM1+1,w,c
  9621  0029F8  3224               	rrcf	??_PWM1+1,f,c
  9622  0029FA  3223               	rrcf	??_PWM1,f,c
  9623  0029FC  5023               	movf	??_PWM1,w,c
  9624  0029FE  6EBE               	movwf	4030,c	;volatile
  9625  002A00  0012               	return		;funcret
  9626  002A02                     __end_of_PWM1:
  9627                           	opt stack 0
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           intcon	equ	0xFF2
  9635                           intcon2	equ	0xFF1
  9636                           postinc0	equ	0xFEE
  9637                           wreg	equ	0xFE8
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function _handler *****************
  9646 ;; Defined at:
  9647 ;;		line 31 in file "main.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:       18 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    1
  9668 ;; This function calls:
  9669 ;;		___awdiv
  9670 ;;		_updateS2
  9671 ;;		i2___wmul
  9672 ;;		i2_startTMR1
  9673 ;;		i2_updateS1
  9674 ;;		i2_updateS3
  9675 ;; This function is called by:
  9676 ;;		Interrupt level 2
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	intcode
  9681  000008                     __pintcode:
  9682                           	opt stack 0
  9683  000008                     _handler:
  9684                           	opt stack 25
  9685                           
  9686                           ;incstack = 0
  9687  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9688  00000A  ED68  F00D         	call	int_func,f	;refresh shadow registers
  9689                           tblptru	equ	0xFF8
  9690                           tblptrh	equ	0xFF7
  9691                           tblptrl	equ	0xFF6
  9692                           tablat	equ	0xFF5
  9693                           prodh	equ	0xFF4
  9694                           prodl	equ	0xFF3
  9695                           intcon	equ	0xFF2
  9696                           intcon2	equ	0xFF1
  9697                           postinc0	equ	0xFEE
  9698                           wreg	equ	0xFE8
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8
  9705                           
  9706                           	psect	intcode_body
  9707  001AD0                     __pintcode_body:
  9708                           	opt stack 25
  9709  001AD0                     int_func:
  9710                           	opt stack 25
  9711  001AD0  0006               	pop		; remove dummy address from shadow register refresh
  9712  001AD2  CFFA F011          	movff	pclath,??_handler+2
  9713  001AD6  CFFB F012          	movff	pclatu,??_handler+3
  9714  001ADA  CFE9 F013          	movff	fsr0l,??_handler+4
  9715  001ADE  CFEA F014          	movff	fsr0h,??_handler+5
  9716  001AE2  CFE1 F015          	movff	fsr1l,??_handler+6
  9717  001AE6  CFE2 F016          	movff	fsr1h,??_handler+7
  9718  001AEA  CFD9 F017          	movff	fsr2l,??_handler+8
  9719  001AEE  CFDA F018          	movff	fsr2h,??_handler+9
  9720  001AF2  CFF3 F019          	movff	prodl,??_handler+10
  9721  001AF6  CFF4 F01A          	movff	prodh,??_handler+11
  9722  001AFA  CFF6 F01B          	movff	tblptrl,??_handler+12
  9723  001AFE  CFF7 F01C          	movff	tblptrh,??_handler+13
  9724  001B02  CFF8 F01D          	movff	tblptru,??_handler+14
  9725  001B06  CFF5 F01E          	movff	tablat,??_handler+15
  9726                           
  9727                           ;main.c: 33: (INTCONbits.GIE = 0);
  9728  001B0A  9EF2               	bcf	intcon,7,c	;volatile
  9729                           
  9730                           ;main.c: 34: if(TMR0IF){
  9731  001B0C  A4F2               	btfss	intcon,2,c	;volatile
  9732  001B0E  D00E               	goto	i2l4567
  9733                           
  9734                           ;main.c: 35: TMR0IF = 0;
  9735  001B10  94F2               	bcf	intcon,2,c	;volatile
  9736                           
  9737                           ;main.c: 36: seconds++;
  9738  001B12  0100               	movlb	0	; () banked
  9739  001B14  4BBC               	infsnz	_seconds& (0+255),f,b
  9740  001B16  2BBD               	incf	(_seconds+1)& (0+255),f,b
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;main.c: 37: TMR0ON = 0;
  9744  001B18  9ED5               	bcf	4053,7,c	;volatile
  9745                           
  9746                           ; BSR set to: 0
  9747                           ;main.c: 40: T0CON = 0b00010111;
  9748  001B1A  0E17               	movlw	23
  9749  001B1C  6ED5               	movwf	4053,c	;volatile
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;main.c: 41: TMR0H = 0b10000101;
  9753  001B1E  0E85               	movlw	133
  9754  001B20  6ED7               	movwf	4055,c	;volatile
  9755                           
  9756                           ; BSR set to: 0
  9757                           ;main.c: 42: TMR0L = 0b10101110;
  9758  001B22  0EAE               	movlw	174
  9759  001B24  6ED6               	movwf	4054,c	;volatile
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;main.c: 43: T0CON = T0CON | 0b10000000;
  9763  001B26  50D5               	movf	4053,w,c	;volatile
  9764  001B28  0980               	iorlw	128
  9765  001B2A  6ED5               	movwf	4053,c	;volatile
  9766  001B2C                     i2l4567:
  9767                           
  9768                           ;main.c: 44: }
  9769                           ;main.c: 46: if(TMR1IF){
  9770  001B2C  A09E               	btfss	3998,0,c	;volatile
  9771  001B2E  D0D7               	goto	i2l185
  9772                           
  9773                           ;main.c: 47: TMR1IF = 0;
  9774  001B30  909E               	bcf	3998,0,c	;volatile
  9775                           
  9776                           ;main.c: 48: updateS1(S1mode);
  9777  001B32  C05B  F001         	movff	_S1mode,i2updateS1@mode
  9778  001B36  C05C  F002         	movff	_S1mode+1,i2updateS1@mode+1
  9779  001B3A  EC10  F00C         	call	i2_updateS1	;wreg free
  9780                           
  9781                           ;main.c: 49: updateS2(S2mode);
  9782  001B3E  C059  F001         	movff	_S2mode,updateS2@mode
  9783  001B42  C05A  F002         	movff	_S2mode+1,updateS2@mode+1
  9784  001B46  ECFB  F011         	call	_updateS2	;wreg free
  9785                           
  9786                           ;main.c: 50: updateS3(S3mode);
  9787  001B4A  C057  F001         	movff	_S3mode,i2updateS3@mode
  9788  001B4E  C058  F002         	movff	_S3mode+1,i2updateS3@mode+1
  9789  001B52  EC87  F00F         	call	i2_updateS3	;wreg free
  9790                           
  9791                           ;main.c: 51: soupSteps ++;
  9792  001B56  4A55               	infsnz	_soupSteps,f,c
  9793  001B58  2A56               	incf	_soupSteps+1,f,c
  9794                           
  9795                           ;main.c: 52: sodaSteps ++;
  9796  001B5A  4A53               	infsnz	_sodaSteps,f,c
  9797  001B5C  2A54               	incf	_sodaSteps+1,f,c
  9798                           
  9799                           ;main.c: 54: if(((tabState == 0) && (sodaSteps == (sodaI*(sodaI+2)/2*100 + 500))) ||
  9800                           ;main.c: 55: ((tabState == 1) && (sodaSteps == (sodaI*(sodaI+1)/2*100 + 350)))){
  9801  001B5E  5051               	movf	_tabState,w,c
  9802  001B60  1052               	iorwf	_tabState+1,w,c
  9803  001B62  A4D8               	btfss	status,2,c
  9804  001B64  D033               	goto	i2l4581
  9805  001B66  0E00               	movlw	0
  9806  001B68  6E0A               	movwf	___awdiv@divisor+1,c
  9807  001B6A  0E02               	movlw	2
  9808  001B6C  6E09               	movwf	___awdiv@divisor,c
  9809  001B6E  0E02               	movlw	2
  9810  001B70  2449               	addwf	_sodaI,w,c
  9811  001B72  6E01               	movwf	i2___wmul@multiplier,c
  9812  001B74  0E00               	movlw	0
  9813  001B76  204A               	addwfc	_sodaI+1,w,c
  9814  001B78  6E02               	movwf	i2___wmul@multiplier+1,c
  9815  001B7A  C049  F003         	movff	_sodaI,i2___wmul@multiplicand
  9816  001B7E  C04A  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9817  001B82  ECAE  F015         	call	i2___wmul	;wreg free
  9818  001B86  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9819  001B8A  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9820  001B8E  EC9C  F012         	call	___awdiv	;wreg free
  9821  001B92  C007  F01F         	movff	?___awdiv,_handler$1821
  9822  001B96  C008  F020         	movff	?___awdiv+1,_handler$1821+1
  9823  001B9A  0EF4               	movlw	244
  9824  001B9C  6E0F               	movwf	??_handler& (0+255),c
  9825  001B9E  0E01               	movlw	1
  9826  001BA0  6E10               	movwf	(??_handler+1)& (0+255),c
  9827  001BA2  C01F  F001         	movff	_handler$1821,i2___wmul@multiplier
  9828  001BA6  C020  F002         	movff	_handler$1821+1,i2___wmul@multiplier+1
  9829  001BAA  0E00               	movlw	0
  9830  001BAC  6E04               	movwf	i2___wmul@multiplicand+1,c
  9831  001BAE  0E64               	movlw	100
  9832  001BB0  6E03               	movwf	i2___wmul@multiplicand,c
  9833  001BB2  ECAE  F015         	call	i2___wmul	;wreg free
  9834  001BB6  500F               	movf	??_handler,w,c
  9835  001BB8  2601               	addwf	?i2___wmul,f,c
  9836  001BBA  5010               	movf	??_handler+1,w,c
  9837  001BBC  2202               	addwfc	?i2___wmul+1,f,c
  9838  001BBE  5053               	movf	_sodaSteps,w,c
  9839  001BC0  1801               	xorwf	?i2___wmul,w,c
  9840  001BC2  E104               	bnz	i2l4581
  9841  001BC4  5054               	movf	_sodaSteps+1,w,c
  9842  001BC6  1802               	xorwf	?i2___wmul+1,w,c
  9843  001BC8  B4D8               	btfsc	status,2,c
  9844  001BCA  D037               	goto	i2l4585
  9845  001BCC                     i2l4581:
  9846  001BCC  0451               	decf	_tabState,w,c
  9847  001BCE  1052               	iorwf	_tabState+1,w,c
  9848  001BD0  A4D8               	btfss	status,2,c
  9849  001BD2  D041               	goto	i2l4593
  9850  001BD4  0E00               	movlw	0
  9851  001BD6  6E0A               	movwf	___awdiv@divisor+1,c
  9852  001BD8  0E02               	movlw	2
  9853  001BDA  6E09               	movwf	___awdiv@divisor,c
  9854  001BDC  0E01               	movlw	1
  9855  001BDE  2449               	addwf	_sodaI,w,c
  9856  001BE0  6E01               	movwf	i2___wmul@multiplier,c
  9857  001BE2  0E00               	movlw	0
  9858  001BE4  204A               	addwfc	_sodaI+1,w,c
  9859  001BE6  6E02               	movwf	i2___wmul@multiplier+1,c
  9860  001BE8  C049  F003         	movff	_sodaI,i2___wmul@multiplicand
  9861  001BEC  C04A  F004         	movff	_sodaI+1,i2___wmul@multiplicand+1
  9862  001BF0  ECAE  F015         	call	i2___wmul	;wreg free
  9863  001BF4  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9864  001BF8  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9865  001BFC  EC9C  F012         	call	___awdiv	;wreg free
  9866  001C00  C007  F01F         	movff	?___awdiv,_handler$1821
  9867  001C04  C008  F020         	movff	?___awdiv+1,_handler$1821+1
  9868  001C08  0E5E               	movlw	94
  9869  001C0A  6E0F               	movwf	??_handler& (0+255),c
  9870  001C0C  0E01               	movlw	1
  9871  001C0E  6E10               	movwf	(??_handler+1)& (0+255),c
  9872  001C10  C01F  F001         	movff	_handler$1821,i2___wmul@multiplier
  9873  001C14  C020  F002         	movff	_handler$1821+1,i2___wmul@multiplier+1
  9874  001C18  0E00               	movlw	0
  9875  001C1A  6E04               	movwf	i2___wmul@multiplicand+1,c
  9876  001C1C  0E64               	movlw	100
  9877  001C1E  6E03               	movwf	i2___wmul@multiplicand,c
  9878  001C20  ECAE  F015         	call	i2___wmul	;wreg free
  9879  001C24  500F               	movf	??_handler,w,c
  9880  001C26  2601               	addwf	?i2___wmul,f,c
  9881  001C28  5010               	movf	??_handler+1,w,c
  9882  001C2A  2202               	addwfc	?i2___wmul+1,f,c
  9883  001C2C  5053               	movf	_sodaSteps,w,c
  9884  001C2E  1801               	xorwf	?i2___wmul,w,c
  9885  001C30  E112               	bnz	i2l4593
  9886  001C32  5054               	movf	_sodaSteps+1,w,c
  9887  001C34  1802               	xorwf	?i2___wmul+1,w,c
  9888  001C36  A4D8               	btfss	status,2,c
  9889  001C38  D00E               	goto	i2l4593
  9890  001C3A                     i2l4585:
  9891                           
  9892                           ;main.c: 56: if(sodaAlign == 1){sodaAlign = 2;}
  9893  001C3A  044F               	decf	_sodaAlign,w,c
  9894  001C3C  1050               	iorwf	_sodaAlign+1,w,c
  9895  001C3E  A4D8               	btfss	status,2,c
  9896  001C40  D004               	goto	i2l4589
  9897  001C42  0E00               	movlw	0
  9898  001C44  6E50               	movwf	_sodaAlign+1,c
  9899  001C46  0E02               	movlw	2
  9900  001C48  D003               	goto	L16
  9901  001C4A                     i2l4589:
  9902                           
  9903                           ;main.c: 57: else{sodaAlign = 1;}
  9904  001C4A  0E00               	movlw	0
  9905  001C4C  6E50               	movwf	_sodaAlign+1,c
  9906  001C4E  0E01               	movlw	1
  9907  001C50                     L16:
  9908  001C50  6E4F               	movwf	_sodaAlign,c
  9909                           
  9910                           ;main.c: 58: sodaI++;
  9911  001C52  4A49               	infsnz	_sodaI,f,c
  9912  001C54  2A4A               	incf	_sodaI+1,f,c
  9913  001C56                     i2l4593:
  9914                           
  9915                           ;main.c: 59: }
  9916                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 420)){
  9917  001C56  0E00               	movlw	0
  9918  001C58  6E0A               	movwf	___awdiv@divisor+1,c
  9919  001C5A  0E02               	movlw	2
  9920  001C5C  6E09               	movwf	___awdiv@divisor,c
  9921  001C5E  0E01               	movlw	1
  9922  001C60  244B               	addwf	_soupI,w,c
  9923  001C62  6E01               	movwf	i2___wmul@multiplier,c
  9924  001C64  0E00               	movlw	0
  9925  001C66  204C               	addwfc	_soupI+1,w,c
  9926  001C68  6E02               	movwf	i2___wmul@multiplier+1,c
  9927  001C6A  C04B  F003         	movff	_soupI,i2___wmul@multiplicand
  9928  001C6E  C04C  F004         	movff	_soupI+1,i2___wmul@multiplicand+1
  9929  001C72  ECAE  F015         	call	i2___wmul	;wreg free
  9930  001C76  C001  F007         	movff	?i2___wmul,___awdiv@dividend
  9931  001C7A  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
  9932  001C7E  EC9C  F012         	call	___awdiv	;wreg free
  9933  001C82  C007  F01F         	movff	?___awdiv,_handler$1821
  9934  001C86  C008  F020         	movff	?___awdiv+1,_handler$1821+1
  9935                           
  9936                           ;main.c: 59: }
  9937                           ;main.c: 61: if(soupSteps == (soupI*(soupI+1)/2*100 + 420)){
  9938  001C8A  0EA4               	movlw	164
  9939  001C8C  6E0F               	movwf	??_handler& (0+255),c
  9940  001C8E  0E01               	movlw	1
  9941  001C90  6E10               	movwf	(??_handler+1)& (0+255),c
  9942  001C92  C01F  F001         	movff	_handler$1821,i2___wmul@multiplier
  9943  001C96  C020  F002         	movff	_handler$1821+1,i2___wmul@multiplier+1
  9944  001C9A  0E00               	movlw	0
  9945  001C9C  6E04               	movwf	i2___wmul@multiplicand+1,c
  9946  001C9E  0E64               	movlw	100
  9947  001CA0  6E03               	movwf	i2___wmul@multiplicand,c
  9948  001CA2  ECAE  F015         	call	i2___wmul	;wreg free
  9949  001CA6  500F               	movf	??_handler,w,c
  9950  001CA8  2601               	addwf	?i2___wmul,f,c
  9951  001CAA  5010               	movf	??_handler+1,w,c
  9952  001CAC  2202               	addwfc	?i2___wmul+1,f,c
  9953  001CAE  5055               	movf	_soupSteps,w,c
  9954  001CB0  1801               	xorwf	?i2___wmul,w,c
  9955  001CB2  E112               	bnz	i2l4605
  9956  001CB4  5056               	movf	_soupSteps+1,w,c
  9957  001CB6  1802               	xorwf	?i2___wmul+1,w,c
  9958  001CB8  A4D8               	btfss	status,2,c
  9959  001CBA  D00E               	goto	i2l4605
  9960                           
  9961                           ;main.c: 62: if(soupAlign == 1){soupAlign = 2;}
  9962  001CBC  044D               	decf	_soupAlign,w,c
  9963  001CBE  104E               	iorwf	_soupAlign+1,w,c
  9964  001CC0  A4D8               	btfss	status,2,c
  9965  001CC2  D004               	goto	i2l4601
  9966  001CC4  0E00               	movlw	0
  9967  001CC6  6E4E               	movwf	_soupAlign+1,c
  9968  001CC8  0E02               	movlw	2
  9969  001CCA  D003               	goto	L17
  9970  001CCC                     i2l4601:
  9971                           
  9972                           ;main.c: 63: else{soupAlign = 1;}
  9973  001CCC  0E00               	movlw	0
  9974  001CCE  6E4E               	movwf	_soupAlign+1,c
  9975  001CD0  0E01               	movlw	1
  9976  001CD2                     L17:
  9977  001CD2  6E4D               	movwf	_soupAlign,c
  9978                           
  9979                           ;main.c: 64: soupI ++;
  9980  001CD4  4A4B               	infsnz	_soupI,f,c
  9981  001CD6  2A4C               	incf	_soupI+1,f,c
  9982  001CD8                     i2l4605:
  9983                           
  9984                           ;main.c: 65: }
  9985                           ;main.c: 66: TMR1ON = 0;
  9986  001CD8  90CD               	bcf	4045,0,c	;volatile
  9987                           
  9988                           ;main.c: 68: startTMR1();
  9989  001CDA  EC09  F016         	call	i2_startTMR1	;wreg free
  9990  001CDE                     i2l185:
  9991  001CDE  C01E  FFF5         	movff	??_handler+15,tablat
  9992  001CE2  C01D  FFF8         	movff	??_handler+14,tblptru
  9993  001CE6  C01C  FFF7         	movff	??_handler+13,tblptrh
  9994  001CEA  C01B  FFF6         	movff	??_handler+12,tblptrl
  9995  001CEE  C01A  FFF4         	movff	??_handler+11,prodh
  9996  001CF2  C019  FFF3         	movff	??_handler+10,prodl
  9997  001CF6  C018  FFDA         	movff	??_handler+9,fsr2h
  9998  001CFA  C017  FFD9         	movff	??_handler+8,fsr2l
  9999  001CFE  C016  FFE2         	movff	??_handler+7,fsr1h
 10000  001D02  C015  FFE1         	movff	??_handler+6,fsr1l
 10001  001D06  C014  FFEA         	movff	??_handler+5,fsr0h
 10002  001D0A  C013  FFE9         	movff	??_handler+4,fsr0l
 10003  001D0E  C012  FFFB         	movff	??_handler+3,pclatu
 10004  001D12  C011  FFFA         	movff	??_handler+2,pclath
 10005  001D16  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10006  001D18  0011               	retfie		f
 10007  001D1A                     __end_of_handler:
 10008                           	opt stack 0
 10009                           pclatu	equ	0xFFB
 10010                           pclath	equ	0xFFA
 10011                           tblptru	equ	0xFF8
 10012                           tblptrh	equ	0xFF7
 10013                           tblptrl	equ	0xFF6
 10014                           tablat	equ	0xFF5
 10015                           prodh	equ	0xFF4
 10016                           prodl	equ	0xFF3
 10017                           intcon	equ	0xFF2
 10018                           intcon2	equ	0xFF1
 10019                           postinc0	equ	0xFEE
 10020                           fsr0h	equ	0xFEA
 10021                           fsr0l	equ	0xFE9
 10022                           wreg	equ	0xFE8
 10023                           fsr1h	equ	0xFE2
 10024                           fsr1l	equ	0xFE1
 10025                           indf2	equ	0xFDF
 10026                           postinc2	equ	0xFDE
 10027                           postdec2	equ	0xFDD
 10028                           fsr2h	equ	0xFDA
 10029                           fsr2l	equ	0xFD9
 10030                           status	equ	0xFD8
 10031                           
 10032 ;; *************** function i2_updateS3 *****************
 10033 ;; Defined at:
 10034 ;;		line 191 in file "motors.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;  mode            2    0[COMRAM] int 
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;		None
 10039 ;; Return value:  Size  Location     Type
 10040 ;;                  1    wreg      void 
 10041 ;; Registers used:
 10042 ;;		wreg, status,2, status,0
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;Total ram usage:        3 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; This function calls:
 10055 ;;		Nothing
 10056 ;; This function is called by:
 10057 ;;		_handler
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           	psect	text38
 10062  001F0E                     __ptext38:
 10063                           	opt stack 0
 10064  001F0E                     i2_updateS3:
 10065                           	opt stack 25
 10066                           
 10067                           ;motors.c: 192: _delay((unsigned long)((5)*(32000000/4000.0)));
 10068                           
 10069                           ;incstack = 0
 10070  001F0E  0E34               	movlw	52
 10071  001F10  6E03               	movwf	??i2_updateS3& (0+255),c
 10072  001F12  0EF2               	movlw	242
 10073  001F14                     i2u826_47:
 10074  001F14  2EE8               	decfsz	wreg,f,c
 10075  001F16  D7FE               	bra	i2u826_47
 10076  001F18  2E03               	decfsz	??i2_updateS3& (0+255),f,c
 10077  001F1A  D7FC               	bra	i2u826_47
 10078                           
 10079                           ;motors.c: 194: if(mode == 0){
 10080  001F1C  5001               	movf	i2updateS3@mode,w,c
 10081  001F1E  1002               	iorwf	i2updateS3@mode+1,w,c
 10082  001F20  A4D8               	btfss	status,2,c
 10083  001F22  D005               	goto	i2l4457
 10084                           
 10085                           ;motors.c: 195: LATEbits.LATE2 = 0;
 10086  001F24  948D               	bcf	3981,2,c	;volatile
 10087                           
 10088                           ;motors.c: 196: LATEbits.LATE1 = 0;
 10089  001F26  928D               	bcf	3981,1,c	;volatile
 10090                           
 10091                           ;motors.c: 197: LATAbits.LATA4 = 0;
 10092  001F28  9889               	bcf	3977,4,c	;volatile
 10093                           
 10094                           ;motors.c: 198: LATDbits.LATD0 = 0;
 10095  001F2A  908C               	bcf	3980,0,c	;volatile
 10096                           
 10097                           ;motors.c: 199: }
 10098  001F2C  0012               	return	
 10099  001F2E                     i2l4457:
 10100                           
 10101                           ;motors.c: 200: else if(mode == 4){
 10102  001F2E  0E04               	movlw	4
 10103  001F30  1801               	xorwf	i2updateS3@mode,w,c
 10104  001F32  1002               	iorwf	i2updateS3@mode+1,w,c
 10105  001F34  B4D8               	btfsc	status,2,c
 10106  001F36  0012               	return	
 10107                           
 10108                           ;motors.c: 203: else if(mode == 3){
 10109                           
 10110                           ;motors.c: 202: }
 10111  001F38  0E03               	movlw	3
 10112  001F3A  1801               	xorwf	i2updateS3@mode,w,c
 10113  001F3C  1002               	iorwf	i2updateS3@mode+1,w,c
 10114  001F3E  A4D8               	btfss	status,2,c
 10115  001F40  D042               	goto	i2l4485
 10116                           
 10117                           ;motors.c: 204: t3++;
 10118  001F42  4A41               	infsnz	_t3,f,c
 10119  001F44  2A42               	incf	_t3+1,f,c
 10120                           
 10121                           ;motors.c: 205: if (t3>8) {t3=1;}
 10122  001F46  BE42               	btfsc	_t3+1,7,c
 10123  001F48  D00A               	goto	i2l4469
 10124  001F4A  5042               	movf	_t3+1,w,c
 10125  001F4C  E104               	bnz	i2u548_40
 10126  001F4E  0E09               	movlw	9
 10127  001F50  5C41               	subwf	_t3,w,c
 10128  001F52  A0D8               	btfss	status,0,c
 10129  001F54  D004               	goto	i2l4469
 10130  001F56                     i2u548_40:
 10131  001F56  0E00               	movlw	0
 10132  001F58  6E42               	movwf	_t3+1,c
 10133  001F5A  0E01               	movlw	1
 10134  001F5C  6E41               	movwf	_t3,c
 10135  001F5E                     i2l4469:
 10136                           
 10137                           ;motors.c: 206: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
 10138  001F5E  0441               	decf	_t3,w,c
 10139  001F60  1042               	iorwf	_t3+1,w,c
 10140  001F62  B4D8               	btfsc	status,2,c
 10141  001F64  D005               	goto	i2l606
 10142  001F66  0E08               	movlw	8
 10143  001F68  1841               	xorwf	_t3,w,c
 10144  001F6A  1042               	iorwf	_t3+1,w,c
 10145  001F6C  A4D8               	btfss	status,2,c
 10146  001F6E  D002               	goto	i2l604
 10147  001F70                     i2l606:
 10148  001F70  848D               	bsf	3981,2,c	;volatile
 10149  001F72  D001               	goto	i2l4473
 10150  001F74                     i2l604:
 10151                           
 10152                           ;motors.c: 207: else{LATEbits.LATE2 = 0;}
 10153  001F74  948D               	bcf	3981,2,c	;volatile
 10154  001F76                     i2l4473:
 10155                           
 10156                           ;motors.c: 208: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
 10157  001F76  0E02               	movlw	2
 10158  001F78  1841               	xorwf	_t3,w,c
 10159  001F7A  1042               	iorwf	_t3+1,w,c
 10160  001F7C  B4D8               	btfsc	status,2,c
 10161  001F7E  D005               	goto	i2l610
 10162  001F80  0E07               	movlw	7
 10163  001F82  1841               	xorwf	_t3,w,c
 10164  001F84  1042               	iorwf	_t3+1,w,c
 10165  001F86  A4D8               	btfss	status,2,c
 10166  001F88  D002               	goto	i2l608
 10167  001F8A                     i2l610:
 10168  001F8A  828D               	bsf	3981,1,c	;volatile
 10169  001F8C  D001               	goto	i2l4477
 10170  001F8E                     i2l608:
 10171                           
 10172                           ;motors.c: 209: else{LATEbits.LATE1 = 0;}
 10173  001F8E  928D               	bcf	3981,1,c	;volatile
 10174  001F90                     i2l4477:
 10175                           
 10176                           ;motors.c: 210: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
 10177  001F90  0E03               	movlw	3
 10178  001F92  1841               	xorwf	_t3,w,c
 10179  001F94  1042               	iorwf	_t3+1,w,c
 10180  001F96  B4D8               	btfsc	status,2,c
 10181  001F98  D005               	goto	i2l614
 10182  001F9A  0E06               	movlw	6
 10183  001F9C  1841               	xorwf	_t3,w,c
 10184  001F9E  1042               	iorwf	_t3+1,w,c
 10185  001FA0  A4D8               	btfss	status,2,c
 10186  001FA2  D002               	goto	i2l612
 10187  001FA4                     i2l614:
 10188  001FA4  8889               	bsf	3977,4,c	;volatile
 10189  001FA6  D001               	goto	i2l4481
 10190  001FA8                     i2l612:
 10191                           
 10192                           ;motors.c: 211: else{LATAbits.LATA4 = 0;}
 10193  001FA8  9889               	bcf	3977,4,c	;volatile
 10194  001FAA                     i2l4481:
 10195                           
 10196                           ;motors.c: 212: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
 10197  001FAA  0E04               	movlw	4
 10198  001FAC  1841               	xorwf	_t3,w,c
 10199  001FAE  1042               	iorwf	_t3+1,w,c
 10200  001FB0  B4D8               	btfsc	status,2,c
 10201  001FB2  D005               	goto	i2l618
 10202  001FB4  0E05               	movlw	5
 10203  001FB6  1841               	xorwf	_t3,w,c
 10204  001FB8  1042               	iorwf	_t3+1,w,c
 10205  001FBA  A4D8               	btfss	status,2,c
 10206  001FBC  D002               	goto	i2l616
 10207  001FBE                     i2l618:
 10208  001FBE  808C               	bsf	3980,0,c	;volatile
 10209  001FC0  0012               	return	
 10210  001FC2                     i2l616:
 10211                           
 10212                           ;motors.c: 213: else{LATDbits.LATD0 = 0;}
 10213  001FC2  908C               	bcf	3980,0,c	;volatile
 10214                           
 10215                           ;motors.c: 214: }
 10216  001FC4  0012               	return	
 10217  001FC6                     i2l4485:
 10218                           
 10219                           ;motors.c: 215: else if(mode == 5){
 10220  001FC6  0E05               	movlw	5
 10221  001FC8  1801               	xorwf	i2updateS3@mode,w,c
 10222  001FCA  1002               	iorwf	i2updateS3@mode+1,w,c
 10223  001FCC  A4D8               	btfss	status,2,c
 10224  001FCE  D042               	goto	i2l4509
 10225                           
 10226                           ;motors.c: 216: t3++;
 10227  001FD0  4A41               	infsnz	_t3,f,c
 10228  001FD2  2A42               	incf	_t3+1,f,c
 10229                           
 10230                           ;motors.c: 217: if (t3>8) {t3=1;}
 10231  001FD4  BE42               	btfsc	_t3+1,7,c
 10232  001FD6  D00A               	goto	i2l4493
 10233  001FD8  5042               	movf	_t3+1,w,c
 10234  001FDA  E104               	bnz	i2u558_40
 10235  001FDC  0E09               	movlw	9
 10236  001FDE  5C41               	subwf	_t3,w,c
 10237  001FE0  A0D8               	btfss	status,0,c
 10238  001FE2  D004               	goto	i2l4493
 10239  001FE4                     i2u558_40:
 10240  001FE4  0E00               	movlw	0
 10241  001FE6  6E42               	movwf	_t3+1,c
 10242  001FE8  0E01               	movlw	1
 10243  001FEA  6E41               	movwf	_t3,c
 10244  001FEC                     i2l4493:
 10245                           
 10246                           ;motors.c: 218: if (t3 == 1 || t3==8){LATAbits.LATA4 = 1;}
 10247  001FEC  0441               	decf	_t3,w,c
 10248  001FEE  1042               	iorwf	_t3+1,w,c
 10249  001FF0  B4D8               	btfsc	status,2,c
 10250  001FF2  D005               	goto	i2l625
 10251  001FF4  0E08               	movlw	8
 10252  001FF6  1841               	xorwf	_t3,w,c
 10253  001FF8  1042               	iorwf	_t3+1,w,c
 10254  001FFA  A4D8               	btfss	status,2,c
 10255  001FFC  D002               	goto	i2l623
 10256  001FFE                     i2l625:
 10257  001FFE  8889               	bsf	3977,4,c	;volatile
 10258  002000  D001               	goto	i2l4497
 10259  002002                     i2l623:
 10260                           
 10261                           ;motors.c: 219: else{LATAbits.LATA4 = 0;}
 10262  002002  9889               	bcf	3977,4,c	;volatile
 10263  002004                     i2l4497:
 10264                           
 10265                           ;motors.c: 220: if (t3 == 2 || t3==7){LATDbits.LATD0 = 1;}
 10266  002004  0E02               	movlw	2
 10267  002006  1841               	xorwf	_t3,w,c
 10268  002008  1042               	iorwf	_t3+1,w,c
 10269  00200A  B4D8               	btfsc	status,2,c
 10270  00200C  D005               	goto	i2l629
 10271  00200E  0E07               	movlw	7
 10272  002010  1841               	xorwf	_t3,w,c
 10273  002012  1042               	iorwf	_t3+1,w,c
 10274  002014  A4D8               	btfss	status,2,c
 10275  002016  D002               	goto	i2l627
 10276  002018                     i2l629:
 10277  002018  808C               	bsf	3980,0,c	;volatile
 10278  00201A  D001               	goto	i2l4501
 10279  00201C                     i2l627:
 10280                           
 10281                           ;motors.c: 221: else{LATDbits.LATD0 = 0;}
 10282  00201C  908C               	bcf	3980,0,c	;volatile
 10283  00201E                     i2l4501:
 10284                           
 10285                           ;motors.c: 222: if (t3 == 3 || t3==6){LATEbits.LATE2 = 1;}
 10286  00201E  0E03               	movlw	3
 10287  002020  1841               	xorwf	_t3,w,c
 10288  002022  1042               	iorwf	_t3+1,w,c
 10289  002024  B4D8               	btfsc	status,2,c
 10290  002026  D005               	goto	i2l633
 10291  002028  0E06               	movlw	6
 10292  00202A  1841               	xorwf	_t3,w,c
 10293  00202C  1042               	iorwf	_t3+1,w,c
 10294  00202E  A4D8               	btfss	status,2,c
 10295  002030  D002               	goto	i2l631
 10296  002032                     i2l633:
 10297  002032  848D               	bsf	3981,2,c	;volatile
 10298  002034  D001               	goto	i2l4505
 10299  002036                     i2l631:
 10300                           
 10301                           ;motors.c: 223: else{LATEbits.LATE2 = 0;}
 10302  002036  948D               	bcf	3981,2,c	;volatile
 10303  002038                     i2l4505:
 10304                           
 10305                           ;motors.c: 224: if (t3 == 4 || t3==5){LATEbits.LATE1 = 1;}
 10306  002038  0E04               	movlw	4
 10307  00203A  1841               	xorwf	_t3,w,c
 10308  00203C  1042               	iorwf	_t3+1,w,c
 10309  00203E  B4D8               	btfsc	status,2,c
 10310  002040  D005               	goto	i2l637
 10311  002042  0E05               	movlw	5
 10312  002044  1841               	xorwf	_t3,w,c
 10313  002046  1042               	iorwf	_t3+1,w,c
 10314  002048  A4D8               	btfss	status,2,c
 10315  00204A  D002               	goto	i2l635
 10316  00204C                     i2l637:
 10317  00204C  828D               	bsf	3981,1,c	;volatile
 10318  00204E  0012               	return	
 10319  002050                     i2l635:
 10320                           
 10321                           ;motors.c: 225: else{LATEbits.LATE1 = 0;}
 10322  002050  928D               	bcf	3981,1,c	;volatile
 10323                           
 10324                           ;motors.c: 226: }
 10325  002052  0012               	return	
 10326  002054                     i2l4509:
 10327                           
 10328                           ;motors.c: 227: else{
 10329                           ;motors.c: 228: if(mode == 1){
 10330  002054  0401               	decf	i2updateS3@mode,w,c
 10331  002056  1002               	iorwf	i2updateS3@mode+1,w,c
 10332  002058  A4D8               	btfss	status,2,c
 10333  00205A  D013               	goto	i2l4517
 10334                           
 10335                           ;motors.c: 229: s3 ++;
 10336  00205C  0100               	movlb	0	; () banked
 10337  00205E  4BBE               	infsnz	_s3& (0+255),f,b
 10338  002060  2BBF               	incf	(_s3+1)& (0+255),f,b
 10339                           
 10340                           ; BSR set to: 0
 10341                           ;motors.c: 230: if (s3>4) {s3=1;}
 10342  002062  0100               	movlb	0	; () banked
 10343  002064  BFBF               	btfsc	(_s3+1)& (0+255),7,b
 10344  002066  D025               	goto	i2l4525
 10345  002068  0100               	movlb	0	; () banked
 10346  00206A  51BF               	movf	(_s3+1)& (0+255),w,b
 10347  00206C  E105               	bnz	i2u568_40
 10348  00206E  0E05               	movlw	5
 10349  002070  0100               	movlb	0	; () banked
 10350  002072  5DBE               	subwf	_s3& (0+255),w,b
 10351  002074  A0D8               	btfss	status,0,c
 10352  002076  D01D               	goto	i2l4525
 10353  002078                     i2u568_40:
 10354                           
 10355                           ; BSR set to: 0
 10356  002078  0E00               	movlw	0
 10357  00207A  0100               	movlb	0	; () banked
 10358  00207C  6FBF               	movwf	(_s3+1)& (0+255),b
 10359  00207E  0E01               	movlw	1
 10360  002080  D017               	goto	L18
 10361  002082                     i2l4517:
 10362                           
 10363                           ;motors.c: 232: else if(mode == 2){
 10364  002082  0E02               	movlw	2
 10365  002084  1801               	xorwf	i2updateS3@mode,w,c
 10366  002086  1002               	iorwf	i2updateS3@mode+1,w,c
 10367  002088  A4D8               	btfss	status,2,c
 10368  00208A  D013               	goto	i2l4525
 10369                           
 10370                           ;motors.c: 233: s3 --;
 10371  00208C  0100               	movlb	0	; () banked
 10372  00208E  07BE               	decf	_s3& (0+255),f,b
 10373  002090  A0D8               	btfss	status,0,c
 10374  002092  07BF               	decf	(_s3+1)& (0+255),f,b
 10375                           
 10376                           ; BSR set to: 0
 10377                           ;motors.c: 234: if (s3<1) {s3=4;}
 10378  002094  0100               	movlb	0	; () banked
 10379  002096  BFBF               	btfsc	(_s3+1)& (0+255),7,b
 10380  002098  D007               	goto	i2l4523
 10381  00209A  0100               	movlb	0	; () banked
 10382  00209C  51BF               	movf	(_s3+1)& (0+255),w,b
 10383  00209E  E109               	bnz	i2l4525
 10384  0020A0  0100               	movlb	0	; () banked
 10385  0020A2  05BE               	decf	_s3& (0+255),w,b
 10386  0020A4  B0D8               	btfsc	status,0,c
 10387  0020A6  D005               	goto	i2l4525
 10388  0020A8                     i2l4523:
 10389                           
 10390                           ; BSR set to: 0
 10391  0020A8  0E00               	movlw	0
 10392  0020AA  0100               	movlb	0	; () banked
 10393  0020AC  6FBF               	movwf	(_s3+1)& (0+255),b
 10394  0020AE  0E04               	movlw	4
 10395  0020B0                     L18:
 10396  0020B0  6FBE               	movwf	_s3& (0+255),b
 10397  0020B2                     i2l4525:
 10398                           
 10399                           ;motors.c: 235: }
 10400                           ;motors.c: 236: if (s3 == 1){LATEbits.LATE2 = 1;}
 10401  0020B2  0100               	movlb	0	; () banked
 10402  0020B4  05BE               	decf	_s3& (0+255),w,b
 10403  0020B6  0100               	movlb	0	; () banked
 10404  0020B8  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10405  0020BA  A4D8               	btfss	status,2,c
 10406  0020BC  D002               	goto	i2l645
 10407                           
 10408                           ; BSR set to: 0
 10409  0020BE  848D               	bsf	3981,2,c	;volatile
 10410  0020C0  D001               	goto	i2l4529
 10411  0020C2                     i2l645:
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;motors.c: 237: else{LATEbits.LATE2 = 0;}
 10415  0020C2  948D               	bcf	3981,2,c	;volatile
 10416  0020C4                     i2l4529:
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;motors.c: 238: if (s3 == 2){LATEbits.LATE1 = 1;}
 10420  0020C4  0E02               	movlw	2
 10421  0020C6  0100               	movlb	0	; () banked
 10422  0020C8  19BE               	xorwf	_s3& (0+255),w,b
 10423  0020CA  0100               	movlb	0	; () banked
 10424  0020CC  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10425  0020CE  A4D8               	btfss	status,2,c
 10426  0020D0  D002               	goto	i2l647
 10427                           
 10428                           ; BSR set to: 0
 10429  0020D2  828D               	bsf	3981,1,c	;volatile
 10430  0020D4  D001               	goto	i2l4533
 10431  0020D6                     i2l647:
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;motors.c: 239: else{LATEbits.LATE1 = 0;}
 10435  0020D6  928D               	bcf	3981,1,c	;volatile
 10436  0020D8                     i2l4533:
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;motors.c: 240: if (s3 == 3){LATAbits.LATA4 = 1;}
 10440  0020D8  0E03               	movlw	3
 10441  0020DA  0100               	movlb	0	; () banked
 10442  0020DC  19BE               	xorwf	_s3& (0+255),w,b
 10443  0020DE  0100               	movlb	0	; () banked
 10444  0020E0  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10445  0020E2  A4D8               	btfss	status,2,c
 10446  0020E4  D002               	goto	i2l649
 10447                           
 10448                           ; BSR set to: 0
 10449  0020E6  8889               	bsf	3977,4,c	;volatile
 10450  0020E8  D001               	goto	i2l4537
 10451  0020EA                     i2l649:
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;motors.c: 241: else{LATAbits.LATA4 = 0;}
 10455  0020EA  9889               	bcf	3977,4,c	;volatile
 10456  0020EC                     i2l4537:
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;motors.c: 242: if (s3 == 4){LATDbits.LATD0 = 1;}
 10460  0020EC  0E04               	movlw	4
 10461  0020EE  0100               	movlb	0	; () banked
 10462  0020F0  19BE               	xorwf	_s3& (0+255),w,b
 10463  0020F2  0100               	movlb	0	; () banked
 10464  0020F4  11BF               	iorwf	(_s3+1)& (0+255),w,b
 10465  0020F6  A4D8               	btfss	status,2,c
 10466  0020F8  D002               	goto	i2l651
 10467                           
 10468                           ; BSR set to: 0
 10469  0020FA  808C               	bsf	3980,0,c	;volatile
 10470  0020FC  0012               	return	
 10471  0020FE                     i2l651:
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;motors.c: 243: else{LATDbits.LATD0 = 0;}
 10475  0020FE  908C               	bcf	3980,0,c	;volatile
 10476                           
 10477                           ; BSR set to: 0
 10478                           
 10479                           ; BSR set to: 0
 10480                           
 10481                           ; BSR set to: 0
 10482                           
 10483                           ; BSR set to: 0
 10484  002100  0012               	return	
 10485  002102                     __end_ofi2_updateS3:
 10486                           	opt stack 0
 10487                           pclatu	equ	0xFFB
 10488                           pclath	equ	0xFFA
 10489                           tblptru	equ	0xFF8
 10490                           tblptrh	equ	0xFF7
 10491                           tblptrl	equ	0xFF6
 10492                           tablat	equ	0xFF5
 10493                           prodh	equ	0xFF4
 10494                           prodl	equ	0xFF3
 10495                           intcon	equ	0xFF2
 10496                           intcon2	equ	0xFF1
 10497                           postinc0	equ	0xFEE
 10498                           fsr0h	equ	0xFEA
 10499                           fsr0l	equ	0xFE9
 10500                           wreg	equ	0xFE8
 10501                           fsr1h	equ	0xFE2
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           fsr2h	equ	0xFDA
 10507                           fsr2l	equ	0xFD9
 10508                           status	equ	0xFD8
 10509                           
 10510 ;; *************** function i2_updateS1 *****************
 10511 ;; Defined at:
 10512 ;;		line 75 in file "motors.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;  mode            2    0[COMRAM] int 
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;		None
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      void 
 10519 ;; Registers used:
 10520 ;;		wreg, status,2, status,0
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10526 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;Total ram usage:        3 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; This function calls:
 10533 ;;		Nothing
 10534 ;; This function is called by:
 10535 ;;		_handler
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           	psect	text39
 10540  001820                     __ptext39:
 10541                           	opt stack 0
 10542  001820                     i2_updateS1:
 10543                           	opt stack 25
 10544                           
 10545                           ;motors.c: 76: _delay((unsigned long)((5)*(32000000/4000.0)));
 10546                           
 10547                           ;incstack = 0
 10548  001820  0E34               	movlw	52
 10549  001822  6E03               	movwf	??i2_updateS1& (0+255),c
 10550  001824  0EF2               	movlw	242
 10551  001826                     i2u827_47:
 10552  001826  2EE8               	decfsz	wreg,f,c
 10553  001828  D7FE               	bra	i2u827_47
 10554  00182A  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10555  00182C  D7FC               	bra	i2u827_47
 10556                           
 10557                           ;motors.c: 78: if(mode == 0){
 10558  00182E  5001               	movf	i2updateS1@mode,w,c
 10559  001830  1002               	iorwf	i2updateS1@mode+1,w,c
 10560  001832  A4D8               	btfss	status,2,c
 10561  001834  D005               	goto	i2l4333
 10562                           
 10563                           ;motors.c: 79: LATDbits.LATD1 = 0;
 10564  001836  928C               	bcf	3980,1,c	;volatile
 10565                           
 10566                           ;motors.c: 80: LATBbits.LATB3 = 0;
 10567  001838  968A               	bcf	3978,3,c	;volatile
 10568                           
 10569                           ;motors.c: 81: LATBbits.LATB2 = 0;
 10570  00183A  948A               	bcf	3978,2,c	;volatile
 10571                           
 10572                           ;motors.c: 82: LATBbits.LATB0 = 0;
 10573  00183C  908A               	bcf	3978,0,c	;volatile
 10574                           
 10575                           ;motors.c: 83: }
 10576  00183E  0012               	return	
 10577  001840                     i2l4333:
 10578                           
 10579                           ;motors.c: 84: else if(mode == 3){
 10580  001840  0E03               	movlw	3
 10581  001842  1801               	xorwf	i2updateS1@mode,w,c
 10582  001844  1002               	iorwf	i2updateS1@mode+1,w,c
 10583  001846  A4D8               	btfss	status,2,c
 10584  001848  D049               	goto	i2l4359
 10585                           
 10586                           ;motors.c: 85: t++;
 10587  00184A  4A45               	infsnz	_t,f,c
 10588  00184C  2A46               	incf	_t+1,f,c
 10589                           
 10590                           ;motors.c: 86: if (t>8) {t=1;}
 10591  00184E  BE46               	btfsc	_t+1,7,c
 10592  001850  D00A               	goto	i2l4341
 10593  001852  5046               	movf	_t+1,w,c
 10594  001854  E104               	bnz	i2u507_40
 10595  001856  0E09               	movlw	9
 10596  001858  5C45               	subwf	_t,w,c
 10597  00185A  A0D8               	btfss	status,0,c
 10598  00185C  D004               	goto	i2l4341
 10599  00185E                     i2u507_40:
 10600  00185E  0E00               	movlw	0
 10601  001860  6E46               	movwf	_t+1,c
 10602  001862  0E01               	movlw	1
 10603  001864  6E45               	movwf	_t,c
 10604  001866                     i2l4341:
 10605                           
 10606                           ;motors.c: 87: _delay((unsigned long)((5)*(32000000/4000.0)));
 10607  001866  0E34               	movlw	52
 10608  001868  6E03               	movwf	??i2_updateS1& (0+255),c
 10609  00186A  0EF2               	movlw	242
 10610  00186C                     i2u828_47:
 10611  00186C  2EE8               	decfsz	wreg,f,c
 10612  00186E  D7FE               	bra	i2u828_47
 10613  001870  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10614  001872  D7FC               	bra	i2u828_47
 10615                           
 10616                           ;motors.c: 88: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
 10617  001874  0445               	decf	_t,w,c
 10618  001876  1046               	iorwf	_t+1,w,c
 10619  001878  B4D8               	btfsc	status,2,c
 10620  00187A  D005               	goto	i2l493
 10621  00187C  0E08               	movlw	8
 10622  00187E  1845               	xorwf	_t,w,c
 10623  001880  1046               	iorwf	_t+1,w,c
 10624  001882  A4D8               	btfss	status,2,c
 10625  001884  D002               	goto	i2l491
 10626  001886                     i2l493:
 10627  001886  828C               	bsf	3980,1,c	;volatile
 10628  001888  D001               	goto	i2l4347
 10629  00188A                     i2l491:
 10630                           
 10631                           ;motors.c: 89: else{LATDbits.LATD1 = 0;}
 10632  00188A  928C               	bcf	3980,1,c	;volatile
 10633  00188C                     i2l4347:
 10634                           
 10635                           ;motors.c: 90: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
 10636  00188C  0E02               	movlw	2
 10637  00188E  1845               	xorwf	_t,w,c
 10638  001890  1046               	iorwf	_t+1,w,c
 10639  001892  B4D8               	btfsc	status,2,c
 10640  001894  D005               	goto	i2l497
 10641  001896  0E07               	movlw	7
 10642  001898  1845               	xorwf	_t,w,c
 10643  00189A  1046               	iorwf	_t+1,w,c
 10644  00189C  A4D8               	btfss	status,2,c
 10645  00189E  D002               	goto	i2l495
 10646  0018A0                     i2l497:
 10647  0018A0  868A               	bsf	3978,3,c	;volatile
 10648  0018A2  D001               	goto	i2l4351
 10649  0018A4                     i2l495:
 10650                           
 10651                           ;motors.c: 91: else{LATBbits.LATB3 = 0;}
 10652  0018A4  968A               	bcf	3978,3,c	;volatile
 10653  0018A6                     i2l4351:
 10654                           
 10655                           ;motors.c: 92: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
 10656  0018A6  0E03               	movlw	3
 10657  0018A8  1845               	xorwf	_t,w,c
 10658  0018AA  1046               	iorwf	_t+1,w,c
 10659  0018AC  B4D8               	btfsc	status,2,c
 10660  0018AE  D005               	goto	i2l501
 10661  0018B0  0E06               	movlw	6
 10662  0018B2  1845               	xorwf	_t,w,c
 10663  0018B4  1046               	iorwf	_t+1,w,c
 10664  0018B6  A4D8               	btfss	status,2,c
 10665  0018B8  D002               	goto	i2l499
 10666  0018BA                     i2l501:
 10667  0018BA  848A               	bsf	3978,2,c	;volatile
 10668  0018BC  D001               	goto	i2l4355
 10669  0018BE                     i2l499:
 10670                           
 10671                           ;motors.c: 93: else{LATBbits.LATB2 = 0;}
 10672  0018BE  948A               	bcf	3978,2,c	;volatile
 10673  0018C0                     i2l4355:
 10674                           
 10675                           ;motors.c: 94: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
 10676  0018C0  0E04               	movlw	4
 10677  0018C2  1845               	xorwf	_t,w,c
 10678  0018C4  1046               	iorwf	_t+1,w,c
 10679  0018C6  B4D8               	btfsc	status,2,c
 10680  0018C8  D005               	goto	i2l505
 10681  0018CA  0E05               	movlw	5
 10682  0018CC  1845               	xorwf	_t,w,c
 10683  0018CE  1046               	iorwf	_t+1,w,c
 10684  0018D0  A4D8               	btfss	status,2,c
 10685  0018D2  D002               	goto	i2l503
 10686  0018D4                     i2l505:
 10687  0018D4  808A               	bsf	3978,0,c	;volatile
 10688  0018D6  0012               	return	
 10689  0018D8                     i2l503:
 10690                           
 10691                           ;motors.c: 95: else{LATBbits.LATB0 = 0;}
 10692  0018D8  908A               	bcf	3978,0,c	;volatile
 10693                           
 10694                           ;motors.c: 96: }
 10695  0018DA  0012               	return	
 10696  0018DC                     i2l4359:
 10697                           
 10698                           ;motors.c: 97: else if(mode == 5){
 10699  0018DC  0E05               	movlw	5
 10700  0018DE  1801               	xorwf	i2updateS1@mode,w,c
 10701  0018E0  1002               	iorwf	i2updateS1@mode+1,w,c
 10702  0018E2  A4D8               	btfss	status,2,c
 10703  0018E4  D049               	goto	i2l4385
 10704                           
 10705                           ;motors.c: 98: t++;
 10706  0018E6  4A45               	infsnz	_t,f,c
 10707  0018E8  2A46               	incf	_t+1,f,c
 10708                           
 10709                           ;motors.c: 99: if (t>8) {t=1;}
 10710  0018EA  BE46               	btfsc	_t+1,7,c
 10711  0018EC  D00A               	goto	i2l4367
 10712  0018EE  5046               	movf	_t+1,w,c
 10713  0018F0  E104               	bnz	i2u517_40
 10714  0018F2  0E09               	movlw	9
 10715  0018F4  5C45               	subwf	_t,w,c
 10716  0018F6  A0D8               	btfss	status,0,c
 10717  0018F8  D004               	goto	i2l4367
 10718  0018FA                     i2u517_40:
 10719  0018FA  0E00               	movlw	0
 10720  0018FC  6E46               	movwf	_t+1,c
 10721  0018FE  0E01               	movlw	1
 10722  001900  6E45               	movwf	_t,c
 10723  001902                     i2l4367:
 10724                           
 10725                           ;motors.c: 100: _delay((unsigned long)((5)*(32000000/4000.0)));
 10726  001902  0E34               	movlw	52
 10727  001904  6E03               	movwf	??i2_updateS1& (0+255),c
 10728  001906  0EF2               	movlw	242
 10729  001908                     i2u829_47:
 10730  001908  2EE8               	decfsz	wreg,f,c
 10731  00190A  D7FE               	bra	i2u829_47
 10732  00190C  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10733  00190E  D7FC               	bra	i2u829_47
 10734                           
 10735                           ;motors.c: 101: if (t == 1 || t==8){LATBbits.LATB2 = 1;}
 10736  001910  0445               	decf	_t,w,c
 10737  001912  1046               	iorwf	_t+1,w,c
 10738  001914  B4D8               	btfsc	status,2,c
 10739  001916  D005               	goto	i2l512
 10740  001918  0E08               	movlw	8
 10741  00191A  1845               	xorwf	_t,w,c
 10742  00191C  1046               	iorwf	_t+1,w,c
 10743  00191E  A4D8               	btfss	status,2,c
 10744  001920  D002               	goto	i2l510
 10745  001922                     i2l512:
 10746  001922  848A               	bsf	3978,2,c	;volatile
 10747  001924  D001               	goto	i2l4373
 10748  001926                     i2l510:
 10749                           
 10750                           ;motors.c: 102: else{LATBbits.LATB2 = 0;}
 10751  001926  948A               	bcf	3978,2,c	;volatile
 10752  001928                     i2l4373:
 10753                           
 10754                           ;motors.c: 103: if (t == 2 || t==7){LATBbits.LATB0 = 1;}
 10755  001928  0E02               	movlw	2
 10756  00192A  1845               	xorwf	_t,w,c
 10757  00192C  1046               	iorwf	_t+1,w,c
 10758  00192E  B4D8               	btfsc	status,2,c
 10759  001930  D005               	goto	i2l516
 10760  001932  0E07               	movlw	7
 10761  001934  1845               	xorwf	_t,w,c
 10762  001936  1046               	iorwf	_t+1,w,c
 10763  001938  A4D8               	btfss	status,2,c
 10764  00193A  D002               	goto	i2l514
 10765  00193C                     i2l516:
 10766  00193C  808A               	bsf	3978,0,c	;volatile
 10767  00193E  D001               	goto	i2l4377
 10768  001940                     i2l514:
 10769                           
 10770                           ;motors.c: 104: else{LATBbits.LATB0 = 0;}
 10771  001940  908A               	bcf	3978,0,c	;volatile
 10772  001942                     i2l4377:
 10773                           
 10774                           ;motors.c: 105: if (t == 3 || t==6){LATDbits.LATD1 = 1;}
 10775  001942  0E03               	movlw	3
 10776  001944  1845               	xorwf	_t,w,c
 10777  001946  1046               	iorwf	_t+1,w,c
 10778  001948  B4D8               	btfsc	status,2,c
 10779  00194A  D005               	goto	i2l520
 10780  00194C  0E06               	movlw	6
 10781  00194E  1845               	xorwf	_t,w,c
 10782  001950  1046               	iorwf	_t+1,w,c
 10783  001952  A4D8               	btfss	status,2,c
 10784  001954  D002               	goto	i2l518
 10785  001956                     i2l520:
 10786  001956  828C               	bsf	3980,1,c	;volatile
 10787  001958  D001               	goto	i2l4381
 10788  00195A                     i2l518:
 10789                           
 10790                           ;motors.c: 106: else{LATDbits.LATD1 = 0;}
 10791  00195A  928C               	bcf	3980,1,c	;volatile
 10792  00195C                     i2l4381:
 10793                           
 10794                           ;motors.c: 107: if (t == 4 || t==5){LATBbits.LATB3 = 1;}
 10795  00195C  0E04               	movlw	4
 10796  00195E  1845               	xorwf	_t,w,c
 10797  001960  1046               	iorwf	_t+1,w,c
 10798  001962  B4D8               	btfsc	status,2,c
 10799  001964  D005               	goto	i2l524
 10800  001966  0E05               	movlw	5
 10801  001968  1845               	xorwf	_t,w,c
 10802  00196A  1046               	iorwf	_t+1,w,c
 10803  00196C  A4D8               	btfss	status,2,c
 10804  00196E  D002               	goto	i2l522
 10805  001970                     i2l524:
 10806  001970  868A               	bsf	3978,3,c	;volatile
 10807  001972  0012               	return	
 10808  001974                     i2l522:
 10809                           
 10810                           ;motors.c: 108: else{LATBbits.LATB3 = 0;}
 10811  001974  968A               	bcf	3978,3,c	;volatile
 10812                           
 10813                           ;motors.c: 109: }
 10814  001976  0012               	return	
 10815  001978                     i2l4385:
 10816                           
 10817                           ;motors.c: 110: else if(mode == 4){
 10818  001978  0E04               	movlw	4
 10819  00197A  1801               	xorwf	i2updateS1@mode,w,c
 10820  00197C  1002               	iorwf	i2updateS1@mode+1,w,c
 10821  00197E  B4D8               	btfsc	status,2,c
 10822  001980  0012               	return	
 10823                           
 10824                           ;motors.c: 113: else{
 10825                           ;motors.c: 114: _delay((unsigned long)((10)*(32000000/4000.0)));
 10826                           
 10827                           ;motors.c: 112: }
 10828  001982  0E68               	movlw	104
 10829  001984  6E03               	movwf	??i2_updateS1& (0+255),c
 10830  001986  0EE4               	movlw	228
 10831  001988                     i2u830_47:
 10832  001988  2EE8               	decfsz	wreg,f,c
 10833  00198A  D7FE               	bra	i2u830_47
 10834  00198C  2E03               	decfsz	??i2_updateS1& (0+255),f,c
 10835  00198E  D7FC               	bra	i2u830_47
 10836  001990  D000               	nop2	
 10837                           
 10838                           ;motors.c: 116: if(mode == 1 || mode == 5){
 10839  001992  0401               	decf	i2updateS1@mode,w,c
 10840  001994  1002               	iorwf	i2updateS1@mode+1,w,c
 10841  001996  B4D8               	btfsc	status,2,c
 10842  001998  D005               	goto	i2l4395
 10843  00199A  0E05               	movlw	5
 10844  00199C  1801               	xorwf	i2updateS1@mode,w,c
 10845  00199E  1002               	iorwf	i2updateS1@mode+1,w,c
 10846  0019A0  A4D8               	btfss	status,2,c
 10847  0019A2  D013               	goto	i2l4401
 10848  0019A4                     i2l4395:
 10849                           
 10850                           ;motors.c: 117: s1 ++;
 10851  0019A4  0100               	movlb	0	; () banked
 10852  0019A6  4BC0               	infsnz	_s1& (0+255),f,b
 10853  0019A8  2BC1               	incf	(_s1+1)& (0+255),f,b
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;motors.c: 118: if (s1>4) {s1=1;}
 10857  0019AA  0100               	movlb	0	; () banked
 10858  0019AC  BFC1               	btfsc	(_s1+1)& (0+255),7,b
 10859  0019AE  D02A               	goto	i2l4411
 10860  0019B0  0100               	movlb	0	; () banked
 10861  0019B2  51C1               	movf	(_s1+1)& (0+255),w,b
 10862  0019B4  E105               	bnz	i2u529_40
 10863  0019B6  0E05               	movlw	5
 10864  0019B8  0100               	movlb	0	; () banked
 10865  0019BA  5DC0               	subwf	_s1& (0+255),w,b
 10866  0019BC  A0D8               	btfss	status,0,c
 10867  0019BE  D022               	goto	i2l4411
 10868  0019C0                     i2u529_40:
 10869                           
 10870                           ; BSR set to: 0
 10871  0019C0  0E00               	movlw	0
 10872  0019C2  0100               	movlb	0	; () banked
 10873  0019C4  6FC1               	movwf	(_s1+1)& (0+255),b
 10874  0019C6  0E01               	movlw	1
 10875  0019C8  D01C               	goto	L19
 10876  0019CA                     i2l4401:
 10877                           
 10878                           ;motors.c: 121: else if(mode == 2 || mode==6){
 10879  0019CA  0E02               	movlw	2
 10880  0019CC  1801               	xorwf	i2updateS1@mode,w,c
 10881  0019CE  1002               	iorwf	i2updateS1@mode+1,w,c
 10882  0019D0  B4D8               	btfsc	status,2,c
 10883  0019D2  D005               	goto	i2l4405
 10884  0019D4  0E06               	movlw	6
 10885  0019D6  1801               	xorwf	i2updateS1@mode,w,c
 10886  0019D8  1002               	iorwf	i2updateS1@mode+1,w,c
 10887  0019DA  A4D8               	btfss	status,2,c
 10888  0019DC  D013               	goto	i2l4411
 10889  0019DE                     i2l4405:
 10890                           
 10891                           ;motors.c: 122: s1 --;
 10892  0019DE  0100               	movlb	0	; () banked
 10893  0019E0  07C0               	decf	_s1& (0+255),f,b
 10894  0019E2  A0D8               	btfss	status,0,c
 10895  0019E4  07C1               	decf	(_s1+1)& (0+255),f,b
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;motors.c: 123: if (s1<1) {s1=4;}
 10899  0019E6  0100               	movlb	0	; () banked
 10900  0019E8  BFC1               	btfsc	(_s1+1)& (0+255),7,b
 10901  0019EA  D007               	goto	i2l4409
 10902  0019EC  0100               	movlb	0	; () banked
 10903  0019EE  51C1               	movf	(_s1+1)& (0+255),w,b
 10904  0019F0  E109               	bnz	i2l4411
 10905  0019F2  0100               	movlb	0	; () banked
 10906  0019F4  05C0               	decf	_s1& (0+255),w,b
 10907  0019F6  B0D8               	btfsc	status,0,c
 10908  0019F8  D005               	goto	i2l4411
 10909  0019FA                     i2l4409:
 10910                           
 10911                           ; BSR set to: 0
 10912  0019FA  0E00               	movlw	0
 10913  0019FC  0100               	movlb	0	; () banked
 10914  0019FE  6FC1               	movwf	(_s1+1)& (0+255),b
 10915  001A00  0E04               	movlw	4
 10916  001A02                     L19:
 10917  001A02  6FC0               	movwf	_s1& (0+255),b
 10918  001A04                     i2l4411:
 10919                           
 10920                           ;motors.c: 124: }
 10921                           ;motors.c: 126: if(mode == 1 || mode ==2){
 10922  001A04  0401               	decf	i2updateS1@mode,w,c
 10923  001A06  1002               	iorwf	i2updateS1@mode+1,w,c
 10924  001A08  B4D8               	btfsc	status,2,c
 10925  001A0A  D005               	goto	i2l4415
 10926  001A0C  0E02               	movlw	2
 10927  001A0E  1801               	xorwf	i2updateS1@mode,w,c
 10928  001A10  1002               	iorwf	i2updateS1@mode+1,w,c
 10929  001A12  A4D8               	btfss	status,2,c
 10930  001A14  D027               	goto	i2l4431
 10931  001A16                     i2l4415:
 10932                           
 10933                           ;motors.c: 127: if (s1 == 1){LATDbits.LATD1 = 1;}
 10934  001A16  0100               	movlb	0	; () banked
 10935  001A18  05C0               	decf	_s1& (0+255),w,b
 10936  001A1A  0100               	movlb	0	; () banked
 10937  001A1C  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10938  001A1E  A4D8               	btfss	status,2,c
 10939  001A20  D002               	goto	i2l541
 10940                           
 10941                           ; BSR set to: 0
 10942  001A22  828C               	bsf	3980,1,c	;volatile
 10943  001A24  D001               	goto	i2l4419
 10944  001A26                     i2l541:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;motors.c: 128: else{LATDbits.LATD1 = 0;}
 10948  001A26  928C               	bcf	3980,1,c	;volatile
 10949  001A28                     i2l4419:
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;motors.c: 129: if (s1 == 2){LATBbits.LATB3 = 1;}
 10953  001A28  0E02               	movlw	2
 10954  001A2A  0100               	movlb	0	; () banked
 10955  001A2C  19C0               	xorwf	_s1& (0+255),w,b
 10956  001A2E  0100               	movlb	0	; () banked
 10957  001A30  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10958  001A32  A4D8               	btfss	status,2,c
 10959  001A34  D002               	goto	i2l543
 10960                           
 10961                           ; BSR set to: 0
 10962  001A36  868A               	bsf	3978,3,c	;volatile
 10963  001A38  D001               	goto	i2l4423
 10964  001A3A                     i2l543:
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;motors.c: 130: else{LATBbits.LATB3 = 0;}
 10968  001A3A  968A               	bcf	3978,3,c	;volatile
 10969  001A3C                     i2l4423:
 10970                           
 10971                           ; BSR set to: 0
 10972                           ;motors.c: 131: if (s1 == 3){LATBbits.LATB2 = 1;}
 10973  001A3C  0E03               	movlw	3
 10974  001A3E  0100               	movlb	0	; () banked
 10975  001A40  19C0               	xorwf	_s1& (0+255),w,b
 10976  001A42  0100               	movlb	0	; () banked
 10977  001A44  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10978  001A46  A4D8               	btfss	status,2,c
 10979  001A48  D002               	goto	i2l545
 10980                           
 10981                           ; BSR set to: 0
 10982  001A4A  848A               	bsf	3978,2,c	;volatile
 10983  001A4C  D001               	goto	i2l4427
 10984  001A4E                     i2l545:
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;motors.c: 132: else{LATBbits.LATB2 = 0;}
 10988  001A4E  948A               	bcf	3978,2,c	;volatile
 10989  001A50                     i2l4427:
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;motors.c: 133: if (s1 == 4){LATBbits.LATB0 = 1;}
 10993  001A50  0E04               	movlw	4
 10994  001A52  0100               	movlb	0	; () banked
 10995  001A54  19C0               	xorwf	_s1& (0+255),w,b
 10996  001A56  0100               	movlb	0	; () banked
 10997  001A58  11C1               	iorwf	(_s1+1)& (0+255),w,b
 10998  001A5A  A4D8               	btfss	status,2,c
 10999  001A5C  D002               	goto	i2l547
 11000                           
 11001                           ; BSR set to: 0
 11002  001A5E  808A               	bsf	3978,0,c	;volatile
 11003  001A60  D001               	goto	i2l4431
 11004  001A62                     i2l547:
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;motors.c: 134: else{LATBbits.LATB0 = 0;}
 11008  001A62  908A               	bcf	3978,0,c	;volatile
 11009  001A64                     i2l4431:
 11010                           
 11011                           ;motors.c: 135: }
 11012                           ;motors.c: 136: if(mode == 5 || mode ==6){
 11013  001A64  0E05               	movlw	5
 11014  001A66  1801               	xorwf	i2updateS1@mode,w,c
 11015  001A68  1002               	iorwf	i2updateS1@mode+1,w,c
 11016  001A6A  B4D8               	btfsc	status,2,c
 11017  001A6C  D005               	goto	i2l4435
 11018  001A6E  0E06               	movlw	6
 11019  001A70  1801               	xorwf	i2updateS1@mode,w,c
 11020  001A72  1002               	iorwf	i2updateS1@mode+1,w,c
 11021  001A74  A4D8               	btfss	status,2,c
 11022  001A76  0012               	return	
 11023  001A78                     i2l4435:
 11024                           
 11025                           ;motors.c: 137: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
 11026  001A78  0100               	movlb	0	; () banked
 11027  001A7A  05C0               	decf	_s1& (0+255),w,b
 11028  001A7C  0100               	movlb	0	; () banked
 11029  001A7E  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11030  001A80  A4D8               	btfss	status,2,c
 11031  001A82  D004               	goto	i2l4439
 11032                           
 11033                           ; BSR set to: 0
 11034  001A84  828C               	bsf	3980,1,c	;volatile
 11035  001A86  868A               	bsf	3978,3,c	;volatile
 11036  001A88  948A               	bcf	3978,2,c	;volatile
 11037  001A8A  908A               	bcf	3978,0,c	;volatile
 11038  001A8C                     i2l4439:
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;motors.c: 138: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
 11042  001A8C  0E02               	movlw	2
 11043  001A8E  0100               	movlb	0	; () banked
 11044  001A90  19C0               	xorwf	_s1& (0+255),w,b
 11045  001A92  0100               	movlb	0	; () banked
 11046  001A94  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11047  001A96  A4D8               	btfss	status,2,c
 11048  001A98  D004               	goto	i2l4443
 11049                           
 11050                           ; BSR set to: 0
 11051  001A9A  928C               	bcf	3980,1,c	;volatile
 11052  001A9C  868A               	bsf	3978,3,c	;volatile
 11053  001A9E  848A               	bsf	3978,2,c	;volatile
 11054  001AA0  908A               	bcf	3978,0,c	;volatile
 11055  001AA2                     i2l4443:
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;motors.c: 139: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
 11059  001AA2  0E03               	movlw	3
 11060  001AA4  0100               	movlb	0	; () banked
 11061  001AA6  19C0               	xorwf	_s1& (0+255),w,b
 11062  001AA8  0100               	movlb	0	; () banked
 11063  001AAA  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11064  001AAC  A4D8               	btfss	status,2,c
 11065  001AAE  D004               	goto	i2l4447
 11066                           
 11067                           ; BSR set to: 0
 11068  001AB0  928C               	bcf	3980,1,c	;volatile
 11069  001AB2  968A               	bcf	3978,3,c	;volatile
 11070  001AB4  848A               	bsf	3978,2,c	;volatile
 11071  001AB6  808A               	bsf	3978,0,c	;volatile
 11072  001AB8                     i2l4447:
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;motors.c: 140: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
 11076  001AB8  0E04               	movlw	4
 11077  001ABA  0100               	movlb	0	; () banked
 11078  001ABC  19C0               	xorwf	_s1& (0+255),w,b
 11079  001ABE  0100               	movlb	0	; () banked
 11080  001AC0  11C1               	iorwf	(_s1+1)& (0+255),w,b
 11081  001AC2  A4D8               	btfss	status,2,c
 11082  001AC4  0012               	return	
 11083                           
 11084                           ; BSR set to: 0
 11085  001AC6  828C               	bsf	3980,1,c	;volatile
 11086  001AC8  968A               	bcf	3978,3,c	;volatile
 11087  001ACA  948A               	bcf	3978,2,c	;volatile
 11088  001ACC  808A               	bsf	3978,0,c	;volatile
 11089                           
 11090                           ; BSR set to: 0
 11091                           
 11092                           ; BSR set to: 0
 11093                           
 11094                           ; BSR set to: 0
 11095                           
 11096                           ; BSR set to: 0
 11097                           
 11098                           ; BSR set to: 0
 11099  001ACE  0012               	return	
 11100  001AD0                     __end_ofi2_updateS1:
 11101                           	opt stack 0
 11102                           pclatu	equ	0xFFB
 11103                           pclath	equ	0xFFA
 11104                           tblptru	equ	0xFF8
 11105                           tblptrh	equ	0xFF7
 11106                           tblptrl	equ	0xFF6
 11107                           tablat	equ	0xFF5
 11108                           prodh	equ	0xFF4
 11109                           prodl	equ	0xFF3
 11110                           intcon	equ	0xFF2
 11111                           intcon2	equ	0xFF1
 11112                           postinc0	equ	0xFEE
 11113                           fsr0h	equ	0xFEA
 11114                           fsr0l	equ	0xFE9
 11115                           wreg	equ	0xFE8
 11116                           fsr1h	equ	0xFE2
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function i2_startTMR1 *****************
 11126 ;; Defined at:
 11127 ;;		line 24 in file "logic.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;		None
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;		None
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  2    0[None  ] int 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;Total ram usage:        0 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_handler
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text40
 11155  002C12                     __ptext40:
 11156                           	opt stack 0
 11157  002C12                     i2_startTMR1:
 11158                           	opt stack 25
 11159                           
 11160                           ;logic.c: 25: T1CON = 0b10110000;
 11161                           
 11162                           ;incstack = 0
 11163  002C12  0EB0               	movlw	176
 11164  002C14  6ECD               	movwf	4045,c	;volatile
 11165                           
 11166                           ;logic.c: 26: TMR1H = 0b11101001;
 11167  002C16  0EE9               	movlw	233
 11168  002C18  6ECF               	movwf	4047,c	;volatile
 11169                           
 11170                           ;logic.c: 27: TMR1L = 0b01011011;
 11171  002C1A  0E5B               	movlw	91
 11172  002C1C  6ECE               	movwf	4046,c	;volatile
 11173                           
 11174                           ;logic.c: 28: TMR1ON = 1;
 11175  002C1E  80CD               	bsf	4045,0,c	;volatile
 11176  002C20  0012               	return		;funcret
 11177  002C22                     __end_ofi2_startTMR1:
 11178                           	opt stack 0
 11179                           pclatu	equ	0xFFB
 11180                           pclath	equ	0xFFA
 11181                           tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           intcon2	equ	0xFF1
 11189                           postinc0	equ	0xFEE
 11190                           fsr0h	equ	0xFEA
 11191                           fsr0l	equ	0xFE9
 11192                           wreg	equ	0xFE8
 11193                           fsr1h	equ	0xFE2
 11194                           fsr1l	equ	0xFE1
 11195                           indf2	equ	0xFDF
 11196                           postinc2	equ	0xFDE
 11197                           postdec2	equ	0xFDD
 11198                           fsr2h	equ	0xFDA
 11199                           fsr2l	equ	0xFD9
 11200                           status	equ	0xFD8
 11201                           
 11202 ;; *************** function i2___wmul *****************
 11203 ;; Defined at:
 11204 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;  multiplier      2    0[COMRAM] unsigned int 
 11207 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11208 ;; Auto vars:     Size  Location     Type
 11209 ;;  __wmul          2    4[COMRAM] unsigned int 
 11210 ;; Return value:  Size  Location     Type
 11211 ;;                  2    0[COMRAM] unsigned int 
 11212 ;; Registers used:
 11213 ;;		wreg, status,2, status,0, prodl, prodh
 11214 ;; Tracked objects:
 11215 ;;		On entry : 0/0
 11216 ;;		On exit  : 0/0
 11217 ;;		Unchanged: 0/0
 11218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11219 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;Total ram usage:        6 bytes
 11224 ;; Hardware stack levels used:    1
 11225 ;; This function calls:
 11226 ;;		Nothing
 11227 ;; This function is called by:
 11228 ;;		_handler
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           	psect	text41
 11233  002B5C                     __ptext41:
 11234                           	opt stack 0
 11235  002B5C                     i2___wmul:
 11236                           	opt stack 25
 11237                           
 11238                           ;incstack = 0
 11239  002B5C  5001               	movf	i2___wmul@multiplier,w,c
 11240  002B5E  0203               	mulwf	i2___wmul@multiplicand,c
 11241  002B60  CFF3 F005          	movff	prodl,i2___wmul@product
 11242  002B64  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11243  002B68  5001               	movf	i2___wmul@multiplier,w,c
 11244  002B6A  0204               	mulwf	i2___wmul@multiplicand+1,c
 11245  002B6C  50F3               	movf	prodl,w,c
 11246  002B6E  2606               	addwf	i2___wmul@product+1,f,c
 11247  002B70  5002               	movf	i2___wmul@multiplier+1,w,c
 11248  002B72  0203               	mulwf	i2___wmul@multiplicand,c
 11249  002B74  50F3               	movf	prodl,w,c
 11250  002B76  2606               	addwf	i2___wmul@product+1,f,c
 11251  002B78  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11252  002B7C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11253  002B80  0012               	return	
 11254  002B82                     __end_ofi2___wmul:
 11255                           	opt stack 0
 11256                           pclatu	equ	0xFFB
 11257                           pclath	equ	0xFFA
 11258                           tblptru	equ	0xFF8
 11259                           tblptrh	equ	0xFF7
 11260                           tblptrl	equ	0xFF6
 11261                           tablat	equ	0xFF5
 11262                           prodh	equ	0xFF4
 11263                           prodl	equ	0xFF3
 11264                           intcon	equ	0xFF2
 11265                           intcon2	equ	0xFF1
 11266                           postinc0	equ	0xFEE
 11267                           fsr0h	equ	0xFEA
 11268                           fsr0l	equ	0xFE9
 11269                           wreg	equ	0xFE8
 11270                           fsr1h	equ	0xFE2
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           fsr2h	equ	0xFDA
 11276                           fsr2l	equ	0xFD9
 11277                           status	equ	0xFD8
 11278                           
 11279 ;; *************** function _updateS2 *****************
 11280 ;; Defined at:
 11281 ;;		line 146 in file "motors.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;  mode            2    0[COMRAM] int 
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;		None
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  1    wreg      void 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11295 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;Total ram usage:        3 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; This function calls:
 11302 ;;		Nothing
 11303 ;; This function is called by:
 11304 ;;		_handler
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text42
 11309  0023F6                     __ptext42:
 11310                           	opt stack 0
 11311  0023F6                     _updateS2:
 11312                           	opt stack 25
 11313                           
 11314                           ;motors.c: 147: _delay((unsigned long)((5)*(32000000/4000.0)));
 11315                           
 11316                           ;incstack = 0
 11317  0023F6  0E34               	movlw	52
 11318  0023F8  6E03               	movwf	??_updateS2& (0+255),c
 11319  0023FA  0EF2               	movlw	242
 11320  0023FC                     i2u831_47:
 11321  0023FC  2EE8               	decfsz	wreg,f,c
 11322  0023FE  D7FE               	bra	i2u831_47
 11323  002400  2E03               	decfsz	??_updateS2& (0+255),f,c
 11324  002402  D7FC               	bra	i2u831_47
 11325                           
 11326                           ;motors.c: 149: if(mode == 0){
 11327  002404  5001               	movf	updateS2@mode,w,c
 11328  002406  1002               	iorwf	updateS2@mode+1,w,c
 11329  002408  A4D8               	btfss	status,2,c
 11330  00240A  D005               	goto	i2l3921
 11331                           
 11332                           ;motors.c: 150: LATCbits.LATC7 = 0;
 11333  00240C  9E8B               	bcf	3979,7,c	;volatile
 11334                           
 11335                           ;motors.c: 151: LATCbits.LATC6 = 0;
 11336  00240E  9C8B               	bcf	3979,6,c	;volatile
 11337                           
 11338                           ;motors.c: 152: LATCbits.LATC0 = 0;
 11339  002410  908B               	bcf	3979,0,c	;volatile
 11340                           
 11341                           ;motors.c: 153: LATCbits.LATC5 = 0;
 11342  002412  9A8B               	bcf	3979,5,c	;volatile
 11343                           
 11344                           ;motors.c: 154: }
 11345  002414  0012               	return	
 11346  002416                     i2l3921:
 11347                           
 11348                           ;motors.c: 155: else if(mode == 4){
 11349  002416  0E04               	movlw	4
 11350  002418  1801               	xorwf	updateS2@mode,w,c
 11351  00241A  1002               	iorwf	updateS2@mode+1,w,c
 11352  00241C  B4D8               	btfsc	status,2,c
 11353  00241E  0012               	return	
 11354                           
 11355                           ;motors.c: 158: else if(mode == 3){
 11356                           
 11357                           ;motors.c: 157: }
 11358  002420  0E03               	movlw	3
 11359  002422  1801               	xorwf	updateS2@mode,w,c
 11360  002424  1002               	iorwf	updateS2@mode+1,w,c
 11361  002426  A4D8               	btfss	status,2,c
 11362  002428  D042               	goto	i2l3949
 11363                           
 11364                           ;motors.c: 159: t2++;
 11365  00242A  4A43               	infsnz	_t2,f,c
 11366  00242C  2A44               	incf	_t2+1,f,c
 11367                           
 11368                           ;motors.c: 160: if (t2>8) {t2=1;}
 11369  00242E  BE44               	btfsc	_t2+1,7,c
 11370  002430  D00A               	goto	i2l3933
 11371  002432  5044               	movf	_t2+1,w,c
 11372  002434  E104               	bnz	i2u454_40
 11373  002436  0E09               	movlw	9
 11374  002438  5C43               	subwf	_t2,w,c
 11375  00243A  A0D8               	btfss	status,0,c
 11376  00243C  D004               	goto	i2l3933
 11377  00243E                     i2u454_40:
 11378  00243E  0E00               	movlw	0
 11379  002440  6E44               	movwf	_t2+1,c
 11380  002442  0E01               	movlw	1
 11381  002444  6E43               	movwf	_t2,c
 11382  002446                     i2l3933:
 11383                           
 11384                           ;motors.c: 161: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
 11385  002446  0443               	decf	_t2,w,c
 11386  002448  1044               	iorwf	_t2+1,w,c
 11387  00244A  B4D8               	btfsc	status,2,c
 11388  00244C  D005               	goto	i2l567
 11389  00244E  0E08               	movlw	8
 11390  002450  1843               	xorwf	_t2,w,c
 11391  002452  1044               	iorwf	_t2+1,w,c
 11392  002454  A4D8               	btfss	status,2,c
 11393  002456  D002               	goto	i2l565
 11394  002458                     i2l567:
 11395  002458  8E8B               	bsf	3979,7,c	;volatile
 11396  00245A  D001               	goto	i2l3937
 11397  00245C                     i2l565:
 11398                           
 11399                           ;motors.c: 162: else{LATCbits.LATC7 = 0;}
 11400  00245C  9E8B               	bcf	3979,7,c	;volatile
 11401  00245E                     i2l3937:
 11402                           
 11403                           ;motors.c: 163: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
 11404  00245E  0E02               	movlw	2
 11405  002460  1843               	xorwf	_t2,w,c
 11406  002462  1044               	iorwf	_t2+1,w,c
 11407  002464  B4D8               	btfsc	status,2,c
 11408  002466  D005               	goto	i2l571
 11409  002468  0E07               	movlw	7
 11410  00246A  1843               	xorwf	_t2,w,c
 11411  00246C  1044               	iorwf	_t2+1,w,c
 11412  00246E  A4D8               	btfss	status,2,c
 11413  002470  D002               	goto	i2l569
 11414  002472                     i2l571:
 11415  002472  8C8B               	bsf	3979,6,c	;volatile
 11416  002474  D001               	goto	i2l3941
 11417  002476                     i2l569:
 11418                           
 11419                           ;motors.c: 164: else{LATCbits.LATC6 = 0;}
 11420  002476  9C8B               	bcf	3979,6,c	;volatile
 11421  002478                     i2l3941:
 11422                           
 11423                           ;motors.c: 165: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
 11424  002478  0E03               	movlw	3
 11425  00247A  1843               	xorwf	_t2,w,c
 11426  00247C  1044               	iorwf	_t2+1,w,c
 11427  00247E  B4D8               	btfsc	status,2,c
 11428  002480  D005               	goto	i2l575
 11429  002482  0E06               	movlw	6
 11430  002484  1843               	xorwf	_t2,w,c
 11431  002486  1044               	iorwf	_t2+1,w,c
 11432  002488  A4D8               	btfss	status,2,c
 11433  00248A  D002               	goto	i2l573
 11434  00248C                     i2l575:
 11435  00248C  808B               	bsf	3979,0,c	;volatile
 11436  00248E  D001               	goto	i2l3945
 11437  002490                     i2l573:
 11438                           
 11439                           ;motors.c: 166: else{LATCbits.LATC0 = 0;}
 11440  002490  908B               	bcf	3979,0,c	;volatile
 11441  002492                     i2l3945:
 11442                           
 11443                           ;motors.c: 167: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
 11444  002492  0E04               	movlw	4
 11445  002494  1843               	xorwf	_t2,w,c
 11446  002496  1044               	iorwf	_t2+1,w,c
 11447  002498  B4D8               	btfsc	status,2,c
 11448  00249A  D005               	goto	i2l579
 11449  00249C  0E05               	movlw	5
 11450  00249E  1843               	xorwf	_t2,w,c
 11451  0024A0  1044               	iorwf	_t2+1,w,c
 11452  0024A2  A4D8               	btfss	status,2,c
 11453  0024A4  D002               	goto	i2l577
 11454  0024A6                     i2l579:
 11455  0024A6  8A8B               	bsf	3979,5,c	;volatile
 11456  0024A8  0012               	return	
 11457  0024AA                     i2l577:
 11458                           
 11459                           ;motors.c: 168: else{LATCbits.LATC5 = 0;}
 11460  0024AA  9A8B               	bcf	3979,5,c	;volatile
 11461                           
 11462                           ;motors.c: 169: }
 11463  0024AC  0012               	return	
 11464  0024AE                     i2l3949:
 11465                           
 11466                           ;motors.c: 170: else{
 11467                           ;motors.c: 171: if(mode == 1){
 11468  0024AE  0401               	decf	updateS2@mode,w,c
 11469  0024B0  1002               	iorwf	updateS2@mode+1,w,c
 11470  0024B2  A4D8               	btfss	status,2,c
 11471  0024B4  D00E               	goto	i2l3957
 11472                           
 11473                           ;motors.c: 172: s2 ++;
 11474  0024B6  4A5D               	infsnz	_s2,f,c
 11475  0024B8  2A5E               	incf	_s2+1,f,c
 11476                           
 11477                           ;motors.c: 173: if (s2>4) {s2=1;}
 11478  0024BA  BE5E               	btfsc	_s2+1,7,c
 11479  0024BC  D01D               	goto	i2l3965
 11480  0024BE  505E               	movf	_s2+1,w,c
 11481  0024C0  E104               	bnz	i2u464_40
 11482  0024C2  0E05               	movlw	5
 11483  0024C4  5C5D               	subwf	_s2,w,c
 11484  0024C6  A0D8               	btfss	status,0,c
 11485  0024C8  D017               	goto	i2l3965
 11486  0024CA                     i2u464_40:
 11487  0024CA  0E00               	movlw	0
 11488  0024CC  6E5E               	movwf	_s2+1,c
 11489  0024CE  0E01               	movlw	1
 11490  0024D0  D012               	goto	L20
 11491  0024D2                     i2l3957:
 11492                           
 11493                           ;motors.c: 175: else if(mode == 2){
 11494  0024D2  0E02               	movlw	2
 11495  0024D4  1801               	xorwf	updateS2@mode,w,c
 11496  0024D6  1002               	iorwf	updateS2@mode+1,w,c
 11497  0024D8  A4D8               	btfss	status,2,c
 11498  0024DA  D00E               	goto	i2l3965
 11499                           
 11500                           ;motors.c: 176: s2 --;
 11501  0024DC  065D               	decf	_s2,f,c
 11502  0024DE  A0D8               	btfss	status,0,c
 11503  0024E0  065E               	decf	_s2+1,f,c
 11504                           
 11505                           ;motors.c: 177: if (s2<1) {s2=4;}
 11506  0024E2  BE5E               	btfsc	_s2+1,7,c
 11507  0024E4  D005               	goto	i2l3963
 11508  0024E6  505E               	movf	_s2+1,w,c
 11509  0024E8  E107               	bnz	i2l3965
 11510  0024EA  045D               	decf	_s2,w,c
 11511  0024EC  B0D8               	btfsc	status,0,c
 11512  0024EE  D004               	goto	i2l3965
 11513  0024F0                     i2l3963:
 11514  0024F0  0E00               	movlw	0
 11515  0024F2  6E5E               	movwf	_s2+1,c
 11516  0024F4  0E04               	movlw	4
 11517  0024F6                     L20:
 11518  0024F6  6E5D               	movwf	_s2,c
 11519  0024F8                     i2l3965:
 11520                           
 11521                           ;motors.c: 178: }
 11522                           ;motors.c: 180: if (s2 == 1){LATCbits.LATC7 = 1;}
 11523  0024F8  045D               	decf	_s2,w,c
 11524  0024FA  105E               	iorwf	_s2+1,w,c
 11525  0024FC  A4D8               	btfss	status,2,c
 11526  0024FE  D002               	goto	i2l587
 11527  002500  8E8B               	bsf	3979,7,c	;volatile
 11528  002502  D001               	goto	i2l3969
 11529  002504                     i2l587:
 11530                           
 11531                           ;motors.c: 181: else{LATCbits.LATC7 = 0;}
 11532  002504  9E8B               	bcf	3979,7,c	;volatile
 11533  002506                     i2l3969:
 11534                           
 11535                           ;motors.c: 182: if (s2 == 2){LATCbits.LATC6 = 1;}
 11536  002506  0E02               	movlw	2
 11537  002508  185D               	xorwf	_s2,w,c
 11538  00250A  105E               	iorwf	_s2+1,w,c
 11539  00250C  A4D8               	btfss	status,2,c
 11540  00250E  D002               	goto	i2l589
 11541  002510  8C8B               	bsf	3979,6,c	;volatile
 11542  002512  D001               	goto	i2l3973
 11543  002514                     i2l589:
 11544                           
 11545                           ;motors.c: 183: else{LATCbits.LATC6 = 0;}
 11546  002514  9C8B               	bcf	3979,6,c	;volatile
 11547  002516                     i2l3973:
 11548                           
 11549                           ;motors.c: 184: if (s2 == 3){LATCbits.LATC0 = 1;}
 11550  002516  0E03               	movlw	3
 11551  002518  185D               	xorwf	_s2,w,c
 11552  00251A  105E               	iorwf	_s2+1,w,c
 11553  00251C  A4D8               	btfss	status,2,c
 11554  00251E  D002               	goto	i2l591
 11555  002520  808B               	bsf	3979,0,c	;volatile
 11556  002522  D001               	goto	i2l3977
 11557  002524                     i2l591:
 11558                           
 11559                           ;motors.c: 185: else{LATCbits.LATC0 = 0;}
 11560  002524  908B               	bcf	3979,0,c	;volatile
 11561  002526                     i2l3977:
 11562                           
 11563                           ;motors.c: 186: if (s2 == 4){LATCbits.LATC5 = 1;}
 11564  002526  0E04               	movlw	4
 11565  002528  185D               	xorwf	_s2,w,c
 11566  00252A  105E               	iorwf	_s2+1,w,c
 11567  00252C  A4D8               	btfss	status,2,c
 11568  00252E  D002               	goto	i2l593
 11569  002530  8A8B               	bsf	3979,5,c	;volatile
 11570  002532  0012               	return	
 11571  002534                     i2l593:
 11572                           
 11573                           ;motors.c: 187: else{LATCbits.LATC5 = 0;}
 11574  002534  9A8B               	bcf	3979,5,c	;volatile
 11575  002536  0012               	return	
 11576  002538                     __end_of_updateS2:
 11577                           	opt stack 0
 11578                           pclatu	equ	0xFFB
 11579                           pclath	equ	0xFFA
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           intcon	equ	0xFF2
 11587                           intcon2	equ	0xFF1
 11588                           postinc0	equ	0xFEE
 11589                           fsr0h	equ	0xFEA
 11590                           fsr0l	equ	0xFE9
 11591                           wreg	equ	0xFE8
 11592                           fsr1h	equ	0xFE2
 11593                           fsr1l	equ	0xFE1
 11594                           indf2	equ	0xFDF
 11595                           postinc2	equ	0xFDE
 11596                           postdec2	equ	0xFDD
 11597                           fsr2h	equ	0xFDA
 11598                           fsr2l	equ	0xFD9
 11599                           status	equ	0xFD8
 11600                           
 11601 ;; *************** function ___awdiv *****************
 11602 ;; Defined at:
 11603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;  dividend        2    6[COMRAM] int 
 11606 ;;  divisor         2    8[COMRAM] int 
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  quotient        2   12[COMRAM] int 
 11609 ;;  sign            1   11[COMRAM] unsigned char 
 11610 ;;  counter         1   10[COMRAM] unsigned char 
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  2    6[COMRAM] int 
 11613 ;; Registers used:
 11614 ;;		wreg, status,2, status,0
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11623 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;Total ram usage:        8 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; This function calls:
 11627 ;;		Nothing
 11628 ;; This function is called by:
 11629 ;;		_handler
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           	psect	text43
 11634  002538                     __ptext43:
 11635                           	opt stack 0
 11636  002538                     ___awdiv:
 11637                           	opt stack 25
 11638                           
 11639                           ;incstack = 0
 11640  002538  0E00               	movlw	0
 11641  00253A  6E0C               	movwf	___awdiv@sign,c
 11642  00253C  AE0A               	btfss	___awdiv@divisor+1,7,c
 11643  00253E  D006               	goto	i2l4255
 11644  002540  6C09               	negf	___awdiv@divisor,c
 11645  002542  1E0A               	comf	___awdiv@divisor+1,f,c
 11646  002544  B0D8               	btfsc	status,0,c
 11647  002546  2A0A               	incf	___awdiv@divisor+1,f,c
 11648  002548  0E01               	movlw	1
 11649  00254A  6E0C               	movwf	___awdiv@sign,c
 11650  00254C                     i2l4255:
 11651  00254C  AE08               	btfss	___awdiv@dividend+1,7,c
 11652  00254E  D006               	goto	i2l4261
 11653  002550  6C07               	negf	___awdiv@dividend,c
 11654  002552  1E08               	comf	___awdiv@dividend+1,f,c
 11655  002554  B0D8               	btfsc	status,0,c
 11656  002556  2A08               	incf	___awdiv@dividend+1,f,c
 11657  002558  0E01               	movlw	1
 11658  00255A  1A0C               	xorwf	___awdiv@sign,f,c
 11659  00255C                     i2l4261:
 11660  00255C  0E00               	movlw	0
 11661  00255E  6E0E               	movwf	___awdiv@quotient+1,c
 11662  002560  0E00               	movlw	0
 11663  002562  6E0D               	movwf	___awdiv@quotient,c
 11664  002564  5009               	movf	___awdiv@divisor,w,c
 11665  002566  100A               	iorwf	___awdiv@divisor+1,w,c
 11666  002568  B4D8               	btfsc	status,2,c
 11667  00256A  D01C               	goto	i2l4283
 11668  00256C  0E01               	movlw	1
 11669  00256E  6E0B               	movwf	___awdiv@counter,c
 11670  002570  D004               	goto	i2l4269
 11671  002572                     i2l4267:
 11672  002572  90D8               	bcf	status,0,c
 11673  002574  3609               	rlcf	___awdiv@divisor,f,c
 11674  002576  360A               	rlcf	___awdiv@divisor+1,f,c
 11675  002578  2A0B               	incf	___awdiv@counter,f,c
 11676  00257A                     i2l4269:
 11677  00257A  AE0A               	btfss	___awdiv@divisor+1,7,c
 11678  00257C  D7FA               	goto	i2l4267
 11679  00257E                     i2l4271:
 11680  00257E  90D8               	bcf	status,0,c
 11681  002580  360D               	rlcf	___awdiv@quotient,f,c
 11682  002582  360E               	rlcf	___awdiv@quotient+1,f,c
 11683  002584  5009               	movf	___awdiv@divisor,w,c
 11684  002586  5C07               	subwf	___awdiv@dividend,w,c
 11685  002588  500A               	movf	___awdiv@divisor+1,w,c
 11686  00258A  5808               	subwfb	___awdiv@dividend+1,w,c
 11687  00258C  A0D8               	btfss	status,0,c
 11688  00258E  D005               	goto	i2l4279
 11689  002590  5009               	movf	___awdiv@divisor,w,c
 11690  002592  5E07               	subwf	___awdiv@dividend,f,c
 11691  002594  500A               	movf	___awdiv@divisor+1,w,c
 11692  002596  5A08               	subwfb	___awdiv@dividend+1,f,c
 11693  002598  800D               	bsf	___awdiv@quotient,0,c
 11694  00259A                     i2l4279:
 11695  00259A  90D8               	bcf	status,0,c
 11696  00259C  320A               	rrcf	___awdiv@divisor+1,f,c
 11697  00259E  3209               	rrcf	___awdiv@divisor,f,c
 11698  0025A0  2E0B               	decfsz	___awdiv@counter,f,c
 11699  0025A2  D7ED               	goto	i2l4271
 11700  0025A4                     i2l4283:
 11701  0025A4  500C               	movf	___awdiv@sign,w,c
 11702  0025A6  B4D8               	btfsc	status,2,c
 11703  0025A8  D004               	goto	i2l4287
 11704  0025AA  6C0D               	negf	___awdiv@quotient,c
 11705  0025AC  1E0E               	comf	___awdiv@quotient+1,f,c
 11706  0025AE  B0D8               	btfsc	status,0,c
 11707  0025B0  2A0E               	incf	___awdiv@quotient+1,f,c
 11708  0025B2                     i2l4287:
 11709  0025B2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11710  0025B6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11711  0025BA  0012               	return	
 11712  0025BC                     __end_of___awdiv:
 11713                           	opt stack 0
 11714                           pclatu	equ	0xFFB
 11715                           pclath	equ	0xFFA
 11716                           tblptru	equ	0xFF8
 11717                           tblptrh	equ	0xFF7
 11718                           tblptrl	equ	0xFF6
 11719                           tablat	equ	0xFF5
 11720                           prodh	equ	0xFF4
 11721                           prodl	equ	0xFF3
 11722                           intcon	equ	0xFF2
 11723                           intcon2	equ	0xFF1
 11724                           postinc0	equ	0xFEE
 11725                           fsr0h	equ	0xFEA
 11726                           fsr0l	equ	0xFE9
 11727                           wreg	equ	0xFE8
 11728                           fsr1h	equ	0xFE2
 11729                           fsr1l	equ	0xFE1
 11730                           indf2	equ	0xFDF
 11731                           postinc2	equ	0xFDE
 11732                           postdec2	equ	0xFDD
 11733                           fsr2h	equ	0xFDA
 11734                           fsr2l	equ	0xFD9
 11735                           status	equ	0xFD8
 11736                           pclatu	equ	0xFFB
 11737                           pclath	equ	0xFFA
 11738                           tblptru	equ	0xFF8
 11739                           tblptrh	equ	0xFF7
 11740                           tblptrl	equ	0xFF6
 11741                           tablat	equ	0xFF5
 11742                           prodh	equ	0xFF4
 11743                           prodl	equ	0xFF3
 11744                           intcon	equ	0xFF2
 11745                           intcon2	equ	0xFF1
 11746                           postinc0	equ	0xFEE
 11747                           fsr0h	equ	0xFEA
 11748                           fsr0l	equ	0xFE9
 11749                           wreg	equ	0xFE8
 11750                           fsr1h	equ	0xFE2
 11751                           fsr1l	equ	0xFE1
 11752                           indf2	equ	0xFDF
 11753                           postinc2	equ	0xFDE
 11754                           postdec2	equ	0xFDD
 11755                           fsr2h	equ	0xFDA
 11756                           fsr2l	equ	0xFD9
 11757                           status	equ	0xFD8
 11758                           
 11759                           	psect	rparam
 11760  0000                     pclatu	equ	0xFFB
 11761                           pclath	equ	0xFFA
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           prodh	equ	0xFF4
 11767                           prodl	equ	0xFF3
 11768                           intcon	equ	0xFF2
 11769                           intcon2	equ	0xFF1
 11770                           postinc0	equ	0xFEE
 11771                           fsr0h	equ	0xFEA
 11772                           fsr0l	equ	0xFE9
 11773                           wreg	equ	0xFE8
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           indf2	equ	0xFDF
 11777                           postinc2	equ	0xFDE
 11778                           postdec2	equ	0xFDD
 11779                           fsr2h	equ	0xFDA
 11780                           fsr2l	equ	0xFD9
 11781                           status	equ	0xFD8
 11782                           
 11783                           	psect	temp
 11784  00005F                     btemp:
 11785                           	opt stack 0
 11786  00005F                     	ds	1
 11787  0000                     int$flags	set	btemp
 11788                           pclatu	equ	0xFFB
 11789                           pclath	equ	0xFFA
 11790                           tblptru	equ	0xFF8
 11791                           tblptrh	equ	0xFF7
 11792                           tblptrl	equ	0xFF6
 11793                           tablat	equ	0xFF5
 11794                           prodh	equ	0xFF4
 11795                           prodl	equ	0xFF3
 11796                           intcon	equ	0xFF2
 11797                           intcon2	equ	0xFF1
 11798                           postinc0	equ	0xFEE
 11799                           fsr0h	equ	0xFEA
 11800                           fsr0l	equ	0xFE9
 11801                           wreg	equ	0xFE8
 11802                           fsr1h	equ	0xFE2
 11803                           fsr1l	equ	0xFE1
 11804                           indf2	equ	0xFDF
 11805                           postinc2	equ	0xFDE
 11806                           postdec2	equ	0xFDD
 11807                           fsr2h	equ	0xFDA
 11808                           fsr2l	equ	0xFD9
 11809                           status	equ	0xFD8


Data Sizes:
    Strings     425
    Constant    42
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      94
    BANK0           128     47      67
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[16]), STR_38(CODE[17]), 
		 -> STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[16]), STR_34(CODE[17]), 
		 -> STR_33(CODE[22]), STR_32(CODE[17]), STR_31(CODE[21]), STR_30(CODE[17]), 
		 -> STR_29(CODE[12]), STR_28(CODE[17]), STR_27(CODE[8]), STR_26(CODE[15]), 
		 -> STR_25(CODE[8]), STR_24(CODE[16]), STR_23(CODE[17]), STR_22(CODE[16]), 
		 -> STR_21(CODE[9]), STR_20(CODE[9]), STR_19(CODE[12]), STR_18(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[11]), 
		 -> STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[3]), STR_8(CODE[16]), STR_7(CODE[16]), STR_6(CODE[12]), 
		 -> STR_5(CODE[12]), STR_4(CODE[17]), STR_3(CODE[16]), STR_2(CODE[16]), 
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_addRun
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _calibrateWheels->_updateS1
    _calibrateWheels->_updateS3
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->___awdiv
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_displayLog
    _homescreen->_printf
    _displayLog->_printf

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   31528
                                             17 BANK0     30    30      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                           _PWM2slow
                            ___awmod
                             _addRun
                    _calibrateWheels
                         _displayLog
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                             35 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                             33 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                             33 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     571
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             35 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             45 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             32 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    7236
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    8349
                                             56 COMRAM     2     0      2
                                             10 BANK0      7     7      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    7041
                                             44 COMRAM    12     4      8
                                              0 BANK0     10    10      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1204
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             39 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             32 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                             34 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateWheels                                      4     4      0    1535
                                             35 COMRAM     4     4      0
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     554
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     686
                                             32 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _startTMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                             32 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2493
                                             36 COMRAM    24     2     22
                                              0 BANK0      3     3      0
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     834
                                             32 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      62
                                             32 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     680
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM2slow                                             4     2      2     130
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 6     2      4     728
                                             32 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                             32 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             22    22      0    1982
                                             14 COMRAM    18    18      0
                            ___awdiv
                           _updateS2
                           i2___wmul
                        i2_startTMR1
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     158
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     290
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_startTMR1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _PWM2slow
   ___awmod
   _addRun
     _eepromRead
     _eepromWrite
   _calibrateWheels
     _readADC
     _startTMR1
     _updateS1
     _updateS3
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _startTMR1
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   ___awdiv
     i2___wmul (ARG)
   _updateS2
   i2___wmul
   i2_startTMR1
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      43       5       52.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      5E       1       74.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      34        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 12 03:48:58 2017

                        _s 0047                          _t 0045               ___awdiv@sign 000C  
                       _s1 00C0                         _s2 005D                         _s3 00BE  
                       _t2 0043                         _t3 0041        ___wmul@multiplicand 0023  
              __CFG_BORV$3 000000           ?_calibrateWheels 0001               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l220 0416                        l222 0426                        l231 04B0  
                      l240 051A                        l216 03F6                        l233 04C0  
                      l242 052A                        l218 0406                        l323 0D0A  
                      l227 0490                        l244 053A                        l501 160A  
                      l229 04A0                        l510 1676                        l238 050A  
                      l503 1628                        l520 16A6                        l512 1672  
                      l505 1624                        l522 16C4                        l514 1690  
                      l610 1D96                        l524 16C0                        l516 168C  
                      l612 1DB4                        l604 1D80                        l541 1776  
                      l293 0A54                        l518 16AA                        l614 1DB0  
                      l606 1D7C                        l703 2AE2                        l543 178A  
                      l631 1E42                        l623 1E0E                        l616 1DCE  
                      l608 1D9A                        l545 179E                        l633 1E3E  
                      l625 1E0A                        l618 1DCA                        l547 17B2  
                      l491 15DA                        l651 1F0A                        l635 1E5C  
                      l627 1E28                        l395 2BF0                        l476 2728  
                      l709 2AB8                        l493 15D6                        l645 1ECE  
                      l637 1E58                        l629 1E24                        l495 15F4  
                      l647 1EE2                        l497 15F0                        l649 1EF6  
                      l690 2BE8                        l499 160E                        l829 0F70  
                      l782 21A2                        l687 2BDA                        l696 2BD6  
                      l697 2BD2                        l794 225E               __CFG_CPB$OFF 000000  
                      _PR2 000FCB                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28               ___awmod@sign 0026                        prod 000FF3  
             PWM2slow@duty 0021                        wreg 000FE8        __end_ofi2_startTMR1 2C22  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1221 262C  
                     l1274 2960                       l1284 2A80                       l4013 27DA  
                     l4041 211C                       l4009 27D2                       l4051 2166  
                     l4043 212A                       l4019 27F6                       l3501 1610  
                     l4053 2176                       l4045 213A                       l3421 25EA  
                     l4311 2768                       l4303 274E                       l4071 21D8  
                     l4063 21AA                       l4055 2184                       l4047 2148  
                     l4039 210C                       l3431 261E                       l3423 25EE  
                     l3513 1652                       l3505 162C                       l4081 2222  
                     l4073 21E6                       l4049 2158                       l4057 218C  
                     l4323 2794                       l4315 277C                       l4307 275C  
                     l3523 1692                       l3531 16C8                       l3603 1D3A  
                     l4083 2232                       l4075 21F6                       l3419 25DE  
                     l6011 0874                       l6003 0834                       l4309 2764  
                     l3541 16F4                       l4093 2266                       l4085 2240  
                     l4077 2204                       l4069 21C8                       l6013 088E  
                     l4319 2786                       l3551 172E                       l3527 16AC  
                     l3519 1678                       l3623 1D9C                       l3615 1D6A  
                     l3631 1DD2                       l4079 2214                       l4087 2248  
                     l6111 0ACE                       l6103 0A94                       l6031 08EE  
                     l6007 0850                       l3561 1766                       l5313 2A76  
                     l5305 2A56                       l6201 0D9C                       l6113 0AD6  
                     l6105 0AA4                       l6025 08CE                       l6009 0864  
                     l3555 174A                       l3547 171A                       l3651 1E44  
                     l3643 1E10                       l3627 1DB6                       l3619 1D82  
                     l5307 2A5E                       l6115 0AE6                       l6131 0B46  
                     l6107 0AB6                       l6051 0958                       l6035 0902  
                     l6027 08D8                       l3581 17C8                       l3573 17A0  
                     l3565 1778                       l3557 1754                       l3493 15DC  
                     l5309 2A62                       l5421 10AC                       l5333 0E7A  
                     l6141 0BAC                       l6117 0AFE                       l6045 0934  
                     l6053 0960                       l3487 15B6                       l3479 1590  
                     l3671 1EBE                       l3663 1E8E                       l3647 1E2A  
                     l3639 1DF8                       l3655 1E60                       l5415 106E  
                     l5407 103C                       l5343 0EA8                       l6135 0B5E  
                     l3593 1808                       l3585 17DC                       l3569 178C  
                     l3577 17B4                       l3497 15F6                       l5433 10E0  
                     l5409 104E                       l5361 0F40                       l5337 0E8E  
                     l6153 0BF2                       l6137 0B7A                       l6081 0A10  
                     l6073 09E0                       l6049 0950                       l4299 2742  
                     l3683 1EF8                       l3675 1ED0                       l5435 10EC  
                     l5443 1118                       l5427 10C4                       l5419 10A2  
                     l5339 0EA0                       l5523 1236                       l6163 0C1E  
                     l6139 0B8A                       l6155 0BFC                       l6083 0A20  
                     l6075 09E8                       l5605 22C6                       l3853 2B92  
                     l3589 17F2                       l3669 1EB4                       l5285 292E  
                     l5269 2BBC                       l5445 111E                       l5453 11B2  
                     l5373 0FA8                       l5357 0F3A                       l5349 0ED8  
                     l5517 1210                       l5525 123C                       l6173 0C4E  
                     l6085 0A30                       l6093 0A5E                       l6077 09F8  
                     l6181 0C7A                       l6069 09C4                       l5701 01C2  
                     l5607 22CE                       l3855 2BA0                       l3679 1EE4  
                     l5287 2936                       l5447 1166                       l5455 11C4  
                     l5439 1106                       l5391 1000                       l6159 0C0E  
                     l6095 0A6E                       l6079 0A00                       l5703 01CA  
                     l5297 2956                       l5289 293A                       l5457 11CC  
                     l5393 1006                       l5377 0FC4                       l6185 0CA6  
                     l6177 0C6A                       l5801 03F8                       l5713 0236  
                     l5379 0FCA                       l5459 11D8                       l6179 0C72  
                     l3877 2B30                       l6189 0CDA                       l5813 0428  
                     l5805 0408                       l5709 01FA                       l5717 0256  
                     l6199 0D86                       l5655 0066                       l5841 04B2  
                     l5833 0492                       l5809 0418                       l5817 0448  
                     l5681 0156                       l5665 0086                       _ADFM 007E07  
                     l5827 047E                       l5683 015E                       l5659 007A  
                     l5925 0674                       l5861 050C                       l5837 04A2  
                     l5845 04C2                       l5693 0196                       l5685 016E  
                     l5951 0706                       l5855 04F8                       l5695 019E  
                     l5929 0684                       l5873 053C                       l5865 051C  
                     l5795 03E4                       l5955 071A                       l5973 0794  
                     l5869 052C                       l5877 055C                       l5983 07CA  
                     l5895 05BE                       l5985 07D2                       l5969 0778  
                     l5987 07E2                       l5979 07AE                       l5989 07F2  
                     STR_1 FF16                       STR_2 FF56                       STR_3 FF26  
                     STR_4 FEC4                       STR_5 FFC7                       STR_6 FFAF  
                     STR_7 FF36                       STR_8 FF66                       STR_9 FFFB  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u4010 1DF0  
                     u4110 1E84                       u3500 15AE                       u3600 164A  
                     u3720 1710                       u4185 2896                       u4450 2B2E  
                     _PEIE 007F96                       u3910 1D62                       u7030 122C  
                     u7015 2ACC                       _RCEN 007E2B                       u4495 2A94  
                     u8007 0668                       u8017 0698                       u8107 1360  
                     u8027 06B2                       u8117 13FC                       u8037 076A  
                     u8207 1576                       u8127 145C                       u8047 09B6  
                     u8217 15BC                       u8137 14BC                       u8057 0E24  
                     u8227 1658                       u8147 151C                       u8067 2A08  
                     u8237 16D8                       u8157 28DA                       u8077 2A3C  
                     u8247 2B98                       u8167 28E4                       u8087 1266  
                     u8257 270C                       u8177 2906                       u8097 12C4  
                     u8187 2910                       u8197 1D20                       u7840 0D4E  
                     u7907 0272                       u7917 02AE                       u7927 02EE  
                     u7937 032E                       u7947 036E                       u7957 03CC  
                     u7967 0466                       u7887 005C                       u7977 04E0  
                     u7897 012C                       u7987 058C                       u7997 05D2  
                     _PWM1 29B8                       _PWM2 26B6                       _RSEN 007E29  
              displayLog@i 008D            __end_of_PWM1off 2C58            __end_of_PWM2off 2C4E  
                     _main 0012                       _curr 003D                       _keys FE2B  
                     _time 00AF                       _prev 003F                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 005F                main@standby 00AD                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                 i2_updateS1 1820  
               i2_updateS3 1F0E                      ?_PWM1 0021                      ?_PWM2 0021  
         ?_I2C_Master_Init 002E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 25BC                      _ADRES 000FC3  
                    _EEADR 000FA9                      STR_10 FF76                      STR_11 FF86  
                    STR_12 FFFB                      STR_20 FFDE                      STR_21 FFDE  
                    STR_13 FF96                      STR_30 FEB3                      STR_14 FFD3  
                    STR_22 FF46                      STR_15 FFF7                      STR_23 FED5  
                    STR_31 FE6B                      STR_16 FFF7                      STR_40 FEB3  
                    STR_32 FEB3                      STR_24 FEE6                      STR_17 FFF7  
                    STR_25 FFEF                      STR_41 FEA2                      STR_33 FE55  
                    STR_18 FFF7                      STR_34 FEB3                      STR_26 FE5C  
                    STR_42 FE80                      STR_27 FFE7                      STR_19 FFBB  
                    STR_35 FEF6                      STR_36 FEB3                      STR_28 FEB3  
          __end_of___awmod 279E                      STR_29 FFA3                      STR_37 FE91  
                    STR_38 FEB3                      STR_39 FF06            __end_of___lldiv 263E  
                    _T0CON 000FD5            ___awdiv@divisor 0009                      _T1CON 000FCD  
                    _T2CON 000FCA                      _T3CON 000FB1            __end_of___lwdiv 296A  
          __end_of___lwmod 2A8A                      i2l501 18BA                      i2l510 1926  
                    i2l503 18D8                      i2l520 1956                      i2l512 1922  
                    i2l505 18D4                      i2l185 1CDE                      i2l522 1974  
                    i2l514 1940                      i2l610 1F8A                      i2l524 1970  
                    i2l516 193C                      i2l612 1FA8                      i2l604 1F74  
                    i2l541 1A26                      i2l518 195A                      i2l614 1FA4  
                    i2l606 1F70                      i2l543 1A3A                      i2l631 2036  
                    i2l623 2002                      i2l616 1FC2                      i2l608 1F8E  
                    i2l545 1A4E                      i2l633 2032                      i2l625 1FFE  
                    i2l618 1FBE                      i2l571 2472                      i2l547 1A62  
                    i2l491 188A                      i2l651 20FE                      i2l635 2050  
                    i2l627 201C                      i2l573 2490                      i2l565 245C  
                    i2l493 1886                      i2l645 20C2                      i2l637 204C  
                    i2l629 2018                      i2l591 2524                      i2l575 248C  
                    i2l567 2458                      i2l495 18A4                      i2l647 20D6  
                    i2l593 2534                      i2l577 24AA                      i2l569 2476  
                    i2l497 18A0                      i2l649 20EA                      i2l587 2504  
                    i2l579 24A6                      i2l499 18BE                      i2l589 2514  
          ___awdiv@counter 000B               updateS1@mode 0021               updateS2@mode 0001  
             updateS3@mode 0021                      _TMR0H 000FD7                      _TMR1H 000FCF  
                    _TMR0L 000FD6                      _TMR3H 000FB3                      _TMR1L 000FCE  
                    _TMR3L 000FB2                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 2C3A            __end_of_handler 1D1A             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC 2BA6  
          __end_of_initLCD 2A48             __CFG_EBTRB$OFF 000000            __end_of_dpowers FE46  
             main@sodaLoad 0095           __end_of_PWM2slow 29B8            __end_of_isdigit 2BC4  
                    _sodaI 0049               main@sodaSort 00A7                      _soupI 004B  
                    _putch 2C22                      main@s 0097                      pclath 000FFA  
                    tablat 000FF5           __end_ofi2___wmul 2B82                      status 000FD8  
             main@soupLoad 0093               main@soupSort 00A5             __CFG_PBADEN$ON 000000  
             __end_of_PWM1 2A02               __end_of_PWM2 272E            __initialization 2AEA  
             __end_of_main 0E6C               __end_of_keys FE3C                     ??_PWM1 0023  
                   ??_PWM2 0025                i2_startTMR1 2C12                     ??_main 0091  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0022  
       ??_I2C_Master_Start 0022                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0024                     _ADCON2 000FC0                  ??_PWM1off 0021  
                ??_PWM2off 0021                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7           ___awdiv@dividend 0007                     ?_putch 0001  
                   _CVRCON 000FB5                     i2l4401 19CA                     i2l4411 1A04  
                   i2l4261 255C                     i2l4405 19DE                     i2l4341 1866  
                   i2l4333 1840                     i2l4501 201E                     i2l4271 257E  
                   i2l4255 254C                     i2l4423 1A3C                     i2l4431 1A64  
                   i2l4415 1A16                     i2l4351 18A6                     i2l4409 19FA  
                   i2l4505 2038                     i2l4601 1CCC                     i2l4267 2572  
                   i2l4283 25A4                     i2l4443 1AA2                     i2l4435 1A78  
                   i2l4427 1A50                     i2l4419 1A28                     i2l4355 18C0  
                   i2l4347 188C                     i2l4523 20A8                     i2l4269 257A  
                   i2l4381 195C                     i2l4373 1928                     i2l4533 20D8  
                   i2l4525 20B2                     i2l4517 2082                     i2l4509 2054  
                   i2l4605 1CD8                     i2l4287 25B2                     i2l4279 259A  
                   i2l4447 1AB8                     i2l4439 1A8C                     i2l4367 1902  
                   i2l4359 18DC                     i2l3921 2416                     i2l4377 1942  
                   i2l4385 1978                     i2l4537 20EC                     i2l4529 20C4  
                   i2l4481 1FAA                     i2l4473 1F76                     i2l4457 1F2E  
                   i2l4395 19A4                     i2l3941 2478                     i2l3933 2446  
                   i2l4493 1FEC                     i2l4477 1F90                     i2l4469 1F5E  
                   i2l4485 1FC6                     i2l4581 1BCC                     i2l4567 1B2C  
                   i2l3945 2492                     i2l3937 245E                     i2l4497 2004  
                   i2l4593 1C56                     i2l4585 1C3A                     i2l3963 24F0  
                   i2l3973 2516                     i2l3965 24F8                     i2l3957 24D2  
                   i2l3949 24AE                     i2l4589 1C4A                     i2l3977 2526  
                   i2l3969 2506                     _OSCCON 000FD3                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _TMR1IE 007CE8                     _TMR1IF 007CF0  
                   _TMR0ON 007EAF                     _TMR1ON 007E68                     _TMR3ON 007D88  
                   _S1mode 005B                     _S2mode 0059                     _SSPADD 000FC8  
                   _S3mode 0057                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038  
                   _addRun 228A                     ___wmul 2B36                  ??___awdiv 000B  
           __CFG_STVREN$ON 000000                  ??___awmod 0025                ?i2_updateS1 0001  
              ?i2_updateS3 0001                  ??___lldiv 0029                  ??___lwdiv 0025  
                ??___lwmod 002C              displayLog@run 0039           __end_of_keycheck 2BF0  
         calibrateWheels@i 0026                     clear_0 2AF0                     clear_1 2AFC  
          eepromWrite@data 0021           __end_of_currtime FE55           ___awdiv@quotient 000D  
          ___awmod@divisor 0023            ___awmod@counter 0025                  ??_lcdInst 0023  
                   _printf 0E6C                  ??_handler 000F                  ??_readADC 0021  
                ??_initLCD 0024                  ??_isdigit 0021               __mediumconst FE2A  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            ?_keyinterrupt 0001           __end_of_updateS1 1820           __end_of_updateS2 2538  
         __end_of_updateS3 1F0E                 __accesstop 0080    __end_of__initialization 2B02  
             addRun@sodaNT 0035               addRun@soupNL 0039              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_putch 2C2E                  ?_PWM2slow 0021  
                ?i2___wmul 0001         __size_of_lcdNibble 0056          eepromRead@address 0023  
           ??_keyinterrupt 0021             i2updateS1@mode 0001             i2updateS3@mode 0001  
                  ??_putch 0023                 addRun@date 002B        __size_ofi2_updateS1 02B0  
      __size_ofi2_updateS3 01F4                 __pbssBANK0 00AF                 addRun@mins 002F  
               addRun@secs 0031                 addRun@year 0027                    PWM2@dir 0023  
                  ?_addRun 0025                    ?___wmul 0021                    _CCP1CON 000FBD  
                  _CCP2CON 000FBA                 ??_PWM2slow 0023                    ?_printf 002D  
               _labelState 00BA                 ??i2___wmul 0005                 _eepromRead 2AC2  
        displayLog@currRun 008F   __size_of_calibrateWheels 0188               _handler$1821 001F  
       __size_of_startTMR1 0010                 _displayLog 11F4                    _PWM1off 2C4E  
                  _PWM2off 2C44                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                  ?_keycheck 0001          __end_of_lcdNibble 2918  
                  __Hparam 0000                    __Lparam 0000            __size_of_addRun 016C  
                  ___awdiv 2538                  ?_updateS1 0021                  ?_updateS2 0001  
                ?_updateS3 0021                    ___awmod 272E                    ___lldiv 25BC  
          __size_of___wmul 0026                    ___lwdiv 2918                    ___lwmod 2A48  
                _CMCONbits 000FB4                 _homescreen 2806                    __pcinit 2AEA  
                  __ramtop 1000                 _initialize 263E               ?i2_startTMR1 0001  
                  _lcdInst 2C2E                    _handler 0008                    __ptext0 0012  
                  __ptext1 279E                    __ptext2 2C3A                    __ptext3 2C58  
                  __ptext4 2C60                    __ptext5 2B10                    __ptext6 2BF0  
                  __ptext7 2BC4                    __ptext8 263E                    __ptext9 2A02  
          __size_of_printf 0388                  _T0CONbits 000FD5                    _readADC 2B82  
                  _initLCD 2A02          __end_of_hexpowers FE4E                    _dpowers FE3C  
                  _isdigit 2BA6           ___awmod@dividend 0021                    _seconds 00BC  
                  _sodaCnt 00B6   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008                    _soupCnt 00B8  
           main@prevSodaIR 00A9             __pintcode_body 1AD0       end_of_initialization 2B02  
           main@prevSoupIR 00AB                 ??_keycheck 0021              __Lmediumconst FE2A  
                  int_func 1AD0        i2___wmul@multiplier 0001  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0025            ___lldiv@counter 002D  
     __end_of_keyinterrupt 2BDA                    printf@c 0089                    printf@f 002D  
         I2C_Master_Init@c 002E           I2C_Master_Read@a 0022                    postdec2 000FDD  
        __end_of_startTMR1 2C12                    postinc0 000FEE                    postinc2 000FDE  
             ??i2_updateS1 0003               ??i2_updateS3 0003                 ??_updateS1 0023  
               ??_updateS2 0003                 ??_updateS3 0023                  _PORTBbits 000F81  
              ?_eepromRead 0001              addRun@currRun 003B                 _updateTime 279E  
              ?_displayLog 0039         __end_ofi2_updateS1 1AD0         __end_ofi2_updateS3 2102  
        ??_calibrateWheels 0024                _CCP1CONbits 000FBD              ??_eepromWrite 0022  
              printf@width 0087                _CCP2CONbits 000FBA                 main@sodaNT 00A3  
               main@soupNL 009F                ?_homescreen 0001             __end_of_addRun 23F6  
           __end_of___wmul 2B5C                ?_initialize 0001          __size_of_PWM2slow 004E  
         i2___wmul@product 0005             __end_of_printf 11F4        start_initialization 2AEA  
              updateTime@j 0024          __size_ofi2___wmul 0026          ??_I2C_Master_Init 0032  
        ??_I2C_Master_Read 0022          ??_I2C_Master_Wait 0021          ??_I2C_Master_Stop 0022  
         __CFG_OSC$INTIO67 000000        __size_of_eepromRead 0028                   ??_addRun 0080  
      __end_of_eepromWrite 2AC2                   ??___wmul 0025        __size_of_displayLog 037C  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0035                addRun@hours 002D  
              addRun@sodaT 0033                addRun@month 0029                addRun@soupL 0037  
     __size_ofi2_startTMR1 0010                __pbssCOMRAM 003D              __pcstackBANK0 0080  
              ?_updateTime 0001               _isdigit$1451 0022                   ?_PWM1off 0001  
                 ?_PWM2off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0016  
      __size_of_initialize 0078                  addRun@dur 0025           _I2C_Master_Start 2C60  
         _I2C_Master_Write 2C3A          __size_of_keycheck 0016           ___lwdiv@dividend 0021  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FE2A  
                _lcdNibble 28C2                   ?___awdiv 0007                   ?___awmod 0021  
                 ?___lldiv 0021                   PWM1@duty 0021                   PWM2@duty 0021  
                 ?___lwdiv 0021                   ?___lwmod 0028          __size_of_updateS1 02B0  
        __size_of_updateS2 0142          __size_of_updateS3 01F4                   ?_lcdInst 0001  
                 ?_handler 0001                   ?_readADC 0001                   ?_initLCD 0001  
                 ?_isdigit 0001               _keyinterrupt 2BC4                  _hexpowers FE46  
         ___lwdiv@quotient 0026             __size_of_putch 000C         eepromWrite@address 0024  
      calibrateWheels@prev 0024             ___wmul@product 0025                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite 2A8A                  _sodaAlign 004F  
                 i2u507_40 185E                   _PIR2bits 000FA1                   i2u517_40 18FA  
                 i2u454_40 243E                   i2u464_40 24CA                   i2u529_40 19C0  
                 i2u548_40 1F56                   i2u558_40 1FE4                  _sodaSteps 0053  
                 i2u830_47 1988                   i2u831_47 23FC                   i2u568_40 2078  
                 i2u826_47 1F14                   i2u827_47 1826                   i2u828_47 186C  
                 i2u829_47 1908           __CFG_WDTPS$32768 000000        __size_of_updateTime 0068  
               ?_lcdNibble 0001                   _PWM2slow 296A                  _startTMR1 2C02  
               _ADCON0bits 000FC2          ___wmul@multiplier 0021                  _soupAlign 004D  
                 i2___wmul 2B5C              lcdNibble@data 0022               ??_eepromRead 0021  
               printf@flag 0086              lcdNibble@temp 0021                  _soupSteps 0055  
               printf@prec 0083                  main@sodaT 00A1            _calibrateWheels 2102  
                main@soupL 009D           main@prevSodaLoad 009B               ??_displayLog 008A  
      I2C_Master_Read@temp 0023           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
         main@prevSoupLoad 0099                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead 2AEA         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0039           __size_of___awdiv 0084           __size_of___awmod 0070  
       __end_of_displayLog 1570      i2___wmul@multiplicand 0003           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             readADC@channel 0022  
             ??_initialize 0036                 ?_startTMR1 0001           __size_of_lcdInst 000C  
         __size_of_handler 1D12            _I2C_Master_Init 2868           __size_of_readADC 0024  
          _I2C_Master_Read 2B10           __size_of_initLCD 0046            _I2C_Master_Wait 2BF0  
          _I2C_Master_Stop 2C58           __size_of_isdigit 001E            ___lwdiv@divisor 0023  
          ___lwdiv@counter 0025                   __ptext10 2868                   __ptext11 25BC  
                 __ptext20 2C2E                   __ptext12 2806                   __ptext21 28C2  
                 __ptext13 11F4                   __ptext30 2AC2                   __ptext22 2BDA  
                 __ptext14 0E6C                   __ptext31 272E                   __ptext23 2102  
                 __ptext15 2C22                   __ptext40 2C12                   __ptext32 296A  
                 __ptext24 1D1A                   __ptext16 2BA6                   __ptext41 2B5C  
                 __ptext33 2C44                   __ptext25 1570                   __ptext17 2B36  
                 __ptext42 23F6                   __ptext34 26B6                   __ptext26 2C02  
                 __ptext18 2A48                   __ptext43 2538                   __ptext35 2C4E  
                 __ptext27 2B82                   __ptext19 2918                   __ptext36 29B8  
                 __ptext28 228A                   __ptext29 2A8A                   __ptext38 1F0E  
                 __ptext39 1820              __size_of_PWM1 004A              __size_of_PWM2 0078  
       __end_of_homescreen 2868                   _keycheck 2BDA                   _tabState 0051  
            __size_of_main 0E5A                   _currtime FE4E                   _keypress 00C2  
       __end_of_initialize 26B6                ??_lcdNibble 0021                   int$flags 005F  
                 _updateS1 1570                   _updateS2 23F6                   _updateS3 1D1A  
                printf@idx 0080                  printf@val 0084    __end_of_calibrateWheels 228A  
                putch@data 0023   __end_of_I2C_Master_Start 2C68                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write 2C44                 _INTCONbits 000FF2               ??_updateTime 0024  
                 isdigit@c 0023                   intlevel2 0000           ___lwmod@dividend 0028  
         ___lldiv@dividend 0021                   printf@ap 0081         __end_of_updateTime 2806  
  __end_of_I2C_Master_Init 28C2    __end_of_I2C_Master_Read 2B36    __end_of_I2C_Master_Wait 2C02  
  __end_of_I2C_Master_Stop 2C60                lcdInst@data 0023              ??i2_startTMR1 0001  
              ??_startTMR1 0021           ___lldiv@quotient 0029          I2C_Master_Write@d 0022  
          ___lwmod@divisor 002A            ___lwmod@counter 002C               ?_eepromWrite 0021  
