

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 10 02:20:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.41
    58                           ; Generated 25/01/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	mediumconst
    93  00FDEA                     __pmediumconst:
    94                           	opt stack 0
    95  00FDEA  00                 	db	0
    96  00FDEB                     _keys:
    97                           	opt stack 0
    98  00FDEB  31                 	db	49
    99  00FDEC  32                 	db	50
   100  00FDED  33                 	db	51
   101  00FDEE  41                 	db	65
   102  00FDEF  34                 	db	52
   103  00FDF0  35                 	db	53
   104  00FDF1  36                 	db	54
   105  00FDF2  42                 	db	66
   106  00FDF3  37                 	db	55
   107  00FDF4  38                 	db	56
   108  00FDF5  39                 	db	57
   109  00FDF6  43                 	db	67
   110  00FDF7  2A                 	db	42
   111  00FDF8  30                 	db	48
   112  00FDF9  23                 	db	35
   113  00FDFA  44                 	db	68
   114  00FDFB  00                 	db	0
   115  00FDFC                     __end_of_keys:
   116                           	opt stack 0
   117  00FDFC                     _dpowers:
   118                           	opt stack 0
   119  00FDFC  0001               	dw	1
   120  00FDFE  000A               	dw	10
   121  00FE00  0064               	dw	100
   122  00FE02  03E8               	dw	1000
   123  00FE04  2710               	dw	10000
   124  00FE06                     __end_of_dpowers:
   125                           	opt stack 0
   126  00FE06                     _hexpowers:
   127                           	opt stack 0
   128  00FE06  0001               	dw	1
   129  00FE08  0010               	dw	16
   130  00FE0A  0100               	dw	256
   131  00FE0C  1000               	dw	4096
   132  00FE0E                     __end_of_hexpowers:
   133                           	opt stack 0
   134  00FE0E                     _currtime:
   135                           	opt stack 0
   136  00FE0E  30                 	db	48
   137  00FE0F  26                 	db	38
   138  00FE10  13                 	db	19
   139  00FE11  04                 	db	4
   140  00FE12  01                 	db	1
   141  00FE13  03                 	db	3
   142  00FE14  17                 	db	23
   143  00FE15                     __end_of_currtime:
   144                           	opt stack 0
   145  0000                     _ADRES	set	4035
   146  0000                     _TMR1L	set	4046
   147  0000                     _TMR1H	set	4047
   148  0000                     _T1CON	set	4045
   149  0000                     _TMR3L	set	4018
   150  0000                     _TMR3H	set	4019
   151  0000                     _T3CON	set	4017
   152  0000                     _ADCON0bits	set	4034
   153  0000                     _ADCON0	set	4034
   154  0000                     _PIR2bits	set	4001
   155  0000                     _EECON2	set	4007
   156  0000                     _EEDATA	set	4008
   157  0000                     _EECON1bits	set	4006
   158  0000                     _EEADR	set	4009
   159  0000                     _EEADRH	set	4010
   160  0000                     _PORTB	set	3969
   161  0000                     _PORTBbits	set	3969
   162  0000                     _CCP2CONbits	set	4026
   163  0000                     _CCP1CONbits	set	4029
   164  0000                     _SSPBUF	set	4041
   165  0000                     _SSPADD	set	4040
   166  0000                     _SSPCON2	set	4037
   167  0000                     _SSPCON1	set	4038
   168  0000                     _SSPSTAT	set	4039
   169  0000                     _ADRESH	set	4036
   170  0000                     _LATAbits	set	3977
   171  0000                     _LATEbits	set	3981
   172  0000                     _LATCbits	set	3979
   173  0000                     _LATBbits	set	3978
   174  0000                     _LATDbits	set	3980
   175  0000                     _T0CONbits	set	4053
   176  0000                     _CMCONbits	set	4020
   177  0000                     _CVRCON	set	4021
   178  0000                     _ADCON2	set	4032
   179  0000                     _ADCON1	set	4033
   180  0000                     _LATE	set	3981
   181  0000                     _LATD	set	3980
   182  0000                     _LATC	set	3979
   183  0000                     _LATB	set	3978
   184  0000                     _LATA	set	3977
   185  0000                     _T2CON	set	4042
   186  0000                     _CCPR2L	set	4027
   187  0000                     _CCP2CON	set	4026
   188  0000                     _CCPR1L	set	4030
   189  0000                     _CCP1CON	set	4029
   190  0000                     _PR2	set	4043
   191  0000                     _TRISE	set	3990
   192  0000                     _TRISD	set	3989
   193  0000                     _TRISC	set	3988
   194  0000                     _TRISB	set	3987
   195  0000                     _TRISA	set	3986
   196  0000                     _OSCTUNEbits	set	3995
   197  0000                     _OSCCON	set	4051
   198  0000                     _TMR0L	set	4054
   199  0000                     _TMR0H	set	4055
   200  0000                     _T0CON	set	4053
   201  0000                     _INTCONbits	set	4082
   202  0000                     _TMR3ON	set	32136
   203  0000                     _ACKEN	set	32300
   204  0000                     _ACKDT	set	32301
   205  0000                     _RCEN	set	32299
   206  0000                     _PEN	set	32298
   207  0000                     _RSEN	set	32297
   208  0000                     _SEN	set	32296
   209  0000                     _TRISC4	set	31908
   210  0000                     _TRISC3	set	31907
   211  0000                     _PEIE	set	32662
   212  0000                     _TMR1IE	set	31976
   213  0000                     _TMR0IE	set	32661
   214  0000                     _ADFM	set	32263
   215  0000                     _nRBPU	set	32655
   216  0000                     _TMR1ON	set	32360
   217  0000                     _TMR1IF	set	31984
   218  0000                     _TMR0ON	set	32431
   219  0000                     _TMR0IF	set	32658
   220  00FE15                     STR_45:
   221  00FE15  44                 	db	68	;'D'
   222  00FE16  61                 	db	97	;'a'
   223  00FE17  74                 	db	116	;'t'
   224  00FE18  65                 	db	101	;'e'
   225  00FE19  3A                 	db	58	;':'
   226  00FE1A  20                 	db	32
   227  00FE1B  25                 	db	37
   228  00FE1C  30                 	db	48	;'0'
   229  00FE1D  32                 	db	50	;'2'
   230  00FE1E  78                 	db	120	;'x'
   231  00FE1F  2F                 	db	47
   232  00FE20  25                 	db	37
   233  00FE21  30                 	db	48	;'0'
   234  00FE22  32                 	db	50	;'2'
   235  00FE23  78                 	db	120	;'x'
   236  00FE24  2F                 	db	47
   237  00FE25  25                 	db	37
   238  00FE26  30                 	db	48	;'0'
   239  00FE27  32                 	db	50	;'2'
   240  00FE28  78                 	db	120	;'x'
   241  00FE29  00                 	db	0
   242  00FE2A                     STR_56:
   243  00FE2A  30                 	db	48	;'0'
   244  00FE2B  31                 	db	49	;'1'
   245  00FE2C  32                 	db	50	;'2'
   246  00FE2D  33                 	db	51	;'3'
   247  00FE2E  34                 	db	52	;'4'
   248  00FE2F  35                 	db	53	;'5'
   249  00FE30  36                 	db	54	;'6'
   250  00FE31  37                 	db	55	;'7'
   251  00FE32  38                 	db	56	;'8'
   252  00FE33  39                 	db	57	;'9'
   253  00FE34  61                 	db	97	;'a'
   254  00FE35  62                 	db	98	;'b'
   255  00FE36  63                 	db	99	;'c'
   256  00FE37  64                 	db	100	;'d'
   257  00FE38  65                 	db	101	;'e'
   258  00FE39  66                 	db	102	;'f'
   259  00FE3A  00                 	db	0
   260  00FE3B                     STR_51:
   261  00FE3B  53                 	db	83	;'S'
   262  00FE3C  6F                 	db	111	;'o'
   263  00FE3D  64                 	db	100	;'d'
   264  00FE3E  61                 	db	97	;'a'
   265  00FE3F  20                 	db	32
   266  00FE40  77                 	db	119	;'w'
   267  00FE41  2F                 	db	47
   268  00FE42  6F                 	db	111	;'o'
   269  00FE43  20                 	db	32
   270  00FE44  74                 	db	116	;'t'
   271  00FE45  61                 	db	97	;'a'
   272  00FE46  62                 	db	98	;'b'
   273  00FE47  3A                 	db	58	;':'
   274  00FE48  20                 	db	32
   275  00FE49  25                 	db	37
   276  00FE4A  64                 	db	100	;'d'
   277  00FE4B  00                 	db	0
   278  00FE4C                     STR_55:
   279  00FE4C  53                 	db	83	;'S'
   280  00FE4D  6F                 	db	111	;'o'
   281  00FE4E  75                 	db	117	;'u'
   282  00FE4F  70                 	db	112	;'p'
   283  00FE50  20                 	db	32
   284  00FE51  77                 	db	119	;'w'
   285  00FE52  2F                 	db	47
   286  00FE53  6F                 	db	111	;'o'
   287  00FE54  20                 	db	32
   288  00FE55  6C                 	db	108	;'l'
   289  00FE56  62                 	db	98	;'b'
   290  00FE57  6C                 	db	108	;'l'
   291  00FE58  3A                 	db	58	;':'
   292  00FE59  20                 	db	32
   293  00FE5A  25                 	db	37
   294  00FE5B  64                 	db	100	;'d'
   295  00FE5C  00                 	db	0
   296  00FE5D                     STR_42:
   297  00FE5D  52                 	db	82	;'R'
   298  00FE5E  75                 	db	117	;'u'
   299  00FE5F  6E                 	db	110	;'n'
   300  00FE60  23                 	db	35
   301  00FE61  25                 	db	37
   302  00FE62  64                 	db	100	;'d'
   303  00FE63  20                 	db	32
   304  00FE64  20                 	db	32
   305  00FE65  20                 	db	32
   306  00FE66  20                 	db	32
   307  00FE67  41                 	db	65	;'A'
   308  00FE68  3A                 	db	58	;':'
   309  00FE69  4E                 	db	78	;'N'
   310  00FE6A  65                 	db	101	;'e'
   311  00FE6B  78                 	db	120	;'x'
   312  00FE6C  74                 	db	116	;'t'
   313  00FE6D  00                 	db	0
   314  00FE6E                     STR_36:
   315  00FE6E  56                 	db	86	;'V'
   316  00FE6F  69                 	db	105	;'i'
   317  00FE70  65                 	db	101	;'e'
   318  00FE71  77                 	db	119	;'w'
   319  00FE72  20                 	db	32
   320  00FE73  4C                 	db	76	;'L'
   321  00FE74  6F                 	db	111	;'o'
   322  00FE75  67                 	db	103	;'g'
   323  00FE76  73                 	db	115	;'s'
   324  00FE77  3F                 	db	63	;'?'
   325  00FE78  20                 	db	32
   326  00FE79  42                 	db	66	;'B'
   327  00FE7A  3A                 	db	58	;':'
   328  00FE7B  59                 	db	89	;'Y'
   329  00FE7C  65                 	db	101	;'e'
   330  00FE7D  73                 	db	115	;'s'
   331  00FE7E  00                 	db	0
   332  00FE7F                     STR_37:
   333  00FE7F  25                 	db	37
   334  00FE80  30                 	db	48	;'0'
   335  00FE81  32                 	db	50	;'2'
   336  00FE82  78                 	db	120	;'x'
   337  00FE83  2F                 	db	47
   338  00FE84  25                 	db	37
   339  00FE85  30                 	db	48	;'0'
   340  00FE86  32                 	db	50	;'2'
   341  00FE87  78                 	db	120	;'x'
   342  00FE88  2F                 	db	47
   343  00FE89  25                 	db	37
   344  00FE8A  30                 	db	48	;'0'
   345  00FE8B  32                 	db	50	;'2'
   346  00FE8C  78                 	db	120	;'x'
   347  00FE8D  20                 	db	32
   348  00FE8E  00                 	db	0
   349  00FE8F                     STR_49:
   350  00FE8F  53                 	db	83	;'S'
   351  00FE90  6F                 	db	111	;'o'
   352  00FE91  64                 	db	100	;'d'
   353  00FE92  61                 	db	97	;'a'
   354  00FE93  20                 	db	32
   355  00FE94  77                 	db	119	;'w'
   356  00FE95  2F                 	db	47
   357  00FE96  20                 	db	32
   358  00FE97  74                 	db	116	;'t'
   359  00FE98  61                 	db	97	;'a'
   360  00FE99  62                 	db	98	;'b'
   361  00FE9A  3A                 	db	58	;':'
   362  00FE9B  20                 	db	32
   363  00FE9C  25                 	db	37
   364  00FE9D  64                 	db	100	;'d'
   365  00FE9E  00                 	db	0
   366  00FE9F                     STR_53:
   367  00FE9F  53                 	db	83	;'S'
   368  00FEA0  6F                 	db	111	;'o'
   369  00FEA1  75                 	db	117	;'u'
   370  00FEA2  70                 	db	112	;'p'
   371  00FEA3  20                 	db	32
   372  00FEA4  77                 	db	119	;'w'
   373  00FEA5  2F                 	db	47
   374  00FEA6  20                 	db	32
   375  00FEA7  6C                 	db	108	;'l'
   376  00FEA8  62                 	db	98	;'b'
   377  00FEA9  6C                 	db	108	;'l'
   378  00FEAA  3A                 	db	58	;':'
   379  00FEAB  20                 	db	32
   380  00FEAC  25                 	db	37
   381  00FEAD  64                 	db	100	;'d'
   382  00FEAE  00                 	db	0
   383  00FEAF                     STR_47:
   384  00FEAF  53                 	db	83	;'S'
   385  00FEB0  74                 	db	116	;'t'
   386  00FEB1  61                 	db	97	;'a'
   387  00FEB2  72                 	db	114	;'r'
   388  00FEB3  74                 	db	116	;'t'
   389  00FEB4  3A                 	db	58	;':'
   390  00FEB5  20                 	db	32
   391  00FEB6  25                 	db	37
   392  00FEB7  64                 	db	100	;'d'
   393  00FEB8  3A                 	db	58	;':'
   394  00FEB9  25                 	db	37
   395  00FEBA  64                 	db	100	;'d'
   396  00FEBB  3A                 	db	58	;':'
   397  00FEBC  25                 	db	37
   398  00FEBD  64                 	db	100	;'d'
   399  00FEBE  00                 	db	0
   400  00FEBF                     STR_1:
   401  00FEBF  53                 	db	83	;'S'
   402  00FEC0  6F                 	db	111	;'o'
   403  00FEC1  72                 	db	114	;'r'
   404  00FEC2  74                 	db	116	;'t'
   405  00FEC3  69                 	db	105	;'i'
   406  00FEC4  6E                 	db	110	;'n'
   407  00FEC5  67                 	db	103	;'g'
   408  00FEC6  20                 	db	32
   409  00FEC7  63                 	db	99	;'c'
   410  00FEC8  61                 	db	97	;'a'
   411  00FEC9  6E                 	db	110	;'n'
   412  00FECA  73                 	db	115	;'s'
   413  00FECB  2E                 	db	46
   414  00FECC  2E                 	db	46
   415  00FECD  2E                 	db	46
   416  00FECE  00                 	db	0
   417  00FECF                     STR_7:
   418  00FECF  74                 	db	116	;'t'
   419  00FED0  65                 	db	101	;'e'
   420  00FED1  73                 	db	115	;'s'
   421  00FED2  74                 	db	116	;'t'
   422  00FED3  69                 	db	105	;'i'
   423  00FED4  6E                 	db	110	;'n'
   424  00FED5  67                 	db	103	;'g'
   425  00FED6  20                 	db	32
   426  00FED7  53                 	db	83	;'S'
   427  00FED8  20                 	db	32
   428  00FED9  73                 	db	115	;'s'
   429  00FEDA  68                 	db	104	;'h'
   430  00FEDB  61                 	db	97	;'a'
   431  00FEDC  6B                 	db	107	;'k'
   432  00FEDD  65                 	db	101	;'e'
   433  00FEDE  00                 	db	0
   434  00FEDF                     STR_35:
   435  00FEDF  53                 	db	83	;'S'
   436  00FEE0  6F                 	db	111	;'o'
   437  00FEE1  72                 	db	114	;'r'
   438  00FEE2  74                 	db	116	;'t'
   439  00FEE3  20                 	db	32
   440  00FEE4  64                 	db	100	;'d'
   441  00FEE5  6F                 	db	111	;'o'
   442  00FEE6  6E                 	db	110	;'n'
   443  00FEE7  65                 	db	101	;'e'
   444  00FEE8  21                 	db	33
   445  00FEE9  20                 	db	32
   446  00FEEA  41                 	db	65	;'A'
   447  00FEEB  3A                 	db	58	;':'
   448  00FEEC  4E                 	db	78	;'N'
   449  00FEED  6F                 	db	111	;'o'
   450  00FEEE  00                 	db	0
   451  00FEEF                     STR_2:
   452  00FEEF  41                 	db	65	;'A'
   453  00FEF0  6E                 	db	110	;'n'
   454  00FEF1  79                 	db	121	;'y'
   455  00FEF2  20                 	db	32
   456  00FEF3  6B                 	db	107	;'k'
   457  00FEF4  65                 	db	101	;'e'
   458  00FEF5  79                 	db	121	;'y'
   459  00FEF6  20                 	db	32
   460  00FEF7  74                 	db	116	;'t'
   461  00FEF8  6F                 	db	111	;'o'
   462  00FEF9  20                 	db	32
   463  00FEFA  73                 	db	115	;'s'
   464  00FEFB  74                 	db	116	;'t'
   465  00FEFC  6F                 	db	111	;'o'
   466  00FEFD  70                 	db	112	;'p'
   467  00FEFE  00                 	db	0
   468  00FEFF                     STR_8:
   469  00FEFF  74                 	db	116	;'t'
   470  00FF00  65                 	db	101	;'e'
   471  00FF01  73                 	db	115	;'s'
   472  00FF02  74                 	db	116	;'t'
   473  00FF03  69                 	db	105	;'i'
   474  00FF04  6E                 	db	110	;'n'
   475  00FF05  67                 	db	103	;'g'
   476  00FF06  20                 	db	32
   477  00FF07  53                 	db	83	;'S'
   478  00FF08  31                 	db	49	;'1'
   479  00FF09  20                 	db	32
   480  00FF0A  70                 	db	112	;'p'
   481  00FF0B  69                 	db	105	;'i'
   482  00FF0C  6E                 	db	110	;'n'
   483  00FF0D  73                 	db	115	;'s'
   484  00FF0E  00                 	db	0
   485  00FF0F                     STR_10:
   486  00FF0F  74                 	db	116	;'t'
   487  00FF10  65                 	db	101	;'e'
   488  00FF11  73                 	db	115	;'s'
   489  00FF12  74                 	db	116	;'t'
   490  00FF13  69                 	db	105	;'i'
   491  00FF14  6E                 	db	110	;'n'
   492  00FF15  67                 	db	103	;'g'
   493  00FF16  20                 	db	32
   494  00FF17  53                 	db	83	;'S'
   495  00FF18  32                 	db	50	;'2'
   496  00FF19  20                 	db	32
   497  00FF1A  70                 	db	112	;'p'
   498  00FF1B  69                 	db	105	;'i'
   499  00FF1C  6E                 	db	110	;'n'
   500  00FF1D  73                 	db	115	;'s'
   501  00FF1E  00                 	db	0
   502  00FF1F                     STR_11:
   503  00FF1F  74                 	db	116	;'t'
   504  00FF20  65                 	db	101	;'e'
   505  00FF21  73                 	db	115	;'s'
   506  00FF22  74                 	db	116	;'t'
   507  00FF23  69                 	db	105	;'i'
   508  00FF24  6E                 	db	110	;'n'
   509  00FF25  67                 	db	103	;'g'
   510  00FF26  20                 	db	32
   511  00FF27  53                 	db	83	;'S'
   512  00FF28  33                 	db	51	;'3'
   513  00FF29  20                 	db	32
   514  00FF2A  70                 	db	112	;'p'
   515  00FF2B  69                 	db	105	;'i'
   516  00FF2C  6E                 	db	110	;'n'
   517  00FF2D  73                 	db	115	;'s'
   518  00FF2E  00                 	db	0
   519  00FF2F                     STR_4:
   520  00FF2F  74                 	db	116	;'t'
   521  00FF30  65                 	db	101	;'e'
   522  00FF31  73                 	db	115	;'s'
   523  00FF32  74                 	db	116	;'t'
   524  00FF33  69                 	db	105	;'i'
   525  00FF34  6E                 	db	110	;'n'
   526  00FF35  67                 	db	103	;'g'
   527  00FF36  20                 	db	32
   528  00FF37  53                 	db	83	;'S'
   529  00FF38  62                 	db	98	;'b'
   530  00FF39  20                 	db	32
   531  00FF3A  73                 	db	115	;'s'
   532  00FF3B  6C                 	db	108	;'l'
   533  00FF3C  6F                 	db	111	;'o'
   534  00FF3D  77                 	db	119	;'w'
   535  00FF3E  00                 	db	0
   536  00FF3F                     STR_3:
   537  00FF3F  74                 	db	116	;'t'
   538  00FF40  65                 	db	101	;'e'
   539  00FF41  73                 	db	115	;'s'
   540  00FF42  74                 	db	116	;'t'
   541  00FF43  69                 	db	105	;'i'
   542  00FF44  6E                 	db	110	;'n'
   543  00FF45  67                 	db	103	;'g'
   544  00FF46  20                 	db	32
   545  00FF47  53                 	db	83	;'S'
   546  00FF48  66                 	db	102	;'f'
   547  00FF49  20                 	db	32
   548  00FF4A  73                 	db	115	;'s'
   549  00FF4B  6C                 	db	108	;'l'
   550  00FF4C  6F                 	db	111	;'o'
   551  00FF4D  77                 	db	119	;'w'
   552  00FF4E  00                 	db	0
   553  00FF4F                     STR_39:
   554  00FF4F  25                 	db	37
   555  00FF50  30                 	db	48	;'0'
   556  00FF51  32                 	db	50	;'2'
   557  00FF52  78                 	db	120	;'x'
   558  00FF53  3A                 	db	58	;':'
   559  00FF54  25                 	db	37
   560  00FF55  30                 	db	48	;'0'
   561  00FF56  32                 	db	50	;'2'
   562  00FF57  78                 	db	120	;'x'
   563  00FF58  3A                 	db	58	;':'
   564  00FF59  25                 	db	37
   565  00FF5A  30                 	db	48	;'0'
   566  00FF5B  32                 	db	50	;'2'
   567  00FF5C  78                 	db	120	;'x'
   568  00FF5D  00                 	db	0
   569  00FF5E                     STR_15:
   570  00FF5E  74                 	db	116	;'t'
   571  00FF5F  65                 	db	101	;'e'
   572  00FF60  73                 	db	115	;'s'
   573  00FF61  74                 	db	116	;'t'
   574  00FF62  69                 	db	105	;'i'
   575  00FF63  6E                 	db	110	;'n'
   576  00FF64  67                 	db	103	;'g'
   577  00FF65  20                 	db	32
   578  00FF66  54                 	db	84	;'T'
   579  00FF67  4D                 	db	77	;'M'
   580  00FF68  52                 	db	82	;'R'
   581  00FF69  30                 	db	48	;'0'
   582  00FF6A  00                 	db	0
   583  00FF6B                     STR_14:
   584  00FF6B  74                 	db	116	;'t'
   585  00FF6C  65                 	db	101	;'e'
   586  00FF6D  73                 	db	115	;'s'
   587  00FF6E  74                 	db	116	;'t'
   588  00FF6F  69                 	db	105	;'i'
   589  00FF70  6E                 	db	110	;'n'
   590  00FF71  67                 	db	103	;'g'
   591  00FF72  20                 	db	32
   592  00FF73  50                 	db	80	;'P'
   593  00FF74  57                 	db	87	;'W'
   594  00FF75  4D                 	db	77	;'M'
   595  00FF76  31                 	db	49	;'1'
   596  00FF77  00                 	db	0
   597  00FF78                     STR_13:
   598  00FF78  74                 	db	116	;'t'
   599  00FF79  65                 	db	101	;'e'
   600  00FF7A  73                 	db	115	;'s'
   601  00FF7B  74                 	db	116	;'t'
   602  00FF7C  69                 	db	105	;'i'
   603  00FF7D  6E                 	db	110	;'n'
   604  00FF7E  67                 	db	103	;'g'
   605  00FF7F  20                 	db	32
   606  00FF80  50                 	db	80	;'P'
   607  00FF81  57                 	db	87	;'W'
   608  00FF82  4D                 	db	77	;'M'
   609  00FF83  32                 	db	50	;'2'
   610  00FF84  00                 	db	0
   611  00FF85                     STR_43:
   612  00FF85  52                 	db	82	;'R'
   613  00FF86  75                 	db	117	;'u'
   614  00FF87  6E                 	db	110	;'n'
   615  00FF88  74                 	db	116	;'t'
   616  00FF89  69                 	db	105	;'i'
   617  00FF8A  6D                 	db	109	;'m'
   618  00FF8B  65                 	db	101	;'e'
   619  00FF8C  3A                 	db	58	;':'
   620  00FF8D  20                 	db	32
   621  00FF8E  25                 	db	37
   622  00FF8F  64                 	db	100	;'d'
   623  00FF90  00                 	db	0
   624  00FF91                     STR_6:
   625  00FF91  74                 	db	116	;'t'
   626  00FF92  65                 	db	101	;'e'
   627  00FF93  73                 	db	115	;'s'
   628  00FF94  74                 	db	116	;'t'
   629  00FF95  69                 	db	105	;'i'
   630  00FF96  6E                 	db	110	;'n'
   631  00FF97  67                 	db	103	;'g'
   632  00FF98  20                 	db	32
   633  00FF99  53                 	db	83	;'S'
   634  00FF9A  20                 	db	32
   635  00FF9B  62                 	db	98	;'b'
   636  00FF9C  00                 	db	0
   637  00FF9D                     STR_22:
   638  00FF9D  6C                 	db	108	;'l'
   639  00FF9E  61                 	db	97	;'a'
   640  00FF9F  62                 	db	98	;'b'
   641  00FFA0  65                 	db	101	;'e'
   642  00FFA1  6C                 	db	108	;'l'
   643  00FFA2  20                 	db	32
   644  00FFA3  20                 	db	32
   645  00FFA4  20                 	db	32
   646  00FFA5  74                 	db	116	;'t'
   647  00FFA6  61                 	db	97	;'a'
   648  00FFA7  62                 	db	98	;'b'
   649  00FFA8  00                 	db	0
   650  00FFA9                     STR_31:
   651  00FFA9  73                 	db	115	;'s'
   652  00FFAA  6F                 	db	111	;'o'
   653  00FFAB  64                 	db	100	;'d'
   654  00FFAC  61                 	db	97	;'a'
   655  00FFAD  3A                 	db	58	;':'
   656  00FFAE  20                 	db	32
   657  00FFAF  25                 	db	37
   658  00FFB0  78                 	db	120	;'x'
   659  00FFB1  20                 	db	32
   660  00FFB2  25                 	db	37
   661  00FFB3  64                 	db	100	;'d'
   662  00FFB4  00                 	db	0
   663  00FFB5                     STR_25:
   664  00FFB5  73                 	db	115	;'s'
   665  00FFB6  6F                 	db	111	;'o'
   666  00FFB7  75                 	db	117	;'u'
   667  00FFB8  70                 	db	112	;'p'
   668  00FFB9  3A                 	db	58	;':'
   669  00FFBA  20                 	db	32
   670  00FFBB  25                 	db	37
   671  00FFBC  78                 	db	120	;'x'
   672  00FFBD  20                 	db	32
   673  00FFBE  25                 	db	37
   674  00FFBF  64                 	db	100	;'d'
   675  00FFC0  00                 	db	0
   676  00FFC1                     STR_5:
   677  00FFC1  74                 	db	116	;'t'
   678  00FFC2  65                 	db	101	;'e'
   679  00FFC3  73                 	db	115	;'s'
   680  00FFC4  74                 	db	116	;'t'
   681  00FFC5  69                 	db	105	;'i'
   682  00FFC6  6E                 	db	110	;'n'
   683  00FFC7  67                 	db	103	;'g'
   684  00FFC8  20                 	db	32
   685  00FFC9  53                 	db	83	;'S'
   686  00FFCA  20                 	db	32
   687  00FFCB  66                 	db	102	;'f'
   688  00FFCC  00                 	db	0
   689  00FFCD                     STR_17:
   690  00FFCD  74                 	db	116	;'t'
   691  00FFCE  65                 	db	101	;'e'
   692  00FFCF  73                 	db	115	;'s'
   693  00FFD0  74                 	db	116	;'t'
   694  00FFD1  69                 	db	105	;'i'
   695  00FFD2  6E                 	db	110	;'n'
   696  00FFD3  67                 	db	103	;'g'
   697  00FFD4  20                 	db	32
   698  00FFD5  49                 	db	73	;'I'
   699  00FFD6  52                 	db	82	;'R'
   700  00FFD7  00                 	db	0
   701  00FFD8                     STR_23:
   702  00FFD8  25                 	db	37
   703  00FFD9  78                 	db	120	;'x'
   704  00FFDA  20                 	db	32
   705  00FFDB  20                 	db	32
   706  00FFDC  20                 	db	32
   707  00FFDD  20                 	db	32
   708  00FFDE  20                 	db	32
   709  00FFDF  20                 	db	32
   710  00FFE0  00                 	db	0
   711  00FFE1                     STR_40:
   712  00FFE1  20                 	db	32
   713  00FFE2  41                 	db	65	;'A'
   714  00FFE3  3A                 	db	58	;':'
   715  00FFE4  4C                 	db	76	;'L'
   716  00FFE5  6F                 	db	111	;'o'
   717  00FFE6  67                 	db	103	;'g'
   718  00FFE7  73                 	db	115	;'s'
   719  00FFE8  00                 	db	0
   720  00FFE9                     STR_38:
   721  00FFE9  33                 	db	51	;'3'
   722  00FFEA  3A                 	db	58	;':'
   723  00FFEB  53                 	db	83	;'S'
   724  00FFEC  74                 	db	116	;'t'
   725  00FFED  61                 	db	97	;'a'
   726  00FFEE  72                 	db	114	;'r'
   727  00FFEF  74                 	db	116	;'t'
   728  00FFF0  00                 	db	0
   729  00FFF1                     STR_41:
   730  00FFF1  25                 	db	37
   731  00FFF2  64                 	db	100	;'d'
   732  00FFF3  20                 	db	32
   733  00FFF4  25                 	db	37
   734  00FFF5  64                 	db	100	;'d'
   735  00FFF6  00                 	db	0
   736  00FFF7                     STR_18:
   737  00FFF7  25                 	db	37
   738  00FFF8  78                 	db	120	;'x'
   739  00FFF9  20                 	db	32
   740  00FFFA  00                 	db	0
   741  00FFFB                     STR_26:
   742  00FFFB  20                 	db	32
   743  00FFFC  25                 	db	37
   744  00FFFD  78                 	db	120	;'x'
   745  00FFFE  00                 	db	0
   746  0000                     
   747                           ; #config settings
   748  00FFFF  00                 	db	0	; dummy byte at the end
   749  0000                     
   750                           	psect	cinit
   751  00247A                     __pcinit:
   752                           	opt stack 0
   753  00247A                     start_initialization:
   754                           	opt stack 0
   755  00247A                     __initialization:
   756                           	opt stack 0
   757                           
   758                           ; Clear objects allocated to BANK0 (15 bytes)
   759  00247A  EE00  F09E         	lfsr	0,__pbssBANK0
   760  00247E  0E0F               	movlw	15
   761  002480                     clear_0:
   762  002480  6AEE               	clrf	postinc0,c
   763  002482  06E8               	decf	wreg,f,c
   764  002484  E1FD               	bnz	clear_0
   765                           
   766                           ; Clear objects allocated to COMRAM (31 bytes)
   767  002486  EE00  F042         	lfsr	0,__pbssCOMRAM
   768  00248A  0E1F               	movlw	31
   769  00248C                     clear_1:
   770  00248C  6AEE               	clrf	postinc0,c
   771  00248E  06E8               	decf	wreg,f,c
   772  002490  E1FD               	bnz	clear_1
   773  002492                     end_of_initialization:
   774                           	opt stack 0
   775  002492                     __end_of__initialization:
   776                           	opt stack 0
   777  002492  9061               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   778  002494  9261               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   779  002496  0E00               	movlw	low (__Lmediumconst shr (0+16))
   780  002498  6EF8               	movwf	tblptru,c
   781  00249A  0100               	movlb	0
   782  00249C  EF09  F000         	goto	_main	;jump to C main() function
   783                           tblptru	equ	0xFF8
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           
   787                           	psect	bssCOMRAM
   788  000042                     __pbssCOMRAM:
   789                           	opt stack 0
   790  000042                     _t3:
   791                           	opt stack 0
   792  000042                     	ds	2
   793  000044                     _t2:
   794                           	opt stack 0
   795  000044                     	ds	2
   796  000046                     _t:
   797                           	opt stack 0
   798  000046                     	ds	2
   799  000048                     _s3:
   800                           	opt stack 0
   801  000048                     	ds	2
   802  00004A                     _s2:
   803                           	opt stack 0
   804  00004A                     	ds	2
   805  00004C                     _s1:
   806                           	opt stack 0
   807  00004C                     	ds	2
   808  00004E                     _soupAlign:
   809                           	opt stack 0
   810  00004E                     	ds	2
   811  000050                     _sodaAlign:
   812                           	opt stack 0
   813  000050                     	ds	2
   814  000052                     _labelState:
   815                           	opt stack 0
   816  000052                     	ds	2
   817  000054                     _tabState:
   818                           	opt stack 0
   819  000054                     	ds	2
   820  000056                     _sodaSteps:
   821                           	opt stack 0
   822  000056                     	ds	2
   823  000058                     _soupSteps:
   824                           	opt stack 0
   825  000058                     	ds	2
   826  00005A                     _S3mode:
   827                           	opt stack 0
   828  00005A                     	ds	2
   829  00005C                     _S1mode:
   830                           	opt stack 0
   831  00005C                     	ds	2
   832  00005E                     _seconds:
   833                           	opt stack 0
   834  00005E                     	ds	2
   835  000060                     _keypress:
   836                           	opt stack 0
   837  000060                     	ds	1
   838                           tblptru	equ	0xFF8
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           
   842                           	psect	bssBANK0
   843  00009E                     __pbssBANK0:
   844                           	opt stack 0
   845  00009E                     _time:
   846                           	opt stack 0
   847  00009E                     	ds	7
   848  0000A5                     _curr:
   849                           	opt stack 0
   850  0000A5                     	ds	2
   851  0000A7                     _prev:
   852                           	opt stack 0
   853  0000A7                     	ds	2
   854  0000A9                     _s:
   855                           	opt stack 0
   856  0000A9                     	ds	2
   857  0000AB                     _S2mode:
   858                           	opt stack 0
   859  0000AB                     	ds	2
   860                           tblptru	equ	0xFF8
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           
   864                           	psect	cstackBANK0
   865  000080                     __pcstackBANK0:
   866                           	opt stack 0
   867  000080                     main@soupLoad:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x0
   871  000080                     	ds	2
   872  000082                     main@sodaLoad:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x2
   876  000082                     	ds	2
   877  000084                     main@ee:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x4
   881  000084                     	ds	2
   882  000086                     main@s:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x6
   886  000086                     	ds	2
   887  000088                     main@soupL:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x8
   891  000088                     	ds	2
   892  00008A                     main@soupNL:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0xA
   896  00008A                     	ds	2
   897  00008C                     main@sodaT:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0xC
   901  00008C                     	ds	2
   902  00008E                     main@sodaNT:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0xE
   906  00008E                     	ds	2
   907  000090                     main@prevSoupLoad:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x10
   911  000090                     	ds	2
   912  000092                     main@prevSodaLoad:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x12
   916  000092                     	ds	2
   917  000094                     main@soupSort:
   918                           	opt stack 0
   919                           
   920                           ; 2 bytes @ 0x14
   921  000094                     	ds	2
   922  000096                     main@sodaSort:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x16
   926  000096                     	ds	2
   927  000098                     main@prevSodaIR:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x18
   931  000098                     	ds	2
   932  00009A                     main@prevSoupIR:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x1A
   936  00009A                     	ds	2
   937  00009C                     main@standby:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x1C
   941  00009C                     	ds	2
   942                           tblptru	equ	0xFF8
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           
   946                           	psect	cstackCOMRAM
   947  000001                     __pcstackCOMRAM:
   948                           	opt stack 0
   949  000001                     ?___awmod:
   950                           	opt stack 0
   951  000001                     updateS2@mode:
   952                           	opt stack 0
   953  000001                     ___awmod@dividend:
   954                           	opt stack 0
   955  000001                     i2updateS1@mode:
   956                           	opt stack 0
   957  000001                     i2updateS3@mode:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x0
   961  000001                     	ds	2
   962  000003                     ??_updateS2:
   963  000003                     ??i2_updateS1:
   964  000003                     ??i2_updateS3:
   965  000003                     ___awmod@divisor:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x2
   969  000003                     	ds	2
   970  000005                     ___awmod@counter:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x4
   974  000005                     	ds	1
   975  000006                     ___awmod@sign:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x5
   979  000006                     	ds	1
   980  000007                     ??_handler:
   981                           
   982                           ; 1 bytes @ 0x6
   983  000007                     	ds	14
   984  000015                     ??_readADC:
   985  000015                     ??_isdigit:
   986  000015                     ??_I2C_Master_Wait:
   987  000015                     ??_eepromRead:
   988  000015                     ?___wmul:
   989                           	opt stack 0
   990  000015                     ?___lwdiv:
   991                           	opt stack 0
   992  000015                     ?___lldiv:
   993                           	opt stack 0
   994  000015                     lcdNibble@temp:
   995                           	opt stack 0
   996  000015                     eepromWrite@data:
   997                           	opt stack 0
   998  000015                     PWM1@duty:
   999                           	opt stack 0
  1000  000015                     PWM2@duty:
  1001                           	opt stack 0
  1002  000015                     updateS1@mode:
  1003                           	opt stack 0
  1004  000015                     updateS3@mode:
  1005                           	opt stack 0
  1006  000015                     ___wmul@multiplier:
  1007                           	opt stack 0
  1008  000015                     ___lwdiv@dividend:
  1009                           	opt stack 0
  1010  000015                     ___lldiv@dividend:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0x14
  1014  000015                     	ds	1
  1015  000016                     ??_eepromWrite:
  1016  000016                     lcdNibble@data:
  1017                           	opt stack 0
  1018  000016                     I2C_Master_Read@a:
  1019                           	opt stack 0
  1020  000016                     readADC@channel:
  1021                           	opt stack 0
  1022  000016                     _isdigit$1450:
  1023                           	opt stack 0
  1024  000016                     I2C_Master_Write@d:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x15
  1028  000016                     	ds	1
  1029  000017                     ??_updateS1:
  1030  000017                     ??_updateS3:
  1031  000017                     ??_PWM2:
  1032  000017                     ??_PWM1:
  1033  000017                     lcdInst@data:
  1034                           	opt stack 0
  1035  000017                     putch@data:
  1036                           	opt stack 0
  1037  000017                     I2C_Master_Read@temp:
  1038                           	opt stack 0
  1039  000017                     eepromRead@address:
  1040                           	opt stack 0
  1041  000017                     isdigit@c:
  1042                           	opt stack 0
  1043  000017                     ___wmul@multiplicand:
  1044                           	opt stack 0
  1045  000017                     ___lwdiv@divisor:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x16
  1049  000017                     	ds	1
  1050  000018                     ??_initLCD:
  1051  000018                     updateTime@j:
  1052                           	opt stack 0
  1053  000018                     eepromWrite@address:
  1054                           	opt stack 0
  1055  000018                     calibrateWheels@prev:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x17
  1059  000018                     	ds	1
  1060  000019                     ___lwdiv@counter:
  1061                           	opt stack 0
  1062  000019                     addRun@dur:
  1063                           	opt stack 0
  1064  000019                     ___wmul@product:
  1065                           	opt stack 0
  1066  000019                     ___lldiv@divisor:
  1067                           	opt stack 0
  1068                           
  1069                           ; 4 bytes @ 0x18
  1070  000019                     	ds	1
  1071  00001A                     calibrateWheels@i:
  1072                           	opt stack 0
  1073  00001A                     ___lwdiv@quotient:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x19
  1077  00001A                     	ds	1
  1078  00001B                     addRun@year:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1A
  1082  00001B                     	ds	1
  1083  00001C                     ?___lwmod:
  1084                           	opt stack 0
  1085  00001C                     ___lwmod@dividend:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x1B
  1089  00001C                     	ds	1
  1090  00001D                     addRun@month:
  1091                           	opt stack 0
  1092  00001D                     ___lldiv@quotient:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x1C
  1096  00001D                     	ds	1
  1097  00001E                     ___lwmod@divisor:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x1D
  1101  00001E                     	ds	1
  1102  00001F                     addRun@date:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x1E
  1106  00001F                     	ds	1
  1107  000020                     ___lwmod@counter:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x1F
  1111  000020                     	ds	1
  1112  000021                     ?_printf:
  1113                           	opt stack 0
  1114  000021                     ___lldiv@counter:
  1115                           	opt stack 0
  1116  000021                     addRun@hours:
  1117                           	opt stack 0
  1118  000021                     printf@f:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x20
  1122  000021                     	ds	1
  1123  000022                     I2C_Master_Init@c:
  1124                           	opt stack 0
  1125                           
  1126                           ; 4 bytes @ 0x21
  1127  000022                     	ds	1
  1128  000023                     addRun@mins:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x22
  1132  000023                     	ds	2
  1133  000025                     addRun@secs:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x24
  1137  000025                     	ds	1
  1138  000026                     ??_I2C_Master_Init:
  1139                           
  1140                           ; 1 bytes @ 0x25
  1141  000026                     	ds	1
  1142  000027                     addRun@sodaT:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x26
  1146  000027                     	ds	2
  1147  000029                     ??_printf:
  1148  000029                     addRun@sodaNT:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x28
  1152  000029                     	ds	1
  1153  00002A                     
  1154                           ; 1 bytes @ 0x29
  1155  00002A                     	ds	1
  1156  00002B                     addRun@soupL:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x2A
  1160  00002B                     	ds	2
  1161  00002D                     printf@idx:
  1162                           	opt stack 0
  1163  00002D                     addRun@soupNL:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x2C
  1167  00002D                     	ds	1
  1168  00002E                     printf@ap:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x2D
  1172  00002E                     	ds	1
  1173  00002F                     ??_addRun:
  1174                           
  1175                           ; 1 bytes @ 0x2E
  1176  00002F                     	ds	1
  1177  000030                     printf@prec:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x2F
  1181  000030                     	ds	1
  1182  000031                     printf@val:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x30
  1186  000031                     	ds	1
  1187  000032                     addRun@currRun:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x31
  1191  000032                     	ds	1
  1192  000033                     printf@flag:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x32
  1196  000033                     	ds	1
  1197  000034                     printf@width:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x33
  1201  000034                     	ds	2
  1202  000036                     printf@c:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x35
  1206  000036                     	ds	1
  1207  000037                     displayLog@run:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x36
  1211  000037                     	ds	2
  1212  000039                     ??_displayLog:
  1213                           
  1214                           ; 1 bytes @ 0x38
  1215  000039                     	ds	3
  1216  00003C                     displayLog@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x3B
  1220  00003C                     	ds	2
  1221  00003E                     displayLog@currRun:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x3D
  1225  00003E                     	ds	2
  1226  000040                     ??_main:
  1227                           
  1228                           ; 1 bytes @ 0x3F
  1229  000040                     	ds	2
  1230                           tblptru	equ	0xFF8
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           
  1234 ;;
  1235 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1236 ;;
  1237 ;; *************** function _main *****************
  1238 ;; Defined at:
  1239 ;;		line 132 in file "main.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  standby         2   28[BANK0 ] int 
  1244 ;;  prevSoupIR      2   26[BANK0 ] int 
  1245 ;;  prevSodaIR      2   24[BANK0 ] int 
  1246 ;;  sodaSort        2   22[BANK0 ] int 
  1247 ;;  soupSort        2   20[BANK0 ] int 
  1248 ;;  prevSodaLoad    2   18[BANK0 ] int 
  1249 ;;  prevSoupLoad    2   16[BANK0 ] int 
  1250 ;;  sodaNT          2   14[BANK0 ] int 
  1251 ;;  sodaT           2   12[BANK0 ] int 
  1252 ;;  soupNL          2   10[BANK0 ] int 
  1253 ;;  soupL           2    8[BANK0 ] int 
  1254 ;;  s               2    6[BANK0 ] int 
  1255 ;;  ee              2    4[BANK0 ] int 
  1256 ;;  sodaLoad        2    2[BANK0 ] int 
  1257 ;;  soupLoad        2    0[BANK0 ] int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2  177[None  ] int 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Totals:         2      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;Total ram usage:       32 bytes
  1272 ;; Hardware stack levels required when called:    6
  1273 ;; This function calls:
  1274 ;;		_PWM1
  1275 ;;		_PWM1off
  1276 ;;		_PWM2
  1277 ;;		_PWM2off
  1278 ;;		_addRun
  1279 ;;		_calibrateWheels
  1280 ;;		_displayLog
  1281 ;;		_homescreen
  1282 ;;		_initialize
  1283 ;;		_keycheck
  1284 ;;		_keyinterrupt
  1285 ;;		_lcdInst
  1286 ;;		_printf
  1287 ;;		_readADC
  1288 ;;		_startTMR1
  1289 ;;		_updateS1
  1290 ;;		_updateS3
  1291 ;;		_updateTime
  1292 ;; This function is called by:
  1293 ;;		Startup code after reset
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           	psect	text0
  1298  000012                     __ptext0:
  1299                           	opt stack 0
  1300  000012                     _main:
  1301                           	opt stack 25
  1302                           
  1303                           ;main.c: 133: LATA = 0;
  1304                           
  1305                           ;incstack = 0
  1306  000012  0E00               	movlw	0
  1307  000014  6E89               	movwf	3977,c	;volatile
  1308                           
  1309                           ;main.c: 135: initialize();
  1310  000016  EC25  F010         	call	_initialize	;wreg free
  1311                           
  1312                           ;main.c: 136: int standby = 1;
  1313  00001A  0E00               	movlw	0
  1314  00001C  0100               	movlb	0	; () banked
  1315  00001E  6F9D               	movwf	(main@standby+1)& (0+255),b
  1316  000020  0E01               	movlw	1
  1317  000022  6F9C               	movwf	main@standby& (0+255),b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 137: int s = 0;
  1321  000024  0E00               	movlw	0
  1322  000026  0100               	movlb	0	; () banked
  1323  000028  6F87               	movwf	(main@s+1)& (0+255),b
  1324  00002A  0E00               	movlw	0
  1325  00002C  6F86               	movwf	main@s& (0+255),b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 138: int prevSodaIR;
  1329                           ;main.c: 139: int prevSoupIR;
  1330                           ;main.c: 141: int soupLoad = 1;
  1331  00002E  0E00               	movlw	0
  1332  000030  0100               	movlb	0	; () banked
  1333  000032  6F81               	movwf	(main@soupLoad+1)& (0+255),b
  1334  000034  0E01               	movlw	1
  1335  000036  6F80               	movwf	main@soupLoad& (0+255),b
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 142: int sodaLoad = 1;
  1339  000038  0E00               	movlw	0
  1340  00003A  0100               	movlb	0	; () banked
  1341  00003C  6F83               	movwf	(main@sodaLoad+1)& (0+255),b
  1342  00003E  0E01               	movlw	1
  1343  000040  6F82               	movwf	main@sodaLoad& (0+255),b
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;main.c: 145: int soupSort;
  1347                           ;main.c: 146: int prevSoupLoad;
  1348                           ;main.c: 147: int sodaSort;
  1349                           ;main.c: 148: int prevSodaLoad;
  1350                           ;main.c: 150: int soupL;
  1351                           ;main.c: 151: int soupNL ;
  1352                           ;main.c: 152: int sodaT;
  1353                           ;main.c: 153: int sodaNT;
  1354                           ;main.c: 155: T0CON = 0b00010111;
  1355  000042  0E17               	movlw	23
  1356  000044  6ED5               	movwf	4053,c	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 156: TMR0H = 0b10000101;
  1360  000046  0E85               	movlw	133
  1361  000048  6ED7               	movwf	4055,c	;volatile
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 157: TMR0L = 0b10101110;
  1365  00004A  0EAE               	movlw	174
  1366  00004C  6ED6               	movwf	4054,c	;volatile
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 158: T0CONbits.TMR0ON = 1;
  1370  00004E  8ED5               	bsf	4053,7,c	;volatile
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 159: startTMR1();
  1374  000050  ECB4  F012         	call	_startTMR1	;wreg free
  1375                           
  1376                           ;main.c: 162: int ee = 0x100;
  1377  000054  0E01               	movlw	1
  1378  000056  0100               	movlb	0	; () banked
  1379  000058  6F85               	movwf	(main@ee+1)& (0+255),b
  1380  00005A  0E00               	movlw	0
  1381  00005C  6F84               	movwf	main@ee& (0+255),b
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 164: _delay((unsigned long)((10)*(32000000/4000.0)));
  1385  00005E  0E68               	movlw	104
  1386  000060  6E40               	movwf	??_main& (0+255),c
  1387  000062  0EE4               	movlw	228
  1388  000064                     u7417:
  1389  000064  2EE8               	decfsz	wreg,f,c
  1390  000066  D7FE               	bra	u7417
  1391  000068  2E40               	decfsz	??_main& (0+255),f,c
  1392  00006A  D7FC               	bra	u7417
  1393  00006C  D000               	nop2	
  1394  00006E                     l5636:
  1395                           
  1396                           ;main.c: 168: if (standby == 1){
  1397  00006E  0100               	movlb	0	; () banked
  1398  000070  059C               	decf	main@standby& (0+255),w,b
  1399  000072  0100               	movlb	0	; () banked
  1400  000074  119D               	iorwf	(main@standby+1)& (0+255),w,b
  1401  000076  A4D8               	btfss	status,2,c
  1402  000078  D0BA               	goto	l5684
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 169: keypress = (0);
  1406  00007A  0E00               	movlw	0
  1407  00007C  6E60               	movwf	_keypress,c	;volatile
  1408                           
  1409                           ;main.c: 170: while(keypress == (0)){
  1410  00007E  D006               	goto	l5646
  1411  000080                     l5640:
  1412                           
  1413                           ;main.c: 171: updateTime();
  1414  000080  EC99  F010         	call	_updateTime	;wreg free
  1415                           
  1416                           ;main.c: 172: homescreen();
  1417  000084  ECCD  F010         	call	_homescreen	;wreg free
  1418                           
  1419                           ;main.c: 173: keyinterrupt();
  1420  000088  EC97  F012         	call	_keyinterrupt	;wreg free
  1421  00008C                     l5646:
  1422  00008C  5060               	movf	_keypress,w,c	;volatile
  1423  00008E  B4D8               	btfsc	status,2,c
  1424  000090  D7F7               	goto	l5640
  1425                           
  1426                           ;main.c: 174: }
  1427                           ;main.c: 176: if(keypress == 2){
  1428  000092  0E02               	movlw	2
  1429  000094  1860               	xorwf	_keypress,w,c	;volatile
  1430  000096  A4D8               	btfss	status,2,c
  1431  000098  D07E               	goto	l5676
  1432                           
  1433                           ;main.c: 178: standby = 0;
  1434  00009A  0E00               	movlw	0
  1435  00009C  0100               	movlb	0	; () banked
  1436  00009E  6F9D               	movwf	(main@standby+1)& (0+255),b
  1437  0000A0  0E00               	movlw	0
  1438  0000A2  6F9C               	movwf	main@standby& (0+255),b
  1439                           
  1440                           ;main.c: 179: seconds = 0;
  1441  0000A4  0E00               	movlw	0
  1442  0000A6  6E5F               	movwf	_seconds+1,c
  1443  0000A8  0E00               	movlw	0
  1444  0000AA  6E5E               	movwf	_seconds,c
  1445                           
  1446                           ;main.c: 180: labelState = 0;
  1447  0000AC  0E00               	movlw	0
  1448  0000AE  6E53               	movwf	_labelState+1,c
  1449  0000B0  0E00               	movlw	0
  1450  0000B2  6E52               	movwf	_labelState,c
  1451                           
  1452                           ;main.c: 181: soupSort = 0;
  1453  0000B4  0E00               	movlw	0
  1454  0000B6  0100               	movlb	0	; () banked
  1455  0000B8  6F95               	movwf	(main@soupSort+1)& (0+255),b
  1456  0000BA  0E00               	movlw	0
  1457  0000BC  6F94               	movwf	main@soupSort& (0+255),b
  1458                           
  1459                           ;main.c: 182: tabState = 0;
  1460  0000BE  0E00               	movlw	0
  1461  0000C0  6E55               	movwf	_tabState+1,c
  1462  0000C2  0E00               	movlw	0
  1463  0000C4  6E54               	movwf	_tabState,c
  1464                           
  1465                           ;main.c: 183: sodaSort = 0;
  1466  0000C6  0E00               	movlw	0
  1467  0000C8  0100               	movlb	0	; () banked
  1468  0000CA  6F97               	movwf	(main@sodaSort+1)& (0+255),b
  1469  0000CC  0E00               	movlw	0
  1470  0000CE  6F96               	movwf	main@sodaSort& (0+255),b
  1471                           
  1472                           ;main.c: 184: soupSteps = 0;
  1473  0000D0  0E00               	movlw	0
  1474  0000D2  6E59               	movwf	_soupSteps+1,c
  1475  0000D4  0E00               	movlw	0
  1476  0000D6  6E58               	movwf	_soupSteps,c
  1477                           
  1478                           ;main.c: 185: sodaSteps = 0;
  1479  0000D8  0E00               	movlw	0
  1480  0000DA  6E57               	movwf	_sodaSteps+1,c
  1481  0000DC  0E00               	movlw	0
  1482  0000DE  6E56               	movwf	_sodaSteps,c
  1483                           
  1484                           ;main.c: 186: soupL = 0;
  1485  0000E0  0E00               	movlw	0
  1486  0000E2  0100               	movlb	0	; () banked
  1487  0000E4  6F89               	movwf	(main@soupL+1)& (0+255),b
  1488  0000E6  0E00               	movlw	0
  1489  0000E8  6F88               	movwf	main@soupL& (0+255),b
  1490                           
  1491                           ;main.c: 187: soupNL = 0;
  1492  0000EA  0E00               	movlw	0
  1493  0000EC  0100               	movlb	0	; () banked
  1494  0000EE  6F8B               	movwf	(main@soupNL+1)& (0+255),b
  1495  0000F0  0E00               	movlw	0
  1496  0000F2  6F8A               	movwf	main@soupNL& (0+255),b
  1497                           
  1498                           ;main.c: 188: sodaT = 0;
  1499  0000F4  0E00               	movlw	0
  1500  0000F6  0100               	movlb	0	; () banked
  1501  0000F8  6F8D               	movwf	(main@sodaT+1)& (0+255),b
  1502  0000FA  0E00               	movlw	0
  1503  0000FC  6F8C               	movwf	main@sodaT& (0+255),b
  1504                           
  1505                           ;main.c: 189: sodaNT = 0;
  1506  0000FE  0E00               	movlw	0
  1507  000100  0100               	movlb	0	; () banked
  1508  000102  6F8F               	movwf	(main@sodaNT+1)& (0+255),b
  1509  000104  0E00               	movlw	0
  1510  000106  6F8E               	movwf	main@sodaNT& (0+255),b
  1511                           
  1512                           ;main.c: 190: prevSoupIR = 0;
  1513  000108  0E00               	movlw	0
  1514  00010A  0100               	movlb	0	; () banked
  1515  00010C  6F9B               	movwf	(main@prevSoupIR+1)& (0+255),b
  1516  00010E  0E00               	movlw	0
  1517  000110  6F9A               	movwf	main@prevSoupIR& (0+255),b
  1518                           
  1519                           ;main.c: 191: prevSodaIR = 0;
  1520  000112  0E00               	movlw	0
  1521  000114  0100               	movlb	0	; () banked
  1522  000116  6F99               	movwf	(main@prevSodaIR+1)& (0+255),b
  1523  000118  0E00               	movlw	0
  1524  00011A  6F98               	movwf	main@prevSodaIR& (0+255),b
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 193: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1528  00011C  0E01               	movlw	1
  1529  00011E  ECCA  F012         	call	_lcdInst
  1530  000122  0E34               	movlw	52
  1531  000124  6E40               	movwf	??_main& (0+255),c
  1532  000126  0EF2               	movlw	242
  1533  000128                     u7427:
  1534  000128  2EE8               	decfsz	wreg,f,c
  1535  00012A  D7FE               	bra	u7427
  1536  00012C  2E40               	decfsz	??_main& (0+255),f,c
  1537  00012E  D7FC               	bra	u7427
  1538                           
  1539                           ;main.c: 194: printf("Sorting cans...");
  1540  000130  0EBF               	movlw	low STR_1
  1541  000132  6E21               	movwf	printf@f,c
  1542  000134  0EFE               	movlw	high STR_1
  1543  000136  6E22               	movwf	printf@f+1,c
  1544  000138  EC63  F008         	call	_printf	;wreg free
  1545                           
  1546                           ;main.c: 195: lcdInst(0b11000000);;
  1547  00013C  0EC0               	movlw	192
  1548  00013E  ECCA  F012         	call	_lcdInst
  1549                           
  1550                           ;main.c: 196: printf("Any key to stop");
  1551  000142  0EEF               	movlw	low STR_2
  1552  000144  6E21               	movwf	printf@f,c
  1553  000146  0EFE               	movlw	high STR_2
  1554  000148  6E22               	movwf	printf@f+1,c
  1555  00014A  EC63  F008         	call	_printf	;wreg free
  1556                           
  1557                           ;main.c: 198: while(soupSteps < 8){
  1558  00014E  D005               	goto	l5664
  1559  000150                     l5662:
  1560                           
  1561                           ;main.c: 199: S2mode = 2;
  1562  000150  0E00               	movlw	0
  1563  000152  0100               	movlb	0	; () banked
  1564  000154  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1565  000156  0E02               	movlw	2
  1566  000158  6FAB               	movwf	_S2mode& (0+255),b
  1567  00015A                     l5664:
  1568  00015A  BE59               	btfsc	_soupSteps+1,7,c
  1569  00015C  D7F9               	goto	l5662
  1570  00015E  5059               	movf	_soupSteps+1,w,c
  1571  000160  E104               	bnz	l5666
  1572  000162  0E08               	movlw	8
  1573  000164  5C58               	subwf	_soupSteps,w,c
  1574  000166  A0D8               	btfss	status,0,c
  1575  000168  D7F3               	goto	l5662
  1576  00016A                     l5666:
  1577                           
  1578                           ;main.c: 200: }
  1579                           ;main.c: 201: S2mode = 4;
  1580  00016A  0E00               	movlw	0
  1581  00016C  0100               	movlb	0	; () banked
  1582  00016E  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1583  000170  0E04               	movlw	4
  1584  000172  6FAB               	movwf	_S2mode& (0+255),b
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;main.c: 202: calibrateWheels();
  1588  000174  EC95  F00C         	call	_calibrateWheels	;wreg free
  1589                           
  1590                           ;main.c: 203: PWM2(400);
  1591  000178  0E01               	movlw	1
  1592  00017A  6E16               	movwf	PWM2@duty+1,c
  1593  00017C  0E90               	movlw	144
  1594  00017E  6E15               	movwf	PWM2@duty,c
  1595  000180  EC7F  F011         	call	_PWM2	;wreg free
  1596                           
  1597                           ;main.c: 204: PWM1(400);
  1598  000184  0E01               	movlw	1
  1599  000186  6E16               	movwf	PWM1@duty+1,c
  1600  000188  0E90               	movlw	144
  1601  00018A  6E15               	movwf	PWM1@duty,c
  1602  00018C  ECA4  F011         	call	_PWM1	;wreg free
  1603                           
  1604                           ;main.c: 206: keypress = (0);
  1605  000190  0E00               	movlw	0
  1606  000192  6E60               	movwf	_keypress,c	;volatile
  1607                           
  1608                           ;main.c: 208: }
  1609  000194  D76C               	goto	l5636
  1610  000196                     l5676:
  1611                           
  1612                           ;main.c: 209: else if(keypress == 3){
  1613  000196  0E03               	movlw	3
  1614  000198  1860               	xorwf	_keypress,w,c	;volatile
  1615  00019A  A4D8               	btfss	status,2,c
  1616  00019C  D019               	goto	l5680
  1617                           
  1618                           ;main.c: 210: displayLog(1);
  1619  00019E  0E00               	movlw	0
  1620  0001A0  6E38               	movwf	displayLog@run+1,c
  1621  0001A2  0E01               	movlw	1
  1622  0001A4  6E37               	movwf	displayLog@run,c
  1623  0001A6  ECB5  F006         	call	_displayLog	;wreg free
  1624                           
  1625                           ;main.c: 211: displayLog(2);
  1626  0001AA  0E00               	movlw	0
  1627  0001AC  6E38               	movwf	displayLog@run+1,c
  1628  0001AE  0E02               	movlw	2
  1629  0001B0  6E37               	movwf	displayLog@run,c
  1630  0001B2  ECB5  F006         	call	_displayLog	;wreg free
  1631                           
  1632                           ;main.c: 212: displayLog(3);
  1633  0001B6  0E00               	movlw	0
  1634  0001B8  6E38               	movwf	displayLog@run+1,c
  1635  0001BA  0E03               	movlw	3
  1636  0001BC  6E37               	movwf	displayLog@run,c
  1637  0001BE  ECB5  F006         	call	_displayLog	;wreg free
  1638                           
  1639                           ;main.c: 213: displayLog(4);
  1640  0001C2  0E00               	movlw	0
  1641  0001C4  6E38               	movwf	displayLog@run+1,c
  1642  0001C6  0E04               	movlw	4
  1643  0001C8  6E37               	movwf	displayLog@run,c
  1644  0001CA  ECB5  F006         	call	_displayLog	;wreg free
  1645                           
  1646                           ;main.c: 214: }
  1647  0001CE  D74F               	goto	l5636
  1648  0001D0                     l5680:
  1649                           
  1650                           ;main.c: 215: else if(keypress == 15 ) {
  1651  0001D0  0E0F               	movlw	15
  1652  0001D2  1860               	xorwf	_keypress,w,c	;volatile
  1653  0001D4  A4D8               	btfss	status,2,c
  1654  0001D6  D74B               	goto	l5636
  1655                           
  1656                           ;main.c: 216: standby = 2;
  1657  0001D8  0E00               	movlw	0
  1658  0001DA  0100               	movlb	0	; () banked
  1659  0001DC  6F9D               	movwf	(main@standby+1)& (0+255),b
  1660  0001DE  0E02               	movlw	2
  1661  0001E0  6F9C               	movwf	main@standby& (0+255),b
  1662                           
  1663                           ;main.c: 217: s = 1;
  1664  0001E2  0E00               	movlw	0
  1665  0001E4  0100               	movlb	0	; () banked
  1666  0001E6  6F87               	movwf	(main@s+1)& (0+255),b
  1667  0001E8  0E01               	movlw	1
  1668  0001EA  6F86               	movwf	main@s& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;main.c: 218: }
  1672                           ;main.c: 220: }
  1673                           
  1674                           ; BSR set to: 0
  1675                           
  1676                           ; BSR set to: 0
  1677  0001EC  D740               	goto	l5636
  1678  0001EE                     l5684:
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 221: else if(standby == 2){
  1682  0001EE  0E02               	movlw	2
  1683  0001F0  0100               	movlb	0	; () banked
  1684  0001F2  199C               	xorwf	main@standby& (0+255),w,b
  1685  0001F4  0100               	movlb	0	; () banked
  1686  0001F6  119D               	iorwf	(main@standby+1)& (0+255),w,b
  1687  0001F8  A4D8               	btfss	status,2,c
  1688  0001FA  D278               	goto	l5950
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 223: keypress = (0);
  1692  0001FC  0E00               	movlw	0
  1693  0001FE  6E60               	movwf	_keypress,c	;volatile
  1694                           
  1695                           ;main.c: 225: keypress = (0);
  1696  000200  0E00               	movlw	0
  1697  000202  6E60               	movwf	_keypress,c	;volatile
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 226: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1701  000204  0E01               	movlw	1
  1702  000206  ECCA  F012         	call	_lcdInst
  1703  00020A  0E34               	movlw	52
  1704  00020C  6E40               	movwf	??_main& (0+255),c
  1705  00020E  0EF2               	movlw	242
  1706  000210                     u7437:
  1707  000210  2EE8               	decfsz	wreg,f,c
  1708  000212  D7FE               	bra	u7437
  1709  000214  2E40               	decfsz	??_main& (0+255),f,c
  1710  000216  D7FC               	bra	u7437
  1711                           
  1712                           ;main.c: 227: printf("testing Sf slow");
  1713  000218  0E3F               	movlw	low STR_3
  1714  00021A  6E21               	movwf	printf@f,c
  1715  00021C  0EFF               	movlw	high STR_3
  1716  00021E  6E22               	movwf	printf@f+1,c
  1717  000220  EC63  F008         	call	_printf	;wreg free
  1718                           
  1719                           ;main.c: 228: while(keypress!=(0)){
  1720  000224  D00E               	goto	l5696
  1721  000226                     l5694:
  1722                           
  1723                           ;main.c: 229: keyinterrupt();
  1724  000226  EC97  F012         	call	_keyinterrupt	;wreg free
  1725                           
  1726                           ;main.c: 230: updateS1(1);
  1727  00022A  0E00               	movlw	0
  1728  00022C  6E16               	movwf	updateS1@mode+1,c
  1729  00022E  0E01               	movlw	1
  1730  000230  6E15               	movwf	updateS1@mode,c
  1731  000232  ECE9  F009         	call	_updateS1	;wreg free
  1732                           
  1733                           ;main.c: 231: updateS3(1);
  1734  000236  0E00               	movlw	0
  1735  000238  6E16               	movwf	updateS3@mode+1,c
  1736  00023A  0E01               	movlw	1
  1737  00023C  6E15               	movwf	updateS3@mode,c
  1738  00023E  EC59  F00D         	call	_updateS3	;wreg free
  1739  000242                     l5696:
  1740  000242  5060               	movf	_keypress,w,c	;volatile
  1741  000244  A4D8               	btfss	status,2,c
  1742  000246  D7EF               	goto	l5694
  1743                           
  1744                           ;main.c: 232: }
  1745                           ;main.c: 234: keypress = (0);
  1746  000248  0E00               	movlw	0
  1747  00024A  6E60               	movwf	_keypress,c	;volatile
  1748                           
  1749                           ;main.c: 235: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1750  00024C  0E01               	movlw	1
  1751  00024E  ECCA  F012         	call	_lcdInst
  1752  000252  0E34               	movlw	52
  1753  000254  6E40               	movwf	??_main& (0+255),c
  1754  000256  0EF2               	movlw	242
  1755  000258                     u7447:
  1756  000258  2EE8               	decfsz	wreg,f,c
  1757  00025A  D7FE               	bra	u7447
  1758  00025C  2E40               	decfsz	??_main& (0+255),f,c
  1759  00025E  D7FC               	bra	u7447
  1760                           
  1761                           ;main.c: 236: printf("testing Sb slow");
  1762  000260  0E2F               	movlw	low STR_4
  1763  000262  6E21               	movwf	printf@f,c
  1764  000264  0EFF               	movlw	high STR_4
  1765  000266  6E22               	movwf	printf@f+1,c
  1766  000268  EC63  F008         	call	_printf	;wreg free
  1767                           
  1768                           ;main.c: 237: while(keypress!=(0)){
  1769  00026C  D00E               	goto	l5708
  1770  00026E                     l5706:
  1771                           
  1772                           ;main.c: 238: keyinterrupt();
  1773  00026E  EC97  F012         	call	_keyinterrupt	;wreg free
  1774                           
  1775                           ;main.c: 239: updateS1(2);
  1776  000272  0E00               	movlw	0
  1777  000274  6E16               	movwf	updateS1@mode+1,c
  1778  000276  0E02               	movlw	2
  1779  000278  6E15               	movwf	updateS1@mode,c
  1780  00027A  ECE9  F009         	call	_updateS1	;wreg free
  1781                           
  1782                           ;main.c: 240: updateS3(2);
  1783  00027E  0E00               	movlw	0
  1784  000280  6E16               	movwf	updateS3@mode+1,c
  1785  000282  0E02               	movlw	2
  1786  000284  6E15               	movwf	updateS3@mode,c
  1787  000286  EC59  F00D         	call	_updateS3	;wreg free
  1788  00028A                     l5708:
  1789  00028A  5060               	movf	_keypress,w,c	;volatile
  1790  00028C  A4D8               	btfss	status,2,c
  1791  00028E  D7EF               	goto	l5706
  1792                           
  1793                           ;main.c: 241: }
  1794                           ;main.c: 243: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1795  000290  0E01               	movlw	1
  1796  000292  ECCA  F012         	call	_lcdInst
  1797  000296  0E34               	movlw	52
  1798  000298  6E40               	movwf	??_main& (0+255),c
  1799  00029A  0EF2               	movlw	242
  1800  00029C                     u7457:
  1801  00029C  2EE8               	decfsz	wreg,f,c
  1802  00029E  D7FE               	bra	u7457
  1803  0002A0  2E40               	decfsz	??_main& (0+255),f,c
  1804  0002A2  D7FC               	bra	u7457
  1805                           
  1806                           ;main.c: 244: printf("testing S f");
  1807  0002A4  0EC1               	movlw	low STR_5
  1808  0002A6  6E21               	movwf	printf@f,c
  1809  0002A8  0EFF               	movlw	high STR_5
  1810  0002AA  6E22               	movwf	printf@f+1,c
  1811  0002AC  EC63  F008         	call	_printf	;wreg free
  1812                           
  1813                           ;main.c: 245: S1mode = 1;
  1814  0002B0  0E00               	movlw	0
  1815  0002B2  6E5D               	movwf	_S1mode+1,c
  1816  0002B4  0E01               	movlw	1
  1817  0002B6  6E5C               	movwf	_S1mode,c
  1818                           
  1819                           ;main.c: 246: S2mode = 1;
  1820  0002B8  0E00               	movlw	0
  1821  0002BA  0100               	movlb	0	; () banked
  1822  0002BC  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1823  0002BE  0E01               	movlw	1
  1824  0002C0  6FAB               	movwf	_S2mode& (0+255),b
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 247: S3mode = 1;
  1828  0002C2  0E00               	movlw	0
  1829  0002C4  6E5B               	movwf	_S3mode+1,c
  1830  0002C6  0E01               	movlw	1
  1831  0002C8  6E5A               	movwf	_S3mode,c
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;main.c: 248: keycheck();
  1835  0002CA  ECA1  F012         	call	_keycheck	;wreg free
  1836                           
  1837                           ;main.c: 250: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1838  0002CE  0E01               	movlw	1
  1839  0002D0  ECCA  F012         	call	_lcdInst
  1840  0002D4  0E34               	movlw	52
  1841  0002D6  6E40               	movwf	??_main& (0+255),c
  1842  0002D8  0EF2               	movlw	242
  1843  0002DA                     u7467:
  1844  0002DA  2EE8               	decfsz	wreg,f,c
  1845  0002DC  D7FE               	bra	u7467
  1846  0002DE  2E40               	decfsz	??_main& (0+255),f,c
  1847  0002E0  D7FC               	bra	u7467
  1848                           
  1849                           ;main.c: 251: printf("testing S b");
  1850  0002E2  0E91               	movlw	low STR_6
  1851  0002E4  6E21               	movwf	printf@f,c
  1852  0002E6  0EFF               	movlw	high STR_6
  1853  0002E8  6E22               	movwf	printf@f+1,c
  1854  0002EA  EC63  F008         	call	_printf	;wreg free
  1855                           
  1856                           ;main.c: 252: S1mode = 2;
  1857  0002EE  0E00               	movlw	0
  1858  0002F0  6E5D               	movwf	_S1mode+1,c
  1859  0002F2  0E02               	movlw	2
  1860  0002F4  6E5C               	movwf	_S1mode,c
  1861                           
  1862                           ;main.c: 253: S2mode = 2;
  1863  0002F6  0E00               	movlw	0
  1864  0002F8  0100               	movlb	0	; () banked
  1865  0002FA  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1866  0002FC  0E02               	movlw	2
  1867  0002FE  6FAB               	movwf	_S2mode& (0+255),b
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 254: S3mode = 2;
  1871  000300  0E00               	movlw	0
  1872  000302  6E5B               	movwf	_S3mode+1,c
  1873  000304  0E02               	movlw	2
  1874  000306  6E5A               	movwf	_S3mode,c
  1875                           
  1876                           ;main.c: 255: keycheck();
  1877  000308  ECA1  F012         	call	_keycheck	;wreg free
  1878                           
  1879                           ;main.c: 257: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1880  00030C  0E01               	movlw	1
  1881  00030E  ECCA  F012         	call	_lcdInst
  1882  000312  0E34               	movlw	52
  1883  000314  6E40               	movwf	??_main& (0+255),c
  1884  000316  0EF2               	movlw	242
  1885  000318                     u7477:
  1886  000318  2EE8               	decfsz	wreg,f,c
  1887  00031A  D7FE               	bra	u7477
  1888  00031C  2E40               	decfsz	??_main& (0+255),f,c
  1889  00031E  D7FC               	bra	u7477
  1890                           
  1891                           ;main.c: 258: printf("testing S shake");
  1892  000320  0ECF               	movlw	low STR_7
  1893  000322  6E21               	movwf	printf@f,c
  1894  000324  0EFE               	movlw	high STR_7
  1895  000326  6E22               	movwf	printf@f+1,c
  1896  000328  EC63  F008         	call	_printf	;wreg free
  1897                           
  1898                           ;main.c: 259: S1mode = 3;
  1899  00032C  0E00               	movlw	0
  1900  00032E  6E5D               	movwf	_S1mode+1,c
  1901  000330  0E03               	movlw	3
  1902  000332  6E5C               	movwf	_S1mode,c
  1903                           
  1904                           ;main.c: 260: S2mode = 3;
  1905  000334  0E00               	movlw	0
  1906  000336  0100               	movlb	0	; () banked
  1907  000338  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1908  00033A  0E03               	movlw	3
  1909  00033C  6FAB               	movwf	_S2mode& (0+255),b
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 261: S3mode = 3;
  1913  00033E  0E00               	movlw	0
  1914  000340  6E5B               	movwf	_S3mode+1,c
  1915  000342  0E03               	movlw	3
  1916  000344  6E5A               	movwf	_S3mode,c
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;main.c: 262: keycheck();
  1920  000346  ECA1  F012         	call	_keycheck	;wreg free
  1921                           
  1922                           ;main.c: 264: S1mode = 0;
  1923  00034A  0E00               	movlw	0
  1924  00034C  6E5D               	movwf	_S1mode+1,c
  1925  00034E  0E00               	movlw	0
  1926  000350  6E5C               	movwf	_S1mode,c
  1927                           
  1928                           ;main.c: 265: S2mode = 0;
  1929  000352  0E00               	movlw	0
  1930  000354  0100               	movlb	0	; () banked
  1931  000356  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1932  000358  0E00               	movlw	0
  1933  00035A  6FAB               	movwf	_S2mode& (0+255),b
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;main.c: 266: S3mode = 0;
  1937  00035C  0E00               	movlw	0
  1938  00035E  6E5B               	movwf	_S3mode+1,c
  1939  000360  0E00               	movlw	0
  1940  000362  6E5A               	movwf	_S3mode,c
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 268: keypress = (0);
  1944  000364  0E00               	movlw	0
  1945  000366  6E60               	movwf	_keypress,c	;volatile
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 269: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1949  000368  0E01               	movlw	1
  1950  00036A  ECCA  F012         	call	_lcdInst
  1951  00036E  0E34               	movlw	52
  1952  000370  6E40               	movwf	??_main& (0+255),c
  1953  000372  0EF2               	movlw	242
  1954  000374                     u7487:
  1955  000374  2EE8               	decfsz	wreg,f,c
  1956  000376  D7FE               	bra	u7487
  1957  000378  2E40               	decfsz	??_main& (0+255),f,c
  1958  00037A  D7FC               	bra	u7487
  1959                           
  1960                           ;main.c: 270: printf("testing S1 pins");
  1961  00037C  0EFF               	movlw	low STR_8
  1962  00037E  6E21               	movwf	printf@f,c
  1963  000380  0EFE               	movlw	high STR_8
  1964  000382  6E22               	movwf	printf@f+1,c
  1965  000384  EC63  F008         	call	_printf	;wreg free
  1966                           
  1967                           ;main.c: 271: while(keypress!=3){
  1968  000388  D02E               	goto	l5784
  1969  00038A                     l5762:
  1970                           
  1971                           ;main.c: 273: keyinterrupt();
  1972  00038A  EC97  F012         	call	_keyinterrupt	;wreg free
  1973                           
  1974                           ;main.c: 275: if (keypress == 2){LATDbits.LATD1 = 1;}
  1975  00038E  0E02               	movlw	2
  1976  000390  1860               	xorwf	_keypress,w,c	;volatile
  1977  000392  A4D8               	btfss	status,2,c
  1978  000394  D002               	goto	l201
  1979  000396  828C               	bsf	3980,1,c	;volatile
  1980  000398  D001               	goto	l5768
  1981  00039A                     l201:
  1982                           
  1983                           ;main.c: 276: else{LATDbits.LATD1 = 0;}
  1984  00039A  928C               	bcf	3980,1,c	;volatile
  1985  00039C                     l5768:
  1986                           
  1987                           ;main.c: 277: if (keypress == 6){LATBbits.LATB3 = 1;}
  1988  00039C  0E06               	movlw	6
  1989  00039E  1860               	xorwf	_keypress,w,c	;volatile
  1990  0003A0  A4D8               	btfss	status,2,c
  1991  0003A2  D002               	goto	l203
  1992  0003A4  868A               	bsf	3978,3,c	;volatile
  1993  0003A6  D001               	goto	l5772
  1994  0003A8                     l203:
  1995                           
  1996                           ;main.c: 278: else{LATBbits.LATB3 = 0;}
  1997  0003A8  968A               	bcf	3978,3,c	;volatile
  1998  0003AA                     l5772:
  1999                           
  2000                           ;main.c: 279: if (keypress == 10){LATBbits.LATB2 = 1;}
  2001  0003AA  0E0A               	movlw	10
  2002  0003AC  1860               	xorwf	_keypress,w,c	;volatile
  2003  0003AE  A4D8               	btfss	status,2,c
  2004  0003B0  D002               	goto	l205
  2005  0003B2  848A               	bsf	3978,2,c	;volatile
  2006  0003B4  D001               	goto	l5776
  2007  0003B6                     l205:
  2008                           
  2009                           ;main.c: 280: else{LATBbits.LATB2 = 0;}
  2010  0003B6  948A               	bcf	3978,2,c	;volatile
  2011  0003B8                     l5776:
  2012                           
  2013                           ;main.c: 281: if (keypress == 14){LATBbits.LATB0 = 1;}
  2014  0003B8  0E0E               	movlw	14
  2015  0003BA  1860               	xorwf	_keypress,w,c	;volatile
  2016  0003BC  A4D8               	btfss	status,2,c
  2017  0003BE  D002               	goto	l207
  2018  0003C0  808A               	bsf	3978,0,c	;volatile
  2019  0003C2  D001               	goto	l5780
  2020  0003C4                     l207:
  2021                           
  2022                           ;main.c: 282: else{LATBbits.LATB0 = 0;}
  2023  0003C4  908A               	bcf	3978,0,c	;volatile
  2024  0003C6                     l5780:
  2025                           
  2026                           ;main.c: 284: readADC(1);
  2027  0003C6  0E01               	movlw	1
  2028  0003C8  EC76  F012         	call	_readADC
  2029                           
  2030                           ;main.c: 285: lcdInst(0b11000000);;
  2031  0003CC  0EC0               	movlw	192
  2032  0003CE  ECCA  F012         	call	_lcdInst
  2033                           
  2034                           ;main.c: 286: printf("%x", ADRES);
  2035  0003D2  0EFC               	movlw	low (STR_26+1)
  2036  0003D4  6E21               	movwf	printf@f,c
  2037  0003D6  0EFF               	movlw	high (STR_26+1)
  2038  0003D8  6E22               	movwf	printf@f+1,c
  2039  0003DA  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2040  0003DE  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2041  0003E2  EC63  F008         	call	_printf	;wreg free
  2042  0003E6                     l5784:
  2043  0003E6  0E03               	movlw	3
  2044  0003E8  1860               	xorwf	_keypress,w,c	;volatile
  2045  0003EA  A4D8               	btfss	status,2,c
  2046  0003EC  D7CE               	goto	l5762
  2047                           
  2048                           ;main.c: 287: }
  2049                           ;main.c: 289: keypress = (0);
  2050  0003EE  0E00               	movlw	0
  2051  0003F0  6E60               	movwf	_keypress,c	;volatile
  2052                           
  2053                           ;main.c: 290: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2054  0003F2  0E01               	movlw	1
  2055  0003F4  ECCA  F012         	call	_lcdInst
  2056  0003F8  0E34               	movlw	52
  2057  0003FA  6E40               	movwf	??_main& (0+255),c
  2058  0003FC  0EF2               	movlw	242
  2059  0003FE                     u7497:
  2060  0003FE  2EE8               	decfsz	wreg,f,c
  2061  000400  D7FE               	bra	u7497
  2062  000402  2E40               	decfsz	??_main& (0+255),f,c
  2063  000404  D7FC               	bra	u7497
  2064                           
  2065                           ;main.c: 291: printf("testing S2 pins");
  2066  000406  0E0F               	movlw	low STR_10
  2067  000408  6E21               	movwf	printf@f,c
  2068  00040A  0EFF               	movlw	high STR_10
  2069  00040C  6E22               	movwf	printf@f+1,c
  2070  00040E  EC63  F008         	call	_printf	;wreg free
  2071                           
  2072                           ;main.c: 292: while(keypress!=3){
  2073  000412  D01E               	goto	l5812
  2074  000414                     l5794:
  2075                           
  2076                           ;main.c: 294: keyinterrupt();
  2077  000414  EC97  F012         	call	_keyinterrupt	;wreg free
  2078                           
  2079                           ;main.c: 296: if (keypress == 2){LATCbits.LATC7 = 1;}
  2080  000418  0E02               	movlw	2
  2081  00041A  1860               	xorwf	_keypress,w,c	;volatile
  2082  00041C  A4D8               	btfss	status,2,c
  2083  00041E  D002               	goto	l212
  2084  000420  8E8B               	bsf	3979,7,c	;volatile
  2085  000422  D001               	goto	l5800
  2086  000424                     l212:
  2087                           
  2088                           ;main.c: 297: else{LATCbits.LATC7 = 0;}
  2089  000424  9E8B               	bcf	3979,7,c	;volatile
  2090  000426                     l5800:
  2091                           
  2092                           ;main.c: 298: if (keypress == 6){LATCbits.LATC6 = 1;}
  2093  000426  0E06               	movlw	6
  2094  000428  1860               	xorwf	_keypress,w,c	;volatile
  2095  00042A  A4D8               	btfss	status,2,c
  2096  00042C  D002               	goto	l214
  2097  00042E  8C8B               	bsf	3979,6,c	;volatile
  2098  000430  D001               	goto	l5804
  2099  000432                     l214:
  2100                           
  2101                           ;main.c: 299: else{LATCbits.LATC6 = 0;}
  2102  000432  9C8B               	bcf	3979,6,c	;volatile
  2103  000434                     l5804:
  2104                           
  2105                           ;main.c: 300: if (keypress == 10){LATCbits.LATC0 = 1;}
  2106  000434  0E0A               	movlw	10
  2107  000436  1860               	xorwf	_keypress,w,c	;volatile
  2108  000438  A4D8               	btfss	status,2,c
  2109  00043A  D002               	goto	l216
  2110  00043C  808B               	bsf	3979,0,c	;volatile
  2111  00043E  D001               	goto	l5808
  2112  000440                     l216:
  2113                           
  2114                           ;main.c: 301: else{LATCbits.LATC0 = 0;}
  2115  000440  908B               	bcf	3979,0,c	;volatile
  2116  000442                     l5808:
  2117                           
  2118                           ;main.c: 302: if (keypress == 14){LATCbits.LATC5 = 1;}
  2119  000442  0E0E               	movlw	14
  2120  000444  1860               	xorwf	_keypress,w,c	;volatile
  2121  000446  A4D8               	btfss	status,2,c
  2122  000448  D002               	goto	l218
  2123  00044A  8A8B               	bsf	3979,5,c	;volatile
  2124  00044C  D001               	goto	l5812
  2125  00044E                     l218:
  2126                           
  2127                           ;main.c: 303: else{LATCbits.LATC5 = 0;}
  2128  00044E  9A8B               	bcf	3979,5,c	;volatile
  2129  000450                     l5812:
  2130  000450  0E03               	movlw	3
  2131  000452  1860               	xorwf	_keypress,w,c	;volatile
  2132  000454  A4D8               	btfss	status,2,c
  2133  000456  D7DE               	goto	l5794
  2134                           
  2135                           ;main.c: 304: }
  2136                           ;main.c: 306: keypress = (0);
  2137  000458  0E00               	movlw	0
  2138  00045A  6E60               	movwf	_keypress,c	;volatile
  2139                           
  2140                           ;main.c: 307: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2141  00045C  0E01               	movlw	1
  2142  00045E  ECCA  F012         	call	_lcdInst
  2143  000462  0E34               	movlw	52
  2144  000464  6E40               	movwf	??_main& (0+255),c
  2145  000466  0EF2               	movlw	242
  2146  000468                     u7507:
  2147  000468  2EE8               	decfsz	wreg,f,c
  2148  00046A  D7FE               	bra	u7507
  2149  00046C  2E40               	decfsz	??_main& (0+255),f,c
  2150  00046E  D7FC               	bra	u7507
  2151                           
  2152                           ;main.c: 308: printf("testing S3 pins");
  2153  000470  0E1F               	movlw	low STR_11
  2154  000472  6E21               	movwf	printf@f,c
  2155  000474  0EFF               	movlw	high STR_11
  2156  000476  6E22               	movwf	printf@f+1,c
  2157  000478  EC63  F008         	call	_printf	;wreg free
  2158                           
  2159                           ;main.c: 309: while(keypress!=3){
  2160  00047C  D02E               	goto	l5844
  2161  00047E                     l5822:
  2162                           
  2163                           ;main.c: 311: keyinterrupt();
  2164  00047E  EC97  F012         	call	_keyinterrupt	;wreg free
  2165                           
  2166                           ;main.c: 313: if (keypress == 2){LATEbits.LATE2 = 1;}
  2167  000482  0E02               	movlw	2
  2168  000484  1860               	xorwf	_keypress,w,c	;volatile
  2169  000486  A4D8               	btfss	status,2,c
  2170  000488  D002               	goto	l223
  2171  00048A  848D               	bsf	3981,2,c	;volatile
  2172  00048C  D001               	goto	l5828
  2173  00048E                     l223:
  2174                           
  2175                           ;main.c: 314: else{LATEbits.LATE2 = 0;}
  2176  00048E  948D               	bcf	3981,2,c	;volatile
  2177  000490                     l5828:
  2178                           
  2179                           ;main.c: 315: if (keypress == 6){LATEbits.LATE1 = 1;}
  2180  000490  0E06               	movlw	6
  2181  000492  1860               	xorwf	_keypress,w,c	;volatile
  2182  000494  A4D8               	btfss	status,2,c
  2183  000496  D002               	goto	l225
  2184  000498  828D               	bsf	3981,1,c	;volatile
  2185  00049A  D001               	goto	l5832
  2186  00049C                     l225:
  2187                           
  2188                           ;main.c: 316: else{LATEbits.LATE1 = 0;}
  2189  00049C  928D               	bcf	3981,1,c	;volatile
  2190  00049E                     l5832:
  2191                           
  2192                           ;main.c: 317: if (keypress == 10){LATAbits.LATA4 = 1;}
  2193  00049E  0E0A               	movlw	10
  2194  0004A0  1860               	xorwf	_keypress,w,c	;volatile
  2195  0004A2  A4D8               	btfss	status,2,c
  2196  0004A4  D002               	goto	l227
  2197  0004A6  8889               	bsf	3977,4,c	;volatile
  2198  0004A8  D001               	goto	l5836
  2199  0004AA                     l227:
  2200                           
  2201                           ;main.c: 318: else{LATAbits.LATA4 = 0;}
  2202  0004AA  9889               	bcf	3977,4,c	;volatile
  2203  0004AC                     l5836:
  2204                           
  2205                           ;main.c: 319: if (keypress == 14){LATDbits.LATD0 = 1;}
  2206  0004AC  0E0E               	movlw	14
  2207  0004AE  1860               	xorwf	_keypress,w,c	;volatile
  2208  0004B0  A4D8               	btfss	status,2,c
  2209  0004B2  D002               	goto	l229
  2210  0004B4  808C               	bsf	3980,0,c	;volatile
  2211  0004B6  D001               	goto	l5840
  2212  0004B8                     l229:
  2213                           
  2214                           ;main.c: 320: else{LATDbits.LATD0 = 0;}
  2215  0004B8  908C               	bcf	3980,0,c	;volatile
  2216  0004BA                     l5840:
  2217                           
  2218                           ;main.c: 322: readADC(5);
  2219  0004BA  0E05               	movlw	5
  2220  0004BC  EC76  F012         	call	_readADC
  2221                           
  2222                           ;main.c: 323: lcdInst(0b11000000);;
  2223  0004C0  0EC0               	movlw	192
  2224  0004C2  ECCA  F012         	call	_lcdInst
  2225                           
  2226                           ;main.c: 324: printf("%x", ADRES);
  2227  0004C6  0EFC               	movlw	low (STR_26+1)
  2228  0004C8  6E21               	movwf	printf@f,c
  2229  0004CA  0EFF               	movlw	high (STR_26+1)
  2230  0004CC  6E22               	movwf	printf@f+1,c
  2231  0004CE  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2232  0004D2  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2233  0004D6  EC63  F008         	call	_printf	;wreg free
  2234  0004DA                     l5844:
  2235  0004DA  0E03               	movlw	3
  2236  0004DC  1860               	xorwf	_keypress,w,c	;volatile
  2237  0004DE  A4D8               	btfss	status,2,c
  2238  0004E0  D7CE               	goto	l5822
  2239                           
  2240                           ;main.c: 325: }
  2241                           ;main.c: 327: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2242  0004E2  0E01               	movlw	1
  2243  0004E4  ECCA  F012         	call	_lcdInst
  2244  0004E8  0E34               	movlw	52
  2245  0004EA  6E40               	movwf	??_main& (0+255),c
  2246  0004EC  0EF2               	movlw	242
  2247  0004EE                     u7517:
  2248  0004EE  2EE8               	decfsz	wreg,f,c
  2249  0004F0  D7FE               	bra	u7517
  2250  0004F2  2E40               	decfsz	??_main& (0+255),f,c
  2251  0004F4  D7FC               	bra	u7517
  2252                           
  2253                           ;main.c: 328: printf("testing PWM2");
  2254  0004F6  0E78               	movlw	low STR_13
  2255  0004F8  6E21               	movwf	printf@f,c
  2256  0004FA  0EFF               	movlw	high STR_13
  2257  0004FC  6E22               	movwf	printf@f+1,c
  2258  0004FE  EC63  F008         	call	_printf	;wreg free
  2259                           
  2260                           ;main.c: 329: PWM2(400);
  2261  000502  0E01               	movlw	1
  2262  000504  6E16               	movwf	PWM2@duty+1,c
  2263  000506  0E90               	movlw	144
  2264  000508  6E15               	movwf	PWM2@duty,c
  2265  00050A  EC7F  F011         	call	_PWM2	;wreg free
  2266                           
  2267                           ;main.c: 330: keycheck();
  2268  00050E  ECA1  F012         	call	_keycheck	;wreg free
  2269                           
  2270                           ;main.c: 331: PWM2off();
  2271  000512  ECD5  F012         	call	_PWM2off	;wreg free
  2272                           
  2273                           ;main.c: 333: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2274  000516  0E01               	movlw	1
  2275  000518  ECCA  F012         	call	_lcdInst
  2276  00051C  0E34               	movlw	52
  2277  00051E  6E40               	movwf	??_main& (0+255),c
  2278  000520  0EF2               	movlw	242
  2279  000522                     u7527:
  2280  000522  2EE8               	decfsz	wreg,f,c
  2281  000524  D7FE               	bra	u7527
  2282  000526  2E40               	decfsz	??_main& (0+255),f,c
  2283  000528  D7FC               	bra	u7527
  2284                           
  2285                           ;main.c: 334: printf("testing PWM1");
  2286  00052A  0E6B               	movlw	low STR_14
  2287  00052C  6E21               	movwf	printf@f,c
  2288  00052E  0EFF               	movlw	high STR_14
  2289  000530  6E22               	movwf	printf@f+1,c
  2290  000532  EC63  F008         	call	_printf	;wreg free
  2291                           
  2292                           ;main.c: 335: PWM1(400);
  2293  000536  0E01               	movlw	1
  2294  000538  6E16               	movwf	PWM1@duty+1,c
  2295  00053A  0E90               	movlw	144
  2296  00053C  6E15               	movwf	PWM1@duty,c
  2297  00053E  ECA4  F011         	call	_PWM1	;wreg free
  2298                           
  2299                           ;main.c: 336: keycheck();
  2300  000542  ECA1  F012         	call	_keycheck	;wreg free
  2301                           
  2302                           ;main.c: 337: PWM1off();
  2303  000546  ECDA  F012         	call	_PWM1off	;wreg free
  2304                           
  2305                           ;main.c: 339: keypress = (0);
  2306  00054A  0E00               	movlw	0
  2307  00054C  6E60               	movwf	_keypress,c	;volatile
  2308                           
  2309                           ;main.c: 340: seconds = 0;
  2310  00054E  0E00               	movlw	0
  2311  000550  6E5F               	movwf	_seconds+1,c
  2312  000552  0E00               	movlw	0
  2313  000554  6E5E               	movwf	_seconds,c
  2314                           
  2315                           ;main.c: 341: while(keypress==(0)){
  2316  000556  D021               	goto	l5886
  2317  000558                     l5872:
  2318                           
  2319                           ;main.c: 342: keypress = (0);
  2320  000558  0E00               	movlw	0
  2321  00055A  6E60               	movwf	_keypress,c	;volatile
  2322                           
  2323                           ;main.c: 344: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2324  00055C  0E01               	movlw	1
  2325  00055E  ECCA  F012         	call	_lcdInst
  2326  000562  0E34               	movlw	52
  2327  000564  6E40               	movwf	??_main& (0+255),c
  2328  000566  0EF2               	movlw	242
  2329  000568                     u7537:
  2330  000568  2EE8               	decfsz	wreg,f,c
  2331  00056A  D7FE               	bra	u7537
  2332  00056C  2E40               	decfsz	??_main& (0+255),f,c
  2333  00056E  D7FC               	bra	u7537
  2334                           
  2335                           ;main.c: 345: printf("testing TMR0");
  2336  000570  0E5E               	movlw	low STR_15
  2337  000572  6E21               	movwf	printf@f,c
  2338  000574  0EFF               	movlw	high STR_15
  2339  000576  6E22               	movwf	printf@f+1,c
  2340  000578  EC63  F008         	call	_printf	;wreg free
  2341                           
  2342                           ;main.c: 346: lcdInst(0b11000000);;
  2343  00057C  0EC0               	movlw	192
  2344  00057E  ECCA  F012         	call	_lcdInst
  2345                           
  2346                           ;main.c: 347: printf("%d", seconds);
  2347  000582  0E9C               	movlw	low (STR_49+13)
  2348  000584  6E21               	movwf	printf@f,c
  2349  000586  0EFE               	movlw	high (STR_49+13)
  2350  000588  6E22               	movwf	printf@f+1,c
  2351  00058A  C05E  F023         	movff	_seconds,?_printf+2
  2352  00058E  C05F  F024         	movff	_seconds+1,?_printf+3
  2353  000592  EC63  F008         	call	_printf	;wreg free
  2354                           
  2355                           ;main.c: 348: keyinterrupt();
  2356  000596  EC97  F012         	call	_keyinterrupt	;wreg free
  2357  00059A                     l5886:
  2358  00059A  5060               	movf	_keypress,w,c	;volatile
  2359  00059C  B4D8               	btfsc	status,2,c
  2360  00059E  D7DC               	goto	l5872
  2361                           
  2362                           ;main.c: 349: }
  2363                           ;main.c: 351: keypress = (0);
  2364  0005A0  0E00               	movlw	0
  2365  0005A2  6E60               	movwf	_keypress,c	;volatile
  2366                           
  2367                           ;main.c: 352: while(keypress==(0)){
  2368  0005A4  D057               	goto	l5920
  2369  0005A6                     l5890:
  2370                           
  2371                           ;main.c: 353: keypress = (0);
  2372  0005A6  0E00               	movlw	0
  2373  0005A8  6E60               	movwf	_keypress,c	;volatile
  2374                           
  2375                           ;main.c: 355: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2376  0005AA  0E01               	movlw	1
  2377  0005AC  ECCA  F012         	call	_lcdInst
  2378  0005B0  0E34               	movlw	52
  2379  0005B2  6E40               	movwf	??_main& (0+255),c
  2380  0005B4  0EF2               	movlw	242
  2381  0005B6                     u7547:
  2382  0005B6  2EE8               	decfsz	wreg,f,c
  2383  0005B8  D7FE               	bra	u7547
  2384  0005BA  2E40               	decfsz	??_main& (0+255),f,c
  2385  0005BC  D7FC               	bra	u7547
  2386                           
  2387                           ;main.c: 356: printf("testing IR");
  2388  0005BE  0ECD               	movlw	low STR_17
  2389  0005C0  6E21               	movwf	printf@f,c
  2390  0005C2  0EFF               	movlw	high STR_17
  2391  0005C4  6E22               	movwf	printf@f+1,c
  2392  0005C6  EC63  F008         	call	_printf	;wreg free
  2393                           
  2394                           ;main.c: 357: lcdInst(0b11000000);;
  2395  0005CA  0EC0               	movlw	192
  2396  0005CC  ECCA  F012         	call	_lcdInst
  2397                           
  2398                           ;main.c: 358: readADC(1);
  2399  0005D0  0E01               	movlw	1
  2400  0005D2  EC76  F012         	call	_readADC
  2401                           
  2402                           ;main.c: 359: printf("%x ", ADRES);
  2403  0005D6  0EF7               	movlw	low STR_18
  2404  0005D8  6E21               	movwf	printf@f,c
  2405  0005DA  0EFF               	movlw	high STR_18
  2406  0005DC  6E22               	movwf	printf@f+1,c
  2407  0005DE  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2408  0005E2  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2409  0005E6  EC63  F008         	call	_printf	;wreg free
  2410                           
  2411                           ;main.c: 360: readADC(0);
  2412  0005EA  0E00               	movlw	0
  2413  0005EC  EC76  F012         	call	_readADC
  2414                           
  2415                           ;main.c: 361: printf("%x ", ADRES);
  2416  0005F0  0EF7               	movlw	low STR_18
  2417  0005F2  6E21               	movwf	printf@f,c
  2418  0005F4  0EFF               	movlw	high STR_18
  2419  0005F6  6E22               	movwf	printf@f+1,c
  2420  0005F8  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2421  0005FC  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2422  000600  EC63  F008         	call	_printf	;wreg free
  2423                           
  2424                           ;main.c: 362: readADC(2);
  2425  000604  0E02               	movlw	2
  2426  000606  EC76  F012         	call	_readADC
  2427                           
  2428                           ;main.c: 363: printf("%x ", ADRES);
  2429  00060A  0EF7               	movlw	low STR_18
  2430  00060C  6E21               	movwf	printf@f,c
  2431  00060E  0EFF               	movlw	high STR_18
  2432  000610  6E22               	movwf	printf@f+1,c
  2433  000612  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2434  000616  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2435  00061A  EC63  F008         	call	_printf	;wreg free
  2436                           
  2437                           ;main.c: 364: readADC(5);
  2438  00061E  0E05               	movlw	5
  2439  000620  EC76  F012         	call	_readADC
  2440                           
  2441                           ;main.c: 365: printf("%x ", ADRES);
  2442  000624  0EF7               	movlw	low STR_18
  2443  000626  6E21               	movwf	printf@f,c
  2444  000628  0EFF               	movlw	high STR_18
  2445  00062A  6E22               	movwf	printf@f+1,c
  2446  00062C  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2447  000630  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2448  000634  EC63  F008         	call	_printf	;wreg free
  2449                           
  2450                           ;main.c: 366: keyinterrupt();
  2451  000638  EC97  F012         	call	_keyinterrupt	;wreg free
  2452                           
  2453                           ;main.c: 367: _delay((unsigned long)((100)*(32000000/4000.0)));
  2454  00063C  0E05               	movlw	5
  2455  00063E  6E41               	movwf	(??_main+1)& (0+255),c
  2456  000640  0E0F               	movlw	15
  2457  000642  6E40               	movwf	??_main& (0+255),c
  2458  000644  0EF1               	movlw	241
  2459  000646                     u7557:
  2460  000646  2EE8               	decfsz	wreg,f,c
  2461  000648  D7FE               	bra	u7557
  2462  00064A  2E40               	decfsz	??_main& (0+255),f,c
  2463  00064C  D7FC               	bra	u7557
  2464  00064E  2E41               	decfsz	(??_main+1)& (0+255),f,c
  2465  000650  D7FA               	bra	u7557
  2466  000652  F000               	nop	
  2467  000654                     l5920:
  2468  000654  5060               	movf	_keypress,w,c	;volatile
  2469  000656  B4D8               	btfsc	status,2,c
  2470  000658  D7A6               	goto	l5890
  2471                           
  2472                           ;main.c: 368: }
  2473                           ;main.c: 370: keypress = (0);
  2474  00065A  0E00               	movlw	0
  2475  00065C  6E60               	movwf	_keypress,c	;volatile
  2476                           
  2477                           ;main.c: 371: while(keypress==(0)){
  2478  00065E  D03D               	goto	l5946
  2479  000660                     l5924:
  2480                           
  2481                           ;main.c: 372: keypress = (0);
  2482  000660  0E00               	movlw	0
  2483  000662  6E60               	movwf	_keypress,c	;volatile
  2484                           
  2485                           ;main.c: 373: _delay((unsigned long)((50)*(32000000/4000.0)));
  2486  000664  0E03               	movlw	3
  2487  000666  6E41               	movwf	(??_main+1)& (0+255),c
  2488  000668  0E08               	movlw	8
  2489  00066A  6E40               	movwf	??_main& (0+255),c
  2490  00066C  0E77               	movlw	119
  2491  00066E                     u7567:
  2492  00066E  2EE8               	decfsz	wreg,f,c
  2493  000670  D7FE               	bra	u7567
  2494  000672  2E40               	decfsz	??_main& (0+255),f,c
  2495  000674  D7FC               	bra	u7567
  2496  000676  2E41               	decfsz	(??_main+1)& (0+255),f,c
  2497  000678  D7FA               	bra	u7567
  2498  00067A  F000               	nop	
  2499                           
  2500                           ;main.c: 374: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2501  00067C  0E01               	movlw	1
  2502  00067E  ECCA  F012         	call	_lcdInst
  2503  000682  0E34               	movlw	52
  2504  000684  6E40               	movwf	??_main& (0+255),c
  2505  000686  0EF2               	movlw	242
  2506  000688                     u7577:
  2507  000688  2EE8               	decfsz	wreg,f,c
  2508  00068A  D7FE               	bra	u7577
  2509  00068C  2E40               	decfsz	??_main& (0+255),f,c
  2510  00068E  D7FC               	bra	u7577
  2511                           
  2512                           ;main.c: 375: printf("label   tab");
  2513  000690  0E9D               	movlw	low STR_22
  2514  000692  6E21               	movwf	printf@f,c
  2515  000694  0EFF               	movlw	high STR_22
  2516  000696  6E22               	movwf	printf@f+1,c
  2517  000698  EC63  F008         	call	_printf	;wreg free
  2518                           
  2519                           ;main.c: 376: lcdInst(0b11000000);;
  2520  00069C  0EC0               	movlw	192
  2521  00069E  ECCA  F012         	call	_lcdInst
  2522                           
  2523                           ;main.c: 377: readADC(4);
  2524  0006A2  0E04               	movlw	4
  2525  0006A4  EC76  F012         	call	_readADC
  2526                           
  2527                           ;main.c: 378: printf("%x      ", ADRES);
  2528  0006A8  0ED8               	movlw	low STR_23
  2529  0006AA  6E21               	movwf	printf@f,c
  2530  0006AC  0EFF               	movlw	high STR_23
  2531  0006AE  6E22               	movwf	printf@f+1,c
  2532  0006B0  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2533  0006B4  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2534  0006B8  EC63  F008         	call	_printf	;wreg free
  2535                           
  2536                           ;main.c: 379: readADC(3);
  2537  0006BC  0E03               	movlw	3
  2538  0006BE  EC76  F012         	call	_readADC
  2539                           
  2540                           ;main.c: 380: printf("%x      ", ADRES);
  2541  0006C2  0ED8               	movlw	low STR_23
  2542  0006C4  6E21               	movwf	printf@f,c
  2543  0006C6  0EFF               	movlw	high STR_23
  2544  0006C8  6E22               	movwf	printf@f+1,c
  2545  0006CA  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2546  0006CE  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2547  0006D2  EC63  F008         	call	_printf	;wreg free
  2548                           
  2549                           ;main.c: 381: keyinterrupt();
  2550  0006D6  EC97  F012         	call	_keyinterrupt	;wreg free
  2551  0006DA                     l5946:
  2552  0006DA  5060               	movf	_keypress,w,c	;volatile
  2553  0006DC  B4D8               	btfsc	status,2,c
  2554  0006DE  D7C0               	goto	l5924
  2555                           
  2556                           ;main.c: 382: }
  2557                           ;main.c: 384: standby = 1;
  2558  0006E0  0E00               	movlw	0
  2559  0006E2  0100               	movlb	0	; () banked
  2560  0006E4  6F9D               	movwf	(main@standby+1)& (0+255),b
  2561  0006E6  0E01               	movlw	1
  2562  0006E8  6F9C               	movwf	main@standby& (0+255),b
  2563                           
  2564                           ;main.c: 390: }
  2565  0006EA  D4C1               	goto	l5636
  2566  0006EC                     l5950:
  2567                           
  2568                           ;main.c: 393: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2569  0006EC  0E01               	movlw	1
  2570  0006EE  ECCA  F012         	call	_lcdInst
  2571  0006F2  0E34               	movlw	52
  2572  0006F4  6E40               	movwf	??_main& (0+255),c
  2573  0006F6  0EF2               	movlw	242
  2574  0006F8                     u7587:
  2575  0006F8  2EE8               	decfsz	wreg,f,c
  2576  0006FA  D7FE               	bra	u7587
  2577  0006FC  2E40               	decfsz	??_main& (0+255),f,c
  2578  0006FE  D7FC               	bra	u7587
  2579                           
  2580                           ;main.c: 395: readADC(2);
  2581  000700  0E02               	movlw	2
  2582  000702  EC76  F012         	call	_readADC
  2583                           
  2584                           ;main.c: 396: if(ADRES <= 0x250){
  2585  000706  0E51               	movlw	81
  2586  000708  5CC3               	subwf	4035,w,c	;volatile
  2587  00070A  0E02               	movlw	2
  2588  00070C  58C4               	subwfb	4036,w,c	;volatile
  2589  00070E  B0D8               	btfsc	status,0,c
  2590  000710  D01F               	goto	l5966
  2591                           
  2592                           ;main.c: 397: prevSoupLoad = seconds;
  2593  000712  C05E  F090         	movff	_seconds,main@prevSoupLoad
  2594  000716  C05F  F091         	movff	_seconds+1,main@prevSoupLoad+1
  2595                           
  2596                           ;main.c: 398: if (!soupSort){
  2597  00071A  0100               	movlb	0	; () banked
  2598  00071C  5194               	movf	main@soupSort& (0+255),w,b
  2599  00071E  0100               	movlb	0	; () banked
  2600  000720  1195               	iorwf	(main@soupSort+1)& (0+255),w,b
  2601  000722  A4D8               	btfss	status,2,c
  2602  000724  D015               	goto	l5966
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 399: soupSort = 1;
  2606  000726  0E00               	movlw	0
  2607  000728  0100               	movlb	0	; () banked
  2608  00072A  6F95               	movwf	(main@soupSort+1)& (0+255),b
  2609  00072C  0E01               	movlw	1
  2610  00072E  6F94               	movwf	main@soupSort& (0+255),b
  2611                           
  2612                           ;main.c: 400: soupSteps = 0;
  2613  000730  0E00               	movlw	0
  2614  000732  6E59               	movwf	_soupSteps+1,c
  2615  000734  0E00               	movlw	0
  2616  000736  6E58               	movwf	_soupSteps,c
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 401: _delay((unsigned long)((150)*(32000000/4000.0)));
  2620  000738  0E07               	movlw	7
  2621  00073A  6E41               	movwf	(??_main+1)& (0+255),c
  2622  00073C  0E17               	movlw	23
  2623  00073E  6E40               	movwf	??_main& (0+255),c
  2624  000740  0E6A               	movlw	106
  2625  000742                     u7597:
  2626  000742  2EE8               	decfsz	wreg,f,c
  2627  000744  D7FE               	bra	u7597
  2628  000746  2E40               	decfsz	??_main& (0+255),f,c
  2629  000748  D7FC               	bra	u7597
  2630  00074A  2E41               	decfsz	(??_main+1)& (0+255),f,c
  2631  00074C  D7FA               	bra	u7597
  2632  00074E  D000               	nop2	
  2633  000750                     l5966:
  2634                           
  2635                           ;main.c: 402: }
  2636                           ;main.c: 403: }
  2637                           ;main.c: 405: printf("soup: %x %d", ADRES, soupSteps);
  2638  000750  0EB5               	movlw	low STR_25
  2639  000752  6E21               	movwf	printf@f,c
  2640  000754  0EFF               	movlw	high STR_25
  2641  000756  6E22               	movwf	printf@f+1,c
  2642  000758  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2643  00075C  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2644  000760  C058  F025         	movff	_soupSteps,?_printf+4
  2645  000764  C059  F026         	movff	_soupSteps+1,?_printf+5
  2646  000768  EC63  F008         	call	_printf	;wreg free
  2647                           
  2648                           ;main.c: 407: if (soupSort){
  2649  00076C  0100               	movlb	0	; () banked
  2650  00076E  5194               	movf	main@soupSort& (0+255),w,b
  2651  000770  0100               	movlb	0	; () banked
  2652  000772  1195               	iorwf	(main@soupSort+1)& (0+255),w,b
  2653  000774  B4D8               	btfsc	status,2,c
  2654  000776  D0FF               	goto	l6056
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 408: if (soupSteps < 80){
  2658  000778  BE59               	btfsc	_soupSteps+1,7,c
  2659  00077A  D006               	goto	l5972
  2660  00077C  5059               	movf	_soupSteps+1,w,c
  2661  00077E  E11E               	bnz	l5982
  2662  000780  0E50               	movlw	80
  2663  000782  5C58               	subwf	_soupSteps,w,c
  2664  000784  B0D8               	btfsc	status,0,c
  2665  000786  D01A               	goto	l5982
  2666  000788                     l5972:
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 409: S1mode = 3;
  2670  000788  0E00               	movlw	0
  2671  00078A  6E5D               	movwf	_S1mode+1,c
  2672  00078C  0E03               	movlw	3
  2673  00078E  6E5C               	movwf	_S1mode,c
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 410: readADC(4);
  2677  000790  0E04               	movlw	4
  2678  000792  EC76  F012         	call	_readADC
  2679                           
  2680                           ;main.c: 411: if(ADRES<0x200){labelState = 1;}
  2681  000796  0E02               	movlw	2
  2682  000798  5CC4               	subwf	4036,w,c	;volatile
  2683  00079A  B0D8               	btfsc	status,0,c
  2684  00079C  D004               	goto	l5980
  2685  00079E  0E00               	movlw	0
  2686  0007A0  6E53               	movwf	_labelState+1,c
  2687  0007A2  0E01               	movlw	1
  2688  0007A4  6E52               	movwf	_labelState,c
  2689  0007A6                     l5980:
  2690                           
  2691                           ;main.c: 412: printf(" %x",ADRES);
  2692  0007A6  0EFB               	movlw	low STR_26
  2693  0007A8  6E21               	movwf	printf@f,c
  2694  0007AA  0EFF               	movlw	high STR_26
  2695  0007AC  6E22               	movwf	printf@f+1,c
  2696  0007AE  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2697  0007B2  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2698  0007B6  EC63  F008         	call	_printf	;wreg free
  2699                           
  2700                           ;main.c: 413: }
  2701  0007BA  D0E1               	goto	l6058
  2702  0007BC                     l5982:
  2703                           
  2704                           ;main.c: 414: else if (labelState == 1){
  2705  0007BC  0452               	decf	_labelState,w,c
  2706  0007BE  1053               	iorwf	_labelState+1,w,c
  2707  0007C0  A4D8               	btfss	status,2,c
  2708  0007C2  D050               	goto	l6010
  2709                           
  2710                           ;main.c: 415: if(soupSteps < (80+70)){
  2711  0007C4  BE59               	btfsc	_soupSteps+1,7,c
  2712  0007C6  D006               	goto	l5986
  2713  0007C8  5059               	movf	_soupSteps+1,w,c
  2714  0007CA  E108               	bnz	l5988
  2715  0007CC  0E96               	movlw	150
  2716  0007CE  5C58               	subwf	_soupSteps,w,c
  2717  0007D0  B0D8               	btfsc	status,0,c
  2718  0007D2  D004               	goto	l5988
  2719  0007D4                     l5986:
  2720                           
  2721                           ;main.c: 416: S1mode = 1;
  2722  0007D4  0E00               	movlw	0
  2723  0007D6  6E5D               	movwf	_S1mode+1,c
  2724  0007D8  0E01               	movlw	1
  2725  0007DA  D053               	goto	L1
  2726  0007DC                     l5988:
  2727                           
  2728                           ;main.c: 419: else if(soupSteps < (80+70+55)){
  2729  0007DC  BE59               	btfsc	_soupSteps+1,7,c
  2730  0007DE  D006               	goto	l5990
  2731  0007E0  5059               	movf	_soupSteps+1,w,c
  2732  0007E2  E10C               	bnz	l5992
  2733  0007E4  0ECD               	movlw	205
  2734  0007E6  5C58               	subwf	_soupSteps,w,c
  2735  0007E8  B0D8               	btfsc	status,0,c
  2736  0007EA  D008               	goto	l5992
  2737  0007EC                     l5990:
  2738                           
  2739                           ;main.c: 420: S1mode = 2;
  2740  0007EC  0E00               	movlw	0
  2741  0007EE  6E5D               	movwf	_S1mode+1,c
  2742  0007F0  0E02               	movlw	2
  2743  0007F2  6E5C               	movwf	_S1mode,c
  2744                           
  2745                           ;main.c: 421: soupAlign = 2;
  2746  0007F4  0E00               	movlw	0
  2747  0007F6  6E4F               	movwf	_soupAlign+1,c
  2748  0007F8  0E02               	movlw	2
  2749  0007FA  D059               	goto	L2
  2750  0007FC                     l5992:
  2751                           
  2752                           ;main.c: 423: else{
  2753                           ;main.c: 424: S1mode = 10;
  2754  0007FC  0E00               	movlw	0
  2755  0007FE  6E5D               	movwf	_S1mode+1,c
  2756  000800  0E0A               	movlw	10
  2757  000802  6E5C               	movwf	_S1mode,c
  2758                           
  2759                           ;main.c: 425: printf(" %d", soupAlign);
  2760  000804  0E9B               	movlw	low (STR_49+12)
  2761  000806  6E21               	movwf	printf@f,c
  2762  000808  0EFE               	movlw	high (STR_49+12)
  2763  00080A  6E22               	movwf	printf@f+1,c
  2764  00080C  C04E  F023         	movff	_soupAlign,?_printf+2
  2765  000810  C04F  F024         	movff	_soupAlign+1,?_printf+3
  2766  000814  EC63  F008         	call	_printf	;wreg free
  2767                           
  2768                           ;main.c: 426: updateS1(soupAlign);
  2769  000818  C04E  F015         	movff	_soupAlign,updateS1@mode
  2770  00081C  C04F  F016         	movff	_soupAlign+1,updateS1@mode+1
  2771  000820  ECE9  F009         	call	_updateS1	;wreg free
  2772                           
  2773                           ;main.c: 427: readADC(1);
  2774  000824  0E01               	movlw	1
  2775  000826  EC76  F012         	call	_readADC
  2776                           
  2777                           ;main.c: 428: printf(" %x", ADRES);
  2778  00082A  0EFB               	movlw	low STR_26
  2779  00082C  6E21               	movwf	printf@f,c
  2780  00082E  0EFF               	movlw	high STR_26
  2781  000830  6E22               	movwf	printf@f+1,c
  2782  000832  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2783  000836  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2784  00083A  EC63  F008         	call	_printf	;wreg free
  2785                           
  2786                           ;main.c: 429: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  2787  00083E  0100               	movlb	0	; () banked
  2788  000840  519A               	movf	main@prevSoupIR& (0+255),w,b
  2789  000842  5CC3               	subwf	4035,w,c	;volatile
  2790  000844  0100               	movlb	0	; () banked
  2791  000846  519B               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2792  000848  58C4               	subwfb	4036,w,c	;volatile
  2793  00084A  B0D8               	btfsc	status,0,c
  2794  00084C  D065               	goto	l6036
  2795                           
  2796                           ; BSR set to: 0
  2797  00084E  0EAB               	movlw	171
  2798  000850  5CC3               	subwf	4035,w,c	;volatile
  2799  000852  0E03               	movlw	3
  2800  000854  58C4               	subwfb	4036,w,c	;volatile
  2801  000856  A0D8               	btfss	status,0,c
  2802  000858  D05F               	goto	l6036
  2803                           
  2804                           ; BSR set to: 0
  2805  00085A  0E00               	movlw	0
  2806  00085C  6E53               	movwf	_labelState+1,c
  2807  00085E  0E65               	movlw	101
  2808  000860  6E52               	movwf	_labelState,c
  2809  000862  D05A               	goto	l6036
  2810  000864                     l6010:
  2811                           
  2812                           ;main.c: 434: else if(labelState == 0){
  2813  000864  5052               	movf	_labelState,w,c
  2814  000866  1053               	iorwf	_labelState+1,w,c
  2815  000868  A4D8               	btfss	status,2,c
  2816  00086A  D05B               	goto	l6038
  2817                           
  2818                           ;main.c: 435: if(soupSteps < (80+70)){
  2819  00086C  BE59               	btfsc	_soupSteps+1,7,c
  2820  00086E  D006               	goto	l6014
  2821  000870  5059               	movf	_soupSteps+1,w,c
  2822  000872  E10E               	bnz	l6016
  2823  000874  0E96               	movlw	150
  2824  000876  5C58               	subwf	_soupSteps,w,c
  2825  000878  B0D8               	btfsc	status,0,c
  2826  00087A  D00A               	goto	l6016
  2827  00087C                     l6014:
  2828                           
  2829                           ;main.c: 436: S1mode = 2;
  2830  00087C  0E00               	movlw	0
  2831  00087E  6E5D               	movwf	_S1mode+1,c
  2832  000880  0E02               	movlw	2
  2833  000882                     L1:
  2834  000882  6E5C               	movwf	_S1mode,c
  2835                           
  2836                           ;main.c: 437: prevSoupLoad = 0;
  2837  000884  0E00               	movlw	0
  2838  000886  0100               	movlb	0	; () banked
  2839  000888  6F91               	movwf	(main@prevSoupLoad+1)& (0+255),b
  2840  00088A  0E00               	movlw	0
  2841  00088C  6F90               	movwf	main@prevSoupLoad& (0+255),b
  2842                           
  2843                           ;main.c: 438: }
  2844  00088E  D077               	goto	l6058
  2845  000890                     l6016:
  2846                           
  2847                           ;main.c: 439: else if(soupSteps < (80+70+58)){
  2848  000890  BE59               	btfsc	_soupSteps+1,7,c
  2849  000892  D006               	goto	l6018
  2850  000894  5059               	movf	_soupSteps+1,w,c
  2851  000896  E10D               	bnz	l6020
  2852  000898  0ED0               	movlw	208
  2853  00089A  5C58               	subwf	_soupSteps,w,c
  2854  00089C  B0D8               	btfsc	status,0,c
  2855  00089E  D009               	goto	l6020
  2856  0008A0                     l6018:
  2857                           
  2858                           ;main.c: 440: S1mode = 1;
  2859  0008A0  0E00               	movlw	0
  2860  0008A2  6E5D               	movwf	_S1mode+1,c
  2861  0008A4  0E01               	movlw	1
  2862  0008A6  6E5C               	movwf	_S1mode,c
  2863                           
  2864                           ;main.c: 441: soupAlign = 1;
  2865  0008A8  0E00               	movlw	0
  2866  0008AA  6E4F               	movwf	_soupAlign+1,c
  2867  0008AC  0E01               	movlw	1
  2868  0008AE                     L2:
  2869  0008AE  6E4E               	movwf	_soupAlign,c
  2870                           
  2871                           ;main.c: 442: }
  2872  0008B0  D066               	goto	l6058
  2873  0008B2                     l6020:
  2874                           
  2875                           ;main.c: 443: else{
  2876                           ;main.c: 444: S1mode = 10;
  2877  0008B2  0E00               	movlw	0
  2878  0008B4  6E5D               	movwf	_S1mode+1,c
  2879  0008B6  0E0A               	movlw	10
  2880  0008B8  6E5C               	movwf	_S1mode,c
  2881                           
  2882                           ;main.c: 445: printf(" %d", soupAlign);
  2883  0008BA  0E9B               	movlw	low (STR_49+12)
  2884  0008BC  6E21               	movwf	printf@f,c
  2885  0008BE  0EFE               	movlw	high (STR_49+12)
  2886  0008C0  6E22               	movwf	printf@f+1,c
  2887  0008C2  C04E  F023         	movff	_soupAlign,?_printf+2
  2888  0008C6  C04F  F024         	movff	_soupAlign+1,?_printf+3
  2889  0008CA  EC63  F008         	call	_printf	;wreg free
  2890                           
  2891                           ;main.c: 446: updateS1(soupAlign);
  2892  0008CE  C04E  F015         	movff	_soupAlign,updateS1@mode
  2893  0008D2  C04F  F016         	movff	_soupAlign+1,updateS1@mode+1
  2894  0008D6  ECE9  F009         	call	_updateS1	;wreg free
  2895                           
  2896                           ;main.c: 447: readADC(1);
  2897  0008DA  0E01               	movlw	1
  2898  0008DC  EC76  F012         	call	_readADC
  2899                           
  2900                           ;main.c: 448: printf(" %x", ADRES);
  2901  0008E0  0EFB               	movlw	low STR_26
  2902  0008E2  6E21               	movwf	printf@f,c
  2903  0008E4  0EFF               	movlw	high STR_26
  2904  0008E6  6E22               	movwf	printf@f+1,c
  2905  0008E8  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2906  0008EC  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2907  0008F0  EC63  F008         	call	_printf	;wreg free
  2908                           
  2909                           ;main.c: 449: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  2910  0008F4  0100               	movlb	0	; () banked
  2911  0008F6  519A               	movf	main@prevSoupIR& (0+255),w,b
  2912  0008F8  5CC3               	subwf	4035,w,c	;volatile
  2913  0008FA  0100               	movlb	0	; () banked
  2914  0008FC  519B               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2915  0008FE  58C4               	subwfb	4036,w,c	;volatile
  2916  000900  B0D8               	btfsc	status,0,c
  2917  000902  D00A               	goto	l6036
  2918                           
  2919                           ; BSR set to: 0
  2920  000904  0EAB               	movlw	171
  2921  000906  5CC3               	subwf	4035,w,c	;volatile
  2922  000908  0E03               	movlw	3
  2923  00090A  58C4               	subwfb	4036,w,c	;volatile
  2924  00090C  A0D8               	btfss	status,0,c
  2925  00090E  D004               	goto	l6036
  2926                           
  2927                           ; BSR set to: 0
  2928  000910  0E00               	movlw	0
  2929  000912  6E53               	movwf	_labelState+1,c
  2930  000914  0E64               	movlw	100
  2931  000916  D7A4               	goto	L8
  2932  000918                     l6036:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 450: prevSoupIR = ADRES;
  2936  000918  CFC3 F09A          	movff	4035,main@prevSoupIR	;volatile
  2937  00091C  CFC4 F09B          	movff	4036,main@prevSoupIR+1	;volatile
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 451: }
  2941                           ;main.c: 452: }
  2942                           
  2943                           ; BSR set to: 0
  2944  000920  D02E               	goto	l6058
  2945  000922                     l6038:
  2946                           
  2947                           ;main.c: 453: else{
  2948                           ;main.c: 454: if(labelState == 101){soupNL++;}
  2949  000922  0E65               	movlw	101
  2950  000924  1852               	xorwf	_labelState,w,c
  2951  000926  1053               	iorwf	_labelState+1,w,c
  2952  000928  A4D8               	btfss	status,2,c
  2953  00092A  D004               	goto	l6042
  2954  00092C  0100               	movlb	0	; () banked
  2955  00092E  4B8A               	infsnz	main@soupNL& (0+255),f,b
  2956  000930  2B8B               	incf	(main@soupNL+1)& (0+255),f,b
  2957  000932  D008               	goto	l6046
  2958  000934                     l6042:
  2959                           
  2960                           ;main.c: 455: else if(labelState == 100){soupL++;}
  2961  000934  0E64               	movlw	100
  2962  000936  1852               	xorwf	_labelState,w,c
  2963  000938  1053               	iorwf	_labelState+1,w,c
  2964  00093A  A4D8               	btfss	status,2,c
  2965  00093C  D003               	goto	l6046
  2966  00093E  0100               	movlb	0	; () banked
  2967  000940  4B88               	infsnz	main@soupL& (0+255),f,b
  2968  000942  2B89               	incf	(main@soupL+1)& (0+255),f,b
  2969  000944                     l6046:
  2970                           
  2971                           ;main.c: 456: soupSteps = 0;
  2972  000944  0E00               	movlw	0
  2973  000946  6E59               	movwf	_soupSteps+1,c
  2974  000948  0E00               	movlw	0
  2975  00094A  6E58               	movwf	_soupSteps,c
  2976                           
  2977                           ;main.c: 457: prevSoupIR = 0;
  2978  00094C  0E00               	movlw	0
  2979  00094E  0100               	movlb	0	; () banked
  2980  000950  6F9B               	movwf	(main@prevSoupIR+1)& (0+255),b
  2981  000952  0E00               	movlw	0
  2982  000954  6F9A               	movwf	main@prevSoupIR& (0+255),b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;main.c: 458: labelState = 0;
  2986  000956  0E00               	movlw	0
  2987  000958  6E53               	movwf	_labelState+1,c
  2988  00095A  0E00               	movlw	0
  2989  00095C  6E52               	movwf	_labelState,c
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;main.c: 459: if (prevSoupLoad == 0) {soupSort = 0;}
  2993  00095E  0100               	movlb	0	; () banked
  2994  000960  5190               	movf	main@prevSoupLoad& (0+255),w,b
  2995  000962  0100               	movlb	0	; () banked
  2996  000964  1191               	iorwf	(main@prevSoupLoad+1)& (0+255),w,b
  2997  000966  A4D8               	btfss	status,2,c
  2998  000968  D00A               	goto	l6058
  2999                           
  3000                           ; BSR set to: 0
  3001  00096A  0E00               	movlw	0
  3002  00096C  0100               	movlb	0	; () banked
  3003  00096E  6F95               	movwf	(main@soupSort+1)& (0+255),b
  3004  000970  0E00               	movlw	0
  3005  000972  6F94               	movwf	main@soupSort& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;main.c: 460: }
  3009                           ;main.c: 461: }
  3010                           
  3011                           ; BSR set to: 0
  3012                           
  3013                           ; BSR set to: 0
  3014                           
  3015                           ; BSR set to: 0
  3016  000974  D004               	goto	l6058
  3017  000976                     l6056:
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;main.c: 462: else{
  3021                           ;main.c: 463: S1mode = 3;
  3022  000976  0E00               	movlw	0
  3023  000978  6E5D               	movwf	_S1mode+1,c
  3024  00097A  0E03               	movlw	3
  3025  00097C  6E5C               	movwf	_S1mode,c
  3026  00097E                     l6058:
  3027                           
  3028                           ;main.c: 464: }
  3029                           ;main.c: 467: lcdInst(0b11000000);;
  3030  00097E  0EC0               	movlw	192
  3031  000980  ECCA  F012         	call	_lcdInst
  3032                           
  3033                           ;main.c: 469: readADC(0);
  3034  000984  0E00               	movlw	0
  3035  000986  EC76  F012         	call	_readADC
  3036                           
  3037                           ;main.c: 470: if(ADRES <= 0x250){
  3038  00098A  0E51               	movlw	81
  3039  00098C  5CC3               	subwf	4035,w,c	;volatile
  3040  00098E  0E02               	movlw	2
  3041  000990  58C4               	subwfb	4036,w,c	;volatile
  3042  000992  B0D8               	btfsc	status,0,c
  3043  000994  D01F               	goto	l6072
  3044                           
  3045                           ;main.c: 471: prevSodaLoad = seconds;
  3046  000996  C05E  F092         	movff	_seconds,main@prevSodaLoad
  3047  00099A  C05F  F093         	movff	_seconds+1,main@prevSodaLoad+1
  3048                           
  3049                           ;main.c: 472: if (!sodaSort){
  3050  00099E  0100               	movlb	0	; () banked
  3051  0009A0  5196               	movf	main@sodaSort& (0+255),w,b
  3052  0009A2  0100               	movlb	0	; () banked
  3053  0009A4  1197               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3054  0009A6  A4D8               	btfss	status,2,c
  3055  0009A8  D015               	goto	l6072
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;main.c: 473: sodaSort = 1;
  3059  0009AA  0E00               	movlw	0
  3060  0009AC  0100               	movlb	0	; () banked
  3061  0009AE  6F97               	movwf	(main@sodaSort+1)& (0+255),b
  3062  0009B0  0E01               	movlw	1
  3063  0009B2  6F96               	movwf	main@sodaSort& (0+255),b
  3064                           
  3065                           ;main.c: 474: sodaSteps = 0;
  3066  0009B4  0E00               	movlw	0
  3067  0009B6  6E57               	movwf	_sodaSteps+1,c
  3068  0009B8  0E00               	movlw	0
  3069  0009BA  6E56               	movwf	_sodaSteps,c
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 475: _delay((unsigned long)((150)*(32000000/4000.0)));
  3073  0009BC  0E07               	movlw	7
  3074  0009BE  6E41               	movwf	(??_main+1)& (0+255),c
  3075  0009C0  0E17               	movlw	23
  3076  0009C2  6E40               	movwf	??_main& (0+255),c
  3077  0009C4  0E6A               	movlw	106
  3078  0009C6                     u7607:
  3079  0009C6  2EE8               	decfsz	wreg,f,c
  3080  0009C8  D7FE               	bra	u7607
  3081  0009CA  2E40               	decfsz	??_main& (0+255),f,c
  3082  0009CC  D7FC               	bra	u7607
  3083  0009CE  2E41               	decfsz	(??_main+1)& (0+255),f,c
  3084  0009D0  D7FA               	bra	u7607
  3085  0009D2  D000               	nop2	
  3086  0009D4                     l6072:
  3087                           
  3088                           ;main.c: 476: }
  3089                           ;main.c: 477: }
  3090                           ;main.c: 479: printf("soda: %x %d", ADRES, sodaSteps);
  3091  0009D4  0EA9               	movlw	low STR_31
  3092  0009D6  6E21               	movwf	printf@f,c
  3093  0009D8  0EFF               	movlw	high STR_31
  3094  0009DA  6E22               	movwf	printf@f+1,c
  3095  0009DC  CFC3 F023          	movff	4035,?_printf+2	;volatile
  3096  0009E0  CFC4 F024          	movff	4036,?_printf+3	;volatile
  3097  0009E4  C056  F025         	movff	_sodaSteps,?_printf+4
  3098  0009E8  C057  F026         	movff	_sodaSteps+1,?_printf+5
  3099  0009EC  EC63  F008         	call	_printf	;wreg free
  3100                           
  3101                           ;main.c: 481: if (sodaSort){
  3102  0009F0  0100               	movlb	0	; () banked
  3103  0009F2  5196               	movf	main@sodaSort& (0+255),w,b
  3104  0009F4  0100               	movlb	0	; () banked
  3105  0009F6  1197               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3106  0009F8  A4D8               	btfss	status,2,c
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 482: if(sodaSteps < 48){
  3110  0009FA  BE57               	btfsc	_sodaSteps+1,7,c
  3111  0009FC  D140               	goto	l6174
  3112  0009FE  5057               	movf	_sodaSteps+1,w,c
  3113  000A00  E104               	bnz	l6080
  3114  000A02  0E30               	movlw	48
  3115  000A04  5C56               	subwf	_sodaSteps,w,c
  3116  000A06  A0D8               	btfss	status,0,c
  3117  000A08  D13A               	goto	l6174
  3118  000A0A                     l6080:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;main.c: 486: else if (sodaSteps < (48+44)){
  3122  000A0A  BE57               	btfsc	_sodaSteps+1,7,c
  3123  000A0C  D006               	goto	l6082
  3124  000A0E  5057               	movf	_sodaSteps+1,w,c
  3125  000A10  E108               	bnz	l6084
  3126  000A12  0E5C               	movlw	92
  3127  000A14  5C56               	subwf	_sodaSteps,w,c
  3128  000A16  B0D8               	btfsc	status,0,c
  3129  000A18  D004               	goto	l6084
  3130  000A1A                     l6082:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 487: S3mode = 1;
  3134  000A1A  0E00               	movlw	0
  3135  000A1C  6E5B               	movwf	_S3mode+1,c
  3136  000A1E  0E01               	movlw	1
  3137  000A20  D131               	goto	L9
  3138  000A22                     l6084:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 490: else if (sodaSteps < (48+44+10)){
  3142  000A22  BE57               	btfsc	_sodaSteps+1,7,c
  3143  000A24  D006               	goto	l6086
  3144  000A26  5057               	movf	_sodaSteps+1,w,c
  3145  000A28  E10D               	bnz	l6088
  3146  000A2A  0E66               	movlw	102
  3147  000A2C  5C56               	subwf	_sodaSteps,w,c
  3148  000A2E  B0D8               	btfsc	status,0,c
  3149  000A30  D009               	goto	l6088
  3150  000A32                     l6086:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 491: S3mode = 4;
  3154  000A32  0E00               	movlw	0
  3155  000A34  6E5B               	movwf	_S3mode+1,c
  3156  000A36  0E04               	movlw	4
  3157  000A38  6E5A               	movwf	_S3mode,c
  3158                           
  3159                           ;main.c: 492: S2mode = 1;
  3160  000A3A  0E00               	movlw	0
  3161  000A3C  0100               	movlb	0	; () banked
  3162  000A3E  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3163  000A40  0E01               	movlw	1
  3164  000A42  D125               	goto	L5
  3165  000A44                     l6088:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;main.c: 494: else if (sodaSteps < (48+44+10+12)){
  3169  000A44  BE57               	btfsc	_sodaSteps+1,7,c
  3170  000A46  D006               	goto	l6090
  3171  000A48  5057               	movf	_sodaSteps+1,w,c
  3172  000A4A  E121               	bnz	l6100
  3173  000A4C  0E72               	movlw	114
  3174  000A4E  5C56               	subwf	_sodaSteps,w,c
  3175  000A50  B0D8               	btfsc	status,0,c
  3176  000A52  D01D               	goto	l6100
  3177  000A54                     l6090:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 495: S2mode = 4;
  3181  000A54  0E00               	movlw	0
  3182  000A56  0100               	movlb	0	; () banked
  3183  000A58  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3184  000A5A  0E04               	movlw	4
  3185  000A5C  6FAB               	movwf	_S2mode& (0+255),b
  3186                           
  3187                           ;main.c: 496: S3mode = 4;
  3188  000A5E  0E00               	movlw	0
  3189  000A60  6E5B               	movwf	_S3mode+1,c
  3190  000A62  0E04               	movlw	4
  3191  000A64  6E5A               	movwf	_S3mode,c
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 497: readADC(3);
  3195  000A66  0E03               	movlw	3
  3196  000A68  EC76  F012         	call	_readADC
  3197                           
  3198                           ;main.c: 498: if(ADRESH<=1){tabState = 1;}
  3199  000A6C  0E02               	movlw	2
  3200  000A6E  60C4               	cpfslt	4036,c	;volatile
  3201  000A70  D004               	goto	l6098
  3202  000A72  0E00               	movlw	0
  3203  000A74  6E55               	movwf	_tabState+1,c
  3204  000A76  0E01               	movlw	1
  3205  000A78  6E54               	movwf	_tabState,c
  3206  000A7A                     l6098:
  3207                           
  3208                           ;main.c: 499: printf(" %x",ADRESH);
  3209  000A7A  0EFB               	movlw	low STR_26
  3210  000A7C  6E21               	movwf	printf@f,c
  3211  000A7E  0EFF               	movlw	high STR_26
  3212  000A80  6E22               	movwf	printf@f+1,c
  3213  000A82  CFC4 F023          	movff	4036,?_printf+2	;volatile
  3214  000A86  6A24               	clrf	?_printf+3,c
  3215  000A88  EC63  F008         	call	_printf	;wreg free
  3216                           
  3217                           ;main.c: 500: }
  3218  000A8C  D101               	goto	l6176
  3219  000A8E                     l6100:
  3220                           
  3221                           ;main.c: 501: else if (sodaSteps < (48+44+10+12+10)){
  3222  000A8E  BE57               	btfsc	_sodaSteps+1,7,c
  3223  000A90  D006               	goto	l6102
  3224  000A92  5057               	movf	_sodaSteps+1,w,c
  3225  000A94  E10E               	bnz	l6104
  3226  000A96  0E7C               	movlw	124
  3227  000A98  5C56               	subwf	_sodaSteps,w,c
  3228  000A9A  B0D8               	btfsc	status,0,c
  3229  000A9C  D00A               	goto	l6104
  3230  000A9E                     l6102:
  3231                           
  3232                           ;main.c: 502: S2mode = 2;
  3233  000A9E  0E00               	movlw	0
  3234  000AA0  0100               	movlb	0	; () banked
  3235  000AA2  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3236  000AA4  0E02               	movlw	2
  3237  000AA6  6FAB               	movwf	_S2mode& (0+255),b
  3238                           
  3239                           ;main.c: 503: S3mode = 4;
  3240  000AA8  0E00               	movlw	0
  3241  000AAA  6E5B               	movwf	_S3mode+1,c
  3242  000AAC  0E04               	movlw	4
  3243  000AAE  6E5A               	movwf	_S3mode,c
  3244                           
  3245                           ;main.c: 504: }
  3246  000AB0  D0EF               	goto	l6176
  3247  000AB2                     l6104:
  3248                           
  3249                           ;main.c: 505: else if (tabState == 1){
  3250  000AB2  0454               	decf	_tabState,w,c
  3251  000AB4  1055               	iorwf	_tabState+1,w,c
  3252  000AB6  A4D8               	btfss	status,2,c
  3253  000AB8  D054               	goto	l6130
  3254                           
  3255                           ;main.c: 506: if(sodaSteps < (48+44+10+12+10+30)){
  3256  000ABA  BE57               	btfsc	_sodaSteps+1,7,c
  3257  000ABC  D006               	goto	l6108
  3258  000ABE  5057               	movf	_sodaSteps+1,w,c
  3259  000AC0  E108               	bnz	l6110
  3260  000AC2  0E9A               	movlw	154
  3261  000AC4  5C56               	subwf	_sodaSteps,w,c
  3262  000AC6  B0D8               	btfsc	status,0,c
  3263  000AC8  D004               	goto	l6110
  3264  000ACA                     l6108:
  3265                           
  3266                           ;main.c: 507: S3mode = 1;
  3267  000ACA  0E00               	movlw	0
  3268  000ACC  6E5B               	movwf	_S3mode+1,c
  3269  000ACE  0E01               	movlw	1
  3270  000AD0  D057               	goto	L6
  3271  000AD2                     l6110:
  3272                           
  3273                           ;main.c: 511: else if(sodaSteps < (48+44+10+12+10+30+57)){
  3274  000AD2  BE57               	btfsc	_sodaSteps+1,7,c
  3275  000AD4  D006               	goto	l6112
  3276  000AD6  5057               	movf	_sodaSteps+1,w,c
  3277  000AD8  E111               	bnz	l6114
  3278  000ADA  0ED3               	movlw	211
  3279  000ADC  5C56               	subwf	_sodaSteps,w,c
  3280  000ADE  B0D8               	btfsc	status,0,c
  3281  000AE0  D00D               	goto	l6114
  3282  000AE2                     l6112:
  3283                           
  3284                           ;main.c: 512: S3mode = 2;
  3285  000AE2  0E00               	movlw	0
  3286  000AE4  6E5B               	movwf	_S3mode+1,c
  3287  000AE6  0E02               	movlw	2
  3288  000AE8  6E5A               	movwf	_S3mode,c
  3289                           
  3290                           ;main.c: 513: S2mode = 4;
  3291  000AEA  0E00               	movlw	0
  3292  000AEC  0100               	movlb	0	; () banked
  3293  000AEE  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3294  000AF0  0E04               	movlw	4
  3295  000AF2  6FAB               	movwf	_S2mode& (0+255),b
  3296                           
  3297                           ;main.c: 514: sodaAlign = 2;
  3298  000AF4  0E00               	movlw	0
  3299  000AF6  6E51               	movwf	_sodaAlign+1,c
  3300  000AF8  0E02               	movlw	2
  3301  000AFA  D062               	goto	L7
  3302  000AFC                     l6114:
  3303                           
  3304                           ;main.c: 516: else {
  3305                           ;main.c: 517: S2mode = 4;
  3306  000AFC  0E00               	movlw	0
  3307  000AFE  0100               	movlb	0	; () banked
  3308  000B00  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3309  000B02  0E04               	movlw	4
  3310  000B04  6FAB               	movwf	_S2mode& (0+255),b
  3311                           
  3312                           ;main.c: 518: S3mode = 10;
  3313  000B06  0E00               	movlw	0
  3314  000B08  6E5B               	movwf	_S3mode+1,c
  3315  000B0A  0E0A               	movlw	10
  3316  000B0C  6E5A               	movwf	_S3mode,c
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 519: updateS3(sodaAlign);
  3320  000B0E  C050  F015         	movff	_sodaAlign,updateS3@mode
  3321  000B12  C051  F016         	movff	_sodaAlign+1,updateS3@mode+1
  3322  000B16  EC59  F00D         	call	_updateS3	;wreg free
  3323                           
  3324                           ;main.c: 520: readADC(5);
  3325  000B1A  0E05               	movlw	5
  3326  000B1C  EC76  F012         	call	_readADC
  3327                           
  3328                           ;main.c: 521: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3329  000B20  0100               	movlb	0	; () banked
  3330  000B22  5198               	movf	main@prevSodaIR& (0+255),w,b
  3331  000B24  5CC3               	subwf	4035,w,c	;volatile
  3332  000B26  0100               	movlb	0	; () banked
  3333  000B28  5199               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3334  000B2A  58C4               	subwfb	4036,w,c	;volatile
  3335  000B2C  B0D8               	btfsc	status,0,c
  3336  000B2E  D00A               	goto	l6126
  3337                           
  3338                           ; BSR set to: 0
  3339  000B30  0EAB               	movlw	171
  3340  000B32  5CC3               	subwf	4035,w,c	;volatile
  3341  000B34  0E03               	movlw	3
  3342  000B36  58C4               	subwfb	4036,w,c	;volatile
  3343  000B38  A0D8               	btfss	status,0,c
  3344  000B3A  D004               	goto	l6126
  3345                           
  3346                           ; BSR set to: 0
  3347  000B3C  0E00               	movlw	0
  3348  000B3E  6E55               	movwf	_tabState+1,c
  3349  000B40  0E65               	movlw	101
  3350  000B42  6E54               	movwf	_tabState,c
  3351  000B44                     l6126:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;main.c: 522: prevSodaIR = ADRES;
  3355  000B44  CFC3 F098          	movff	4035,main@prevSodaIR	;volatile
  3356  000B48  CFC4 F099          	movff	4036,main@prevSodaIR+1	;volatile
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 523: printf(" %x", ADRES);
  3360  000B4C  0EFB               	movlw	low STR_26
  3361  000B4E  6E21               	movwf	printf@f,c
  3362  000B50  0EFF               	movlw	high STR_26
  3363  000B52  6E22               	movwf	printf@f+1,c
  3364  000B54  CFC3 F023          	movff	4035,?_printf+2	;volatile
  3365  000B58  CFC4 F024          	movff	4036,?_printf+3	;volatile
  3366  000B5C  EC63  F008         	call	_printf	;wreg free
  3367                           
  3368                           ;main.c: 524: }
  3369                           ;main.c: 525: }
  3370  000B60  D097               	goto	l6176
  3371  000B62                     l6130:
  3372                           
  3373                           ;main.c: 526: else if(tabState == 0){
  3374  000B62  5054               	movf	_tabState,w,c
  3375  000B64  1055               	iorwf	_tabState+1,w,c
  3376  000B66  A4D8               	btfss	status,2,c
  3377  000B68  D060               	goto	l6156
  3378                           
  3379                           ;main.c: 527: if(sodaSteps < (48+44+10+12+10+(44+75))){
  3380  000B6A  BE57               	btfsc	_sodaSteps+1,7,c
  3381  000B6C  D006               	goto	l6134
  3382  000B6E  5057               	movf	_sodaSteps+1,w,c
  3383  000B70  E113               	bnz	l6136
  3384  000B72  0EF3               	movlw	243
  3385  000B74  5C56               	subwf	_sodaSteps,w,c
  3386  000B76  B0D8               	btfsc	status,0,c
  3387  000B78  D00F               	goto	l6136
  3388  000B7A                     l6134:
  3389                           
  3390                           ;main.c: 528: S3mode = 2;
  3391  000B7A  0E00               	movlw	0
  3392  000B7C  6E5B               	movwf	_S3mode+1,c
  3393  000B7E  0E02               	movlw	2
  3394  000B80                     L6:
  3395  000B80  6E5A               	movwf	_S3mode,c
  3396                           
  3397                           ;main.c: 529: S2mode = 4;
  3398  000B82  0E00               	movlw	0
  3399  000B84  0100               	movlb	0	; () banked
  3400  000B86  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3401  000B88  0E04               	movlw	4
  3402  000B8A  6FAB               	movwf	_S2mode& (0+255),b
  3403                           
  3404                           ;main.c: 530: prevSodaLoad = 0;
  3405  000B8C  0E00               	movlw	0
  3406  000B8E  0100               	movlb	0	; () banked
  3407  000B90  6F93               	movwf	(main@prevSodaLoad+1)& (0+255),b
  3408  000B92  0E00               	movlw	0
  3409  000B94  6F92               	movwf	main@prevSodaLoad& (0+255),b
  3410                           
  3411                           ;main.c: 531: }
  3412  000B96  D07C               	goto	l6176
  3413  000B98                     l6136:
  3414                           
  3415                           ;main.c: 532: else if(sodaSteps < (48+44+10+12+10+(44+75)+62)){
  3416  000B98  BE57               	btfsc	_sodaSteps+1,7,c
  3417  000B9A  D006               	goto	l6138
  3418  000B9C  0E31               	movlw	49
  3419  000B9E  5C56               	subwf	_sodaSteps,w,c
  3420  000BA0  0E01               	movlw	1
  3421  000BA2  5857               	subwfb	_sodaSteps+1,w,c
  3422  000BA4  B0D8               	btfsc	status,0,c
  3423  000BA6  D00E               	goto	l6140
  3424  000BA8                     l6138:
  3425                           
  3426                           ;main.c: 533: S3mode = 1;
  3427  000BA8  0E00               	movlw	0
  3428  000BAA  6E5B               	movwf	_S3mode+1,c
  3429  000BAC  0E01               	movlw	1
  3430  000BAE  6E5A               	movwf	_S3mode,c
  3431                           
  3432                           ;main.c: 534: S2mode = 4;
  3433  000BB0  0E00               	movlw	0
  3434  000BB2  0100               	movlb	0	; () banked
  3435  000BB4  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3436  000BB6  0E04               	movlw	4
  3437  000BB8  6FAB               	movwf	_S2mode& (0+255),b
  3438                           
  3439                           ;main.c: 535: sodaAlign = 1;
  3440  000BBA  0E00               	movlw	0
  3441  000BBC  6E51               	movwf	_sodaAlign+1,c
  3442  000BBE  0E01               	movlw	1
  3443  000BC0                     L7:
  3444  000BC0  6E50               	movwf	_sodaAlign,c
  3445                           
  3446                           ;main.c: 536: }
  3447  000BC2  D066               	goto	l6176
  3448  000BC4                     l6140:
  3449                           
  3450                           ;main.c: 537: else {
  3451                           ;main.c: 538: S3mode = 10;
  3452  000BC4  0E00               	movlw	0
  3453  000BC6  6E5B               	movwf	_S3mode+1,c
  3454  000BC8  0E0A               	movlw	10
  3455  000BCA  6E5A               	movwf	_S3mode,c
  3456                           
  3457                           ;main.c: 539: S2mode = 4;
  3458  000BCC  0E00               	movlw	0
  3459  000BCE  0100               	movlb	0	; () banked
  3460  000BD0  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3461  000BD2  0E04               	movlw	4
  3462  000BD4  6FAB               	movwf	_S2mode& (0+255),b
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 540: updateS3(sodaAlign);
  3466  000BD6  C050  F015         	movff	_sodaAlign,updateS3@mode
  3467  000BDA  C051  F016         	movff	_sodaAlign+1,updateS3@mode+1
  3468  000BDE  EC59  F00D         	call	_updateS3	;wreg free
  3469                           
  3470                           ;main.c: 541: readADC(5);
  3471  000BE2  0E05               	movlw	5
  3472  000BE4  EC76  F012         	call	_readADC
  3473                           
  3474                           ;main.c: 542: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  3475  000BE8  0100               	movlb	0	; () banked
  3476  000BEA  5198               	movf	main@prevSodaIR& (0+255),w,b
  3477  000BEC  5CC3               	subwf	4035,w,c	;volatile
  3478  000BEE  0100               	movlb	0	; () banked
  3479  000BF0  5199               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3480  000BF2  58C4               	subwfb	4036,w,c	;volatile
  3481  000BF4  B0D8               	btfsc	status,0,c
  3482  000BF6  D00A               	goto	l6152
  3483                           
  3484                           ; BSR set to: 0
  3485  000BF8  0EAB               	movlw	171
  3486  000BFA  5CC3               	subwf	4035,w,c	;volatile
  3487  000BFC  0E03               	movlw	3
  3488  000BFE  58C4               	subwfb	4036,w,c	;volatile
  3489  000C00  A0D8               	btfss	status,0,c
  3490  000C02  D004               	goto	l6152
  3491                           
  3492                           ; BSR set to: 0
  3493  000C04  0E00               	movlw	0
  3494  000C06  6E55               	movwf	_tabState+1,c
  3495  000C08  0E64               	movlw	100
  3496  000C0A  6E54               	movwf	_tabState,c
  3497  000C0C                     l6152:
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;main.c: 543: prevSodaIR = ADRES;
  3501  000C0C  CFC3 F098          	movff	4035,main@prevSodaIR	;volatile
  3502  000C10  CFC4 F099          	movff	4036,main@prevSodaIR+1	;volatile
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;main.c: 544: printf(" %x", ADRES);
  3506  000C14  0EFB               	movlw	low STR_26
  3507  000C16  6E21               	movwf	printf@f,c
  3508  000C18  0EFF               	movlw	high STR_26
  3509  000C1A  6E22               	movwf	printf@f+1,c
  3510  000C1C  CFC3 F023          	movff	4035,?_printf+2	;volatile
  3511  000C20  CFC4 F024          	movff	4036,?_printf+3	;volatile
  3512  000C24  EC63  F008         	call	_printf	;wreg free
  3513                           
  3514                           ;main.c: 545: }
  3515                           ;main.c: 546: }
  3516  000C28  D033               	goto	l6176
  3517  000C2A                     l6156:
  3518                           
  3519                           ;main.c: 547: else{
  3520                           ;main.c: 548: if(tabState==101){sodaT++;}
  3521  000C2A  0E65               	movlw	101
  3522  000C2C  1854               	xorwf	_tabState,w,c
  3523  000C2E  1055               	iorwf	_tabState+1,w,c
  3524  000C30  A4D8               	btfss	status,2,c
  3525  000C32  D004               	goto	l6160
  3526  000C34  0100               	movlb	0	; () banked
  3527  000C36  4B8C               	infsnz	main@sodaT& (0+255),f,b
  3528  000C38  2B8D               	incf	(main@sodaT+1)& (0+255),f,b
  3529  000C3A  D008               	goto	l6164
  3530  000C3C                     l6160:
  3531                           
  3532                           ;main.c: 549: else if(tabState==10){sodaNT++;}
  3533  000C3C  0E0A               	movlw	10
  3534  000C3E  1854               	xorwf	_tabState,w,c
  3535  000C40  1055               	iorwf	_tabState+1,w,c
  3536  000C42  A4D8               	btfss	status,2,c
  3537  000C44  D003               	goto	l6164
  3538  000C46  0100               	movlb	0	; () banked
  3539  000C48  4B8E               	infsnz	main@sodaNT& (0+255),f,b
  3540  000C4A  2B8F               	incf	(main@sodaNT+1)& (0+255),f,b
  3541  000C4C                     l6164:
  3542                           
  3543                           ;main.c: 550: sodaSteps = 0;
  3544  000C4C  0E00               	movlw	0
  3545  000C4E  6E57               	movwf	_sodaSteps+1,c
  3546  000C50  0E00               	movlw	0
  3547  000C52  6E56               	movwf	_sodaSteps,c
  3548                           
  3549                           ;main.c: 551: tabState = 0;
  3550  000C54  0E00               	movlw	0
  3551  000C56  6E55               	movwf	_tabState+1,c
  3552  000C58  0E00               	movlw	0
  3553  000C5A  6E54               	movwf	_tabState,c
  3554                           
  3555                           ;main.c: 552: prevSodaIR = 0;
  3556  000C5C  0E00               	movlw	0
  3557  000C5E  0100               	movlb	0	; () banked
  3558  000C60  6F99               	movwf	(main@prevSodaIR+1)& (0+255),b
  3559  000C62  0E00               	movlw	0
  3560  000C64  6F98               	movwf	main@prevSodaIR& (0+255),b
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;main.c: 553: if (prevSodaLoad == 0) {sodaSort = 0;}
  3564  000C66  0100               	movlb	0	; () banked
  3565  000C68  5192               	movf	main@prevSodaLoad& (0+255),w,b
  3566  000C6A  0100               	movlb	0	; () banked
  3567  000C6C  1193               	iorwf	(main@prevSodaLoad+1)& (0+255),w,b
  3568  000C6E  A4D8               	btfss	status,2,c
  3569  000C70  D00F               	goto	l6176
  3570                           
  3571                           ; BSR set to: 0
  3572  000C72  0E00               	movlw	0
  3573  000C74  0100               	movlb	0	; () banked
  3574  000C76  6F97               	movwf	(main@sodaSort+1)& (0+255),b
  3575  000C78  0E00               	movlw	0
  3576  000C7A  6F96               	movwf	main@sodaSort& (0+255),b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;main.c: 554: }
  3580                           ;main.c: 555: }
  3581                           
  3582                           ; BSR set to: 0
  3583                           
  3584                           ; BSR set to: 0
  3585                           
  3586                           ; BSR set to: 0
  3587                           
  3588                           ; BSR set to: 0
  3589                           
  3590                           ; BSR set to: 0
  3591                           
  3592                           ; BSR set to: 0
  3593                           
  3594                           ; BSR set to: 0
  3595  000C7C  D009               	goto	l6176
  3596  000C7E                     l6174:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;main.c: 556: else{
  3600                           ;main.c: 557: S3mode = 3;
  3601  000C7E  0E00               	movlw	0
  3602  000C80  6E5B               	movwf	_S3mode+1,c
  3603  000C82  0E03               	movlw	3
  3604  000C84                     L9:
  3605  000C84  6E5A               	movwf	_S3mode,c
  3606                           
  3607                           ;main.c: 558: S2mode = 4;
  3608  000C86  0E00               	movlw	0
  3609  000C88  0100               	movlb	0	; () banked
  3610  000C8A  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3611  000C8C  0E04               	movlw	4
  3612  000C8E                     L5:
  3613  000C8E  6FAB               	movwf	_S2mode& (0+255),b
  3614  000C90                     l6176:
  3615                           
  3616                           ;main.c: 559: }
  3617                           ;main.c: 562: keyinterrupt();
  3618  000C90  EC97  F012         	call	_keyinterrupt	;wreg free
  3619                           
  3620                           ;main.c: 563: }while( keypress==(0));
  3621  000C94  5060               	movf	_keypress,w,c	;volatile
  3622  000C96  B4D8               	btfsc	status,2,c
  3623  000C98  D529               	goto	l5950
  3624                           
  3625                           ;main.c: 564: standby = 1;
  3626  000C9A  0E00               	movlw	0
  3627  000C9C  0100               	movlb	0	; () banked
  3628  000C9E  6F9D               	movwf	(main@standby+1)& (0+255),b
  3629  000CA0  0E01               	movlw	1
  3630  000CA2  6F9C               	movwf	main@standby& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;main.c: 565: PWM2off();
  3634  000CA4  ECD5  F012         	call	_PWM2off	;wreg free
  3635                           
  3636                           ;main.c: 566: PWM1off();
  3637  000CA8  ECDA  F012         	call	_PWM1off	;wreg free
  3638                           
  3639                           ;main.c: 567: S1mode = 0;
  3640  000CAC  0E00               	movlw	0
  3641  000CAE  6E5D               	movwf	_S1mode+1,c
  3642  000CB0  0E00               	movlw	0
  3643  000CB2  6E5C               	movwf	_S1mode,c
  3644                           
  3645                           ;main.c: 568: S2mode = 0;
  3646  000CB4  0E00               	movlw	0
  3647  000CB6  0100               	movlb	0	; () banked
  3648  000CB8  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3649  000CBA  0E00               	movlw	0
  3650  000CBC  6FAB               	movwf	_S2mode& (0+255),b
  3651                           
  3652                           ;main.c: 569: S3mode = 0;
  3653  000CBE  0E00               	movlw	0
  3654  000CC0  6E5B               	movwf	_S3mode+1,c
  3655  000CC2  0E00               	movlw	0
  3656  000CC4  6E5A               	movwf	_S3mode,c
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;main.c: 571: updateTime();
  3660  000CC6  EC99  F010         	call	_updateTime	;wreg free
  3661                           
  3662                           ;main.c: 572: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  3663  000CCA  C05E  F019         	movff	_seconds,addRun@dur
  3664  000CCE  C05F  F01A         	movff	_seconds+1,addRun@dur+1
  3665  000CD2  C0A4  F01B         	movff	_time+6,addRun@year
  3666  000CD6  6A1C               	clrf	addRun@year+1,c
  3667  000CD8  C0A3  F01D         	movff	_time+5,addRun@month
  3668  000CDC  6A1E               	clrf	addRun@month+1,c
  3669  000CDE  C0A2  F01F         	movff	_time+4,addRun@date
  3670  000CE2  6A20               	clrf	addRun@date+1,c
  3671  000CE4  C0A0  F021         	movff	_time+2,addRun@hours
  3672  000CE8  6A22               	clrf	addRun@hours+1,c
  3673  000CEA  C09F  F023         	movff	_time+1,addRun@mins
  3674  000CEE  6A24               	clrf	addRun@mins+1,c
  3675  000CF0  C09E  F025         	movff	_time,addRun@secs
  3676  000CF4  6A26               	clrf	addRun@secs+1,c
  3677  000CF6  C08C  F027         	movff	main@sodaT,addRun@sodaT
  3678  000CFA  C08D  F028         	movff	main@sodaT+1,addRun@sodaT+1
  3679  000CFE  C08E  F029         	movff	main@sodaNT,addRun@sodaNT
  3680  000D02  C08F  F02A         	movff	main@sodaNT+1,addRun@sodaNT+1
  3681  000D06  C088  F02B         	movff	main@soupL,addRun@soupL
  3682  000D0A  C089  F02C         	movff	main@soupL+1,addRun@soupL+1
  3683  000D0E  C08A  F02D         	movff	main@soupNL,addRun@soupNL
  3684  000D12  C08B  F02E         	movff	main@soupNL+1,addRun@soupNL+1
  3685  000D16  EC4B  F00F         	call	_addRun	;wreg free
  3686                           
  3687                           ;main.c: 574: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3688  000D1A  0E01               	movlw	1
  3689  000D1C  ECCA  F012         	call	_lcdInst
  3690  000D20  0E34               	movlw	52
  3691  000D22  6E40               	movwf	??_main& (0+255),c
  3692  000D24  0EF2               	movlw	242
  3693  000D26                     u7617:
  3694  000D26  2EE8               	decfsz	wreg,f,c
  3695  000D28  D7FE               	bra	u7617
  3696  000D2A  2E40               	decfsz	??_main& (0+255),f,c
  3697  000D2C  D7FC               	bra	u7617
  3698                           
  3699                           ;main.c: 575: printf("Sort done! A:No");
  3700  000D2E  0EDF               	movlw	low STR_35
  3701  000D30  6E21               	movwf	printf@f,c
  3702  000D32  0EFE               	movlw	high STR_35
  3703  000D34  6E22               	movwf	printf@f+1,c
  3704  000D36  EC63  F008         	call	_printf	;wreg free
  3705                           
  3706                           ;main.c: 576: lcdInst(0b11000000);;
  3707  000D3A  0EC0               	movlw	192
  3708  000D3C  ECCA  F012         	call	_lcdInst
  3709                           
  3710                           ;main.c: 577: printf("View Logs? B:Yes");
  3711  000D40  0E6E               	movlw	low STR_36
  3712  000D42  6E21               	movwf	printf@f,c
  3713  000D44  0EFE               	movlw	high STR_36
  3714  000D46  6E22               	movwf	printf@f+1,c
  3715  000D48  EC63  F008         	call	_printf	;wreg free
  3716                           
  3717                           ;main.c: 578: keycheck();
  3718  000D4C  ECA1  F012         	call	_keycheck	;wreg free
  3719                           
  3720                           ;main.c: 579: if(keypress == 7){
  3721  000D50  0E07               	movlw	7
  3722  000D52  1860               	xorwf	_keypress,w,c	;volatile
  3723  000D54  A4D8               	btfss	status,2,c
  3724  000D56  EF37  F000         	goto	l5636
  3725                           
  3726                           ;main.c: 580: displayLog(1);
  3727  000D5A  0E00               	movlw	0
  3728  000D5C  6E38               	movwf	displayLog@run+1,c
  3729  000D5E  0E01               	movlw	1
  3730  000D60  6E37               	movwf	displayLog@run,c
  3731  000D62  ECB5  F006         	call	_displayLog	;wreg free
  3732  000D66  EF37  F000         	goto	l5636
  3733  000D6A                     __end_of_main:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _updateTime *****************
  3741 ;; Defined at:
  3742 ;;		line 89 in file "I2C.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;		None
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  j               1   23[COMRAM] unsigned char 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;Total ram usage:        1 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    4
  3763 ;; This function calls:
  3764 ;;		_I2C_Master_Read
  3765 ;;		_I2C_Master_Start
  3766 ;;		_I2C_Master_Stop
  3767 ;;		_I2C_Master_Write
  3768 ;; This function is called by:
  3769 ;;		_main
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text1
  3774  002132                     __ptext1:
  3775                           	opt stack 0
  3776  002132                     _updateTime:
  3777                           	opt stack 26
  3778                           
  3779                           ;I2C.c: 91: I2C_Master_Start();
  3780                           
  3781                           ;incstack = 0
  3782  002132  ECE3  F012         	call	_I2C_Master_Start	;wreg free
  3783                           
  3784                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  3785  002136  0E00               	movlw	0
  3786  002138  6E17               	movwf	I2C_Master_Write@d+1,c
  3787  00213A  0ED0               	movlw	208
  3788  00213C  6E16               	movwf	I2C_Master_Write@d,c
  3789  00213E  ECD0  F012         	call	_I2C_Master_Write	;wreg free
  3790                           
  3791                           ;I2C.c: 93: I2C_Master_Write(0x00);
  3792  002142  0E00               	movlw	0
  3793  002144  6E17               	movwf	I2C_Master_Write@d+1,c
  3794  002146  0E00               	movlw	0
  3795  002148  6E16               	movwf	I2C_Master_Write@d,c
  3796  00214A  ECD0  F012         	call	_I2C_Master_Write	;wreg free
  3797                           
  3798                           ;I2C.c: 94: I2C_Master_Stop();
  3799  00214E  ECDF  F012         	call	_I2C_Master_Stop	;wreg free
  3800                           
  3801                           ;I2C.c: 97: I2C_Master_Start();
  3802  002152  ECE3  F012         	call	_I2C_Master_Start	;wreg free
  3803                           
  3804                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  3805  002156  0E00               	movlw	0
  3806  002158  6E17               	movwf	I2C_Master_Write@d+1,c
  3807  00215A  0ED1               	movlw	209
  3808  00215C  6E16               	movwf	I2C_Master_Write@d,c
  3809  00215E  ECD0  F012         	call	_I2C_Master_Write	;wreg free
  3810                           
  3811                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  3812  002162  0E00               	movlw	0
  3813  002164  6E18               	movwf	updateTime@j,c
  3814  002166                     l5380:
  3815  002166  0E05               	movlw	5
  3816  002168  6418               	cpfsgt	updateTime@j,c
  3817  00216A  D001               	goto	l5384
  3818  00216C  D00E               	goto	l5390
  3819  00216E                     l5384:
  3820                           
  3821                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  3822  00216E  5018               	movf	updateTime@j,w,c
  3823  002170  0D01               	mullw	1
  3824  002172  0E9E               	movlw	low _time
  3825  002174  24F3               	addwf	prodl,w,c
  3826  002176  6ED9               	movwf	fsr2l,c
  3827  002178  0E00               	movlw	high _time
  3828  00217A  20F4               	addwfc	prodh,w,c
  3829  00217C  6EDA               	movwf	fsr2h,c
  3830  00217E  0E01               	movlw	1
  3831  002180  EC50  F012         	call	_I2C_Master_Read
  3832  002184  6EDF               	movwf	indf2,c
  3833  002186  2A18               	incf	updateTime@j,f,c
  3834  002188  D7EE               	goto	l5380
  3835  00218A                     l5390:
  3836                           
  3837                           ;I2C.c: 101: }
  3838                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  3839  00218A  0E00               	movlw	0
  3840  00218C  EC50  F012         	call	_I2C_Master_Read
  3841  002190  0100               	movlb	0	; () banked
  3842  002192  6FA4               	movwf	(_time+6)& (0+255),b
  3843                           
  3844                           ;I2C.c: 103: I2C_Master_Stop();
  3845  002194  ECDF  F012         	call	_I2C_Master_Stop	;wreg free
  3846  002198  0012               	return		;funcret
  3847  00219A                     __end_of_updateTime:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           indf2	equ	0xFDF
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _I2C_Master_Write *****************
  3860 ;; Defined at:
  3861 ;;		line 54 in file "I2C.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  d               2   21[COMRAM] unsigned int 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;		None
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      void 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;Total ram usage:        2 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    3
  3882 ;; This function calls:
  3883 ;;		_I2C_Master_Wait
  3884 ;; This function is called by:
  3885 ;;		_updateTime
  3886 ;;		_set_time
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text2
  3891  0025A0                     __ptext2:
  3892                           	opt stack 0
  3893  0025A0                     _I2C_Master_Write:
  3894                           	opt stack 26
  3895                           
  3896                           ;I2C.c: 56: I2C_Master_Wait();
  3897                           
  3898                           ;incstack = 0
  3899  0025A0  ECAB  F012         	call	_I2C_Master_Wait	;wreg free
  3900                           
  3901                           ;I2C.c: 57: SSPBUF = d;
  3902  0025A4  C016  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3903  0025A8  0012               	return		;funcret
  3904  0025AA                     __end_of_I2C_Master_Write:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           indf2	equ	0xFDF
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function _I2C_Master_Stop *****************
  3917 ;; Defined at:
  3918 ;;		line 48 in file "I2C.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    3
  3939 ;; This function calls:
  3940 ;;		_I2C_Master_Wait
  3941 ;; This function is called by:
  3942 ;;		_updateTime
  3943 ;;		_set_time
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text3
  3948  0025BE                     __ptext3:
  3949                           	opt stack 0
  3950  0025BE                     _I2C_Master_Stop:
  3951                           	opt stack 26
  3952                           
  3953                           ;I2C.c: 50: I2C_Master_Wait();
  3954                           
  3955                           ;incstack = 0
  3956  0025BE  ECAB  F012         	call	_I2C_Master_Wait	;wreg free
  3957                           
  3958                           ;I2C.c: 51: PEN = 1;
  3959  0025C2  84C5               	bsf	4037,2,c	;volatile
  3960  0025C4  0012               	return		;funcret
  3961  0025C6                     __end_of_I2C_Master_Stop:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           prodh	equ	0xFF4
  3965                           prodl	equ	0xFF3
  3966                           postinc0	equ	0xFEE
  3967                           wreg	equ	0xFE8
  3968                           indf2	equ	0xFDF
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _I2C_Master_Start *****************
  3974 ;; Defined at:
  3975 ;;		line 36 in file "I2C.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        0 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    3
  3996 ;; This function calls:
  3997 ;;		_I2C_Master_Wait
  3998 ;; This function is called by:
  3999 ;;		_updateTime
  4000 ;;		_set_time
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text4
  4005  0025C6                     __ptext4:
  4006                           	opt stack 0
  4007  0025C6                     _I2C_Master_Start:
  4008                           	opt stack 26
  4009                           
  4010                           ;I2C.c: 38: I2C_Master_Wait();
  4011                           
  4012                           ;incstack = 0
  4013  0025C6  ECAB  F012         	call	_I2C_Master_Wait	;wreg free
  4014                           
  4015                           ;I2C.c: 39: SEN = 1;
  4016  0025CA  80C5               	bsf	4037,0,c	;volatile
  4017  0025CC  0012               	return		;funcret
  4018  0025CE                     __end_of_I2C_Master_Start:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           postinc0	equ	0xFEE
  4024                           wreg	equ	0xFE8
  4025                           indf2	equ	0xFDF
  4026                           fsr2h	equ	0xFDA
  4027                           fsr2l	equ	0xFD9
  4028                           status	equ	0xFD8
  4029                           
  4030 ;; *************** function _I2C_Master_Read *****************
  4031 ;; Defined at:
  4032 ;;		line 60 in file "I2C.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;  a               1    wreg     unsigned char 
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  a               1   21[COMRAM] unsigned char 
  4037 ;;  temp            1   22[COMRAM] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      unsigned char 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;Total ram usage:        2 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    3
  4054 ;; This function calls:
  4055 ;;		_I2C_Master_Wait
  4056 ;; This function is called by:
  4057 ;;		_updateTime
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text5
  4062  0024A0                     __ptext5:
  4063                           	opt stack 0
  4064  0024A0                     _I2C_Master_Read:
  4065                           	opt stack 26
  4066                           
  4067                           ;incstack = 0
  4068                           ;I2C_Master_Read@a stored from wreg
  4069  0024A0  6E16               	movwf	I2C_Master_Read@a,c
  4070                           
  4071                           ;I2C.c: 62: unsigned char temp;
  4072                           ;I2C.c: 63: I2C_Master_Wait();
  4073  0024A2  ECAB  F012         	call	_I2C_Master_Wait	;wreg free
  4074                           
  4075                           ;I2C.c: 64: RCEN = 1;
  4076  0024A6  86C5               	bsf	4037,3,c	;volatile
  4077                           
  4078                           ;I2C.c: 65: I2C_Master_Wait();
  4079  0024A8  ECAB  F012         	call	_I2C_Master_Wait	;wreg free
  4080                           
  4081                           ;I2C.c: 66: temp = SSPBUF;
  4082  0024AC  CFC9 F017          	movff	4041,I2C_Master_Read@temp	;volatile
  4083                           
  4084                           ;I2C.c: 67: I2C_Master_Wait();
  4085  0024B0  ECAB  F012         	call	_I2C_Master_Wait	;wreg free
  4086                           
  4087                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4088  0024B4  5016               	movf	I2C_Master_Read@a,w,c
  4089  0024B6  A4D8               	btfss	status,2,c
  4090  0024B8  D002               	goto	u6430
  4091  0024BA  8AC5               	bsf	4037,5,c	;volatile
  4092  0024BC  D001               	goto	l5314
  4093  0024BE                     u6430:
  4094  0024BE  9AC5               	bcf	4037,5,c	;volatile
  4095  0024C0                     l5314:
  4096                           
  4097                           ;I2C.c: 69: ACKEN = 1;
  4098  0024C0  88C5               	bsf	4037,4,c	;volatile
  4099                           
  4100                           ;I2C.c: 70: return temp;
  4101  0024C2  5017               	movf	I2C_Master_Read@temp,w,c
  4102  0024C4  0012               	return	
  4103  0024C6                     __end_of_I2C_Master_Read:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           prodh	equ	0xFF4
  4107                           prodl	equ	0xFF3
  4108                           postinc0	equ	0xFEE
  4109                           wreg	equ	0xFE8
  4110                           indf2	equ	0xFDF
  4111                           fsr2h	equ	0xFDA
  4112                           fsr2l	equ	0xFD9
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function _I2C_Master_Wait *****************
  4116 ;; Defined at:
  4117 ;;		line 31 in file "I2C.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;Total ram usage:        1 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    2
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_I2C_Master_Start
  4142 ;;		_I2C_Master_Stop
  4143 ;;		_I2C_Master_Write
  4144 ;;		_I2C_Master_Read
  4145 ;;		_I2C_Master_RepeatedStart
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text6
  4150  002556                     __ptext6:
  4151                           	opt stack 0
  4152  002556                     _I2C_Master_Wait:
  4153                           	opt stack 26
  4154  002556                     l365:
  4155  002556  B4C7               	btfsc	4039,2,c	;volatile
  4156  002558  D7FE               	goto	l365
  4157  00255A  CFC5 F015          	movff	4037,??_I2C_Master_Wait	;volatile
  4158  00255E  0E1F               	movlw	31
  4159  002560  1615               	andwf	??_I2C_Master_Wait,f,c
  4160  002562  B4D8               	btfsc	status,2,c
  4161  002564  0012               	return	
  4162  002566  D7F7               	goto	l365
  4163  002568                     __end_of_I2C_Master_Wait:
  4164                           	opt stack 0
  4165                           tblptru	equ	0xFF8
  4166                           prodh	equ	0xFF4
  4167                           prodl	equ	0xFF3
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           indf2	equ	0xFDF
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function _keyinterrupt *****************
  4176 ;; Defined at:
  4177 ;;		line 19 in file "interface.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		wreg, status,2, status,0
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    2
  4198 ;; This function calls:
  4199 ;;		Nothing
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           	psect	text7
  4206  00252E                     __ptext7:
  4207                           	opt stack 0
  4208  00252E                     _keyinterrupt:
  4209                           	opt stack 28
  4210                           
  4211                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  4212                           
  4213                           ;incstack = 0
  4214  00252E  A281               	btfss	3969,1,c	;volatile
  4215  002530  D006               	goto	l621
  4216                           
  4217                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  4218  002532  3881               	swapf	3969,w,c	;volatile
  4219  002534  0B0F               	andlw	15
  4220  002536  0B0F               	andlw	15
  4221  002538  6E60               	movwf	_keypress,c	;volatile
  4222  00253A                     l622:
  4223  00253A  B281               	btfsc	3969,1,c	;volatile
  4224  00253C  D7FE               	goto	l622
  4225  00253E                     l621:
  4226                           
  4227                           ;interface.c: 23: }
  4228                           ;interface.c: 24: __nop();
  4229  00253E  F000               	nop	
  4230  002540  0012               	return		;funcret
  4231  002542                     __end_of_keyinterrupt:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           prodh	equ	0xFF4
  4235                           prodl	equ	0xFF3
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           indf2	equ	0xFDF
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function _initialize *****************
  4244 ;; Defined at:
  4245 ;;		line 86 in file "main.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    5
  4266 ;; This function calls:
  4267 ;;		_I2C_Master_Init
  4268 ;;		_initLCD
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text8
  4275  00204A                     __ptext8:
  4276                           	opt stack 0
  4277  00204A                     _initialize:
  4278                           	opt stack 25
  4279                           
  4280                           ;main.c: 88: OSCCON = 0xF0;
  4281                           
  4282                           ;incstack = 0
  4283  00204A  0EF0               	movlw	240
  4284  00204C  6ED3               	movwf	4051,c	;volatile
  4285                           
  4286                           ;main.c: 89: OSCTUNEbits.PLLEN = 1;
  4287  00204E  8C9B               	bsf	3995,6,c	;volatile
  4288                           
  4289                           ;main.c: 91: TRISA = 0b11101111;
  4290  002050  0EEF               	movlw	239
  4291  002052  6E92               	movwf	3986,c	;volatile
  4292                           
  4293                           ;main.c: 92: TRISB = 0b11110010;
  4294  002054  0EF2               	movlw	242
  4295  002056  6E93               	movwf	3987,c	;volatile
  4296                           
  4297                           ;main.c: 93: TRISC = 0b00000000;
  4298  002058  0E00               	movlw	0
  4299  00205A  6E94               	movwf	3988,c	;volatile
  4300                           
  4301                           ;main.c: 95: TRISD = 0x00;
  4302  00205C  0E00               	movlw	0
  4303  00205E  6E95               	movwf	3989,c	;volatile
  4304                           
  4305                           ;main.c: 96: TRISE = 0b00000001;
  4306  002060  0E01               	movlw	1
  4307  002062  6E96               	movwf	3990,c	;volatile
  4308                           
  4309                           ;main.c: 98: PR2 = 0xff;
  4310  002064  68CB               	setf	4043,c	;volatile
  4311                           
  4312                           ;main.c: 99: CCP1CON = 0b00001100;
  4313  002066  0E0C               	movlw	12
  4314  002068  6EBD               	movwf	4029,c	;volatile
  4315                           
  4316                           ;main.c: 100: CCPR1L = 0x00;
  4317  00206A  0E00               	movlw	0
  4318  00206C  6EBE               	movwf	4030,c	;volatile
  4319                           
  4320                           ;main.c: 101: CCP2CON = 0b00001100;
  4321  00206E  0E0C               	movlw	12
  4322  002070  6EBA               	movwf	4026,c	;volatile
  4323                           
  4324                           ;main.c: 102: CCPR2L = 0x00;
  4325  002072  0E00               	movlw	0
  4326  002074  6EBB               	movwf	4027,c	;volatile
  4327                           
  4328                           ;main.c: 103: T2CON = 0b00000101;
  4329  002076  0E05               	movlw	5
  4330  002078  6ECA               	movwf	4042,c	;volatile
  4331                           
  4332                           ;main.c: 105: LATA = 0x00;
  4333  00207A  0E00               	movlw	0
  4334  00207C  6E89               	movwf	3977,c	;volatile
  4335                           
  4336                           ;main.c: 106: LATB = 0x00;
  4337  00207E  0E00               	movlw	0
  4338  002080  6E8A               	movwf	3978,c	;volatile
  4339                           
  4340                           ;main.c: 107: LATC = 0x00;
  4341  002082  0E00               	movlw	0
  4342  002084  6E8B               	movwf	3979,c	;volatile
  4343                           
  4344                           ;main.c: 108: LATD = 0x00;
  4345  002086  0E00               	movlw	0
  4346  002088  6E8C               	movwf	3980,c	;volatile
  4347                           
  4348                           ;main.c: 109: LATE = 0x00;
  4349  00208A  0E00               	movlw	0
  4350  00208C  6E8D               	movwf	3981,c	;volatile
  4351                           
  4352                           ;main.c: 111: initLCD();
  4353  00208E  ECC9  F011         	call	_initLCD	;wreg free
  4354                           
  4355                           ;main.c: 113: I2C_Master_Init(32000);
  4356  002092  0E00               	movlw	0
  4357  002094  6E22               	movwf	I2C_Master_Init@c,c
  4358  002096  0E7D               	movlw	125
  4359  002098  6E23               	movwf	I2C_Master_Init@c+1,c
  4360  00209A  0E00               	movlw	0
  4361  00209C  6E24               	movwf	I2C_Master_Init@c+2,c
  4362  00209E  0E00               	movlw	0
  4363  0020A0  6E25               	movwf	I2C_Master_Init@c+3,c
  4364  0020A2  ECFE  F010         	call	_I2C_Master_Init	;wreg free
  4365                           
  4366                           ;main.c: 116: nRBPU = 0;
  4367  0020A6  9EF1               	bcf	intcon2,7,c	;volatile
  4368                           
  4369                           ;main.c: 118: ADCON1 = 0b00001001;
  4370  0020A8  0E09               	movlw	9
  4371  0020AA  6EC1               	movwf	4033,c	;volatile
  4372                           
  4373                           ;main.c: 119: ADCON2 = 0b10001001;
  4374  0020AC  0E89               	movlw	137
  4375  0020AE  6EC0               	movwf	4032,c	;volatile
  4376                           
  4377                           ;main.c: 120: CVRCON = 0x00;
  4378  0020B0  0E00               	movlw	0
  4379  0020B2  6EB5               	movwf	4021,c	;volatile
  4380                           
  4381                           ;main.c: 121: CMCONbits.CIS = 0;
  4382  0020B4  96B4               	bcf	4020,3,c	;volatile
  4383                           
  4384                           ;main.c: 122: ADFM = 1;
  4385  0020B6  8EC0               	bsf	4032,7,c	;volatile
  4386                           
  4387                           ;main.c: 124: TMR0IE = 1;
  4388  0020B8  8AF2               	bsf	intcon,5,c	;volatile
  4389                           
  4390                           ;main.c: 125: TMR1IE = 1;
  4391  0020BA  809D               	bsf	3997,0,c	;volatile
  4392                           
  4393                           ;main.c: 127: PEIE = 1;
  4394  0020BC  8CF2               	bsf	intcon,6,c	;volatile
  4395                           
  4396                           ;main.c: 129: (INTCONbits.GIE = 1);
  4397  0020BE  8EF2               	bsf	intcon,7,c	;volatile
  4398  0020C0  0012               	return		;funcret
  4399  0020C2                     __end_of_initialize:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           intcon	equ	0xFF2
  4405                           intcon2	equ	0xFF1
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           indf2	equ	0xFDF
  4409                           fsr2h	equ	0xFDA
  4410                           fsr2l	equ	0xFD9
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function _initLCD *****************
  4414 ;; Defined at:
  4415 ;;		line 11 in file "lcd.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      void 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2, status,0, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;Total ram usage:        1 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    4
  4436 ;; This function calls:
  4437 ;;		_lcdInst
  4438 ;; This function is called by:
  4439 ;;		_initialize
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text9
  4444  002392                     __ptext9:
  4445                           	opt stack 0
  4446  002392                     _initLCD:
  4447                           	opt stack 25
  4448                           
  4449                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  4450                           
  4451                           ;incstack = 0
  4452  002392  0E9C               	movlw	156
  4453  002394  6E18               	movwf	??_initLCD& (0+255),c
  4454  002396  0ED7               	movlw	215
  4455  002398                     u7627:
  4456  002398  2EE8               	decfsz	wreg,f,c
  4457  00239A  D7FE               	bra	u7627
  4458  00239C  2E18               	decfsz	??_initLCD& (0+255),f,c
  4459  00239E  D7FC               	bra	u7627
  4460  0023A0  F000               	nop	
  4461                           
  4462                           ;lcd.c: 13: lcdInst(0b00110011);
  4463  0023A2  0E33               	movlw	51
  4464  0023A4  ECCA  F012         	call	_lcdInst
  4465                           
  4466                           ;lcd.c: 14: lcdInst(0b00110010);
  4467  0023A8  0E32               	movlw	50
  4468  0023AA  ECCA  F012         	call	_lcdInst
  4469                           
  4470                           ;lcd.c: 15: lcdInst(0b00101000);
  4471  0023AE  0E28               	movlw	40
  4472  0023B0  ECCA  F012         	call	_lcdInst
  4473                           
  4474                           ;lcd.c: 16: lcdInst(0b00001111);
  4475  0023B4  0E0F               	movlw	15
  4476  0023B6  ECCA  F012         	call	_lcdInst
  4477                           
  4478                           ;lcd.c: 17: lcdInst(0b00000110);
  4479  0023BA  0E06               	movlw	6
  4480  0023BC  ECCA  F012         	call	_lcdInst
  4481                           
  4482                           ;lcd.c: 18: lcdInst(0b00000001);
  4483  0023C0  0E01               	movlw	1
  4484  0023C2  ECCA  F012         	call	_lcdInst
  4485                           
  4486                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  4487  0023C6  0E9C               	movlw	156
  4488  0023C8  6E18               	movwf	??_initLCD& (0+255),c
  4489  0023CA  0ED7               	movlw	215
  4490  0023CC                     u7637:
  4491  0023CC  2EE8               	decfsz	wreg,f,c
  4492  0023CE  D7FE               	bra	u7637
  4493  0023D0  2E18               	decfsz	??_initLCD& (0+255),f,c
  4494  0023D2  D7FC               	bra	u7637
  4495  0023D4  F000               	nop	
  4496  0023D6  0012               	return		;funcret
  4497  0023D8                     __end_of_initLCD:
  4498                           	opt stack 0
  4499                           tblptru	equ	0xFF8
  4500                           prodh	equ	0xFF4
  4501                           prodl	equ	0xFF3
  4502                           intcon	equ	0xFF2
  4503                           intcon2	equ	0xFF1
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           indf2	equ	0xFDF
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function _I2C_Master_Init *****************
  4512 ;; Defined at:
  4513 ;;		line 20 in file "I2C.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  c               4   33[COMRAM] const unsigned long 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4527 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;Total ram usage:        8 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    3
  4534 ;; This function calls:
  4535 ;;		___lldiv
  4536 ;; This function is called by:
  4537 ;;		_initialize
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text10
  4542  0021FC                     __ptext10:
  4543                           	opt stack 0
  4544  0021FC                     _I2C_Master_Init:
  4545                           	opt stack 26
  4546                           
  4547                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  4548                           
  4549                           ;incstack = 0
  4550  0021FC  0E00               	movlw	0
  4551  0021FE  6EC7               	movwf	4039,c	;volatile
  4552                           
  4553                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  4554  002200  0E28               	movlw	40
  4555  002202  6EC6               	movwf	4038,c	;volatile
  4556                           
  4557                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  4558  002204  0E00               	movlw	0
  4559  002206  6EC5               	movwf	4037,c	;volatile
  4560                           
  4561                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  4562  002208  0E00               	movlw	0
  4563  00220A  6E15               	movwf	___lldiv@dividend,c
  4564  00220C  0E48               	movlw	72
  4565  00220E  6E16               	movwf	___lldiv@dividend+1,c
  4566  002210  0EE8               	movlw	232
  4567  002212  6E17               	movwf	___lldiv@dividend+2,c
  4568  002214  0E01               	movlw	1
  4569  002216  6E18               	movwf	___lldiv@dividend+3,c
  4570  002218  C022  F026         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4571  00221C  C023  F027         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4572  002220  C024  F028         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4573  002224  C025  F029         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4574  002228  0E02               	movlw	2
  4575  00222A                     u6165:
  4576  00222A  90D8               	bcf	status,0,c
  4577  00222C  3626               	rlcf	??_I2C_Master_Init,f,c
  4578  00222E  3627               	rlcf	??_I2C_Master_Init+1,f,c
  4579  002230  3628               	rlcf	??_I2C_Master_Init+2,f,c
  4580  002232  3629               	rlcf	??_I2C_Master_Init+3,f,c
  4581  002234  2EE8               	decfsz	wreg,f,c
  4582  002236  D7F9               	goto	u6165
  4583  002238  C026  F019         	movff	??_I2C_Master_Init,___lldiv@divisor
  4584  00223C  C027  F01A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4585  002240  C028  F01B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4586  002244  C029  F01C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4587  002248  ECE4  F00F         	call	___lldiv	;wreg free
  4588  00224C  0415               	decf	?___lldiv,w,c
  4589  00224E  6EC8               	movwf	4040,c	;volatile
  4590                           
  4591                           ;I2C.c: 27: TRISC3 = 1;
  4592  002250  8694               	bsf	3988,3,c	;volatile
  4593                           
  4594                           ;I2C.c: 28: TRISC4 = 1;
  4595  002252  8894               	bsf	3988,4,c	;volatile
  4596  002254  0012               	return		;funcret
  4597  002256                     __end_of_I2C_Master_Init:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           prodh	equ	0xFF4
  4601                           prodl	equ	0xFF3
  4602                           intcon	equ	0xFF2
  4603                           intcon2	equ	0xFF1
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           indf2	equ	0xFDF
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function ___lldiv *****************
  4612 ;; Defined at:
  4613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  dividend        4   20[COMRAM] unsigned long 
  4616 ;;  divisor         4   24[COMRAM] unsigned long 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  quotient        4   28[COMRAM] unsigned long 
  4619 ;;  counter         1   32[COMRAM] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  4   20[COMRAM] unsigned long 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:       13 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    2
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_I2C_Master_Init
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text11
  4644  001FC8                     __ptext11:
  4645                           	opt stack 0
  4646  001FC8                     ___lldiv:
  4647                           	opt stack 26
  4648                           
  4649                           ;incstack = 0
  4650  001FC8  0E00               	movlw	0
  4651  001FCA  6E1D               	movwf	___lldiv@quotient,c
  4652  001FCC  0E00               	movlw	0
  4653  001FCE  6E1E               	movwf	___lldiv@quotient+1,c
  4654  001FD0  0E00               	movlw	0
  4655  001FD2  6E1F               	movwf	___lldiv@quotient+2,c
  4656  001FD4  0E00               	movlw	0
  4657  001FD6  6E20               	movwf	___lldiv@quotient+3,c
  4658  001FD8  5019               	movf	___lldiv@divisor,w,c
  4659  001FDA  101A               	iorwf	___lldiv@divisor+1,w,c
  4660  001FDC  101B               	iorwf	___lldiv@divisor+2,w,c
  4661  001FDE  101C               	iorwf	___lldiv@divisor+3,w,c
  4662  001FE0  B4D8               	btfsc	status,2,c
  4663  001FE2  D02A               	goto	l1146
  4664  001FE4  0E01               	movlw	1
  4665  001FE6  6E21               	movwf	___lldiv@counter,c
  4666  001FE8  D006               	goto	l4912
  4667  001FEA                     l4910:
  4668  001FEA  90D8               	bcf	status,0,c
  4669  001FEC  3619               	rlcf	___lldiv@divisor,f,c
  4670  001FEE  361A               	rlcf	___lldiv@divisor+1,f,c
  4671  001FF0  361B               	rlcf	___lldiv@divisor+2,f,c
  4672  001FF2  361C               	rlcf	___lldiv@divisor+3,f,c
  4673  001FF4  2A21               	incf	___lldiv@counter,f,c
  4674  001FF6                     l4912:
  4675  001FF6  AE1C               	btfss	___lldiv@divisor+3,7,c
  4676  001FF8  D7F8               	goto	l4910
  4677  001FFA                     l4914:
  4678  001FFA  90D8               	bcf	status,0,c
  4679  001FFC  361D               	rlcf	___lldiv@quotient,f,c
  4680  001FFE  361E               	rlcf	___lldiv@quotient+1,f,c
  4681  002000  361F               	rlcf	___lldiv@quotient+2,f,c
  4682  002002  3620               	rlcf	___lldiv@quotient+3,f,c
  4683  002004  5019               	movf	___lldiv@divisor,w,c
  4684  002006  5C15               	subwf	___lldiv@dividend,w,c
  4685  002008  501A               	movf	___lldiv@divisor+1,w,c
  4686  00200A  5816               	subwfb	___lldiv@dividend+1,w,c
  4687  00200C  501B               	movf	___lldiv@divisor+2,w,c
  4688  00200E  5817               	subwfb	___lldiv@dividend+2,w,c
  4689  002010  501C               	movf	___lldiv@divisor+3,w,c
  4690  002012  5818               	subwfb	___lldiv@dividend+3,w,c
  4691  002014  A0D8               	btfss	status,0,c
  4692  002016  D009               	goto	l4922
  4693  002018  5019               	movf	___lldiv@divisor,w,c
  4694  00201A  5E15               	subwf	___lldiv@dividend,f,c
  4695  00201C  501A               	movf	___lldiv@divisor+1,w,c
  4696  00201E  5A16               	subwfb	___lldiv@dividend+1,f,c
  4697  002020  501B               	movf	___lldiv@divisor+2,w,c
  4698  002022  5A17               	subwfb	___lldiv@dividend+2,f,c
  4699  002024  501C               	movf	___lldiv@divisor+3,w,c
  4700  002026  5A18               	subwfb	___lldiv@dividend+3,f,c
  4701  002028  801D               	bsf	___lldiv@quotient,0,c
  4702  00202A                     l4922:
  4703  00202A  90D8               	bcf	status,0,c
  4704  00202C  321C               	rrcf	___lldiv@divisor+3,f,c
  4705  00202E  321B               	rrcf	___lldiv@divisor+2,f,c
  4706  002030  321A               	rrcf	___lldiv@divisor+1,f,c
  4707  002032  3219               	rrcf	___lldiv@divisor,f,c
  4708  002034  2E21               	decfsz	___lldiv@counter,f,c
  4709  002036  D7E1               	goto	l4914
  4710  002038                     l1146:
  4711  002038  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  4712  00203C  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  4713  002040  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  4714  002044  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  4715  002048  0012               	return		;funcret
  4716  00204A                     __end_of___lldiv:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           intcon	equ	0xFF2
  4722                           intcon2	equ	0xFF1
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           indf2	equ	0xFDF
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8
  4729                           
  4730 ;; *************** function _homescreen *****************
  4731 ;; Defined at:
  4732 ;;		line 3 in file "interface.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;		None
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;		None
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;Total ram usage:        0 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    5
  4753 ;; This function calls:
  4754 ;;		_lcdInst
  4755 ;;		_printf
  4756 ;; This function is called by:
  4757 ;;		_main
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text12
  4762  00219A                     __ptext12:
  4763                           	opt stack 0
  4764  00219A                     _homescreen:
  4765                           	opt stack 25
  4766                           
  4767                           ;interface.c: 4: lcdInst(0b10000000);;
  4768                           
  4769                           ;incstack = 0
  4770  00219A  0E80               	movlw	128
  4771  00219C  ECCA  F012         	call	_lcdInst
  4772                           
  4773                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  4774  0021A0  0E7F               	movlw	low STR_37
  4775  0021A2  6E21               	movwf	printf@f,c
  4776  0021A4  0EFE               	movlw	high STR_37
  4777  0021A6  6E22               	movwf	printf@f+1,c
  4778  0021A8  C0A4  F023         	movff	_time+6,?_printf+2
  4779  0021AC  6A24               	clrf	?_printf+3,c
  4780  0021AE  C0A3  F025         	movff	_time+5,?_printf+4
  4781  0021B2  6A26               	clrf	?_printf+5,c
  4782  0021B4  C0A2  F027         	movff	_time+4,?_printf+6
  4783  0021B8  6A28               	clrf	?_printf+7,c
  4784  0021BA  EC63  F008         	call	_printf	;wreg free
  4785                           
  4786                           ;interface.c: 6: printf("3:Start");
  4787  0021BE  0EE9               	movlw	low STR_38
  4788  0021C0  6E21               	movwf	printf@f,c
  4789  0021C2  0EFF               	movlw	high STR_38
  4790  0021C4  6E22               	movwf	printf@f+1,c
  4791  0021C6  EC63  F008         	call	_printf	;wreg free
  4792                           
  4793                           ;interface.c: 7: lcdInst(0b11000000);;
  4794  0021CA  0EC0               	movlw	192
  4795  0021CC  ECCA  F012         	call	_lcdInst
  4796                           
  4797                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4798  0021D0  0E4F               	movlw	low STR_39
  4799  0021D2  6E21               	movwf	printf@f,c
  4800  0021D4  0EFF               	movlw	high STR_39
  4801  0021D6  6E22               	movwf	printf@f+1,c
  4802  0021D8  C0A0  F023         	movff	_time+2,?_printf+2
  4803  0021DC  6A24               	clrf	?_printf+3,c
  4804  0021DE  C09F  F025         	movff	_time+1,?_printf+4
  4805  0021E2  6A26               	clrf	?_printf+5,c
  4806  0021E4  C09E  F027         	movff	_time,?_printf+6
  4807  0021E8  6A28               	clrf	?_printf+7,c
  4808  0021EA  EC63  F008         	call	_printf	;wreg free
  4809                           
  4810                           ;interface.c: 9: printf(" A:Logs");
  4811  0021EE  0EE1               	movlw	low STR_40
  4812  0021F0  6E21               	movwf	printf@f,c
  4813  0021F2  0EFF               	movlw	high STR_40
  4814  0021F4  6E22               	movwf	printf@f+1,c
  4815  0021F6  EC63  F008         	call	_printf	;wreg free
  4816  0021FA  0012               	return		;funcret
  4817  0021FC                     __end_of_homescreen:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           indf2	equ	0xFDF
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function _displayLog *****************
  4832 ;; Defined at:
  4833 ;;		line 87 in file "interface.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  run             2   54[COMRAM] int 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  currRun         2   61[COMRAM] int 
  4838 ;;  i               2   59[COMRAM] int 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4848 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;Total ram usage:        9 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    5
  4855 ;; This function calls:
  4856 ;;		_eepromRead
  4857 ;;		_keycheck
  4858 ;;		_lcdInst
  4859 ;;		_printf
  4860 ;; This function is called by:
  4861 ;;		_main
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text13
  4866  000D6A                     __ptext13:
  4867                           	opt stack 0
  4868  000D6A                     _displayLog:
  4869                           	opt stack 25
  4870                           
  4871                           ;interface.c: 88: int currRun = eepromRead(0);
  4872                           
  4873                           ;incstack = 0
  4874  000D6A  0E00               	movlw	0
  4875  000D6C  EC29  F012         	call	_eepromRead
  4876  000D70  6E3E               	movwf	displayLog@currRun,c
  4877  000D72  6A3F               	clrf	displayLog@currRun+1,c
  4878  000D74  BE3E               	btfsc	displayLog@currRun,7,c
  4879  000D76  063F               	decf	displayLog@currRun+1,f,c
  4880                           
  4881                           ;interface.c: 89: int i;
  4882                           ;interface.c: 90: for (i=1;i<(run);i++){
  4883  000D78  0E00               	movlw	0
  4884  000D7A  6E3D               	movwf	displayLog@i+1,c
  4885  000D7C  0E01               	movlw	1
  4886  000D7E  6E3C               	movwf	displayLog@i,c
  4887  000D80  D010               	goto	l5488
  4888  000D82                     l5480:
  4889                           
  4890                           ;interface.c: 91: currRun++;
  4891  000D82  4A3E               	infsnz	displayLog@currRun,f,c
  4892  000D84  2A3F               	incf	displayLog@currRun+1,f,c
  4893                           
  4894                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  4895  000D86  BE3F               	btfsc	displayLog@currRun+1,7,c
  4896  000D88  D00A               	goto	l5486
  4897  000D8A  503F               	movf	displayLog@currRun+1,w,c
  4898  000D8C  E104               	bnz	u6670
  4899  000D8E  0E05               	movlw	5
  4900  000D90  5C3E               	subwf	displayLog@currRun,w,c
  4901  000D92  A0D8               	btfss	status,0,c
  4902  000D94  D004               	goto	l5486
  4903  000D96                     u6670:
  4904  000D96  0E00               	movlw	0
  4905  000D98  6E3F               	movwf	displayLog@currRun+1,c
  4906  000D9A  0E01               	movlw	1
  4907  000D9C  6E3E               	movwf	displayLog@currRun,c
  4908  000D9E                     l5486:
  4909  000D9E  4A3C               	infsnz	displayLog@i,f,c
  4910  000DA0  2A3D               	incf	displayLog@i+1,f,c
  4911  000DA2                     l5488:
  4912  000DA2  5037               	movf	displayLog@run,w,c
  4913  000DA4  5C3C               	subwf	displayLog@i,w,c
  4914  000DA6  503D               	movf	displayLog@i+1,w,c
  4915  000DA8  0A80               	xorlw	128
  4916  000DAA  6E39               	movwf	??_displayLog& (0+255),c
  4917  000DAC  5038               	movf	displayLog@run+1,w,c
  4918  000DAE  0A80               	xorlw	128
  4919  000DB0  5839               	subwfb	??_displayLog& (0+255),w,c
  4920  000DB2  A0D8               	btfss	status,0,c
  4921  000DB4  D7E6               	goto	l5480
  4922                           
  4923                           ;interface.c: 93: }
  4924                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4925  000DB6  0E01               	movlw	1
  4926  000DB8  ECCA  F012         	call	_lcdInst
  4927  000DBC  0E34               	movlw	52
  4928  000DBE  6E39               	movwf	??_displayLog& (0+255),c
  4929  000DC0  0EF2               	movlw	242
  4930  000DC2                     u7647:
  4931  000DC2  2EE8               	decfsz	wreg,f,c
  4932  000DC4  D7FE               	bra	u7647
  4933  000DC6  2E39               	decfsz	??_displayLog& (0+255),f,c
  4934  000DC8  D7FC               	bra	u7647
  4935                           
  4936                           ;interface.c: 96: lcdInst(0b10000000);;
  4937  000DCA  0E80               	movlw	128
  4938  000DCC  ECCA  F012         	call	_lcdInst
  4939                           
  4940                           ;interface.c: 97: printf("%d %d", eepromRead(0), currRun);
  4941  000DD0  0EF1               	movlw	low STR_41
  4942  000DD2  6E21               	movwf	printf@f,c
  4943  000DD4  0EFF               	movlw	high STR_41
  4944  000DD6  6E22               	movwf	printf@f+1,c
  4945  000DD8  0E00               	movlw	0
  4946  000DDA  EC29  F012         	call	_eepromRead
  4947  000DDE  6E23               	movwf	?_printf+2,c
  4948  000DE0  6A24               	clrf	?_printf+3,c
  4949  000DE2  BE23               	btfsc	?_printf+2,7,c
  4950  000DE4  0624               	decf	?_printf+3,f,c
  4951  000DE6  C03E  F025         	movff	displayLog@currRun,?_printf+4
  4952  000DEA  C03F  F026         	movff	displayLog@currRun+1,?_printf+5
  4953  000DEE  EC63  F008         	call	_printf	;wreg free
  4954                           
  4955                           ;interface.c: 98: keycheck();
  4956  000DF2  ECA1  F012         	call	_keycheck	;wreg free
  4957                           
  4958                           ;interface.c: 99: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4959  000DF6  0E01               	movlw	1
  4960  000DF8  ECCA  F012         	call	_lcdInst
  4961  000DFC  0E34               	movlw	52
  4962  000DFE  6E39               	movwf	??_displayLog& (0+255),c
  4963  000E00  0EF2               	movlw	242
  4964  000E02                     u7657:
  4965  000E02  2EE8               	decfsz	wreg,f,c
  4966  000E04  D7FE               	bra	u7657
  4967  000E06  2E39               	decfsz	??_displayLog& (0+255),f,c
  4968  000E08  D7FC               	bra	u7657
  4969                           
  4970                           ;interface.c: 100: printf("Run#%d    A:Next", run);
  4971  000E0A  0E5D               	movlw	low STR_42
  4972  000E0C  6E21               	movwf	printf@f,c
  4973  000E0E  0EFE               	movlw	high STR_42
  4974  000E10  6E22               	movwf	printf@f+1,c
  4975  000E12  C037  F023         	movff	displayLog@run,?_printf+2
  4976  000E16  C038  F024         	movff	displayLog@run+1,?_printf+3
  4977  000E1A  EC63  F008         	call	_printf	;wreg free
  4978                           
  4979                           ;interface.c: 101: lcdInst(0b11000000);;
  4980  000E1E  0EC0               	movlw	192
  4981  000E20  ECCA  F012         	call	_lcdInst
  4982                           
  4983                           ;interface.c: 102: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  4984  000E24  0E85               	movlw	low STR_43
  4985  000E26  6E21               	movwf	printf@f,c
  4986  000E28  0EFF               	movlw	high STR_43
  4987  000E2A  6E22               	movwf	printf@f+1,c
  4988  000E2C  C03E  F039         	movff	displayLog@currRun,??_displayLog
  4989  000E30  3A39               	swapf	??_displayLog,f,c
  4990  000E32  0EF0               	movlw	240
  4991  000E34  1639               	andwf	??_displayLog,f,c
  4992  000E36  2839               	incf	??_displayLog,w,c
  4993  000E38  EC29  F012         	call	_eepromRead
  4994  000E3C  6E23               	movwf	?_printf+2,c
  4995  000E3E  6A24               	clrf	?_printf+3,c
  4996  000E40  BE23               	btfsc	?_printf+2,7,c
  4997  000E42  0624               	decf	?_printf+3,f,c
  4998  000E44  EC63  F008         	call	_printf	;wreg free
  4999                           
  5000                           ;interface.c: 103: keycheck();
  5001  000E48  ECA1  F012         	call	_keycheck	;wreg free
  5002                           
  5003                           ;interface.c: 104: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5004  000E4C  0E01               	movlw	1
  5005  000E4E  ECCA  F012         	call	_lcdInst
  5006  000E52  0E34               	movlw	52
  5007  000E54  6E39               	movwf	??_displayLog& (0+255),c
  5008  000E56  0EF2               	movlw	242
  5009  000E58                     u7667:
  5010  000E58  2EE8               	decfsz	wreg,f,c
  5011  000E5A  D7FE               	bra	u7667
  5012  000E5C  2E39               	decfsz	??_displayLog& (0+255),f,c
  5013  000E5E  D7FC               	bra	u7667
  5014                           
  5015                           ;interface.c: 105: printf("Run#%d    A:Next", run);
  5016  000E60  0E5D               	movlw	low STR_42
  5017  000E62  6E21               	movwf	printf@f,c
  5018  000E64  0EFE               	movlw	high STR_42
  5019  000E66  6E22               	movwf	printf@f+1,c
  5020  000E68  C037  F023         	movff	displayLog@run,?_printf+2
  5021  000E6C  C038  F024         	movff	displayLog@run+1,?_printf+3
  5022  000E70  EC63  F008         	call	_printf	;wreg free
  5023                           
  5024                           ;interface.c: 106: lcdInst(0b11000000);;
  5025  000E74  0EC0               	movlw	192
  5026  000E76  ECCA  F012         	call	_lcdInst
  5027                           
  5028                           ;interface.c: 107: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  5029  000E7A  0E15               	movlw	low STR_45
  5030  000E7C  6E21               	movwf	printf@f,c
  5031  000E7E  0EFE               	movlw	high STR_45
  5032  000E80  6E22               	movwf	printf@f+1,c
  5033  000E82  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5034  000E86  3A39               	swapf	??_displayLog,f,c
  5035  000E88  0EF0               	movlw	240
  5036  000E8A  1639               	andwf	??_displayLog,f,c
  5037  000E8C  5039               	movf	??_displayLog,w,c
  5038  000E8E  0F02               	addlw	2
  5039  000E90  EC29  F012         	call	_eepromRead
  5040  000E94  6E23               	movwf	?_printf+2,c
  5041  000E96  6A24               	clrf	?_printf+3,c
  5042  000E98  BE23               	btfsc	?_printf+2,7,c
  5043  000E9A  0624               	decf	?_printf+3,f,c
  5044  000E9C  C03E  F03A         	movff	displayLog@currRun,??_displayLog+1
  5045  000EA0  3A3A               	swapf	??_displayLog+1,f,c
  5046  000EA2  0EF0               	movlw	240
  5047  000EA4  163A               	andwf	??_displayLog+1,f,c
  5048  000EA6  503A               	movf	??_displayLog+1,w,c
  5049  000EA8  0F03               	addlw	3
  5050  000EAA  EC29  F012         	call	_eepromRead
  5051  000EAE  6E25               	movwf	?_printf+4,c
  5052  000EB0  6A26               	clrf	?_printf+5,c
  5053  000EB2  BE25               	btfsc	?_printf+4,7,c
  5054  000EB4  0626               	decf	?_printf+5,f,c
  5055  000EB6  C03E  F03B         	movff	displayLog@currRun,??_displayLog+2
  5056  000EBA  3A3B               	swapf	??_displayLog+2,f,c
  5057  000EBC  0EF0               	movlw	240
  5058  000EBE  163B               	andwf	??_displayLog+2,f,c
  5059  000EC0  503B               	movf	??_displayLog+2,w,c
  5060  000EC2  0F04               	addlw	4
  5061  000EC4  EC29  F012         	call	_eepromRead
  5062  000EC8  6E27               	movwf	?_printf+6,c
  5063  000ECA  6A28               	clrf	?_printf+7,c
  5064  000ECC  BE27               	btfsc	?_printf+6,7,c
  5065  000ECE  0628               	decf	?_printf+7,f,c
  5066  000ED0  EC63  F008         	call	_printf	;wreg free
  5067                           
  5068                           ;interface.c: 108: keycheck();
  5069  000ED4  ECA1  F012         	call	_keycheck	;wreg free
  5070                           
  5071                           ;interface.c: 109: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5072  000ED8  0E01               	movlw	1
  5073  000EDA  ECCA  F012         	call	_lcdInst
  5074  000EDE  0E34               	movlw	52
  5075  000EE0  6E39               	movwf	??_displayLog& (0+255),c
  5076  000EE2  0EF2               	movlw	242
  5077  000EE4                     u7677:
  5078  000EE4  2EE8               	decfsz	wreg,f,c
  5079  000EE6  D7FE               	bra	u7677
  5080  000EE8  2E39               	decfsz	??_displayLog& (0+255),f,c
  5081  000EEA  D7FC               	bra	u7677
  5082                           
  5083                           ;interface.c: 110: printf("Run#%d    A:Next", run);
  5084  000EEC  0E5D               	movlw	low STR_42
  5085  000EEE  6E21               	movwf	printf@f,c
  5086  000EF0  0EFE               	movlw	high STR_42
  5087  000EF2  6E22               	movwf	printf@f+1,c
  5088  000EF4  C037  F023         	movff	displayLog@run,?_printf+2
  5089  000EF8  C038  F024         	movff	displayLog@run+1,?_printf+3
  5090  000EFC  EC63  F008         	call	_printf	;wreg free
  5091                           
  5092                           ;interface.c: 111: lcdInst(0b11000000);;
  5093  000F00  0EC0               	movlw	192
  5094  000F02  ECCA  F012         	call	_lcdInst
  5095                           
  5096                           ;interface.c: 112: printf("Start: %d:%d:%d", eepromRead(currRun*0x10 + 5), eepromRead(cu
      +                          rrRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  5097  000F06  0EAF               	movlw	low STR_47
  5098  000F08  6E21               	movwf	printf@f,c
  5099  000F0A  0EFE               	movlw	high STR_47
  5100  000F0C  6E22               	movwf	printf@f+1,c
  5101  000F0E  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5102  000F12  3A39               	swapf	??_displayLog,f,c
  5103  000F14  0EF0               	movlw	240
  5104  000F16  1639               	andwf	??_displayLog,f,c
  5105  000F18  5039               	movf	??_displayLog,w,c
  5106  000F1A  0F05               	addlw	5
  5107  000F1C  EC29  F012         	call	_eepromRead
  5108  000F20  6E23               	movwf	?_printf+2,c
  5109  000F22  6A24               	clrf	?_printf+3,c
  5110  000F24  BE23               	btfsc	?_printf+2,7,c
  5111  000F26  0624               	decf	?_printf+3,f,c
  5112  000F28  C03E  F03A         	movff	displayLog@currRun,??_displayLog+1
  5113  000F2C  3A3A               	swapf	??_displayLog+1,f,c
  5114  000F2E  0EF0               	movlw	240
  5115  000F30  163A               	andwf	??_displayLog+1,f,c
  5116  000F32  503A               	movf	??_displayLog+1,w,c
  5117  000F34  0F06               	addlw	6
  5118  000F36  EC29  F012         	call	_eepromRead
  5119  000F3A  6E25               	movwf	?_printf+4,c
  5120  000F3C  6A26               	clrf	?_printf+5,c
  5121  000F3E  BE25               	btfsc	?_printf+4,7,c
  5122  000F40  0626               	decf	?_printf+5,f,c
  5123  000F42  C03E  F03B         	movff	displayLog@currRun,??_displayLog+2
  5124  000F46  3A3B               	swapf	??_displayLog+2,f,c
  5125  000F48  0EF0               	movlw	240
  5126  000F4A  163B               	andwf	??_displayLog+2,f,c
  5127  000F4C  503B               	movf	??_displayLog+2,w,c
  5128  000F4E  0F07               	addlw	7
  5129  000F50  EC29  F012         	call	_eepromRead
  5130  000F54  6E27               	movwf	?_printf+6,c
  5131  000F56  6A28               	clrf	?_printf+7,c
  5132  000F58  BE27               	btfsc	?_printf+6,7,c
  5133  000F5A  0628               	decf	?_printf+7,f,c
  5134  000F5C  EC63  F008         	call	_printf	;wreg free
  5135                           
  5136                           ;interface.c: 113: keycheck();
  5137  000F60  ECA1  F012         	call	_keycheck	;wreg free
  5138                           
  5139                           ;interface.c: 114: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5140  000F64  0E01               	movlw	1
  5141  000F66  ECCA  F012         	call	_lcdInst
  5142  000F6A  0E34               	movlw	52
  5143  000F6C  6E39               	movwf	??_displayLog& (0+255),c
  5144  000F6E  0EF2               	movlw	242
  5145  000F70                     u7687:
  5146  000F70  2EE8               	decfsz	wreg,f,c
  5147  000F72  D7FE               	bra	u7687
  5148  000F74  2E39               	decfsz	??_displayLog& (0+255),f,c
  5149  000F76  D7FC               	bra	u7687
  5150                           
  5151                           ;interface.c: 115: printf("Run#%d    A:Next", run);
  5152  000F78  0E5D               	movlw	low STR_42
  5153  000F7A  6E21               	movwf	printf@f,c
  5154  000F7C  0EFE               	movlw	high STR_42
  5155  000F7E  6E22               	movwf	printf@f+1,c
  5156  000F80  C037  F023         	movff	displayLog@run,?_printf+2
  5157  000F84  C038  F024         	movff	displayLog@run+1,?_printf+3
  5158  000F88  EC63  F008         	call	_printf	;wreg free
  5159                           
  5160                           ;interface.c: 116: lcdInst(0b11000000);;
  5161  000F8C  0EC0               	movlw	192
  5162  000F8E  ECCA  F012         	call	_lcdInst
  5163                           
  5164                           ;interface.c: 117: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  5165  000F92  0E8F               	movlw	low STR_49
  5166  000F94  6E21               	movwf	printf@f,c
  5167  000F96  0EFE               	movlw	high STR_49
  5168  000F98  6E22               	movwf	printf@f+1,c
  5169  000F9A  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5170  000F9E  3A39               	swapf	??_displayLog,f,c
  5171  000FA0  0EF0               	movlw	240
  5172  000FA2  1639               	andwf	??_displayLog,f,c
  5173  000FA4  5039               	movf	??_displayLog,w,c
  5174  000FA6  0F08               	addlw	8
  5175  000FA8  EC29  F012         	call	_eepromRead
  5176  000FAC  6E23               	movwf	?_printf+2,c
  5177  000FAE  6A24               	clrf	?_printf+3,c
  5178  000FB0  BE23               	btfsc	?_printf+2,7,c
  5179  000FB2  0624               	decf	?_printf+3,f,c
  5180  000FB4  EC63  F008         	call	_printf	;wreg free
  5181                           
  5182                           ;interface.c: 118: keycheck();
  5183  000FB8  ECA1  F012         	call	_keycheck	;wreg free
  5184                           
  5185                           ;interface.c: 119: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5186  000FBC  0E01               	movlw	1
  5187  000FBE  ECCA  F012         	call	_lcdInst
  5188  000FC2  0E34               	movlw	52
  5189  000FC4  6E39               	movwf	??_displayLog& (0+255),c
  5190  000FC6  0EF2               	movlw	242
  5191  000FC8                     u7697:
  5192  000FC8  2EE8               	decfsz	wreg,f,c
  5193  000FCA  D7FE               	bra	u7697
  5194  000FCC  2E39               	decfsz	??_displayLog& (0+255),f,c
  5195  000FCE  D7FC               	bra	u7697
  5196                           
  5197                           ;interface.c: 120: printf("Run#%d    A:Next", run);
  5198  000FD0  0E5D               	movlw	low STR_42
  5199  000FD2  6E21               	movwf	printf@f,c
  5200  000FD4  0EFE               	movlw	high STR_42
  5201  000FD6  6E22               	movwf	printf@f+1,c
  5202  000FD8  C037  F023         	movff	displayLog@run,?_printf+2
  5203  000FDC  C038  F024         	movff	displayLog@run+1,?_printf+3
  5204  000FE0  EC63  F008         	call	_printf	;wreg free
  5205                           
  5206                           ;interface.c: 121: lcdInst(0b11000000);;
  5207  000FE4  0EC0               	movlw	192
  5208  000FE6  ECCA  F012         	call	_lcdInst
  5209                           
  5210                           ;interface.c: 122: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  5211  000FEA  0E3B               	movlw	low STR_51
  5212  000FEC  6E21               	movwf	printf@f,c
  5213  000FEE  0EFE               	movlw	high STR_51
  5214  000FF0  6E22               	movwf	printf@f+1,c
  5215  000FF2  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5216  000FF6  3A39               	swapf	??_displayLog,f,c
  5217  000FF8  0EF0               	movlw	240
  5218  000FFA  1639               	andwf	??_displayLog,f,c
  5219  000FFC  5039               	movf	??_displayLog,w,c
  5220  000FFE  0F09               	addlw	9
  5221  001000  EC29  F012         	call	_eepromRead
  5222  001004  6E23               	movwf	?_printf+2,c
  5223  001006  6A24               	clrf	?_printf+3,c
  5224  001008  BE23               	btfsc	?_printf+2,7,c
  5225  00100A  0624               	decf	?_printf+3,f,c
  5226  00100C  EC63  F008         	call	_printf	;wreg free
  5227                           
  5228                           ;interface.c: 123: keycheck();
  5229  001010  ECA1  F012         	call	_keycheck	;wreg free
  5230                           
  5231                           ;interface.c: 124: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5232  001014  0E01               	movlw	1
  5233  001016  ECCA  F012         	call	_lcdInst
  5234  00101A  0E34               	movlw	52
  5235  00101C  6E39               	movwf	??_displayLog& (0+255),c
  5236  00101E  0EF2               	movlw	242
  5237  001020                     u7707:
  5238  001020  2EE8               	decfsz	wreg,f,c
  5239  001022  D7FE               	bra	u7707
  5240  001024  2E39               	decfsz	??_displayLog& (0+255),f,c
  5241  001026  D7FC               	bra	u7707
  5242                           
  5243                           ;interface.c: 125: printf("Run#%d    A:Next", run);
  5244  001028  0E5D               	movlw	low STR_42
  5245  00102A  6E21               	movwf	printf@f,c
  5246  00102C  0EFE               	movlw	high STR_42
  5247  00102E  6E22               	movwf	printf@f+1,c
  5248  001030  C037  F023         	movff	displayLog@run,?_printf+2
  5249  001034  C038  F024         	movff	displayLog@run+1,?_printf+3
  5250  001038  EC63  F008         	call	_printf	;wreg free
  5251                           
  5252                           ;interface.c: 126: lcdInst(0b11000000);;
  5253  00103C  0EC0               	movlw	192
  5254  00103E  ECCA  F012         	call	_lcdInst
  5255                           
  5256                           ;interface.c: 127: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  5257  001042  0E9F               	movlw	low STR_53
  5258  001044  6E21               	movwf	printf@f,c
  5259  001046  0EFE               	movlw	high STR_53
  5260  001048  6E22               	movwf	printf@f+1,c
  5261  00104A  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5262  00104E  3A39               	swapf	??_displayLog,f,c
  5263  001050  0EF0               	movlw	240
  5264  001052  1639               	andwf	??_displayLog,f,c
  5265  001054  5039               	movf	??_displayLog,w,c
  5266  001056  0F0A               	addlw	10
  5267  001058  EC29  F012         	call	_eepromRead
  5268  00105C  6E23               	movwf	?_printf+2,c
  5269  00105E  6A24               	clrf	?_printf+3,c
  5270  001060  BE23               	btfsc	?_printf+2,7,c
  5271  001062  0624               	decf	?_printf+3,f,c
  5272  001064  EC63  F008         	call	_printf	;wreg free
  5273                           
  5274                           ;interface.c: 128: keycheck();
  5275  001068  ECA1  F012         	call	_keycheck	;wreg free
  5276                           
  5277                           ;interface.c: 129: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5278  00106C  0E01               	movlw	1
  5279  00106E  ECCA  F012         	call	_lcdInst
  5280  001072  0E34               	movlw	52
  5281  001074  6E39               	movwf	??_displayLog& (0+255),c
  5282  001076  0EF2               	movlw	242
  5283  001078                     u7717:
  5284  001078  2EE8               	decfsz	wreg,f,c
  5285  00107A  D7FE               	bra	u7717
  5286  00107C  2E39               	decfsz	??_displayLog& (0+255),f,c
  5287  00107E  D7FC               	bra	u7717
  5288                           
  5289                           ;interface.c: 130: printf("Run#%d    A:Next", run);
  5290  001080  0E5D               	movlw	low STR_42
  5291  001082  6E21               	movwf	printf@f,c
  5292  001084  0EFE               	movlw	high STR_42
  5293  001086  6E22               	movwf	printf@f+1,c
  5294  001088  C037  F023         	movff	displayLog@run,?_printf+2
  5295  00108C  C038  F024         	movff	displayLog@run+1,?_printf+3
  5296  001090  EC63  F008         	call	_printf	;wreg free
  5297                           
  5298                           ;interface.c: 131: lcdInst(0b11000000);;
  5299  001094  0EC0               	movlw	192
  5300  001096  ECCA  F012         	call	_lcdInst
  5301                           
  5302                           ;interface.c: 132: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  5303  00109A  0E4C               	movlw	low STR_55
  5304  00109C  6E21               	movwf	printf@f,c
  5305  00109E  0EFE               	movlw	high STR_55
  5306  0010A0  6E22               	movwf	printf@f+1,c
  5307  0010A2  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5308  0010A6  3A39               	swapf	??_displayLog,f,c
  5309  0010A8  0EF0               	movlw	240
  5310  0010AA  1639               	andwf	??_displayLog,f,c
  5311  0010AC  5039               	movf	??_displayLog,w,c
  5312  0010AE  0F0B               	addlw	11
  5313  0010B0  EC29  F012         	call	_eepromRead
  5314  0010B4  6E23               	movwf	?_printf+2,c
  5315  0010B6  6A24               	clrf	?_printf+3,c
  5316  0010B8  BE23               	btfsc	?_printf+2,7,c
  5317  0010BA  0624               	decf	?_printf+3,f,c
  5318  0010BC  EC63  F008         	call	_printf	;wreg free
  5319                           
  5320                           ;interface.c: 133: keycheck();
  5321  0010C0  ECA1  F012         	call	_keycheck	;wreg free
  5322  0010C4  0012               	return		;funcret
  5323  0010C6                     __end_of_displayLog:
  5324                           	opt stack 0
  5325                           tblptru	equ	0xFF8
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           intcon2	equ	0xFF1
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           indf2	equ	0xFDF
  5333                           fsr2h	equ	0xFDA
  5334                           fsr2l	equ	0xFD9
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function _printf *****************
  5338 ;; Defined at:
  5339 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  f               2   32[COMRAM] PTR const unsigned char 
  5342 ;;		 -> STR_55(17), STR_54(17), STR_53(16), STR_52(17), 
  5343 ;;		 -> STR_51(17), STR_50(17), STR_49(16), STR_48(17), 
  5344 ;;		 -> STR_47(16), STR_46(17), STR_45(21), STR_44(17), 
  5345 ;;		 -> STR_43(12), STR_42(17), STR_41(6), STR_40(8), 
  5346 ;;		 -> STR_39(15), STR_38(8), STR_37(16), STR_36(17), 
  5347 ;;		 -> STR_35(16), STR_34(4), STR_33(4), STR_32(4), 
  5348 ;;		 -> STR_31(12), STR_30(4), STR_29(4), STR_28(4), 
  5349 ;;		 -> STR_27(4), STR_26(4), STR_25(12), STR_24(9), 
  5350 ;;		 -> STR_23(9), STR_22(12), STR_21(4), STR_20(4), 
  5351 ;;		 -> STR_19(4), STR_18(4), STR_17(11), STR_16(3), 
  5352 ;;		 -> STR_15(13), STR_14(13), STR_13(13), STR_12(3), 
  5353 ;;		 -> STR_11(16), STR_10(16), STR_9(3), STR_8(16), 
  5354 ;;		 -> STR_7(16), STR_6(12), STR_5(12), STR_4(16), 
  5355 ;;		 -> STR_3(16), STR_2(16), STR_1(16), 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  idx             1   44[COMRAM] unsigned char 
  5358 ;;  tmpval          4    0        struct .
  5359 ;;  cp              3    0        PTR const unsigned char 
  5360 ;;  width           2   51[COMRAM] int 
  5361 ;;  val             2   48[COMRAM] unsigned int 
  5362 ;;  ap              2   45[COMRAM] PTR void [1]
  5363 ;;		 -> ?_printf(2), 
  5364 ;;  len             2    0        unsigned int 
  5365 ;;  c               1   53[COMRAM] char 
  5366 ;;  flag            1   50[COMRAM] unsigned char 
  5367 ;;  prec            1   47[COMRAM] char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;                  2   32[COMRAM] int 
  5370 ;; Registers used:
  5371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:       22 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    4
  5384 ;; This function calls:
  5385 ;;		___lwdiv
  5386 ;;		___lwmod
  5387 ;;		___wmul
  5388 ;;		_isdigit
  5389 ;;		_putch
  5390 ;; This function is called by:
  5391 ;;		_main
  5392 ;;		_homescreen
  5393 ;;		_displayLog
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text14
  5398  0010C6                     __ptext14:
  5399                           	opt stack 0
  5400  0010C6                     _printf:
  5401                           	opt stack 26
  5402                           
  5403                           ;doprnt.c: 466: va_list ap;
  5404                           ;doprnt.c: 499: signed char c;
  5405                           ;doprnt.c: 501: int width;
  5406                           ;doprnt.c: 506: signed char prec;
  5407                           ;doprnt.c: 508: unsigned char flag;
  5408                           ;doprnt.c: 523: union {
  5409                           ;doprnt.c: 524: unsigned long vd;
  5410                           ;doprnt.c: 525: double integ;
  5411                           ;doprnt.c: 526: } tmpval;
  5412                           ;doprnt.c: 528: unsigned int val;
  5413                           ;doprnt.c: 529: unsigned len;
  5414                           ;doprnt.c: 530: const char * cp;
  5415                           ;doprnt.c: 533: *ap = __va_start();
  5416                           
  5417                           ;incstack = 0
  5418  0010C6  0E23               	movlw	low (?_printf+2)
  5419  0010C8  6E2E               	movwf	printf@ap,c
  5420  0010CA  0E00               	movlw	high (?_printf+2)
  5421  0010CC  6E2F               	movwf	printf@ap+1,c
  5422                           
  5423                           ;doprnt.c: 536: while(c = *f++) {
  5424  0010CE  D174               	goto	l5278
  5425  0010D0                     l5152:
  5426                           
  5427                           ;doprnt.c: 538: if(c != '%')
  5428  0010D0  0E25               	movlw	37
  5429  0010D2  1836               	xorwf	printf@c,w,c
  5430  0010D4  B4D8               	btfsc	status,2,c
  5431  0010D6  D004               	goto	l5156
  5432                           
  5433                           ;doprnt.c: 540: {
  5434                           ;doprnt.c: 541: (putch(c) );
  5435  0010D8  5036               	movf	printf@c,w,c
  5436  0010DA  ECC4  F012         	call	_putch
  5437                           
  5438                           ;doprnt.c: 542: continue;
  5439  0010DE  D16C               	goto	l5278
  5440  0010E0                     l5156:
  5441                           
  5442                           ;doprnt.c: 543: }
  5443                           ;doprnt.c: 546: width = 0;
  5444  0010E0  0E00               	movlw	0
  5445  0010E2  6E35               	movwf	printf@width+1,c
  5446  0010E4  0E00               	movlw	0
  5447  0010E6  6E34               	movwf	printf@width,c
  5448                           
  5449                           ;doprnt.c: 548: flag = 0;
  5450  0010E8  0E00               	movlw	0
  5451  0010EA  6E33               	movwf	printf@flag,c
  5452                           
  5453                           ;doprnt.c: 551: switch(*f) {
  5454                           
  5455                           ;doprnt.c: 550: for(;;) {
  5456  0010EC  D003               	goto	l5162
  5457  0010EE                     l5158:
  5458                           
  5459                           ;doprnt.c: 580: flag |= 0x04;
  5460  0010EE  8433               	bsf	printf@flag,2,c
  5461                           
  5462                           ;doprnt.c: 581: f++;
  5463  0010F0  4A21               	infsnz	printf@f,f,c
  5464  0010F2  2A22               	incf	printf@f+1,f,c
  5465  0010F4                     l5162:
  5466  0010F4  C021  FFF6         	movff	printf@f,tblptrl
  5467  0010F8  C022  FFF7         	movff	printf@f+1,tblptrh
  5468  0010FC                     	if	0	;tblptru may be non-zero
  5469  0010FC                     	endif
  5470  0010FC                     	if	0	;tblptru may be non-zero
  5471  0010FC                     	endif
  5472  0010FC  0008               	tblrd		*
  5473  0010FE  50F5               	movf	tablat,w,c
  5474                           
  5475                           ; Switch size 1, requested type "space"
  5476                           ; Number of cases is 1, Range of values is 48 to 48
  5477                           ; switch strategies available:
  5478                           ; Name         Instructions Cycles
  5479                           ; simple_byte            4     3 (average)
  5480                           ;	Chosen strategy is simple_byte
  5481  001100  0A30               	xorlw	48	; case 48
  5482  001102  B4D8               	btfsc	status,2,c
  5483  001104  D7F4               	goto	l5158
  5484                           
  5485                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5486                           
  5487                           ;doprnt.c: 586: }
  5488                           
  5489                           ;doprnt.c: 585: break;
  5490  001106  C021  FFF6         	movff	printf@f,tblptrl
  5491  00110A  C022  FFF7         	movff	printf@f+1,tblptrh
  5492  00110E                     	if	0	;tblptru may be non-zero
  5493  00110E                     	endif
  5494  00110E                     	if	0	;tblptru may be non-zero
  5495  00110E                     	endif
  5496  00110E  0008               	tblrd		*
  5497  001110  50F5               	movf	tablat,w,c
  5498  001112  EC88  F012         	call	_isdigit
  5499  001116  A0D8               	btfss	status,0,c
  5500  001118  D035               	goto	l5180
  5501                           
  5502                           ;doprnt.c: 598: width = 0;
  5503  00111A  0E00               	movlw	0
  5504  00111C  6E35               	movwf	printf@width+1,c
  5505  00111E  0E00               	movlw	0
  5506  001120  6E34               	movwf	printf@width,c
  5507  001122                     l5168:
  5508                           
  5509                           ;doprnt.c: 600: width *= 10;
  5510  001122  C034  F015         	movff	printf@width,___wmul@multiplier
  5511  001126  C035  F016         	movff	printf@width+1,___wmul@multiplier+1
  5512  00112A  0E00               	movlw	0
  5513  00112C  6E18               	movwf	___wmul@multiplicand+1,c
  5514  00112E  0E0A               	movlw	10
  5515  001130  6E17               	movwf	___wmul@multiplicand,c
  5516  001132  EC63  F012         	call	___wmul	;wreg free
  5517  001136  C015  F034         	movff	?___wmul,printf@width
  5518  00113A  C016  F035         	movff	?___wmul+1,printf@width+1
  5519                           
  5520                           ;doprnt.c: 601: width += *f++ - '0';
  5521  00113E  0ED0               	movlw	208
  5522  001140  6E29               	movwf	??_printf& (0+255),c
  5523  001142  0EFF               	movlw	255
  5524  001144  6E2A               	movwf	(??_printf+1)& (0+255),c
  5525  001146  C021  FFF6         	movff	printf@f,tblptrl
  5526  00114A  C022  FFF7         	movff	printf@f+1,tblptrh
  5527  00114E                     	if	0	;tblptru may be non-zero
  5528  00114E                     	endif
  5529  00114E                     	if	0	;tblptru may be non-zero
  5530  00114E                     	endif
  5531  00114E  0008               	tblrd		*
  5532  001150  50F5               	movf	tablat,w,c
  5533  001152  6E2B               	movwf	(??_printf+2)& (0+255),c
  5534  001154  6A2C               	clrf	(??_printf+3)& (0+255),c
  5535  001156  5029               	movf	??_printf,w,c
  5536  001158  262B               	addwf	??_printf+2,f,c
  5537  00115A  502A               	movf	??_printf+1,w,c
  5538  00115C  222C               	addwfc	??_printf+3,f,c
  5539  00115E  502B               	movf	??_printf+2,w,c
  5540  001160  2634               	addwf	printf@width,f,c
  5541  001162  502C               	movf	??_printf+3,w,c
  5542  001164  2235               	addwfc	printf@width+1,f,c
  5543  001166  4A21               	infsnz	printf@f,f,c
  5544  001168  2A22               	incf	printf@f+1,f,c
  5545                           
  5546                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5547  00116A  C021  FFF6         	movff	printf@f,tblptrl
  5548  00116E  C022  FFF7         	movff	printf@f+1,tblptrh
  5549  001172                     	if	0	;tblptru may be non-zero
  5550  001172                     	endif
  5551  001172                     	if	0	;tblptru may be non-zero
  5552  001172                     	endif
  5553  001172  0008               	tblrd		*
  5554  001174  50F5               	movf	tablat,w,c
  5555  001176  EC88  F012         	call	_isdigit
  5556  00117A  A0D8               	btfss	status,0,c
  5557  00117C  D003               	goto	l5180
  5558  00117E  D7D1               	goto	l5168
  5559  001180                     l5176:
  5560                           
  5561                           ;doprnt.c: 721: flag |= 0x80;
  5562  001180  8E33               	bsf	printf@flag,7,c
  5563                           
  5564                           ;doprnt.c: 723: break;
  5565  001182  D017               	goto	l754
  5566  001184                     l5180:
  5567  001184  C021  FFF6         	movff	printf@f,tblptrl
  5568  001188  C022  FFF7         	movff	printf@f+1,tblptrh
  5569  00118C  4A21               	infsnz	printf@f,f,c
  5570  00118E  2A22               	incf	printf@f+1,f,c
  5571  001190                     	if	0	;tblptru may be non-zero
  5572  001190                     	endif
  5573  001190                     	if	0	;tblptru may be non-zero
  5574  001190                     	endif
  5575  001190  0008               	tblrd		*
  5576  001192  CFF5 F036          	movff	tablat,printf@c
  5577  001196  5036               	movf	printf@c,w,c
  5578                           
  5579                           ; Switch size 1, requested type "space"
  5580                           ; Number of cases is 4, Range of values is 0 to 120
  5581                           ; switch strategies available:
  5582                           ; Name         Instructions Cycles
  5583                           ; simple_byte           13     7 (average)
  5584                           ;	Chosen strategy is simple_byte
  5585  001198  0A00               	xorlw	0	; case 0
  5586  00119A  B4D8               	btfsc	status,2,c
  5587  00119C  0012               	return	
  5588  00119E  0A64               	xorlw	100	; case 100
  5589  0011A0  B4D8               	btfsc	status,2,c
  5590  0011A2  D007               	goto	l754
  5591  0011A4  0A0D               	xorlw	13	; case 105
  5592  0011A6  B4D8               	btfsc	status,2,c
  5593  0011A8  D004               	goto	l754
  5594  0011AA  0A11               	xorlw	17	; case 120
  5595  0011AC  B4D8               	btfsc	status,2,c
  5596  0011AE  D7E8               	goto	l5176
  5597  0011B0  D103               	goto	l5278
  5598  0011B2                     l754:
  5599                           
  5600                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5601  0011B2  BE33               	btfsc	printf@flag,7,c
  5602  0011B4  D015               	goto	l5192
  5603                           
  5604                           ;doprnt.c: 1253: {
  5605                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5606  0011B6  C02E  FFD9         	movff	printf@ap,fsr2l
  5607  0011BA  C02F  FFDA         	movff	printf@ap+1,fsr2h
  5608  0011BE  CFDE F031          	movff	postinc2,printf@val
  5609  0011C2  CFDD F032          	movff	postdec2,printf@val+1
  5610  0011C6  0E02               	movlw	2
  5611  0011C8  262E               	addwf	printf@ap,f,c
  5612  0011CA  0E00               	movlw	0
  5613  0011CC  222F               	addwfc	printf@ap+1,f,c
  5614                           
  5615                           ;doprnt.c: 1261: if((int)val < 0) {
  5616  0011CE  AE32               	btfss	printf@val+1,7,c
  5617  0011D0  D044               	goto	l5226
  5618                           
  5619                           ;doprnt.c: 1262: flag |= 0x03;
  5620  0011D2  0E03               	movlw	3
  5621  0011D4  1233               	iorwf	printf@flag,f,c
  5622                           
  5623                           ;doprnt.c: 1263: val = -val;
  5624  0011D6  6C31               	negf	printf@val,c
  5625  0011D8  1E32               	comf	printf@val+1,f,c
  5626  0011DA  B0D8               	btfsc	status,0,c
  5627  0011DC  2A32               	incf	printf@val+1,f,c
  5628                           
  5629                           ;doprnt.c: 1264: }
  5630                           ;doprnt.c: 1266: }
  5631  0011DE  D03D               	goto	l5226
  5632  0011E0                     l5192:
  5633                           
  5634                           ;doprnt.c: 1268: else
  5635                           ;doprnt.c: 1273: {
  5636                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5637  0011E0  C02E  FFD9         	movff	printf@ap,fsr2l
  5638  0011E4  C02F  FFDA         	movff	printf@ap+1,fsr2h
  5639  0011E8  CFDE F031          	movff	postinc2,printf@val
  5640  0011EC  CFDD F032          	movff	postdec2,printf@val+1
  5641  0011F0  0E02               	movlw	2
  5642  0011F2  262E               	addwf	printf@ap,f,c
  5643  0011F4  0E00               	movlw	0
  5644  0011F6  222F               	addwfc	printf@ap+1,f,c
  5645                           
  5646                           ;doprnt.c: 1287: }
  5647                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5648  0011F8  D030               	goto	l5226
  5649  0011FA                     l5196:
  5650                           
  5651                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5652  0011FA  0E01               	movlw	1
  5653  0011FC  6E36               	movwf	printf@c,c
  5654  0011FE                     l5198:
  5655  0011FE  0E05               	movlw	5
  5656  001200  1836               	xorwf	printf@c,w,c
  5657  001202  B4D8               	btfsc	status,2,c
  5658  001204  D032               	goto	l5228
  5659                           
  5660                           ;doprnt.c: 1306: if(val < dpowers[c])
  5661  001206  5036               	movf	printf@c,w,c
  5662  001208  0D02               	mullw	2
  5663  00120A  0EFC               	movlw	low _dpowers
  5664  00120C  24F3               	addwf	prodl,w,c
  5665  00120E  6EF6               	movwf	tblptrl,c
  5666  001210  0EFD               	movlw	high _dpowers
  5667  001212  20F4               	addwfc	prodh,w,c
  5668  001214  6EF7               	movwf	tblptrh,c
  5669  001216                     	if	0	;There are less than 3 active tblptr bytes
  5670  001216                     	endif
  5671  001216  0009               	tblrd		*+
  5672  001218  50F5               	movf	tablat,w,c
  5673  00121A  5C31               	subwf	printf@val,w,c
  5674  00121C  0009               	tblrd		*+
  5675  00121E  50F5               	movf	tablat,w,c
  5676  001220  5832               	subwfb	printf@val+1,w,c
  5677  001222  A0D8               	btfss	status,0,c
  5678  001224  D022               	goto	l5228
  5679                           
  5680                           ;doprnt.c: 1307: break;
  5681  001226  2A36               	incf	printf@c,f,c
  5682  001228  D7EA               	goto	l5198
  5683  00122A                     l5210:
  5684                           
  5685                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5686  00122A  0E01               	movlw	1
  5687  00122C  6E36               	movwf	printf@c,c
  5688  00122E                     l5212:
  5689  00122E  0E04               	movlw	4
  5690  001230  1836               	xorwf	printf@c,w,c
  5691  001232  B4D8               	btfsc	status,2,c
  5692  001234  D01A               	goto	l5228
  5693                           
  5694                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5695  001236  5036               	movf	printf@c,w,c
  5696  001238  0D02               	mullw	2
  5697  00123A  0E06               	movlw	low _hexpowers
  5698  00123C  24F3               	addwf	prodl,w,c
  5699  00123E  6EF6               	movwf	tblptrl,c
  5700  001240  0EFE               	movlw	high _hexpowers
  5701  001242  20F4               	addwfc	prodh,w,c
  5702  001244  6EF7               	movwf	tblptrh,c
  5703  001246                     	if	0	;There are less than 3 active tblptr bytes
  5704  001246                     	endif
  5705  001246  0009               	tblrd		*+
  5706  001248  50F5               	movf	tablat,w,c
  5707  00124A  5C31               	subwf	printf@val,w,c
  5708  00124C  0009               	tblrd		*+
  5709  00124E  50F5               	movf	tablat,w,c
  5710  001250  5832               	subwfb	printf@val+1,w,c
  5711  001252  A0D8               	btfss	status,0,c
  5712  001254  D00A               	goto	l5228
  5713                           
  5714                           ;doprnt.c: 1318: break;
  5715  001256  2A36               	incf	printf@c,f,c
  5716  001258  D7EA               	goto	l5212
  5717  00125A                     l5226:
  5718  00125A  5033               	movf	printf@flag,w,c
  5719  00125C  0B80               	andlw	128
  5720                           
  5721                           ; Switch size 1, requested type "space"
  5722                           ; Number of cases is 2, Range of values is 0 to 128
  5723                           ; switch strategies available:
  5724                           ; Name         Instructions Cycles
  5725                           ; simple_byte            7     4 (average)
  5726                           ;	Chosen strategy is simple_byte
  5727  00125E  0A00               	xorlw	0	; case 0
  5728  001260  B4D8               	btfsc	status,2,c
  5729  001262  D7CB               	goto	l5196
  5730  001264  0A80               	xorlw	128	; case 128
  5731  001266  B4D8               	btfsc	status,2,c
  5732  001268  D7E0               	goto	l5210
  5733  00126A                     l5228:
  5734                           
  5735                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5736  00126A  5034               	movf	printf@width,w,c
  5737  00126C  1035               	iorwf	printf@width+1,w,c
  5738  00126E  B4D8               	btfsc	status,2,c
  5739  001270  D009               	goto	l5234
  5740  001272  C033  F029         	movff	printf@flag,??_printf
  5741  001276  0E03               	movlw	3
  5742  001278  1629               	andwf	??_printf,f,c
  5743  00127A  B4D8               	btfsc	status,2,c
  5744  00127C  D003               	goto	l5234
  5745                           
  5746                           ;doprnt.c: 1346: width--;
  5747  00127E  0634               	decf	printf@width,f,c
  5748  001280  A0D8               	btfss	status,0,c
  5749  001282  0635               	decf	printf@width+1,f,c
  5750  001284                     l5234:
  5751                           
  5752                           ;doprnt.c: 1381: if(width > c)
  5753  001284  0E80               	movlw	128
  5754  001286  BE36               	btfsc	printf@c,7,c
  5755  001288  0E7F               	movlw	127
  5756  00128A  6E29               	movwf	??_printf& (0+255),c
  5757  00128C  5034               	movf	printf@width,w,c
  5758  00128E  5C36               	subwf	printf@c,w,c
  5759  001290  5035               	movf	printf@width+1,w,c
  5760  001292  0A80               	xorlw	128
  5761  001294  5829               	subwfb	??_printf& (0+255),w,c
  5762  001296  B0D8               	btfsc	status,0,c
  5763  001298  D007               	goto	l5238
  5764                           
  5765                           ;doprnt.c: 1382: width -= c;
  5766  00129A  5036               	movf	printf@c,w,c
  5767  00129C  5E34               	subwf	printf@width,f,c
  5768  00129E  0E00               	movlw	0
  5769  0012A0  BE36               	btfsc	printf@c,7,c
  5770  0012A2  0EFF               	movlw	255
  5771  0012A4  5A35               	subwfb	printf@width+1,f,c
  5772  0012A6  D004               	goto	l5240
  5773  0012A8                     l5238:
  5774                           
  5775                           ;doprnt.c: 1383: else
  5776                           ;doprnt.c: 1384: width = 0;
  5777  0012A8  0E00               	movlw	0
  5778  0012AA  6E35               	movwf	printf@width+1,c
  5779  0012AC  0E00               	movlw	0
  5780  0012AE  6E34               	movwf	printf@width,c
  5781  0012B0                     l5240:
  5782                           
  5783                           ;doprnt.c: 1387: if(flag & 0x04) {
  5784  0012B0  A433               	btfss	printf@flag,2,c
  5785  0012B2  D014               	goto	l5252
  5786                           
  5787                           ;doprnt.c: 1392: if(flag & 0x03)
  5788  0012B4  C033  F029         	movff	printf@flag,??_printf
  5789  0012B8  0E03               	movlw	3
  5790  0012BA  1629               	andwf	??_printf,f,c
  5791  0012BC  B4D8               	btfsc	status,2,c
  5792  0012BE  D003               	goto	l5246
  5793                           
  5794                           ;doprnt.c: 1393: (putch('-') );
  5795  0012C0  0E2D               	movlw	45
  5796  0012C2  ECC4  F012         	call	_putch
  5797  0012C6                     l5246:
  5798                           
  5799                           ;doprnt.c: 1415: if(width)
  5800  0012C6  5034               	movf	printf@width,w,c
  5801  0012C8  1035               	iorwf	printf@width+1,w,c
  5802  0012CA  B4D8               	btfsc	status,2,c
  5803  0012CC  D01E               	goto	l5262
  5804                           
  5805                           ;doprnt.c: 1417: (putch('0') );
  5806                           
  5807                           ;doprnt.c: 1416: do
  5808  0012CE  0E30               	movlw	48
  5809  0012D0  ECC4  F012         	call	_putch
  5810                           
  5811                           ;doprnt.c: 1418: while(--width);
  5812  0012D4  0634               	decf	printf@width,f,c
  5813  0012D6  A0D8               	btfss	status,0,c
  5814  0012D8  0635               	decf	printf@width+1,f,c
  5815  0012DA  D7F5               	goto	l5246
  5816  0012DC                     l5252:
  5817                           
  5818                           ;doprnt.c: 1422: {
  5819                           ;doprnt.c: 1424: if(width
  5820                           ;doprnt.c: 1428: )
  5821  0012DC  5034               	movf	printf@width,w,c
  5822  0012DE  1035               	iorwf	printf@width+1,w,c
  5823  0012E0  B4D8               	btfsc	status,2,c
  5824  0012E2  D00A               	goto	l5258
  5825  0012E4                     l5254:
  5826                           
  5827                           ;doprnt.c: 1430: (putch(' ') );
  5828  0012E4  0E20               	movlw	32
  5829  0012E6  ECC4  F012         	call	_putch
  5830                           
  5831                           ;doprnt.c: 1431: while(--width);
  5832  0012EA  0634               	decf	printf@width,f,c
  5833  0012EC  A0D8               	btfss	status,0,c
  5834  0012EE  0635               	decf	printf@width+1,f,c
  5835  0012F0  5034               	movf	printf@width,w,c
  5836  0012F2  1035               	iorwf	printf@width+1,w,c
  5837  0012F4  A4D8               	btfss	status,2,c
  5838  0012F6  D7F6               	goto	l5254
  5839  0012F8                     l5258:
  5840                           
  5841                           ;doprnt.c: 1438: if(flag & 0x03)
  5842  0012F8  C033  F029         	movff	printf@flag,??_printf
  5843  0012FC  0E03               	movlw	3
  5844  0012FE  1629               	andwf	??_printf,f,c
  5845  001300  B4D8               	btfsc	status,2,c
  5846  001302  D003               	goto	l5262
  5847                           
  5848                           ;doprnt.c: 1439: (putch('-') );
  5849  001304  0E2D               	movlw	45
  5850  001306  ECC4  F012         	call	_putch
  5851  00130A                     l5262:
  5852                           
  5853                           ;doprnt.c: 1469: }
  5854                           ;doprnt.c: 1472: prec = c;
  5855  00130A  C036  F030         	movff	printf@c,printf@prec
  5856                           
  5857                           ;doprnt.c: 1474: while(prec--) {
  5858  00130E  D050               	goto	l5276
  5859  001310                     l5264:
  5860                           
  5861                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5862  001310  5030               	movf	printf@prec,w,c
  5863  001312  0D02               	mullw	2
  5864  001314  0EFC               	movlw	low _dpowers
  5865  001316  24F3               	addwf	prodl,w,c
  5866  001318  6EF6               	movwf	tblptrl,c
  5867  00131A  0EFD               	movlw	high _dpowers
  5868  00131C  20F4               	addwfc	prodh,w,c
  5869  00131E  6EF7               	movwf	tblptrh,c
  5870  001320                     	if	0	;There are less than 3 active tblptr bytes
  5871  001320                     	endif
  5872  001320  0009               	tblrd		*+
  5873  001322  CFF5 F017          	movff	tablat,___lwdiv@divisor
  5874  001326  000A               	tblrd		*-
  5875  001328  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  5876  00132C  C031  F015         	movff	printf@val,___lwdiv@dividend
  5877  001330  C032  F016         	movff	printf@val+1,___lwdiv@dividend+1
  5878  001334  EC56  F011         	call	___lwdiv	;wreg free
  5879  001338  C015  F01C         	movff	?___lwdiv,___lwmod@dividend
  5880  00133C  C016  F01D         	movff	?___lwdiv+1,___lwmod@dividend+1
  5881  001340  0E00               	movlw	0
  5882  001342  6E1F               	movwf	___lwmod@divisor+1,c
  5883  001344  0E0A               	movlw	10
  5884  001346  6E1E               	movwf	___lwmod@divisor,c
  5885  001348  ECEC  F011         	call	___lwmod	;wreg free
  5886  00134C  501C               	movf	?___lwmod,w,c
  5887  00134E  0F30               	addlw	48
  5888  001350  6E36               	movwf	printf@c,c
  5889                           
  5890                           ;doprnt.c: 1491: break;
  5891  001352  D02B               	goto	l5274
  5892  001354                     l5266:
  5893                           
  5894                           ;doprnt.c: 1499: {
  5895                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5896  001354  C031  F015         	movff	printf@val,___lwdiv@dividend
  5897  001358  C032  F016         	movff	printf@val+1,___lwdiv@dividend+1
  5898  00135C  5030               	movf	printf@prec,w,c
  5899  00135E  0D02               	mullw	2
  5900  001360  0E06               	movlw	low _hexpowers
  5901  001362  24F3               	addwf	prodl,w,c
  5902  001364  6EF6               	movwf	tblptrl,c
  5903  001366  0EFE               	movlw	high _hexpowers
  5904  001368  20F4               	addwfc	prodh,w,c
  5905  00136A  6EF7               	movwf	tblptrh,c
  5906  00136C                     	if	0	;There are less than 3 active tblptr bytes
  5907  00136C                     	endif
  5908  00136C  0009               	tblrd		*+
  5909  00136E  CFF5 F017          	movff	tablat,___lwdiv@divisor
  5910  001372  000A               	tblrd		*-
  5911  001374  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  5912  001378  EC56  F011         	call	___lwdiv	;wreg free
  5913  00137C  5015               	movf	?___lwdiv,w,c
  5914  00137E  0B0F               	andlw	15
  5915  001380  6E2D               	movwf	printf@idx,c
  5916                           
  5917                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5918  001382  502D               	movf	printf@idx,w,c
  5919  001384  0D01               	mullw	1
  5920  001386  0E2A               	movlw	low STR_56
  5921  001388  24F3               	addwf	prodl,w,c
  5922  00138A  6EF6               	movwf	tblptrl,c
  5923  00138C  0EFE               	movlw	high STR_56
  5924  00138E  20F4               	addwfc	prodh,w,c
  5925  001390  6EF7               	movwf	tblptrh,c
  5926  001392                     	if	0	;There are less than 3 active tblptr bytes
  5927  001392                     	endif
  5928  001392  0008               	tblrd		*
  5929  001394  CFF5 F036          	movff	tablat,printf@c
  5930                           
  5931                           ;doprnt.c: 1523: }
  5932                           
  5933                           ;doprnt.c: 1508: }
  5934                           ;doprnt.c: 1510: break;
  5935  001398  D008               	goto	l5274
  5936  00139A                     l5272:
  5937  00139A  5033               	movf	printf@flag,w,c
  5938  00139C  0B80               	andlw	128
  5939                           
  5940                           ; Switch size 1, requested type "space"
  5941                           ; Number of cases is 2, Range of values is 0 to 128
  5942                           ; switch strategies available:
  5943                           ; Name         Instructions Cycles
  5944                           ; simple_byte            7     4 (average)
  5945                           ;	Chosen strategy is simple_byte
  5946  00139E  0A00               	xorlw	0	; case 0
  5947  0013A0  B4D8               	btfsc	status,2,c
  5948  0013A2  D7B6               	goto	l5264
  5949  0013A4  0A80               	xorlw	128	; case 128
  5950  0013A6  B4D8               	btfsc	status,2,c
  5951  0013A8  D7D5               	goto	l5266
  5952  0013AA                     l5274:
  5953                           
  5954                           ;doprnt.c: 1524: (putch(c) );
  5955  0013AA  5036               	movf	printf@c,w,c
  5956  0013AC  ECC4  F012         	call	_putch
  5957  0013B0                     l5276:
  5958  0013B0  0630               	decf	printf@prec,f,c
  5959  0013B2  2830               	incf	printf@prec,w,c
  5960  0013B4  A4D8               	btfss	status,2,c
  5961  0013B6  D7F1               	goto	l5272
  5962  0013B8                     l5278:
  5963  0013B8  C021  FFF6         	movff	printf@f,tblptrl
  5964  0013BC  C022  FFF7         	movff	printf@f+1,tblptrh
  5965  0013C0  4A21               	infsnz	printf@f,f,c
  5966  0013C2  2A22               	incf	printf@f+1,f,c
  5967  0013C4                     	if	0	;tblptru may be non-zero
  5968  0013C4                     	endif
  5969  0013C4                     	if	0	;tblptru may be non-zero
  5970  0013C4                     	endif
  5971  0013C4  0008               	tblrd		*
  5972  0013C6  CFF5 F036          	movff	tablat,printf@c
  5973  0013CA  5036               	movf	printf@c,w,c
  5974  0013CC  B4D8               	btfsc	status,2,c
  5975  0013CE  0012               	return	
  5976  0013D0  D67F               	goto	l5152
  5977  0013D2                     __end_of_printf:
  5978                           	opt stack 0
  5979                           tblptru	equ	0xFF8
  5980                           tblptrh	equ	0xFF7
  5981                           tblptrl	equ	0xFF6
  5982                           tablat	equ	0xFF5
  5983                           prodh	equ	0xFF4
  5984                           prodl	equ	0xFF3
  5985                           intcon	equ	0xFF2
  5986                           intcon2	equ	0xFF1
  5987                           postinc0	equ	0xFEE
  5988                           wreg	equ	0xFE8
  5989                           indf2	equ	0xFDF
  5990                           postinc2	equ	0xFDE
  5991                           postdec2	equ	0xFDD
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function _putch *****************
  5997 ;; Defined at:
  5998 ;;		line 27 in file "lcd.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  data            1    wreg     unsigned char 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  data            1   22[COMRAM] unsigned char 
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      void 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2, status,0, cstack
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;Total ram usage:        1 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    3
  6019 ;; This function calls:
  6020 ;;		_lcdNibble
  6021 ;; This function is called by:
  6022 ;;		_printf
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text15
  6027  002588                     __ptext15:
  6028                           	opt stack 0
  6029  002588                     _putch:
  6030                           	opt stack 26
  6031                           
  6032                           ;incstack = 0
  6033                           ;putch@data stored from wreg
  6034  002588  6E17               	movwf	putch@data,c
  6035                           
  6036                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6037  00258A  848C               	bsf	3980,2,c	;volatile
  6038                           
  6039                           ;lcd.c: 29: lcdNibble(data);
  6040  00258C  5017               	movf	putch@data,w,c
  6041  00258E  EC2B  F011         	call	_lcdNibble
  6042  002592  0012               	return		;funcret
  6043  002594                     __end_of_putch:
  6044                           	opt stack 0
  6045                           tblptru	equ	0xFF8
  6046                           tblptrh	equ	0xFF7
  6047                           tblptrl	equ	0xFF6
  6048                           tablat	equ	0xFF5
  6049                           prodh	equ	0xFF4
  6050                           prodl	equ	0xFF3
  6051                           intcon	equ	0xFF2
  6052                           intcon2	equ	0xFF1
  6053                           postinc0	equ	0xFEE
  6054                           wreg	equ	0xFE8
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           fsr2h	equ	0xFDA
  6059                           fsr2l	equ	0xFD9
  6060                           status	equ	0xFD8
  6061                           
  6062 ;; *************** function _isdigit *****************
  6063 ;; Defined at:
  6064 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  c               1    wreg     unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  c               1   22[COMRAM] unsigned char 
  6069 ;; Return value:  Size  Location     Type
  6070 ;;		None               void
  6071 ;; Registers used:
  6072 ;;		wreg, status,2, status,0
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6082 ;;Total ram usage:        3 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    2
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_printf
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text16
  6093  002510                     __ptext16:
  6094                           	opt stack 0
  6095  002510                     _isdigit:
  6096                           	opt stack 27
  6097                           
  6098                           ;incstack = 0
  6099                           ;isdigit@c stored from wreg
  6100  002510  6E17               	movwf	isdigit@c,c
  6101  002512  0E00               	movlw	0
  6102  002514  6E16               	movwf	_isdigit$1450,c
  6103  002516  0E3A               	movlw	58
  6104  002518  6017               	cpfslt	isdigit@c,c
  6105  00251A  D005               	goto	l4894
  6106  00251C  0E2F               	movlw	47
  6107  00251E  6417               	cpfsgt	isdigit@c,c
  6108  002520  D002               	goto	l4894
  6109  002522  0E01               	movlw	1
  6110  002524  6E16               	movwf	_isdigit$1450,c
  6111  002526                     l4894:
  6112  002526  C016  F015         	movff	_isdigit$1450,??_isdigit
  6113  00252A  3015               	rrcf	??_isdigit,w,c
  6114  00252C  0012               	return	
  6115  00252E                     __end_of_isdigit:
  6116                           	opt stack 0
  6117                           tblptru	equ	0xFF8
  6118                           tblptrh	equ	0xFF7
  6119                           tblptrl	equ	0xFF6
  6120                           tablat	equ	0xFF5
  6121                           prodh	equ	0xFF4
  6122                           prodl	equ	0xFF3
  6123                           intcon	equ	0xFF2
  6124                           intcon2	equ	0xFF1
  6125                           postinc0	equ	0xFEE
  6126                           wreg	equ	0xFE8
  6127                           indf2	equ	0xFDF
  6128                           postinc2	equ	0xFDE
  6129                           postdec2	equ	0xFDD
  6130                           fsr2h	equ	0xFDA
  6131                           fsr2l	equ	0xFD9
  6132                           status	equ	0xFD8
  6133                           
  6134 ;; *************** function ___wmul *****************
  6135 ;; Defined at:
  6136 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  multiplier      2   20[COMRAM] unsigned int 
  6139 ;;  multiplicand    2   22[COMRAM] unsigned int 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  product         2   24[COMRAM] unsigned int 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  2   20[COMRAM] unsigned int 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2, status,0, prodl, prodh
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;Total ram usage:        6 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    2
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_printf
  6162 ;;		_timePassed
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text17
  6167  0024C6                     __ptext17:
  6168                           	opt stack 0
  6169  0024C6                     ___wmul:
  6170                           	opt stack 27
  6171                           
  6172                           ;incstack = 0
  6173  0024C6  5015               	movf	___wmul@multiplier,w,c
  6174  0024C8  0217               	mulwf	___wmul@multiplicand,c
  6175  0024CA  CFF3 F019          	movff	prodl,___wmul@product
  6176  0024CE  CFF4 F01A          	movff	prodh,___wmul@product+1
  6177  0024D2  5015               	movf	___wmul@multiplier,w,c
  6178  0024D4  0218               	mulwf	___wmul@multiplicand+1,c
  6179  0024D6  50F3               	movf	prodl,w,c
  6180  0024D8  261A               	addwf	___wmul@product+1,f,c
  6181  0024DA  5016               	movf	___wmul@multiplier+1,w,c
  6182  0024DC  0217               	mulwf	___wmul@multiplicand,c
  6183  0024DE  50F3               	movf	prodl,w,c
  6184  0024E0  261A               	addwf	___wmul@product+1,f,c
  6185  0024E2  C019  F015         	movff	___wmul@product,?___wmul
  6186  0024E6  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  6187  0024EA  0012               	return	
  6188  0024EC                     __end_of___wmul:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           intcon	equ	0xFF2
  6197                           intcon2	equ	0xFF1
  6198                           postinc0	equ	0xFEE
  6199                           wreg	equ	0xFE8
  6200                           indf2	equ	0xFDF
  6201                           postinc2	equ	0xFDE
  6202                           postdec2	equ	0xFDD
  6203                           fsr2h	equ	0xFDA
  6204                           fsr2l	equ	0xFD9
  6205                           status	equ	0xFD8
  6206                           
  6207 ;; *************** function ___lwmod *****************
  6208 ;; Defined at:
  6209 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  dividend        2   27[COMRAM] unsigned int 
  6212 ;;  divisor         2   29[COMRAM] unsigned int 
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;  counter         1   31[COMRAM] unsigned char 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  2   27[COMRAM] unsigned int 
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6224 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;Total ram usage:        5 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    2
  6231 ;; This function calls:
  6232 ;;		Nothing
  6233 ;; This function is called by:
  6234 ;;		_printf
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text18
  6239  0023D8                     __ptext18:
  6240                           	opt stack 0
  6241  0023D8                     ___lwmod:
  6242                           	opt stack 27
  6243                           
  6244                           ;incstack = 0
  6245  0023D8  501E               	movf	___lwmod@divisor,w,c
  6246  0023DA  101F               	iorwf	___lwmod@divisor+1,w,c
  6247  0023DC  B4D8               	btfsc	status,2,c
  6248  0023DE  D018               	goto	l1209
  6249  0023E0  0E01               	movlw	1
  6250  0023E2  6E20               	movwf	___lwmod@counter,c
  6251  0023E4  D004               	goto	l4954
  6252  0023E6                     l4952:
  6253  0023E6  90D8               	bcf	status,0,c
  6254  0023E8  361E               	rlcf	___lwmod@divisor,f,c
  6255  0023EA  361F               	rlcf	___lwmod@divisor+1,f,c
  6256  0023EC  2A20               	incf	___lwmod@counter,f,c
  6257  0023EE                     l4954:
  6258  0023EE  AE1F               	btfss	___lwmod@divisor+1,7,c
  6259  0023F0  D7FA               	goto	l4952
  6260  0023F2                     l4956:
  6261  0023F2  501E               	movf	___lwmod@divisor,w,c
  6262  0023F4  5C1C               	subwf	___lwmod@dividend,w,c
  6263  0023F6  501F               	movf	___lwmod@divisor+1,w,c
  6264  0023F8  581D               	subwfb	___lwmod@dividend+1,w,c
  6265  0023FA  A0D8               	btfss	status,0,c
  6266  0023FC  D004               	goto	l4960
  6267  0023FE  501E               	movf	___lwmod@divisor,w,c
  6268  002400  5E1C               	subwf	___lwmod@dividend,f,c
  6269  002402  501F               	movf	___lwmod@divisor+1,w,c
  6270  002404  5A1D               	subwfb	___lwmod@dividend+1,f,c
  6271  002406                     l4960:
  6272  002406  90D8               	bcf	status,0,c
  6273  002408  321F               	rrcf	___lwmod@divisor+1,f,c
  6274  00240A  321E               	rrcf	___lwmod@divisor,f,c
  6275  00240C  2E20               	decfsz	___lwmod@counter,f,c
  6276  00240E  D7F1               	goto	l4956
  6277  002410                     l1209:
  6278  002410  C01C  F01C         	movff	___lwmod@dividend,?___lwmod
  6279  002414  C01D  F01D         	movff	___lwmod@dividend+1,?___lwmod+1
  6280  002418  0012               	return		;funcret
  6281  00241A                     __end_of___lwmod:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           intcon2	equ	0xFF1
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           indf2	equ	0xFDF
  6294                           postinc2	equ	0xFDE
  6295                           postdec2	equ	0xFDD
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           
  6300 ;; *************** function ___lwdiv *****************
  6301 ;; Defined at:
  6302 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  dividend        2   20[COMRAM] unsigned int 
  6305 ;;  divisor         2   22[COMRAM] unsigned int 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  quotient        2   25[COMRAM] unsigned int 
  6308 ;;  counter         1   24[COMRAM] unsigned char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  2   20[COMRAM] unsigned int 
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6318 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;Total ram usage:        7 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    2
  6325 ;; This function calls:
  6326 ;;		Nothing
  6327 ;; This function is called by:
  6328 ;;		_printf
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           	psect	text19
  6333  0022AC                     __ptext19:
  6334                           	opt stack 0
  6335  0022AC                     ___lwdiv:
  6336                           	opt stack 27
  6337                           
  6338                           ;incstack = 0
  6339  0022AC  0E00               	movlw	0
  6340  0022AE  6E1B               	movwf	___lwdiv@quotient+1,c
  6341  0022B0  0E00               	movlw	0
  6342  0022B2  6E1A               	movwf	___lwdiv@quotient,c
  6343  0022B4  5017               	movf	___lwdiv@divisor,w,c
  6344  0022B6  1018               	iorwf	___lwdiv@divisor+1,w,c
  6345  0022B8  B4D8               	btfsc	status,2,c
  6346  0022BA  D01C               	goto	l1199
  6347  0022BC  0E01               	movlw	1
  6348  0022BE  6E19               	movwf	___lwdiv@counter,c
  6349  0022C0  D004               	goto	l4934
  6350  0022C2                     l4932:
  6351  0022C2  90D8               	bcf	status,0,c
  6352  0022C4  3617               	rlcf	___lwdiv@divisor,f,c
  6353  0022C6  3618               	rlcf	___lwdiv@divisor+1,f,c
  6354  0022C8  2A19               	incf	___lwdiv@counter,f,c
  6355  0022CA                     l4934:
  6356  0022CA  AE18               	btfss	___lwdiv@divisor+1,7,c
  6357  0022CC  D7FA               	goto	l4932
  6358  0022CE                     l4936:
  6359  0022CE  90D8               	bcf	status,0,c
  6360  0022D0  361A               	rlcf	___lwdiv@quotient,f,c
  6361  0022D2  361B               	rlcf	___lwdiv@quotient+1,f,c
  6362  0022D4  5017               	movf	___lwdiv@divisor,w,c
  6363  0022D6  5C15               	subwf	___lwdiv@dividend,w,c
  6364  0022D8  5018               	movf	___lwdiv@divisor+1,w,c
  6365  0022DA  5816               	subwfb	___lwdiv@dividend+1,w,c
  6366  0022DC  A0D8               	btfss	status,0,c
  6367  0022DE  D005               	goto	l4944
  6368  0022E0  5017               	movf	___lwdiv@divisor,w,c
  6369  0022E2  5E15               	subwf	___lwdiv@dividend,f,c
  6370  0022E4  5018               	movf	___lwdiv@divisor+1,w,c
  6371  0022E6  5A16               	subwfb	___lwdiv@dividend+1,f,c
  6372  0022E8  801A               	bsf	___lwdiv@quotient,0,c
  6373  0022EA                     l4944:
  6374  0022EA  90D8               	bcf	status,0,c
  6375  0022EC  3218               	rrcf	___lwdiv@divisor+1,f,c
  6376  0022EE  3217               	rrcf	___lwdiv@divisor,f,c
  6377  0022F0  2E19               	decfsz	___lwdiv@counter,f,c
  6378  0022F2  D7ED               	goto	l4936
  6379  0022F4                     l1199:
  6380  0022F4  C01A  F015         	movff	___lwdiv@quotient,?___lwdiv
  6381  0022F8  C01B  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6382  0022FC  0012               	return		;funcret
  6383  0022FE                     __end_of___lwdiv:
  6384                           	opt stack 0
  6385                           tblptru	equ	0xFF8
  6386                           tblptrh	equ	0xFF7
  6387                           tblptrl	equ	0xFF6
  6388                           tablat	equ	0xFF5
  6389                           prodh	equ	0xFF4
  6390                           prodl	equ	0xFF3
  6391                           intcon	equ	0xFF2
  6392                           intcon2	equ	0xFF1
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           indf2	equ	0xFDF
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           fsr2h	equ	0xFDA
  6399                           fsr2l	equ	0xFD9
  6400                           status	equ	0xFD8
  6401                           
  6402 ;; *************** function _lcdInst *****************
  6403 ;; Defined at:
  6404 ;;		line 22 in file "lcd.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  data            1    wreg     unsigned char 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  data            1   22[COMRAM] unsigned char 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      void 
  6411 ;; Registers used:
  6412 ;;		wreg, status,2, status,0, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;Total ram usage:        1 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    3
  6425 ;; This function calls:
  6426 ;;		_lcdNibble
  6427 ;; This function is called by:
  6428 ;;		_main
  6429 ;;		_initLCD
  6430 ;;		_homescreen
  6431 ;;		_displayLog
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           	psect	text20
  6436  002594                     __ptext20:
  6437                           	opt stack 0
  6438  002594                     _lcdInst:
  6439                           	opt stack 27
  6440                           
  6441                           ;incstack = 0
  6442                           ;lcdInst@data stored from wreg
  6443  002594  6E17               	movwf	lcdInst@data,c
  6444                           
  6445                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6446  002596  948C               	bcf	3980,2,c	;volatile
  6447                           
  6448                           ;lcd.c: 24: lcdNibble(data);
  6449  002598  5017               	movf	lcdInst@data,w,c
  6450  00259A  EC2B  F011         	call	_lcdNibble
  6451  00259E  0012               	return		;funcret
  6452  0025A0                     __end_of_lcdInst:
  6453                           	opt stack 0
  6454                           tblptru	equ	0xFF8
  6455                           tblptrh	equ	0xFF7
  6456                           tblptrl	equ	0xFF6
  6457                           tablat	equ	0xFF5
  6458                           prodh	equ	0xFF4
  6459                           prodl	equ	0xFF3
  6460                           intcon	equ	0xFF2
  6461                           intcon2	equ	0xFF1
  6462                           postinc0	equ	0xFEE
  6463                           wreg	equ	0xFE8
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471 ;; *************** function _lcdNibble *****************
  6472 ;; Defined at:
  6473 ;;		line 32 in file "lcd.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  data            1    wreg     unsigned char 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  data            1   21[COMRAM] unsigned char 
  6478 ;;  temp            1   20[COMRAM] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;Total ram usage:        2 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    2
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_lcdInst
  6499 ;;		_putch
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           	psect	text21
  6504  002256                     __ptext21:
  6505                           	opt stack 0
  6506  002256                     _lcdNibble:
  6507                           	opt stack 26
  6508                           
  6509                           ;incstack = 0
  6510                           ;lcdNibble@data stored from wreg
  6511  002256  6E16               	movwf	lcdNibble@data,c
  6512                           
  6513                           ;lcd.c: 34: char temp = data & 0xF0;
  6514  002258  5016               	movf	lcdNibble@data,w,c
  6515  00225A  0BF0               	andlw	240
  6516  00225C  6E15               	movwf	lcdNibble@temp,c
  6517                           
  6518                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6519  00225E  508C               	movf	3980,w,c	;volatile
  6520  002260  0B0F               	andlw	15
  6521  002262  6E8C               	movwf	3980,c	;volatile
  6522                           
  6523                           ;lcd.c: 36: LATD = temp | LATD;
  6524  002264  5015               	movf	lcdNibble@temp,w,c
  6525  002266  108C               	iorwf	3980,w,c	;volatile
  6526  002268  6E8C               	movwf	3980,c	;volatile
  6527                           
  6528                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6529  00226A  968C               	bcf	3980,3,c	;volatile
  6530                           
  6531                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6532  00226C  0E42               	movlw	66
  6533  00226E                     u7727:
  6534  00226E  2EE8               	decfsz	wreg,f,c
  6535  002270  D7FE               	bra	u7727
  6536  002272  D000               	nop2	
  6537                           
  6538                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6539  002274  868C               	bsf	3980,3,c	;volatile
  6540                           
  6541                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6542  002276  0E42               	movlw	66
  6543  002278                     u7737:
  6544  002278  2EE8               	decfsz	wreg,f,c
  6545  00227A  D7FE               	bra	u7737
  6546  00227C  D000               	nop2	
  6547                           
  6548                           ;lcd.c: 43: data = data << 4;
  6549  00227E  3816               	swapf	lcdNibble@data,w,c
  6550  002280  0BF0               	andlw	240
  6551  002282  6E16               	movwf	lcdNibble@data,c
  6552                           
  6553                           ;lcd.c: 45: temp = data & 0xF0;
  6554  002284  5016               	movf	lcdNibble@data,w,c
  6555  002286  0BF0               	andlw	240
  6556  002288  6E15               	movwf	lcdNibble@temp,c
  6557                           
  6558                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6559  00228A  508C               	movf	3980,w,c	;volatile
  6560  00228C  0B0F               	andlw	15
  6561  00228E  6E8C               	movwf	3980,c	;volatile
  6562                           
  6563                           ;lcd.c: 47: LATD = temp | LATD;
  6564  002290  5015               	movf	lcdNibble@temp,w,c
  6565  002292  108C               	iorwf	3980,w,c	;volatile
  6566  002294  6E8C               	movwf	3980,c	;volatile
  6567                           
  6568                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6569  002296  968C               	bcf	3980,3,c	;volatile
  6570                           
  6571                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6572  002298  0E42               	movlw	66
  6573  00229A                     u7747:
  6574  00229A  2EE8               	decfsz	wreg,f,c
  6575  00229C  D7FE               	bra	u7747
  6576  00229E  D000               	nop2	
  6577                           
  6578                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6579  0022A0  868C               	bsf	3980,3,c	;volatile
  6580                           
  6581                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6582  0022A2  0E42               	movlw	66
  6583  0022A4                     u7757:
  6584  0022A4  2EE8               	decfsz	wreg,f,c
  6585  0022A6  D7FE               	bra	u7757
  6586  0022A8  D000               	nop2	
  6587  0022AA  0012               	return		;funcret
  6588  0022AC                     __end_of_lcdNibble:
  6589                           	opt stack 0
  6590                           tblptru	equ	0xFF8
  6591                           tblptrh	equ	0xFF7
  6592                           tblptrl	equ	0xFF6
  6593                           tablat	equ	0xFF5
  6594                           prodh	equ	0xFF4
  6595                           prodl	equ	0xFF3
  6596                           intcon	equ	0xFF2
  6597                           intcon2	equ	0xFF1
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           indf2	equ	0xFDF
  6601                           postinc2	equ	0xFDE
  6602                           postdec2	equ	0xFDD
  6603                           fsr2h	equ	0xFDA
  6604                           fsr2l	equ	0xFD9
  6605                           status	equ	0xFD8
  6606                           
  6607 ;; *************** function _keycheck *****************
  6608 ;; Defined at:
  6609 ;;		line 12 in file "interface.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;		None
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;		None
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;Total ram usage:        0 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    2
  6630 ;; This function calls:
  6631 ;;		Nothing
  6632 ;; This function is called by:
  6633 ;;		_main
  6634 ;;		_displayLog
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text22
  6639  002542                     __ptext22:
  6640                           	opt stack 0
  6641  002542                     _keycheck:
  6642                           	opt stack 28
  6643  002542                     l612:
  6644  002542  A281               	btfss	3969,1,c	;volatile
  6645  002544  D7FE               	goto	l612
  6646                           
  6647                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  6648  002546  3881               	swapf	3969,w,c	;volatile
  6649  002548  0B0F               	andlw	15
  6650  00254A  0B0F               	andlw	15
  6651  00254C  6E60               	movwf	_keypress,c	;volatile
  6652  00254E                     l615:
  6653  00254E  B281               	btfsc	3969,1,c	;volatile
  6654  002550  D7FE               	goto	l615
  6655                           
  6656                           ;interface.c: 16: __nop();
  6657  002552  F000               	nop	
  6658                           
  6659                           ;interface.c: 17: return;
  6660  002554  0012               	return		;funcret
  6661  002556                     __end_of_keycheck:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           intcon2	equ	0xFF1
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _calibrateWheels *****************
  6681 ;; Defined at:
  6682 ;;		line 31 in file "logic.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;		None
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  i               2   25[COMRAM] int 
  6687 ;;  prev            2   23[COMRAM] int 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;Total ram usage:        4 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    3
  6704 ;; This function calls:
  6705 ;;		_readADC
  6706 ;;		_startTMR1
  6707 ;;		_updateS1
  6708 ;;		_updateS3
  6709 ;; This function is called by:
  6710 ;;		_main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text23
  6715  00192A                     __ptext23:
  6716                           	opt stack 0
  6717  00192A                     _calibrateWheels:
  6718                           	opt stack 27
  6719                           
  6720                           ;logic.c: 32: TMR1ON = 0;
  6721                           
  6722                           ;incstack = 0
  6723  00192A  90CD               	bcf	4045,0,c	;volatile
  6724                           
  6725                           ;logic.c: 33: int i = 1;
  6726  00192C  0E00               	movlw	0
  6727  00192E  6E1B               	movwf	calibrateWheels@i+1,c
  6728  001930  0E01               	movlw	1
  6729  001932  6E1A               	movwf	calibrateWheels@i,c
  6730  001934                     l5410:
  6731                           
  6732                           ;logic.c: 36: if (i < 20){updateS1(1);}
  6733  001934  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6734  001936  D006               	goto	l5412
  6735  001938  501B               	movf	calibrateWheels@i+1,w,c
  6736  00193A  E10B               	bnz	l5414
  6737  00193C  0E14               	movlw	20
  6738  00193E  5C1A               	subwf	calibrateWheels@i,w,c
  6739  001940  B0D8               	btfsc	status,0,c
  6740  001942  D007               	goto	l5414
  6741  001944                     l5412:
  6742  001944  0E00               	movlw	0
  6743  001946  6E16               	movwf	updateS1@mode+1,c
  6744  001948  0E01               	movlw	1
  6745  00194A  6E15               	movwf	updateS1@mode,c
  6746  00194C  ECE9  F009         	call	_updateS1	;wreg free
  6747  001950  D031               	goto	l5428
  6748  001952                     l5414:
  6749                           
  6750                           ;logic.c: 37: else if(i<(20+40)){updateS1(2);}
  6751  001952  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6752  001954  D006               	goto	l5416
  6753  001956  501B               	movf	calibrateWheels@i+1,w,c
  6754  001958  E10B               	bnz	l5418
  6755  00195A  0E3C               	movlw	60
  6756  00195C  5C1A               	subwf	calibrateWheels@i,w,c
  6757  00195E  B0D8               	btfsc	status,0,c
  6758  001960  D007               	goto	l5418
  6759  001962                     l5416:
  6760  001962  0E00               	movlw	0
  6761  001964  6E16               	movwf	updateS1@mode+1,c
  6762  001966  0E02               	movlw	2
  6763  001968  6E15               	movwf	updateS1@mode,c
  6764  00196A  ECE9  F009         	call	_updateS1	;wreg free
  6765  00196E  D022               	goto	l5428
  6766  001970                     l5418:
  6767                           
  6768                           ;logic.c: 38: else if(i<(20+40+80)){updateS1(1);}
  6769  001970  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6770  001972  D006               	goto	l5420
  6771  001974  501B               	movf	calibrateWheels@i+1,w,c
  6772  001976  E10B               	bnz	l5422
  6773  001978  0E8C               	movlw	140
  6774  00197A  5C1A               	subwf	calibrateWheels@i,w,c
  6775  00197C  B0D8               	btfsc	status,0,c
  6776  00197E  D007               	goto	l5422
  6777  001980                     l5420:
  6778  001980  0E00               	movlw	0
  6779  001982  6E16               	movwf	updateS1@mode+1,c
  6780  001984  0E01               	movlw	1
  6781  001986  6E15               	movwf	updateS1@mode,c
  6782  001988  ECE9  F009         	call	_updateS1	;wreg free
  6783  00198C  D013               	goto	l5428
  6784  00198E                     l5422:
  6785                           
  6786                           ;logic.c: 39: else if(i<(20+40+80+100)){updateS1(2);}
  6787  00198E  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6788  001990  D006               	goto	l5424
  6789  001992  501B               	movf	calibrateWheels@i+1,w,c
  6790  001994  E10B               	bnz	l5426
  6791  001996  0EF0               	movlw	240
  6792  001998  5C1A               	subwf	calibrateWheels@i,w,c
  6793  00199A  B0D8               	btfsc	status,0,c
  6794  00199C  D007               	goto	l5426
  6795  00199E                     l5424:
  6796  00199E  0E00               	movlw	0
  6797  0019A0  6E16               	movwf	updateS1@mode+1,c
  6798  0019A2  0E02               	movlw	2
  6799  0019A4  6E15               	movwf	updateS1@mode,c
  6800  0019A6  ECE9  F009         	call	_updateS1	;wreg free
  6801  0019AA  D004               	goto	l5428
  6802  0019AC                     l5426:
  6803                           
  6804                           ;logic.c: 40: else{i=1;}
  6805  0019AC  0E00               	movlw	0
  6806  0019AE  6E1B               	movwf	calibrateWheels@i+1,c
  6807  0019B0  0E01               	movlw	1
  6808  0019B2  6E1A               	movwf	calibrateWheels@i,c
  6809  0019B4                     l5428:
  6810                           
  6811                           ;logic.c: 42: i++;
  6812  0019B4  4A1A               	infsnz	calibrateWheels@i,f,c
  6813  0019B6  2A1B               	incf	calibrateWheels@i+1,f,c
  6814                           
  6815                           ;logic.c: 43: if (i==1){prev = 0;}
  6816  0019B8  041A               	decf	calibrateWheels@i,w,c
  6817  0019BA  101B               	iorwf	calibrateWheels@i+1,w,c
  6818  0019BC  A4D8               	btfss	status,2,c
  6819  0019BE  D005               	goto	l707
  6820  0019C0  0E00               	movlw	0
  6821  0019C2  6E19               	movwf	calibrateWheels@prev+1,c
  6822  0019C4  0E00               	movlw	0
  6823  0019C6  6E18               	movwf	calibrateWheels@prev,c
  6824  0019C8  D004               	goto	l5434
  6825  0019CA                     l707:
  6826                           
  6827                           ;logic.c: 44: else{prev = ADRES;}
  6828  0019CA  CFC3 F018          	movff	4035,calibrateWheels@prev	;volatile
  6829  0019CE  CFC4 F019          	movff	4036,calibrateWheels@prev+1	;volatile
  6830  0019D2                     l5434:
  6831                           
  6832                           ;logic.c: 45: readADC(1);
  6833  0019D2  0E01               	movlw	1
  6834  0019D4  EC76  F012         	call	_readADC
  6835                           
  6836                           ;logic.c: 46: }while(ADRES>prev || ADRES<0x3aa);
  6837  0019D8  50C3               	movf	4035,w,c	;volatile
  6838  0019DA  5C18               	subwf	calibrateWheels@prev,w,c
  6839  0019DC  50C4               	movf	4036,w,c	;volatile
  6840  0019DE  5819               	subwfb	calibrateWheels@prev+1,w,c
  6841  0019E0  A0D8               	btfss	status,0,c
  6842  0019E2  D7A8               	goto	l5410
  6843  0019E4  0EAA               	movlw	170
  6844  0019E6  5CC3               	subwf	4035,w,c	;volatile
  6845  0019E8  0E03               	movlw	3
  6846  0019EA  58C4               	subwfb	4036,w,c	;volatile
  6847  0019EC  A0D8               	btfss	status,0,c
  6848  0019EE  D7A2               	goto	l5410
  6849  0019F0                     l5440:
  6850                           
  6851                           ;logic.c: 49: if (i < 20){updateS3(1);}
  6852  0019F0  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6853  0019F2  D006               	goto	l5442
  6854  0019F4  501B               	movf	calibrateWheels@i+1,w,c
  6855  0019F6  E10B               	bnz	l5444
  6856  0019F8  0E14               	movlw	20
  6857  0019FA  5C1A               	subwf	calibrateWheels@i,w,c
  6858  0019FC  B0D8               	btfsc	status,0,c
  6859  0019FE  D007               	goto	l5444
  6860  001A00                     l5442:
  6861  001A00  0E00               	movlw	0
  6862  001A02  6E16               	movwf	updateS3@mode+1,c
  6863  001A04  0E01               	movlw	1
  6864  001A06  6E15               	movwf	updateS3@mode,c
  6865  001A08  EC59  F00D         	call	_updateS3	;wreg free
  6866  001A0C  D031               	goto	l5458
  6867  001A0E                     l5444:
  6868                           
  6869                           ;logic.c: 50: else if(i<(20+40)){updateS3(2);}
  6870  001A0E  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6871  001A10  D006               	goto	l5446
  6872  001A12  501B               	movf	calibrateWheels@i+1,w,c
  6873  001A14  E10B               	bnz	l5448
  6874  001A16  0E3C               	movlw	60
  6875  001A18  5C1A               	subwf	calibrateWheels@i,w,c
  6876  001A1A  B0D8               	btfsc	status,0,c
  6877  001A1C  D007               	goto	l5448
  6878  001A1E                     l5446:
  6879  001A1E  0E00               	movlw	0
  6880  001A20  6E16               	movwf	updateS3@mode+1,c
  6881  001A22  0E02               	movlw	2
  6882  001A24  6E15               	movwf	updateS3@mode,c
  6883  001A26  EC59  F00D         	call	_updateS3	;wreg free
  6884  001A2A  D022               	goto	l5458
  6885  001A2C                     l5448:
  6886                           
  6887                           ;logic.c: 51: else if(i<(20+40+80)){updateS3(1);}
  6888  001A2C  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6889  001A2E  D006               	goto	l5450
  6890  001A30  501B               	movf	calibrateWheels@i+1,w,c
  6891  001A32  E10B               	bnz	l5452
  6892  001A34  0E8C               	movlw	140
  6893  001A36  5C1A               	subwf	calibrateWheels@i,w,c
  6894  001A38  B0D8               	btfsc	status,0,c
  6895  001A3A  D007               	goto	l5452
  6896  001A3C                     l5450:
  6897  001A3C  0E00               	movlw	0
  6898  001A3E  6E16               	movwf	updateS3@mode+1,c
  6899  001A40  0E01               	movlw	1
  6900  001A42  6E15               	movwf	updateS3@mode,c
  6901  001A44  EC59  F00D         	call	_updateS3	;wreg free
  6902  001A48  D013               	goto	l5458
  6903  001A4A                     l5452:
  6904                           
  6905                           ;logic.c: 52: else if(i<(20+40+80+100)){updateS3(2);}
  6906  001A4A  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6907  001A4C  D006               	goto	l5454
  6908  001A4E  501B               	movf	calibrateWheels@i+1,w,c
  6909  001A50  E10B               	bnz	l5456
  6910  001A52  0EF0               	movlw	240
  6911  001A54  5C1A               	subwf	calibrateWheels@i,w,c
  6912  001A56  B0D8               	btfsc	status,0,c
  6913  001A58  D007               	goto	l5456
  6914  001A5A                     l5454:
  6915  001A5A  0E00               	movlw	0
  6916  001A5C  6E16               	movwf	updateS3@mode+1,c
  6917  001A5E  0E02               	movlw	2
  6918  001A60  6E15               	movwf	updateS3@mode,c
  6919  001A62  EC59  F00D         	call	_updateS3	;wreg free
  6920  001A66  D004               	goto	l5458
  6921  001A68                     l5456:
  6922                           
  6923                           ;logic.c: 53: else{i=1;}
  6924  001A68  0E00               	movlw	0
  6925  001A6A  6E1B               	movwf	calibrateWheels@i+1,c
  6926  001A6C  0E01               	movlw	1
  6927  001A6E  6E1A               	movwf	calibrateWheels@i,c
  6928  001A70                     l5458:
  6929                           
  6930                           ;logic.c: 55: i++;
  6931  001A70  4A1A               	infsnz	calibrateWheels@i,f,c
  6932  001A72  2A1B               	incf	calibrateWheels@i+1,f,c
  6933                           
  6934                           ;logic.c: 56: if (i==1){prev = 0;}
  6935  001A74  041A               	decf	calibrateWheels@i,w,c
  6936  001A76  101B               	iorwf	calibrateWheels@i+1,w,c
  6937  001A78  A4D8               	btfss	status,2,c
  6938  001A7A  D005               	goto	l719
  6939  001A7C  0E00               	movlw	0
  6940  001A7E  6E19               	movwf	calibrateWheels@prev+1,c
  6941  001A80  0E00               	movlw	0
  6942  001A82  6E18               	movwf	calibrateWheels@prev,c
  6943  001A84  D004               	goto	l5464
  6944  001A86                     l719:
  6945                           
  6946                           ;logic.c: 57: else{prev = ADRES;}
  6947  001A86  CFC3 F018          	movff	4035,calibrateWheels@prev	;volatile
  6948  001A8A  CFC4 F019          	movff	4036,calibrateWheels@prev+1	;volatile
  6949  001A8E                     l5464:
  6950                           
  6951                           ;logic.c: 58: readADC(5);
  6952  001A8E  0E05               	movlw	5
  6953  001A90  EC76  F012         	call	_readADC
  6954                           
  6955                           ;logic.c: 59: }while(ADRES>prev || ADRES<0x3aa);
  6956  001A94  50C3               	movf	4035,w,c	;volatile
  6957  001A96  5C18               	subwf	calibrateWheels@prev,w,c
  6958  001A98  50C4               	movf	4036,w,c	;volatile
  6959  001A9A  5819               	subwfb	calibrateWheels@prev+1,w,c
  6960  001A9C  A0D8               	btfss	status,0,c
  6961  001A9E  D7A8               	goto	l5440
  6962  001AA0  0EAA               	movlw	170
  6963  001AA2  5CC3               	subwf	4035,w,c	;volatile
  6964  001AA4  0E03               	movlw	3
  6965  001AA6  58C4               	subwfb	4036,w,c	;volatile
  6966  001AA8  A0D8               	btfss	status,0,c
  6967  001AAA  D7A2               	goto	l5440
  6968                           
  6969                           ;logic.c: 60: startTMR1();
  6970  001AAC  ECB4  F012         	call	_startTMR1	;wreg free
  6971  001AB0  0012               	return		;funcret
  6972  001AB2                     __end_of_calibrateWheels:
  6973                           	opt stack 0
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon	equ	0xFF2
  6981                           intcon2	equ	0xFF1
  6982                           postinc0	equ	0xFEE
  6983                           wreg	equ	0xFE8
  6984                           indf2	equ	0xFDF
  6985                           postinc2	equ	0xFDE
  6986                           postdec2	equ	0xFDD
  6987                           fsr2h	equ	0xFDA
  6988                           fsr2l	equ	0xFD9
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function _updateS3 *****************
  6992 ;; Defined at:
  6993 ;;		line 157 in file "motors.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  mode            2   20[COMRAM] int 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, status,2, status,0
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;Total ram usage:        3 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    2
  7014 ;; This function calls:
  7015 ;;		Nothing
  7016 ;; This function is called by:
  7017 ;;		_main
  7018 ;;		_calibrateWheels
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text24
  7023  001AB2                     __ptext24:
  7024                           	opt stack 0
  7025  001AB2                     _updateS3:
  7026                           	opt stack 28
  7027                           
  7028                           ;motors.c: 158: _delay((unsigned long)((5)*(32000000/4000.0)));
  7029                           
  7030                           ;incstack = 0
  7031  001AB2  0E34               	movlw	52
  7032  001AB4  6E17               	movwf	??_updateS3& (0+255),c
  7033  001AB6  0EF2               	movlw	242
  7034  001AB8                     u7767:
  7035  001AB8  2EE8               	decfsz	wreg,f,c
  7036  001ABA  D7FE               	bra	u7767
  7037  001ABC  2E17               	decfsz	??_updateS3& (0+255),f,c
  7038  001ABE  D7FC               	bra	u7767
  7039                           
  7040                           ;motors.c: 160: if(mode == 0){
  7041  001AC0  5015               	movf	updateS3@mode,w,c
  7042  001AC2  1016               	iorwf	updateS3@mode+1,w,c
  7043  001AC4  A4D8               	btfss	status,2,c
  7044  001AC6  D005               	goto	l5064
  7045                           
  7046                           ;motors.c: 161: LATEbits.LATE2 = 0;
  7047  001AC8  948D               	bcf	3981,2,c	;volatile
  7048                           
  7049                           ;motors.c: 162: LATEbits.LATE1 = 0;
  7050  001ACA  928D               	bcf	3981,1,c	;volatile
  7051                           
  7052                           ;motors.c: 163: LATAbits.LATA4 = 0;
  7053  001ACC  9889               	bcf	3977,4,c	;volatile
  7054                           
  7055                           ;motors.c: 164: LATDbits.LATD0 = 0;
  7056  001ACE  908C               	bcf	3980,0,c	;volatile
  7057                           
  7058                           ;motors.c: 165: }
  7059  001AD0  0012               	return	
  7060  001AD2                     l5064:
  7061                           
  7062                           ;motors.c: 166: else if(mode == 4){
  7063  001AD2  0E04               	movlw	4
  7064  001AD4  1815               	xorwf	updateS3@mode,w,c
  7065  001AD6  1016               	iorwf	updateS3@mode+1,w,c
  7066  001AD8  A4D8               	btfss	status,2,c
  7067  001ADA  D005               	goto	l5068
  7068                           
  7069                           ;motors.c: 167: LATEbits.LATE2 = 1;
  7070  001ADC  848D               	bsf	3981,2,c	;volatile
  7071                           
  7072                           ;motors.c: 168: LATEbits.LATE1 = 0;
  7073  001ADE  928D               	bcf	3981,1,c	;volatile
  7074                           
  7075                           ;motors.c: 169: LATAbits.LATA4 = 0;
  7076  001AE0  9889               	bcf	3977,4,c	;volatile
  7077                           
  7078                           ;motors.c: 170: LATDbits.LATD0 = 0;
  7079  001AE2  908C               	bcf	3980,0,c	;volatile
  7080                           
  7081                           ;motors.c: 171: }
  7082  001AE4  0012               	return	
  7083  001AE6                     l5068:
  7084                           
  7085                           ;motors.c: 172: else if(mode == 3){
  7086  001AE6  0E03               	movlw	3
  7087  001AE8  1815               	xorwf	updateS3@mode,w,c
  7088  001AEA  1016               	iorwf	updateS3@mode+1,w,c
  7089  001AEC  A4D8               	btfss	status,2,c
  7090  001AEE  D042               	goto	l5092
  7091                           
  7092                           ;motors.c: 173: t3++;
  7093  001AF0  4A42               	infsnz	_t3,f,c
  7094  001AF2  2A43               	incf	_t3+1,f,c
  7095                           
  7096                           ;motors.c: 174: if (t3>8) {t3=1;}
  7097  001AF4  BE43               	btfsc	_t3+1,7,c
  7098  001AF6  D00A               	goto	l5076
  7099  001AF8  5043               	movf	_t3+1,w,c
  7100  001AFA  E104               	bnz	u5990
  7101  001AFC  0E09               	movlw	9
  7102  001AFE  5C42               	subwf	_t3,w,c
  7103  001B00  A0D8               	btfss	status,0,c
  7104  001B02  D004               	goto	l5076
  7105  001B04                     u5990:
  7106  001B04  0E00               	movlw	0
  7107  001B06  6E43               	movwf	_t3+1,c
  7108  001B08  0E01               	movlw	1
  7109  001B0A  6E42               	movwf	_t3,c
  7110  001B0C                     l5076:
  7111                           
  7112                           ;motors.c: 175: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  7113  001B0C  0442               	decf	_t3,w,c
  7114  001B0E  1043               	iorwf	_t3+1,w,c
  7115  001B10  B4D8               	btfsc	status,2,c
  7116  001B12  D005               	goto	l550
  7117  001B14  0E08               	movlw	8
  7118  001B16  1842               	xorwf	_t3,w,c
  7119  001B18  1043               	iorwf	_t3+1,w,c
  7120  001B1A  A4D8               	btfss	status,2,c
  7121  001B1C  D002               	goto	l548
  7122  001B1E                     l550:
  7123  001B1E  848D               	bsf	3981,2,c	;volatile
  7124  001B20  D001               	goto	l5080
  7125  001B22                     l548:
  7126                           
  7127                           ;motors.c: 176: else{LATEbits.LATE2 = 0;}
  7128  001B22  948D               	bcf	3981,2,c	;volatile
  7129  001B24                     l5080:
  7130                           
  7131                           ;motors.c: 177: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  7132  001B24  0E02               	movlw	2
  7133  001B26  1842               	xorwf	_t3,w,c
  7134  001B28  1043               	iorwf	_t3+1,w,c
  7135  001B2A  B4D8               	btfsc	status,2,c
  7136  001B2C  D005               	goto	l554
  7137  001B2E  0E07               	movlw	7
  7138  001B30  1842               	xorwf	_t3,w,c
  7139  001B32  1043               	iorwf	_t3+1,w,c
  7140  001B34  A4D8               	btfss	status,2,c
  7141  001B36  D002               	goto	l552
  7142  001B38                     l554:
  7143  001B38  828D               	bsf	3981,1,c	;volatile
  7144  001B3A  D001               	goto	l5084
  7145  001B3C                     l552:
  7146                           
  7147                           ;motors.c: 178: else{LATEbits.LATE1 = 0;}
  7148  001B3C  928D               	bcf	3981,1,c	;volatile
  7149  001B3E                     l5084:
  7150                           
  7151                           ;motors.c: 179: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  7152  001B3E  0E03               	movlw	3
  7153  001B40  1842               	xorwf	_t3,w,c
  7154  001B42  1043               	iorwf	_t3+1,w,c
  7155  001B44  B4D8               	btfsc	status,2,c
  7156  001B46  D005               	goto	l558
  7157  001B48  0E06               	movlw	6
  7158  001B4A  1842               	xorwf	_t3,w,c
  7159  001B4C  1043               	iorwf	_t3+1,w,c
  7160  001B4E  A4D8               	btfss	status,2,c
  7161  001B50  D002               	goto	l556
  7162  001B52                     l558:
  7163  001B52  8889               	bsf	3977,4,c	;volatile
  7164  001B54  D001               	goto	l5088
  7165  001B56                     l556:
  7166                           
  7167                           ;motors.c: 180: else{LATAbits.LATA4 = 0;}
  7168  001B56  9889               	bcf	3977,4,c	;volatile
  7169  001B58                     l5088:
  7170                           
  7171                           ;motors.c: 181: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  7172  001B58  0E04               	movlw	4
  7173  001B5A  1842               	xorwf	_t3,w,c
  7174  001B5C  1043               	iorwf	_t3+1,w,c
  7175  001B5E  B4D8               	btfsc	status,2,c
  7176  001B60  D005               	goto	l562
  7177  001B62  0E05               	movlw	5
  7178  001B64  1842               	xorwf	_t3,w,c
  7179  001B66  1043               	iorwf	_t3+1,w,c
  7180  001B68  A4D8               	btfss	status,2,c
  7181  001B6A  D002               	goto	l560
  7182  001B6C                     l562:
  7183  001B6C  808C               	bsf	3980,0,c	;volatile
  7184  001B6E  0012               	return	
  7185  001B70                     l560:
  7186                           
  7187                           ;motors.c: 182: else{LATDbits.LATD0 = 0;}
  7188  001B70  908C               	bcf	3980,0,c	;volatile
  7189                           
  7190                           ;motors.c: 183: }
  7191  001B72  0012               	return	
  7192  001B74                     l5092:
  7193                           
  7194                           ;motors.c: 184: else{
  7195                           ;motors.c: 185: if(mode == 1){
  7196  001B74  0415               	decf	updateS3@mode,w,c
  7197  001B76  1016               	iorwf	updateS3@mode+1,w,c
  7198  001B78  A4D8               	btfss	status,2,c
  7199  001B7A  D00E               	goto	l5100
  7200                           
  7201                           ;motors.c: 186: s3 ++;
  7202  001B7C  4A48               	infsnz	_s3,f,c
  7203  001B7E  2A49               	incf	_s3+1,f,c
  7204                           
  7205                           ;motors.c: 187: if (s3>4) {s3=1;}
  7206  001B80  BE49               	btfsc	_s3+1,7,c
  7207  001B82  D01D               	goto	l5108
  7208  001B84  5049               	movf	_s3+1,w,c
  7209  001B86  E104               	bnz	u6090
  7210  001B88  0E05               	movlw	5
  7211  001B8A  5C48               	subwf	_s3,w,c
  7212  001B8C  A0D8               	btfss	status,0,c
  7213  001B8E  D017               	goto	l5108
  7214  001B90                     u6090:
  7215  001B90  0E00               	movlw	0
  7216  001B92  6E49               	movwf	_s3+1,c
  7217  001B94  0E01               	movlw	1
  7218  001B96  D012               	goto	L10
  7219  001B98                     l5100:
  7220                           
  7221                           ;motors.c: 189: else if(mode == 2){
  7222  001B98  0E02               	movlw	2
  7223  001B9A  1815               	xorwf	updateS3@mode,w,c
  7224  001B9C  1016               	iorwf	updateS3@mode+1,w,c
  7225  001B9E  A4D8               	btfss	status,2,c
  7226  001BA0  D00E               	goto	l5108
  7227                           
  7228                           ;motors.c: 190: s3 --;
  7229  001BA2  0648               	decf	_s3,f,c
  7230  001BA4  A0D8               	btfss	status,0,c
  7231  001BA6  0649               	decf	_s3+1,f,c
  7232                           
  7233                           ;motors.c: 191: if (s3<1) {s3=4;}
  7234  001BA8  BE49               	btfsc	_s3+1,7,c
  7235  001BAA  D005               	goto	l5106
  7236  001BAC  5049               	movf	_s3+1,w,c
  7237  001BAE  E107               	bnz	l5108
  7238  001BB0  0448               	decf	_s3,w,c
  7239  001BB2  B0D8               	btfsc	status,0,c
  7240  001BB4  D004               	goto	l5108
  7241  001BB6                     l5106:
  7242  001BB6  0E00               	movlw	0
  7243  001BB8  6E49               	movwf	_s3+1,c
  7244  001BBA  0E04               	movlw	4
  7245  001BBC                     L10:
  7246  001BBC  6E48               	movwf	_s3,c
  7247  001BBE                     l5108:
  7248                           
  7249                           ;motors.c: 192: }
  7250                           ;motors.c: 193: if (s3 == 1){LATEbits.LATE2 = 1;}
  7251  001BBE  0448               	decf	_s3,w,c
  7252  001BC0  1049               	iorwf	_s3+1,w,c
  7253  001BC2  A4D8               	btfss	status,2,c
  7254  001BC4  D002               	goto	l570
  7255  001BC6  848D               	bsf	3981,2,c	;volatile
  7256  001BC8  D001               	goto	l5112
  7257  001BCA                     l570:
  7258                           
  7259                           ;motors.c: 194: else{LATEbits.LATE2 = 0;}
  7260  001BCA  948D               	bcf	3981,2,c	;volatile
  7261  001BCC                     l5112:
  7262                           
  7263                           ;motors.c: 195: if (s3 == 2){LATEbits.LATE1 = 1;}
  7264  001BCC  0E02               	movlw	2
  7265  001BCE  1848               	xorwf	_s3,w,c
  7266  001BD0  1049               	iorwf	_s3+1,w,c
  7267  001BD2  A4D8               	btfss	status,2,c
  7268  001BD4  D002               	goto	l572
  7269  001BD6  828D               	bsf	3981,1,c	;volatile
  7270  001BD8  D001               	goto	l5116
  7271  001BDA                     l572:
  7272                           
  7273                           ;motors.c: 196: else{LATEbits.LATE1 = 0;}
  7274  001BDA  928D               	bcf	3981,1,c	;volatile
  7275  001BDC                     l5116:
  7276                           
  7277                           ;motors.c: 197: if (s3 == 3){LATAbits.LATA4 = 1;}
  7278  001BDC  0E03               	movlw	3
  7279  001BDE  1848               	xorwf	_s3,w,c
  7280  001BE0  1049               	iorwf	_s3+1,w,c
  7281  001BE2  A4D8               	btfss	status,2,c
  7282  001BE4  D002               	goto	l574
  7283  001BE6  8889               	bsf	3977,4,c	;volatile
  7284  001BE8  D001               	goto	l5120
  7285  001BEA                     l574:
  7286                           
  7287                           ;motors.c: 198: else{LATAbits.LATA4 = 0;}
  7288  001BEA  9889               	bcf	3977,4,c	;volatile
  7289  001BEC                     l5120:
  7290                           
  7291                           ;motors.c: 199: if (s3 == 4){LATDbits.LATD0 = 1;}
  7292  001BEC  0E04               	movlw	4
  7293  001BEE  1848               	xorwf	_s3,w,c
  7294  001BF0  1049               	iorwf	_s3+1,w,c
  7295  001BF2  A4D8               	btfss	status,2,c
  7296  001BF4  D002               	goto	l576
  7297  001BF6  808C               	bsf	3980,0,c	;volatile
  7298  001BF8  0012               	return	
  7299  001BFA                     l576:
  7300                           
  7301                           ;motors.c: 200: else{LATDbits.LATD0 = 0;}
  7302  001BFA  908C               	bcf	3980,0,c	;volatile
  7303  001BFC  0012               	return	
  7304  001BFE                     __end_of_updateS3:
  7305                           	opt stack 0
  7306                           tblptru	equ	0xFF8
  7307                           tblptrh	equ	0xFF7
  7308                           tblptrl	equ	0xFF6
  7309                           tablat	equ	0xFF5
  7310                           prodh	equ	0xFF4
  7311                           prodl	equ	0xFF3
  7312                           intcon	equ	0xFF2
  7313                           intcon2	equ	0xFF1
  7314                           postinc0	equ	0xFEE
  7315                           wreg	equ	0xFE8
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           fsr2h	equ	0xFDA
  7320                           fsr2l	equ	0xFD9
  7321                           status	equ	0xFD8
  7322                           
  7323 ;; *************** function _updateS1 *****************
  7324 ;; Defined at:
  7325 ;;		line 55 in file "motors.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  mode            2   20[COMRAM] int 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;		None
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  1    wreg      void 
  7332 ;; Registers used:
  7333 ;;		wreg, status,2, status,0
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;Total ram usage:        3 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    2
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_main
  7350 ;;		_calibrateWheels
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text25
  7355  0013D2                     __ptext25:
  7356                           	opt stack 0
  7357  0013D2                     _updateS1:
  7358                           	opt stack 28
  7359                           
  7360                           ;motors.c: 56: _delay((unsigned long)((5)*(32000000/4000.0)));
  7361                           
  7362                           ;incstack = 0
  7363  0013D2  0E34               	movlw	52
  7364  0013D4  6E17               	movwf	??_updateS1& (0+255),c
  7365  0013D6  0EF2               	movlw	242
  7366  0013D8                     u7777:
  7367  0013D8  2EE8               	decfsz	wreg,f,c
  7368  0013DA  D7FE               	bra	u7777
  7369  0013DC  2E17               	decfsz	??_updateS1& (0+255),f,c
  7370  0013DE  D7FC               	bra	u7777
  7371                           
  7372                           ;motors.c: 58: if(mode == 0){
  7373  0013E0  5015               	movf	updateS1@mode,w,c
  7374  0013E2  1016               	iorwf	updateS1@mode+1,w,c
  7375  0013E4  A4D8               	btfss	status,2,c
  7376  0013E6  D005               	goto	l4970
  7377                           
  7378                           ;motors.c: 59: LATDbits.LATD1 = 0;
  7379  0013E8  928C               	bcf	3980,1,c	;volatile
  7380                           
  7381                           ;motors.c: 60: LATBbits.LATB3 = 0;
  7382  0013EA  968A               	bcf	3978,3,c	;volatile
  7383                           
  7384                           ;motors.c: 61: LATBbits.LATB2 = 0;
  7385  0013EC  948A               	bcf	3978,2,c	;volatile
  7386                           
  7387                           ;motors.c: 62: LATBbits.LATB0 = 0;
  7388  0013EE  908A               	bcf	3978,0,c	;volatile
  7389                           
  7390                           ;motors.c: 63: }
  7391  0013F0  0012               	return	
  7392  0013F2                     l4970:
  7393                           
  7394                           ;motors.c: 64: else if(mode == 3){
  7395  0013F2  0E03               	movlw	3
  7396  0013F4  1815               	xorwf	updateS1@mode,w,c
  7397  0013F6  1016               	iorwf	updateS1@mode+1,w,c
  7398  0013F8  A4D8               	btfss	status,2,c
  7399  0013FA  D049               	goto	l4996
  7400                           
  7401                           ;motors.c: 65: t++;
  7402  0013FC  4A46               	infsnz	_t,f,c
  7403  0013FE  2A47               	incf	_t+1,f,c
  7404                           
  7405                           ;motors.c: 66: if (t>8) {t=1;}
  7406  001400  BE47               	btfsc	_t+1,7,c
  7407  001402  D00A               	goto	l4978
  7408  001404  5047               	movf	_t+1,w,c
  7409  001406  E104               	bnz	u5690
  7410  001408  0E09               	movlw	9
  7411  00140A  5C46               	subwf	_t,w,c
  7412  00140C  A0D8               	btfss	status,0,c
  7413  00140E  D004               	goto	l4978
  7414  001410                     u5690:
  7415  001410  0E00               	movlw	0
  7416  001412  6E47               	movwf	_t+1,c
  7417  001414  0E01               	movlw	1
  7418  001416  6E46               	movwf	_t,c
  7419  001418                     l4978:
  7420                           
  7421                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  7422  001418  0E34               	movlw	52
  7423  00141A  6E17               	movwf	??_updateS1& (0+255),c
  7424  00141C  0EF2               	movlw	242
  7425  00141E                     u7787:
  7426  00141E  2EE8               	decfsz	wreg,f,c
  7427  001420  D7FE               	bra	u7787
  7428  001422  2E17               	decfsz	??_updateS1& (0+255),f,c
  7429  001424  D7FC               	bra	u7787
  7430                           
  7431                           ;motors.c: 68: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  7432  001426  0446               	decf	_t,w,c
  7433  001428  1047               	iorwf	_t+1,w,c
  7434  00142A  B4D8               	btfsc	status,2,c
  7435  00142C  D005               	goto	l458
  7436  00142E  0E08               	movlw	8
  7437  001430  1846               	xorwf	_t,w,c
  7438  001432  1047               	iorwf	_t+1,w,c
  7439  001434  A4D8               	btfss	status,2,c
  7440  001436  D002               	goto	l456
  7441  001438                     l458:
  7442  001438  828C               	bsf	3980,1,c	;volatile
  7443  00143A  D001               	goto	l4984
  7444  00143C                     l456:
  7445                           
  7446                           ;motors.c: 69: else{LATDbits.LATD1 = 0;}
  7447  00143C  928C               	bcf	3980,1,c	;volatile
  7448  00143E                     l4984:
  7449                           
  7450                           ;motors.c: 70: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  7451  00143E  0E02               	movlw	2
  7452  001440  1846               	xorwf	_t,w,c
  7453  001442  1047               	iorwf	_t+1,w,c
  7454  001444  B4D8               	btfsc	status,2,c
  7455  001446  D005               	goto	l462
  7456  001448  0E07               	movlw	7
  7457  00144A  1846               	xorwf	_t,w,c
  7458  00144C  1047               	iorwf	_t+1,w,c
  7459  00144E  A4D8               	btfss	status,2,c
  7460  001450  D002               	goto	l460
  7461  001452                     l462:
  7462  001452  868A               	bsf	3978,3,c	;volatile
  7463  001454  D001               	goto	l4988
  7464  001456                     l460:
  7465                           
  7466                           ;motors.c: 71: else{LATBbits.LATB3 = 0;}
  7467  001456  968A               	bcf	3978,3,c	;volatile
  7468  001458                     l4988:
  7469                           
  7470                           ;motors.c: 72: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  7471  001458  0E03               	movlw	3
  7472  00145A  1846               	xorwf	_t,w,c
  7473  00145C  1047               	iorwf	_t+1,w,c
  7474  00145E  B4D8               	btfsc	status,2,c
  7475  001460  D005               	goto	l466
  7476  001462  0E06               	movlw	6
  7477  001464  1846               	xorwf	_t,w,c
  7478  001466  1047               	iorwf	_t+1,w,c
  7479  001468  A4D8               	btfss	status,2,c
  7480  00146A  D002               	goto	l464
  7481  00146C                     l466:
  7482  00146C  848A               	bsf	3978,2,c	;volatile
  7483  00146E  D001               	goto	l4992
  7484  001470                     l464:
  7485                           
  7486                           ;motors.c: 73: else{LATBbits.LATB2 = 0;}
  7487  001470  948A               	bcf	3978,2,c	;volatile
  7488  001472                     l4992:
  7489                           
  7490                           ;motors.c: 74: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  7491  001472  0E04               	movlw	4
  7492  001474  1846               	xorwf	_t,w,c
  7493  001476  1047               	iorwf	_t+1,w,c
  7494  001478  B4D8               	btfsc	status,2,c
  7495  00147A  D005               	goto	l470
  7496  00147C  0E05               	movlw	5
  7497  00147E  1846               	xorwf	_t,w,c
  7498  001480  1047               	iorwf	_t+1,w,c
  7499  001482  A4D8               	btfss	status,2,c
  7500  001484  D002               	goto	l468
  7501  001486                     l470:
  7502  001486  808A               	bsf	3978,0,c	;volatile
  7503  001488  0012               	return	
  7504  00148A                     l468:
  7505                           
  7506                           ;motors.c: 75: else{LATBbits.LATB0 = 0;}
  7507  00148A  908A               	bcf	3978,0,c	;volatile
  7508                           
  7509                           ;motors.c: 76: }
  7510  00148C  0012               	return	
  7511  00148E                     l4996:
  7512                           
  7513                           ;motors.c: 77: else{
  7514                           ;motors.c: 78: _delay((unsigned long)((10)*(32000000/4000.0)));
  7515  00148E  0E68               	movlw	104
  7516  001490  6E17               	movwf	??_updateS1& (0+255),c
  7517  001492  0EE4               	movlw	228
  7518  001494                     u7797:
  7519  001494  2EE8               	decfsz	wreg,f,c
  7520  001496  D7FE               	bra	u7797
  7521  001498  2E17               	decfsz	??_updateS1& (0+255),f,c
  7522  00149A  D7FC               	bra	u7797
  7523  00149C  D000               	nop2	
  7524                           
  7525                           ;motors.c: 80: if(mode == 1 || mode == 5){
  7526  00149E  0415               	decf	updateS1@mode,w,c
  7527  0014A0  1016               	iorwf	updateS1@mode+1,w,c
  7528  0014A2  B4D8               	btfsc	status,2,c
  7529  0014A4  D005               	goto	l5002
  7530  0014A6  0E05               	movlw	5
  7531  0014A8  1815               	xorwf	updateS1@mode,w,c
  7532  0014AA  1016               	iorwf	updateS1@mode+1,w,c
  7533  0014AC  A4D8               	btfss	status,2,c
  7534  0014AE  D00E               	goto	l5008
  7535  0014B0                     l5002:
  7536                           
  7537                           ;motors.c: 81: s1 ++;
  7538  0014B0  4A4C               	infsnz	_s1,f,c
  7539  0014B2  2A4D               	incf	_s1+1,f,c
  7540                           
  7541                           ;motors.c: 82: if (s1>4) {s1=1;}
  7542  0014B4  BE4D               	btfsc	_s1+1,7,c
  7543  0014B6  D022               	goto	l5018
  7544  0014B8  504D               	movf	_s1+1,w,c
  7545  0014BA  E104               	bnz	u5800
  7546  0014BC  0E05               	movlw	5
  7547  0014BE  5C4C               	subwf	_s1,w,c
  7548  0014C0  A0D8               	btfss	status,0,c
  7549  0014C2  D01C               	goto	l5018
  7550  0014C4                     u5800:
  7551  0014C4  0E00               	movlw	0
  7552  0014C6  6E4D               	movwf	_s1+1,c
  7553  0014C8  0E01               	movlw	1
  7554  0014CA  D017               	goto	L11
  7555  0014CC                     l5008:
  7556                           
  7557                           ;motors.c: 85: else if(mode == 2 || mode==6){
  7558  0014CC  0E02               	movlw	2
  7559  0014CE  1815               	xorwf	updateS1@mode,w,c
  7560  0014D0  1016               	iorwf	updateS1@mode+1,w,c
  7561  0014D2  B4D8               	btfsc	status,2,c
  7562  0014D4  D005               	goto	l5012
  7563  0014D6  0E06               	movlw	6
  7564  0014D8  1815               	xorwf	updateS1@mode,w,c
  7565  0014DA  1016               	iorwf	updateS1@mode+1,w,c
  7566  0014DC  A4D8               	btfss	status,2,c
  7567  0014DE  D00E               	goto	l5018
  7568  0014E0                     l5012:
  7569                           
  7570                           ;motors.c: 86: s1 --;
  7571  0014E0  064C               	decf	_s1,f,c
  7572  0014E2  A0D8               	btfss	status,0,c
  7573  0014E4  064D               	decf	_s1+1,f,c
  7574                           
  7575                           ;motors.c: 87: if (s1<1) {s1=4;}
  7576  0014E6  BE4D               	btfsc	_s1+1,7,c
  7577  0014E8  D005               	goto	l5016
  7578  0014EA  504D               	movf	_s1+1,w,c
  7579  0014EC  E107               	bnz	l5018
  7580  0014EE  044C               	decf	_s1,w,c
  7581  0014F0  B0D8               	btfsc	status,0,c
  7582  0014F2  D004               	goto	l5018
  7583  0014F4                     l5016:
  7584  0014F4  0E00               	movlw	0
  7585  0014F6  6E4D               	movwf	_s1+1,c
  7586  0014F8  0E04               	movlw	4
  7587  0014FA                     L11:
  7588  0014FA  6E4C               	movwf	_s1,c
  7589  0014FC                     l5018:
  7590                           
  7591                           ;motors.c: 88: }
  7592                           ;motors.c: 90: if(mode == 1 || mode ==2){
  7593  0014FC  0415               	decf	updateS1@mode,w,c
  7594  0014FE  1016               	iorwf	updateS1@mode+1,w,c
  7595  001500  B4D8               	btfsc	status,2,c
  7596  001502  D005               	goto	l5022
  7597  001504  0E02               	movlw	2
  7598  001506  1815               	xorwf	updateS1@mode,w,c
  7599  001508  1016               	iorwf	updateS1@mode+1,w,c
  7600  00150A  A4D8               	btfss	status,2,c
  7601  00150C  D01F               	goto	l5038
  7602  00150E                     l5022:
  7603                           
  7604                           ;motors.c: 91: if (s1 == 1){LATDbits.LATD1 = 1;}
  7605  00150E  044C               	decf	_s1,w,c
  7606  001510  104D               	iorwf	_s1+1,w,c
  7607  001512  A4D8               	btfss	status,2,c
  7608  001514  D002               	goto	l485
  7609  001516  828C               	bsf	3980,1,c	;volatile
  7610  001518  D001               	goto	l5026
  7611  00151A                     l485:
  7612                           
  7613                           ;motors.c: 92: else{LATDbits.LATD1 = 0;}
  7614  00151A  928C               	bcf	3980,1,c	;volatile
  7615  00151C                     l5026:
  7616                           
  7617                           ;motors.c: 93: if (s1 == 2){LATBbits.LATB3 = 1;}
  7618  00151C  0E02               	movlw	2
  7619  00151E  184C               	xorwf	_s1,w,c
  7620  001520  104D               	iorwf	_s1+1,w,c
  7621  001522  A4D8               	btfss	status,2,c
  7622  001524  D002               	goto	l487
  7623  001526  868A               	bsf	3978,3,c	;volatile
  7624  001528  D001               	goto	l5030
  7625  00152A                     l487:
  7626                           
  7627                           ;motors.c: 94: else{LATBbits.LATB3 = 0;}
  7628  00152A  968A               	bcf	3978,3,c	;volatile
  7629  00152C                     l5030:
  7630                           
  7631                           ;motors.c: 95: if (s1 == 3){LATBbits.LATB2 = 1;}
  7632  00152C  0E03               	movlw	3
  7633  00152E  184C               	xorwf	_s1,w,c
  7634  001530  104D               	iorwf	_s1+1,w,c
  7635  001532  A4D8               	btfss	status,2,c
  7636  001534  D002               	goto	l489
  7637  001536  848A               	bsf	3978,2,c	;volatile
  7638  001538  D001               	goto	l5034
  7639  00153A                     l489:
  7640                           
  7641                           ;motors.c: 96: else{LATBbits.LATB2 = 0;}
  7642  00153A  948A               	bcf	3978,2,c	;volatile
  7643  00153C                     l5034:
  7644                           
  7645                           ;motors.c: 97: if (s1 == 4){LATBbits.LATB0 = 1;}
  7646  00153C  0E04               	movlw	4
  7647  00153E  184C               	xorwf	_s1,w,c
  7648  001540  104D               	iorwf	_s1+1,w,c
  7649  001542  A4D8               	btfss	status,2,c
  7650  001544  D002               	goto	l491
  7651  001546  808A               	bsf	3978,0,c	;volatile
  7652  001548  D001               	goto	l5038
  7653  00154A                     l491:
  7654                           
  7655                           ;motors.c: 98: else{LATBbits.LATB0 = 0;}
  7656  00154A  908A               	bcf	3978,0,c	;volatile
  7657  00154C                     l5038:
  7658                           
  7659                           ;motors.c: 99: }
  7660                           ;motors.c: 100: if(mode == 5 || mode ==6){
  7661  00154C  0E05               	movlw	5
  7662  00154E  1815               	xorwf	updateS1@mode,w,c
  7663  001550  1016               	iorwf	updateS1@mode+1,w,c
  7664  001552  B4D8               	btfsc	status,2,c
  7665  001554  D005               	goto	l5042
  7666  001556  0E06               	movlw	6
  7667  001558  1815               	xorwf	updateS1@mode,w,c
  7668  00155A  1016               	iorwf	updateS1@mode+1,w,c
  7669  00155C  A4D8               	btfss	status,2,c
  7670  00155E  0012               	return	
  7671  001560                     l5042:
  7672                           
  7673                           ;motors.c: 101: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  7674  001560  044C               	decf	_s1,w,c
  7675  001562  104D               	iorwf	_s1+1,w,c
  7676  001564  A4D8               	btfss	status,2,c
  7677  001566  D004               	goto	l5046
  7678  001568  828C               	bsf	3980,1,c	;volatile
  7679  00156A  868A               	bsf	3978,3,c	;volatile
  7680  00156C  948A               	bcf	3978,2,c	;volatile
  7681  00156E  908A               	bcf	3978,0,c	;volatile
  7682  001570                     l5046:
  7683                           
  7684                           ;motors.c: 102: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  7685  001570  0E02               	movlw	2
  7686  001572  184C               	xorwf	_s1,w,c
  7687  001574  104D               	iorwf	_s1+1,w,c
  7688  001576  A4D8               	btfss	status,2,c
  7689  001578  D004               	goto	l5050
  7690  00157A  928C               	bcf	3980,1,c	;volatile
  7691  00157C  868A               	bsf	3978,3,c	;volatile
  7692  00157E  848A               	bsf	3978,2,c	;volatile
  7693  001580  908A               	bcf	3978,0,c	;volatile
  7694  001582                     l5050:
  7695                           
  7696                           ;motors.c: 103: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  7697  001582  0E03               	movlw	3
  7698  001584  184C               	xorwf	_s1,w,c
  7699  001586  104D               	iorwf	_s1+1,w,c
  7700  001588  A4D8               	btfss	status,2,c
  7701  00158A  D004               	goto	l5054
  7702  00158C  928C               	bcf	3980,1,c	;volatile
  7703  00158E  968A               	bcf	3978,3,c	;volatile
  7704  001590  848A               	bsf	3978,2,c	;volatile
  7705  001592  808A               	bsf	3978,0,c	;volatile
  7706  001594                     l5054:
  7707                           
  7708                           ;motors.c: 104: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  7709  001594  0E04               	movlw	4
  7710  001596  184C               	xorwf	_s1,w,c
  7711  001598  104D               	iorwf	_s1+1,w,c
  7712  00159A  A4D8               	btfss	status,2,c
  7713  00159C  0012               	return	
  7714  00159E  828C               	bsf	3980,1,c	;volatile
  7715  0015A0  968A               	bcf	3978,3,c	;volatile
  7716  0015A2  948A               	bcf	3978,2,c	;volatile
  7717  0015A4  808A               	bsf	3978,0,c	;volatile
  7718  0015A6  0012               	return	
  7719  0015A8                     __end_of_updateS1:
  7720                           	opt stack 0
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           intcon	equ	0xFF2
  7728                           intcon2	equ	0xFF1
  7729                           postinc0	equ	0xFEE
  7730                           wreg	equ	0xFE8
  7731                           indf2	equ	0xFDF
  7732                           postinc2	equ	0xFDE
  7733                           postdec2	equ	0xFDD
  7734                           fsr2h	equ	0xFDA
  7735                           fsr2l	equ	0xFD9
  7736                           status	equ	0xFD8
  7737                           
  7738 ;; *************** function _startTMR1 *****************
  7739 ;; Defined at:
  7740 ;;		line 24 in file "logic.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;		None
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;		None
  7745 ;; Return value:  Size  Location     Type
  7746 ;;                  2   24[None  ] int 
  7747 ;; Registers used:
  7748 ;;		wreg, status,2
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;Total ram usage:        0 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    2
  7761 ;; This function calls:
  7762 ;;		Nothing
  7763 ;; This function is called by:
  7764 ;;		_main
  7765 ;;		_calibrateWheels
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text26
  7770  002568                     __ptext26:
  7771                           	opt stack 0
  7772  002568                     _startTMR1:
  7773                           	opt stack 28
  7774                           
  7775                           ;logic.c: 25: T1CON = 0b10110000;
  7776                           
  7777                           ;incstack = 0
  7778  002568  0EB0               	movlw	176
  7779  00256A  6ECD               	movwf	4045,c	;volatile
  7780                           
  7781                           ;logic.c: 26: TMR1H = 0b11101001;
  7782  00256C  0EE9               	movlw	233
  7783  00256E  6ECF               	movwf	4047,c	;volatile
  7784                           
  7785                           ;logic.c: 27: TMR1L = 0b01011011;
  7786  002570  0E5B               	movlw	91
  7787  002572  6ECE               	movwf	4046,c	;volatile
  7788                           
  7789                           ;logic.c: 28: TMR1ON = 1;
  7790  002574  80CD               	bsf	4045,0,c	;volatile
  7791  002576  0012               	return		;funcret
  7792  002578                     __end_of_startTMR1:
  7793                           	opt stack 0
  7794                           tblptru	equ	0xFF8
  7795                           tblptrh	equ	0xFF7
  7796                           tblptrl	equ	0xFF6
  7797                           tablat	equ	0xFF5
  7798                           prodh	equ	0xFF4
  7799                           prodl	equ	0xFF3
  7800                           intcon	equ	0xFF2
  7801                           intcon2	equ	0xFF1
  7802                           postinc0	equ	0xFEE
  7803                           wreg	equ	0xFE8
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811 ;; *************** function _readADC *****************
  7812 ;; Defined at:
  7813 ;;		line 9 in file "logic.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;  channel         1    wreg     unsigned char 
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;  channel         1   21[COMRAM] unsigned char 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      void 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;Total ram usage:        2 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    2
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_main
  7838 ;;		_calibrateWheels
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           	psect	text27
  7843  0024EC                     __ptext27:
  7844                           	opt stack 0
  7845  0024EC                     _readADC:
  7846                           	opt stack 28
  7847                           
  7848                           ;incstack = 0
  7849                           ;readADC@channel stored from wreg
  7850  0024EC  6E16               	movwf	readADC@channel,c
  7851                           
  7852                           ;logic.c: 11: ADCON0 = ((channel <<2));
  7853  0024EE  4416               	rlncf	readADC@channel,w,c
  7854  0024F0  46E8               	rlncf	wreg,f,c
  7855  0024F2  0BFC               	andlw	252
  7856  0024F4  6EC2               	movwf	4034,c	;volatile
  7857                           
  7858                           ;logic.c: 12: ADCON0bits.ADON = 1;
  7859  0024F6  80C2               	bsf	4034,0,c	;volatile
  7860                           
  7861                           ;logic.c: 13: ADCON0bits.GO = 1;
  7862  0024F8  82C2               	bsf	4034,1,c	;volatile
  7863                           
  7864                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  7865  0024FA  D007               	goto	l5292
  7866  0024FC                     l5290:
  7867  0024FC  0E34               	movlw	52
  7868  0024FE  6E15               	movwf	??_readADC& (0+255),c
  7869  002500  0EF2               	movlw	242
  7870  002502                     u7807:
  7871  002502  2EE8               	decfsz	wreg,f,c
  7872  002504  D7FE               	bra	u7807
  7873  002506  2E15               	decfsz	??_readADC& (0+255),f,c
  7874  002508  D7FC               	bra	u7807
  7875  00250A                     l5292:
  7876  00250A  A2C2               	btfss	4034,1,c	;volatile
  7877  00250C  0012               	return	
  7878  00250E  D7F6               	goto	l5290
  7879  002510                     __end_of_readADC:
  7880                           	opt stack 0
  7881                           tblptru	equ	0xFF8
  7882                           tblptrh	equ	0xFF7
  7883                           tblptrl	equ	0xFF6
  7884                           tablat	equ	0xFF5
  7885                           prodh	equ	0xFF4
  7886                           prodl	equ	0xFF3
  7887                           intcon	equ	0xFF2
  7888                           intcon2	equ	0xFF1
  7889                           postinc0	equ	0xFEE
  7890                           wreg	equ	0xFE8
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function _addRun *****************
  7899 ;; Defined at:
  7900 ;;		line 69 in file "interface.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  dur             2   24[COMRAM] int 
  7903 ;;  year            2   26[COMRAM] int 
  7904 ;;  month           2   28[COMRAM] int 
  7905 ;;  date            2   30[COMRAM] int 
  7906 ;;  hours           2   32[COMRAM] int 
  7907 ;;  mins            2   34[COMRAM] int 
  7908 ;;  secs            2   36[COMRAM] int 
  7909 ;;  sodaT           2   38[COMRAM] int 
  7910 ;;  sodaNT          2   40[COMRAM] int 
  7911 ;;  soupL           2   42[COMRAM] int 
  7912 ;;  soupNL          2   44[COMRAM] int 
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;  currRun         2   49[COMRAM] int 
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      void 
  7917 ;; Registers used:
  7918 ;;		wreg, status,2, status,0, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : 0/0
  7921 ;;		On exit  : 0/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7924 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;Total ram usage:       27 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    3
  7931 ;; This function calls:
  7932 ;;		_eepromRead
  7933 ;;		_eepromWrite
  7934 ;; This function is called by:
  7935 ;;		_main
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text28
  7940  001E96                     __ptext28:
  7941                           	opt stack 0
  7942  001E96                     _addRun:
  7943                           	opt stack 27
  7944                           
  7945                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  7946                           
  7947                           ;incstack = 0
  7948  001E96  0EFF               	movlw	255
  7949  001E98  6E2F               	movwf	??_addRun& (0+255),c
  7950  001E9A  0EFF               	movlw	255
  7951  001E9C  6E30               	movwf	(??_addRun+1)& (0+255),c
  7952  001E9E  0E00               	movlw	0
  7953  001EA0  EC29  F012         	call	_eepromRead
  7954  001EA4  6E31               	movwf	(??_addRun+2)& (0+255),c
  7955  001EA6  502F               	movf	??_addRun,w,c
  7956  001EA8  2431               	addwf	??_addRun+2,w,c
  7957  001EAA  6E32               	movwf	addRun@currRun,c
  7958  001EAC  0E00               	movlw	0
  7959  001EAE  BE31               	btfsc	??_addRun+2,7,c
  7960  001EB0  0EFF               	movlw	255
  7961  001EB2  2030               	addwfc	??_addRun+1,w,c
  7962  001EB4  6E33               	movwf	addRun@currRun+1,c
  7963                           
  7964                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  7965  001EB6  BE33               	btfsc	addRun@currRun+1,7,c
  7966  001EB8  D005               	goto	l5584
  7967  001EBA  5033               	movf	addRun@currRun+1,w,c
  7968  001EBC  E107               	bnz	l5586
  7969  001EBE  0432               	decf	addRun@currRun,w,c
  7970  001EC0  B0D8               	btfsc	status,0,c
  7971  001EC2  D004               	goto	l5586
  7972  001EC4                     l5584:
  7973  001EC4  0E00               	movlw	0
  7974  001EC6  6E33               	movwf	addRun@currRun+1,c
  7975  001EC8  0E04               	movlw	4
  7976  001ECA  6E32               	movwf	addRun@currRun,c
  7977  001ECC                     l5586:
  7978                           
  7979                           ;interface.c: 72: eepromWrite(0, currRun);
  7980  001ECC  C032  F015         	movff	addRun@currRun,eepromWrite@data
  7981  001ED0  0E00               	movlw	0
  7982  001ED2  EC0D  F012         	call	_eepromWrite
  7983                           
  7984                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  7985  001ED6  C019  F015         	movff	addRun@dur,eepromWrite@data
  7986  001EDA  C032  F02F         	movff	addRun@currRun,??_addRun
  7987  001EDE  3A2F               	swapf	??_addRun,f,c
  7988  001EE0  0EF0               	movlw	240
  7989  001EE2  162F               	andwf	??_addRun,f,c
  7990  001EE4  282F               	incf	??_addRun,w,c
  7991  001EE6  EC0D  F012         	call	_eepromWrite
  7992                           
  7993                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  7994  001EEA  C01B  F015         	movff	addRun@year,eepromWrite@data
  7995  001EEE  C032  F02F         	movff	addRun@currRun,??_addRun
  7996  001EF2  3A2F               	swapf	??_addRun,f,c
  7997  001EF4  0EF0               	movlw	240
  7998  001EF6  162F               	andwf	??_addRun,f,c
  7999  001EF8  502F               	movf	??_addRun,w,c
  8000  001EFA  0F02               	addlw	2
  8001  001EFC  EC0D  F012         	call	_eepromWrite
  8002                           
  8003                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  8004  001F00  C01D  F015         	movff	addRun@month,eepromWrite@data
  8005  001F04  C032  F02F         	movff	addRun@currRun,??_addRun
  8006  001F08  3A2F               	swapf	??_addRun,f,c
  8007  001F0A  0EF0               	movlw	240
  8008  001F0C  162F               	andwf	??_addRun,f,c
  8009  001F0E  502F               	movf	??_addRun,w,c
  8010  001F10  0F03               	addlw	3
  8011  001F12  EC0D  F012         	call	_eepromWrite
  8012                           
  8013                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8014  001F16  C01F  F015         	movff	addRun@date,eepromWrite@data
  8015  001F1A  C032  F02F         	movff	addRun@currRun,??_addRun
  8016  001F1E  3A2F               	swapf	??_addRun,f,c
  8017  001F20  0EF0               	movlw	240
  8018  001F22  162F               	andwf	??_addRun,f,c
  8019  001F24  502F               	movf	??_addRun,w,c
  8020  001F26  0F04               	addlw	4
  8021  001F28  EC0D  F012         	call	_eepromWrite
  8022                           
  8023                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8024  001F2C  C021  F015         	movff	addRun@hours,eepromWrite@data
  8025  001F30  C032  F02F         	movff	addRun@currRun,??_addRun
  8026  001F34  3A2F               	swapf	??_addRun,f,c
  8027  001F36  0EF0               	movlw	240
  8028  001F38  162F               	andwf	??_addRun,f,c
  8029  001F3A  502F               	movf	??_addRun,w,c
  8030  001F3C  0F05               	addlw	5
  8031  001F3E  EC0D  F012         	call	_eepromWrite
  8032                           
  8033                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8034  001F42  C023  F015         	movff	addRun@mins,eepromWrite@data
  8035  001F46  C032  F02F         	movff	addRun@currRun,??_addRun
  8036  001F4A  3A2F               	swapf	??_addRun,f,c
  8037  001F4C  0EF0               	movlw	240
  8038  001F4E  162F               	andwf	??_addRun,f,c
  8039  001F50  502F               	movf	??_addRun,w,c
  8040  001F52  0F06               	addlw	6
  8041  001F54  EC0D  F012         	call	_eepromWrite
  8042                           
  8043                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8044  001F58  C025  F015         	movff	addRun@secs,eepromWrite@data
  8045  001F5C  C032  F02F         	movff	addRun@currRun,??_addRun
  8046  001F60  3A2F               	swapf	??_addRun,f,c
  8047  001F62  0EF0               	movlw	240
  8048  001F64  162F               	andwf	??_addRun,f,c
  8049  001F66  502F               	movf	??_addRun,w,c
  8050  001F68  0F07               	addlw	7
  8051  001F6A  EC0D  F012         	call	_eepromWrite
  8052                           
  8053                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8054  001F6E  C027  F015         	movff	addRun@sodaT,eepromWrite@data
  8055  001F72  C032  F02F         	movff	addRun@currRun,??_addRun
  8056  001F76  3A2F               	swapf	??_addRun,f,c
  8057  001F78  0EF0               	movlw	240
  8058  001F7A  162F               	andwf	??_addRun,f,c
  8059  001F7C  502F               	movf	??_addRun,w,c
  8060  001F7E  0F08               	addlw	8
  8061  001F80  EC0D  F012         	call	_eepromWrite
  8062                           
  8063                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8064  001F84  C029  F015         	movff	addRun@sodaNT,eepromWrite@data
  8065  001F88  C032  F02F         	movff	addRun@currRun,??_addRun
  8066  001F8C  3A2F               	swapf	??_addRun,f,c
  8067  001F8E  0EF0               	movlw	240
  8068  001F90  162F               	andwf	??_addRun,f,c
  8069  001F92  502F               	movf	??_addRun,w,c
  8070  001F94  0F09               	addlw	9
  8071  001F96  EC0D  F012         	call	_eepromWrite
  8072                           
  8073                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8074  001F9A  C02B  F015         	movff	addRun@soupL,eepromWrite@data
  8075  001F9E  C032  F02F         	movff	addRun@currRun,??_addRun
  8076  001FA2  3A2F               	swapf	??_addRun,f,c
  8077  001FA4  0EF0               	movlw	240
  8078  001FA6  162F               	andwf	??_addRun,f,c
  8079  001FA8  502F               	movf	??_addRun,w,c
  8080  001FAA  0F0A               	addlw	10
  8081  001FAC  EC0D  F012         	call	_eepromWrite
  8082                           
  8083                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8084  001FB0  C02D  F015         	movff	addRun@soupNL,eepromWrite@data
  8085  001FB4  C032  F02F         	movff	addRun@currRun,??_addRun
  8086  001FB8  3A2F               	swapf	??_addRun,f,c
  8087  001FBA  0EF0               	movlw	240
  8088  001FBC  162F               	andwf	??_addRun,f,c
  8089  001FBE  502F               	movf	??_addRun,w,c
  8090  001FC0  0F0B               	addlw	11
  8091  001FC2  EC0D  F012         	call	_eepromWrite
  8092  001FC6  0012               	return		;funcret
  8093  001FC8                     __end_of_addRun:
  8094                           	opt stack 0
  8095                           tblptru	equ	0xFF8
  8096                           tblptrh	equ	0xFF7
  8097                           tblptrl	equ	0xFF6
  8098                           tablat	equ	0xFF5
  8099                           prodh	equ	0xFF4
  8100                           prodl	equ	0xFF3
  8101                           intcon	equ	0xFF2
  8102                           intcon2	equ	0xFF1
  8103                           postinc0	equ	0xFEE
  8104                           wreg	equ	0xFE8
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _eepromWrite *****************
  8113 ;; Defined at:
  8114 ;;		line 43 in file "interface.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;  address         1    wreg     char 
  8117 ;;  data            1   20[COMRAM] char 
  8118 ;; Auto vars:     Size  Location     Type
  8119 ;;  address         1   23[COMRAM] char 
  8120 ;; Return value:  Size  Location     Type
  8121 ;;                  1    wreg      void 
  8122 ;; Registers used:
  8123 ;;		wreg, status,2, status,0
  8124 ;; Tracked objects:
  8125 ;;		On entry : 0/0
  8126 ;;		On exit  : 0/0
  8127 ;;		Unchanged: 0/0
  8128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8129 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8130 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8131 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8132 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8133 ;;Total ram usage:        4 bytes
  8134 ;; Hardware stack levels used:    1
  8135 ;; Hardware stack levels required when called:    2
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_addRun
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           	psect	text29
  8144  00241A                     __ptext29:
  8145                           	opt stack 0
  8146  00241A                     _eepromWrite:
  8147                           	opt stack 27
  8148                           
  8149                           ;incstack = 0
  8150                           ;eepromWrite@address stored from wreg
  8151  00241A  6E18               	movwf	eepromWrite@address,c
  8152                           
  8153                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8154  00241C  C018  F016         	movff	eepromWrite@address,??_eepromWrite
  8155  002420  0E08               	movlw	8
  8156  002422  6E17               	movwf	(??_eepromWrite+1)& (0+255),c
  8157  002424                     u6475:
  8158  002424  3416               	rlcf	??_eepromWrite,w,c
  8159  002426  3216               	rrcf	??_eepromWrite,f,c
  8160  002428  2E17               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8161  00242A  D7FC               	goto	u6475
  8162  00242C  5016               	movf	??_eepromWrite,w,c
  8163  00242E  6EAA               	movwf	4010,c	;volatile
  8164                           
  8165                           ;interface.c: 46: EEADR = (signed char)address;
  8166  002430  C018  FFA9         	movff	eepromWrite@address,4009	;volatile
  8167                           
  8168                           ;interface.c: 48: EEDATA = data;
  8169  002434  C015  FFA8         	movff	eepromWrite@data,4008	;volatile
  8170                           
  8171                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8172  002438  9EA6               	bcf	4006,7,c	;volatile
  8173                           
  8174                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8175  00243A  9CA6               	bcf	4006,6,c	;volatile
  8176                           
  8177                           ;interface.c: 51: EECON1bits.WREN = 1;
  8178  00243C  84A6               	bsf	4006,2,c	;volatile
  8179                           
  8180                           ;interface.c: 55: EECON2 = 0x55;
  8181  00243E  0E55               	movlw	85
  8182  002440  6EA7               	movwf	4007,c	;volatile
  8183                           
  8184                           ;interface.c: 56: EECON2 = 0xAA;
  8185  002442  0EAA               	movlw	170
  8186  002444  6EA7               	movwf	4007,c	;volatile
  8187                           
  8188                           ;interface.c: 57: EECON1bits.WR = 1;
  8189  002446  82A6               	bsf	4006,1,c	;volatile
  8190  002448                     l634:
  8191  002448  A8A1               	btfss	4001,4,c	;volatile
  8192  00244A  D7FE               	goto	l634
  8193                           
  8194                           ;interface.c: 63: }
  8195                           ;interface.c: 65: PIR2bits.EEIF = 0;
  8196  00244C  98A1               	bcf	4001,4,c	;volatile
  8197                           
  8198                           ;interface.c: 66: EECON1bits.WREN = 0;
  8199  00244E  94A6               	bcf	4006,2,c	;volatile
  8200  002450  0012               	return		;funcret
  8201  002452                     __end_of_eepromWrite:
  8202                           	opt stack 0
  8203                           tblptru	equ	0xFF8
  8204                           tblptrh	equ	0xFF7
  8205                           tblptrl	equ	0xFF6
  8206                           tablat	equ	0xFF5
  8207                           prodh	equ	0xFF4
  8208                           prodl	equ	0xFF3
  8209                           intcon	equ	0xFF2
  8210                           intcon2	equ	0xFF1
  8211                           postinc0	equ	0xFEE
  8212                           wreg	equ	0xFE8
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function _eepromRead *****************
  8221 ;; Defined at:
  8222 ;;		line 27 in file "interface.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  address         1    wreg     char 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  address         1   22[COMRAM] char 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      char 
  8229 ;; Registers used:
  8230 ;;		wreg, status,2, status,0
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;Total ram usage:        3 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    2
  8243 ;; This function calls:
  8244 ;;		Nothing
  8245 ;; This function is called by:
  8246 ;;		_addRun
  8247 ;;		_displayLog
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text30
  8252  002452                     __ptext30:
  8253                           	opt stack 0
  8254  002452                     _eepromRead:
  8255                           	opt stack 27
  8256                           
  8257                           ;incstack = 0
  8258                           ;eepromRead@address stored from wreg
  8259  002452  6E17               	movwf	eepromRead@address,c
  8260                           
  8261                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  8262  002454  C017  F015         	movff	eepromRead@address,??_eepromRead
  8263  002458  0E08               	movlw	8
  8264  00245A  6E16               	movwf	(??_eepromRead+1)& (0+255),c
  8265  00245C                     u6455:
  8266  00245C  3415               	rlcf	??_eepromRead,w,c
  8267  00245E  3215               	rrcf	??_eepromRead,f,c
  8268  002460  2E16               	decfsz	(??_eepromRead+1)& (0+255),f,c
  8269  002462  D7FC               	goto	u6455
  8270  002464  5015               	movf	??_eepromRead,w,c
  8271  002466  6EAA               	movwf	4010,c	;volatile
  8272                           
  8273                           ;interface.c: 30: EEADR = (signed char)address;
  8274  002468  C017  FFA9         	movff	eepromRead@address,4009	;volatile
  8275                           
  8276                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  8277  00246C  9EA6               	bcf	4006,7,c	;volatile
  8278                           
  8279                           ;interface.c: 33: EECON1bits.CFGS = 0;
  8280  00246E  9CA6               	bcf	4006,6,c	;volatile
  8281                           
  8282                           ;interface.c: 34: EECON1bits.RD = 1;
  8283  002470  80A6               	bsf	4006,0,c	;volatile
  8284  002472                     l628:
  8285  002472  B0A6               	btfsc	4006,0,c	;volatile
  8286  002474  D7FE               	goto	l628
  8287                           
  8288                           ;interface.c: 40: return EEDATA;
  8289  002476  50A8               	movf	4008,w,c	;volatile
  8290  002478  0012               	return	
  8291  00247A                     __end_of_eepromRead:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon2	equ	0xFF1
  8301                           postinc0	equ	0xFEE
  8302                           wreg	equ	0xFE8
  8303                           indf2	equ	0xFDF
  8304                           postinc2	equ	0xFDE
  8305                           postdec2	equ	0xFDD
  8306                           fsr2h	equ	0xFDA
  8307                           fsr2l	equ	0xFD9
  8308                           status	equ	0xFD8
  8309                           
  8310 ;; *************** function _PWM2off *****************
  8311 ;; Defined at:
  8312 ;;		line 48 in file "motors.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;		None
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;                  1    wreg      void 
  8319 ;; Registers used:
  8320 ;;		wreg, status,2
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;Total ram usage:        0 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    2
  8333 ;; This function calls:
  8334 ;;		Nothing
  8335 ;; This function is called by:
  8336 ;;		_main
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text31
  8341  0025AA                     __ptext31:
  8342                           	opt stack 0
  8343  0025AA                     _PWM2off:
  8344                           	opt stack 28
  8345                           
  8346                           ;motors.c: 49: CCP2CONbits.DC2B0 = 0;
  8347                           
  8348                           ;incstack = 0
  8349  0025AA  98BA               	bcf	4026,4,c	;volatile
  8350                           
  8351                           ;motors.c: 50: CCP2CONbits.DC2B1 = 0;
  8352  0025AC  9ABA               	bcf	4026,5,c	;volatile
  8353                           
  8354                           ;motors.c: 52: CCPR2L = 0;
  8355  0025AE  0E00               	movlw	0
  8356  0025B0  6EBB               	movwf	4027,c	;volatile
  8357  0025B2  0012               	return		;funcret
  8358  0025B4                     __end_of_PWM2off:
  8359                           	opt stack 0
  8360                           tblptru	equ	0xFF8
  8361                           tblptrh	equ	0xFF7
  8362                           tblptrl	equ	0xFF6
  8363                           tablat	equ	0xFF5
  8364                           prodh	equ	0xFF4
  8365                           prodl	equ	0xFF3
  8366                           intcon	equ	0xFF2
  8367                           intcon2	equ	0xFF1
  8368                           postinc0	equ	0xFEE
  8369                           wreg	equ	0xFE8
  8370                           indf2	equ	0xFDF
  8371                           postinc2	equ	0xFDE
  8372                           postdec2	equ	0xFDD
  8373                           fsr2h	equ	0xFDA
  8374                           fsr2l	equ	0xFD9
  8375                           status	equ	0xFD8
  8376                           
  8377 ;; *************** function _PWM2 *****************
  8378 ;; Defined at:
  8379 ;;		line 34 in file "motors.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;  duty            2   20[COMRAM] int 
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1    wreg      void 
  8386 ;; Registers used:
  8387 ;;		wreg, status,2, status,0
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;Total ram usage:        4 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    2
  8400 ;; This function calls:
  8401 ;;		Nothing
  8402 ;; This function is called by:
  8403 ;;		_main
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text32
  8408  0022FE                     __ptext32:
  8409                           	opt stack 0
  8410  0022FE                     _PWM2:
  8411                           	opt stack 28
  8412                           
  8413                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  8414                           
  8415                           ;incstack = 0
  8416  0022FE  C015  F017         	movff	PWM2@duty,??_PWM2
  8417  002302  0E01               	movlw	1
  8418  002304  1617               	andwf	??_PWM2,f,c
  8419  002306  3A17               	swapf	??_PWM2,f,c
  8420  002308  50BA               	movf	4026,w,c	;volatile
  8421  00230A  1817               	xorwf	??_PWM2,w,c
  8422  00230C  0BEF               	andlw	-17
  8423  00230E  1817               	xorwf	??_PWM2,w,c
  8424  002310  6EBA               	movwf	4026,c	;volatile
  8425                           
  8426                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  8427  002312  3416               	rlcf	PWM2@duty+1,w,c
  8428  002314  3016               	rrcf	PWM2@duty+1,w,c
  8429  002316  6E18               	movwf	(??_PWM2+1)& (0+255),c
  8430  002318  3015               	rrcf	PWM2@duty,w,c
  8431  00231A  6E17               	movwf	??_PWM2& (0+255),c
  8432  00231C  0E01               	movlw	1
  8433  00231E  1617               	andwf	??_PWM2,f,c
  8434  002320  3A17               	swapf	??_PWM2,f,c
  8435  002322  4617               	rlncf	??_PWM2,f,c
  8436  002324  50BA               	movf	4026,w,c	;volatile
  8437  002326  1817               	xorwf	??_PWM2,w,c
  8438  002328  0BDF               	andlw	-33
  8439  00232A  1817               	xorwf	??_PWM2,w,c
  8440  00232C  6EBA               	movwf	4026,c	;volatile
  8441                           
  8442                           ;motors.c: 44: CCPR2L = (duty >> 2);
  8443  00232E  C015  F017         	movff	PWM2@duty,??_PWM2
  8444  002332  C016  F018         	movff	PWM2@duty+1,??_PWM2+1
  8445  002336  3418               	rlcf	??_PWM2+1,w,c
  8446  002338  3218               	rrcf	??_PWM2+1,f,c
  8447  00233A  3217               	rrcf	??_PWM2,f,c
  8448  00233C  3418               	rlcf	??_PWM2+1,w,c
  8449  00233E  3218               	rrcf	??_PWM2+1,f,c
  8450  002340  3217               	rrcf	??_PWM2,f,c
  8451  002342  5017               	movf	??_PWM2,w,c
  8452  002344  6EBB               	movwf	4027,c	;volatile
  8453  002346  0012               	return		;funcret
  8454  002348                     __end_of_PWM2:
  8455                           	opt stack 0
  8456                           tblptru	equ	0xFF8
  8457                           tblptrh	equ	0xFF7
  8458                           tblptrl	equ	0xFF6
  8459                           tablat	equ	0xFF5
  8460                           prodh	equ	0xFF4
  8461                           prodl	equ	0xFF3
  8462                           intcon	equ	0xFF2
  8463                           intcon2	equ	0xFF1
  8464                           postinc0	equ	0xFEE
  8465                           wreg	equ	0xFE8
  8466                           indf2	equ	0xFDF
  8467                           postinc2	equ	0xFDE
  8468                           postdec2	equ	0xFDD
  8469                           fsr2h	equ	0xFDA
  8470                           fsr2l	equ	0xFD9
  8471                           status	equ	0xFD8
  8472                           
  8473 ;; *************** function _PWM1off *****************
  8474 ;; Defined at:
  8475 ;;		line 28 in file "motors.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;		None
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		wreg, status,2
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;Total ram usage:        0 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    2
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_main
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           	psect	text33
  8504  0025B4                     __ptext33:
  8505                           	opt stack 0
  8506  0025B4                     _PWM1off:
  8507                           	opt stack 28
  8508                           
  8509                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  8510                           
  8511                           ;incstack = 0
  8512  0025B4  98BD               	bcf	4029,4,c	;volatile
  8513                           
  8514                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  8515  0025B6  9ABD               	bcf	4029,5,c	;volatile
  8516                           
  8517                           ;motors.c: 31: CCPR1L = 0;
  8518  0025B8  0E00               	movlw	0
  8519  0025BA  6EBE               	movwf	4030,c	;volatile
  8520  0025BC  0012               	return		;funcret
  8521  0025BE                     __end_of_PWM1off:
  8522                           	opt stack 0
  8523                           tblptru	equ	0xFF8
  8524                           tblptrh	equ	0xFF7
  8525                           tblptrl	equ	0xFF6
  8526                           tablat	equ	0xFF5
  8527                           prodh	equ	0xFF4
  8528                           prodl	equ	0xFF3
  8529                           intcon	equ	0xFF2
  8530                           intcon2	equ	0xFF1
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function _PWM1 *****************
  8541 ;; Defined at:
  8542 ;;		line 14 in file "motors.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  duty            2   20[COMRAM] int 
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;		None
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1    wreg      void 
  8549 ;; Registers used:
  8550 ;;		wreg, status,2, status,0
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8556 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;Total ram usage:        4 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    2
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_main
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text34
  8571  002348                     __ptext34:
  8572                           	opt stack 0
  8573  002348                     _PWM1:
  8574                           	opt stack 28
  8575                           
  8576                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  8577                           
  8578                           ;incstack = 0
  8579  002348  C015  F017         	movff	PWM1@duty,??_PWM1
  8580  00234C  0E01               	movlw	1
  8581  00234E  1617               	andwf	??_PWM1,f,c
  8582  002350  3A17               	swapf	??_PWM1,f,c
  8583  002352  50BD               	movf	4029,w,c	;volatile
  8584  002354  1817               	xorwf	??_PWM1,w,c
  8585  002356  0BEF               	andlw	-17
  8586  002358  1817               	xorwf	??_PWM1,w,c
  8587  00235A  6EBD               	movwf	4029,c	;volatile
  8588                           
  8589                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  8590  00235C  3416               	rlcf	PWM1@duty+1,w,c
  8591  00235E  3016               	rrcf	PWM1@duty+1,w,c
  8592  002360  6E18               	movwf	(??_PWM1+1)& (0+255),c
  8593  002362  3015               	rrcf	PWM1@duty,w,c
  8594  002364  6E17               	movwf	??_PWM1& (0+255),c
  8595  002366  0E01               	movlw	1
  8596  002368  1617               	andwf	??_PWM1,f,c
  8597  00236A  3A17               	swapf	??_PWM1,f,c
  8598  00236C  4617               	rlncf	??_PWM1,f,c
  8599  00236E  50BD               	movf	4029,w,c	;volatile
  8600  002370  1817               	xorwf	??_PWM1,w,c
  8601  002372  0BDF               	andlw	-33
  8602  002374  1817               	xorwf	??_PWM1,w,c
  8603  002376  6EBD               	movwf	4029,c	;volatile
  8604                           
  8605                           ;motors.c: 24: CCPR1L = (duty >> 2);
  8606  002378  C015  F017         	movff	PWM1@duty,??_PWM1
  8607  00237C  C016  F018         	movff	PWM1@duty+1,??_PWM1+1
  8608  002380  3418               	rlcf	??_PWM1+1,w,c
  8609  002382  3218               	rrcf	??_PWM1+1,f,c
  8610  002384  3217               	rrcf	??_PWM1,f,c
  8611  002386  3418               	rlcf	??_PWM1+1,w,c
  8612  002388  3218               	rrcf	??_PWM1+1,f,c
  8613  00238A  3217               	rrcf	??_PWM1,f,c
  8614  00238C  5017               	movf	??_PWM1,w,c
  8615  00238E  6EBE               	movwf	4030,c	;volatile
  8616  002390  0012               	return		;funcret
  8617  002392                     __end_of_PWM1:
  8618                           	opt stack 0
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           postinc0	equ	0xFEE
  8628                           wreg	equ	0xFE8
  8629                           indf2	equ	0xFDF
  8630                           postinc2	equ	0xFDE
  8631                           postdec2	equ	0xFDD
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _handler *****************
  8637 ;; Defined at:
  8638 ;;		line 27 in file "main.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, status,2, status,0, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:       14 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    1
  8659 ;; This function calls:
  8660 ;;		___awmod
  8661 ;;		_updateS2
  8662 ;;		i2_startTMR1
  8663 ;;		i2_updateS1
  8664 ;;		i2_updateS3
  8665 ;; This function is called by:
  8666 ;;		Interrupt level 2
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	intcode
  8671  000008                     __pintcode:
  8672                           	opt stack 0
  8673  000008                     _handler:
  8674                           	opt stack 25
  8675                           
  8676                           ;incstack = 0
  8677  000008  8261               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8678  00000A  EDBF  F00B         	call	int_func,f	;refresh shadow registers
  8679                           tblptru	equ	0xFF8
  8680                           tblptrh	equ	0xFF7
  8681                           tblptrl	equ	0xFF6
  8682                           tablat	equ	0xFF5
  8683                           prodh	equ	0xFF4
  8684                           prodl	equ	0xFF3
  8685                           intcon	equ	0xFF2
  8686                           intcon2	equ	0xFF1
  8687                           postinc0	equ	0xFEE
  8688                           wreg	equ	0xFE8
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696                           	psect	intcode_body
  8697  00177E                     __pintcode_body:
  8698                           	opt stack 25
  8699  00177E                     int_func:
  8700                           	opt stack 25
  8701  00177E  0006               	pop		; remove dummy address from shadow register refresh
  8702  001780  CFFA F007          	movff	pclath,??_handler
  8703  001784  CFFB F008          	movff	pclatu,??_handler+1
  8704  001788  CFE9 F009          	movff	fsr0l,??_handler+2
  8705  00178C  CFEA F00A          	movff	fsr0h,??_handler+3
  8706  001790  CFE1 F00B          	movff	fsr1l,??_handler+4
  8707  001794  CFE2 F00C          	movff	fsr1h,??_handler+5
  8708  001798  CFD9 F00D          	movff	fsr2l,??_handler+6
  8709  00179C  CFDA F00E          	movff	fsr2h,??_handler+7
  8710  0017A0  CFF3 F00F          	movff	prodl,??_handler+8
  8711  0017A4  CFF4 F010          	movff	prodh,??_handler+9
  8712  0017A8  CFF6 F011          	movff	tblptrl,??_handler+10
  8713  0017AC  CFF7 F012          	movff	tblptrh,??_handler+11
  8714  0017B0  CFF8 F013          	movff	tblptru,??_handler+12
  8715  0017B4  CFF5 F014          	movff	tablat,??_handler+13
  8716                           
  8717                           ;main.c: 29: (INTCONbits.GIE = 0);
  8718  0017B8  9EF2               	bcf	intcon,7,c	;volatile
  8719                           
  8720                           ;main.c: 30: if(TMR0IF){
  8721  0017BA  A4F2               	btfss	intcon,2,c	;volatile
  8722  0017BC  D00D               	goto	i2l4174
  8723                           
  8724                           ;main.c: 31: TMR0IF = 0;
  8725  0017BE  94F2               	bcf	intcon,2,c	;volatile
  8726                           
  8727                           ;main.c: 32: seconds++;
  8728  0017C0  4A5E               	infsnz	_seconds,f,c
  8729  0017C2  2A5F               	incf	_seconds+1,f,c
  8730                           
  8731                           ;main.c: 33: TMR0ON = 0;
  8732  0017C4  9ED5               	bcf	4053,7,c	;volatile
  8733                           
  8734                           ;main.c: 36: T0CON = 0b00010111;
  8735  0017C6  0E17               	movlw	23
  8736  0017C8  6ED5               	movwf	4053,c	;volatile
  8737                           
  8738                           ;main.c: 37: TMR0H = 0b10000101;
  8739  0017CA  0E85               	movlw	133
  8740  0017CC  6ED7               	movwf	4055,c	;volatile
  8741                           
  8742                           ;main.c: 38: TMR0L = 0b10101110;
  8743  0017CE  0EAE               	movlw	174
  8744  0017D0  6ED6               	movwf	4054,c	;volatile
  8745                           
  8746                           ;main.c: 39: T0CON = T0CON | 0b10000000;
  8747  0017D2  50D5               	movf	4053,w,c	;volatile
  8748  0017D4  0980               	iorlw	128
  8749  0017D6  6ED5               	movwf	4053,c	;volatile
  8750  0017D8                     i2l4174:
  8751                           
  8752                           ;main.c: 40: }
  8753                           ;main.c: 42: if(TMR1IF){
  8754  0017D8  A09E               	btfss	3998,0,c	;volatile
  8755  0017DA  D089               	goto	i2l172
  8756                           
  8757                           ;main.c: 43: TMR1IF = 0;
  8758  0017DC  909E               	bcf	3998,0,c	;volatile
  8759                           
  8760                           ;main.c: 44: updateS2(S2mode);
  8761  0017DE  C0AB  F001         	movff	_S2mode,updateS2@mode
  8762  0017E2  C0AC  F002         	movff	_S2mode+1,updateS2@mode+1
  8763  0017E6  ECA5  F00E         	call	_updateS2	;wreg free
  8764                           
  8765                           ;main.c: 45: if (S1mode!=10){updateS1(S1mode);}
  8766  0017EA  0E0A               	movlw	10
  8767  0017EC  185C               	xorwf	_S1mode,w,c
  8768  0017EE  105D               	iorwf	_S1mode+1,w,c
  8769  0017F0  B4D8               	btfsc	status,2,c
  8770  0017F2  D006               	goto	i2l4184
  8771  0017F4  C05C  F001         	movff	_S1mode,i2updateS1@mode
  8772  0017F8  C05D  F002         	movff	_S1mode+1,i2updateS1@mode+1
  8773  0017FC  ECD4  F00A         	call	i2_updateS1	;wreg free
  8774  001800                     i2l4184:
  8775                           
  8776                           ;main.c: 46: if (S3mode!=10){updateS3(S3mode);}
  8777  001800  0E0A               	movlw	10
  8778  001802  185A               	xorwf	_S3mode,w,c
  8779  001804  105B               	iorwf	_S3mode+1,w,c
  8780  001806  B4D8               	btfsc	status,2,c
  8781  001808  D006               	goto	i2l4188
  8782  00180A  C05A  F001         	movff	_S3mode,i2updateS3@mode
  8783  00180E  C05B  F002         	movff	_S3mode+1,i2updateS3@mode+1
  8784  001812  ECFF  F00D         	call	i2_updateS3	;wreg free
  8785  001816                     i2l4188:
  8786                           
  8787                           ;main.c: 47: soupSteps ++;
  8788  001816  4A58               	infsnz	_soupSteps,f,c
  8789  001818  2A59               	incf	_soupSteps+1,f,c
  8790                           
  8791                           ;main.c: 48: sodaSteps ++;
  8792  00181A  4A56               	infsnz	_sodaSteps,f,c
  8793  00181C  2A57               	incf	_sodaSteps+1,f,c
  8794                           
  8795                           ;main.c: 50: if(tabState == 0){
  8796  00181E  5054               	movf	_tabState,w,c
  8797  001820  1055               	iorwf	_tabState+1,w,c
  8798  001822  A4D8               	btfss	status,2,c
  8799  001824  D01F               	goto	i2l4204
  8800                           
  8801                           ;main.c: 51: if(sodaSteps > 599 && sodaSteps % 400 == 200){
  8802  001826  BE57               	btfsc	_sodaSteps+1,7,c
  8803  001828  D03C               	goto	i2l4214
  8804  00182A  0E58               	movlw	88
  8805  00182C  5C56               	subwf	_sodaSteps,w,c
  8806  00182E  0E02               	movlw	2
  8807  001830  5857               	subwfb	_sodaSteps+1,w,c
  8808  001832  A0D8               	btfss	status,0,c
  8809  001834  D036               	goto	i2l4214
  8810  001836  C056  F001         	movff	_sodaSteps,___awmod@dividend
  8811  00183A  C057  F002         	movff	_sodaSteps+1,___awmod@dividend+1
  8812  00183E  0E01               	movlw	1
  8813  001840  6E04               	movwf	___awmod@divisor+1,c
  8814  001842  0E90               	movlw	144
  8815  001844  6E03               	movwf	___awmod@divisor,c
  8816  001846  EC61  F010         	call	___awmod	;wreg free
  8817  00184A  0EC8               	movlw	200
  8818  00184C  1801               	xorwf	?___awmod,w,c
  8819  00184E  1002               	iorwf	?___awmod+1,w,c
  8820  001850  A4D8               	btfss	status,2,c
  8821  001852  D027               	goto	i2l4214
  8822                           
  8823                           ;main.c: 52: if(sodaAlign == 1){
  8824  001854  0450               	decf	_sodaAlign,w,c
  8825  001856  1051               	iorwf	_sodaAlign+1,w,c
  8826  001858  A4D8               	btfss	status,2,c
  8827  00185A  D01F               	goto	i2l4212
  8828  00185C                     i2l4200:
  8829                           
  8830                           ;main.c: 53: sodaAlign = 2;
  8831  00185C  0E00               	movlw	0
  8832  00185E  6E51               	movwf	_sodaAlign+1,c
  8833  001860  0E02               	movlw	2
  8834  001862  D01E               	goto	L14
  8835  001864                     i2l4204:
  8836                           
  8837                           ;main.c: 60: else{
  8838                           ;main.c: 61: if(sodaSteps > 499 && sodaSteps % 400 == 100){
  8839  001864  BE57               	btfsc	_sodaSteps+1,7,c
  8840  001866  D01D               	goto	i2l4214
  8841  001868  0EF4               	movlw	244
  8842  00186A  5C56               	subwf	_sodaSteps,w,c
  8843  00186C  0E01               	movlw	1
  8844  00186E  5857               	subwfb	_sodaSteps+1,w,c
  8845  001870  A0D8               	btfss	status,0,c
  8846  001872  D017               	goto	i2l4214
  8847  001874  C056  F001         	movff	_sodaSteps,___awmod@dividend
  8848  001878  C057  F002         	movff	_sodaSteps+1,___awmod@dividend+1
  8849  00187C  0E01               	movlw	1
  8850  00187E  6E04               	movwf	___awmod@divisor+1,c
  8851  001880  0E90               	movlw	144
  8852  001882  6E03               	movwf	___awmod@divisor,c
  8853  001884  EC61  F010         	call	___awmod	;wreg free
  8854  001888  0E64               	movlw	100
  8855  00188A  1801               	xorwf	?___awmod,w,c
  8856  00188C  1002               	iorwf	?___awmod+1,w,c
  8857  00188E  A4D8               	btfss	status,2,c
  8858  001890  D008               	goto	i2l4214
  8859                           
  8860                           ;main.c: 62: if(sodaAlign == 1){
  8861  001892  0450               	decf	_sodaAlign,w,c
  8862  001894  1051               	iorwf	_sodaAlign+1,w,c
  8863  001896  B4D8               	btfsc	status,2,c
  8864  001898  D7E1               	goto	i2l4200
  8865  00189A                     i2l4212:
  8866                           
  8867                           ;main.c: 65: else{
  8868                           ;main.c: 66: sodaAlign = 1;
  8869  00189A  0E00               	movlw	0
  8870  00189C  6E51               	movwf	_sodaAlign+1,c
  8871  00189E  0E01               	movlw	1
  8872  0018A0                     L14:
  8873  0018A0  6E50               	movwf	_sodaAlign,c
  8874  0018A2                     i2l4214:
  8875                           
  8876                           ;main.c: 67: }
  8877                           ;main.c: 68: }
  8878                           ;main.c: 69: }
  8879                           ;main.c: 76: if(soupSteps > 499 && soupSteps % 400 == 100){
  8880  0018A2  BE59               	btfsc	_soupSteps+1,7,c
  8881  0018A4  D021               	goto	i2l4224
  8882  0018A6  0EF4               	movlw	244
  8883  0018A8  5C58               	subwf	_soupSteps,w,c
  8884  0018AA  0E01               	movlw	1
  8885  0018AC  5859               	subwfb	_soupSteps+1,w,c
  8886  0018AE  A0D8               	btfss	status,0,c
  8887  0018B0  D01B               	goto	i2l4224
  8888  0018B2  C058  F001         	movff	_soupSteps,___awmod@dividend
  8889  0018B6  C059  F002         	movff	_soupSteps+1,___awmod@dividend+1
  8890  0018BA  0E01               	movlw	1
  8891  0018BC  6E04               	movwf	___awmod@divisor+1,c
  8892  0018BE  0E90               	movlw	144
  8893  0018C0  6E03               	movwf	___awmod@divisor,c
  8894  0018C2  EC61  F010         	call	___awmod	;wreg free
  8895  0018C6  0E64               	movlw	100
  8896  0018C8  1801               	xorwf	?___awmod,w,c
  8897  0018CA  1002               	iorwf	?___awmod+1,w,c
  8898  0018CC  A4D8               	btfss	status,2,c
  8899  0018CE  D00C               	goto	i2l4224
  8900                           
  8901                           ;main.c: 77: if(soupAlign == 1){soupAlign = 2;}
  8902  0018D0  044E               	decf	_soupAlign,w,c
  8903  0018D2  104F               	iorwf	_soupAlign+1,w,c
  8904  0018D4  A4D8               	btfss	status,2,c
  8905  0018D6  D004               	goto	i2l4222
  8906  0018D8  0E00               	movlw	0
  8907  0018DA  6E4F               	movwf	_soupAlign+1,c
  8908  0018DC  0E02               	movlw	2
  8909  0018DE  D003               	goto	L15
  8910  0018E0                     i2l4222:
  8911                           
  8912                           ;main.c: 78: else{soupAlign = 1;}
  8913  0018E0  0E00               	movlw	0
  8914  0018E2  6E4F               	movwf	_soupAlign+1,c
  8915  0018E4  0E01               	movlw	1
  8916  0018E6                     L15:
  8917  0018E6  6E4E               	movwf	_soupAlign,c
  8918  0018E8                     i2l4224:
  8919                           
  8920                           ;main.c: 79: }
  8921                           ;main.c: 80: TMR1ON = 0;
  8922  0018E8  90CD               	bcf	4045,0,c	;volatile
  8923                           
  8924                           ;main.c: 82: startTMR1();
  8925  0018EA  ECBC  F012         	call	i2_startTMR1	;wreg free
  8926  0018EE                     i2l172:
  8927  0018EE  C014  FFF5         	movff	??_handler+13,tablat
  8928  0018F2  C013  FFF8         	movff	??_handler+12,tblptru
  8929  0018F6  C012  FFF7         	movff	??_handler+11,tblptrh
  8930  0018FA  C011  FFF6         	movff	??_handler+10,tblptrl
  8931  0018FE  C010  FFF4         	movff	??_handler+9,prodh
  8932  001902  C00F  FFF3         	movff	??_handler+8,prodl
  8933  001906  C00E  FFDA         	movff	??_handler+7,fsr2h
  8934  00190A  C00D  FFD9         	movff	??_handler+6,fsr2l
  8935  00190E  C00C  FFE2         	movff	??_handler+5,fsr1h
  8936  001912  C00B  FFE1         	movff	??_handler+4,fsr1l
  8937  001916  C00A  FFEA         	movff	??_handler+3,fsr0h
  8938  00191A  C009  FFE9         	movff	??_handler+2,fsr0l
  8939  00191E  C008  FFFB         	movff	??_handler+1,pclatu
  8940  001922  C007  FFFA         	movff	??_handler,pclath
  8941  001926  9261               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8942  001928  0011               	retfie		f
  8943  00192A                     __end_of_handler:
  8944                           	opt stack 0
  8945                           pclatu	equ	0xFFB
  8946                           pclath	equ	0xFFA
  8947                           tblptru	equ	0xFF8
  8948                           tblptrh	equ	0xFF7
  8949                           tblptrl	equ	0xFF6
  8950                           tablat	equ	0xFF5
  8951                           prodh	equ	0xFF4
  8952                           prodl	equ	0xFF3
  8953                           intcon	equ	0xFF2
  8954                           intcon2	equ	0xFF1
  8955                           postinc0	equ	0xFEE
  8956                           fsr0h	equ	0xFEA
  8957                           fsr0l	equ	0xFE9
  8958                           wreg	equ	0xFE8
  8959                           fsr1h	equ	0xFE2
  8960                           fsr1l	equ	0xFE1
  8961                           indf2	equ	0xFDF
  8962                           postinc2	equ	0xFDE
  8963                           postdec2	equ	0xFDD
  8964                           fsr2h	equ	0xFDA
  8965                           fsr2l	equ	0xFD9
  8966                           status	equ	0xFD8
  8967                           
  8968 ;; *************** function i2_updateS3 *****************
  8969 ;; Defined at:
  8970 ;;		line 157 in file "motors.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;  mode            2    0[COMRAM] int 
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;		None
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;Total ram usage:        3 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; This function calls:
  8991 ;;		Nothing
  8992 ;; This function is called by:
  8993 ;;		_handler
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text36
  8998  001BFE                     __ptext36:
  8999                           	opt stack 0
  9000  001BFE                     i2_updateS3:
  9001                           	opt stack 25
  9002                           
  9003                           ;motors.c: 158: _delay((unsigned long)((5)*(32000000/4000.0)));
  9004                           
  9005                           ;incstack = 0
  9006  001BFE  0E34               	movlw	52
  9007  001C00  6E03               	movwf	??i2_updateS3& (0+255),c
  9008  001C02  0EF2               	movlw	242
  9009  001C04                     i2u781_47:
  9010  001C04  2EE8               	decfsz	wreg,f,c
  9011  001C06  D7FE               	bra	i2u781_47
  9012  001C08  2E03               	decfsz	??i2_updateS3& (0+255),f,c
  9013  001C0A  D7FC               	bra	i2u781_47
  9014                           
  9015                           ;motors.c: 160: if(mode == 0){
  9016  001C0C  5001               	movf	i2updateS3@mode,w,c
  9017  001C0E  1002               	iorwf	i2updateS3@mode+1,w,c
  9018  001C10  A4D8               	btfss	status,2,c
  9019  001C12  D005               	goto	i2l4094
  9020                           
  9021                           ;motors.c: 161: LATEbits.LATE2 = 0;
  9022  001C14  948D               	bcf	3981,2,c	;volatile
  9023                           
  9024                           ;motors.c: 162: LATEbits.LATE1 = 0;
  9025  001C16  928D               	bcf	3981,1,c	;volatile
  9026                           
  9027                           ;motors.c: 163: LATAbits.LATA4 = 0;
  9028  001C18  9889               	bcf	3977,4,c	;volatile
  9029                           
  9030                           ;motors.c: 164: LATDbits.LATD0 = 0;
  9031  001C1A  908C               	bcf	3980,0,c	;volatile
  9032                           
  9033                           ;motors.c: 165: }
  9034  001C1C  0012               	return	
  9035  001C1E                     i2l4094:
  9036                           
  9037                           ;motors.c: 166: else if(mode == 4){
  9038  001C1E  0E04               	movlw	4
  9039  001C20  1801               	xorwf	i2updateS3@mode,w,c
  9040  001C22  1002               	iorwf	i2updateS3@mode+1,w,c
  9041  001C24  A4D8               	btfss	status,2,c
  9042  001C26  D005               	goto	i2l4098
  9043                           
  9044                           ;motors.c: 167: LATEbits.LATE2 = 1;
  9045  001C28  848D               	bsf	3981,2,c	;volatile
  9046                           
  9047                           ;motors.c: 168: LATEbits.LATE1 = 0;
  9048  001C2A  928D               	bcf	3981,1,c	;volatile
  9049                           
  9050                           ;motors.c: 169: LATAbits.LATA4 = 0;
  9051  001C2C  9889               	bcf	3977,4,c	;volatile
  9052                           
  9053                           ;motors.c: 170: LATDbits.LATD0 = 0;
  9054  001C2E  908C               	bcf	3980,0,c	;volatile
  9055                           
  9056                           ;motors.c: 171: }
  9057  001C30  0012               	return	
  9058  001C32                     i2l4098:
  9059                           
  9060                           ;motors.c: 172: else if(mode == 3){
  9061  001C32  0E03               	movlw	3
  9062  001C34  1801               	xorwf	i2updateS3@mode,w,c
  9063  001C36  1002               	iorwf	i2updateS3@mode+1,w,c
  9064  001C38  A4D8               	btfss	status,2,c
  9065  001C3A  D042               	goto	i2l4122
  9066                           
  9067                           ;motors.c: 173: t3++;
  9068  001C3C  4A42               	infsnz	_t3,f,c
  9069  001C3E  2A43               	incf	_t3+1,f,c
  9070                           
  9071                           ;motors.c: 174: if (t3>8) {t3=1;}
  9072  001C40  BE43               	btfsc	_t3+1,7,c
  9073  001C42  D00A               	goto	i2l4106
  9074  001C44  5043               	movf	_t3+1,w,c
  9075  001C46  E104               	bnz	i2u452_40
  9076  001C48  0E09               	movlw	9
  9077  001C4A  5C42               	subwf	_t3,w,c
  9078  001C4C  A0D8               	btfss	status,0,c
  9079  001C4E  D004               	goto	i2l4106
  9080  001C50                     i2u452_40:
  9081  001C50  0E00               	movlw	0
  9082  001C52  6E43               	movwf	_t3+1,c
  9083  001C54  0E01               	movlw	1
  9084  001C56  6E42               	movwf	_t3,c
  9085  001C58                     i2l4106:
  9086                           
  9087                           ;motors.c: 175: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  9088  001C58  0442               	decf	_t3,w,c
  9089  001C5A  1043               	iorwf	_t3+1,w,c
  9090  001C5C  B4D8               	btfsc	status,2,c
  9091  001C5E  D005               	goto	i2l550
  9092  001C60  0E08               	movlw	8
  9093  001C62  1842               	xorwf	_t3,w,c
  9094  001C64  1043               	iorwf	_t3+1,w,c
  9095  001C66  A4D8               	btfss	status,2,c
  9096  001C68  D002               	goto	i2l548
  9097  001C6A                     i2l550:
  9098  001C6A  848D               	bsf	3981,2,c	;volatile
  9099  001C6C  D001               	goto	i2l4110
  9100  001C6E                     i2l548:
  9101                           
  9102                           ;motors.c: 176: else{LATEbits.LATE2 = 0;}
  9103  001C6E  948D               	bcf	3981,2,c	;volatile
  9104  001C70                     i2l4110:
  9105                           
  9106                           ;motors.c: 177: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  9107  001C70  0E02               	movlw	2
  9108  001C72  1842               	xorwf	_t3,w,c
  9109  001C74  1043               	iorwf	_t3+1,w,c
  9110  001C76  B4D8               	btfsc	status,2,c
  9111  001C78  D005               	goto	i2l554
  9112  001C7A  0E07               	movlw	7
  9113  001C7C  1842               	xorwf	_t3,w,c
  9114  001C7E  1043               	iorwf	_t3+1,w,c
  9115  001C80  A4D8               	btfss	status,2,c
  9116  001C82  D002               	goto	i2l552
  9117  001C84                     i2l554:
  9118  001C84  828D               	bsf	3981,1,c	;volatile
  9119  001C86  D001               	goto	i2l4114
  9120  001C88                     i2l552:
  9121                           
  9122                           ;motors.c: 178: else{LATEbits.LATE1 = 0;}
  9123  001C88  928D               	bcf	3981,1,c	;volatile
  9124  001C8A                     i2l4114:
  9125                           
  9126                           ;motors.c: 179: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  9127  001C8A  0E03               	movlw	3
  9128  001C8C  1842               	xorwf	_t3,w,c
  9129  001C8E  1043               	iorwf	_t3+1,w,c
  9130  001C90  B4D8               	btfsc	status,2,c
  9131  001C92  D005               	goto	i2l558
  9132  001C94  0E06               	movlw	6
  9133  001C96  1842               	xorwf	_t3,w,c
  9134  001C98  1043               	iorwf	_t3+1,w,c
  9135  001C9A  A4D8               	btfss	status,2,c
  9136  001C9C  D002               	goto	i2l556
  9137  001C9E                     i2l558:
  9138  001C9E  8889               	bsf	3977,4,c	;volatile
  9139  001CA0  D001               	goto	i2l4118
  9140  001CA2                     i2l556:
  9141                           
  9142                           ;motors.c: 180: else{LATAbits.LATA4 = 0;}
  9143  001CA2  9889               	bcf	3977,4,c	;volatile
  9144  001CA4                     i2l4118:
  9145                           
  9146                           ;motors.c: 181: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  9147  001CA4  0E04               	movlw	4
  9148  001CA6  1842               	xorwf	_t3,w,c
  9149  001CA8  1043               	iorwf	_t3+1,w,c
  9150  001CAA  B4D8               	btfsc	status,2,c
  9151  001CAC  D005               	goto	i2l562
  9152  001CAE  0E05               	movlw	5
  9153  001CB0  1842               	xorwf	_t3,w,c
  9154  001CB2  1043               	iorwf	_t3+1,w,c
  9155  001CB4  A4D8               	btfss	status,2,c
  9156  001CB6  D002               	goto	i2l560
  9157  001CB8                     i2l562:
  9158  001CB8  808C               	bsf	3980,0,c	;volatile
  9159  001CBA  0012               	return	
  9160  001CBC                     i2l560:
  9161                           
  9162                           ;motors.c: 182: else{LATDbits.LATD0 = 0;}
  9163  001CBC  908C               	bcf	3980,0,c	;volatile
  9164                           
  9165                           ;motors.c: 183: }
  9166  001CBE  0012               	return	
  9167  001CC0                     i2l4122:
  9168                           
  9169                           ;motors.c: 184: else{
  9170                           ;motors.c: 185: if(mode == 1){
  9171  001CC0  0401               	decf	i2updateS3@mode,w,c
  9172  001CC2  1002               	iorwf	i2updateS3@mode+1,w,c
  9173  001CC4  A4D8               	btfss	status,2,c
  9174  001CC6  D00E               	goto	i2l4130
  9175                           
  9176                           ;motors.c: 186: s3 ++;
  9177  001CC8  4A48               	infsnz	_s3,f,c
  9178  001CCA  2A49               	incf	_s3+1,f,c
  9179                           
  9180                           ;motors.c: 187: if (s3>4) {s3=1;}
  9181  001CCC  BE49               	btfsc	_s3+1,7,c
  9182  001CCE  D01D               	goto	i2l4138
  9183  001CD0  5049               	movf	_s3+1,w,c
  9184  001CD2  E104               	bnz	i2u462_40
  9185  001CD4  0E05               	movlw	5
  9186  001CD6  5C48               	subwf	_s3,w,c
  9187  001CD8  A0D8               	btfss	status,0,c
  9188  001CDA  D017               	goto	i2l4138
  9189  001CDC                     i2u462_40:
  9190  001CDC  0E00               	movlw	0
  9191  001CDE  6E49               	movwf	_s3+1,c
  9192  001CE0  0E01               	movlw	1
  9193  001CE2  D012               	goto	L16
  9194  001CE4                     i2l4130:
  9195                           
  9196                           ;motors.c: 189: else if(mode == 2){
  9197  001CE4  0E02               	movlw	2
  9198  001CE6  1801               	xorwf	i2updateS3@mode,w,c
  9199  001CE8  1002               	iorwf	i2updateS3@mode+1,w,c
  9200  001CEA  A4D8               	btfss	status,2,c
  9201  001CEC  D00E               	goto	i2l4138
  9202                           
  9203                           ;motors.c: 190: s3 --;
  9204  001CEE  0648               	decf	_s3,f,c
  9205  001CF0  A0D8               	btfss	status,0,c
  9206  001CF2  0649               	decf	_s3+1,f,c
  9207                           
  9208                           ;motors.c: 191: if (s3<1) {s3=4;}
  9209  001CF4  BE49               	btfsc	_s3+1,7,c
  9210  001CF6  D005               	goto	i2l4136
  9211  001CF8  5049               	movf	_s3+1,w,c
  9212  001CFA  E107               	bnz	i2l4138
  9213  001CFC  0448               	decf	_s3,w,c
  9214  001CFE  B0D8               	btfsc	status,0,c
  9215  001D00  D004               	goto	i2l4138
  9216  001D02                     i2l4136:
  9217  001D02  0E00               	movlw	0
  9218  001D04  6E49               	movwf	_s3+1,c
  9219  001D06  0E04               	movlw	4
  9220  001D08                     L16:
  9221  001D08  6E48               	movwf	_s3,c
  9222  001D0A                     i2l4138:
  9223                           
  9224                           ;motors.c: 192: }
  9225                           ;motors.c: 193: if (s3 == 1){LATEbits.LATE2 = 1;}
  9226  001D0A  0448               	decf	_s3,w,c
  9227  001D0C  1049               	iorwf	_s3+1,w,c
  9228  001D0E  A4D8               	btfss	status,2,c
  9229  001D10  D002               	goto	i2l570
  9230  001D12  848D               	bsf	3981,2,c	;volatile
  9231  001D14  D001               	goto	i2l4142
  9232  001D16                     i2l570:
  9233                           
  9234                           ;motors.c: 194: else{LATEbits.LATE2 = 0;}
  9235  001D16  948D               	bcf	3981,2,c	;volatile
  9236  001D18                     i2l4142:
  9237                           
  9238                           ;motors.c: 195: if (s3 == 2){LATEbits.LATE1 = 1;}
  9239  001D18  0E02               	movlw	2
  9240  001D1A  1848               	xorwf	_s3,w,c
  9241  001D1C  1049               	iorwf	_s3+1,w,c
  9242  001D1E  A4D8               	btfss	status,2,c
  9243  001D20  D002               	goto	i2l572
  9244  001D22  828D               	bsf	3981,1,c	;volatile
  9245  001D24  D001               	goto	i2l4146
  9246  001D26                     i2l572:
  9247                           
  9248                           ;motors.c: 196: else{LATEbits.LATE1 = 0;}
  9249  001D26  928D               	bcf	3981,1,c	;volatile
  9250  001D28                     i2l4146:
  9251                           
  9252                           ;motors.c: 197: if (s3 == 3){LATAbits.LATA4 = 1;}
  9253  001D28  0E03               	movlw	3
  9254  001D2A  1848               	xorwf	_s3,w,c
  9255  001D2C  1049               	iorwf	_s3+1,w,c
  9256  001D2E  A4D8               	btfss	status,2,c
  9257  001D30  D002               	goto	i2l574
  9258  001D32  8889               	bsf	3977,4,c	;volatile
  9259  001D34  D001               	goto	i2l4150
  9260  001D36                     i2l574:
  9261                           
  9262                           ;motors.c: 198: else{LATAbits.LATA4 = 0;}
  9263  001D36  9889               	bcf	3977,4,c	;volatile
  9264  001D38                     i2l4150:
  9265                           
  9266                           ;motors.c: 199: if (s3 == 4){LATDbits.LATD0 = 1;}
  9267  001D38  0E04               	movlw	4
  9268  001D3A  1848               	xorwf	_s3,w,c
  9269  001D3C  1049               	iorwf	_s3+1,w,c
  9270  001D3E  A4D8               	btfss	status,2,c
  9271  001D40  D002               	goto	i2l576
  9272  001D42  808C               	bsf	3980,0,c	;volatile
  9273  001D44  0012               	return	
  9274  001D46                     i2l576:
  9275                           
  9276                           ;motors.c: 200: else{LATDbits.LATD0 = 0;}
  9277  001D46  908C               	bcf	3980,0,c	;volatile
  9278  001D48  0012               	return	
  9279  001D4A                     __end_ofi2_updateS3:
  9280                           	opt stack 0
  9281                           pclatu	equ	0xFFB
  9282                           pclath	equ	0xFFA
  9283                           tblptru	equ	0xFF8
  9284                           tblptrh	equ	0xFF7
  9285                           tblptrl	equ	0xFF6
  9286                           tablat	equ	0xFF5
  9287                           prodh	equ	0xFF4
  9288                           prodl	equ	0xFF3
  9289                           intcon	equ	0xFF2
  9290                           intcon2	equ	0xFF1
  9291                           postinc0	equ	0xFEE
  9292                           fsr0h	equ	0xFEA
  9293                           fsr0l	equ	0xFE9
  9294                           wreg	equ	0xFE8
  9295                           fsr1h	equ	0xFE2
  9296                           fsr1l	equ	0xFE1
  9297                           indf2	equ	0xFDF
  9298                           postinc2	equ	0xFDE
  9299                           postdec2	equ	0xFDD
  9300                           fsr2h	equ	0xFDA
  9301                           fsr2l	equ	0xFD9
  9302                           status	equ	0xFD8
  9303                           
  9304 ;; *************** function i2_updateS1 *****************
  9305 ;; Defined at:
  9306 ;;		line 55 in file "motors.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  mode            2    0[COMRAM] int 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      void 
  9313 ;; Registers used:
  9314 ;;		wreg, status,2, status,0
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;Total ram usage:        3 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; This function calls:
  9327 ;;		Nothing
  9328 ;; This function is called by:
  9329 ;;		_handler
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           	psect	text37
  9334  0015A8                     __ptext37:
  9335                           	opt stack 0
  9336  0015A8                     i2_updateS1:
  9337                           	opt stack 25
  9338                           
  9339                           ;motors.c: 56: _delay((unsigned long)((5)*(32000000/4000.0)));
  9340                           
  9341                           ;incstack = 0
  9342  0015A8  0E34               	movlw	52
  9343  0015AA  6E03               	movwf	??i2_updateS1& (0+255),c
  9344  0015AC  0EF2               	movlw	242
  9345  0015AE                     i2u782_47:
  9346  0015AE  2EE8               	decfsz	wreg,f,c
  9347  0015B0  D7FE               	bra	i2u782_47
  9348  0015B2  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9349  0015B4  D7FC               	bra	i2u782_47
  9350                           
  9351                           ;motors.c: 58: if(mode == 0){
  9352  0015B6  5001               	movf	i2updateS1@mode,w,c
  9353  0015B8  1002               	iorwf	i2updateS1@mode+1,w,c
  9354  0015BA  A4D8               	btfss	status,2,c
  9355  0015BC  D005               	goto	i2l4000
  9356                           
  9357                           ;motors.c: 59: LATDbits.LATD1 = 0;
  9358  0015BE  928C               	bcf	3980,1,c	;volatile
  9359                           
  9360                           ;motors.c: 60: LATBbits.LATB3 = 0;
  9361  0015C0  968A               	bcf	3978,3,c	;volatile
  9362                           
  9363                           ;motors.c: 61: LATBbits.LATB2 = 0;
  9364  0015C2  948A               	bcf	3978,2,c	;volatile
  9365                           
  9366                           ;motors.c: 62: LATBbits.LATB0 = 0;
  9367  0015C4  908A               	bcf	3978,0,c	;volatile
  9368                           
  9369                           ;motors.c: 63: }
  9370  0015C6  0012               	return	
  9371  0015C8                     i2l4000:
  9372                           
  9373                           ;motors.c: 64: else if(mode == 3){
  9374  0015C8  0E03               	movlw	3
  9375  0015CA  1801               	xorwf	i2updateS1@mode,w,c
  9376  0015CC  1002               	iorwf	i2updateS1@mode+1,w,c
  9377  0015CE  A4D8               	btfss	status,2,c
  9378  0015D0  D049               	goto	i2l4026
  9379                           
  9380                           ;motors.c: 65: t++;
  9381  0015D2  4A46               	infsnz	_t,f,c
  9382  0015D4  2A47               	incf	_t+1,f,c
  9383                           
  9384                           ;motors.c: 66: if (t>8) {t=1;}
  9385  0015D6  BE47               	btfsc	_t+1,7,c
  9386  0015D8  D00A               	goto	i2l4008
  9387  0015DA  5047               	movf	_t+1,w,c
  9388  0015DC  E104               	bnz	i2u422_40
  9389  0015DE  0E09               	movlw	9
  9390  0015E0  5C46               	subwf	_t,w,c
  9391  0015E2  A0D8               	btfss	status,0,c
  9392  0015E4  D004               	goto	i2l4008
  9393  0015E6                     i2u422_40:
  9394  0015E6  0E00               	movlw	0
  9395  0015E8  6E47               	movwf	_t+1,c
  9396  0015EA  0E01               	movlw	1
  9397  0015EC  6E46               	movwf	_t,c
  9398  0015EE                     i2l4008:
  9399                           
  9400                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  9401  0015EE  0E34               	movlw	52
  9402  0015F0  6E03               	movwf	??i2_updateS1& (0+255),c
  9403  0015F2  0EF2               	movlw	242
  9404  0015F4                     i2u783_47:
  9405  0015F4  2EE8               	decfsz	wreg,f,c
  9406  0015F6  D7FE               	bra	i2u783_47
  9407  0015F8  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9408  0015FA  D7FC               	bra	i2u783_47
  9409                           
  9410                           ;motors.c: 68: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  9411  0015FC  0446               	decf	_t,w,c
  9412  0015FE  1047               	iorwf	_t+1,w,c
  9413  001600  B4D8               	btfsc	status,2,c
  9414  001602  D005               	goto	i2l458
  9415  001604  0E08               	movlw	8
  9416  001606  1846               	xorwf	_t,w,c
  9417  001608  1047               	iorwf	_t+1,w,c
  9418  00160A  A4D8               	btfss	status,2,c
  9419  00160C  D002               	goto	i2l456
  9420  00160E                     i2l458:
  9421  00160E  828C               	bsf	3980,1,c	;volatile
  9422  001610  D001               	goto	i2l4014
  9423  001612                     i2l456:
  9424                           
  9425                           ;motors.c: 69: else{LATDbits.LATD1 = 0;}
  9426  001612  928C               	bcf	3980,1,c	;volatile
  9427  001614                     i2l4014:
  9428                           
  9429                           ;motors.c: 70: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  9430  001614  0E02               	movlw	2
  9431  001616  1846               	xorwf	_t,w,c
  9432  001618  1047               	iorwf	_t+1,w,c
  9433  00161A  B4D8               	btfsc	status,2,c
  9434  00161C  D005               	goto	i2l462
  9435  00161E  0E07               	movlw	7
  9436  001620  1846               	xorwf	_t,w,c
  9437  001622  1047               	iorwf	_t+1,w,c
  9438  001624  A4D8               	btfss	status,2,c
  9439  001626  D002               	goto	i2l460
  9440  001628                     i2l462:
  9441  001628  868A               	bsf	3978,3,c	;volatile
  9442  00162A  D001               	goto	i2l4018
  9443  00162C                     i2l460:
  9444                           
  9445                           ;motors.c: 71: else{LATBbits.LATB3 = 0;}
  9446  00162C  968A               	bcf	3978,3,c	;volatile
  9447  00162E                     i2l4018:
  9448                           
  9449                           ;motors.c: 72: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  9450  00162E  0E03               	movlw	3
  9451  001630  1846               	xorwf	_t,w,c
  9452  001632  1047               	iorwf	_t+1,w,c
  9453  001634  B4D8               	btfsc	status,2,c
  9454  001636  D005               	goto	i2l466
  9455  001638  0E06               	movlw	6
  9456  00163A  1846               	xorwf	_t,w,c
  9457  00163C  1047               	iorwf	_t+1,w,c
  9458  00163E  A4D8               	btfss	status,2,c
  9459  001640  D002               	goto	i2l464
  9460  001642                     i2l466:
  9461  001642  848A               	bsf	3978,2,c	;volatile
  9462  001644  D001               	goto	i2l4022
  9463  001646                     i2l464:
  9464                           
  9465                           ;motors.c: 73: else{LATBbits.LATB2 = 0;}
  9466  001646  948A               	bcf	3978,2,c	;volatile
  9467  001648                     i2l4022:
  9468                           
  9469                           ;motors.c: 74: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  9470  001648  0E04               	movlw	4
  9471  00164A  1846               	xorwf	_t,w,c
  9472  00164C  1047               	iorwf	_t+1,w,c
  9473  00164E  B4D8               	btfsc	status,2,c
  9474  001650  D005               	goto	i2l470
  9475  001652  0E05               	movlw	5
  9476  001654  1846               	xorwf	_t,w,c
  9477  001656  1047               	iorwf	_t+1,w,c
  9478  001658  A4D8               	btfss	status,2,c
  9479  00165A  D002               	goto	i2l468
  9480  00165C                     i2l470:
  9481  00165C  808A               	bsf	3978,0,c	;volatile
  9482  00165E  0012               	return	
  9483  001660                     i2l468:
  9484                           
  9485                           ;motors.c: 75: else{LATBbits.LATB0 = 0;}
  9486  001660  908A               	bcf	3978,0,c	;volatile
  9487                           
  9488                           ;motors.c: 76: }
  9489  001662  0012               	return	
  9490  001664                     i2l4026:
  9491                           
  9492                           ;motors.c: 77: else{
  9493                           ;motors.c: 78: _delay((unsigned long)((10)*(32000000/4000.0)));
  9494  001664  0E68               	movlw	104
  9495  001666  6E03               	movwf	??i2_updateS1& (0+255),c
  9496  001668  0EE4               	movlw	228
  9497  00166A                     i2u784_47:
  9498  00166A  2EE8               	decfsz	wreg,f,c
  9499  00166C  D7FE               	bra	i2u784_47
  9500  00166E  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9501  001670  D7FC               	bra	i2u784_47
  9502  001672  D000               	nop2	
  9503                           
  9504                           ;motors.c: 80: if(mode == 1 || mode == 5){
  9505  001674  0401               	decf	i2updateS1@mode,w,c
  9506  001676  1002               	iorwf	i2updateS1@mode+1,w,c
  9507  001678  B4D8               	btfsc	status,2,c
  9508  00167A  D005               	goto	i2l4032
  9509  00167C  0E05               	movlw	5
  9510  00167E  1801               	xorwf	i2updateS1@mode,w,c
  9511  001680  1002               	iorwf	i2updateS1@mode+1,w,c
  9512  001682  A4D8               	btfss	status,2,c
  9513  001684  D00E               	goto	i2l4038
  9514  001686                     i2l4032:
  9515                           
  9516                           ;motors.c: 81: s1 ++;
  9517  001686  4A4C               	infsnz	_s1,f,c
  9518  001688  2A4D               	incf	_s1+1,f,c
  9519                           
  9520                           ;motors.c: 82: if (s1>4) {s1=1;}
  9521  00168A  BE4D               	btfsc	_s1+1,7,c
  9522  00168C  D022               	goto	i2l4048
  9523  00168E  504D               	movf	_s1+1,w,c
  9524  001690  E104               	bnz	i2u433_40
  9525  001692  0E05               	movlw	5
  9526  001694  5C4C               	subwf	_s1,w,c
  9527  001696  A0D8               	btfss	status,0,c
  9528  001698  D01C               	goto	i2l4048
  9529  00169A                     i2u433_40:
  9530  00169A  0E00               	movlw	0
  9531  00169C  6E4D               	movwf	_s1+1,c
  9532  00169E  0E01               	movlw	1
  9533  0016A0  D017               	goto	L17
  9534  0016A2                     i2l4038:
  9535                           
  9536                           ;motors.c: 85: else if(mode == 2 || mode==6){
  9537  0016A2  0E02               	movlw	2
  9538  0016A4  1801               	xorwf	i2updateS1@mode,w,c
  9539  0016A6  1002               	iorwf	i2updateS1@mode+1,w,c
  9540  0016A8  B4D8               	btfsc	status,2,c
  9541  0016AA  D005               	goto	i2l4042
  9542  0016AC  0E06               	movlw	6
  9543  0016AE  1801               	xorwf	i2updateS1@mode,w,c
  9544  0016B0  1002               	iorwf	i2updateS1@mode+1,w,c
  9545  0016B2  A4D8               	btfss	status,2,c
  9546  0016B4  D00E               	goto	i2l4048
  9547  0016B6                     i2l4042:
  9548                           
  9549                           ;motors.c: 86: s1 --;
  9550  0016B6  064C               	decf	_s1,f,c
  9551  0016B8  A0D8               	btfss	status,0,c
  9552  0016BA  064D               	decf	_s1+1,f,c
  9553                           
  9554                           ;motors.c: 87: if (s1<1) {s1=4;}
  9555  0016BC  BE4D               	btfsc	_s1+1,7,c
  9556  0016BE  D005               	goto	i2l4046
  9557  0016C0  504D               	movf	_s1+1,w,c
  9558  0016C2  E107               	bnz	i2l4048
  9559  0016C4  044C               	decf	_s1,w,c
  9560  0016C6  B0D8               	btfsc	status,0,c
  9561  0016C8  D004               	goto	i2l4048
  9562  0016CA                     i2l4046:
  9563  0016CA  0E00               	movlw	0
  9564  0016CC  6E4D               	movwf	_s1+1,c
  9565  0016CE  0E04               	movlw	4
  9566  0016D0                     L17:
  9567  0016D0  6E4C               	movwf	_s1,c
  9568  0016D2                     i2l4048:
  9569                           
  9570                           ;motors.c: 88: }
  9571                           ;motors.c: 90: if(mode == 1 || mode ==2){
  9572  0016D2  0401               	decf	i2updateS1@mode,w,c
  9573  0016D4  1002               	iorwf	i2updateS1@mode+1,w,c
  9574  0016D6  B4D8               	btfsc	status,2,c
  9575  0016D8  D005               	goto	i2l4052
  9576  0016DA  0E02               	movlw	2
  9577  0016DC  1801               	xorwf	i2updateS1@mode,w,c
  9578  0016DE  1002               	iorwf	i2updateS1@mode+1,w,c
  9579  0016E0  A4D8               	btfss	status,2,c
  9580  0016E2  D01F               	goto	i2l4068
  9581  0016E4                     i2l4052:
  9582                           
  9583                           ;motors.c: 91: if (s1 == 1){LATDbits.LATD1 = 1;}
  9584  0016E4  044C               	decf	_s1,w,c
  9585  0016E6  104D               	iorwf	_s1+1,w,c
  9586  0016E8  A4D8               	btfss	status,2,c
  9587  0016EA  D002               	goto	i2l485
  9588  0016EC  828C               	bsf	3980,1,c	;volatile
  9589  0016EE  D001               	goto	i2l4056
  9590  0016F0                     i2l485:
  9591                           
  9592                           ;motors.c: 92: else{LATDbits.LATD1 = 0;}
  9593  0016F0  928C               	bcf	3980,1,c	;volatile
  9594  0016F2                     i2l4056:
  9595                           
  9596                           ;motors.c: 93: if (s1 == 2){LATBbits.LATB3 = 1;}
  9597  0016F2  0E02               	movlw	2
  9598  0016F4  184C               	xorwf	_s1,w,c
  9599  0016F6  104D               	iorwf	_s1+1,w,c
  9600  0016F8  A4D8               	btfss	status,2,c
  9601  0016FA  D002               	goto	i2l487
  9602  0016FC  868A               	bsf	3978,3,c	;volatile
  9603  0016FE  D001               	goto	i2l4060
  9604  001700                     i2l487:
  9605                           
  9606                           ;motors.c: 94: else{LATBbits.LATB3 = 0;}
  9607  001700  968A               	bcf	3978,3,c	;volatile
  9608  001702                     i2l4060:
  9609                           
  9610                           ;motors.c: 95: if (s1 == 3){LATBbits.LATB2 = 1;}
  9611  001702  0E03               	movlw	3
  9612  001704  184C               	xorwf	_s1,w,c
  9613  001706  104D               	iorwf	_s1+1,w,c
  9614  001708  A4D8               	btfss	status,2,c
  9615  00170A  D002               	goto	i2l489
  9616  00170C  848A               	bsf	3978,2,c	;volatile
  9617  00170E  D001               	goto	i2l4064
  9618  001710                     i2l489:
  9619                           
  9620                           ;motors.c: 96: else{LATBbits.LATB2 = 0;}
  9621  001710  948A               	bcf	3978,2,c	;volatile
  9622  001712                     i2l4064:
  9623                           
  9624                           ;motors.c: 97: if (s1 == 4){LATBbits.LATB0 = 1;}
  9625  001712  0E04               	movlw	4
  9626  001714  184C               	xorwf	_s1,w,c
  9627  001716  104D               	iorwf	_s1+1,w,c
  9628  001718  A4D8               	btfss	status,2,c
  9629  00171A  D002               	goto	i2l491
  9630  00171C  808A               	bsf	3978,0,c	;volatile
  9631  00171E  D001               	goto	i2l4068
  9632  001720                     i2l491:
  9633                           
  9634                           ;motors.c: 98: else{LATBbits.LATB0 = 0;}
  9635  001720  908A               	bcf	3978,0,c	;volatile
  9636  001722                     i2l4068:
  9637                           
  9638                           ;motors.c: 99: }
  9639                           ;motors.c: 100: if(mode == 5 || mode ==6){
  9640  001722  0E05               	movlw	5
  9641  001724  1801               	xorwf	i2updateS1@mode,w,c
  9642  001726  1002               	iorwf	i2updateS1@mode+1,w,c
  9643  001728  B4D8               	btfsc	status,2,c
  9644  00172A  D005               	goto	i2l4072
  9645  00172C  0E06               	movlw	6
  9646  00172E  1801               	xorwf	i2updateS1@mode,w,c
  9647  001730  1002               	iorwf	i2updateS1@mode+1,w,c
  9648  001732  A4D8               	btfss	status,2,c
  9649  001734  0012               	return	
  9650  001736                     i2l4072:
  9651                           
  9652                           ;motors.c: 101: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  9653  001736  044C               	decf	_s1,w,c
  9654  001738  104D               	iorwf	_s1+1,w,c
  9655  00173A  A4D8               	btfss	status,2,c
  9656  00173C  D004               	goto	i2l4076
  9657  00173E  828C               	bsf	3980,1,c	;volatile
  9658  001740  868A               	bsf	3978,3,c	;volatile
  9659  001742  948A               	bcf	3978,2,c	;volatile
  9660  001744  908A               	bcf	3978,0,c	;volatile
  9661  001746                     i2l4076:
  9662                           
  9663                           ;motors.c: 102: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  9664  001746  0E02               	movlw	2
  9665  001748  184C               	xorwf	_s1,w,c
  9666  00174A  104D               	iorwf	_s1+1,w,c
  9667  00174C  A4D8               	btfss	status,2,c
  9668  00174E  D004               	goto	i2l4080
  9669  001750  928C               	bcf	3980,1,c	;volatile
  9670  001752  868A               	bsf	3978,3,c	;volatile
  9671  001754  848A               	bsf	3978,2,c	;volatile
  9672  001756  908A               	bcf	3978,0,c	;volatile
  9673  001758                     i2l4080:
  9674                           
  9675                           ;motors.c: 103: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  9676  001758  0E03               	movlw	3
  9677  00175A  184C               	xorwf	_s1,w,c
  9678  00175C  104D               	iorwf	_s1+1,w,c
  9679  00175E  A4D8               	btfss	status,2,c
  9680  001760  D004               	goto	i2l4084
  9681  001762  928C               	bcf	3980,1,c	;volatile
  9682  001764  968A               	bcf	3978,3,c	;volatile
  9683  001766  848A               	bsf	3978,2,c	;volatile
  9684  001768  808A               	bsf	3978,0,c	;volatile
  9685  00176A                     i2l4084:
  9686                           
  9687                           ;motors.c: 104: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  9688  00176A  0E04               	movlw	4
  9689  00176C  184C               	xorwf	_s1,w,c
  9690  00176E  104D               	iorwf	_s1+1,w,c
  9691  001770  A4D8               	btfss	status,2,c
  9692  001772  0012               	return	
  9693  001774  828C               	bsf	3980,1,c	;volatile
  9694  001776  968A               	bcf	3978,3,c	;volatile
  9695  001778  948A               	bcf	3978,2,c	;volatile
  9696  00177A  808A               	bsf	3978,0,c	;volatile
  9697  00177C  0012               	return	
  9698  00177E                     __end_ofi2_updateS1:
  9699                           	opt stack 0
  9700                           pclatu	equ	0xFFB
  9701                           pclath	equ	0xFFA
  9702                           tblptru	equ	0xFF8
  9703                           tblptrh	equ	0xFF7
  9704                           tblptrl	equ	0xFF6
  9705                           tablat	equ	0xFF5
  9706                           prodh	equ	0xFF4
  9707                           prodl	equ	0xFF3
  9708                           intcon	equ	0xFF2
  9709                           intcon2	equ	0xFF1
  9710                           postinc0	equ	0xFEE
  9711                           fsr0h	equ	0xFEA
  9712                           fsr0l	equ	0xFE9
  9713                           wreg	equ	0xFE8
  9714                           fsr1h	equ	0xFE2
  9715                           fsr1l	equ	0xFE1
  9716                           indf2	equ	0xFDF
  9717                           postinc2	equ	0xFDE
  9718                           postdec2	equ	0xFDD
  9719                           fsr2h	equ	0xFDA
  9720                           fsr2l	equ	0xFD9
  9721                           status	equ	0xFD8
  9722                           
  9723 ;; *************** function i2_startTMR1 *****************
  9724 ;; Defined at:
  9725 ;;		line 24 in file "logic.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;		None
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;		None
  9730 ;; Return value:  Size  Location     Type
  9731 ;;                  2    0[None  ] int 
  9732 ;; Registers used:
  9733 ;;		wreg, status,2
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;Total ram usage:        0 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_handler
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text38
  9753  002578                     __ptext38:
  9754                           	opt stack 0
  9755  002578                     i2_startTMR1:
  9756                           	opt stack 25
  9757                           
  9758                           ;logic.c: 25: T1CON = 0b10110000;
  9759                           
  9760                           ;incstack = 0
  9761  002578  0EB0               	movlw	176
  9762  00257A  6ECD               	movwf	4045,c	;volatile
  9763                           
  9764                           ;logic.c: 26: TMR1H = 0b11101001;
  9765  00257C  0EE9               	movlw	233
  9766  00257E  6ECF               	movwf	4047,c	;volatile
  9767                           
  9768                           ;logic.c: 27: TMR1L = 0b01011011;
  9769  002580  0E5B               	movlw	91
  9770  002582  6ECE               	movwf	4046,c	;volatile
  9771                           
  9772                           ;logic.c: 28: TMR1ON = 1;
  9773  002584  80CD               	bsf	4045,0,c	;volatile
  9774  002586  0012               	return		;funcret
  9775  002588                     __end_ofi2_startTMR1:
  9776                           	opt stack 0
  9777                           pclatu	equ	0xFFB
  9778                           pclath	equ	0xFFA
  9779                           tblptru	equ	0xFF8
  9780                           tblptrh	equ	0xFF7
  9781                           tblptrl	equ	0xFF6
  9782                           tablat	equ	0xFF5
  9783                           prodh	equ	0xFF4
  9784                           prodl	equ	0xFF3
  9785                           intcon	equ	0xFF2
  9786                           intcon2	equ	0xFF1
  9787                           postinc0	equ	0xFEE
  9788                           fsr0h	equ	0xFEA
  9789                           fsr0l	equ	0xFE9
  9790                           wreg	equ	0xFE8
  9791                           fsr1h	equ	0xFE2
  9792                           fsr1l	equ	0xFE1
  9793                           indf2	equ	0xFDF
  9794                           postinc2	equ	0xFDE
  9795                           postdec2	equ	0xFDD
  9796                           fsr2h	equ	0xFDA
  9797                           fsr2l	equ	0xFD9
  9798                           status	equ	0xFD8
  9799                           
  9800 ;; *************** function _updateS2 *****************
  9801 ;; Defined at:
  9802 ;;		line 110 in file "motors.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;  mode            2    0[COMRAM] int 
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;		None
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  1    wreg      void 
  9809 ;; Registers used:
  9810 ;;		wreg, status,2, status,0
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;Total ram usage:        3 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; This function calls:
  9823 ;;		Nothing
  9824 ;; This function is called by:
  9825 ;;		_handler
  9826 ;; This function uses a non-reentrant model
  9827 ;;
  9828                           
  9829                           	psect	text39
  9830  001D4A                     __ptext39:
  9831                           	opt stack 0
  9832  001D4A                     _updateS2:
  9833                           	opt stack 25
  9834                           
  9835                           ;motors.c: 111: _delay((unsigned long)((5)*(32000000/4000.0)));
  9836                           
  9837                           ;incstack = 0
  9838  001D4A  0E34               	movlw	52
  9839  001D4C  6E03               	movwf	??_updateS2& (0+255),c
  9840  001D4E  0EF2               	movlw	242
  9841  001D50                     i2u785_47:
  9842  001D50  2EE8               	decfsz	wreg,f,c
  9843  001D52  D7FE               	bra	i2u785_47
  9844  001D54  2E03               	decfsz	??_updateS2& (0+255),f,c
  9845  001D56  D7FC               	bra	i2u785_47
  9846                           
  9847                           ;motors.c: 113: if(mode == 0){
  9848  001D58  5001               	movf	updateS2@mode,w,c
  9849  001D5A  1002               	iorwf	updateS2@mode+1,w,c
  9850  001D5C  A4D8               	btfss	status,2,c
  9851  001D5E  D005               	goto	i2l3640
  9852                           
  9853                           ;motors.c: 114: LATCbits.LATC7 = 0;
  9854  001D60  9E8B               	bcf	3979,7,c	;volatile
  9855                           
  9856                           ;motors.c: 115: LATCbits.LATC6 = 0;
  9857  001D62  9C8B               	bcf	3979,6,c	;volatile
  9858                           
  9859                           ;motors.c: 116: LATCbits.LATC0 = 0;
  9860  001D64  908B               	bcf	3979,0,c	;volatile
  9861                           
  9862                           ;motors.c: 117: LATCbits.LATC5 = 0;
  9863  001D66  9A8B               	bcf	3979,5,c	;volatile
  9864                           
  9865                           ;motors.c: 118: }
  9866  001D68  0012               	return	
  9867  001D6A                     i2l3640:
  9868                           
  9869                           ;motors.c: 119: else if(mode == 4){
  9870  001D6A  0E04               	movlw	4
  9871  001D6C  1801               	xorwf	updateS2@mode,w,c
  9872  001D6E  1002               	iorwf	updateS2@mode+1,w,c
  9873  001D70  A4D8               	btfss	status,2,c
  9874  001D72  D005               	goto	i2l3644
  9875                           
  9876                           ;motors.c: 120: LATCbits.LATC7 = 1;
  9877  001D74  8E8B               	bsf	3979,7,c	;volatile
  9878                           
  9879                           ;motors.c: 121: LATCbits.LATC6 = 0;
  9880  001D76  9C8B               	bcf	3979,6,c	;volatile
  9881                           
  9882                           ;motors.c: 122: LATCbits.LATC0 = 0;
  9883  001D78  908B               	bcf	3979,0,c	;volatile
  9884                           
  9885                           ;motors.c: 123: LATCbits.LATC5 = 0;
  9886  001D7A  9A8B               	bcf	3979,5,c	;volatile
  9887                           
  9888                           ;motors.c: 124: }
  9889  001D7C  0012               	return	
  9890  001D7E                     i2l3644:
  9891                           
  9892                           ;motors.c: 125: else if(mode == 3){
  9893  001D7E  0E03               	movlw	3
  9894  001D80  1801               	xorwf	updateS2@mode,w,c
  9895  001D82  1002               	iorwf	updateS2@mode+1,w,c
  9896  001D84  A4D8               	btfss	status,2,c
  9897  001D86  D042               	goto	i2l3668
  9898                           
  9899                           ;motors.c: 126: t2++;
  9900  001D88  4A44               	infsnz	_t2,f,c
  9901  001D8A  2A45               	incf	_t2+1,f,c
  9902                           
  9903                           ;motors.c: 127: if (t2>8) {t2=1;}
  9904  001D8C  BE45               	btfsc	_t2+1,7,c
  9905  001D8E  D00A               	goto	i2l3652
  9906  001D90  5045               	movf	_t2+1,w,c
  9907  001D92  E104               	bnz	i2u376_40
  9908  001D94  0E09               	movlw	9
  9909  001D96  5C44               	subwf	_t2,w,c
  9910  001D98  A0D8               	btfss	status,0,c
  9911  001D9A  D004               	goto	i2l3652
  9912  001D9C                     i2u376_40:
  9913  001D9C  0E00               	movlw	0
  9914  001D9E  6E45               	movwf	_t2+1,c
  9915  001DA0  0E01               	movlw	1
  9916  001DA2  6E44               	movwf	_t2,c
  9917  001DA4                     i2l3652:
  9918                           
  9919                           ;motors.c: 128: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
  9920  001DA4  0444               	decf	_t2,w,c
  9921  001DA6  1045               	iorwf	_t2+1,w,c
  9922  001DA8  B4D8               	btfsc	status,2,c
  9923  001DAA  D005               	goto	i2l511
  9924  001DAC  0E08               	movlw	8
  9925  001DAE  1844               	xorwf	_t2,w,c
  9926  001DB0  1045               	iorwf	_t2+1,w,c
  9927  001DB2  A4D8               	btfss	status,2,c
  9928  001DB4  D002               	goto	i2l509
  9929  001DB6                     i2l511:
  9930  001DB6  8E8B               	bsf	3979,7,c	;volatile
  9931  001DB8  D001               	goto	i2l3656
  9932  001DBA                     i2l509:
  9933                           
  9934                           ;motors.c: 129: else{LATCbits.LATC7 = 0;}
  9935  001DBA  9E8B               	bcf	3979,7,c	;volatile
  9936  001DBC                     i2l3656:
  9937                           
  9938                           ;motors.c: 130: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
  9939  001DBC  0E02               	movlw	2
  9940  001DBE  1844               	xorwf	_t2,w,c
  9941  001DC0  1045               	iorwf	_t2+1,w,c
  9942  001DC2  B4D8               	btfsc	status,2,c
  9943  001DC4  D005               	goto	i2l515
  9944  001DC6  0E07               	movlw	7
  9945  001DC8  1844               	xorwf	_t2,w,c
  9946  001DCA  1045               	iorwf	_t2+1,w,c
  9947  001DCC  A4D8               	btfss	status,2,c
  9948  001DCE  D002               	goto	i2l513
  9949  001DD0                     i2l515:
  9950  001DD0  8C8B               	bsf	3979,6,c	;volatile
  9951  001DD2  D001               	goto	i2l3660
  9952  001DD4                     i2l513:
  9953                           
  9954                           ;motors.c: 131: else{LATCbits.LATC6 = 0;}
  9955  001DD4  9C8B               	bcf	3979,6,c	;volatile
  9956  001DD6                     i2l3660:
  9957                           
  9958                           ;motors.c: 132: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
  9959  001DD6  0E03               	movlw	3
  9960  001DD8  1844               	xorwf	_t2,w,c
  9961  001DDA  1045               	iorwf	_t2+1,w,c
  9962  001DDC  B4D8               	btfsc	status,2,c
  9963  001DDE  D005               	goto	i2l519
  9964  001DE0  0E06               	movlw	6
  9965  001DE2  1844               	xorwf	_t2,w,c
  9966  001DE4  1045               	iorwf	_t2+1,w,c
  9967  001DE6  A4D8               	btfss	status,2,c
  9968  001DE8  D002               	goto	i2l517
  9969  001DEA                     i2l519:
  9970  001DEA  808B               	bsf	3979,0,c	;volatile
  9971  001DEC  D001               	goto	i2l3664
  9972  001DEE                     i2l517:
  9973                           
  9974                           ;motors.c: 133: else{LATCbits.LATC0 = 0;}
  9975  001DEE  908B               	bcf	3979,0,c	;volatile
  9976  001DF0                     i2l3664:
  9977                           
  9978                           ;motors.c: 134: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
  9979  001DF0  0E04               	movlw	4
  9980  001DF2  1844               	xorwf	_t2,w,c
  9981  001DF4  1045               	iorwf	_t2+1,w,c
  9982  001DF6  B4D8               	btfsc	status,2,c
  9983  001DF8  D005               	goto	i2l523
  9984  001DFA  0E05               	movlw	5
  9985  001DFC  1844               	xorwf	_t2,w,c
  9986  001DFE  1045               	iorwf	_t2+1,w,c
  9987  001E00  A4D8               	btfss	status,2,c
  9988  001E02  D002               	goto	i2l521
  9989  001E04                     i2l523:
  9990  001E04  8A8B               	bsf	3979,5,c	;volatile
  9991  001E06  0012               	return	
  9992  001E08                     i2l521:
  9993                           
  9994                           ;motors.c: 135: else{LATCbits.LATC5 = 0;}
  9995  001E08  9A8B               	bcf	3979,5,c	;volatile
  9996                           
  9997                           ;motors.c: 136: }
  9998  001E0A  0012               	return	
  9999  001E0C                     i2l3668:
 10000                           
 10001                           ;motors.c: 137: else{
 10002                           ;motors.c: 138: if(mode == 1){
 10003  001E0C  0401               	decf	updateS2@mode,w,c
 10004  001E0E  1002               	iorwf	updateS2@mode+1,w,c
 10005  001E10  A4D8               	btfss	status,2,c
 10006  001E12  D00E               	goto	i2l3676
 10007                           
 10008                           ;motors.c: 139: s2 ++;
 10009  001E14  4A4A               	infsnz	_s2,f,c
 10010  001E16  2A4B               	incf	_s2+1,f,c
 10011                           
 10012                           ;motors.c: 140: if (s2>4) {s2=1;}
 10013  001E18  BE4B               	btfsc	_s2+1,7,c
 10014  001E1A  D01D               	goto	i2l3684
 10015  001E1C  504B               	movf	_s2+1,w,c
 10016  001E1E  E104               	bnz	i2u386_40
 10017  001E20  0E05               	movlw	5
 10018  001E22  5C4A               	subwf	_s2,w,c
 10019  001E24  A0D8               	btfss	status,0,c
 10020  001E26  D017               	goto	i2l3684
 10021  001E28                     i2u386_40:
 10022  001E28  0E00               	movlw	0
 10023  001E2A  6E4B               	movwf	_s2+1,c
 10024  001E2C  0E01               	movlw	1
 10025  001E2E  D012               	goto	L18
 10026  001E30                     i2l3676:
 10027                           
 10028                           ;motors.c: 142: else if(mode == 2){
 10029  001E30  0E02               	movlw	2
 10030  001E32  1801               	xorwf	updateS2@mode,w,c
 10031  001E34  1002               	iorwf	updateS2@mode+1,w,c
 10032  001E36  A4D8               	btfss	status,2,c
 10033  001E38  D00E               	goto	i2l3684
 10034                           
 10035                           ;motors.c: 143: s2 --;
 10036  001E3A  064A               	decf	_s2,f,c
 10037  001E3C  A0D8               	btfss	status,0,c
 10038  001E3E  064B               	decf	_s2+1,f,c
 10039                           
 10040                           ;motors.c: 144: if (s2<1) {s2=4;}
 10041  001E40  BE4B               	btfsc	_s2+1,7,c
 10042  001E42  D005               	goto	i2l3682
 10043  001E44  504B               	movf	_s2+1,w,c
 10044  001E46  E107               	bnz	i2l3684
 10045  001E48  044A               	decf	_s2,w,c
 10046  001E4A  B0D8               	btfsc	status,0,c
 10047  001E4C  D004               	goto	i2l3684
 10048  001E4E                     i2l3682:
 10049  001E4E  0E00               	movlw	0
 10050  001E50  6E4B               	movwf	_s2+1,c
 10051  001E52  0E04               	movlw	4
 10052  001E54                     L18:
 10053  001E54  6E4A               	movwf	_s2,c
 10054  001E56                     i2l3684:
 10055                           
 10056                           ;motors.c: 145: }
 10057                           ;motors.c: 146: if (s2 == 1){LATCbits.LATC7 = 1;}
 10058  001E56  044A               	decf	_s2,w,c
 10059  001E58  104B               	iorwf	_s2+1,w,c
 10060  001E5A  A4D8               	btfss	status,2,c
 10061  001E5C  D002               	goto	i2l531
 10062  001E5E  8E8B               	bsf	3979,7,c	;volatile
 10063  001E60  D001               	goto	i2l3688
 10064  001E62                     i2l531:
 10065                           
 10066                           ;motors.c: 147: else{LATCbits.LATC7 = 0;}
 10067  001E62  9E8B               	bcf	3979,7,c	;volatile
 10068  001E64                     i2l3688:
 10069                           
 10070                           ;motors.c: 148: if (s2 == 2){LATCbits.LATC6 = 1;}
 10071  001E64  0E02               	movlw	2
 10072  001E66  184A               	xorwf	_s2,w,c
 10073  001E68  104B               	iorwf	_s2+1,w,c
 10074  001E6A  A4D8               	btfss	status,2,c
 10075  001E6C  D002               	goto	i2l533
 10076  001E6E  8C8B               	bsf	3979,6,c	;volatile
 10077  001E70  D001               	goto	i2l3692
 10078  001E72                     i2l533:
 10079                           
 10080                           ;motors.c: 149: else{LATCbits.LATC6 = 0;}
 10081  001E72  9C8B               	bcf	3979,6,c	;volatile
 10082  001E74                     i2l3692:
 10083                           
 10084                           ;motors.c: 150: if (s2 == 3){LATCbits.LATC0 = 1;}
 10085  001E74  0E03               	movlw	3
 10086  001E76  184A               	xorwf	_s2,w,c
 10087  001E78  104B               	iorwf	_s2+1,w,c
 10088  001E7A  A4D8               	btfss	status,2,c
 10089  001E7C  D002               	goto	i2l535
 10090  001E7E  808B               	bsf	3979,0,c	;volatile
 10091  001E80  D001               	goto	i2l3696
 10092  001E82                     i2l535:
 10093                           
 10094                           ;motors.c: 151: else{LATCbits.LATC0 = 0;}
 10095  001E82  908B               	bcf	3979,0,c	;volatile
 10096  001E84                     i2l3696:
 10097                           
 10098                           ;motors.c: 152: if (s2 == 4){LATCbits.LATC5 = 1;}
 10099  001E84  0E04               	movlw	4
 10100  001E86  184A               	xorwf	_s2,w,c
 10101  001E88  104B               	iorwf	_s2+1,w,c
 10102  001E8A  A4D8               	btfss	status,2,c
 10103  001E8C  D002               	goto	i2l537
 10104  001E8E  8A8B               	bsf	3979,5,c	;volatile
 10105  001E90  0012               	return	
 10106  001E92                     i2l537:
 10107                           
 10108                           ;motors.c: 153: else{LATCbits.LATC5 = 0;}
 10109  001E92  9A8B               	bcf	3979,5,c	;volatile
 10110  001E94  0012               	return	
 10111  001E96                     __end_of_updateS2:
 10112                           	opt stack 0
 10113                           pclatu	equ	0xFFB
 10114                           pclath	equ	0xFFA
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           intcon2	equ	0xFF1
 10123                           postinc0	equ	0xFEE
 10124                           fsr0h	equ	0xFEA
 10125                           fsr0l	equ	0xFE9
 10126                           wreg	equ	0xFE8
 10127                           fsr1h	equ	0xFE2
 10128                           fsr1l	equ	0xFE1
 10129                           indf2	equ	0xFDF
 10130                           postinc2	equ	0xFDE
 10131                           postdec2	equ	0xFDD
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           
 10136 ;; *************** function ___awmod *****************
 10137 ;; Defined at:
 10138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;  dividend        2    0[COMRAM] int 
 10141 ;;  divisor         2    2[COMRAM] int 
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  sign            1    5[COMRAM] unsigned char 
 10144 ;;  counter         1    4[COMRAM] unsigned char 
 10145 ;; Return value:  Size  Location     Type
 10146 ;;                  2    0[COMRAM] int 
 10147 ;; Registers used:
 10148 ;;		wreg, status,2, status,0
 10149 ;; Tracked objects:
 10150 ;;		On entry : 0/0
 10151 ;;		On exit  : 0/0
 10152 ;;		Unchanged: 0/0
 10153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;Total ram usage:        6 bytes
 10159 ;; Hardware stack levels used:    1
 10160 ;; This function calls:
 10161 ;;		Nothing
 10162 ;; This function is called by:
 10163 ;;		_handler
 10164 ;; This function uses a non-reentrant model
 10165 ;;
 10166                           
 10167                           	psect	text40
 10168  0020C2                     __ptext40:
 10169                           	opt stack 0
 10170  0020C2                     ___awmod:
 10171                           	opt stack 25
 10172                           
 10173                           ;incstack = 0
 10174  0020C2  0E00               	movlw	0
 10175  0020C4  6E06               	movwf	___awmod@sign,c
 10176  0020C6  AE02               	btfss	___awmod@dividend+1,7,c
 10177  0020C8  D006               	goto	i2l3966
 10178  0020CA  6C01               	negf	___awmod@dividend,c
 10179  0020CC  1E02               	comf	___awmod@dividend+1,f,c
 10180  0020CE  B0D8               	btfsc	status,0,c
 10181  0020D0  2A02               	incf	___awmod@dividend+1,f,c
 10182  0020D2  0E01               	movlw	1
 10183  0020D4  6E06               	movwf	___awmod@sign,c
 10184  0020D6                     i2l3966:
 10185  0020D6  AE04               	btfss	___awmod@divisor+1,7,c
 10186  0020D8  D004               	goto	i2l3970
 10187  0020DA  6C03               	negf	___awmod@divisor,c
 10188  0020DC  1E04               	comf	___awmod@divisor+1,f,c
 10189  0020DE  B0D8               	btfsc	status,0,c
 10190  0020E0  2A04               	incf	___awmod@divisor+1,f,c
 10191  0020E2                     i2l3970:
 10192  0020E2  5003               	movf	___awmod@divisor,w,c
 10193  0020E4  1004               	iorwf	___awmod@divisor+1,w,c
 10194  0020E6  B4D8               	btfsc	status,2,c
 10195  0020E8  D018               	goto	i2l3986
 10196  0020EA  0E01               	movlw	1
 10197  0020EC  6E05               	movwf	___awmod@counter,c
 10198  0020EE  D004               	goto	i2l3976
 10199  0020F0                     i2l3974:
 10200  0020F0  90D8               	bcf	status,0,c
 10201  0020F2  3603               	rlcf	___awmod@divisor,f,c
 10202  0020F4  3604               	rlcf	___awmod@divisor+1,f,c
 10203  0020F6  2A05               	incf	___awmod@counter,f,c
 10204  0020F8                     i2l3976:
 10205  0020F8  AE04               	btfss	___awmod@divisor+1,7,c
 10206  0020FA  D7FA               	goto	i2l3974
 10207  0020FC                     i2l3978:
 10208  0020FC  5003               	movf	___awmod@divisor,w,c
 10209  0020FE  5C01               	subwf	___awmod@dividend,w,c
 10210  002100  5004               	movf	___awmod@divisor+1,w,c
 10211  002102  5802               	subwfb	___awmod@dividend+1,w,c
 10212  002104  A0D8               	btfss	status,0,c
 10213  002106  D004               	goto	i2l3982
 10214  002108  5003               	movf	___awmod@divisor,w,c
 10215  00210A  5E01               	subwf	___awmod@dividend,f,c
 10216  00210C  5004               	movf	___awmod@divisor+1,w,c
 10217  00210E  5A02               	subwfb	___awmod@dividend+1,f,c
 10218  002110                     i2l3982:
 10219  002110  90D8               	bcf	status,0,c
 10220  002112  3204               	rrcf	___awmod@divisor+1,f,c
 10221  002114  3203               	rrcf	___awmod@divisor,f,c
 10222  002116  2E05               	decfsz	___awmod@counter,f,c
 10223  002118  D7F1               	goto	i2l3978
 10224  00211A                     i2l3986:
 10225  00211A  5006               	movf	___awmod@sign,w,c
 10226  00211C  B4D8               	btfsc	status,2,c
 10227  00211E  D004               	goto	i2l3990
 10228  002120  6C01               	negf	___awmod@dividend,c
 10229  002122  1E02               	comf	___awmod@dividend+1,f,c
 10230  002124  B0D8               	btfsc	status,0,c
 10231  002126  2A02               	incf	___awmod@dividend+1,f,c
 10232  002128                     i2l3990:
 10233  002128  C001  F001         	movff	___awmod@dividend,?___awmod
 10234  00212C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10235  002130  0012               	return	
 10236  002132                     __end_of___awmod:
 10237                           	opt stack 0
 10238                           pclatu	equ	0xFFB
 10239                           pclath	equ	0xFFA
 10240                           tblptru	equ	0xFF8
 10241                           tblptrh	equ	0xFF7
 10242                           tblptrl	equ	0xFF6
 10243                           tablat	equ	0xFF5
 10244                           prodh	equ	0xFF4
 10245                           prodl	equ	0xFF3
 10246                           intcon	equ	0xFF2
 10247                           intcon2	equ	0xFF1
 10248                           postinc0	equ	0xFEE
 10249                           fsr0h	equ	0xFEA
 10250                           fsr0l	equ	0xFE9
 10251                           wreg	equ	0xFE8
 10252                           fsr1h	equ	0xFE2
 10253                           fsr1l	equ	0xFE1
 10254                           indf2	equ	0xFDF
 10255                           postinc2	equ	0xFDE
 10256                           postdec2	equ	0xFDD
 10257                           fsr2h	equ	0xFDA
 10258                           fsr2l	equ	0xFD9
 10259                           status	equ	0xFD8
 10260                           pclatu	equ	0xFFB
 10261                           pclath	equ	0xFFA
 10262                           tblptru	equ	0xFF8
 10263                           tblptrh	equ	0xFF7
 10264                           tblptrl	equ	0xFF6
 10265                           tablat	equ	0xFF5
 10266                           prodh	equ	0xFF4
 10267                           prodl	equ	0xFF3
 10268                           intcon	equ	0xFF2
 10269                           intcon2	equ	0xFF1
 10270                           postinc0	equ	0xFEE
 10271                           fsr0h	equ	0xFEA
 10272                           fsr0l	equ	0xFE9
 10273                           wreg	equ	0xFE8
 10274                           fsr1h	equ	0xFE2
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           fsr2h	equ	0xFDA
 10280                           fsr2l	equ	0xFD9
 10281                           status	equ	0xFD8
 10282                           
 10283                           	psect	rparam
 10284  0000                     pclatu	equ	0xFFB
 10285                           pclath	equ	0xFFA
 10286                           tblptru	equ	0xFF8
 10287                           tblptrh	equ	0xFF7
 10288                           tblptrl	equ	0xFF6
 10289                           tablat	equ	0xFF5
 10290                           prodh	equ	0xFF4
 10291                           prodl	equ	0xFF3
 10292                           intcon	equ	0xFF2
 10293                           intcon2	equ	0xFF1
 10294                           postinc0	equ	0xFEE
 10295                           fsr0h	equ	0xFEA
 10296                           fsr0l	equ	0xFE9
 10297                           wreg	equ	0xFE8
 10298                           fsr1h	equ	0xFE2
 10299                           fsr1l	equ	0xFE1
 10300                           indf2	equ	0xFDF
 10301                           postinc2	equ	0xFDE
 10302                           postdec2	equ	0xFDD
 10303                           fsr2h	equ	0xFDA
 10304                           fsr2l	equ	0xFD9
 10305                           status	equ	0xFD8
 10306                           
 10307                           	psect	temp
 10308  000061                     btemp:
 10309                           	opt stack 0
 10310  000061                     	ds	1
 10311  0000                     int$flags	set	btemp
 10312                           pclatu	equ	0xFFB
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon2	equ	0xFF1
 10322                           postinc0	equ	0xFEE
 10323                           fsr0h	equ	0xFEA
 10324                           fsr0l	equ	0xFE9
 10325                           wreg	equ	0xFE8
 10326                           fsr1h	equ	0xFE2
 10327                           fsr1l	equ	0xFE1
 10328                           indf2	equ	0xFDF
 10329                           postinc2	equ	0xFDE
 10330                           postdec2	equ	0xFDD
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8


Data Sizes:
    Strings     490
    Constant    42
    Data        0
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65      96
    BANK0           128     30      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_55(CODE[17]), STR_54(CODE[17]), STR_53(CODE[16]), STR_52(CODE[17]), 
		 -> STR_51(CODE[17]), STR_50(CODE[17]), STR_49(CODE[16]), STR_48(CODE[17]), 
		 -> STR_47(CODE[16]), STR_46(CODE[17]), STR_45(CODE[21]), STR_44(CODE[17]), 
		 -> STR_43(CODE[12]), STR_42(CODE[17]), STR_41(CODE[6]), STR_40(CODE[8]), 
		 -> STR_39(CODE[15]), STR_38(CODE[8]), STR_37(CODE[16]), STR_36(CODE[17]), 
		 -> STR_35(CODE[16]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[12]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), 
		 -> STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[12]), STR_24(CODE[9]), 
		 -> STR_23(CODE[9]), STR_22(CODE[12]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[11]), STR_16(CODE[3]), 
		 -> STR_15(CODE[13]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), 
		 -> STR_11(CODE[16]), STR_10(CODE[16]), STR_9(CODE[3]), STR_8(CODE[16]), 
		 -> STR_7(CODE[16]), STR_6(CODE[12]), STR_5(CODE[12]), STR_4(CODE[16]), 
		 -> STR_3(CODE[16]), STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLog
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _calibrateWheels->_updateS1
    _calibrateWheels->_updateS3
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   33714
                                             63 COMRAM     2     2      0
                                              0 BANK0     30    30      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                             _addRun
                    _calibrateWheels
                         _displayLog
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     657
                                             23 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                             21 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                             21 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     698
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             23 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     503
                                             33 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     395
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    7804
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    8948
                                             54 COMRAM     9     7      2
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    7609
                                             32 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             22 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     694
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                             22 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateWheels                                      4     4      0    2211
                                             23 COMRAM     4     4      0
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     813
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     968
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _startTMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      31
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2676
                                             24 COMRAM    27     5     22
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1    1017
                                             20 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      62
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 4     2      2     247
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     247
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             14    14      0    1236
                                              6 COMRAM    14    14      0
                            ___awmod
                           _updateS2
                        i2_startTMR1
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     136
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     246
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_startTMR1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     680
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _addRun
     _eepromRead
     _eepromWrite
   _calibrateWheels
     _readADC
     _startTMR1
     _updateS1
     _updateS3
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _startTMR1
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   ___awmod
   _updateS2
   i2_startTMR1
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1E      2D       5       35.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      60       1       76.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      34        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 10 02:20:03 2017

                        _s 00A9                          _t 0046                         _s1 004C  
                       _s2 004A                         _s3 0048                         _t2 0044  
                       _t3 0042        ___wmul@multiplicand 0017                __CFG_BORV$3 000000  
         ?_calibrateWheels 0001               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l201 039A  
                      l203 03A8                        l212 0424                        l205 03B6  
                      l214 0432                        l223 048E                        l207 03C4  
                      l216 0440                        l225 049C                        l218 044E  
                      l227 04AA                        l229 04B8                        l460 1456  
                      l612 2542                        l621 253E                        l365 2556  
                      l470 1486                        l462 1452                        l550 1B1E  
                      l622 253A                        l615 254E                        l464 1470  
                      l456 143C                        l560 1B70                        l552 1B3C  
                      l634 2448                        l466 146C                        l458 1438  
                      l570 1BCA                        l562 1B6C                        l554 1B38  
                      l491 154A                        l707 19CA                        l628 2472  
                      l468 148A                        l572 1BDA                        l556 1B56  
                      l548 1B22                        l485 151A                        l574 1BEA  
                      l558 1B52                        l487 152A                        l719 1A86  
                      l576 1BFA                        l489 153A                        l754 11B2  
             __CFG_CPB$OFF 000000                        _PR2 000FCB                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28               ___awmod@sign 0006  
                      prod 000FF3                        wreg 000FE8        __end_ofi2_startTMR1 2588  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1209 2410  
                     l1146 2038                       l1199 22F4                       l5002 14B0  
                     l5012 14E0                       l5100 1B98                       l5030 152C  
                     l5022 150E                       l5016 14F4                       l5008 14CC  
                     l5120 1BEC                       l5112 1BCC                       l5050 1582  
                     l5042 1560                       l5034 153C                       l5026 151C  
                     l5018 14FC                       l5106 1BB6                       l5210 122A  
                     l6010 0864                       l5116 1BDC                       l5108 1BBE  
                     l5212 122E                       l6100 0A8E                       l6020 08B2  
                     l5054 1594                       l5046 1570                       l5038 154C  
                     l6110 0AD2                       l6102 0A9E                       l6014 087C  
                     l5080 1B24                       l5064 1AD2                       l5240 12B0  
                     l5152 10D0                       l6112 0AE2                       l6104 0AB2  
                     l6016 0890                       l5410 1934                       l5234 1284  
                     l5226 125A                       l5162 10F4                       l5314 24C0  
                     l6114 0AFC                       l6130 0B62                       l6042 0934  
                     l6018 08A0                       l5084 1B3E                       l5076 1B0C  
                     l5092 1B74                       l5068 1AE6                       l5420 1980  
                     l5412 1944                       l5252 12DC                       l5228 126A  
                     l5180 1184                       l5156 10E0                       l6140 0BC4  
                     l6108 0ACA                       l6036 0918                       l5422 198E  
                     l5414 1952                       l5254 12E4                       l5262 130A  
                     l5246 12C6                       l5238 12A8                       l5158 10EE  
                     l6134 0B7A                       l6126 0B44                       l6046 0944  
                     l6038 0922                       l5088 1B58                       l5440 19F0  
                     l5424 199E                       l5416 1962                       l5264 1310  
                     l5272 139A                       l5192 11E0                       l5176 1180  
                     l5168 1122                       l6160 0C3C                       l6152 0C0C  
                     l6136 0B98                       l6080 0A0A                       l6072 09D4  
                     l6056 0976                       l5290 24FC                       l5450 1A3C  
                     l5442 1A00                       l5434 19D2                       l5426 19AC  
                     l5418 1970                       l5266 1354                       l5274 13AA  
                     l5258 12F8                       l6138 0BA8                       l6090 0A54  
                     l6082 0A1A                       l6058 097E                       l5292 250A  
                     l5452 1A4A                       l5444 1A0E                       l5428 19B4  
                     l5276 13B0                       l5196 11FA                       l5380 2166  
                     l6164 0C4C                       l6156 0C2A                       l6084 0A22  
                     l5454 1A5A                       l5446 1A1E                       l5198 11FE  
                     l5278 13B8                       l4910 1FEA                       l5390 218A  
                     l6086 0A32                       l6174 0C7E                       l5464 1A8E  
                     l5456 1A68                       l5448 1A2C                       l5480 0D82  
                     l4912 1FF6                       l5384 216E                       l6088 0A44  
                     l6176 0C90                       l5800 0426                       l5640 0080  
                     l5458 1A70                       l4922 202A                       l4914 1FFA  
                     l6098 0A7A                       l5706 026E                       l4932 22C2  
                     l5804 0434                       l5812 0450                       l5708 028A  
                     l5636 006E                       l4934 22CA                       l5486 0D9E  
                     l5822 047E                       l5662 0150                       l5646 008C  
                     l5584 1EC4                       l4944 22EA                       l4936 22CE  
                     l4960 2406                       l4952 23E6                       l5488 0DA2  
                     l5920 0654                       l5840 04BA                       l5832 049E  
                     l5808 0442                       l5680 01D0                       l5664 015A  
                     _ADFM 007E07                       l5586 1ECC                       l4970 13F2  
                     l4954 23EE                       l5762 038A                       l5666 016A  
                     l4956 23F2                       l5924 0660                       l5836 04AC  
                     l5828 0490                       l5844 04DA                       l5780 03C6  
                     l5772 03AA                       l5676 0196                       l5684 01EE  
                     l4894 2526                       l5694 0226                       l5950 06EC  
                     l4992 1472                       l4984 143E                       l5872 0558  
                     l5776 03B8                       l5768 039C                       l5784 03E6  
                     l5696 0242                       l4978 1418                       l5946 06DA  
                     l5890 05A6                       l5794 0414                       l4988 1458  
                     l4996 148E                       l5980 07A6                       l5972 0788  
                     l5990 07EC                       l5982 07BC                       l5966 0750  
                     l5886 059A                       l5992 07FC                       l5986 07D4  
                     l5988 07DC                       STR_1 FEBF                       STR_2 FEEF  
                     STR_3 FF3F                       STR_4 FF2F                       STR_5 FFC1  
                     STR_6 FF91                       STR_7 FECF                       STR_8 FEFF  
                     STR_9 FFFC                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     _PEIE 007F96                       u6090 1B90                       _RCEN 007E2B  
                     u6165 222A                       u6430 24BE                       u5800 14C4  
                     u6455 245C                       u7417 0064                       u5690 1410  
                     u6475 2424                       u7507 0468                       u7427 0128  
                     u7517 04EE                       u7437 0210                       u6670 0D96  
                     u7607 09C6                       u7527 0522                       u7447 0258  
                     u7617 0D26                       u7537 0568                       u7457 029C  
                     u7707 1020                       u7627 2398                       u7547 05B6  
                     u7467 02DA                       u7717 1078                       u7637 23CC  
                     u7557 0646                       u7477 0318                       u5990 1B04  
                     u7807 2502                       u7727 226E                       u7647 0DC2  
                     u7567 066E                       u7487 0374                       u7737 2278  
                     u7657 0E02                       u7577 0688                       u7497 03FE  
                     u7747 229A                       u7667 0E58                       u7587 06F8  
                     u7757 22A4                       u7677 0EE4                       u7597 0742  
                     u7767 1AB8                       u7687 0F70                       u7777 13D8  
                     u7697 0FC8                       u7787 141E                       u7797 1494  
                     _PWM1 2348                       _PWM2 22FE                       _RSEN 007E29  
              displayLog@i 003C            __end_of_PWM1off 25BE            __end_of_PWM2off 25B4  
                     _main 0012                       _curr 00A5                       _keys FDEB  
                     _time 009E                       _prev 00A7                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0061                main@standby 009C                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                 i2_updateS1 15A8  
               i2_updateS3 1BFE                      ?_PWM1 0015                      ?_PWM2 0015  
         ?_I2C_Master_Init 0022           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D                      _ADRES 000FC3                      _EEADR 000FA9  
                    STR_10 FF0F                      STR_11 FF1F                      STR_20 FFF7  
                    STR_12 FFFC                      STR_21 FFF7                      STR_13 FF78  
                    STR_30 FFFB                      STR_22 FF9D                      STR_14 FF6B  
                    STR_23 FFD8                      STR_31 FFA9                      STR_15 FF5E  
                    STR_24 FFD8                      STR_16 FE9C                      STR_32 FFFB  
                    STR_40 FFE1                      STR_33 FFFB                      STR_41 FFF1  
                    STR_17 FFCD                      STR_25 FFB5                      STR_50 FE5D  
                    STR_34 FFFB                      STR_26 FFFB                      STR_18 FFF7  
                    STR_42 FE5D                      STR_19 FFF7                      STR_27 FE9B  
                    STR_43 FF85                      STR_35 FEDF                      STR_51 FE3B  
                    STR_52 FE5D                      STR_44 FE5D                      STR_28 FFFB  
                    STR_36 FE6E            __end_of___awmod 2132                      STR_29 FE9B  
                    STR_53 FE9F                      STR_37 FE7F                      STR_45 FE15  
                    STR_54 FE5D                      STR_46 FE5D                      STR_38 FFE9  
                    STR_39 FF4F                      STR_47 FEAF                      STR_55 FE4C  
                    STR_48 FE5D                      STR_56 FE2A                      STR_49 FE8F  
          __end_of___lldiv 204A                      _T0CON 000FD5                      _T1CON 000FCD  
                    _T2CON 000FCA                      _T3CON 000FB1            __end_of___lwdiv 22FE  
          __end_of___lwmod 241A                      i2l172 18EE                      i2l511 1DB6  
                    i2l521 1E08                      i2l513 1DD4                      i2l531 1E62  
                    i2l523 1E04                      i2l515 1DD0                      i2l460 162C  
                    i2l533 1E72                      i2l517 1DEE                      i2l509 1DBA  
                    i2l470 165C                      i2l462 1628                      i2l550 1C6A  
                    i2l535 1E82                      i2l519 1DEA                      i2l464 1646  
                    i2l456 1612                      i2l560 1CBC                      i2l552 1C88  
                    i2l537 1E92                      i2l466 1642                      i2l458 160E  
                    i2l570 1D16                      i2l562 1CB8                      i2l554 1C84  
                    i2l491 1720                      i2l468 1660                      i2l572 1D26  
                    i2l556 1CA2                      i2l548 1C6E                      i2l485 16F0  
                    i2l574 1D36                      i2l558 1C9E                      i2l487 1700  
                    i2l576 1D46                      i2l489 1710               updateS1@mode 0015  
             updateS2@mode 0001               updateS3@mode 0015                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR3H 000FB3  
                    _TMR1L 000FCE                      _TMR3L 000FB2                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 25A0            __end_of_handler 192A  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 2510            __end_of_initLCD 23D8             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers FE06               main@sodaLoad 0082            __end_of_isdigit 252E  
             main@sodaSort 0096                      _putch 2588                      main@s 0086  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
             main@soupLoad 0080               main@soupSort 0094             __CFG_PBADEN$ON 000000  
             __end_of_PWM1 2392               __end_of_PWM2 2348            __initialization 247A  
             __end_of_main 0D6A               __end_of_keys FDFC                     ??_PWM1 0017  
                   ??_PWM2 0017                i2_startTMR1 2578                     ??_main 0040  
            __activetblptr 000002          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0016  
       ??_I2C_Master_Start 0016                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0018                     _ADCON2 000FC0                  ??_PWM1off 0015  
                ??_PWM2off 0015                     _ADRESH 000FC4                     _EEADRH 000FAA  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7                     ?_putch 0001                     _CVRCON 000FB5  
                   i2l4000 15C8                     i2l4022 1648                     i2l4014 1614  
                   i2l4110 1C70                     i2l4032 1686                     i2l4008 15EE  
                   i2l4200 185C                     i2l4042 16B6                     i2l4018 162E  
                   i2l4026 1664                     i2l4130 1CE4                     i2l4114 1C8A  
                   i2l4106 1C58                     i2l4122 1CC0                     i2l4060 1702  
                   i2l4052 16E4                     i2l4212 189A                     i2l4204 1864  
                   i2l4046 16CA                     i2l4038 16A2                     i2l4150 1D38  
                   i2l4142 1D18                     i2l4118 1CA4                     i2l4222 18E0  
                   i2l4214 18A2                     i2l4080 1758                     i2l4072 1736  
                   i2l4064 1712                     i2l4056 16F2                     i2l4048 16D2  
                   i2l4136 1D02                     i2l4224 18E8                     i2l4146 1D28  
                   i2l4138 1D0A                     i2l4084 176A                     i2l4076 1746  
                   i2l4068 1722                     i2l4094 1C1E                     i2l4174 17D8  
                   i2l3640 1D6A                     i2l4184 1800                     i2l4098 1C32  
                   i2l3660 1DD6                     i2l3652 1DA4                     i2l3644 1D7E  
                   i2l4188 1816                     i2l3664 1DF0                     i2l3656 1DBC  
                   i2l3682 1E4E                     i2l3692 1E74                     i2l3684 1E56  
                   i2l3676 1E30                     i2l3668 1E0C                     i2l3696 1E84  
                   i2l3688 1E64                     i2l3970 20E2                     i2l3990 2128  
                   i2l3982 2110                     i2l3974 20F0                     i2l3966 20D6  
                   i2l3976 20F8                     i2l3978 20FC                     i2l3986 211A  
                   _OSCCON 000FD3                     _TMR0IE 007F95                     _TMR0IF 007F92  
                   _TMR1IE 007CE8                     _TMR1IF 007CF0                     _TMR0ON 007EAF  
                   _TMR1ON 007E68                     _TMR3ON 007D88                     _S1mode 005C  
                   _S2mode 00AB                     _SSPADD 000FC8                     _S3mode 005A  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038                     _addRun 1E96  
                   ___wmul 24C6             __CFG_STVREN$ON 000000                  ??___awmod 0005  
              ?i2_updateS1 0001                ?i2_updateS3 0001                  ??___lldiv 001D  
                ??___lwdiv 0019                  ??___lwmod 0020              displayLog@run 0037  
         __end_of_keycheck 2556           calibrateWheels@i 001A                     clear_0 2480  
                   clear_1 248C            eepromWrite@data 0015           __end_of_currtime FE15  
          ___awmod@divisor 0003            ___awmod@counter 0005                  ??_lcdInst 0017  
                   _printf 10C6                  ??_handler 0007                     main@ee 0084  
                ??_readADC 0015                  ??_initLCD 0018                  ??_isdigit 0015  
             __mediumconst FDEA                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8              ?_keyinterrupt 0001           __end_of_updateS1 15A8  
         __end_of_updateS2 1E96           __end_of_updateS3 1BFE                 __accesstop 0080  
  __end_of__initialization 2492               addRun@sodaNT 0029               addRun@soupNL 002D  
            ___rparam_used 000001             __pcstackCOMRAM 0001              __end_of_putch 2594  
       __size_of_lcdNibble 0056          eepromRead@address 0017             ??_keyinterrupt 0015  
           i2updateS1@mode 0001             i2updateS3@mode 0001                    ??_putch 0017  
               addRun@date 001F        __size_ofi2_updateS1 01D6        __size_ofi2_updateS3 014C  
               __pbssBANK0 009E                 addRun@mins 0023                 addRun@secs 0025  
               addRun@year 001B                    ?_addRun 0019                    ?___wmul 0015  
                  _CCP1CON 000FBD                    _CCP2CON 000FBA                    ?_printf 0021  
               _labelState 0052                 _eepromRead 2452          displayLog@currRun 003E  
 __size_of_calibrateWheels 0188         __size_of_startTMR1 0010                 _displayLog 0D6A  
                  _PWM1off 25B4                    _PWM2off 25AA                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7                  ?_keycheck 0001  
        __end_of_lcdNibble 22AC                    __Hparam 0000                    __Lparam 0000  
          __size_of_addRun 0132                  ?_updateS1 0015                  ?_updateS2 0001  
                ?_updateS3 0015                    ___awmod 20C2                    ___lldiv 1FC8  
          __size_of___wmul 0026                    ___lwdiv 22AC                    ___lwmod 23D8  
                _CMCONbits 000FB4                 _homescreen 219A                    __pcinit 247A  
                  __ramtop 1000                 _initialize 204A               ?i2_startTMR1 0001  
                  _lcdInst 2594                    _handler 0008                    __ptext0 0012  
                  __ptext1 2132                    __ptext2 25A0                    __ptext3 25BE  
                  __ptext4 25C6                    __ptext5 24A0                    __ptext6 2556  
                  __ptext7 252E                    __ptext8 204A                    __ptext9 2392  
          __size_of_printf 030C                  _T0CONbits 000FD5                    _readADC 24EC  
                  _initLCD 2392          __end_of_hexpowers FE0E                    _dpowers FDFC  
                  _isdigit 2510           ___awmod@dividend 0001                    _seconds 005E  
 __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012  
 __size_of_I2C_Master_Stop 0008             main@prevSodaIR 0098             __pintcode_body 177E  
     end_of_initialization 2492             main@prevSoupIR 009A                 ??_keycheck 0015  
            __Lmediumconst FDEA                    int_func 177E  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0019            ___lldiv@counter 0021  
     __end_of_keyinterrupt 2542                    printf@c 0036                    printf@f 0021  
         I2C_Master_Init@c 0022           I2C_Master_Read@a 0016                    postdec2 000FDD  
        __end_of_startTMR1 2578                    postinc0 000FEE                    postinc2 000FDE  
             ??i2_updateS1 0003               ??i2_updateS3 0003                 ??_updateS1 0017  
               ??_updateS2 0003                 ??_updateS3 0017                  _PORTBbits 000F81  
              ?_eepromRead 0001              addRun@currRun 0032                 _updateTime 2132  
              ?_displayLog 0037         __end_ofi2_updateS1 177E         __end_ofi2_updateS3 1D4A  
        ??_calibrateWheels 0018                _CCP1CONbits 000FBD              ??_eepromWrite 0016  
              printf@width 0034                _CCP2CONbits 000FBA                 main@sodaNT 008E  
               main@soupNL 008A                ?_homescreen 0001             __end_of_addRun 1FC8  
           __end_of___wmul 24EC                ?_initialize 0001             __end_of_printf 13D2  
      start_initialization 247A                updateTime@j 0018          ??_I2C_Master_Init 0026  
        ??_I2C_Master_Read 0016          ??_I2C_Master_Wait 0015          ??_I2C_Master_Stop 0016  
         __CFG_OSC$INTIO67 000000        __size_of_eepromRead 0028                   ??_addRun 002F  
      __end_of_eepromWrite 2452                   ??___wmul 0019        __size_of_displayLog 035C  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0029                addRun@hours 0021  
              addRun@sodaT 0027                addRun@month 001D                addRun@soupL 002B  
     __size_ofi2_startTMR1 0010                __pbssCOMRAM 0042              __pcstackBANK0 0080  
              ?_updateTime 0001               _isdigit$1450 0016                   ?_PWM1off 0001  
                 ?_PWM2off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0014  
      __size_of_initialize 0078                  addRun@dur 0019           _I2C_Master_Start 25C6  
         _I2C_Master_Write 25A0          __size_of_keycheck 0014           ___lwdiv@dividend 0015  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FDEA  
                _lcdNibble 2256                   ?___awmod 0001                   ?___lldiv 0015  
                 PWM1@duty 0015                   PWM2@duty 0015                   ?___lwdiv 0015  
                 ?___lwmod 001C          __size_of_updateS1 01D6          __size_of_updateS2 014C  
        __size_of_updateS3 014C                   ?_lcdInst 0001                   ?_handler 0001  
                 ?_readADC 0001                   ?_initLCD 0001                   ?_isdigit 0001  
             _keyinterrupt 252E                  _hexpowers FE06           ___lwdiv@quotient 001A  
           __size_of_putch 000C         eepromWrite@address 0018        calibrateWheels@prev 0018  
           ___wmul@product 0019                   _LATAbits 000F89                   _LATBbits 000F8A  
                 _LATCbits 000F8B                   _LATDbits 000F8C                   _LATEbits 000F8D  
              _eepromWrite 241A                  _sodaAlign 0050                   i2u422_40 15E6  
                 i2u433_40 169A                   _PIR2bits 000FA1                   i2u452_40 1C50  
                 i2u462_40 1CDC                   i2u376_40 1D9C                   i2u386_40 1E28  
                _sodaSteps 0056                   i2u781_47 1C04                   i2u782_47 15AE  
                 i2u783_47 15F4                   i2u784_47 166A                   i2u785_47 1D50  
         __CFG_WDTPS$32768 000000        __size_of_updateTime 0068                 ?_lcdNibble 0001  
                _startTMR1 2568                 _ADCON0bits 000FC2          ___wmul@multiplier 0015  
                _soupAlign 004E              lcdNibble@data 0016               ??_eepromRead 0015  
               printf@flag 0033              lcdNibble@temp 0015                  _soupSteps 0058  
               printf@prec 0030                  main@sodaT 008C            _calibrateWheels 192A  
                main@soupL 0088           main@prevSodaLoad 0092               ??_displayLog 0039  
      I2C_Master_Read@temp 0017           __size_of_PWM1off 000A           __size_of_PWM2off 000A  
         main@prevSoupLoad 0090                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead 247A         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0037           __size_of___awmod 0070         __end_of_displayLog 10C6  
         __size_of___lldiv 0082           __size_of___lwdiv 0052           __size_of___lwmod 0042  
           readADC@channel 0016               ??_initialize 002A                 ?_startTMR1 0001  
         __size_of_lcdInst 000C           __size_of_handler 1922            _I2C_Master_Init 21FC  
         __size_of_readADC 0024            _I2C_Master_Read 24A0           __size_of_initLCD 0046  
          _I2C_Master_Wait 2556            _I2C_Master_Stop 25BE           __size_of_isdigit 001E  
          ___lwdiv@divisor 0017            ___lwdiv@counter 0019                   __ptext10 21FC  
                 __ptext11 1FC8                   __ptext20 2594                   __ptext12 219A  
                 __ptext21 2256                   __ptext13 0D6A                   __ptext30 2452  
                 __ptext22 2542                   __ptext14 10C6                   __ptext31 25AA  
                 __ptext23 192A                   __ptext15 2588                   __ptext40 20C2  
                 __ptext32 22FE                   __ptext24 1AB2                   __ptext16 2510  
                 __ptext33 25B4                   __ptext25 13D2                   __ptext17 24C6  
                 __ptext34 2348                   __ptext26 2568                   __ptext18 23D8  
                 __ptext27 24EC                   __ptext19 22AC                   __ptext36 1BFE  
                 __ptext28 1E96                   __ptext37 15A8                   __ptext29 241A  
                 __ptext38 2578                   __ptext39 1D4A              __size_of_PWM1 004A  
            __size_of_PWM2 004A         __end_of_homescreen 21FC                   _keycheck 2542  
                 _tabState 0054              __size_of_main 0D58                   _currtime FE0E  
                 _keypress 0060         __end_of_initialize 20C2                ??_lcdNibble 0015  
                 int$flags 0061                   _updateS1 13D2                   _updateS2 1D4A  
                 _updateS3 1AB2                  printf@idx 002D                  printf@val 0031  
  __end_of_calibrateWheels 1AB2                  putch@data 0017   __end_of_I2C_Master_Start 25CE  
              _OSCTUNEbits 000F9B   __end_of_I2C_Master_Write 25AA                 _INTCONbits 000FF2  
             ??_updateTime 0018                   isdigit@c 0017                   intlevel2 0000  
         ___lwmod@dividend 001C           ___lldiv@dividend 0015                   printf@ap 002E  
       __end_of_updateTime 219A    __end_of_I2C_Master_Init 2256    __end_of_I2C_Master_Read 24C6  
  __end_of_I2C_Master_Wait 2568    __end_of_I2C_Master_Stop 25C6                lcdInst@data 0017  
            ??i2_startTMR1 0001                ??_startTMR1 0015           ___lldiv@quotient 001D  
        I2C_Master_Write@d 0016            ___lwmod@divisor 001E            ___lwmod@counter 0020  
             ?_eepromWrite 0015  
