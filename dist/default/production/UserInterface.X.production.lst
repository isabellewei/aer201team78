

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Mar 19 15:42:55 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	text36,global,reloc=2,class=CODE,delta=1
    46                           	psect	text37,global,reloc=2,class=CODE,delta=1
    47                           	psect	text38,global,reloc=2,class=CODE,delta=1
    48                           	psect	text39,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51  0000                     
    52                           ; Version 1.41
    53                           ; Generated 25/01/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4620 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	mediumconst
    88  00FDDE                     __pmediumconst:
    89                           	opt stack 0
    90  00FDDE  00                 	db	0
    91  00FDDF                     _dpowers:
    92                           	opt stack 0
    93  00FDDF  0001               	dw	1
    94  00FDE1  0000               	dw	0
    95  00FDE3  000A               	dw	10
    96  00FDE5  0000               	dw	0
    97  00FDE7  0064               	dw	100
    98  00FDE9  0000               	dw	0
    99  00FDEB  03E8               	dw	1000
   100  00FDED  0000               	dw	0
   101  00FDEF  2710               	dw	10000
   102  00FDF1  0000               	dw	0
   103  00FDF3  86A0               	dw	34464
   104  00FDF5  0001               	dw	1
   105  00FDF7  4240               	dw	16960
   106  00FDF9  000F               	dw	15
   107  00FDFB  9680               	dw	38528
   108  00FDFD  0098               	dw	152
   109  00FDFF  E100               	dw	57600
   110  00FE01  05F5               	dw	1525
   111  00FE03  CA00               	dw	51712
   112  00FE05  3B9A               	dw	15258
   113  00FE07                     __end_of_dpowers:
   114                           	opt stack 0
   115  00FE07                     _hexpowers:
   116                           	opt stack 0
   117  00FE07  0001               	dw	1
   118  00FE09  0000               	dw	0
   119  00FE0B  0010               	dw	16
   120  00FE0D  0000               	dw	0
   121  00FE0F  0100               	dw	256
   122  00FE11  0000               	dw	0
   123  00FE13  1000               	dw	4096
   124  00FE15  0000               	dw	0
   125  00FE17  0000               	dw	0
   126  00FE19  0001               	dw	1
   127  00FE1B  0000               	dw	0
   128  00FE1D  0010               	dw	16
   129  00FE1F  0000               	dw	0
   130  00FE21  0100               	dw	256
   131  00FE23  0000               	dw	0
   132  00FE25  1000               	dw	4096
   133  00FE27                     __end_of_hexpowers:
   134                           	opt stack 0
   135  00FE27                     _keys:
   136                           	opt stack 0
   137  00FE27  31                 	db	49
   138  00FE28  32                 	db	50
   139  00FE29  33                 	db	51
   140  00FE2A  41                 	db	65
   141  00FE2B  34                 	db	52
   142  00FE2C  35                 	db	53
   143  00FE2D  36                 	db	54
   144  00FE2E  42                 	db	66
   145  00FE2F  37                 	db	55
   146  00FE30  38                 	db	56
   147  00FE31  39                 	db	57
   148  00FE32  43                 	db	67
   149  00FE33  2A                 	db	42
   150  00FE34  30                 	db	48
   151  00FE35  23                 	db	35
   152  00FE36  44                 	db	68
   153  00FE37  00                 	db	0
   154  00FE38                     __end_of_keys:
   155                           	opt stack 0
   156  00FE38                     _currtime:
   157                           	opt stack 0
   158  00FE38  30                 	db	48
   159  00FE39  26                 	db	38
   160  00FE3A  13                 	db	19
   161  00FE3B  04                 	db	4
   162  00FE3C  01                 	db	1
   163  00FE3D  03                 	db	3
   164  00FE3E  17                 	db	23
   165  00FE3F                     __end_of_currtime:
   166                           	opt stack 0
   167  0000                     _ADRES	set	4035
   168  0000                     _ADCON0bits	set	4034
   169  0000                     _PIR2bits	set	4001
   170  0000                     _EECON2	set	4007
   171  0000                     _EEDATA	set	4008
   172  0000                     _EECON1bits	set	4006
   173  0000                     _EEADR	set	4009
   174  0000                     _EEADRH	set	4010
   175  0000                     _PORTB	set	3969
   176  0000                     _PORTBbits	set	3969
   177  0000                     _LATCbits	set	3979
   178  0000                     _LATAbits	set	3977
   179  0000                     _LATEbits	set	3981
   180  0000                     _TMR0L	set	4054
   181  0000                     _CCP2CONbits	set	4026
   182  0000                     _CCP1CONbits	set	4029
   183  0000                     _SSPBUF	set	4041
   184  0000                     _SSPADD	set	4040
   185  0000                     _SSPCON2	set	4037
   186  0000                     _SSPCON1	set	4038
   187  0000                     _SSPSTAT	set	4039
   188  0000                     _LATBbits	set	3978
   189  0000                     _LATDbits	set	3980
   190  0000                     _ADRESL	set	4035
   191  0000                     _ADRESH	set	4036
   192  0000                     _T0CON	set	4053
   193  0000                     _CMCONbits	set	4020
   194  0000                     _CVRCON	set	4021
   195  0000                     _ADCON1	set	4033
   196  0000                     _ADCON0	set	4034
   197  0000                     _LATE	set	3981
   198  0000                     _LATD	set	3980
   199  0000                     _LATC	set	3979
   200  0000                     _LATB	set	3978
   201  0000                     _LATA	set	3977
   202  0000                     _T2CON	set	4042
   203  0000                     _CCPR2L	set	4027
   204  0000                     _CCP2CON	set	4026
   205  0000                     _CCPR1L	set	4030
   206  0000                     _CCP1CON	set	4029
   207  0000                     _PR2	set	4043
   208  0000                     _TRISE	set	3990
   209  0000                     _TRISD	set	3989
   210  0000                     _TRISC	set	3988
   211  0000                     _TRISB	set	3987
   212  0000                     _TRISA	set	3986
   213  0000                     _OSCTUNEbits	set	3995
   214  0000                     _OSCCON	set	4051
   215  0000                     _ACKEN	set	32300
   216  0000                     _ACKDT	set	32301
   217  0000                     _RCEN	set	32299
   218  0000                     _PEN	set	32298
   219  0000                     _RSEN	set	32297
   220  0000                     _SEN	set	32296
   221  0000                     _TRISC4	set	31908
   222  0000                     _TRISC3	set	31907
   223  0000                     _ADFM	set	32263
   224  0000                     _nRBPU	set	32655
   225  00FE3F                     STR_31:
   226  00FE3F  46                 	db	70	;'F'
   227  00FE40  69                 	db	105	;'i'
   228  00FE41  6E                 	db	110	;'n'
   229  00FE42  69                 	db	105	;'i'
   230  00FE43  73                 	db	115	;'s'
   231  00FE44  68                 	db	104	;'h'
   232  00FE45  65                 	db	101	;'e'
   233  00FE46  64                 	db	100	;'d'
   234  00FE47  20                 	db	32
   235  00FE48  73                 	db	115	;'s'
   236  00FE49  6F                 	db	111	;'o'
   237  00FE4A  72                 	db	114	;'r'
   238  00FE4B  74                 	db	116	;'t'
   239  00FE4C  69                 	db	105	;'i'
   240  00FE4D  6E                 	db	110	;'n'
   241  00FE4E  67                 	db	103	;'g'
   242  00FE4F  21                 	db	33
   243  00FE50  20                 	db	32
   244  00FE51  00                 	db	0
   245  00FE52                     STR_43:
   246  00FE52  30                 	db	48	;'0'
   247  00FE53  31                 	db	49	;'1'
   248  00FE54  32                 	db	50	;'2'
   249  00FE55  33                 	db	51	;'3'
   250  00FE56  34                 	db	52	;'4'
   251  00FE57  35                 	db	53	;'5'
   252  00FE58  36                 	db	54	;'6'
   253  00FE59  37                 	db	55	;'7'
   254  00FE5A  38                 	db	56	;'8'
   255  00FE5B  39                 	db	57	;'9'
   256  00FE5C  61                 	db	97	;'a'
   257  00FE5D  62                 	db	98	;'b'
   258  00FE5E  63                 	db	99	;'c'
   259  00FE5F  64                 	db	100	;'d'
   260  00FE60  65                 	db	101	;'e'
   261  00FE61  66                 	db	102	;'f'
   262  00FE62  00                 	db	0
   263  00FE63                     STR_17:
   264  00FE63  74                 	db	116	;'t'
   265  00FE64  65                 	db	101	;'e'
   266  00FE65  73                 	db	115	;'s'
   267  00FE66  74                 	db	116	;'t'
   268  00FE67  69                 	db	105	;'i'
   269  00FE68  6E                 	db	110	;'n'
   270  00FE69  67                 	db	103	;'g'
   271  00FE6A  20                 	db	32
   272  00FE6B  66                 	db	102	;'f'
   273  00FE6C  61                 	db	97	;'a'
   274  00FE6D  73                 	db	115	;'s'
   275  00FE6E  74                 	db	116	;'t'
   276  00FE6F  73                 	db	115	;'s'
   277  00FE70  74                 	db	116	;'t'
   278  00FE71  65                 	db	101	;'e'
   279  00FE72  70                 	db	112	;'p'
   280  00FE73  00                 	db	0
   281  00FE74                     STR_33:
   282  00FE74  25                 	db	37
   283  00FE75  30                 	db	48	;'0'
   284  00FE76  32                 	db	50	;'2'
   285  00FE77  78                 	db	120	;'x'
   286  00FE78  2F                 	db	47
   287  00FE79  25                 	db	37
   288  00FE7A  30                 	db	48	;'0'
   289  00FE7B  32                 	db	50	;'2'
   290  00FE7C  78                 	db	120	;'x'
   291  00FE7D  2F                 	db	47
   292  00FE7E  25                 	db	37
   293  00FE7F  30                 	db	48	;'0'
   294  00FE80  32                 	db	50	;'2'
   295  00FE81  78                 	db	120	;'x'
   296  00FE82  20                 	db	32
   297  00FE83  00                 	db	0
   298  00FE84                     STR_40:
   299  00FE84  23                 	db	35
   300  00FE85  20                 	db	32
   301  00FE86  73                 	db	115	;'s'
   302  00FE87  6F                 	db	111	;'o'
   303  00FE88  64                 	db	100	;'d'
   304  00FE89  61                 	db	97	;'a'
   305  00FE8A  20                 	db	32
   306  00FE8B  63                 	db	99	;'c'
   307  00FE8C  61                 	db	97	;'a'
   308  00FE8D  6E                 	db	110	;'n'
   309  00FE8E  73                 	db	115	;'s'
   310  00FE8F  3A                 	db	58	;':'
   311  00FE90  20                 	db	32
   312  00FE91  25                 	db	37
   313  00FE92  64                 	db	100	;'d'
   314  00FE93  00                 	db	0
   315  00FE94                     STR_37:
   316  00FE94  52                 	db	82	;'R'
   317  00FE95  75                 	db	117	;'u'
   318  00FE96  6E                 	db	110	;'n'
   319  00FE97  23                 	db	35
   320  00FE98  31                 	db	49	;'1'
   321  00FE99  20                 	db	32
   322  00FE9A  20                 	db	32
   323  00FE9B  20                 	db	32
   324  00FE9C  20                 	db	32
   325  00FE9D  41                 	db	65	;'A'
   326  00FE9E  3A                 	db	58	;':'
   327  00FE9F  4E                 	db	78	;'N'
   328  00FEA0  65                 	db	101	;'e'
   329  00FEA1  78                 	db	120	;'x'
   330  00FEA2  74                 	db	116	;'t'
   331  00FEA3  00                 	db	0
   332  00FEA4                     STR_1:
   333  00FEA4  53                 	db	83	;'S'
   334  00FEA5  6F                 	db	111	;'o'
   335  00FEA6  72                 	db	114	;'r'
   336  00FEA7  74                 	db	116	;'t'
   337  00FEA8  69                 	db	105	;'i'
   338  00FEA9  6E                 	db	110	;'n'
   339  00FEAA  67                 	db	103	;'g'
   340  00FEAB  20                 	db	32
   341  00FEAC  63                 	db	99	;'c'
   342  00FEAD  61                 	db	97	;'a'
   343  00FEAE  6E                 	db	110	;'n'
   344  00FEAF  73                 	db	115	;'s'
   345  00FEB0  2E                 	db	46
   346  00FEB1  2E                 	db	46
   347  00FEB2  2E                 	db	46
   348  00FEB3  00                 	db	0
   349  00FEB4                     STR_5:
   350  00FEB4  74                 	db	116	;'t'
   351  00FEB5  65                 	db	101	;'e'
   352  00FEB6  73                 	db	115	;'s'
   353  00FEB7  74                 	db	116	;'t'
   354  00FEB8  69                 	db	105	;'i'
   355  00FEB9  6E                 	db	110	;'n'
   356  00FEBA  67                 	db	103	;'g'
   357  00FEBB  20                 	db	32
   358  00FEBC  53                 	db	83	;'S'
   359  00FEBD  31                 	db	49	;'1'
   360  00FEBE  73                 	db	115	;'s'
   361  00FEBF  68                 	db	104	;'h'
   362  00FEC0  61                 	db	97	;'a'
   363  00FEC1  6B                 	db	107	;'k'
   364  00FEC2  65                 	db	101	;'e'
   365  00FEC3  00                 	db	0
   366  00FEC4                     STR_2:
   367  00FEC4  41                 	db	65	;'A'
   368  00FEC5  6E                 	db	110	;'n'
   369  00FEC6  79                 	db	121	;'y'
   370  00FEC7  20                 	db	32
   371  00FEC8  6B                 	db	107	;'k'
   372  00FEC9  65                 	db	101	;'e'
   373  00FECA  79                 	db	121	;'y'
   374  00FECB  20                 	db	32
   375  00FECC  74                 	db	116	;'t'
   376  00FECD  6F                 	db	111	;'o'
   377  00FECE  20                 	db	32
   378  00FECF  73                 	db	115	;'s'
   379  00FED0  74                 	db	116	;'t'
   380  00FED1  6F                 	db	111	;'o'
   381  00FED2  70                 	db	112	;'p'
   382  00FED3  00                 	db	0
   383  00FED4                     STR_42:
   384  00FED4  23                 	db	35
   385  00FED5  20                 	db	32
   386  00FED6  73                 	db	115	;'s'
   387  00FED7  6F                 	db	111	;'o'
   388  00FED8  75                 	db	117	;'u'
   389  00FED9  70                 	db	112	;'p'
   390  00FEDA  20                 	db	32
   391  00FEDB  63                 	db	99	;'c'
   392  00FEDC  61                 	db	97	;'a'
   393  00FEDD  6E                 	db	110	;'n'
   394  00FEDE  73                 	db	115	;'s'
   395  00FEDF  3A                 	db	58	;':'
   396  00FEE0  20                 	db	32
   397  00FEE1  34                 	db	52	;'4'
   398  00FEE2  00                 	db	0
   399  00FEE3                     STR_35:
   400  00FEE3  25                 	db	37
   401  00FEE4  30                 	db	48	;'0'
   402  00FEE5  32                 	db	50	;'2'
   403  00FEE6  78                 	db	120	;'x'
   404  00FEE7  3A                 	db	58	;':'
   405  00FEE8  25                 	db	37
   406  00FEE9  30                 	db	48	;'0'
   407  00FEEA  32                 	db	50	;'2'
   408  00FEEB  78                 	db	120	;'x'
   409  00FEEC  3A                 	db	58	;':'
   410  00FEED  25                 	db	37
   411  00FEEE  30                 	db	48	;'0'
   412  00FEEF  32                 	db	50	;'2'
   413  00FEF0  78                 	db	120	;'x'
   414  00FEF1  00                 	db	0
   415  00FEF2                     STR_38:
   416  00FEF2  23                 	db	35
   417  00FEF3  20                 	db	32
   418  00FEF4  6F                 	db	111	;'o'
   419  00FEF5  66                 	db	102	;'f'
   420  00FEF6  20                 	db	32
   421  00FEF7  63                 	db	99	;'c'
   422  00FEF8  61                 	db	97	;'a'
   423  00FEF9  6E                 	db	110	;'n'
   424  00FEFA  73                 	db	115	;'s'
   425  00FEFB  3A                 	db	58	;':'
   426  00FEFC  20                 	db	32
   427  00FEFD  25                 	db	37
   428  00FEFE  64                 	db	100	;'d'
   429  00FEFF  00                 	db	0
   430  00FF00                     STR_18:
   431  00FF00  70                 	db	112	;'p'
   432  00FF01  72                 	db	114	;'r'
   433  00FF02  6F                 	db	111	;'o'
   434  00FF03  67                 	db	103	;'g'
   435  00FF04  72                 	db	114	;'r'
   436  00FF05  61                 	db	97	;'a'
   437  00FF06  6D                 	db	109	;'m'
   438  00FF07  20                 	db	32
   439  00FF08  73                 	db	115	;'s'
   440  00FF09  70                 	db	112	;'p'
   441  00FF0A  65                 	db	101	;'e'
   442  00FF0B  65                 	db	101	;'e'
   443  00FF0C  64                 	db	100	;'d'
   444  00FF0D  00                 	db	0
   445  00FF0E                     STR_15:
   446  00FF0E  74                 	db	116	;'t'
   447  00FF0F  65                 	db	101	;'e'
   448  00FF10  73                 	db	115	;'s'
   449  00FF11  74                 	db	116	;'t'
   450  00FF12  69                 	db	105	;'i'
   451  00FF13  6E                 	db	110	;'n'
   452  00FF14  67                 	db	103	;'g'
   453  00FF15  20                 	db	32
   454  00FF16  6C                 	db	108	;'l'
   455  00FF17  61                 	db	97	;'a'
   456  00FF18  62                 	db	98	;'b'
   457  00FF19  65                 	db	101	;'e'
   458  00FF1A  6C                 	db	108	;'l'
   459  00FF1B  00                 	db	0
   460  00FF1C                     STR_20:
   461  00FF1C  73                 	db	115	;'s'
   462  00FF1D  6F                 	db	111	;'o'
   463  00FF1E  75                 	db	117	;'u'
   464  00FF1F  70                 	db	112	;'p'
   465  00FF20  20                 	db	32
   466  00FF21  63                 	db	99	;'c'
   467  00FF22  61                 	db	97	;'a'
   468  00FF23  6E                 	db	110	;'n'
   469  00FF24  20                 	db	32
   470  00FF25  74                 	db	116	;'t'
   471  00FF26  65                 	db	101	;'e'
   472  00FF27  73                 	db	115	;'s'
   473  00FF28  74                 	db	116	;'t'
   474  00FF29  00                 	db	0
   475  00FF2A                     STR_7:
   476  00FF2A  74                 	db	116	;'t'
   477  00FF2B  65                 	db	101	;'e'
   478  00FF2C  73                 	db	115	;'s'
   479  00FF2D  74                 	db	116	;'t'
   480  00FF2E  69                 	db	105	;'i'
   481  00FF2F  6E                 	db	110	;'n'
   482  00FF30  67                 	db	103	;'g'
   483  00FF31  20                 	db	32
   484  00FF32  50                 	db	80	;'P'
   485  00FF33  57                 	db	87	;'W'
   486  00FF34  4D                 	db	77	;'M'
   487  00FF35  31                 	db	49	;'1'
   488  00FF36  00                 	db	0
   489  00FF37                     STR_6:
   490  00FF37  74                 	db	116	;'t'
   491  00FF38  65                 	db	101	;'e'
   492  00FF39  73                 	db	115	;'s'
   493  00FF3A  74                 	db	116	;'t'
   494  00FF3B  69                 	db	105	;'i'
   495  00FF3C  6E                 	db	110	;'n'
   496  00FF3D  67                 	db	103	;'g'
   497  00FF3E  20                 	db	32
   498  00FF3F  50                 	db	80	;'P'
   499  00FF40  57                 	db	87	;'W'
   500  00FF41  4D                 	db	77	;'M'
   501  00FF42  32                 	db	50	;'2'
   502  00FF43  00                 	db	0
   503  00FF44                     STR_25:
   504  00FF44  72                 	db	114	;'r'
   505  00FF45  65                 	db	101	;'e'
   506  00FF46  74                 	db	116	;'t'
   507  00FF47  75                 	db	117	;'u'
   508  00FF48  72                 	db	114	;'r'
   509  00FF49  6E                 	db	110	;'n'
   510  00FF4A  69                 	db	105	;'i'
   511  00FF4B  6E                 	db	110	;'n'
   512  00FF4C  67                 	db	103	;'g'
   513  00FF4D  20                 	db	32
   514  00FF4E  25                 	db	37
   515  00FF4F  64                 	db	100	;'d'
   516  00FF50  00                 	db	0
   517  00FF51                     STR_9:
   518  00FF51  74                 	db	116	;'t'
   519  00FF52  65                 	db	101	;'e'
   520  00FF53  73                 	db	115	;'s'
   521  00FF54  74                 	db	116	;'t'
   522  00FF55  69                 	db	105	;'i'
   523  00FF56  6E                 	db	110	;'n'
   524  00FF57  67                 	db	103	;'g'
   525  00FF58  20                 	db	32
   526  00FF59  49                 	db	73	;'I'
   527  00FF5A  52                 	db	82	;'R'
   528  00FF5B  31                 	db	49	;'1'
   529  00FF5C  00                 	db	0
   530  00FF5D                     STR_11:
   531  00FF5D  74                 	db	116	;'t'
   532  00FF5E  65                 	db	101	;'e'
   533  00FF5F  73                 	db	115	;'s'
   534  00FF60  74                 	db	116	;'t'
   535  00FF61  69                 	db	105	;'i'
   536  00FF62  6E                 	db	110	;'n'
   537  00FF63  67                 	db	103	;'g'
   538  00FF64  20                 	db	32
   539  00FF65  49                 	db	73	;'I'
   540  00FF66  52                 	db	82	;'R'
   541  00FF67  32                 	db	50	;'2'
   542  00FF68  00                 	db	0
   543  00FF69                     STR_13:
   544  00FF69  74                 	db	116	;'t'
   545  00FF6A  65                 	db	101	;'e'
   546  00FF6B  73                 	db	115	;'s'
   547  00FF6C  74                 	db	116	;'t'
   548  00FF6D  69                 	db	105	;'i'
   549  00FF6E  6E                 	db	110	;'n'
   550  00FF6F  67                 	db	103	;'g'
   551  00FF70  20                 	db	32
   552  00FF71  49                 	db	73	;'I'
   553  00FF72  52                 	db	82	;'R'
   554  00FF73  33                 	db	51	;'3'
   555  00FF74  00                 	db	0
   556  00FF75                     STR_4:
   557  00FF75  74                 	db	116	;'t'
   558  00FF76  65                 	db	101	;'e'
   559  00FF77  73                 	db	115	;'s'
   560  00FF78  74                 	db	116	;'t'
   561  00FF79  69                 	db	105	;'i'
   562  00FF7A  6E                 	db	110	;'n'
   563  00FF7B  67                 	db	103	;'g'
   564  00FF7C  20                 	db	32
   565  00FF7D  53                 	db	83	;'S'
   566  00FF7E  20                 	db	32
   567  00FF7F  62                 	db	98	;'b'
   568  00FF80  00                 	db	0
   569  00FF81                     STR_29:
   570  00FF81  66                 	db	102	;'f'
   571  00FF82  69                 	db	105	;'i'
   572  00FF83  6E                 	db	110	;'n'
   573  00FF84  69                 	db	105	;'i'
   574  00FF85  73                 	db	115	;'s'
   575  00FF86  68                 	db	104	;'h'
   576  00FF87  65                 	db	101	;'e'
   577  00FF88  64                 	db	100	;'d'
   578  00FF89  20                 	db	32
   579  00FF8A  25                 	db	37
   580  00FF8B  64                 	db	100	;'d'
   581  00FF8C  00                 	db	0
   582  00FF8D                     STR_3:
   583  00FF8D  74                 	db	116	;'t'
   584  00FF8E  65                 	db	101	;'e'
   585  00FF8F  73                 	db	115	;'s'
   586  00FF90  74                 	db	116	;'t'
   587  00FF91  69                 	db	105	;'i'
   588  00FF92  6E                 	db	110	;'n'
   589  00FF93  67                 	db	103	;'g'
   590  00FF94  20                 	db	32
   591  00FF95  53                 	db	83	;'S'
   592  00FF96  20                 	db	32
   593  00FF97  66                 	db	102	;'f'
   594  00FF98  00                 	db	0
   595  00FF99                     STR_24:
   596  00FF99  73                 	db	115	;'s'
   597  00FF9A  6F                 	db	111	;'o'
   598  00FF9B  72                 	db	114	;'r'
   599  00FF9C  74                 	db	116	;'t'
   600  00FF9D  69                 	db	105	;'i'
   601  00FF9E  6E                 	db	110	;'n'
   602  00FF9F  67                 	db	103	;'g'
   603  00FFA0  20                 	db	32
   604  00FFA1  25                 	db	37
   605  00FFA2  64                 	db	100	;'d'
   606  00FFA3  00                 	db	0
   607  00FFA4                     STR_22:
   608  00FFA4  74                 	db	116	;'t'
   609  00FFA5  65                 	db	101	;'e'
   610  00FFA6  73                 	db	115	;'s'
   611  00FFA7  74                 	db	116	;'t'
   612  00FFA8  69                 	db	105	;'i'
   613  00FFA9  6E                 	db	110	;'n'
   614  00FFAA  67                 	db	103	;'g'
   615  00FFAB  20                 	db	32
   616  00FFAC  25                 	db	37
   617  00FFAD  64                 	db	100	;'d'
   618  00FFAE  00                 	db	0
   619  00FFAF                     STR_19:
   620  00FFAF  6C                 	db	108	;'l'
   621  00FFB0  6F                 	db	111	;'o'
   622  00FFB1  6F                 	db	111	;'o'
   623  00FFB2  70                 	db	112	;'p'
   624  00FFB3  73                 	db	115	;'s'
   625  00FFB4  3A                 	db	58	;':'
   626  00FFB5  20                 	db	32
   627  00FFB6  25                 	db	37
   628  00FFB7  6C                 	db	108	;'l'
   629  00FFB8  75                 	db	117	;'u'
   630  00FFB9  00                 	db	0
   631  00FFBA                     STR_8:
   632  00FFBA  74                 	db	116	;'t'
   633  00FFBB  69                 	db	105	;'i'
   634  00FFBC  6D                 	db	109	;'m'
   635  00FFBD  65                 	db	101	;'e'
   636  00FFBE  20                 	db	32
   637  00FFBF  25                 	db	37
   638  00FFC0  78                 	db	120	;'x'
   639  00FFC1  20                 	db	32
   640  00FFC2  25                 	db	37
   641  00FFC3  78                 	db	120	;'x'
   642  00FFC4  00                 	db	0
   643  00FFC5                     STR_21:
   644  00FFC5  76                 	db	118	;'v'
   645  00FFC6  61                 	db	97	;'a'
   646  00FFC7  6C                 	db	108	;'l'
   647  00FFC8  75                 	db	117	;'u'
   648  00FFC9  65                 	db	101	;'e'
   649  00FFCA  3A                 	db	58	;':'
   650  00FFCB  20                 	db	32
   651  00FFCC  25                 	db	37
   652  00FFCD  78                 	db	120	;'x'
   653  00FFCE  00                 	db	0
   654  00FFCF                     STR_23:
   655  00FFCF  6E                 	db	110	;'n'
   656  00FFD0  6F                 	db	111	;'o'
   657  00FFD1  20                 	db	32
   658  00FFD2  6C                 	db	108	;'l'
   659  00FFD3  61                 	db	97	;'a'
   660  00FFD4  62                 	db	98	;'b'
   661  00FFD5  65                 	db	101	;'e'
   662  00FFD6  6C                 	db	108	;'l'
   663  00FFD7  00                 	db	0
   664  00FFD8                     STR_36:
   665  00FFD8  20                 	db	32
   666  00FFD9  32                 	db	50	;'2'
   667  00FFDA  3A                 	db	58	;':'
   668  00FFDB  4C                 	db	76	;'L'
   669  00FFDC  6F                 	db	111	;'o'
   670  00FFDD  67                 	db	103	;'g'
   671  00FFDE  73                 	db	115	;'s'
   672  00FFDF  00                 	db	0
   673  00FFE0                     STR_34:
   674  00FFE0  33                 	db	51	;'3'
   675  00FFE1  3A                 	db	58	;':'
   676  00FFE2  53                 	db	83	;'S'
   677  00FFE3  74                 	db	116	;'t'
   678  00FFE4  61                 	db	97	;'a'
   679  00FFE5  72                 	db	114	;'r'
   680  00FFE6  74                 	db	116	;'t'
   681  00FFE7  00                 	db	0
   682  00FFE8                     STR_30:
   683  00FFE8  73                 	db	115	;'s'
   684  00FFE9  6F                 	db	111	;'o'
   685  00FFEA  72                 	db	114	;'r'
   686  00FFEB  74                 	db	116	;'t'
   687  00FFEC  69                 	db	105	;'i'
   688  00FFED  6E                 	db	110	;'n'
   689  00FFEE  67                 	db	103	;'g'
   690  00FFEF  00                 	db	0
   691  00FFF0                     STR_16:
   692  00FFF0  25                 	db	37
   693  00FFF1  78                 	db	120	;'x'
   694  00FFF2  20                 	db	32
   695  00FFF3  20                 	db	32
   696  00FFF4  20                 	db	32
   697  00FFF5  25                 	db	37
   698  00FFF6  78                 	db	120	;'x'
   699  00FFF7  00                 	db	0
   700  00FFF8                     STR_32:
   701  00FFF8  25                 	db	37
   702  00FFF9  64                 	db	100	;'d'
   703  00FFFA  20                 	db	32
   704  00FFFB  20                 	db	32
   705  00FFFC  25                 	db	37
   706  00FFFD  64                 	db	100	;'d'
   707  00FFFE  00                 	db	0
   708  0000                     
   709                           ; #config settings
   710  00FFFF  00                 	db	0	; dummy byte at the end
   711  0000                     
   712                           	psect	cinit
   713  00DE64                     __pcinit:
   714                           	opt stack 0
   715  00DE64                     start_initialization:
   716                           	opt stack 0
   717  00DE64                     __initialization:
   718                           	opt stack 0
   719                           
   720                           ; Clear objects allocated to COMRAM (18 bytes)
   721  00DE64  EE00  F05F         	lfsr	0,__pbssCOMRAM
   722  00DE68  0E12               	movlw	18
   723  00DE6A                     clear_0:
   724  00DE6A  6AEE               	clrf	postinc0,c
   725  00DE6C  06E8               	decf	wreg,f,c
   726  00DE6E  E1FD               	bnz	clear_0
   727  00DE70                     end_of_initialization:
   728                           	opt stack 0
   729  00DE70                     __end_of__initialization:
   730                           	opt stack 0
   731  00DE70  0E00               	movlw	low (__Lmediumconst shr (0+16))
   732  00DE72  6EF8               	movwf	tblptru,c
   733  00DE74  0100               	movlb	0
   734  00DE76  EF1F  F076         	goto	_main	;jump to C main() function
   735                           tblptru	equ	0xFF8
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           
   739                           	psect	bssCOMRAM
   740  00005F                     __pbssCOMRAM:
   741                           	opt stack 0
   742  00005F                     _time:
   743                           	opt stack 0
   744  00005F                     	ds	7
   745  000066                     _curr:
   746                           	opt stack 0
   747  000066                     	ds	2
   748  000068                     _prev:
   749                           	opt stack 0
   750  000068                     	ds	2
   751  00006A                     _t:
   752                           	opt stack 0
   753  00006A                     	ds	2
   754  00006C                     _s:
   755                           	opt stack 0
   756  00006C                     	ds	2
   757  00006E                     _s1:
   758                           	opt stack 0
   759  00006E                     	ds	2
   760  000070                     _keypress:
   761                           	opt stack 0
   762  000070                     	ds	1
   763                           tblptru	equ	0xFF8
   764                           postinc0	equ	0xFEE
   765                           wreg	equ	0xFE8
   766                           
   767                           	psect	cstackCOMRAM
   768  000001                     __pcstackCOMRAM:
   769                           	opt stack 0
   770  000001                     ??_readADC:
   771  000001                     ??_eepromRead:
   772  000001                     ??_isdigit:
   773  000001                     ??_I2C_Master_Wait:
   774  000001                     ?___wmul:
   775                           	opt stack 0
   776  000001                     ?___lldiv:
   777                           	opt stack 0
   778  000001                     lcdNibble@temp:
   779                           	opt stack 0
   780  000001                     PWM1@duty:
   781                           	opt stack 0
   782  000001                     PWM2@duty:
   783                           	opt stack 0
   784  000001                     ___wmul@multiplier:
   785                           	opt stack 0
   786  000001                     ___lldiv@dividend:
   787                           	opt stack 0
   788                           
   789                           ; 4 bytes @ 0x0
   790  000001                     	ds	1
   791  000002                     lcdNibble@data:
   792                           	opt stack 0
   793  000002                     I2C_Master_Read@a:
   794                           	opt stack 0
   795  000002                     readADC@channel:
   796                           	opt stack 0
   797  000002                     _isdigit$1262:
   798                           	opt stack 0
   799  000002                     I2C_Master_Write@d:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x1
   803  000002                     	ds	1
   804  000003                     ??_PWM1:
   805  000003                     ??_PWM2:
   806  000003                     lcdInst@data:
   807                           	opt stack 0
   808  000003                     putch@data:
   809                           	opt stack 0
   810  000003                     I2C_Master_Read@temp:
   811                           	opt stack 0
   812  000003                     eepromRead@address:
   813                           	opt stack 0
   814  000003                     isdigit@c:
   815                           	opt stack 0
   816  000003                     ___wmul@multiplicand:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x2
   820  000003                     	ds	1
   821  000004                     ??_initLCD:
   822  000004                     updateTime@j:
   823                           	opt stack 0
   824  000004                     eepromWrite@data:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x3
   828  000004                     	ds	1
   829  000005                     ??_eepromWrite:
   830  000005                     ___wmul@product:
   831                           	opt stack 0
   832  000005                     ___lldiv@divisor:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x4
   836  000005                     	ds	2
   837  000007                     ?_timePassed:
   838                           	opt stack 0
   839  000007                     eepromWrite@address:
   840                           	opt stack 0
   841  000007                     timePassed@start:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x6
   845  000007                     	ds	2
   846  000009                     ??_timePassed:
   847  000009                     ___lldiv@quotient:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x8
   851  000009                     	ds	4
   852  00000D                     ___lldiv@counter:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0xC
   856  00000D                     	ds	1
   857  00000E                     ?___llmod:
   858                           	opt stack 0
   859  00000E                     I2C_Master_Init@c:
   860                           	opt stack 0
   861  00000E                     ___llmod@dividend:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0xD
   865  00000E                     	ds	4
   866  000012                     ??_I2C_Master_Init:
   867  000012                     updateEEPROM@time:
   868                           	opt stack 0
   869  000012                     ___llmod@divisor:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x11
   873  000012                     	ds	2
   874  000014                     
   875                           ; 1 bytes @ 0x13
   876  000014                     	ds	2
   877  000016                     ___llmod@counter:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x15
   881  000016                     	ds	1
   882  000017                     ?_printf:
   883                           	opt stack 0
   884  000017                     printf@f:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x16
   888  000017                     	ds	8
   889  00001F                     ??_printf:
   890                           
   891                           ; 1 bytes @ 0x1E
   892  00001F                     	ds	4
   893  000023                     printf@idx:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x22
   897  000023                     	ds	1
   898  000024                     printf@prec:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x23
   902  000024                     	ds	2
   903  000026                     printf@ap:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x25
   907  000026                     	ds	2
   908  000028                     printf@val:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x27
   912  000028                     	ds	4
   913  00002C                     printf@width:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x2B
   917  00002C                     	ds	2
   918  00002E                     printf@flag:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x2D
   922  00002E                     	ds	1
   923  00002F                     printf@c:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x2E
   927  00002F                     	ds	1
   928  000030                     ??_displayLogs:
   929  000030                     updateS1@mode:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x2F
   933  000030                     	ds	2
   934  000032                     ??_main:
   935                           
   936                           ; 1 bytes @ 0x31
   937  000032                     	ds	7
   938  000039                     main@prevUnblock:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x38
   942  000039                     	ds	2
   943  00003B                     main@dc:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x3A
   947  00003B                     	ds	2
   948  00003D                     main@prevSoupLoad:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x3C
   952  00003D                     	ds	2
   953  00003F                     _main$1616:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x3E
   957  00003F                     	ds	2
   958  000041                     main@canCheck:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x40
   962  000041                     	ds	2
   963  000043                     main@sodaState:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x42
   967  000043                     	ds	2
   968  000045                     main@sodaLoad:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x44
   972  000045                     	ds	2
   973  000047                     main@tabState:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x46
   977  000047                     	ds	2
   978  000049                     main@soupSort:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x48
   982  000049                     	ds	2
   983  00004B                     main@soupLoad:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x4A
   987  00004B                     	ds	2
   988  00004D                     main@startTime:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x4C
   992  00004D                     	ds	2
   993  00004F                     main@labelState:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x4E
   997  00004F                     	ds	2
   998  000051                     main@s:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x50
  1002  000051                     	ds	2
  1003  000053                     main@prevSodaTime:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x52
  1007  000053                     	ds	2
  1008  000055                     main@standby:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x54
  1012  000055                     	ds	2
  1013  000057                     main@c:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x56
  1017  000057                     	ds	4
  1018  00005B                     main@prevSoupTime:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x5A
  1022  00005B                     	ds	2
  1023  00005D                     main@S1mode:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x5C
  1027  00005D                     	ds	2
  1028                           tblptru	equ	0xFF8
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           
  1032 ;;
  1033 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1034 ;;
  1035 ;; *************** function _main *****************
  1036 ;; Defined at:
  1037 ;;		line 60 in file "main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;  c               4   86[COMRAM] unsigned long 
  1042 ;;  S1mode          2   92[COMRAM] int 
  1043 ;;  prevSoupTime    2   90[COMRAM] int 
  1044 ;;  standby         2   84[COMRAM] int 
  1045 ;;  prevSodaTime    2   82[COMRAM] int 
  1046 ;;  s               2   80[COMRAM] int 
  1047 ;;  labelState      2   78[COMRAM] int 
  1048 ;;  startTime       2   76[COMRAM] int 
  1049 ;;  soupLoad        2   74[COMRAM] int 
  1050 ;;  soupSort        2   72[COMRAM] int 
  1051 ;;  tabState        2   70[COMRAM] int 
  1052 ;;  sodaLoad        2   68[COMRAM] int 
  1053 ;;  sodaState       2   66[COMRAM] int 
  1054 ;;  canCheck        2   64[COMRAM] int 
  1055 ;;  prevSoupLoad    2   60[COMRAM] int 
  1056 ;;  dc              2   58[COMRAM] int 
  1057 ;;  prevUnblock     2   56[COMRAM] int 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  2  123[None  ] int 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Locals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Totals:        45       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;Total ram usage:       45 bytes
  1072 ;; Hardware stack levels required when called:    4
  1073 ;; This function calls:
  1074 ;;		_PWM1
  1075 ;;		_PWM1off
  1076 ;;		_PWM2
  1077 ;;		_PWM2off
  1078 ;;		_S1backward
  1079 ;;		_S1forward
  1080 ;;		_S1off
  1081 ;;		_S2backward
  1082 ;;		_S2forward
  1083 ;;		_S2off
  1084 ;;		_S3backward
  1085 ;;		_S3forward
  1086 ;;		___llmod
  1087 ;;		___wmul
  1088 ;;		_displayLogs
  1089 ;;		_homescreen
  1090 ;;		_initialize
  1091 ;;		_keycheck
  1092 ;;		_keyinterrupt
  1093 ;;		_lcdInst
  1094 ;;		_printf
  1095 ;;		_readADC
  1096 ;;		_timePassed
  1097 ;;		_updateEEPROM
  1098 ;;		_updateS1
  1099 ;;		_updateTime
  1100 ;; This function is called by:
  1101 ;;		Startup code after reset
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text0
  1106  00EC3E                     __ptext0:
  1107                           	opt stack 0
  1108  00EC3E                     _main:
  1109                           	opt stack 27
  1110                           
  1111                           ;main.c: 61: initialize();
  1112                           
  1113                           ;incstack = 0
  1114  00EC3E  EC2B  F072         	call	_initialize	;wreg free
  1115                           
  1116                           ;main.c: 62: int standby = 1;
  1117  00EC42  0E00               	movlw	0
  1118  00EC44  6E56               	movwf	main@standby+1,c
  1119  00EC46  0E01               	movlw	1
  1120  00EC48  6E55               	movwf	main@standby,c
  1121                           
  1122                           ;main.c: 63: int s = 0;
  1123  00EC4A  0E00               	movlw	0
  1124  00EC4C  6E52               	movwf	main@s+1,c
  1125  00EC4E  0E00               	movlw	0
  1126  00EC50  6E51               	movwf	main@s,c
  1127                           
  1128                           ;main.c: 64: int dc = 0;
  1129  00EC52  0E00               	movlw	0
  1130  00EC54  6E3C               	movwf	main@dc+1,c
  1131  00EC56  0E00               	movlw	0
  1132  00EC58  6E3B               	movwf	main@dc,c
  1133                           
  1134                           ;main.c: 65: int startTime;
  1135                           ;main.c: 66: int prevUnblock = 0;
  1136  00EC5A  0E00               	movlw	0
  1137  00EC5C  6E3A               	movwf	main@prevUnblock+1,c
  1138  00EC5E  0E00               	movlw	0
  1139  00EC60  6E39               	movwf	main@prevUnblock,c
  1140                           
  1141                           ;main.c: 67: int soupLoad = 1;
  1142  00EC62  0E00               	movlw	0
  1143  00EC64  6E4C               	movwf	main@soupLoad+1,c
  1144  00EC66  0E01               	movlw	1
  1145  00EC68  6E4B               	movwf	main@soupLoad,c
  1146                           
  1147                           ;main.c: 68: int sodaLoad = 1;
  1148  00EC6A  0E00               	movlw	0
  1149  00EC6C  6E46               	movwf	main@sodaLoad+1,c
  1150  00EC6E  0E01               	movlw	1
  1151  00EC70  6E45               	movwf	main@sodaLoad,c
  1152                           
  1153                           ;main.c: 69: int canCheck;
  1154                           ;main.c: 70: int prevSodaTime = 0;
  1155  00EC72  0E00               	movlw	0
  1156  00EC74  6E54               	movwf	main@prevSodaTime+1,c
  1157  00EC76  0E00               	movlw	0
  1158  00EC78  6E53               	movwf	main@prevSodaTime,c
  1159                           
  1160                           ;main.c: 71: int prevSoupTime = 0;
  1161  00EC7A  0E00               	movlw	0
  1162  00EC7C  6E5C               	movwf	main@prevSoupTime+1,c
  1163  00EC7E  0E00               	movlw	0
  1164  00EC80  6E5B               	movwf	main@prevSoupTime,c
  1165                           
  1166                           ;main.c: 72: int sodaState = 0;
  1167  00EC82  0E00               	movlw	0
  1168  00EC84  6E44               	movwf	main@sodaState+1,c
  1169  00EC86  0E00               	movlw	0
  1170  00EC88  6E43               	movwf	main@sodaState,c
  1171                           
  1172                           ;main.c: 73: int tabState = 0;
  1173  00EC8A  0E00               	movlw	0
  1174  00EC8C  6E48               	movwf	main@tabState+1,c
  1175  00EC8E  0E00               	movlw	0
  1176  00EC90  6E47               	movwf	main@tabState,c
  1177                           
  1178                           ;main.c: 74: int labelState = 0;
  1179  00EC92  0E00               	movlw	0
  1180  00EC94  6E50               	movwf	main@labelState+1,c
  1181  00EC96  0E00               	movlw	0
  1182  00EC98  6E4F               	movwf	main@labelState,c
  1183                           
  1184                           ;main.c: 76: int s = 1;
  1185  00EC9A  0E00               	movlw	0
  1186  00EC9C  6E52               	movwf	main@s+1,c
  1187  00EC9E  0E01               	movlw	1
  1188  00ECA0  6E51               	movwf	main@s,c
  1189                           
  1190                           ;main.c: 77: int soupSort;
  1191                           ;main.c: 78: int prevSoupLoad;
  1192                           ;main.c: 79: int S1mode = 0;
  1193  00ECA2  0E00               	movlw	0
  1194  00ECA4  6E5E               	movwf	main@S1mode+1,c
  1195  00ECA6  0E00               	movlw	0
  1196  00ECA8  6E5D               	movwf	main@S1mode,c
  1197                           
  1198                           ;main.c: 81: unsigned long c = 0;
  1199  00ECAA  0E00               	movlw	0
  1200  00ECAC  6E57               	movwf	main@c,c
  1201  00ECAE  0E00               	movlw	0
  1202  00ECB0  6E58               	movwf	main@c+1,c
  1203  00ECB2  0E00               	movlw	0
  1204  00ECB4  6E59               	movwf	main@c+2,c
  1205  00ECB6  0E00               	movlw	0
  1206  00ECB8  6E5A               	movwf	main@c+3,c
  1207                           
  1208                           ;main.c: 83: _delay((unsigned long)((10)*(32000000/4000.0)));
  1209  00ECBA  0E68               	movlw	104
  1210  00ECBC  6E32               	movwf	??_main& (0+255),c
  1211  00ECBE  0EE4               	movlw	228
  1212  00ECC0                     u3377:
  1213  00ECC0  2EE8               	decfsz	wreg,f,c
  1214  00ECC2  D7FE               	bra	u3377
  1215  00ECC4  2E32               	decfsz	??_main& (0+255),f,c
  1216  00ECC6  D7FC               	bra	u3377
  1217  00ECC8  D000               	nop2	
  1218  00ECCA                     l3319:
  1219                           
  1220                           ;main.c: 87: updateTime();
  1221  00ECCA  ECF8  F071         	call	_updateTime	;wreg free
  1222                           
  1223                           ;main.c: 88: updateS1(S1mode);
  1224  00ECCE  C05D  F030         	movff	main@S1mode,updateS1@mode
  1225  00ECD2  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  1226  00ECD6  EC5E  F073         	call	_updateS1	;wreg free
  1227                           
  1228                           ;main.c: 89: readADC(2);
  1229  00ECDA  0E02               	movlw	2
  1230  00ECDC  EC4C  F06F         	call	_readADC
  1231                           
  1232                           ;main.c: 90: if (ADRES >= 0x3d0){soupLoad = 1;}
  1233  00ECE0  0ED0               	movlw	208
  1234  00ECE2  5CC3               	subwf	4035,w,c	;volatile
  1235  00ECE4  0E03               	movlw	3
  1236  00ECE6  58C4               	subwfb	4036,w,c	;volatile
  1237  00ECE8  A0D8               	btfss	status,0,c
  1238  00ECEA  D004               	goto	l3329
  1239  00ECEC  0E00               	movlw	0
  1240  00ECEE  6E4C               	movwf	main@soupLoad+1,c
  1241  00ECF0  0E01               	movlw	1
  1242  00ECF2  D003               	goto	L1
  1243  00ECF4                     l3329:
  1244                           
  1245                           ;main.c: 91: else {soupLoad = 0;}
  1246  00ECF4  0E00               	movlw	0
  1247  00ECF6  6E4C               	movwf	main@soupLoad+1,c
  1248  00ECF8  0E00               	movlw	0
  1249  00ECFA                     L1:
  1250  00ECFA  6E4B               	movwf	main@soupLoad,c
  1251                           
  1252                           ;main.c: 92: readADC(5);
  1253  00ECFC  0E05               	movlw	5
  1254  00ECFE  EC4C  F06F         	call	_readADC
  1255                           
  1256                           ;main.c: 93: sodaLoad = ADRESH;
  1257  00ED02  CFC4 F045          	movff	4036,main@sodaLoad	;volatile
  1258  00ED06  6A46               	clrf	main@sodaLoad+1,c
  1259                           
  1260                           ;main.c: 95: if (standby == 1){
  1261  00ED08  0455               	decf	main@standby,w,c
  1262  00ED0A  1056               	iorwf	main@standby+1,w,c
  1263  00ED0C  A4D8               	btfss	status,2,c
  1264  00ED0E  D103               	goto	l3395
  1265                           
  1266                           ;main.c: 97: keypress = (0);
  1267  00ED10  0E00               	movlw	0
  1268  00ED12  6E70               	movwf	_keypress,c	;volatile
  1269                           
  1270                           ;main.c: 98: homescreen();
  1271  00ED14  EC94  F071         	call	_homescreen	;wreg free
  1272                           
  1273                           ;main.c: 99: keyinterrupt();
  1274  00ED18  EC28  F06F         	call	_keyinterrupt	;wreg free
  1275                           
  1276                           ;main.c: 102: if(keypress == 2){
  1277  00ED1C  0E02               	movlw	2
  1278  00ED1E  1870               	xorwf	_keypress,w,c	;volatile
  1279  00ED20  A4D8               	btfss	status,2,c
  1280  00ED22  D075               	goto	l3365
  1281                           
  1282                           ;main.c: 103: standby = 0;
  1283  00ED24  0E00               	movlw	0
  1284  00ED26  6E56               	movwf	main@standby+1,c
  1285  00ED28  0E00               	movlw	0
  1286  00ED2A  6E55               	movwf	main@standby,c
  1287                           
  1288                           ;main.c: 104: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1289  00ED2C  0E01               	movlw	1
  1290  00ED2E  EC09  F06F         	call	_lcdInst
  1291  00ED32  0E68               	movlw	104
  1292  00ED34  6E32               	movwf	??_main& (0+255),c
  1293  00ED36  0EE4               	movlw	228
  1294  00ED38                     u3387:
  1295  00ED38  2EE8               	decfsz	wreg,f,c
  1296  00ED3A  D7FE               	bra	u3387
  1297  00ED3C  2E32               	decfsz	??_main& (0+255),f,c
  1298  00ED3E  D7FC               	bra	u3387
  1299  00ED40  D000               	nop2	
  1300                           
  1301                           ;main.c: 105: printf("Sorting cans...");
  1302  00ED42  0EA4               	movlw	low STR_1
  1303  00ED44  6E17               	movwf	printf@f,c
  1304  00ED46  0EFE               	movlw	high STR_1
  1305  00ED48  6E18               	movwf	printf@f+1,c
  1306  00ED4A  EC16  F074         	call	_printf	;wreg free
  1307                           
  1308                           ;main.c: 106: lcdInst(0b11000000);;
  1309  00ED4E  0EC0               	movlw	192
  1310  00ED50  EC09  F06F         	call	_lcdInst
  1311                           
  1312                           ;main.c: 107: printf("Any key to stop");
  1313  00ED54  0EC4               	movlw	low STR_2
  1314  00ED56  6E17               	movwf	printf@f,c
  1315  00ED58  0EFE               	movlw	high STR_2
  1316  00ED5A  6E18               	movwf	printf@f+1,c
  1317  00ED5C  EC16  F074         	call	_printf	;wreg free
  1318                           
  1319                           ;main.c: 108: PWM1(100);
  1320  00ED60  0E00               	movlw	0
  1321  00ED62  6E02               	movwf	PWM1@duty+1,c
  1322  00ED64  0E64               	movlw	100
  1323  00ED66  6E01               	movwf	PWM1@duty,c
  1324  00ED68  ECF2  F070         	call	_PWM1	;wreg free
  1325                           
  1326                           ;main.c: 109: dc = 1;
  1327  00ED6C  0E00               	movlw	0
  1328  00ED6E  6E3C               	movwf	main@dc+1,c
  1329  00ED70  0E01               	movlw	1
  1330  00ED72  6E3B               	movwf	main@dc,c
  1331                           
  1332                           ;main.c: 110: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1333  00ED74  C061  F032         	movff	_time+2,??_main
  1334  00ED78  0E0F               	movlw	15
  1335  00ED7A  1632               	andwf	??_main,f,c
  1336  00ED7C  5032               	movf	??_main,w,c
  1337  00ED7E  6E01               	movwf	___wmul@multiplier,c
  1338  00ED80  6A02               	clrf	___wmul@multiplier+1,c
  1339  00ED82  0E0E               	movlw	14
  1340  00ED84  6E04               	movwf	___wmul@multiplicand+1,c
  1341  00ED86  0E10               	movlw	16
  1342  00ED88  6E03               	movwf	___wmul@multiplicand,c
  1343  00ED8A  EC5E  F06F         	call	___wmul	;wreg free
  1344  00ED8E  C05F  F033         	movff	_time,??_main+1
  1345  00ED92  3A33               	swapf	??_main+1,f,c
  1346  00ED94  0E0F               	movlw	15
  1347  00ED96  1633               	andwf	??_main+1,f,c
  1348  00ED98  0E0F               	movlw	15
  1349  00ED9A  1633               	andwf	??_main+1,f,c
  1350  00ED9C  5033               	movf	??_main+1,w,c
  1351  00ED9E  0D0A               	mullw	10
  1352  00EDA0  505F               	movf	_time,w,c
  1353  00EDA2  0B0F               	andlw	15
  1354  00EDA4  6E34               	movwf	(??_main+2)& (0+255),c
  1355  00EDA6  6A35               	clrf	(??_main+3)& (0+255),c
  1356  00EDA8  50F3               	movf	prodl,w,c
  1357  00EDAA  2634               	addwf	??_main+2,f,c
  1358  00EDAC  50F4               	movf	prodh,w,c
  1359  00EDAE  2235               	addwfc	??_main+3,f,c
  1360  00EDB0  C060  F036         	movff	_time+1,??_main+4
  1361  00EDB4  0E0F               	movlw	15
  1362  00EDB6  1636               	andwf	??_main+4,f,c
  1363  00EDB8  5036               	movf	??_main+4,w,c
  1364  00EDBA  0D3C               	mullw	60
  1365  00EDBC  50F3               	movf	prodl,w,c
  1366  00EDBE  2634               	addwf	??_main+2,f,c
  1367  00EDC0  50F4               	movf	prodh,w,c
  1368  00EDC2  2235               	addwfc	??_main+3,f,c
  1369  00EDC4  C060  F037         	movff	_time+1,??_main+5
  1370  00EDC8  3A37               	swapf	??_main+5,f,c
  1371  00EDCA  0E0F               	movlw	15
  1372  00EDCC  1637               	andwf	??_main+5,f,c
  1373  00EDCE  0E0F               	movlw	15
  1374  00EDD0  1637               	andwf	??_main+5,f,c
  1375  00EDD2  5037               	movf	??_main+5,w,c
  1376  00EDD4  0D0A               	mullw	10
  1377  00EDD6  50F3               	movf	prodl,w,c
  1378  00EDD8  2634               	addwf	??_main+2,f,c
  1379  00EDDA  50F4               	movf	prodh,w,c
  1380  00EDDC  2235               	addwfc	??_main+3,f,c
  1381  00EDDE  5001               	movf	?___wmul,w,c
  1382  00EDE0  2634               	addwf	??_main+2,f,c
  1383  00EDE2  5002               	movf	?___wmul+1,w,c
  1384  00EDE4  2235               	addwfc	??_main+3,f,c
  1385  00EDE6  C061  F038         	movff	_time+2,??_main+6
  1386  00EDEA  3A38               	swapf	??_main+6,f,c
  1387  00EDEC  0E0F               	movlw	15
  1388  00EDEE  1638               	andwf	??_main+6,f,c
  1389  00EDF0  0E0F               	movlw	15
  1390  00EDF2  1638               	andwf	??_main+6,f,c
  1391  00EDF4  5038               	movf	??_main+6,w,c
  1392  00EDF6  0D0A               	mullw	10
  1393  00EDF8  50F3               	movf	prodl,w,c
  1394  00EDFA  2434               	addwf	??_main+2,w,c
  1395  00EDFC  6E4D               	movwf	main@startTime,c
  1396  00EDFE  50F4               	movf	prodh,w,c
  1397  00EE00  2035               	addwfc	??_main+3,w,c
  1398  00EE02  6E4E               	movwf	main@startTime+1,c
  1399                           
  1400                           ;main.c: 111: canCheck = startTime;
  1401  00EE04  C04D  F041         	movff	main@startTime,main@canCheck
  1402  00EE08  C04E  F042         	movff	main@startTime+1,main@canCheck+1
  1403                           
  1404                           ;main.c: 113: }
  1405  00EE0C  D75E               	goto	l3319
  1406  00EE0E                     l3365:
  1407                           
  1408                           ;main.c: 114: else if(keypress == 1){
  1409  00EE0E  0470               	decf	_keypress,w,c	;volatile
  1410  00EE10  A4D8               	btfss	status,2,c
  1411  00EE12  D003               	goto	l3369
  1412                           
  1413                           ;main.c: 116: displayLogs();
  1414  00EE14  ECFB  F072         	call	_displayLogs	;wreg free
  1415                           
  1416                           ;main.c: 117: }
  1417  00EE18  D758               	goto	l3319
  1418  00EE1A                     l3369:
  1419                           
  1420                           ;main.c: 118: else if(keypress == 15 ) {
  1421  00EE1A  0E0F               	movlw	15
  1422  00EE1C  1870               	xorwf	_keypress,w,c	;volatile
  1423  00EE1E  A4D8               	btfss	status,2,c
  1424  00EE20  D005               	goto	l3373
  1425                           
  1426                           ;main.c: 119: standby = 2;
  1427  00EE22  0E00               	movlw	0
  1428  00EE24  6E56               	movwf	main@standby+1,c
  1429  00EE26  0E02               	movlw	2
  1430  00EE28  6E55               	movwf	main@standby,c
  1431  00EE2A  D070               	goto	l3393
  1432  00EE2C                     l3373:
  1433                           
  1434                           ;main.c: 122: else if(keypress == 14 ) {
  1435  00EE2C  0E0E               	movlw	14
  1436  00EE2E  1870               	xorwf	_keypress,w,c	;volatile
  1437  00EE30  A4D8               	btfss	status,2,c
  1438  00EE32  D014               	goto	l3385
  1439                           
  1440                           ;main.c: 123: standby = 3;
  1441  00EE34  0E00               	movlw	0
  1442  00EE36  6E56               	movwf	main@standby+1,c
  1443  00EE38  0E03               	movlw	3
  1444  00EE3A  6E55               	movwf	main@standby,c
  1445                           
  1446                           ;main.c: 124: PWM2(500);
  1447  00EE3C  0E01               	movlw	1
  1448  00EE3E  6E02               	movwf	PWM2@duty+1,c
  1449  00EE40  0EF4               	movlw	244
  1450  00EE42  6E01               	movwf	PWM2@duty,c
  1451  00EE44  EC17  F071         	call	_PWM2	;wreg free
  1452                           
  1453                           ;main.c: 125: labelState = 0;
  1454  00EE48  0E00               	movlw	0
  1455  00EE4A  6E50               	movwf	main@labelState+1,c
  1456  00EE4C  0E00               	movlw	0
  1457  00EE4E  6E4F               	movwf	main@labelState,c
  1458                           
  1459                           ;main.c: 126: s = 1;
  1460  00EE50  0E00               	movlw	0
  1461  00EE52  6E52               	movwf	main@s+1,c
  1462  00EE54  0E01               	movlw	1
  1463  00EE56  6E51               	movwf	main@s,c
  1464  00EE58  EFF1  F07C         	goto	l3747
  1465  00EE5C                     l3385:
  1466                           
  1467                           ;main.c: 129: else if(keypress == 13) {
  1468  00EE5C  0E0D               	movlw	13
  1469  00EE5E  1870               	xorwf	_keypress,w,c	;volatile
  1470  00EE60  A4D8               	btfss	status,2,c
  1471  00EE62  D733               	goto	l3319
  1472                           
  1473                           ;main.c: 130: standby = 4;
  1474  00EE64  0E00               	movlw	0
  1475  00EE66  6E56               	movwf	main@standby+1,c
  1476  00EE68  0E04               	movlw	4
  1477  00EE6A  6E55               	movwf	main@standby,c
  1478                           
  1479                           ;main.c: 131: sodaState= 0;
  1480  00EE6C  0E00               	movlw	0
  1481  00EE6E  6E44               	movwf	main@sodaState+1,c
  1482  00EE70  0E00               	movlw	0
  1483  00EE72  6E43               	movwf	main@sodaState,c
  1484                           
  1485                           ;main.c: 132: prevSodaTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1486  00EE74  C061  F032         	movff	_time+2,??_main
  1487  00EE78  0E0F               	movlw	15
  1488  00EE7A  1632               	andwf	??_main,f,c
  1489  00EE7C  5032               	movf	??_main,w,c
  1490  00EE7E  6E01               	movwf	___wmul@multiplier,c
  1491  00EE80  6A02               	clrf	___wmul@multiplier+1,c
  1492  00EE82  0E0E               	movlw	14
  1493  00EE84  6E04               	movwf	___wmul@multiplicand+1,c
  1494  00EE86  0E10               	movlw	16
  1495  00EE88  6E03               	movwf	___wmul@multiplicand,c
  1496  00EE8A  EC5E  F06F         	call	___wmul	;wreg free
  1497  00EE8E  C05F  F033         	movff	_time,??_main+1
  1498  00EE92  3A33               	swapf	??_main+1,f,c
  1499  00EE94  0E0F               	movlw	15
  1500  00EE96  1633               	andwf	??_main+1,f,c
  1501  00EE98  0E0F               	movlw	15
  1502  00EE9A  1633               	andwf	??_main+1,f,c
  1503  00EE9C  5033               	movf	??_main+1,w,c
  1504  00EE9E  0D0A               	mullw	10
  1505  00EEA0  505F               	movf	_time,w,c
  1506  00EEA2  0B0F               	andlw	15
  1507  00EEA4  6E34               	movwf	(??_main+2)& (0+255),c
  1508  00EEA6  6A35               	clrf	(??_main+3)& (0+255),c
  1509  00EEA8  50F3               	movf	prodl,w,c
  1510  00EEAA  2634               	addwf	??_main+2,f,c
  1511  00EEAC  50F4               	movf	prodh,w,c
  1512  00EEAE  2235               	addwfc	??_main+3,f,c
  1513  00EEB0  C060  F036         	movff	_time+1,??_main+4
  1514  00EEB4  0E0F               	movlw	15
  1515  00EEB6  1636               	andwf	??_main+4,f,c
  1516  00EEB8  5036               	movf	??_main+4,w,c
  1517  00EEBA  0D3C               	mullw	60
  1518  00EEBC  50F3               	movf	prodl,w,c
  1519  00EEBE  2634               	addwf	??_main+2,f,c
  1520  00EEC0  50F4               	movf	prodh,w,c
  1521  00EEC2  2235               	addwfc	??_main+3,f,c
  1522  00EEC4  C060  F037         	movff	_time+1,??_main+5
  1523  00EEC8  3A37               	swapf	??_main+5,f,c
  1524  00EECA  0E0F               	movlw	15
  1525  00EECC  1637               	andwf	??_main+5,f,c
  1526  00EECE  0E0F               	movlw	15
  1527  00EED0  1637               	andwf	??_main+5,f,c
  1528  00EED2  5037               	movf	??_main+5,w,c
  1529  00EED4  0D0A               	mullw	10
  1530  00EED6  50F3               	movf	prodl,w,c
  1531  00EED8  2634               	addwf	??_main+2,f,c
  1532  00EEDA  50F4               	movf	prodh,w,c
  1533  00EEDC  2235               	addwfc	??_main+3,f,c
  1534  00EEDE  5001               	movf	?___wmul,w,c
  1535  00EEE0  2634               	addwf	??_main+2,f,c
  1536  00EEE2  5002               	movf	?___wmul+1,w,c
  1537  00EEE4  2235               	addwfc	??_main+3,f,c
  1538  00EEE6  C061  F038         	movff	_time+2,??_main+6
  1539  00EEEA  3A38               	swapf	??_main+6,f,c
  1540  00EEEC  0E0F               	movlw	15
  1541  00EEEE  1638               	andwf	??_main+6,f,c
  1542  00EEF0  0E0F               	movlw	15
  1543  00EEF2  1638               	andwf	??_main+6,f,c
  1544  00EEF4  5038               	movf	??_main+6,w,c
  1545  00EEF6  0D0A               	mullw	10
  1546  00EEF8  50F3               	movf	prodl,w,c
  1547  00EEFA  2434               	addwf	??_main+2,w,c
  1548  00EEFC  6E53               	movwf	main@prevSodaTime,c
  1549  00EEFE  50F4               	movf	prodh,w,c
  1550  00EF00  2035               	addwfc	??_main+3,w,c
  1551  00EF02  6E54               	movwf	main@prevSodaTime+1,c
  1552                           
  1553                           ;main.c: 133: tabState = 0;
  1554  00EF04  0E00               	movlw	0
  1555  00EF06  6E48               	movwf	main@tabState+1,c
  1556  00EF08  0E00               	movlw	0
  1557  00EF0A  6E47               	movwf	main@tabState,c
  1558  00EF0C                     l3393:
  1559                           
  1560                           ;main.c: 134: s = 1;
  1561  00EF0C  0E00               	movlw	0
  1562  00EF0E  6E52               	movwf	main@s+1,c
  1563  00EF10  0E01               	movlw	1
  1564  00EF12  6E51               	movwf	main@s,c
  1565                           
  1566                           ;main.c: 135: }
  1567                           ;main.c: 137: }
  1568  00EF14  D6DA               	goto	l3319
  1569  00EF16                     l3395:
  1570                           
  1571                           ;main.c: 138: else if(standby == 2){
  1572  00EF16  0E02               	movlw	2
  1573  00EF18  1855               	xorwf	main@standby,w,c
  1574  00EF1A  1056               	iorwf	main@standby+1,w,c
  1575  00EF1C  A4D8               	btfss	status,2,c
  1576  00EF1E  D2F4               	goto	l3627
  1577                           
  1578                           ;main.c: 140: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1579  00EF20  0E01               	movlw	1
  1580  00EF22  EC09  F06F         	call	_lcdInst
  1581  00EF26  0E68               	movlw	104
  1582  00EF28  6E32               	movwf	??_main& (0+255),c
  1583  00EF2A  0EE4               	movlw	228
  1584  00EF2C                     u3397:
  1585  00EF2C  2EE8               	decfsz	wreg,f,c
  1586  00EF2E  D7FE               	bra	u3397
  1587  00EF30  2E32               	decfsz	??_main& (0+255),f,c
  1588  00EF32  D7FC               	bra	u3397
  1589  00EF34  D000               	nop2	
  1590                           
  1591                           ;main.c: 141: keypress = (0);
  1592  00EF36  0E00               	movlw	0
  1593  00EF38  6E70               	movwf	_keypress,c	;volatile
  1594                           
  1595                           ;main.c: 143: if (s==1){
  1596  00EF3A  0451               	decf	main@s,w,c
  1597  00EF3C  1052               	iorwf	main@s+1,w,c
  1598  00EF3E  A4D8               	btfss	status,2,c
  1599  00EF40  D017               	goto	l3417
  1600                           
  1601                           ;main.c: 144: printf("testing S f");
  1602  00EF42  0E8D               	movlw	low STR_3
  1603  00EF44  6E17               	movwf	printf@f,c
  1604  00EF46  0EFF               	movlw	high STR_3
  1605  00EF48  6E18               	movwf	printf@f+1,c
  1606  00EF4A  EC16  F074         	call	_printf	;wreg free
  1607                           
  1608                           ;main.c: 145: S1mode = 1;
  1609  00EF4E  0E00               	movlw	0
  1610  00EF50  6E5E               	movwf	main@S1mode+1,c
  1611  00EF52  0E01               	movlw	1
  1612  00EF54  6E5D               	movwf	main@S1mode,c
  1613                           
  1614                           ;main.c: 146: updateS1(S1mode);
  1615  00EF56  C05D  F030         	movff	main@S1mode,updateS1@mode
  1616  00EF5A  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  1617  00EF5E  EC5E  F073         	call	_updateS1	;wreg free
  1618                           
  1619                           ;main.c: 147: S2forward();
  1620  00EF62  EC4F  F070         	call	_S2forward	;wreg free
  1621                           
  1622                           ;main.c: 149: S3forward();
  1623  00EF66  ECAF  F070         	call	_S3forward	;wreg free
  1624                           
  1625                           ;main.c: 150: keyinterrupt();
  1626  00EF6A  EC28  F06F         	call	_keyinterrupt	;wreg free
  1627                           
  1628                           ;main.c: 151: }
  1629  00EF6E  D2C4               	goto	l140
  1630  00EF70                     l3417:
  1631                           
  1632                           ;main.c: 152: else if(s==2){
  1633  00EF70  0E02               	movlw	2
  1634  00EF72  1851               	xorwf	main@s,w,c
  1635  00EF74  1052               	iorwf	main@s+1,w,c
  1636  00EF76  A4D8               	btfss	status,2,c
  1637  00EF78  D017               	goto	l3431
  1638                           
  1639                           ;main.c: 153: printf("testing S b");
  1640  00EF7A  0E75               	movlw	low STR_4
  1641  00EF7C  6E17               	movwf	printf@f,c
  1642  00EF7E  0EFF               	movlw	high STR_4
  1643  00EF80  6E18               	movwf	printf@f+1,c
  1644  00EF82  EC16  F074         	call	_printf	;wreg free
  1645                           
  1646                           ;main.c: 154: S1mode = 2;
  1647  00EF86  0E00               	movlw	0
  1648  00EF88  6E5E               	movwf	main@S1mode+1,c
  1649  00EF8A  0E02               	movlw	2
  1650  00EF8C  6E5D               	movwf	main@S1mode,c
  1651                           
  1652                           ;main.c: 155: updateS1(S1mode);
  1653  00EF8E  C05D  F030         	movff	main@S1mode,updateS1@mode
  1654  00EF92  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  1655  00EF96  EC5E  F073         	call	_updateS1	;wreg free
  1656                           
  1657                           ;main.c: 157: S2backward();
  1658  00EF9A  EC2F  F070         	call	_S2backward	;wreg free
  1659                           
  1660                           ;main.c: 158: S3backward();
  1661  00EF9E  EC8F  F070         	call	_S3backward	;wreg free
  1662                           
  1663                           ;main.c: 159: keyinterrupt();
  1664  00EFA2  EC28  F06F         	call	_keyinterrupt	;wreg free
  1665                           
  1666                           ;main.c: 160: }
  1667  00EFA6  D2A8               	goto	l140
  1668  00EFA8                     l3431:
  1669                           
  1670                           ;main.c: 162: else if(s==3){
  1671  00EFA8  0E03               	movlw	3
  1672  00EFAA  1851               	xorwf	main@s,w,c
  1673  00EFAC  1052               	iorwf	main@s+1,w,c
  1674  00EFAE  A4D8               	btfss	status,2,c
  1675  00EFB0  D013               	goto	l3441
  1676                           
  1677                           ;main.c: 163: printf("testing S1shake");
  1678  00EFB2  0EB4               	movlw	low STR_5
  1679  00EFB4  6E17               	movwf	printf@f,c
  1680  00EFB6  0EFE               	movlw	high STR_5
  1681  00EFB8  6E18               	movwf	printf@f+1,c
  1682  00EFBA  EC16  F074         	call	_printf	;wreg free
  1683                           
  1684                           ;main.c: 165: S1mode = 3;
  1685  00EFBE  0E00               	movlw	0
  1686  00EFC0  6E5E               	movwf	main@S1mode+1,c
  1687  00EFC2  0E03               	movlw	3
  1688  00EFC4  6E5D               	movwf	main@S1mode,c
  1689                           
  1690                           ;main.c: 166: updateS1(S1mode);
  1691  00EFC6  C05D  F030         	movff	main@S1mode,updateS1@mode
  1692  00EFCA  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  1693  00EFCE  EC5E  F073         	call	_updateS1	;wreg free
  1694                           
  1695                           ;main.c: 167: keyinterrupt();
  1696  00EFD2  EC28  F06F         	call	_keyinterrupt	;wreg free
  1697                           
  1698                           ;main.c: 168: }
  1699  00EFD6  D290               	goto	l140
  1700  00EFD8                     l3441:
  1701                           
  1702                           ;main.c: 170: else{
  1703                           ;main.c: 172: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1704  00EFD8  0E01               	movlw	1
  1705  00EFDA  EC09  F06F         	call	_lcdInst
  1706  00EFDE  0E68               	movlw	104
  1707  00EFE0  6E32               	movwf	??_main& (0+255),c
  1708  00EFE2  0EE4               	movlw	228
  1709  00EFE4                     u3407:
  1710  00EFE4  2EE8               	decfsz	wreg,f,c
  1711  00EFE6  D7FE               	bra	u3407
  1712  00EFE8  2E32               	decfsz	??_main& (0+255),f,c
  1713  00EFEA  D7FC               	bra	u3407
  1714  00EFEC  D000               	nop2	
  1715                           
  1716                           ;main.c: 173: printf("testing PWM2");
  1717  00EFEE  0E37               	movlw	low STR_6
  1718  00EFF0  6E17               	movwf	printf@f,c
  1719  00EFF2  0EFF               	movlw	high STR_6
  1720  00EFF4  6E18               	movwf	printf@f+1,c
  1721  00EFF6  EC16  F074         	call	_printf	;wreg free
  1722                           
  1723                           ;main.c: 174: PWM2(500);
  1724  00EFFA  0E01               	movlw	1
  1725  00EFFC  6E02               	movwf	PWM2@duty+1,c
  1726  00EFFE  0EF4               	movlw	244
  1727  00F000  6E01               	movwf	PWM2@duty,c
  1728  00F002  EC17  F071         	call	_PWM2	;wreg free
  1729                           
  1730                           ;main.c: 175: keycheck();
  1731  00F006  EC1E  F06F         	call	_keycheck	;wreg free
  1732                           
  1733                           ;main.c: 176: PWM2off();
  1734  00F00A  ECFF  F06E         	call	_PWM2off	;wreg free
  1735                           
  1736                           ;main.c: 178: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1737  00F00E  0E01               	movlw	1
  1738  00F010  EC09  F06F         	call	_lcdInst
  1739  00F014  0E68               	movlw	104
  1740  00F016  6E32               	movwf	??_main& (0+255),c
  1741  00F018  0EE4               	movlw	228
  1742  00F01A                     u3417:
  1743  00F01A  2EE8               	decfsz	wreg,f,c
  1744  00F01C  D7FE               	bra	u3417
  1745  00F01E  2E32               	decfsz	??_main& (0+255),f,c
  1746  00F020  D7FC               	bra	u3417
  1747  00F022  D000               	nop2	
  1748                           
  1749                           ;main.c: 179: printf("testing PWM1");
  1750  00F024  0E2A               	movlw	low STR_7
  1751  00F026  6E17               	movwf	printf@f,c
  1752  00F028  0EFF               	movlw	high STR_7
  1753  00F02A  6E18               	movwf	printf@f+1,c
  1754  00F02C  EC16  F074         	call	_printf	;wreg free
  1755                           
  1756                           ;main.c: 180: PWM1(500);
  1757  00F030  0E01               	movlw	1
  1758  00F032  6E02               	movwf	PWM1@duty+1,c
  1759  00F034  0EF4               	movlw	244
  1760  00F036  6E01               	movwf	PWM1@duty,c
  1761  00F038  ECF2  F070         	call	_PWM1	;wreg free
  1762                           
  1763                           ;main.c: 181: keycheck();
  1764  00F03C  EC1E  F06F         	call	_keycheck	;wreg free
  1765                           
  1766                           ;main.c: 182: PWM1off();
  1767  00F040  ECFA  F06E         	call	_PWM1off	;wreg free
  1768                           
  1769                           ;main.c: 184: keypress = (0);
  1770  00F044  0E00               	movlw	0
  1771  00F046  6E70               	movwf	_keypress,c	;volatile
  1772                           
  1773                           ;main.c: 185: startTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  1774  00F048  C061  F032         	movff	_time+2,??_main
  1775  00F04C  0E0F               	movlw	15
  1776  00F04E  1632               	andwf	??_main,f,c
  1777  00F050  5032               	movf	??_main,w,c
  1778  00F052  6E01               	movwf	___wmul@multiplier,c
  1779  00F054  6A02               	clrf	___wmul@multiplier+1,c
  1780  00F056  0E0E               	movlw	14
  1781  00F058  6E04               	movwf	___wmul@multiplicand+1,c
  1782  00F05A  0E10               	movlw	16
  1783  00F05C  6E03               	movwf	___wmul@multiplicand,c
  1784  00F05E  EC5E  F06F         	call	___wmul	;wreg free
  1785  00F062  C05F  F033         	movff	_time,??_main+1
  1786  00F066  3A33               	swapf	??_main+1,f,c
  1787  00F068  0E0F               	movlw	15
  1788  00F06A  1633               	andwf	??_main+1,f,c
  1789  00F06C  0E0F               	movlw	15
  1790  00F06E  1633               	andwf	??_main+1,f,c
  1791  00F070  5033               	movf	??_main+1,w,c
  1792  00F072  0D0A               	mullw	10
  1793  00F074  505F               	movf	_time,w,c
  1794  00F076  0B0F               	andlw	15
  1795  00F078  6E34               	movwf	(??_main+2)& (0+255),c
  1796  00F07A  6A35               	clrf	(??_main+3)& (0+255),c
  1797  00F07C  50F3               	movf	prodl,w,c
  1798  00F07E  2634               	addwf	??_main+2,f,c
  1799  00F080  50F4               	movf	prodh,w,c
  1800  00F082  2235               	addwfc	??_main+3,f,c
  1801  00F084  C060  F036         	movff	_time+1,??_main+4
  1802  00F088  0E0F               	movlw	15
  1803  00F08A  1636               	andwf	??_main+4,f,c
  1804  00F08C  5036               	movf	??_main+4,w,c
  1805  00F08E  0D3C               	mullw	60
  1806  00F090  50F3               	movf	prodl,w,c
  1807  00F092  2634               	addwf	??_main+2,f,c
  1808  00F094  50F4               	movf	prodh,w,c
  1809  00F096  2235               	addwfc	??_main+3,f,c
  1810  00F098  C060  F037         	movff	_time+1,??_main+5
  1811  00F09C  3A37               	swapf	??_main+5,f,c
  1812  00F09E  0E0F               	movlw	15
  1813  00F0A0  1637               	andwf	??_main+5,f,c
  1814  00F0A2  0E0F               	movlw	15
  1815  00F0A4  1637               	andwf	??_main+5,f,c
  1816  00F0A6  5037               	movf	??_main+5,w,c
  1817  00F0A8  0D0A               	mullw	10
  1818  00F0AA  50F3               	movf	prodl,w,c
  1819  00F0AC  2634               	addwf	??_main+2,f,c
  1820  00F0AE  50F4               	movf	prodh,w,c
  1821  00F0B0  2235               	addwfc	??_main+3,f,c
  1822  00F0B2  5001               	movf	?___wmul,w,c
  1823  00F0B4  2634               	addwf	??_main+2,f,c
  1824  00F0B6  5002               	movf	?___wmul+1,w,c
  1825  00F0B8  2235               	addwfc	??_main+3,f,c
  1826  00F0BA  C061  F038         	movff	_time+2,??_main+6
  1827  00F0BE  3A38               	swapf	??_main+6,f,c
  1828  00F0C0  0E0F               	movlw	15
  1829  00F0C2  1638               	andwf	??_main+6,f,c
  1830  00F0C4  0E0F               	movlw	15
  1831  00F0C6  1638               	andwf	??_main+6,f,c
  1832  00F0C8  5038               	movf	??_main+6,w,c
  1833  00F0CA  0D0A               	mullw	10
  1834  00F0CC  50F3               	movf	prodl,w,c
  1835  00F0CE  2434               	addwf	??_main+2,w,c
  1836  00F0D0  6E4D               	movwf	main@startTime,c
  1837  00F0D2  50F4               	movf	prodh,w,c
  1838  00F0D4  2035               	addwfc	??_main+3,w,c
  1839  00F0D6  6E4E               	movwf	main@startTime+1,c
  1840                           
  1841                           ;main.c: 186: while(keypress==(0)){
  1842  00F0D8  D079               	goto	l3483
  1843  00F0DA                     l3467:
  1844                           
  1845                           ;main.c: 187: updateTime();
  1846  00F0DA  ECF8  F071         	call	_updateTime	;wreg free
  1847                           
  1848                           ;main.c: 188: keypress = (0);
  1849  00F0DE  0E00               	movlw	0
  1850  00F0E0  6E70               	movwf	_keypress,c	;volatile
  1851                           
  1852                           ;main.c: 189: _delay((unsigned long)((50)*(32000000/4000.0)));
  1853  00F0E2  0E03               	movlw	3
  1854  00F0E4  6E33               	movwf	(??_main+1)& (0+255),c
  1855  00F0E6  0E08               	movlw	8
  1856  00F0E8  6E32               	movwf	??_main& (0+255),c
  1857  00F0EA  0E77               	movlw	119
  1858  00F0EC                     u3427:
  1859  00F0EC  2EE8               	decfsz	wreg,f,c
  1860  00F0EE  D7FE               	bra	u3427
  1861  00F0F0  2E32               	decfsz	??_main& (0+255),f,c
  1862  00F0F2  D7FC               	bra	u3427
  1863  00F0F4  2E33               	decfsz	(??_main+1)& (0+255),f,c
  1864  00F0F6  D7FA               	bra	u3427
  1865  00F0F8  F000               	nop	
  1866                           
  1867                           ;main.c: 190: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1868  00F0FA  0E01               	movlw	1
  1869  00F0FC  EC09  F06F         	call	_lcdInst
  1870  00F100  0E68               	movlw	104
  1871  00F102  6E32               	movwf	??_main& (0+255),c
  1872  00F104  0EE4               	movlw	228
  1873  00F106                     u3437:
  1874  00F106  2EE8               	decfsz	wreg,f,c
  1875  00F108  D7FE               	bra	u3437
  1876  00F10A  2E32               	decfsz	??_main& (0+255),f,c
  1877  00F10C  D7FC               	bra	u3437
  1878  00F10E  D000               	nop2	
  1879                           
  1880                           ;main.c: 191: printf("time %x %x", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(ti
      +                          me[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)
      +                          *10), timePassed(startTime));
  1881  00F110  C061  F032         	movff	_time+2,??_main
  1882  00F114  0E0F               	movlw	15
  1883  00F116  1632               	andwf	??_main,f,c
  1884  00F118  5032               	movf	??_main,w,c
  1885  00F11A  6E01               	movwf	___wmul@multiplier,c
  1886  00F11C  6A02               	clrf	___wmul@multiplier+1,c
  1887  00F11E  0E0E               	movlw	14
  1888  00F120  6E04               	movwf	___wmul@multiplicand+1,c
  1889  00F122  0E10               	movlw	16
  1890  00F124  6E03               	movwf	___wmul@multiplicand,c
  1891  00F126  EC5E  F06F         	call	___wmul	;wreg free
  1892  00F12A  C05F  F033         	movff	_time,??_main+1
  1893  00F12E  3A33               	swapf	??_main+1,f,c
  1894  00F130  0E0F               	movlw	15
  1895  00F132  1633               	andwf	??_main+1,f,c
  1896  00F134  0E0F               	movlw	15
  1897  00F136  1633               	andwf	??_main+1,f,c
  1898  00F138  5033               	movf	??_main+1,w,c
  1899  00F13A  0D0A               	mullw	10
  1900  00F13C  505F               	movf	_time,w,c
  1901  00F13E  0B0F               	andlw	15
  1902  00F140  6E34               	movwf	(??_main+2)& (0+255),c
  1903  00F142  6A35               	clrf	(??_main+3)& (0+255),c
  1904  00F144  50F3               	movf	prodl,w,c
  1905  00F146  2634               	addwf	??_main+2,f,c
  1906  00F148  50F4               	movf	prodh,w,c
  1907  00F14A  2235               	addwfc	??_main+3,f,c
  1908  00F14C  C060  F036         	movff	_time+1,??_main+4
  1909  00F150  0E0F               	movlw	15
  1910  00F152  1636               	andwf	??_main+4,f,c
  1911  00F154  5036               	movf	??_main+4,w,c
  1912  00F156  0D3C               	mullw	60
  1913  00F158  50F3               	movf	prodl,w,c
  1914  00F15A  2634               	addwf	??_main+2,f,c
  1915  00F15C  50F4               	movf	prodh,w,c
  1916  00F15E  2235               	addwfc	??_main+3,f,c
  1917  00F160  C060  F037         	movff	_time+1,??_main+5
  1918  00F164  3A37               	swapf	??_main+5,f,c
  1919  00F166  0E0F               	movlw	15
  1920  00F168  1637               	andwf	??_main+5,f,c
  1921  00F16A  0E0F               	movlw	15
  1922  00F16C  1637               	andwf	??_main+5,f,c
  1923  00F16E  5037               	movf	??_main+5,w,c
  1924  00F170  0D0A               	mullw	10
  1925  00F172  50F3               	movf	prodl,w,c
  1926  00F174  2634               	addwf	??_main+2,f,c
  1927  00F176  50F4               	movf	prodh,w,c
  1928  00F178  2235               	addwfc	??_main+3,f,c
  1929  00F17A  5001               	movf	?___wmul,w,c
  1930  00F17C  2634               	addwf	??_main+2,f,c
  1931  00F17E  5002               	movf	?___wmul+1,w,c
  1932  00F180  2235               	addwfc	??_main+3,f,c
  1933  00F182  C061  F038         	movff	_time+2,??_main+6
  1934  00F186  3A38               	swapf	??_main+6,f,c
  1935  00F188  0E0F               	movlw	15
  1936  00F18A  1638               	andwf	??_main+6,f,c
  1937  00F18C  0E0F               	movlw	15
  1938  00F18E  1638               	andwf	??_main+6,f,c
  1939  00F190  5038               	movf	??_main+6,w,c
  1940  00F192  0D0A               	mullw	10
  1941  00F194  50F3               	movf	prodl,w,c
  1942  00F196  2434               	addwf	??_main+2,w,c
  1943  00F198  6E3F               	movwf	_main$1616,c
  1944  00F19A  50F4               	movf	prodh,w,c
  1945  00F19C  2035               	addwfc	??_main+3,w,c
  1946  00F19E  6E40               	movwf	_main$1616+1,c
  1947                           
  1948                           ;main.c: 191: printf("time %x %x", ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(ti
      +                          me[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)
      +                          *10), timePassed(startTime));
  1949  00F1A0  0EBA               	movlw	low STR_8
  1950  00F1A2  6E17               	movwf	printf@f,c
  1951  00F1A4  0EFF               	movlw	high STR_8
  1952  00F1A6  6E18               	movwf	printf@f+1,c
  1953  00F1A8  C03F  F019         	movff	_main$1616,?_printf+2
  1954  00F1AC  C040  F01A         	movff	_main$1616+1,?_printf+3
  1955  00F1B0  C04D  F007         	movff	main@startTime,timePassed@start
  1956  00F1B4  C04E  F008         	movff	main@startTime+1,timePassed@start+1
  1957  00F1B8  ECA6  F072         	call	_timePassed	;wreg free
  1958  00F1BC  C007  F01B         	movff	?_timePassed,?_printf+4
  1959  00F1C0  C008  F01C         	movff	?_timePassed+1,?_printf+5
  1960  00F1C4  EC16  F074         	call	_printf	;wreg free
  1961                           
  1962                           ;main.c: 192: keyinterrupt();
  1963  00F1C8  EC28  F06F         	call	_keyinterrupt	;wreg free
  1964  00F1CC                     l3483:
  1965  00F1CC  5070               	movf	_keypress,w,c	;volatile
  1966  00F1CE  B4D8               	btfsc	status,2,c
  1967  00F1D0  D784               	goto	l3467
  1968                           
  1969                           ;main.c: 193: }
  1970                           ;main.c: 195: keypress = (0);
  1971  00F1D2  0E00               	movlw	0
  1972  00F1D4  6E70               	movwf	_keypress,c	;volatile
  1973                           
  1974                           ;main.c: 196: while(keypress==(0)){
  1975  00F1D6  D031               	goto	l148
  1976  00F1D8                     l3487:
  1977                           
  1978                           ;main.c: 197: keypress = (0);
  1979  00F1D8  0E00               	movlw	0
  1980  00F1DA  6E70               	movwf	_keypress,c	;volatile
  1981                           
  1982                           ;main.c: 198: _delay((unsigned long)((50)*(32000000/4000.0)));
  1983  00F1DC  0E03               	movlw	3
  1984  00F1DE  6E33               	movwf	(??_main+1)& (0+255),c
  1985  00F1E0  0E08               	movlw	8
  1986  00F1E2  6E32               	movwf	??_main& (0+255),c
  1987  00F1E4  0E77               	movlw	119
  1988  00F1E6                     u3447:
  1989  00F1E6  2EE8               	decfsz	wreg,f,c
  1990  00F1E8  D7FE               	bra	u3447
  1991  00F1EA  2E32               	decfsz	??_main& (0+255),f,c
  1992  00F1EC  D7FC               	bra	u3447
  1993  00F1EE  2E33               	decfsz	(??_main+1)& (0+255),f,c
  1994  00F1F0  D7FA               	bra	u3447
  1995  00F1F2  F000               	nop	
  1996                           
  1997                           ;main.c: 199: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  1998  00F1F4  0E01               	movlw	1
  1999  00F1F6  EC09  F06F         	call	_lcdInst
  2000  00F1FA  0E68               	movlw	104
  2001  00F1FC  6E32               	movwf	??_main& (0+255),c
  2002  00F1FE  0EE4               	movlw	228
  2003  00F200                     u3457:
  2004  00F200  2EE8               	decfsz	wreg,f,c
  2005  00F202  D7FE               	bra	u3457
  2006  00F204  2E32               	decfsz	??_main& (0+255),f,c
  2007  00F206  D7FC               	bra	u3457
  2008  00F208  D000               	nop2	
  2009                           
  2010                           ;main.c: 200: printf("testing IR1");
  2011  00F20A  0E51               	movlw	low STR_9
  2012  00F20C  6E17               	movwf	printf@f,c
  2013  00F20E  0EFF               	movlw	high STR_9
  2014  00F210  6E18               	movwf	printf@f+1,c
  2015  00F212  EC16  F074         	call	_printf	;wreg free
  2016                           
  2017                           ;main.c: 201: readADC(1);
  2018  00F216  0E01               	movlw	1
  2019  00F218  EC4C  F06F         	call	_readADC
  2020                           
  2021                           ;main.c: 202: lcdInst(0b11000000);;
  2022  00F21C  0EC0               	movlw	192
  2023  00F21E  EC09  F06F         	call	_lcdInst
  2024                           
  2025                           ;main.c: 203: printf("%x", ADRES);
  2026  00F222  0EF5               	movlw	low (STR_16+5)
  2027  00F224  6E17               	movwf	printf@f,c
  2028  00F226  0EFF               	movlw	high (STR_16+5)
  2029  00F228  6E18               	movwf	printf@f+1,c
  2030  00F22A  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2031  00F22E  CFC4 F01A          	movff	4036,?_printf+3	;volatile
  2032  00F232  EC16  F074         	call	_printf	;wreg free
  2033                           
  2034                           ;main.c: 204: keyinterrupt();
  2035  00F236  EC28  F06F         	call	_keyinterrupt	;wreg free
  2036  00F23A                     l148:
  2037  00F23A  5070               	movf	_keypress,w,c	;volatile
  2038  00F23C  B4D8               	btfsc	status,2,c
  2039  00F23E  D7CC               	goto	l3487
  2040                           
  2041                           ;main.c: 205: }
  2042                           ;main.c: 207: keypress = (0);
  2043  00F240  0E00               	movlw	0
  2044  00F242  6E70               	movwf	_keypress,c	;volatile
  2045                           
  2046                           ;main.c: 208: while(keypress==(0)){
  2047  00F244  D031               	goto	l151
  2048  00F246                     l3507:
  2049                           
  2050                           ;main.c: 209: keypress = (0);
  2051  00F246  0E00               	movlw	0
  2052  00F248  6E70               	movwf	_keypress,c	;volatile
  2053                           
  2054                           ;main.c: 210: _delay((unsigned long)((50)*(32000000/4000.0)));
  2055  00F24A  0E03               	movlw	3
  2056  00F24C  6E33               	movwf	(??_main+1)& (0+255),c
  2057  00F24E  0E08               	movlw	8
  2058  00F250  6E32               	movwf	??_main& (0+255),c
  2059  00F252  0E77               	movlw	119
  2060  00F254                     u3467:
  2061  00F254  2EE8               	decfsz	wreg,f,c
  2062  00F256  D7FE               	bra	u3467
  2063  00F258  2E32               	decfsz	??_main& (0+255),f,c
  2064  00F25A  D7FC               	bra	u3467
  2065  00F25C  2E33               	decfsz	(??_main+1)& (0+255),f,c
  2066  00F25E  D7FA               	bra	u3467
  2067  00F260  F000               	nop	
  2068                           
  2069                           ;main.c: 211: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2070  00F262  0E01               	movlw	1
  2071  00F264  EC09  F06F         	call	_lcdInst
  2072  00F268  0E68               	movlw	104
  2073  00F26A  6E32               	movwf	??_main& (0+255),c
  2074  00F26C  0EE4               	movlw	228
  2075  00F26E                     u3477:
  2076  00F26E  2EE8               	decfsz	wreg,f,c
  2077  00F270  D7FE               	bra	u3477
  2078  00F272  2E32               	decfsz	??_main& (0+255),f,c
  2079  00F274  D7FC               	bra	u3477
  2080  00F276  D000               	nop2	
  2081                           
  2082                           ;main.c: 212: printf("testing IR2");
  2083  00F278  0E5D               	movlw	low STR_11
  2084  00F27A  6E17               	movwf	printf@f,c
  2085  00F27C  0EFF               	movlw	high STR_11
  2086  00F27E  6E18               	movwf	printf@f+1,c
  2087  00F280  EC16  F074         	call	_printf	;wreg free
  2088                           
  2089                           ;main.c: 213: readADC(0);
  2090  00F284  0E00               	movlw	0
  2091  00F286  EC4C  F06F         	call	_readADC
  2092                           
  2093                           ;main.c: 214: lcdInst(0b11000000);;
  2094  00F28A  0EC0               	movlw	192
  2095  00F28C  EC09  F06F         	call	_lcdInst
  2096                           
  2097                           ;main.c: 215: printf("%x", ADRES);
  2098  00F290  0EF5               	movlw	low (STR_16+5)
  2099  00F292  6E17               	movwf	printf@f,c
  2100  00F294  0EFF               	movlw	high (STR_16+5)
  2101  00F296  6E18               	movwf	printf@f+1,c
  2102  00F298  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2103  00F29C  CFC4 F01A          	movff	4036,?_printf+3	;volatile
  2104  00F2A0  EC16  F074         	call	_printf	;wreg free
  2105                           
  2106                           ;main.c: 216: keyinterrupt();
  2107  00F2A4  EC28  F06F         	call	_keyinterrupt	;wreg free
  2108  00F2A8                     l151:
  2109  00F2A8  5070               	movf	_keypress,w,c	;volatile
  2110  00F2AA  B4D8               	btfsc	status,2,c
  2111  00F2AC  D7CC               	goto	l3507
  2112                           
  2113                           ;main.c: 217: }
  2114                           ;main.c: 219: keypress = (0);
  2115  00F2AE  0E00               	movlw	0
  2116  00F2B0  6E70               	movwf	_keypress,c	;volatile
  2117                           
  2118                           ;main.c: 220: while(keypress==(0)){
  2119  00F2B2  D031               	goto	l154
  2120  00F2B4                     l3527:
  2121                           
  2122                           ;main.c: 221: keypress = (0);
  2123  00F2B4  0E00               	movlw	0
  2124  00F2B6  6E70               	movwf	_keypress,c	;volatile
  2125                           
  2126                           ;main.c: 222: _delay((unsigned long)((50)*(32000000/4000.0)));
  2127  00F2B8  0E03               	movlw	3
  2128  00F2BA  6E33               	movwf	(??_main+1)& (0+255),c
  2129  00F2BC  0E08               	movlw	8
  2130  00F2BE  6E32               	movwf	??_main& (0+255),c
  2131  00F2C0  0E77               	movlw	119
  2132  00F2C2                     u3487:
  2133  00F2C2  2EE8               	decfsz	wreg,f,c
  2134  00F2C4  D7FE               	bra	u3487
  2135  00F2C6  2E32               	decfsz	??_main& (0+255),f,c
  2136  00F2C8  D7FC               	bra	u3487
  2137  00F2CA  2E33               	decfsz	(??_main+1)& (0+255),f,c
  2138  00F2CC  D7FA               	bra	u3487
  2139  00F2CE  F000               	nop	
  2140                           
  2141                           ;main.c: 223: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2142  00F2D0  0E01               	movlw	1
  2143  00F2D2  EC09  F06F         	call	_lcdInst
  2144  00F2D6  0E68               	movlw	104
  2145  00F2D8  6E32               	movwf	??_main& (0+255),c
  2146  00F2DA  0EE4               	movlw	228
  2147  00F2DC                     u3497:
  2148  00F2DC  2EE8               	decfsz	wreg,f,c
  2149  00F2DE  D7FE               	bra	u3497
  2150  00F2E0  2E32               	decfsz	??_main& (0+255),f,c
  2151  00F2E2  D7FC               	bra	u3497
  2152  00F2E4  D000               	nop2	
  2153                           
  2154                           ;main.c: 224: printf("testing IR3");
  2155  00F2E6  0E69               	movlw	low STR_13
  2156  00F2E8  6E17               	movwf	printf@f,c
  2157  00F2EA  0EFF               	movlw	high STR_13
  2158  00F2EC  6E18               	movwf	printf@f+1,c
  2159  00F2EE  EC16  F074         	call	_printf	;wreg free
  2160                           
  2161                           ;main.c: 225: readADC(2);
  2162  00F2F2  0E02               	movlw	2
  2163  00F2F4  EC4C  F06F         	call	_readADC
  2164                           
  2165                           ;main.c: 226: lcdInst(0b11000000);;
  2166  00F2F8  0EC0               	movlw	192
  2167  00F2FA  EC09  F06F         	call	_lcdInst
  2168                           
  2169                           ;main.c: 227: printf("%x", ADRES);
  2170  00F2FE  0EF5               	movlw	low (STR_16+5)
  2171  00F300  6E17               	movwf	printf@f,c
  2172  00F302  0EFF               	movlw	high (STR_16+5)
  2173  00F304  6E18               	movwf	printf@f+1,c
  2174  00F306  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2175  00F30A  CFC4 F01A          	movff	4036,?_printf+3	;volatile
  2176  00F30E  EC16  F074         	call	_printf	;wreg free
  2177                           
  2178                           ;main.c: 228: keyinterrupt();
  2179  00F312  EC28  F06F         	call	_keyinterrupt	;wreg free
  2180  00F316                     l154:
  2181  00F316  5070               	movf	_keypress,w,c	;volatile
  2182  00F318  B4D8               	btfsc	status,2,c
  2183  00F31A  D7CC               	goto	l3527
  2184                           
  2185                           ;main.c: 229: }
  2186                           ;main.c: 231: keypress = (0);
  2187  00F31C  0E00               	movlw	0
  2188  00F31E  6E70               	movwf	_keypress,c	;volatile
  2189                           
  2190                           ;main.c: 232: while(keypress==(0)){
  2191  00F320  D033               	goto	l157
  2192  00F322                     l3547:
  2193                           
  2194                           ;main.c: 233: keypress = (0);
  2195  00F322  0E00               	movlw	0
  2196  00F324  6E70               	movwf	_keypress,c	;volatile
  2197                           
  2198                           ;main.c: 234: _delay((unsigned long)((50)*(32000000/4000.0)));
  2199  00F326  0E03               	movlw	3
  2200  00F328  6E33               	movwf	(??_main+1)& (0+255),c
  2201  00F32A  0E08               	movlw	8
  2202  00F32C  6E32               	movwf	??_main& (0+255),c
  2203  00F32E  0E77               	movlw	119
  2204  00F330                     u3507:
  2205  00F330  2EE8               	decfsz	wreg,f,c
  2206  00F332  D7FE               	bra	u3507
  2207  00F334  2E32               	decfsz	??_main& (0+255),f,c
  2208  00F336  D7FC               	bra	u3507
  2209  00F338  2E33               	decfsz	(??_main+1)& (0+255),f,c
  2210  00F33A  D7FA               	bra	u3507
  2211  00F33C  F000               	nop	
  2212                           
  2213                           ;main.c: 235: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2214  00F33E  0E01               	movlw	1
  2215  00F340  EC09  F06F         	call	_lcdInst
  2216  00F344  0E68               	movlw	104
  2217  00F346  6E32               	movwf	??_main& (0+255),c
  2218  00F348  0EE4               	movlw	228
  2219  00F34A                     u3517:
  2220  00F34A  2EE8               	decfsz	wreg,f,c
  2221  00F34C  D7FE               	bra	u3517
  2222  00F34E  2E32               	decfsz	??_main& (0+255),f,c
  2223  00F350  D7FC               	bra	u3517
  2224  00F352  D000               	nop2	
  2225                           
  2226                           ;main.c: 236: printf("testing label");
  2227  00F354  0E0E               	movlw	low STR_15
  2228  00F356  6E17               	movwf	printf@f,c
  2229  00F358  0EFF               	movlw	high STR_15
  2230  00F35A  6E18               	movwf	printf@f+1,c
  2231  00F35C  EC16  F074         	call	_printf	;wreg free
  2232                           
  2233                           ;main.c: 237: readADC(4);
  2234  00F360  0E04               	movlw	4
  2235  00F362  EC4C  F06F         	call	_readADC
  2236                           
  2237                           ;main.c: 238: lcdInst(0b11000000);;
  2238  00F366  0EC0               	movlw	192
  2239  00F368  EC09  F06F         	call	_lcdInst
  2240                           
  2241                           ;main.c: 239: printf("%x   %x", ADRESH, ADRESL);
  2242  00F36C  0EF0               	movlw	low STR_16
  2243  00F36E  6E17               	movwf	printf@f,c
  2244  00F370  0EFF               	movlw	high STR_16
  2245  00F372  6E18               	movwf	printf@f+1,c
  2246  00F374  CFC4 F019          	movff	4036,?_printf+2	;volatile
  2247  00F378  6A1A               	clrf	?_printf+3,c
  2248  00F37A  CFC3 F01B          	movff	4035,?_printf+4	;volatile
  2249  00F37E  6A1C               	clrf	?_printf+5,c
  2250  00F380  EC16  F074         	call	_printf	;wreg free
  2251                           
  2252                           ;main.c: 240: keyinterrupt();
  2253  00F384  EC28  F06F         	call	_keyinterrupt	;wreg free
  2254  00F388                     l157:
  2255  00F388  5070               	movf	_keypress,w,c	;volatile
  2256  00F38A  B4D8               	btfsc	status,2,c
  2257  00F38C  D7CA               	goto	l3547
  2258                           
  2259                           ;main.c: 241: }
  2260                           ;main.c: 243: keypress = (0);
  2261  00F38E  0E00               	movlw	0
  2262  00F390  6E70               	movwf	_keypress,c	;volatile
  2263                           
  2264                           ;main.c: 244: while(keypress==(0)){
  2265  00F392  D059               	goto	l3599
  2266  00F394                     l3567:
  2267                           
  2268                           ;main.c: 245: keypress = (0);
  2269  00F394  0E00               	movlw	0
  2270  00F396  6E70               	movwf	_keypress,c	;volatile
  2271                           
  2272                           ;main.c: 246: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2273  00F398  0E01               	movlw	1
  2274  00F39A  EC09  F06F         	call	_lcdInst
  2275  00F39E  0E68               	movlw	104
  2276  00F3A0  6E32               	movwf	??_main& (0+255),c
  2277  00F3A2  0EE4               	movlw	228
  2278  00F3A4                     u3527:
  2279  00F3A4  2EE8               	decfsz	wreg,f,c
  2280  00F3A6  D7FE               	bra	u3527
  2281  00F3A8  2E32               	decfsz	??_main& (0+255),f,c
  2282  00F3AA  D7FC               	bra	u3527
  2283  00F3AC  D000               	nop2	
  2284                           
  2285                           ;main.c: 247: printf("testing faststep");
  2286  00F3AE  0E63               	movlw	low STR_17
  2287  00F3B0  6E17               	movwf	printf@f,c
  2288  00F3B2  0EFE               	movlw	high STR_17
  2289  00F3B4  6E18               	movwf	printf@f+1,c
  2290  00F3B6  EC16  F074         	call	_printf	;wreg free
  2291                           
  2292                           ;main.c: 249: if (c == 1){LATDbits.LATD1 = 1;}
  2293  00F3BA  0457               	decf	main@c,w,c
  2294  00F3BC  1058               	iorwf	main@c+1,w,c
  2295  00F3BE  1059               	iorwf	main@c+2,w,c
  2296  00F3C0  105A               	iorwf	main@c+3,w,c
  2297  00F3C2  A4D8               	btfss	status,2,c
  2298  00F3C4  D002               	goto	l162
  2299  00F3C6  828C               	bsf	3980,1,c	;volatile
  2300  00F3C8  D001               	goto	l3579
  2301  00F3CA                     l162:
  2302                           
  2303                           ;main.c: 250: else{LATDbits.LATD1 = 0;}
  2304  00F3CA  928C               	bcf	3980,1,c	;volatile
  2305  00F3CC                     l3579:
  2306                           
  2307                           ;main.c: 251: if (c == 2){LATBbits.LATB3 = 1;}
  2308  00F3CC  0E02               	movlw	2
  2309  00F3CE  1857               	xorwf	main@c,w,c
  2310  00F3D0  1058               	iorwf	main@c+1,w,c
  2311  00F3D2  1059               	iorwf	main@c+2,w,c
  2312  00F3D4  105A               	iorwf	main@c+3,w,c
  2313  00F3D6  A4D8               	btfss	status,2,c
  2314  00F3D8  D002               	goto	l164
  2315  00F3DA  868A               	bsf	3978,3,c	;volatile
  2316  00F3DC  D001               	goto	l3583
  2317  00F3DE                     l164:
  2318                           
  2319                           ;main.c: 252: else{LATBbits.LATB3 = 0;}
  2320  00F3DE  968A               	bcf	3978,3,c	;volatile
  2321  00F3E0                     l3583:
  2322                           
  2323                           ;main.c: 253: if (c == 3){LATBbits.LATB2 = 1;}
  2324  00F3E0  0E03               	movlw	3
  2325  00F3E2  1857               	xorwf	main@c,w,c
  2326  00F3E4  1058               	iorwf	main@c+1,w,c
  2327  00F3E6  1059               	iorwf	main@c+2,w,c
  2328  00F3E8  105A               	iorwf	main@c+3,w,c
  2329  00F3EA  A4D8               	btfss	status,2,c
  2330  00F3EC  D002               	goto	l166
  2331  00F3EE  848A               	bsf	3978,2,c	;volatile
  2332  00F3F0  D001               	goto	l3587
  2333  00F3F2                     l166:
  2334                           
  2335                           ;main.c: 254: else{LATBbits.LATB2 = 0;}
  2336  00F3F2  948A               	bcf	3978,2,c	;volatile
  2337  00F3F4                     l3587:
  2338                           
  2339                           ;main.c: 255: if (c == 4){LATBbits.LATB0 = 1;}
  2340  00F3F4  0E04               	movlw	4
  2341  00F3F6  1857               	xorwf	main@c,w,c
  2342  00F3F8  1058               	iorwf	main@c+1,w,c
  2343  00F3FA  1059               	iorwf	main@c+2,w,c
  2344  00F3FC  105A               	iorwf	main@c+3,w,c
  2345  00F3FE  A4D8               	btfss	status,2,c
  2346  00F400  D002               	goto	l168
  2347  00F402  808A               	bsf	3978,0,c	;volatile
  2348  00F404  D001               	goto	l3591
  2349  00F406                     l168:
  2350                           
  2351                           ;main.c: 256: else{LATBbits.LATB0 = 0;}
  2352  00F406  908A               	bcf	3978,0,c	;volatile
  2353  00F408                     l3591:
  2354                           
  2355                           ;main.c: 258: c++;
  2356  00F408  0E01               	movlw	1
  2357  00F40A  2657               	addwf	main@c,f,c
  2358  00F40C  0E00               	movlw	0
  2359  00F40E  2258               	addwfc	main@c+1,f,c
  2360  00F410  2259               	addwfc	main@c+2,f,c
  2361  00F412  225A               	addwfc	main@c+3,f,c
  2362                           
  2363                           ;main.c: 259: if (c>4) {s=1;}
  2364  00F414  505A               	movf	main@c+3,w,c
  2365  00F416  1059               	iorwf	main@c+2,w,c
  2366  00F418  1058               	iorwf	main@c+1,w,c
  2367  00F41A  E104               	bnz	u3010
  2368  00F41C  0E05               	movlw	5
  2369  00F41E  5C57               	subwf	main@c,w,c
  2370  00F420  A0D8               	btfss	status,0,c
  2371  00F422  D004               	goto	l3595
  2372  00F424                     u3010:
  2373  00F424  0E00               	movlw	0
  2374  00F426  6E52               	movwf	main@s+1,c
  2375  00F428  0E01               	movlw	1
  2376  00F42A  6E51               	movwf	main@s,c
  2377  00F42C                     l3595:
  2378                           
  2379                           ;main.c: 260: _delay((unsigned long)((250)*(32000000/4000.0)));
  2380  00F42C  0E0B               	movlw	11
  2381  00F42E  6E33               	movwf	(??_main+1)& (0+255),c
  2382  00F430  0E26               	movlw	38
  2383  00F432  6E32               	movwf	??_main& (0+255),c
  2384  00F434  0E5E               	movlw	94
  2385  00F436                     u3537:
  2386  00F436  2EE8               	decfsz	wreg,f,c
  2387  00F438  D7FE               	bra	u3537
  2388  00F43A  2E32               	decfsz	??_main& (0+255),f,c
  2389  00F43C  D7FC               	bra	u3537
  2390  00F43E  2E33               	decfsz	(??_main+1)& (0+255),f,c
  2391  00F440  D7FA               	bra	u3537
  2392                           
  2393                           ;main.c: 261: keyinterrupt();
  2394  00F442  EC28  F06F         	call	_keyinterrupt	;wreg free
  2395  00F446                     l3599:
  2396  00F446  5070               	movf	_keypress,w,c	;volatile
  2397  00F448  B4D8               	btfsc	status,2,c
  2398  00F44A  D7A4               	goto	l3567
  2399                           
  2400                           ;main.c: 262: }
  2401                           ;main.c: 264: c = 0;
  2402  00F44C  0E00               	movlw	0
  2403  00F44E  6E57               	movwf	main@c,c
  2404  00F450  0E00               	movlw	0
  2405  00F452  6E58               	movwf	main@c+1,c
  2406  00F454  0E00               	movlw	0
  2407  00F456  6E59               	movwf	main@c+2,c
  2408  00F458  0E00               	movlw	0
  2409  00F45A  6E5A               	movwf	main@c+3,c
  2410                           
  2411                           ;main.c: 265: keypress = (0);
  2412  00F45C  0E00               	movlw	0
  2413  00F45E  6E70               	movwf	_keypress,c	;volatile
  2414                           
  2415                           ;main.c: 266: while(keypress==(0)){
  2416  00F460  D044               	goto	l3621
  2417  00F462                     l3603:
  2418                           
  2419                           ;main.c: 267: keypress = (0);
  2420  00F462  0E00               	movlw	0
  2421  00F464  6E70               	movwf	_keypress,c	;volatile
  2422                           
  2423                           ;main.c: 268: c++;
  2424  00F466  0E01               	movlw	1
  2425  00F468  2657               	addwf	main@c,f,c
  2426  00F46A  0E00               	movlw	0
  2427  00F46C  2258               	addwfc	main@c+1,f,c
  2428  00F46E  2259               	addwfc	main@c+2,f,c
  2429  00F470  225A               	addwfc	main@c+3,f,c
  2430                           
  2431                           ;main.c: 269: if((c %10000)== 0){
  2432  00F472  C057  F00E         	movff	main@c,___llmod@dividend
  2433  00F476  C058  F00F         	movff	main@c+1,___llmod@dividend+1
  2434  00F47A  C059  F010         	movff	main@c+2,___llmod@dividend+2
  2435  00F47E  C05A  F011         	movff	main@c+3,___llmod@dividend+3
  2436  00F482  0E10               	movlw	16
  2437  00F484  6E12               	movwf	___llmod@divisor,c
  2438  00F486  0E27               	movlw	39
  2439  00F488  6E13               	movwf	___llmod@divisor+1,c
  2440  00F48A  0E00               	movlw	0
  2441  00F48C  6E14               	movwf	___llmod@divisor+2,c
  2442  00F48E  0E00               	movlw	0
  2443  00F490  6E15               	movwf	___llmod@divisor+3,c
  2444  00F492  ECC5  F071         	call	___llmod	;wreg free
  2445  00F496  500E               	movf	?___llmod,w,c
  2446  00F498  100F               	iorwf	?___llmod+1,w,c
  2447  00F49A  1010               	iorwf	?___llmod+2,w,c
  2448  00F49C  1011               	iorwf	?___llmod+3,w,c
  2449  00F49E  A4D8               	btfss	status,2,c
  2450  00F4A0  D022               	goto	l3619
  2451                           
  2452                           ;main.c: 270: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2453  00F4A2  0E01               	movlw	1
  2454  00F4A4  EC09  F06F         	call	_lcdInst
  2455  00F4A8  0E68               	movlw	104
  2456  00F4AA  6E32               	movwf	??_main& (0+255),c
  2457  00F4AC  0EE4               	movlw	228
  2458  00F4AE                     u3547:
  2459  00F4AE  2EE8               	decfsz	wreg,f,c
  2460  00F4B0  D7FE               	bra	u3547
  2461  00F4B2  2E32               	decfsz	??_main& (0+255),f,c
  2462  00F4B4  D7FC               	bra	u3547
  2463  00F4B6  D000               	nop2	
  2464                           
  2465                           ;main.c: 271: printf("program speed");
  2466  00F4B8  0E00               	movlw	low STR_18
  2467  00F4BA  6E17               	movwf	printf@f,c
  2468  00F4BC  0EFF               	movlw	high STR_18
  2469  00F4BE  6E18               	movwf	printf@f+1,c
  2470  00F4C0  EC16  F074         	call	_printf	;wreg free
  2471                           
  2472                           ;main.c: 272: lcdInst(0b11000000);;
  2473  00F4C4  0EC0               	movlw	192
  2474  00F4C6  EC09  F06F         	call	_lcdInst
  2475                           
  2476                           ;main.c: 273: printf("loops: %lu", c);
  2477  00F4CA  0EAF               	movlw	low STR_19
  2478  00F4CC  6E17               	movwf	printf@f,c
  2479  00F4CE  0EFF               	movlw	high STR_19
  2480  00F4D0  6E18               	movwf	printf@f+1,c
  2481  00F4D2  C057  F019         	movff	main@c,?_printf+2
  2482  00F4D6  C058  F01A         	movff	main@c+1,?_printf+3
  2483  00F4DA  C059  F01B         	movff	main@c+2,?_printf+4
  2484  00F4DE  C05A  F01C         	movff	main@c+3,?_printf+5
  2485  00F4E2  EC16  F074         	call	_printf	;wreg free
  2486  00F4E6                     l3619:
  2487                           
  2488                           ;main.c: 274: }
  2489                           ;main.c: 276: keyinterrupt();
  2490  00F4E6  EC28  F06F         	call	_keyinterrupt	;wreg free
  2491  00F4EA                     l3621:
  2492  00F4EA  5070               	movf	_keypress,w,c	;volatile
  2493  00F4EC  B4D8               	btfsc	status,2,c
  2494  00F4EE  D7B9               	goto	l3603
  2495                           
  2496                           ;main.c: 277: }
  2497                           ;main.c: 279: standby = 1;
  2498  00F4F0  0E00               	movlw	0
  2499  00F4F2  6E56               	movwf	main@standby+1,c
  2500  00F4F4  0E01               	movlw	1
  2501  00F4F6  6E55               	movwf	main@standby,c
  2502  00F4F8                     l140:
  2503                           
  2504                           ;main.c: 280: }
  2505                           ;main.c: 282: if(keypress != (0)){
  2506  00F4F8  5070               	movf	_keypress,w,c	;volatile
  2507  00F4FA  B4D8               	btfsc	status,2,c
  2508  00F4FC  EF65  F076         	goto	l3319
  2509                           
  2510                           ;main.c: 283: s++;
  2511  00F500  4A51               	infsnz	main@s,f,c
  2512  00F502  2A52               	incf	main@s+1,f,c
  2513                           
  2514                           ;main.c: 284: }
  2515                           ;main.c: 286: }
  2516  00F504  EF65  F076         	goto	l3319
  2517  00F508                     l3627:
  2518                           
  2519                           ;main.c: 287: else if(standby == 3){
  2520  00F508  0E03               	movlw	3
  2521  00F50A  1855               	xorwf	main@standby,w,c
  2522  00F50C  1056               	iorwf	main@standby+1,w,c
  2523  00F50E  A4D8               	btfss	status,2,c
  2524  00F510  D27A               	goto	l3753
  2525                           
  2526                           ;main.c: 289: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2527  00F512  0E01               	movlw	1
  2528  00F514  EC09  F06F         	call	_lcdInst
  2529  00F518  0E68               	movlw	104
  2530  00F51A  6E32               	movwf	??_main& (0+255),c
  2531  00F51C  0EE4               	movlw	228
  2532  00F51E                     u3557:
  2533  00F51E  2EE8               	decfsz	wreg,f,c
  2534  00F520  D7FE               	bra	u3557
  2535  00F522  2E32               	decfsz	??_main& (0+255),f,c
  2536  00F524  D7FC               	bra	u3557
  2537  00F526  D000               	nop2	
  2538                           
  2539                           ;main.c: 290: printf("soup can test");
  2540  00F528  0E1C               	movlw	low STR_20
  2541  00F52A  6E17               	movwf	printf@f,c
  2542  00F52C  0EFF               	movlw	high STR_20
  2543  00F52E  6E18               	movwf	printf@f+1,c
  2544  00F530  EC16  F074         	call	_printf	;wreg free
  2545                           
  2546                           ;main.c: 292: if(soupLoad){
  2547  00F534  504B               	movf	main@soupLoad,w,c
  2548  00F536  104C               	iorwf	main@soupLoad+1,w,c
  2549  00F538  B4D8               	btfsc	status,2,c
  2550  00F53A  D0A3               	goto	l3647
  2551                           
  2552                           ;main.c: 293: prevSoupLoad = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  2553  00F53C  C061  F032         	movff	_time+2,??_main
  2554  00F540  0E0F               	movlw	15
  2555  00F542  1632               	andwf	??_main,f,c
  2556  00F544  5032               	movf	??_main,w,c
  2557  00F546  6E01               	movwf	___wmul@multiplier,c
  2558  00F548  6A02               	clrf	___wmul@multiplier+1,c
  2559  00F54A  0E0E               	movlw	14
  2560  00F54C  6E04               	movwf	___wmul@multiplicand+1,c
  2561  00F54E  0E10               	movlw	16
  2562  00F550  6E03               	movwf	___wmul@multiplicand,c
  2563  00F552  EC5E  F06F         	call	___wmul	;wreg free
  2564  00F556  C05F  F033         	movff	_time,??_main+1
  2565  00F55A  3A33               	swapf	??_main+1,f,c
  2566  00F55C  0E0F               	movlw	15
  2567  00F55E  1633               	andwf	??_main+1,f,c
  2568  00F560  0E0F               	movlw	15
  2569  00F562  1633               	andwf	??_main+1,f,c
  2570  00F564  5033               	movf	??_main+1,w,c
  2571  00F566  0D0A               	mullw	10
  2572  00F568  505F               	movf	_time,w,c
  2573  00F56A  0B0F               	andlw	15
  2574  00F56C  6E34               	movwf	(??_main+2)& (0+255),c
  2575  00F56E  6A35               	clrf	(??_main+3)& (0+255),c
  2576  00F570  50F3               	movf	prodl,w,c
  2577  00F572  2634               	addwf	??_main+2,f,c
  2578  00F574  50F4               	movf	prodh,w,c
  2579  00F576  2235               	addwfc	??_main+3,f,c
  2580  00F578  C060  F036         	movff	_time+1,??_main+4
  2581  00F57C  0E0F               	movlw	15
  2582  00F57E  1636               	andwf	??_main+4,f,c
  2583  00F580  5036               	movf	??_main+4,w,c
  2584  00F582  0D3C               	mullw	60
  2585  00F584  50F3               	movf	prodl,w,c
  2586  00F586  2634               	addwf	??_main+2,f,c
  2587  00F588  50F4               	movf	prodh,w,c
  2588  00F58A  2235               	addwfc	??_main+3,f,c
  2589  00F58C  C060  F037         	movff	_time+1,??_main+5
  2590  00F590  3A37               	swapf	??_main+5,f,c
  2591  00F592  0E0F               	movlw	15
  2592  00F594  1637               	andwf	??_main+5,f,c
  2593  00F596  0E0F               	movlw	15
  2594  00F598  1637               	andwf	??_main+5,f,c
  2595  00F59A  5037               	movf	??_main+5,w,c
  2596  00F59C  0D0A               	mullw	10
  2597  00F59E  50F3               	movf	prodl,w,c
  2598  00F5A0  2634               	addwf	??_main+2,f,c
  2599  00F5A2  50F4               	movf	prodh,w,c
  2600  00F5A4  2235               	addwfc	??_main+3,f,c
  2601  00F5A6  5001               	movf	?___wmul,w,c
  2602  00F5A8  2634               	addwf	??_main+2,f,c
  2603  00F5AA  5002               	movf	?___wmul+1,w,c
  2604  00F5AC  2235               	addwfc	??_main+3,f,c
  2605  00F5AE  C061  F038         	movff	_time+2,??_main+6
  2606  00F5B2  3A38               	swapf	??_main+6,f,c
  2607  00F5B4  0E0F               	movlw	15
  2608  00F5B6  1638               	andwf	??_main+6,f,c
  2609  00F5B8  0E0F               	movlw	15
  2610  00F5BA  1638               	andwf	??_main+6,f,c
  2611  00F5BC  5038               	movf	??_main+6,w,c
  2612  00F5BE  0D0A               	mullw	10
  2613  00F5C0  50F3               	movf	prodl,w,c
  2614  00F5C2  2434               	addwf	??_main+2,w,c
  2615  00F5C4  6E3D               	movwf	main@prevSoupLoad,c
  2616  00F5C6  50F4               	movf	prodh,w,c
  2617  00F5C8  2035               	addwfc	??_main+3,w,c
  2618  00F5CA  6E3E               	movwf	main@prevSoupLoad+1,c
  2619                           
  2620                           ;main.c: 294: if (!soupSort){
  2621  00F5CC  5049               	movf	main@soupSort,w,c
  2622  00F5CE  104A               	iorwf	main@soupSort+1,w,c
  2623  00F5D0  A4D8               	btfss	status,2,c
  2624  00F5D2  D057               	goto	l3647
  2625                           
  2626                           ;main.c: 295: soupSort = 1;
  2627  00F5D4  0E00               	movlw	0
  2628  00F5D6  6E4A               	movwf	main@soupSort+1,c
  2629  00F5D8  0E01               	movlw	1
  2630  00F5DA  6E49               	movwf	main@soupSort,c
  2631                           
  2632                           ;main.c: 296: prevSoupTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  2633  00F5DC  C061  F032         	movff	_time+2,??_main
  2634  00F5E0  0E0F               	movlw	15
  2635  00F5E2  1632               	andwf	??_main,f,c
  2636  00F5E4  5032               	movf	??_main,w,c
  2637  00F5E6  6E01               	movwf	___wmul@multiplier,c
  2638  00F5E8  6A02               	clrf	___wmul@multiplier+1,c
  2639  00F5EA  0E0E               	movlw	14
  2640  00F5EC  6E04               	movwf	___wmul@multiplicand+1,c
  2641  00F5EE  0E10               	movlw	16
  2642  00F5F0  6E03               	movwf	___wmul@multiplicand,c
  2643  00F5F2  EC5E  F06F         	call	___wmul	;wreg free
  2644  00F5F6  C05F  F033         	movff	_time,??_main+1
  2645  00F5FA  3A33               	swapf	??_main+1,f,c
  2646  00F5FC  0E0F               	movlw	15
  2647  00F5FE  1633               	andwf	??_main+1,f,c
  2648  00F600  0E0F               	movlw	15
  2649  00F602  1633               	andwf	??_main+1,f,c
  2650  00F604  5033               	movf	??_main+1,w,c
  2651  00F606  0D0A               	mullw	10
  2652  00F608  505F               	movf	_time,w,c
  2653  00F60A  0B0F               	andlw	15
  2654  00F60C  6E34               	movwf	(??_main+2)& (0+255),c
  2655  00F60E  6A35               	clrf	(??_main+3)& (0+255),c
  2656  00F610  50F3               	movf	prodl,w,c
  2657  00F612  2634               	addwf	??_main+2,f,c
  2658  00F614  50F4               	movf	prodh,w,c
  2659  00F616  2235               	addwfc	??_main+3,f,c
  2660  00F618  C060  F036         	movff	_time+1,??_main+4
  2661  00F61C  0E0F               	movlw	15
  2662  00F61E  1636               	andwf	??_main+4,f,c
  2663  00F620  5036               	movf	??_main+4,w,c
  2664  00F622  0D3C               	mullw	60
  2665  00F624  50F3               	movf	prodl,w,c
  2666  00F626  2634               	addwf	??_main+2,f,c
  2667  00F628  50F4               	movf	prodh,w,c
  2668  00F62A  2235               	addwfc	??_main+3,f,c
  2669  00F62C  C060  F037         	movff	_time+1,??_main+5
  2670  00F630  3A37               	swapf	??_main+5,f,c
  2671  00F632  0E0F               	movlw	15
  2672  00F634  1637               	andwf	??_main+5,f,c
  2673  00F636  0E0F               	movlw	15
  2674  00F638  1637               	andwf	??_main+5,f,c
  2675  00F63A  5037               	movf	??_main+5,w,c
  2676  00F63C  0D0A               	mullw	10
  2677  00F63E  50F3               	movf	prodl,w,c
  2678  00F640  2634               	addwf	??_main+2,f,c
  2679  00F642  50F4               	movf	prodh,w,c
  2680  00F644  2235               	addwfc	??_main+3,f,c
  2681  00F646  5001               	movf	?___wmul,w,c
  2682  00F648  2634               	addwf	??_main+2,f,c
  2683  00F64A  5002               	movf	?___wmul+1,w,c
  2684  00F64C  2235               	addwfc	??_main+3,f,c
  2685  00F64E  C061  F038         	movff	_time+2,??_main+6
  2686  00F652  3A38               	swapf	??_main+6,f,c
  2687  00F654  0E0F               	movlw	15
  2688  00F656  1638               	andwf	??_main+6,f,c
  2689  00F658  0E0F               	movlw	15
  2690  00F65A  1638               	andwf	??_main+6,f,c
  2691  00F65C  5038               	movf	??_main+6,w,c
  2692  00F65E  0D0A               	mullw	10
  2693  00F660  50F3               	movf	prodl,w,c
  2694  00F662  2434               	addwf	??_main+2,w,c
  2695  00F664  6E5B               	movwf	main@prevSoupTime,c
  2696  00F666  50F4               	movf	prodh,w,c
  2697  00F668  2035               	addwfc	??_main+3,w,c
  2698  00F66A  6E5C               	movwf	main@prevSoupTime+1,c
  2699                           
  2700                           ;main.c: 297: _delay((unsigned long)((250)*(32000000/4000.0)));
  2701  00F66C  0E0B               	movlw	11
  2702  00F66E  6E33               	movwf	(??_main+1)& (0+255),c
  2703  00F670  0E26               	movlw	38
  2704  00F672  6E32               	movwf	??_main& (0+255),c
  2705  00F674  0E5E               	movlw	94
  2706  00F676                     u3567:
  2707  00F676  2EE8               	decfsz	wreg,f,c
  2708  00F678  D7FE               	bra	u3567
  2709  00F67A  2E32               	decfsz	??_main& (0+255),f,c
  2710  00F67C  D7FC               	bra	u3567
  2711  00F67E  2E33               	decfsz	(??_main+1)& (0+255),f,c
  2712  00F680  D7FA               	bra	u3567
  2713  00F682                     l3647:
  2714                           
  2715                           ;main.c: 298: }
  2716                           ;main.c: 299: }
  2717                           ;main.c: 301: if (soupSort){
  2718  00F682  5049               	movf	main@soupSort,w,c
  2719  00F684  104A               	iorwf	main@soupSort+1,w,c
  2720  00F686  B4D8               	btfsc	status,2,c
  2721  00F688  D1B2               	goto	l3749
  2722                           
  2723                           ;main.c: 303: if (timePassed(prevSoupTime) < 5){
  2724  00F68A  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2725  00F68E  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2726  00F692  ECA6  F072         	call	_timePassed	;wreg free
  2727  00F696  BE08               	btfsc	?_timePassed+1,7,c
  2728  00F698  D006               	goto	l3651
  2729  00F69A  5008               	movf	?_timePassed+1,w,c
  2730  00F69C  E141               	bnz	l3671
  2731  00F69E  0E05               	movlw	5
  2732  00F6A0  5C07               	subwf	?_timePassed,w,c
  2733  00F6A2  B0D8               	btfsc	status,0,c
  2734  00F6A4  D03D               	goto	l3671
  2735  00F6A6                     l3651:
  2736                           
  2737                           ;main.c: 304: S1mode = 3;
  2738  00F6A6  0E00               	movlw	0
  2739  00F6A8  6E5E               	movwf	main@S1mode+1,c
  2740  00F6AA  0E03               	movlw	3
  2741  00F6AC  6E5D               	movwf	main@S1mode,c
  2742                           
  2743                           ;main.c: 305: updateS1(S1mode);
  2744  00F6AE  C05D  F030         	movff	main@S1mode,updateS1@mode
  2745  00F6B2  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  2746  00F6B6  EC5E  F073         	call	_updateS1	;wreg free
  2747                           
  2748                           ;main.c: 308: readADC(4);
  2749  00F6BA  0E04               	movlw	4
  2750  00F6BC  EC4C  F06F         	call	_readADC
  2751                           
  2752                           ;main.c: 309: if(ADRESL<=0x1){labelState = 1;}
  2753  00F6C0  0E02               	movlw	2
  2754  00F6C2  60C3               	cpfslt	4035,c	;volatile
  2755  00F6C4  D004               	goto	l3661
  2756  00F6C6  0E00               	movlw	0
  2757  00F6C8  6E50               	movwf	main@labelState+1,c
  2758  00F6CA  0E01               	movlw	1
  2759  00F6CC  6E4F               	movwf	main@labelState,c
  2760  00F6CE                     l3661:
  2761                           
  2762                           ;main.c: 310: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2763  00F6CE  0E01               	movlw	1
  2764  00F6D0  EC09  F06F         	call	_lcdInst
  2765  00F6D4  0E68               	movlw	104
  2766  00F6D6  6E32               	movwf	??_main& (0+255),c
  2767  00F6D8  0EE4               	movlw	228
  2768  00F6DA                     u3577:
  2769  00F6DA  2EE8               	decfsz	wreg,f,c
  2770  00F6DC  D7FE               	bra	u3577
  2771  00F6DE  2E32               	decfsz	??_main& (0+255),f,c
  2772  00F6E0  D7FC               	bra	u3577
  2773  00F6E2  D000               	nop2	
  2774                           
  2775                           ;main.c: 311: printf("value: %x", ADRESL);
  2776  00F6E4  0EC5               	movlw	low STR_21
  2777  00F6E6  6E17               	movwf	printf@f,c
  2778  00F6E8  0EFF               	movlw	high STR_21
  2779  00F6EA  6E18               	movwf	printf@f+1,c
  2780  00F6EC  CFC3 F019          	movff	4035,?_printf+2	;volatile
  2781  00F6F0  6A1A               	clrf	?_printf+3,c
  2782  00F6F2  EC16  F074         	call	_printf	;wreg free
  2783                           
  2784                           ;main.c: 312: lcdInst(0b11000000);;
  2785  00F6F6  0EC0               	movlw	192
  2786  00F6F8  EC09  F06F         	call	_lcdInst
  2787                           
  2788                           ;main.c: 313: printf("testing %d", timePassed(prevSoupTime));
  2789  00F6FC  0EA4               	movlw	low STR_22
  2790  00F6FE  6E17               	movwf	printf@f,c
  2791  00F700  0EFF               	movlw	high STR_22
  2792  00F702  6E18               	movwf	printf@f+1,c
  2793  00F704  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2794  00F708  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2795  00F70C  ECA6  F072         	call	_timePassed	;wreg free
  2796  00F710  C007  F019         	movff	?_timePassed,?_printf+2
  2797  00F714  C008  F01A         	movff	?_timePassed+1,?_printf+3
  2798  00F718  EC16  F074         	call	_printf	;wreg free
  2799                           
  2800                           ;main.c: 314: }
  2801  00F71C  EF65  F076         	goto	l3319
  2802  00F720                     l3671:
  2803                           
  2804                           ;main.c: 315: else if (labelState == 1){
  2805  00F720  044F               	decf	main@labelState,w,c
  2806  00F722  1050               	iorwf	main@labelState+1,w,c
  2807  00F724  A4D8               	btfss	status,2,c
  2808  00F726  D074               	goto	l3707
  2809                           
  2810                           ;main.c: 316: keypress = (0);
  2811  00F728  0E00               	movlw	0
  2812  00F72A  6E70               	movwf	_keypress,c	;volatile
  2813                           
  2814                           ;main.c: 317: keyinterrupt();
  2815  00F72C  EC28  F06F         	call	_keyinterrupt	;wreg free
  2816                           
  2817                           ;main.c: 318: if (keypress != (0)) {
  2818  00F730  5070               	movf	_keypress,w,c	;volatile
  2819  00F732  B4D8               	btfsc	status,2,c
  2820  00F734  D004               	goto	l3681
  2821                           
  2822                           ;main.c: 319: standby = 1;
  2823  00F736  0E00               	movlw	0
  2824  00F738  6E56               	movwf	main@standby+1,c
  2825  00F73A  0E01               	movlw	1
  2826  00F73C  6E55               	movwf	main@standby,c
  2827  00F73E                     l3681:
  2828                           
  2829                           ;main.c: 320: }
  2830                           ;main.c: 322: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2831  00F73E  0E01               	movlw	1
  2832  00F740  EC09  F06F         	call	_lcdInst
  2833  00F744  0E68               	movlw	104
  2834  00F746  6E32               	movwf	??_main& (0+255),c
  2835  00F748  0EE4               	movlw	228
  2836  00F74A                     u3587:
  2837  00F74A  2EE8               	decfsz	wreg,f,c
  2838  00F74C  D7FE               	bra	u3587
  2839  00F74E  2E32               	decfsz	??_main& (0+255),f,c
  2840  00F750  D7FC               	bra	u3587
  2841  00F752  D000               	nop2	
  2842                           
  2843                           ;main.c: 323: printf("no label");
  2844  00F754  0ECF               	movlw	low STR_23
  2845  00F756  6E17               	movwf	printf@f,c
  2846  00F758  0EFF               	movlw	high STR_23
  2847  00F75A  6E18               	movwf	printf@f+1,c
  2848  00F75C  EC16  F074         	call	_printf	;wreg free
  2849                           
  2850                           ;main.c: 324: lcdInst(0b11000000);;
  2851  00F760  0EC0               	movlw	192
  2852  00F762  EC09  F06F         	call	_lcdInst
  2853                           
  2854                           ;main.c: 325: if(timePassed(prevSoupTime) < 13){
  2855  00F766  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2856  00F76A  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2857  00F76E  ECA6  F072         	call	_timePassed	;wreg free
  2858  00F772  BE08               	btfsc	?_timePassed+1,7,c
  2859  00F774  D006               	goto	l3691
  2860  00F776  5008               	movf	?_timePassed+1,w,c
  2861  00F778  E120               	bnz	l3697
  2862  00F77A  0E0D               	movlw	13
  2863  00F77C  5C07               	subwf	?_timePassed,w,c
  2864  00F77E  B0D8               	btfsc	status,0,c
  2865  00F780  D01C               	goto	l3697
  2866  00F782                     l3691:
  2867                           
  2868                           ;main.c: 327: S1mode = 1;
  2869  00F782  0E00               	movlw	0
  2870  00F784  6E5E               	movwf	main@S1mode+1,c
  2871  00F786  0E01               	movlw	1
  2872  00F788  6E5D               	movwf	main@S1mode,c
  2873                           
  2874                           ;main.c: 328: updateS1(S1mode);
  2875  00F78A  C05D  F030         	movff	main@S1mode,updateS1@mode
  2876  00F78E  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  2877  00F792  EC5E  F073         	call	_updateS1	;wreg free
  2878                           
  2879                           ;main.c: 329: printf("sorting %d", timePassed(prevSoupTime));
  2880  00F796  0E99               	movlw	low STR_24
  2881  00F798  6E17               	movwf	printf@f,c
  2882  00F79A  0EFF               	movlw	high STR_24
  2883  00F79C  6E18               	movwf	printf@f+1,c
  2884  00F79E  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2885  00F7A2  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2886  00F7A6  ECA6  F072         	call	_timePassed	;wreg free
  2887  00F7AA  C007  F019         	movff	?_timePassed,?_printf+2
  2888  00F7AE  C008  F01A         	movff	?_timePassed+1,?_printf+3
  2889  00F7B2  EC16  F074         	call	_printf	;wreg free
  2890                           
  2891                           ;main.c: 330: }
  2892  00F7B6  EF65  F076         	goto	l3319
  2893  00F7BA                     l3697:
  2894                           
  2895                           ;main.c: 331: else if(timePassed(prevSoupTime) < 21){
  2896  00F7BA  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2897  00F7BE  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2898  00F7C2  ECA6  F072         	call	_timePassed	;wreg free
  2899  00F7C6  BE08               	btfsc	?_timePassed+1,7,c
  2900  00F7C8  D006               	goto	l3699
  2901  00F7CA  5008               	movf	?_timePassed+1,w,c
  2902  00F7CC  E120               	bnz	l3705
  2903  00F7CE  0E15               	movlw	21
  2904  00F7D0  5C07               	subwf	?_timePassed,w,c
  2905  00F7D2  B0D8               	btfsc	status,0,c
  2906  00F7D4  D089               	goto	l3733
  2907  00F7D6                     l3699:
  2908                           
  2909                           ;main.c: 333: S1mode = 2;
  2910  00F7D6  0E00               	movlw	0
  2911  00F7D8  6E5E               	movwf	main@S1mode+1,c
  2912  00F7DA  0E02               	movlw	2
  2913  00F7DC  6E5D               	movwf	main@S1mode,c
  2914                           
  2915                           ;main.c: 334: updateS1(S1mode);
  2916  00F7DE  C05D  F030         	movff	main@S1mode,updateS1@mode
  2917  00F7E2  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  2918  00F7E6  EC5E  F073         	call	_updateS1	;wreg free
  2919                           
  2920                           ;main.c: 335: printf("returning %d", timePassed(prevSoupTime));
  2921  00F7EA  0E44               	movlw	low STR_25
  2922  00F7EC  6E17               	movwf	printf@f,c
  2923  00F7EE  0EFF               	movlw	high STR_25
  2924  00F7F0  6E18               	movwf	printf@f+1,c
  2925  00F7F2  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2926  00F7F6  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2927  00F7FA  ECA6  F072         	call	_timePassed	;wreg free
  2928  00F7FE  C007  F019         	movff	?_timePassed,?_printf+2
  2929  00F802  C008  F01A         	movff	?_timePassed+1,?_printf+3
  2930  00F806  EC16  F074         	call	_printf	;wreg free
  2931                           
  2932                           ;main.c: 336: }
  2933  00F80A  EF65  F076         	goto	l3319
  2934  00F80E                     l3705:
  2935  00F80E  D06C               	goto	l3733
  2936  00F810                     l3707:
  2937                           
  2938                           ;main.c: 339: else if(labelState == 0){
  2939  00F810  504F               	movf	main@labelState,w,c
  2940  00F812  1050               	iorwf	main@labelState+1,w,c
  2941  00F814  A4D8               	btfss	status,2,c
  2942  00F816  D06E               	goto	l3735
  2943                           
  2944                           ;main.c: 340: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  2945  00F818  0E01               	movlw	1
  2946  00F81A  EC09  F06F         	call	_lcdInst
  2947  00F81E  0E68               	movlw	104
  2948  00F820  6E32               	movwf	??_main& (0+255),c
  2949  00F822  0EE4               	movlw	228
  2950  00F824                     u3597:
  2951  00F824  2EE8               	decfsz	wreg,f,c
  2952  00F826  D7FE               	bra	u3597
  2953  00F828  2E32               	decfsz	??_main& (0+255),f,c
  2954  00F82A  D7FC               	bra	u3597
  2955  00F82C  D000               	nop2	
  2956                           
  2957                           ;main.c: 341: printf("label");
  2958  00F82E  0E16               	movlw	low (STR_15+8)
  2959  00F830  6E17               	movwf	printf@f,c
  2960  00F832  0EFF               	movlw	high (STR_15+8)
  2961  00F834  6E18               	movwf	printf@f+1,c
  2962  00F836  EC16  F074         	call	_printf	;wreg free
  2963                           
  2964                           ;main.c: 342: lcdInst(0b11000000);;
  2965  00F83A  0EC0               	movlw	192
  2966  00F83C  EC09  F06F         	call	_lcdInst
  2967                           
  2968                           ;main.c: 343: if(timePassed(prevSoupTime) < 12){
  2969  00F840  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2970  00F844  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  2971  00F848  ECA6  F072         	call	_timePassed	;wreg free
  2972  00F84C  BE08               	btfsc	?_timePassed+1,7,c
  2973  00F84E  D006               	goto	l3719
  2974  00F850  5008               	movf	?_timePassed+1,w,c
  2975  00F852  E120               	bnz	l3725
  2976  00F854  0E0C               	movlw	12
  2977  00F856  5C07               	subwf	?_timePassed,w,c
  2978  00F858  B0D8               	btfsc	status,0,c
  2979  00F85A  D01C               	goto	l3725
  2980  00F85C                     l3719:
  2981                           
  2982                           ;main.c: 345: S1mode = 2;
  2983  00F85C  0E00               	movlw	0
  2984  00F85E  6E5E               	movwf	main@S1mode+1,c
  2985  00F860  0E02               	movlw	2
  2986  00F862  6E5D               	movwf	main@S1mode,c
  2987                           
  2988                           ;main.c: 346: updateS1(S1mode);
  2989  00F864  C05D  F030         	movff	main@S1mode,updateS1@mode
  2990  00F868  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  2991  00F86C  EC5E  F073         	call	_updateS1	;wreg free
  2992                           
  2993                           ;main.c: 347: printf("sorting %d", timePassed(prevSoupTime));
  2994  00F870  0E99               	movlw	low STR_24
  2995  00F872  6E17               	movwf	printf@f,c
  2996  00F874  0EFF               	movlw	high STR_24
  2997  00F876  6E18               	movwf	printf@f+1,c
  2998  00F878  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  2999  00F87C  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  3000  00F880  ECA6  F072         	call	_timePassed	;wreg free
  3001  00F884  C007  F019         	movff	?_timePassed,?_printf+2
  3002  00F888  C008  F01A         	movff	?_timePassed+1,?_printf+3
  3003  00F88C  EC16  F074         	call	_printf	;wreg free
  3004                           
  3005                           ;main.c: 348: }
  3006  00F890  EF65  F076         	goto	l3319
  3007  00F894                     l3725:
  3008                           
  3009                           ;main.c: 349: else if(timePassed(prevSoupTime) < 19){
  3010  00F894  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  3011  00F898  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  3012  00F89C  ECA6  F072         	call	_timePassed	;wreg free
  3013  00F8A0  BE08               	btfsc	?_timePassed+1,7,c
  3014  00F8A2  D006               	goto	l3727
  3015  00F8A4  5008               	movf	?_timePassed+1,w,c
  3016  00F8A6  E120               	bnz	l3733
  3017  00F8A8  0E13               	movlw	19
  3018  00F8AA  5C07               	subwf	?_timePassed,w,c
  3019  00F8AC  B0D8               	btfsc	status,0,c
  3020  00F8AE  D01C               	goto	l3733
  3021  00F8B0                     l3727:
  3022                           
  3023                           ;main.c: 351: S1mode = 1;
  3024  00F8B0  0E00               	movlw	0
  3025  00F8B2  6E5E               	movwf	main@S1mode+1,c
  3026  00F8B4  0E01               	movlw	1
  3027  00F8B6  6E5D               	movwf	main@S1mode,c
  3028                           
  3029                           ;main.c: 352: updateS1(S1mode);
  3030  00F8B8  C05D  F030         	movff	main@S1mode,updateS1@mode
  3031  00F8BC  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  3032  00F8C0  EC5E  F073         	call	_updateS1	;wreg free
  3033                           
  3034                           ;main.c: 353: printf("returning %d", timePassed(prevSoupTime));
  3035  00F8C4  0E44               	movlw	low STR_25
  3036  00F8C6  6E17               	movwf	printf@f,c
  3037  00F8C8  0EFF               	movlw	high STR_25
  3038  00F8CA  6E18               	movwf	printf@f+1,c
  3039  00F8CC  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  3040  00F8D0  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  3041  00F8D4  ECA6  F072         	call	_timePassed	;wreg free
  3042  00F8D8  C007  F019         	movff	?_timePassed,?_printf+2
  3043  00F8DC  C008  F01A         	movff	?_timePassed+1,?_printf+3
  3044  00F8E0  EC16  F074         	call	_printf	;wreg free
  3045                           
  3046                           ;main.c: 354: }
  3047  00F8E4  EF65  F076         	goto	l3319
  3048  00F8E8                     l3733:
  3049                           
  3050                           ;main.c: 355: else{labelState = 100;}
  3051  00F8E8  0E00               	movlw	0
  3052  00F8EA  6E50               	movwf	main@labelState+1,c
  3053  00F8EC  0E64               	movlw	100
  3054  00F8EE  6E4F               	movwf	main@labelState,c
  3055                           
  3056                           ;main.c: 356: }
  3057  00F8F0  EF65  F076         	goto	l3319
  3058  00F8F4                     l3735:
  3059                           
  3060                           ;main.c: 357: else{
  3061                           ;main.c: 358: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  3062  00F8F4  0E01               	movlw	1
  3063  00F8F6  EC09  F06F         	call	_lcdInst
  3064  00F8FA  0E68               	movlw	104
  3065  00F8FC  6E32               	movwf	??_main& (0+255),c
  3066  00F8FE  0EE4               	movlw	228
  3067  00F900                     u3607:
  3068  00F900  2EE8               	decfsz	wreg,f,c
  3069  00F902  D7FE               	bra	u3607
  3070  00F904  2E32               	decfsz	??_main& (0+255),f,c
  3071  00F906  D7FC               	bra	u3607
  3072  00F908  D000               	nop2	
  3073                           
  3074                           ;main.c: 359: printf("finished %d", timePassed(prevSoupTime));
  3075  00F90A  0E81               	movlw	low STR_29
  3076  00F90C  6E17               	movwf	printf@f,c
  3077  00F90E  0EFF               	movlw	high STR_29
  3078  00F910  6E18               	movwf	printf@f+1,c
  3079  00F912  C05B  F007         	movff	main@prevSoupTime,timePassed@start
  3080  00F916  C05C  F008         	movff	main@prevSoupTime+1,timePassed@start+1
  3081  00F91A  ECA6  F072         	call	_timePassed	;wreg free
  3082  00F91E  C007  F019         	movff	?_timePassed,?_printf+2
  3083  00F922  C008  F01A         	movff	?_timePassed+1,?_printf+3
  3084  00F926  EC16  F074         	call	_printf	;wreg free
  3085                           
  3086                           ;main.c: 360: prevSoupTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  3087  00F92A  C061  F032         	movff	_time+2,??_main
  3088  00F92E  0E0F               	movlw	15
  3089  00F930  1632               	andwf	??_main,f,c
  3090  00F932  5032               	movf	??_main,w,c
  3091  00F934  6E01               	movwf	___wmul@multiplier,c
  3092  00F936  6A02               	clrf	___wmul@multiplier+1,c
  3093  00F938  0E0E               	movlw	14
  3094  00F93A  6E04               	movwf	___wmul@multiplicand+1,c
  3095  00F93C  0E10               	movlw	16
  3096  00F93E  6E03               	movwf	___wmul@multiplicand,c
  3097  00F940  EC5E  F06F         	call	___wmul	;wreg free
  3098  00F944  C05F  F033         	movff	_time,??_main+1
  3099  00F948  3A33               	swapf	??_main+1,f,c
  3100  00F94A  0E0F               	movlw	15
  3101  00F94C  1633               	andwf	??_main+1,f,c
  3102  00F94E  0E0F               	movlw	15
  3103  00F950  1633               	andwf	??_main+1,f,c
  3104  00F952  5033               	movf	??_main+1,w,c
  3105  00F954  0D0A               	mullw	10
  3106  00F956  505F               	movf	_time,w,c
  3107  00F958  0B0F               	andlw	15
  3108  00F95A  6E34               	movwf	(??_main+2)& (0+255),c
  3109  00F95C  6A35               	clrf	(??_main+3)& (0+255),c
  3110  00F95E  50F3               	movf	prodl,w,c
  3111  00F960  2634               	addwf	??_main+2,f,c
  3112  00F962  50F4               	movf	prodh,w,c
  3113  00F964  2235               	addwfc	??_main+3,f,c
  3114  00F966  C060  F036         	movff	_time+1,??_main+4
  3115  00F96A  0E0F               	movlw	15
  3116  00F96C  1636               	andwf	??_main+4,f,c
  3117  00F96E  5036               	movf	??_main+4,w,c
  3118  00F970  0D3C               	mullw	60
  3119  00F972  50F3               	movf	prodl,w,c
  3120  00F974  2634               	addwf	??_main+2,f,c
  3121  00F976  50F4               	movf	prodh,w,c
  3122  00F978  2235               	addwfc	??_main+3,f,c
  3123  00F97A  C060  F037         	movff	_time+1,??_main+5
  3124  00F97E  3A37               	swapf	??_main+5,f,c
  3125  00F980  0E0F               	movlw	15
  3126  00F982  1637               	andwf	??_main+5,f,c
  3127  00F984  0E0F               	movlw	15
  3128  00F986  1637               	andwf	??_main+5,f,c
  3129  00F988  5037               	movf	??_main+5,w,c
  3130  00F98A  0D0A               	mullw	10
  3131  00F98C  50F3               	movf	prodl,w,c
  3132  00F98E  2634               	addwf	??_main+2,f,c
  3133  00F990  50F4               	movf	prodh,w,c
  3134  00F992  2235               	addwfc	??_main+3,f,c
  3135  00F994  5001               	movf	?___wmul,w,c
  3136  00F996  2634               	addwf	??_main+2,f,c
  3137  00F998  5002               	movf	?___wmul+1,w,c
  3138  00F99A  2235               	addwfc	??_main+3,f,c
  3139  00F99C  C061  F038         	movff	_time+2,??_main+6
  3140  00F9A0  3A38               	swapf	??_main+6,f,c
  3141  00F9A2  0E0F               	movlw	15
  3142  00F9A4  1638               	andwf	??_main+6,f,c
  3143  00F9A6  0E0F               	movlw	15
  3144  00F9A8  1638               	andwf	??_main+6,f,c
  3145  00F9AA  5038               	movf	??_main+6,w,c
  3146  00F9AC  0D0A               	mullw	10
  3147  00F9AE  50F3               	movf	prodl,w,c
  3148  00F9B0  2434               	addwf	??_main+2,w,c
  3149  00F9B2  6E5B               	movwf	main@prevSoupTime,c
  3150  00F9B4  50F4               	movf	prodh,w,c
  3151  00F9B6  2035               	addwfc	??_main+3,w,c
  3152  00F9B8  6E5C               	movwf	main@prevSoupTime+1,c
  3153                           
  3154                           ;main.c: 361: labelState = 0;
  3155  00F9BA  0E00               	movlw	0
  3156  00F9BC  6E50               	movwf	main@labelState+1,c
  3157  00F9BE  0E00               	movlw	0
  3158  00F9C0  6E4F               	movwf	main@labelState,c
  3159                           
  3160                           ;main.c: 362: if (timePassed(prevSoupLoad) > 9) {soupSort = 0;}
  3161  00F9C2  C03D  F007         	movff	main@prevSoupLoad,timePassed@start
  3162  00F9C6  C03E  F008         	movff	main@prevSoupLoad+1,timePassed@start+1
  3163  00F9CA  ECA6  F072         	call	_timePassed	;wreg free
  3164  00F9CE  BE08               	btfsc	?_timePassed+1,7,c
  3165  00F9D0  EF65  F076         	goto	l3319
  3166  00F9D4  5008               	movf	?_timePassed+1,w,c
  3167  00F9D6  E105               	bnz	u3190
  3168  00F9D8  0E0A               	movlw	10
  3169  00F9DA  5C07               	subwf	?_timePassed,w,c
  3170  00F9DC  A0D8               	btfss	status,0,c
  3171  00F9DE  EF65  F076         	goto	l3319
  3172  00F9E2                     u3190:
  3173  00F9E2                     l3747:
  3174  00F9E2  0E00               	movlw	0
  3175  00F9E4  6E4A               	movwf	main@soupSort+1,c
  3176  00F9E6  0E00               	movlw	0
  3177  00F9E8  6E49               	movwf	main@soupSort,c
  3178                           
  3179                           ;main.c: 363: }
  3180                           ;main.c: 364: }
  3181  00F9EA  EF65  F076         	goto	l3319
  3182  00F9EE                     l3749:
  3183                           
  3184                           ;main.c: 365: else{
  3185                           ;main.c: 367: S1mode = 3;
  3186  00F9EE  0E00               	movlw	0
  3187  00F9F0  6E5E               	movwf	main@S1mode+1,c
  3188  00F9F2  0E03               	movlw	3
  3189  00F9F4  6E5D               	movwf	main@S1mode,c
  3190                           
  3191                           ;main.c: 368: updateS1(S1mode);
  3192  00F9F6  C05D  F030         	movff	main@S1mode,updateS1@mode
  3193  00F9FA  C05E  F031         	movff	main@S1mode+1,updateS1@mode+1
  3194  00F9FE  EC5E  F073         	call	_updateS1	;wreg free
  3195                           
  3196                           ;main.c: 369: }
  3197                           ;main.c: 371: }
  3198  00FA02  EF65  F076         	goto	l3319
  3199  00FA06                     l3753:
  3200                           
  3201                           ;main.c: 372: else if(standby == 4){
  3202  00FA06  0E04               	movlw	4
  3203  00FA08  1855               	xorwf	main@standby,w,c
  3204  00FA0A  1056               	iorwf	main@standby+1,w,c
  3205  00FA0C  B4D8               	btfsc	status,2,c
  3206  00FA0E  D114               	goto	l3807
  3207  00FA10  D126               	goto	l3809
  3208  00FA12                     l3757:
  3209                           
  3210                           ;main.c: 376: S1off();
  3211  00FA12  EC0F  F070         	call	_S1off	;wreg free
  3212                           
  3213                           ;main.c: 377: S2off();
  3214  00FA16  EC6F  F070         	call	_S2off	;wreg free
  3215                           
  3216                           ;main.c: 378: if(sodaLoad){
  3217  00FA1A  5045               	movf	main@sodaLoad,w,c
  3218  00FA1C  1046               	iorwf	main@sodaLoad+1,w,c
  3219  00FA1E  B4D8               	btfsc	status,2,c
  3220  00FA20  D04A               	goto	l3765
  3221                           
  3222                           ;main.c: 379: prevSodaTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  3223  00FA22  C061  F032         	movff	_time+2,??_main
  3224  00FA26  0E0F               	movlw	15
  3225  00FA28  1632               	andwf	??_main,f,c
  3226  00FA2A  5032               	movf	??_main,w,c
  3227  00FA2C  6E01               	movwf	___wmul@multiplier,c
  3228  00FA2E  6A02               	clrf	___wmul@multiplier+1,c
  3229  00FA30  0E0E               	movlw	14
  3230  00FA32  6E04               	movwf	___wmul@multiplicand+1,c
  3231  00FA34  0E10               	movlw	16
  3232  00FA36  6E03               	movwf	___wmul@multiplicand,c
  3233  00FA38  EC5E  F06F         	call	___wmul	;wreg free
  3234  00FA3C  C05F  F033         	movff	_time,??_main+1
  3235  00FA40  3A33               	swapf	??_main+1,f,c
  3236  00FA42  0E0F               	movlw	15
  3237  00FA44  1633               	andwf	??_main+1,f,c
  3238  00FA46  0E0F               	movlw	15
  3239  00FA48  1633               	andwf	??_main+1,f,c
  3240  00FA4A  5033               	movf	??_main+1,w,c
  3241  00FA4C  0D0A               	mullw	10
  3242  00FA4E  505F               	movf	_time,w,c
  3243  00FA50  0B0F               	andlw	15
  3244  00FA52  6E34               	movwf	(??_main+2)& (0+255),c
  3245  00FA54  6A35               	clrf	(??_main+3)& (0+255),c
  3246  00FA56  50F3               	movf	prodl,w,c
  3247  00FA58  2634               	addwf	??_main+2,f,c
  3248  00FA5A  50F4               	movf	prodh,w,c
  3249  00FA5C  2235               	addwfc	??_main+3,f,c
  3250  00FA5E  C060  F036         	movff	_time+1,??_main+4
  3251  00FA62  0E0F               	movlw	15
  3252  00FA64  1636               	andwf	??_main+4,f,c
  3253  00FA66  5036               	movf	??_main+4,w,c
  3254  00FA68  0D3C               	mullw	60
  3255  00FA6A  50F3               	movf	prodl,w,c
  3256  00FA6C  2634               	addwf	??_main+2,f,c
  3257  00FA6E  50F4               	movf	prodh,w,c
  3258  00FA70  2235               	addwfc	??_main+3,f,c
  3259  00FA72  C060  F037         	movff	_time+1,??_main+5
  3260  00FA76  3A37               	swapf	??_main+5,f,c
  3261  00FA78  0E0F               	movlw	15
  3262  00FA7A  1637               	andwf	??_main+5,f,c
  3263  00FA7C  0E0F               	movlw	15
  3264  00FA7E  1637               	andwf	??_main+5,f,c
  3265  00FA80  5037               	movf	??_main+5,w,c
  3266  00FA82  0D0A               	mullw	10
  3267  00FA84  50F3               	movf	prodl,w,c
  3268  00FA86  2634               	addwf	??_main+2,f,c
  3269  00FA88  50F4               	movf	prodh,w,c
  3270  00FA8A  2235               	addwfc	??_main+3,f,c
  3271  00FA8C  5001               	movf	?___wmul,w,c
  3272  00FA8E  2634               	addwf	??_main+2,f,c
  3273  00FA90  5002               	movf	?___wmul+1,w,c
  3274  00FA92  2235               	addwfc	??_main+3,f,c
  3275  00FA94  C061  F038         	movff	_time+2,??_main+6
  3276  00FA98  3A38               	swapf	??_main+6,f,c
  3277  00FA9A  0E0F               	movlw	15
  3278  00FA9C  1638               	andwf	??_main+6,f,c
  3279  00FA9E  0E0F               	movlw	15
  3280  00FAA0  1638               	andwf	??_main+6,f,c
  3281  00FAA2  5038               	movf	??_main+6,w,c
  3282  00FAA4  0D0A               	mullw	10
  3283  00FAA6  50F3               	movf	prodl,w,c
  3284  00FAA8  2434               	addwf	??_main+2,w,c
  3285  00FAAA  6E53               	movwf	main@prevSodaTime,c
  3286  00FAAC  50F4               	movf	prodh,w,c
  3287  00FAAE  2035               	addwfc	??_main+3,w,c
  3288  00FAB0  6E54               	movwf	main@prevSodaTime+1,c
  3289                           
  3290                           ;main.c: 380: sodaState ++;
  3291  00FAB2  4A43               	infsnz	main@sodaState,f,c
  3292  00FAB4  2A44               	incf	main@sodaState+1,f,c
  3293  00FAB6                     l3765:
  3294                           
  3295                           ;main.c: 383: S2off();
  3296  00FAB6  EC6F  F070         	call	_S2off	;wreg free
  3297                           
  3298                           ;main.c: 384: if(timePassed(prevSodaTime) < 3){
  3299  00FABA  C053  F007         	movff	main@prevSodaTime,timePassed@start
  3300  00FABE  C054  F008         	movff	main@prevSodaTime+1,timePassed@start+1
  3301  00FAC2  ECA6  F072         	call	_timePassed	;wreg free
  3302  00FAC6  BE08               	btfsc	?_timePassed+1,7,c
  3303  00FAC8  D006               	goto	l3769
  3304  00FACA  5008               	movf	?_timePassed+1,w,c
  3305  00FACC  E107               	bnz	l3771
  3306  00FACE  0E03               	movlw	3
  3307  00FAD0  5C07               	subwf	?_timePassed,w,c
  3308  00FAD2  B0D8               	btfsc	status,0,c
  3309  00FAD4  D003               	goto	l3771
  3310  00FAD6                     l3769:
  3311                           
  3312                           ;main.c: 385: S1backward();
  3313  00FAD6  ECCF  F06F         	call	_S1backward	;wreg free
  3314                           
  3315                           ;main.c: 386: }
  3316  00FADA  D072               	goto	l3785
  3317  00FADC                     l3771:
  3318                           
  3319                           ;main.c: 387: else if(timePassed(prevSodaTime) < 4){
  3320  00FADC  C053  F007         	movff	main@prevSodaTime,timePassed@start
  3321  00FAE0  C054  F008         	movff	main@prevSodaTime+1,timePassed@start+1
  3322  00FAE4  ECA6  F072         	call	_timePassed	;wreg free
  3323  00FAE8  BE08               	btfsc	?_timePassed+1,7,c
  3324  00FAEA  D006               	goto	l3773
  3325  00FAEC  5008               	movf	?_timePassed+1,w,c
  3326  00FAEE  E10D               	bnz	l3777
  3327  00FAF0  0E04               	movlw	4
  3328  00FAF2  5C07               	subwf	?_timePassed,w,c
  3329  00FAF4  B0D8               	btfsc	status,0,c
  3330  00FAF6  D009               	goto	l3777
  3331  00FAF8                     l3773:
  3332                           
  3333                           ;main.c: 388: S1off();
  3334  00FAF8  EC0F  F070         	call	_S1off	;wreg free
  3335                           
  3336                           ;main.c: 389: readADC(3);
  3337  00FAFC  0E03               	movlw	3
  3338  00FAFE  EC4C  F06F         	call	_readADC
  3339                           
  3340                           ;main.c: 390: tabState = ADRESH;
  3341  00FB02  CFC4 F047          	movff	4036,main@tabState	;volatile
  3342  00FB06  6A48               	clrf	main@tabState+1,c
  3343                           
  3344                           ;main.c: 392: }
  3345  00FB08  D05B               	goto	l3785
  3346  00FB0A                     l3777:
  3347                           
  3348                           ;main.c: 393: else if(timePassed(prevSodaTime) < 7){
  3349  00FB0A  C053  F007         	movff	main@prevSodaTime,timePassed@start
  3350  00FB0E  C054  F008         	movff	main@prevSodaTime+1,timePassed@start+1
  3351  00FB12  ECA6  F072         	call	_timePassed	;wreg free
  3352  00FB16  BE08               	btfsc	?_timePassed+1,7,c
  3353  00FB18  D006               	goto	l3779
  3354  00FB1A  5008               	movf	?_timePassed+1,w,c
  3355  00FB1C  E107               	bnz	l3781
  3356  00FB1E  0E07               	movlw	7
  3357  00FB20  5C07               	subwf	?_timePassed,w,c
  3358  00FB22  B0D8               	btfsc	status,0,c
  3359  00FB24  D003               	goto	l3781
  3360  00FB26                     l3779:
  3361                           
  3362                           ;main.c: 394: S1forward();
  3363  00FB26  ECEF  F06F         	call	_S1forward	;wreg free
  3364                           
  3365                           ;main.c: 395: }
  3366  00FB2A  D04A               	goto	l3785
  3367  00FB2C                     l3781:
  3368                           
  3369                           ;main.c: 396: else{
  3370                           ;main.c: 397: prevSodaTime = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] 
      +                          & 0x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  3371  00FB2C  C061  F032         	movff	_time+2,??_main
  3372  00FB30  0E0F               	movlw	15
  3373  00FB32  1632               	andwf	??_main,f,c
  3374  00FB34  5032               	movf	??_main,w,c
  3375  00FB36  6E01               	movwf	___wmul@multiplier,c
  3376  00FB38  6A02               	clrf	___wmul@multiplier+1,c
  3377  00FB3A  0E0E               	movlw	14
  3378  00FB3C  6E04               	movwf	___wmul@multiplicand+1,c
  3379  00FB3E  0E10               	movlw	16
  3380  00FB40  6E03               	movwf	___wmul@multiplicand,c
  3381  00FB42  EC5E  F06F         	call	___wmul	;wreg free
  3382  00FB46  C05F  F033         	movff	_time,??_main+1
  3383  00FB4A  3A33               	swapf	??_main+1,f,c
  3384  00FB4C  0E0F               	movlw	15
  3385  00FB4E  1633               	andwf	??_main+1,f,c
  3386  00FB50  0E0F               	movlw	15
  3387  00FB52  1633               	andwf	??_main+1,f,c
  3388  00FB54  5033               	movf	??_main+1,w,c
  3389  00FB56  0D0A               	mullw	10
  3390  00FB58  505F               	movf	_time,w,c
  3391  00FB5A  0B0F               	andlw	15
  3392  00FB5C  6E34               	movwf	(??_main+2)& (0+255),c
  3393  00FB5E  6A35               	clrf	(??_main+3)& (0+255),c
  3394  00FB60  50F3               	movf	prodl,w,c
  3395  00FB62  2634               	addwf	??_main+2,f,c
  3396  00FB64  50F4               	movf	prodh,w,c
  3397  00FB66  2235               	addwfc	??_main+3,f,c
  3398  00FB68  C060  F036         	movff	_time+1,??_main+4
  3399  00FB6C  0E0F               	movlw	15
  3400  00FB6E  1636               	andwf	??_main+4,f,c
  3401  00FB70  5036               	movf	??_main+4,w,c
  3402  00FB72  0D3C               	mullw	60
  3403  00FB74  50F3               	movf	prodl,w,c
  3404  00FB76  2634               	addwf	??_main+2,f,c
  3405  00FB78  50F4               	movf	prodh,w,c
  3406  00FB7A  2235               	addwfc	??_main+3,f,c
  3407  00FB7C  C060  F037         	movff	_time+1,??_main+5
  3408  00FB80  3A37               	swapf	??_main+5,f,c
  3409  00FB82  0E0F               	movlw	15
  3410  00FB84  1637               	andwf	??_main+5,f,c
  3411  00FB86  0E0F               	movlw	15
  3412  00FB88  1637               	andwf	??_main+5,f,c
  3413  00FB8A  5037               	movf	??_main+5,w,c
  3414  00FB8C  0D0A               	mullw	10
  3415  00FB8E  50F3               	movf	prodl,w,c
  3416  00FB90  2634               	addwf	??_main+2,f,c
  3417  00FB92  50F4               	movf	prodh,w,c
  3418  00FB94  2235               	addwfc	??_main+3,f,c
  3419  00FB96  5001               	movf	?___wmul,w,c
  3420  00FB98  2634               	addwf	??_main+2,f,c
  3421  00FB9A  5002               	movf	?___wmul+1,w,c
  3422  00FB9C  2235               	addwfc	??_main+3,f,c
  3423  00FB9E  C061  F038         	movff	_time+2,??_main+6
  3424  00FBA2  3A38               	swapf	??_main+6,f,c
  3425  00FBA4  0E0F               	movlw	15
  3426  00FBA6  1638               	andwf	??_main+6,f,c
  3427  00FBA8  0E0F               	movlw	15
  3428  00FBAA  1638               	andwf	??_main+6,f,c
  3429  00FBAC  5038               	movf	??_main+6,w,c
  3430  00FBAE  0D0A               	mullw	10
  3431  00FBB0  50F3               	movf	prodl,w,c
  3432  00FBB2  2434               	addwf	??_main+2,w,c
  3433  00FBB4  6E53               	movwf	main@prevSodaTime,c
  3434  00FBB6  50F4               	movf	prodh,w,c
  3435  00FBB8  2035               	addwfc	??_main+3,w,c
  3436  00FBBA  6E54               	movwf	main@prevSodaTime+1,c
  3437                           
  3438                           ;main.c: 398: sodaState ++;
  3439  00FBBC  4A43               	infsnz	main@sodaState,f,c
  3440  00FBBE  2A44               	incf	main@sodaState+1,f,c
  3441  00FBC0                     l3785:
  3442                           
  3443                           ;main.c: 401: S1off();
  3444  00FBC0  EC0F  F070         	call	_S1off	;wreg free
  3445                           
  3446                           ;main.c: 402: if(timePassed(prevSodaTime) < 3){
  3447  00FBC4  C053  F007         	movff	main@prevSodaTime,timePassed@start
  3448  00FBC8  C054  F008         	movff	main@prevSodaTime+1,timePassed@start+1
  3449  00FBCC  ECA6  F072         	call	_timePassed	;wreg free
  3450  00FBD0  BE08               	btfsc	?_timePassed+1,7,c
  3451  00FBD2  D006               	goto	l3789
  3452  00FBD4  5008               	movf	?_timePassed+1,w,c
  3453  00FBD6  E10E               	bnz	l3795
  3454  00FBD8  0E03               	movlw	3
  3455  00FBDA  5C07               	subwf	?_timePassed,w,c
  3456  00FBDC  B0D8               	btfsc	status,0,c
  3457  00FBDE  D00A               	goto	l3795
  3458  00FBE0                     l3789:
  3459                           
  3460                           ;main.c: 403: if(tabState){S2forward();}
  3461  00FBE0  5047               	movf	main@tabState,w,c
  3462  00FBE2  1048               	iorwf	main@tabState+1,w,c
  3463  00FBE4  B4D8               	btfsc	status,2,c
  3464  00FBE6  D003               	goto	l3793
  3465  00FBE8  EC4F  F070         	call	_S2forward	;wreg free
  3466  00FBEC  D01F               	goto	l221
  3467  00FBEE                     l3793:
  3468                           
  3469                           ;main.c: 404: else{S2backward();}
  3470  00FBEE  EC2F  F070         	call	_S2backward	;wreg free
  3471                           
  3472                           ;main.c: 405: }
  3473  00FBF2  D01C               	goto	l221
  3474  00FBF4                     l3795:
  3475                           
  3476                           ;main.c: 406: else if(timePassed(prevSodaTime) < 6){
  3477  00FBF4  C053  F007         	movff	main@prevSodaTime,timePassed@start
  3478  00FBF8  C054  F008         	movff	main@prevSodaTime+1,timePassed@start+1
  3479  00FBFC  ECA6  F072         	call	_timePassed	;wreg free
  3480  00FC00  BE08               	btfsc	?_timePassed+1,7,c
  3481  00FC02  D006               	goto	l3797
  3482  00FC04  5008               	movf	?_timePassed+1,w,c
  3483  00FC06  E10E               	bnz	l3803
  3484  00FC08  0E06               	movlw	6
  3485  00FC0A  5C07               	subwf	?_timePassed,w,c
  3486  00FC0C  B0D8               	btfsc	status,0,c
  3487  00FC0E  D00A               	goto	l3803
  3488  00FC10                     l3797:
  3489                           
  3490                           ;main.c: 407: if(tabState){S2backward();}
  3491  00FC10  5047               	movf	main@tabState,w,c
  3492  00FC12  1048               	iorwf	main@tabState+1,w,c
  3493  00FC14  B4D8               	btfsc	status,2,c
  3494  00FC16  D003               	goto	l3801
  3495  00FC18  EC2F  F070         	call	_S2backward	;wreg free
  3496  00FC1C  D007               	goto	l221
  3497  00FC1E                     l3801:
  3498                           
  3499                           ;main.c: 408: else{S2forward();}
  3500  00FC1E  EC4F  F070         	call	_S2forward	;wreg free
  3501                           
  3502                           ;main.c: 409: }
  3503  00FC22  D004               	goto	l221
  3504  00FC24                     l3803:
  3505                           
  3506                           ;main.c: 410: else{
  3507                           ;main.c: 411: sodaState = 0;
  3508  00FC24  0E00               	movlw	0
  3509  00FC26  6E44               	movwf	main@sodaState+1,c
  3510  00FC28  0E00               	movlw	0
  3511  00FC2A  6E43               	movwf	main@sodaState,c
  3512  00FC2C                     l221:
  3513                           
  3514                           ;main.c: 414: sodaState = 0;
  3515  00FC2C  0E00               	movlw	0
  3516  00FC2E  6E44               	movwf	main@sodaState+1,c
  3517  00FC30  0E00               	movlw	0
  3518  00FC32  6E43               	movwf	main@sodaState,c
  3519                           
  3520                           ;main.c: 416: }
  3521                           
  3522                           ;main.c: 415: break;
  3523  00FC34  EF65  F076         	goto	l3319
  3524  00FC38                     l3807:
  3525  00FC38  C043  F032         	movff	main@sodaState,??_main
  3526  00FC3C  C044  F033         	movff	main@sodaState+1,??_main+1
  3527                           
  3528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3529                           ; Switch size 1, requested type "space"
  3530                           ; Number of cases is 1, Range of values is 0 to 0
  3531                           ; switch strategies available:
  3532                           ; Name         Instructions Cycles
  3533                           ; simple_byte            4     3 (average)
  3534                           ;	Chosen strategy is simple_byte
  3535  00FC40  5033               	movf	??_main+1,w,c
  3536  00FC42  0A00               	xorlw	0	; case 0
  3537  00FC44  A4D8               	btfss	status,2,c
  3538  00FC46  D7F2               	goto	l221
  3539                           
  3540                           ; Switch size 1, requested type "space"
  3541                           ; Number of cases is 3, Range of values is 0 to 2
  3542                           ; switch strategies available:
  3543                           ; Name         Instructions Cycles
  3544                           ; simple_byte           10     6 (average)
  3545                           ;	Chosen strategy is simple_byte
  3546  00FC48  5032               	movf	??_main,w,c
  3547  00FC4A  0A00               	xorlw	0	; case 0
  3548  00FC4C  B4D8               	btfsc	status,2,c
  3549  00FC4E  D6E1               	goto	l3757
  3550  00FC50  0A01               	xorlw	1	; case 1
  3551  00FC52  B4D8               	btfsc	status,2,c
  3552  00FC54  D730               	goto	l3765
  3553  00FC56  0A03               	xorlw	3	; case 2
  3554  00FC58  B4D8               	btfsc	status,2,c
  3555  00FC5A  D7B2               	goto	l3785
  3556  00FC5C  D7E7               	goto	l221
  3557  00FC5E                     l3809:
  3558                           
  3559                           ;main.c: 419: else{
  3560                           ;main.c: 420: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  3561  00FC5E  0E01               	movlw	1
  3562  00FC60  EC09  F06F         	call	_lcdInst
  3563  00FC64  0E68               	movlw	104
  3564  00FC66  6E32               	movwf	??_main& (0+255),c
  3565  00FC68  0EE4               	movlw	228
  3566  00FC6A                     u3617:
  3567  00FC6A  2EE8               	decfsz	wreg,f,c
  3568  00FC6C  D7FE               	bra	u3617
  3569  00FC6E  2E32               	decfsz	??_main& (0+255),f,c
  3570  00FC70  D7FC               	bra	u3617
  3571  00FC72  D000               	nop2	
  3572                           
  3573                           ;main.c: 421: printf("sorting");
  3574  00FC74  0EE8               	movlw	low STR_30
  3575  00FC76  6E17               	movwf	printf@f,c
  3576  00FC78  0EFF               	movlw	high STR_30
  3577  00FC7A  6E18               	movwf	printf@f+1,c
  3578  00FC7C  EC16  F074         	call	_printf	;wreg free
  3579                           
  3580                           ;main.c: 422: keypress = (0);
  3581  00FC80  0E00               	movlw	0
  3582  00FC82  6E70               	movwf	_keypress,c	;volatile
  3583                           
  3584                           ;main.c: 423: keyinterrupt();
  3585  00FC84  EC28  F06F         	call	_keyinterrupt	;wreg free
  3586                           
  3587                           ;main.c: 424: if (keypress != (0)) {
  3588  00FC88  5070               	movf	_keypress,w,c	;volatile
  3589  00FC8A  B4D8               	btfsc	status,2,c
  3590  00FC8C  D004               	goto	l3823
  3591                           
  3592                           ;main.c: 425: standby = 1;
  3593  00FC8E  0E00               	movlw	0
  3594  00FC90  6E56               	movwf	main@standby+1,c
  3595  00FC92  0E01               	movlw	1
  3596  00FC94  6E55               	movwf	main@standby,c
  3597  00FC96                     l3823:
  3598                           
  3599                           ;main.c: 426: }
  3600                           ;main.c: 440: if(timePassed(canCheck) > 10){
  3601  00FC96  C041  F007         	movff	main@canCheck,timePassed@start
  3602  00FC9A  C042  F008         	movff	main@canCheck+1,timePassed@start+1
  3603  00FC9E  ECA6  F072         	call	_timePassed	;wreg free
  3604  00FCA2  BE08               	btfsc	?_timePassed+1,7,c
  3605  00FCA4  D066               	goto	l3839
  3606  00FCA6  5008               	movf	?_timePassed+1,w,c
  3607  00FCA8  E104               	bnz	u3300
  3608  00FCAA  0E0B               	movlw	11
  3609  00FCAC  5C07               	subwf	?_timePassed,w,c
  3610  00FCAE  A0D8               	btfss	status,0,c
  3611  00FCB0  D060               	goto	l3839
  3612  00FCB2                     u3300:
  3613                           
  3614                           ;main.c: 441: readADC(5);
  3615  00FCB2  0E05               	movlw	5
  3616  00FCB4  EC4C  F06F         	call	_readADC
  3617                           
  3618                           ;main.c: 442: soupLoad = ADRESH;
  3619  00FCB8  CFC4 F04B          	movff	4036,main@soupLoad	;volatile
  3620  00FCBC  6A4C               	clrf	main@soupLoad+1,c
  3621                           
  3622                           ;main.c: 443: readADC(2);
  3623  00FCBE  0E02               	movlw	2
  3624  00FCC0  EC4C  F06F         	call	_readADC
  3625                           
  3626                           ;main.c: 444: sodaLoad = ADRESH;
  3627  00FCC4  CFC4 F045          	movff	4036,main@sodaLoad	;volatile
  3628  00FCC8  6A46               	clrf	main@sodaLoad+1,c
  3629                           
  3630                           ;main.c: 445: if (!soupLoad & !sodaLoad){
  3631  00FCCA  504B               	movf	main@soupLoad,w,c
  3632  00FCCC  104C               	iorwf	main@soupLoad+1,w,c
  3633  00FCCE  A4D8               	btfss	status,2,c
  3634  00FCD0  D008               	goto	l3837
  3635  00FCD2  5045               	movf	main@sodaLoad,w,c
  3636  00FCD4  1046               	iorwf	main@sodaLoad+1,w,c
  3637  00FCD6  A4D8               	btfss	status,2,c
  3638  00FCD8  D004               	goto	l3837
  3639                           
  3640                           ;main.c: 446: standby = 1;
  3641  00FCDA  0E00               	movlw	0
  3642  00FCDC  6E56               	movwf	main@standby+1,c
  3643  00FCDE  0E01               	movlw	1
  3644  00FCE0  6E55               	movwf	main@standby,c
  3645  00FCE2                     l3837:
  3646                           
  3647                           ;main.c: 447: }
  3648                           ;main.c: 448: canCheck = ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x
      +                          0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10);
  3649  00FCE2  C061  F032         	movff	_time+2,??_main
  3650  00FCE6  0E0F               	movlw	15
  3651  00FCE8  1632               	andwf	??_main,f,c
  3652  00FCEA  5032               	movf	??_main,w,c
  3653  00FCEC  6E01               	movwf	___wmul@multiplier,c
  3654  00FCEE  6A02               	clrf	___wmul@multiplier+1,c
  3655  00FCF0  0E0E               	movlw	14
  3656  00FCF2  6E04               	movwf	___wmul@multiplicand+1,c
  3657  00FCF4  0E10               	movlw	16
  3658  00FCF6  6E03               	movwf	___wmul@multiplicand,c
  3659  00FCF8  EC5E  F06F         	call	___wmul	;wreg free
  3660  00FCFC  C05F  F033         	movff	_time,??_main+1
  3661  00FD00  3A33               	swapf	??_main+1,f,c
  3662  00FD02  0E0F               	movlw	15
  3663  00FD04  1633               	andwf	??_main+1,f,c
  3664  00FD06  0E0F               	movlw	15
  3665  00FD08  1633               	andwf	??_main+1,f,c
  3666  00FD0A  5033               	movf	??_main+1,w,c
  3667  00FD0C  0D0A               	mullw	10
  3668  00FD0E  505F               	movf	_time,w,c
  3669  00FD10  0B0F               	andlw	15
  3670  00FD12  6E34               	movwf	(??_main+2)& (0+255),c
  3671  00FD14  6A35               	clrf	(??_main+3)& (0+255),c
  3672  00FD16  50F3               	movf	prodl,w,c
  3673  00FD18  2634               	addwf	??_main+2,f,c
  3674  00FD1A  50F4               	movf	prodh,w,c
  3675  00FD1C  2235               	addwfc	??_main+3,f,c
  3676  00FD1E  C060  F036         	movff	_time+1,??_main+4
  3677  00FD22  0E0F               	movlw	15
  3678  00FD24  1636               	andwf	??_main+4,f,c
  3679  00FD26  5036               	movf	??_main+4,w,c
  3680  00FD28  0D3C               	mullw	60
  3681  00FD2A  50F3               	movf	prodl,w,c
  3682  00FD2C  2634               	addwf	??_main+2,f,c
  3683  00FD2E  50F4               	movf	prodh,w,c
  3684  00FD30  2235               	addwfc	??_main+3,f,c
  3685  00FD32  C060  F037         	movff	_time+1,??_main+5
  3686  00FD36  3A37               	swapf	??_main+5,f,c
  3687  00FD38  0E0F               	movlw	15
  3688  00FD3A  1637               	andwf	??_main+5,f,c
  3689  00FD3C  0E0F               	movlw	15
  3690  00FD3E  1637               	andwf	??_main+5,f,c
  3691  00FD40  5037               	movf	??_main+5,w,c
  3692  00FD42  0D0A               	mullw	10
  3693  00FD44  50F3               	movf	prodl,w,c
  3694  00FD46  2634               	addwf	??_main+2,f,c
  3695  00FD48  50F4               	movf	prodh,w,c
  3696  00FD4A  2235               	addwfc	??_main+3,f,c
  3697  00FD4C  5001               	movf	?___wmul,w,c
  3698  00FD4E  2634               	addwf	??_main+2,f,c
  3699  00FD50  5002               	movf	?___wmul+1,w,c
  3700  00FD52  2235               	addwfc	??_main+3,f,c
  3701  00FD54  C061  F038         	movff	_time+2,??_main+6
  3702  00FD58  3A38               	swapf	??_main+6,f,c
  3703  00FD5A  0E0F               	movlw	15
  3704  00FD5C  1638               	andwf	??_main+6,f,c
  3705  00FD5E  0E0F               	movlw	15
  3706  00FD60  1638               	andwf	??_main+6,f,c
  3707  00FD62  5038               	movf	??_main+6,w,c
  3708  00FD64  0D0A               	mullw	10
  3709  00FD66  50F3               	movf	prodl,w,c
  3710  00FD68  2434               	addwf	??_main+2,w,c
  3711  00FD6A  6E41               	movwf	main@canCheck,c
  3712  00FD6C  50F4               	movf	prodh,w,c
  3713  00FD6E  2035               	addwfc	??_main+3,w,c
  3714  00FD70  6E42               	movwf	main@canCheck+1,c
  3715  00FD72                     l3839:
  3716                           
  3717                           ;main.c: 449: }
  3718                           ;main.c: 452: if(standby==1){
  3719  00FD72  0455               	decf	main@standby,w,c
  3720  00FD74  1056               	iorwf	main@standby+1,w,c
  3721  00FD76  A4D8               	btfss	status,2,c
  3722  00FD78  EF65  F076         	goto	l3319
  3723                           
  3724                           ;main.c: 453: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  3725  00FD7C  0E01               	movlw	1
  3726  00FD7E  EC09  F06F         	call	_lcdInst
  3727  00FD82  0E68               	movlw	104
  3728  00FD84  6E32               	movwf	??_main& (0+255),c
  3729  00FD86  0EE4               	movlw	228
  3730  00FD88                     u3627:
  3731  00FD88  2EE8               	decfsz	wreg,f,c
  3732  00FD8A  D7FE               	bra	u3627
  3733  00FD8C  2E32               	decfsz	??_main& (0+255),f,c
  3734  00FD8E  D7FC               	bra	u3627
  3735  00FD90  D000               	nop2	
  3736                           
  3737                           ;main.c: 454: printf("Finished sorting! ");
  3738  00FD92  0E3F               	movlw	low STR_31
  3739  00FD94  6E17               	movwf	printf@f,c
  3740  00FD96  0EFE               	movlw	high STR_31
  3741  00FD98  6E18               	movwf	printf@f+1,c
  3742  00FD9A  EC16  F074         	call	_printf	;wreg free
  3743                           
  3744                           ;main.c: 455: _delay((unsigned long)((500)*(32000000/4000.0)));
  3745  00FD9E  0E15               	movlw	21
  3746  00FDA0  6E33               	movwf	(??_main+1)& (0+255),c
  3747  00FDA2  0E4B               	movlw	75
  3748  00FDA4  6E32               	movwf	??_main& (0+255),c
  3749  00FDA6  0EBE               	movlw	190
  3750  00FDA8                     u3637:
  3751  00FDA8  2EE8               	decfsz	wreg,f,c
  3752  00FDAA  D7FE               	bra	u3637
  3753  00FDAC  2E32               	decfsz	??_main& (0+255),f,c
  3754  00FDAE  D7FC               	bra	u3637
  3755  00FDB0  2E33               	decfsz	(??_main+1)& (0+255),f,c
  3756  00FDB2  D7FA               	bra	u3637
  3757  00FDB4  D000               	nop2	
  3758                           
  3759                           ;main.c: 456: PWM1off();
  3760  00FDB6  ECFA  F06E         	call	_PWM1off	;wreg free
  3761                           
  3762                           ;main.c: 457: dc = 0;
  3763  00FDBA  0E00               	movlw	0
  3764  00FDBC  6E3C               	movwf	main@dc+1,c
  3765  00FDBE  0E00               	movlw	0
  3766  00FDC0  6E3B               	movwf	main@dc,c
  3767                           
  3768                           ;main.c: 458: updateEEPROM(timePassed(startTime));
  3769  00FDC2  C04D  F007         	movff	main@startTime,timePassed@start
  3770  00FDC6  C04E  F008         	movff	main@startTime+1,timePassed@start+1
  3771  00FDCA  ECA6  F072         	call	_timePassed	;wreg free
  3772  00FDCE  C007  F012         	movff	?_timePassed,updateEEPROM@time
  3773  00FDD2  C008  F013         	movff	?_timePassed+1,updateEEPROM@time+1
  3774  00FDD6  EC98  F06F         	call	_updateEEPROM	;wreg free
  3775  00FDDA  EF65  F076         	goto	l3319
  3776  00FDDE                     __end_of_main:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           prodh	equ	0xFF4
  3780                           prodl	equ	0xFF3
  3781                           postinc0	equ	0xFEE
  3782                           wreg	equ	0xFE8
  3783                           status	equ	0xFD8
  3784                           
  3785 ;; *************** function _updateTime *****************
  3786 ;; Defined at:
  3787 ;;		line 89 in file "I2C.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;		None
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  j               1    3[COMRAM] unsigned char 
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3796 ;; Tracked objects:
  3797 ;;		On entry : 0/0
  3798 ;;		On exit  : 0/0
  3799 ;;		Unchanged: 0/0
  3800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;Total ram usage:        1 bytes
  3806 ;; Hardware stack levels used:    1
  3807 ;; Hardware stack levels required when called:    2
  3808 ;; This function calls:
  3809 ;;		_I2C_Master_Read
  3810 ;;		_I2C_Master_Start
  3811 ;;		_I2C_Master_Stop
  3812 ;;		_I2C_Master_Write
  3813 ;; This function is called by:
  3814 ;;		_main
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text1
  3819  00E3F0                     __ptext1:
  3820                           	opt stack 0
  3821  00E3F0                     _updateTime:
  3822                           	opt stack 28
  3823                           
  3824                           ;I2C.c: 91: I2C_Master_Start();
  3825                           
  3826                           ;incstack = 0
  3827  00E3F0  ECF2  F06E         	call	_I2C_Master_Start	;wreg free
  3828                           
  3829                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  3830  00E3F4  0E00               	movlw	0
  3831  00E3F6  6E03               	movwf	I2C_Master_Write@d+1,c
  3832  00E3F8  0ED0               	movlw	208
  3833  00E3FA  6E02               	movwf	I2C_Master_Write@d,c
  3834  00E3FC  EC04  F06F         	call	_I2C_Master_Write	;wreg free
  3835                           
  3836                           ;I2C.c: 93: I2C_Master_Write(0x00);
  3837  00E400  0E00               	movlw	0
  3838  00E402  6E03               	movwf	I2C_Master_Write@d+1,c
  3839  00E404  0E00               	movlw	0
  3840  00E406  6E02               	movwf	I2C_Master_Write@d,c
  3841  00E408  EC04  F06F         	call	_I2C_Master_Write	;wreg free
  3842                           
  3843                           ;I2C.c: 94: I2C_Master_Stop();
  3844  00E40C  ECF6  F06E         	call	_I2C_Master_Stop	;wreg free
  3845                           
  3846                           ;I2C.c: 97: I2C_Master_Start();
  3847  00E410  ECF2  F06E         	call	_I2C_Master_Start	;wreg free
  3848                           
  3849                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  3850  00E414  0E00               	movlw	0
  3851  00E416  6E03               	movwf	I2C_Master_Write@d+1,c
  3852  00E418  0ED1               	movlw	209
  3853  00E41A  6E02               	movwf	I2C_Master_Write@d,c
  3854  00E41C  EC04  F06F         	call	_I2C_Master_Write	;wreg free
  3855                           
  3856                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  3857  00E420  0E00               	movlw	0
  3858  00E422  6E04               	movwf	updateTime@j,c
  3859  00E424                     l2991:
  3860  00E424  0E05               	movlw	5
  3861  00E426  6404               	cpfsgt	updateTime@j,c
  3862  00E428  D001               	goto	l2995
  3863  00E42A  D00E               	goto	l3001
  3864  00E42C                     l2995:
  3865                           
  3866                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  3867  00E42C  5004               	movf	updateTime@j,w,c
  3868  00E42E  0D01               	mullw	1
  3869  00E430  0E5F               	movlw	low _time
  3870  00E432  24F3               	addwf	prodl,w,c
  3871  00E434  6ED9               	movwf	fsr2l,c
  3872  00E436  0E00               	movlw	high _time
  3873  00E438  20F4               	addwfc	prodh,w,c
  3874  00E43A  6EDA               	movwf	fsr2h,c
  3875  00E43C  0E01               	movlw	1
  3876  00E43E  EC71  F06F         	call	_I2C_Master_Read
  3877  00E442  6EDF               	movwf	indf2,c
  3878  00E444  2A04               	incf	updateTime@j,f,c
  3879  00E446  D7EE               	goto	l2991
  3880  00E448                     l3001:
  3881                           
  3882                           ;I2C.c: 101: }
  3883                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  3884  00E448  0E00               	movlw	0
  3885  00E44A  EC71  F06F         	call	_I2C_Master_Read
  3886  00E44E  6E65               	movwf	_time+6,c
  3887                           
  3888                           ;I2C.c: 103: I2C_Master_Stop();
  3889  00E450  ECF6  F06E         	call	_I2C_Master_Stop	;wreg free
  3890  00E454  0012               	return		;funcret
  3891  00E456                     __end_of_updateTime:
  3892                           	opt stack 0
  3893                           tblptru	equ	0xFF8
  3894                           prodh	equ	0xFF4
  3895                           prodl	equ	0xFF3
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           indf2	equ	0xFDF
  3899                           fsr2h	equ	0xFDA
  3900                           fsr2l	equ	0xFD9
  3901                           status	equ	0xFD8
  3902                           
  3903 ;; *************** function _I2C_Master_Write *****************
  3904 ;; Defined at:
  3905 ;;		line 54 in file "I2C.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;  d               2    1[COMRAM] unsigned int 
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;Total ram usage:        2 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    1
  3926 ;; This function calls:
  3927 ;;		_I2C_Master_Wait
  3928 ;; This function is called by:
  3929 ;;		_updateTime
  3930 ;;		_set_time
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text2
  3935  00DE08                     __ptext2:
  3936                           	opt stack 0
  3937  00DE08                     _I2C_Master_Write:
  3938                           	opt stack 28
  3939                           
  3940                           ;I2C.c: 56: I2C_Master_Wait();
  3941                           
  3942                           ;incstack = 0
  3943  00DE08  EC15  F06F         	call	_I2C_Master_Wait	;wreg free
  3944                           
  3945                           ;I2C.c: 57: SSPBUF = d;
  3946  00DE0C  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3947  00DE10  0012               	return		;funcret
  3948  00DE12                     __end_of_I2C_Master_Write:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           indf2	equ	0xFDF
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _I2C_Master_Stop *****************
  3961 ;; Defined at:
  3962 ;;		line 48 in file "I2C.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    1
  3983 ;; This function calls:
  3984 ;;		_I2C_Master_Wait
  3985 ;; This function is called by:
  3986 ;;		_updateTime
  3987 ;;		_set_time
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text3
  3992  00DDEC                     __ptext3:
  3993                           	opt stack 0
  3994  00DDEC                     _I2C_Master_Stop:
  3995                           	opt stack 28
  3996                           
  3997                           ;I2C.c: 50: I2C_Master_Wait();
  3998                           
  3999                           ;incstack = 0
  4000  00DDEC  EC15  F06F         	call	_I2C_Master_Wait	;wreg free
  4001                           
  4002                           ;I2C.c: 51: PEN = 1;
  4003  00DDF0  84C5               	bsf	4037,2,c	;volatile
  4004  00DDF2  0012               	return		;funcret
  4005  00DDF4                     __end_of_I2C_Master_Stop:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           indf2	equ	0xFDF
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _I2C_Master_Start *****************
  4018 ;; Defined at:
  4019 ;;		line 36 in file "I2C.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;		None
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;Total ram usage:        0 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    1
  4040 ;; This function calls:
  4041 ;;		_I2C_Master_Wait
  4042 ;; This function is called by:
  4043 ;;		_updateTime
  4044 ;;		_set_time
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text4
  4049  00DDE4                     __ptext4:
  4050                           	opt stack 0
  4051  00DDE4                     _I2C_Master_Start:
  4052                           	opt stack 28
  4053                           
  4054                           ;I2C.c: 38: I2C_Master_Wait();
  4055                           
  4056                           ;incstack = 0
  4057  00DDE4  EC15  F06F         	call	_I2C_Master_Wait	;wreg free
  4058                           
  4059                           ;I2C.c: 39: SEN = 1;
  4060  00DDE8  80C5               	bsf	4037,0,c	;volatile
  4061  00DDEA  0012               	return		;funcret
  4062  00DDEC                     __end_of_I2C_Master_Start:
  4063                           	opt stack 0
  4064                           tblptru	equ	0xFF8
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           indf2	equ	0xFDF
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _I2C_Master_Read *****************
  4075 ;; Defined at:
  4076 ;;		line 60 in file "I2C.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  a               1    wreg     unsigned char 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  a               1    1[COMRAM] unsigned char 
  4081 ;;  temp            1    2[COMRAM] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      unsigned char 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;Total ram usage:        2 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    1
  4098 ;; This function calls:
  4099 ;;		_I2C_Master_Wait
  4100 ;; This function is called by:
  4101 ;;		_updateTime
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text5
  4106  00DEE2                     __ptext5:
  4107                           	opt stack 0
  4108  00DEE2                     _I2C_Master_Read:
  4109                           	opt stack 28
  4110                           
  4111                           ;incstack = 0
  4112                           ;I2C_Master_Read@a stored from wreg
  4113  00DEE2  6E02               	movwf	I2C_Master_Read@a,c
  4114                           
  4115                           ;I2C.c: 62: unsigned char temp;
  4116                           ;I2C.c: 63: I2C_Master_Wait();
  4117  00DEE4  EC15  F06F         	call	_I2C_Master_Wait	;wreg free
  4118                           
  4119                           ;I2C.c: 64: RCEN = 1;
  4120  00DEE8  86C5               	bsf	4037,3,c	;volatile
  4121                           
  4122                           ;I2C.c: 65: I2C_Master_Wait();
  4123  00DEEA  EC15  F06F         	call	_I2C_Master_Wait	;wreg free
  4124                           
  4125                           ;I2C.c: 66: temp = SSPBUF;
  4126  00DEEE  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  4127                           
  4128                           ;I2C.c: 67: I2C_Master_Wait();
  4129  00DEF2  EC15  F06F         	call	_I2C_Master_Wait	;wreg free
  4130                           
  4131                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4132  00DEF6  5002               	movf	I2C_Master_Read@a,w,c
  4133  00DEF8  A4D8               	btfss	status,2,c
  4134  00DEFA  D002               	goto	u2160
  4135  00DEFC  8AC5               	bsf	4037,5,c	;volatile
  4136  00DEFE  D001               	goto	l2933
  4137  00DF00                     u2160:
  4138  00DF00  9AC5               	bcf	4037,5,c	;volatile
  4139  00DF02                     l2933:
  4140                           
  4141                           ;I2C.c: 69: ACKEN = 1;
  4142  00DF02  88C5               	bsf	4037,4,c	;volatile
  4143                           
  4144                           ;I2C.c: 70: return temp;
  4145  00DF04  5003               	movf	I2C_Master_Read@temp,w,c
  4146  00DF06  0012               	return	
  4147  00DF08                     __end_of_I2C_Master_Read:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           indf2	equ	0xFDF
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _I2C_Master_Wait *****************
  4160 ;; Defined at:
  4161 ;;		line 31 in file "I2C.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;Total ram usage:        1 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_I2C_Master_Start
  4185 ;;		_I2C_Master_Stop
  4186 ;;		_I2C_Master_Write
  4187 ;;		_I2C_Master_Read
  4188 ;;		_I2C_Master_RepeatedStart
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text6
  4193  00DE2A                     __ptext6:
  4194                           	opt stack 0
  4195  00DE2A                     _I2C_Master_Wait:
  4196                           	opt stack 28
  4197  00DE2A                     l290:
  4198  00DE2A  B4C7               	btfsc	4039,2,c	;volatile
  4199  00DE2C  D7FE               	goto	l290
  4200  00DE2E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4201  00DE32  0E1F               	movlw	31
  4202  00DE34  1601               	andwf	??_I2C_Master_Wait,f,c
  4203  00DE36  B4D8               	btfsc	status,2,c
  4204  00DE38  0012               	return	
  4205  00DE3A  D7F7               	goto	l290
  4206  00DE3C                     __end_of_I2C_Master_Wait:
  4207                           	opt stack 0
  4208                           tblptru	equ	0xFF8
  4209                           prodh	equ	0xFF4
  4210                           prodl	equ	0xFF3
  4211                           postinc0	equ	0xFEE
  4212                           wreg	equ	0xFE8
  4213                           indf2	equ	0xFDF
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _updateS1 *****************
  4219 ;; Defined at:
  4220 ;;		line 81 in file "motors.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  mode            2   47[COMRAM] int 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        2 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    3
  4241 ;; This function calls:
  4242 ;;		_lcdInst
  4243 ;;		_printf
  4244 ;; This function is called by:
  4245 ;;		_main
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text7
  4250  00E6BC                     __ptext7:
  4251                           	opt stack 0
  4252  00E6BC                     _updateS1:
  4253                           	opt stack 27
  4254                           
  4255                           ;motors.c: 82: lcdInst(0b11000000);;
  4256                           
  4257                           ;incstack = 0
  4258  00E6BC  0EC0               	movlw	192
  4259  00E6BE  EC09  F06F         	call	_lcdInst
  4260                           
  4261                           ;motors.c: 83: printf("%d  %d", mode, s);
  4262  00E6C2  0EF8               	movlw	low STR_32
  4263  00E6C4  6E17               	movwf	printf@f,c
  4264  00E6C6  0EFF               	movlw	high STR_32
  4265  00E6C8  6E18               	movwf	printf@f+1,c
  4266  00E6CA  C030  F019         	movff	updateS1@mode,?_printf+2
  4267  00E6CE  C031  F01A         	movff	updateS1@mode+1,?_printf+3
  4268  00E6D2  C06C  F01B         	movff	_s,?_printf+4
  4269  00E6D6  C06D  F01C         	movff	_s+1,?_printf+5
  4270  00E6DA  EC16  F074         	call	_printf	;wreg free
  4271                           
  4272                           ;motors.c: 86: if(mode == 0){
  4273  00E6DE  5030               	movf	updateS1@mode,w,c
  4274  00E6E0  1031               	iorwf	updateS1@mode+1,w,c
  4275  00E6E2  A4D8               	btfss	status,2,c
  4276  00E6E4  D005               	goto	l3011
  4277                           
  4278                           ;motors.c: 87: LATDbits.LATD1 = 0;
  4279  00E6E6  928C               	bcf	3980,1,c	;volatile
  4280                           
  4281                           ;motors.c: 88: LATBbits.LATB3 = 0;
  4282  00E6E8  968A               	bcf	3978,3,c	;volatile
  4283                           
  4284                           ;motors.c: 89: LATBbits.LATB2 = 0;
  4285  00E6EA  948A               	bcf	3978,2,c	;volatile
  4286                           
  4287                           ;motors.c: 90: LATBbits.LATB0 = 0;
  4288  00E6EC  908A               	bcf	3978,0,c	;volatile
  4289                           
  4290                           ;motors.c: 91: }
  4291  00E6EE  0012               	return	
  4292  00E6F0                     l3011:
  4293                           
  4294                           ;motors.c: 92: else{
  4295                           ;motors.c: 93: s1 ++;
  4296  00E6F0  4A6E               	infsnz	_s1,f,c
  4297  00E6F2  2A6F               	incf	_s1+1,f,c
  4298                           
  4299                           ;motors.c: 94: if (s1>4) {s1=1;}
  4300  00E6F4  BE6F               	btfsc	_s1+1,7,c
  4301  00E6F6  D00A               	goto	l3017
  4302  00E6F8  506F               	movf	_s1+1,w,c
  4303  00E6FA  E104               	bnz	u2250
  4304  00E6FC  0E05               	movlw	5
  4305  00E6FE  5C6E               	subwf	_s1,w,c
  4306  00E700  A0D8               	btfss	status,0,c
  4307  00E702  D004               	goto	l3017
  4308  00E704                     u2250:
  4309  00E704  0E00               	movlw	0
  4310  00E706  6E6F               	movwf	_s1+1,c
  4311  00E708  0E01               	movlw	1
  4312  00E70A  6E6E               	movwf	_s1,c
  4313  00E70C                     l3017:
  4314                           
  4315                           ;motors.c: 95: t++;
  4316  00E70C  4A6A               	infsnz	_t,f,c
  4317  00E70E  2A6B               	incf	_t+1,f,c
  4318                           
  4319                           ;motors.c: 96: if (t>6) {t=1;}
  4320  00E710  BE6B               	btfsc	_t+1,7,c
  4321  00E712  D00A               	goto	l3023
  4322  00E714  506B               	movf	_t+1,w,c
  4323  00E716  E104               	bnz	u2260
  4324  00E718  0E07               	movlw	7
  4325  00E71A  5C6A               	subwf	_t,w,c
  4326  00E71C  A0D8               	btfss	status,0,c
  4327  00E71E  D004               	goto	l3023
  4328  00E720                     u2260:
  4329  00E720  0E00               	movlw	0
  4330  00E722  6E6B               	movwf	_t+1,c
  4331  00E724  0E01               	movlw	1
  4332  00E726  6E6A               	movwf	_t,c
  4333  00E728                     l3023:
  4334                           
  4335                           ;motors.c: 97: if(mode == 1){
  4336  00E728  0430               	decf	updateS1@mode,w,c
  4337  00E72A  1031               	iorwf	updateS1@mode+1,w,c
  4338  00E72C  A4D8               	btfss	status,2,c
  4339  00E72E  D020               	goto	l3041
  4340                           
  4341                           ;motors.c: 98: if (s1 == 1){LATDbits.LATD1 = 1;}
  4342  00E730  046E               	decf	_s1,w,c
  4343  00E732  106F               	iorwf	_s1+1,w,c
  4344  00E734  A4D8               	btfss	status,2,c
  4345  00E736  D002               	goto	l395
  4346  00E738  828C               	bsf	3980,1,c	;volatile
  4347  00E73A  D001               	goto	l3029
  4348  00E73C                     l395:
  4349                           
  4350                           ;motors.c: 99: else{LATDbits.LATD1 = 0;}
  4351  00E73C  928C               	bcf	3980,1,c	;volatile
  4352  00E73E                     l3029:
  4353                           
  4354                           ;motors.c: 100: if (s1 == 2){LATBbits.LATB3 = 1;}
  4355  00E73E  0E02               	movlw	2
  4356  00E740  186E               	xorwf	_s1,w,c
  4357  00E742  106F               	iorwf	_s1+1,w,c
  4358  00E744  A4D8               	btfss	status,2,c
  4359  00E746  D002               	goto	l397
  4360  00E748  868A               	bsf	3978,3,c	;volatile
  4361  00E74A  D001               	goto	l3033
  4362  00E74C                     l397:
  4363                           
  4364                           ;motors.c: 101: else{LATBbits.LATB3 = 0;}
  4365  00E74C  968A               	bcf	3978,3,c	;volatile
  4366  00E74E                     l3033:
  4367                           
  4368                           ;motors.c: 102: if (s1 == 3){LATBbits.LATB2 = 1;}
  4369  00E74E  0E03               	movlw	3
  4370  00E750  186E               	xorwf	_s1,w,c
  4371  00E752  106F               	iorwf	_s1+1,w,c
  4372  00E754  A4D8               	btfss	status,2,c
  4373  00E756  D002               	goto	l399
  4374  00E758  848A               	bsf	3978,2,c	;volatile
  4375  00E75A  D001               	goto	l3037
  4376  00E75C                     l399:
  4377                           
  4378                           ;motors.c: 103: else{LATBbits.LATB2 = 0;}
  4379  00E75C  948A               	bcf	3978,2,c	;volatile
  4380  00E75E                     l3037:
  4381                           
  4382                           ;motors.c: 104: if (s1 == 4){LATBbits.LATB0 = 1;}
  4383  00E75E  0E04               	movlw	4
  4384  00E760  186E               	xorwf	_s1,w,c
  4385  00E762  106F               	iorwf	_s1+1,w,c
  4386  00E764  A4D8               	btfss	status,2,c
  4387  00E766  D002               	goto	l401
  4388  00E768  808A               	bsf	3978,0,c	;volatile
  4389  00E76A  0012               	return	
  4390  00E76C                     l401:
  4391                           
  4392                           ;motors.c: 105: else{LATBbits.LATB0 = 0;}
  4393  00E76C  908A               	bcf	3978,0,c	;volatile
  4394                           
  4395                           ;motors.c: 106: }
  4396  00E76E  0012               	return	
  4397  00E770                     l3041:
  4398                           
  4399                           ;motors.c: 107: else if(mode == 2){
  4400  00E770  0E02               	movlw	2
  4401  00E772  1830               	xorwf	updateS1@mode,w,c
  4402  00E774  1031               	iorwf	updateS1@mode+1,w,c
  4403  00E776  A4D8               	btfss	status,2,c
  4404  00E778  D020               	goto	l3059
  4405                           
  4406                           ;motors.c: 108: if (s1 == 4){LATDbits.LATD1 = 1;}
  4407  00E77A  0E04               	movlw	4
  4408  00E77C  186E               	xorwf	_s1,w,c
  4409  00E77E  106F               	iorwf	_s1+1,w,c
  4410  00E780  A4D8               	btfss	status,2,c
  4411  00E782  D002               	goto	l405
  4412  00E784  828C               	bsf	3980,1,c	;volatile
  4413  00E786  D001               	goto	l3047
  4414  00E788                     l405:
  4415                           
  4416                           ;motors.c: 109: else{LATDbits.LATD1 = 0;}
  4417  00E788  928C               	bcf	3980,1,c	;volatile
  4418  00E78A                     l3047:
  4419                           
  4420                           ;motors.c: 110: if (s1 == 3){LATBbits.LATB3 = 1;}
  4421  00E78A  0E03               	movlw	3
  4422  00E78C  186E               	xorwf	_s1,w,c
  4423  00E78E  106F               	iorwf	_s1+1,w,c
  4424  00E790  A4D8               	btfss	status,2,c
  4425  00E792  D002               	goto	l407
  4426  00E794  868A               	bsf	3978,3,c	;volatile
  4427  00E796  D001               	goto	l3051
  4428  00E798                     l407:
  4429                           
  4430                           ;motors.c: 111: else{LATBbits.LATB3 = 0;}
  4431  00E798  968A               	bcf	3978,3,c	;volatile
  4432  00E79A                     l3051:
  4433                           
  4434                           ;motors.c: 112: if (s1 == 2){LATBbits.LATB2 = 1;}
  4435  00E79A  0E02               	movlw	2
  4436  00E79C  186E               	xorwf	_s1,w,c
  4437  00E79E  106F               	iorwf	_s1+1,w,c
  4438  00E7A0  A4D8               	btfss	status,2,c
  4439  00E7A2  D002               	goto	l409
  4440  00E7A4  848A               	bsf	3978,2,c	;volatile
  4441  00E7A6  D001               	goto	l3055
  4442  00E7A8                     l409:
  4443                           
  4444                           ;motors.c: 113: else{LATBbits.LATB2 = 0;}
  4445  00E7A8  948A               	bcf	3978,2,c	;volatile
  4446  00E7AA                     l3055:
  4447                           
  4448                           ;motors.c: 114: if (s1 == 1){LATBbits.LATB0 = 1;}
  4449  00E7AA  046E               	decf	_s1,w,c
  4450  00E7AC  106F               	iorwf	_s1+1,w,c
  4451  00E7AE  A4D8               	btfss	status,2,c
  4452  00E7B0  D002               	goto	l411
  4453  00E7B2  808A               	bsf	3978,0,c	;volatile
  4454  00E7B4  0012               	return	
  4455  00E7B6                     l411:
  4456                           
  4457                           ;motors.c: 115: else{LATBbits.LATB0 = 0;}
  4458  00E7B6  908A               	bcf	3978,0,c	;volatile
  4459                           
  4460                           ;motors.c: 116: }
  4461  00E7B8  0012               	return	
  4462  00E7BA                     l3059:
  4463                           
  4464                           ;motors.c: 117: else if(mode == 3){
  4465  00E7BA  0E03               	movlw	3
  4466  00E7BC  1830               	xorwf	updateS1@mode,w,c
  4467  00E7BE  1031               	iorwf	updateS1@mode+1,w,c
  4468  00E7C0  A4D8               	btfss	status,2,c
  4469  00E7C2  0012               	return	
  4470                           
  4471                           ;motors.c: 118: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  4472  00E7C4  046A               	decf	_t,w,c
  4473  00E7C6  106B               	iorwf	_t+1,w,c
  4474  00E7C8  B4D8               	btfsc	status,2,c
  4475  00E7CA  D005               	goto	l417
  4476  00E7CC  0E08               	movlw	8
  4477  00E7CE  186A               	xorwf	_t,w,c
  4478  00E7D0  106B               	iorwf	_t+1,w,c
  4479  00E7D2  A4D8               	btfss	status,2,c
  4480  00E7D4  D002               	goto	l415
  4481  00E7D6                     l417:
  4482  00E7D6  828C               	bsf	3980,1,c	;volatile
  4483  00E7D8  D001               	goto	l3065
  4484  00E7DA                     l415:
  4485                           
  4486                           ;motors.c: 119: else{LATDbits.LATD1 = 0;}
  4487  00E7DA  928C               	bcf	3980,1,c	;volatile
  4488  00E7DC                     l3065:
  4489                           
  4490                           ;motors.c: 120: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  4491  00E7DC  0E02               	movlw	2
  4492  00E7DE  186A               	xorwf	_t,w,c
  4493  00E7E0  106B               	iorwf	_t+1,w,c
  4494  00E7E2  B4D8               	btfsc	status,2,c
  4495  00E7E4  D005               	goto	l421
  4496  00E7E6  0E07               	movlw	7
  4497  00E7E8  186A               	xorwf	_t,w,c
  4498  00E7EA  106B               	iorwf	_t+1,w,c
  4499  00E7EC  A4D8               	btfss	status,2,c
  4500  00E7EE  D002               	goto	l419
  4501  00E7F0                     l421:
  4502  00E7F0  868A               	bsf	3978,3,c	;volatile
  4503  00E7F2  D001               	goto	l3069
  4504  00E7F4                     l419:
  4505                           
  4506                           ;motors.c: 121: else{LATBbits.LATB3 = 0;}
  4507  00E7F4  968A               	bcf	3978,3,c	;volatile
  4508  00E7F6                     l3069:
  4509                           
  4510                           ;motors.c: 122: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  4511  00E7F6  0E03               	movlw	3
  4512  00E7F8  186A               	xorwf	_t,w,c
  4513  00E7FA  106B               	iorwf	_t+1,w,c
  4514  00E7FC  B4D8               	btfsc	status,2,c
  4515  00E7FE  D005               	goto	l425
  4516  00E800  0E06               	movlw	6
  4517  00E802  186A               	xorwf	_t,w,c
  4518  00E804  106B               	iorwf	_t+1,w,c
  4519  00E806  A4D8               	btfss	status,2,c
  4520  00E808  D002               	goto	l423
  4521  00E80A                     l425:
  4522  00E80A  848A               	bsf	3978,2,c	;volatile
  4523  00E80C  D001               	goto	l3073
  4524  00E80E                     l423:
  4525                           
  4526                           ;motors.c: 123: else{LATBbits.LATB2 = 0;}
  4527  00E80E  948A               	bcf	3978,2,c	;volatile
  4528  00E810                     l3073:
  4529                           
  4530                           ;motors.c: 124: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  4531  00E810  0E04               	movlw	4
  4532  00E812  186A               	xorwf	_t,w,c
  4533  00E814  106B               	iorwf	_t+1,w,c
  4534  00E816  B4D8               	btfsc	status,2,c
  4535  00E818  D005               	goto	l429
  4536  00E81A  0E05               	movlw	5
  4537  00E81C  186A               	xorwf	_t,w,c
  4538  00E81E  106B               	iorwf	_t+1,w,c
  4539  00E820  A4D8               	btfss	status,2,c
  4540  00E822  D002               	goto	l427
  4541  00E824                     l429:
  4542  00E824  808A               	bsf	3978,0,c	;volatile
  4543  00E826  0012               	return	
  4544  00E828                     l427:
  4545                           
  4546                           ;motors.c: 125: else{LATBbits.LATB0 = 0;}
  4547  00E828  908A               	bcf	3978,0,c	;volatile
  4548  00E82A  0012               	return	
  4549  00E82C                     __end_of_updateS1:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           indf2	equ	0xFDF
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function _updateEEPROM *****************
  4562 ;; Defined at:
  4563 ;;		line 103 in file "interface.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;  time            2   17[COMRAM] int 
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4577 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;Total ram usage:        2 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    1
  4584 ;; This function calls:
  4585 ;;		_eepromRead
  4586 ;;		_eepromWrite
  4587 ;; This function is called by:
  4588 ;;		_main
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text8
  4593  00DF30                     __ptext8:
  4594                           	opt stack 0
  4595  00DF30                     _updateEEPROM:
  4596                           	opt stack 29
  4597                           
  4598                           ;interface.c: 104: eepromWrite(40, eepromRead(30));
  4599                           
  4600                           ;incstack = 0
  4601  00DF30  0E1E               	movlw	30
  4602  00DF32  EC84  F06F         	call	_eepromRead
  4603  00DF36  6E04               	movwf	eepromWrite@data,c
  4604  00DF38  0E28               	movlw	40
  4605  00DF3A  ECB3  F06F         	call	_eepromWrite
  4606                           
  4607                           ;interface.c: 105: eepromWrite(30, eepromRead(20));
  4608  00DF3E  0E14               	movlw	20
  4609  00DF40  EC84  F06F         	call	_eepromRead
  4610  00DF44  6E04               	movwf	eepromWrite@data,c
  4611  00DF46  0E1E               	movlw	30
  4612  00DF48  ECB3  F06F         	call	_eepromWrite
  4613                           
  4614                           ;interface.c: 106: eepromWrite(20, eepromRead(10));
  4615  00DF4C  0E0A               	movlw	10
  4616  00DF4E  EC84  F06F         	call	_eepromRead
  4617  00DF52  6E04               	movwf	eepromWrite@data,c
  4618  00DF54  0E14               	movlw	20
  4619  00DF56  ECB3  F06F         	call	_eepromWrite
  4620                           
  4621                           ;interface.c: 107: eepromWrite(10, time);
  4622  00DF5A  C012  F004         	movff	updateEEPROM@time,eepromWrite@data
  4623  00DF5E  0E0A               	movlw	10
  4624  00DF60  ECB3  F06F         	call	_eepromWrite
  4625  00DF64  0012               	return		;funcret
  4626  00DF66                     __end_of_updateEEPROM:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           postinc0	equ	0xFEE
  4632                           wreg	equ	0xFE8
  4633                           indf2	equ	0xFDF
  4634                           fsr2h	equ	0xFDA
  4635                           fsr2l	equ	0xFD9
  4636                           status	equ	0xFD8
  4637                           
  4638 ;; *************** function _eepromWrite *****************
  4639 ;; Defined at:
  4640 ;;		line 77 in file "interface.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  address         1    wreg     char 
  4643 ;;  data            1    3[COMRAM] char 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  address         1    6[COMRAM] char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4655 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;Total ram usage:        4 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_updateEEPROM
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text9
  4669  00DF66                     __ptext9:
  4670                           	opt stack 0
  4671  00DF66                     _eepromWrite:
  4672                           	opt stack 29
  4673                           
  4674                           ;incstack = 0
  4675                           ;eepromWrite@address stored from wreg
  4676  00DF66  6E07               	movwf	eepromWrite@address,c
  4677                           
  4678                           ;interface.c: 79: EEADRH = (signed char)(address >> 8);
  4679  00DF68  C007  F005         	movff	eepromWrite@address,??_eepromWrite
  4680  00DF6C  0E08               	movlw	8
  4681  00DF6E  6E06               	movwf	(??_eepromWrite+1)& (0+255),c
  4682  00DF70                     u2205:
  4683  00DF70  3405               	rlcf	??_eepromWrite,w,c
  4684  00DF72  3205               	rrcf	??_eepromWrite,f,c
  4685  00DF74  2E06               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  4686  00DF76  D7FC               	goto	u2205
  4687  00DF78  5005               	movf	??_eepromWrite,w,c
  4688  00DF7A  6EAA               	movwf	4010,c	;volatile
  4689                           
  4690                           ;interface.c: 80: EEADR = (signed char)address;
  4691  00DF7C  C007  FFA9         	movff	eepromWrite@address,4009	;volatile
  4692                           
  4693                           ;interface.c: 82: EEDATA = data;
  4694  00DF80  C004  FFA8         	movff	eepromWrite@data,4008	;volatile
  4695                           
  4696                           ;interface.c: 83: EECON1bits.EEPGD = 0;
  4697  00DF84  9EA6               	bcf	4006,7,c	;volatile
  4698                           
  4699                           ;interface.c: 84: EECON1bits.CFGS = 0;
  4700  00DF86  9CA6               	bcf	4006,6,c	;volatile
  4701                           
  4702                           ;interface.c: 85: EECON1bits.WREN = 1;
  4703  00DF88  84A6               	bsf	4006,2,c	;volatile
  4704                           
  4705                           ;interface.c: 89: EECON2 = 0x55;
  4706  00DF8A  0E55               	movlw	85
  4707  00DF8C  6EA7               	movwf	4007,c	;volatile
  4708                           
  4709                           ;interface.c: 90: EECON2 = 0xAA;
  4710  00DF8E  0EAA               	movlw	170
  4711  00DF90  6EA7               	movwf	4007,c	;volatile
  4712                           
  4713                           ;interface.c: 91: EECON1bits.WR = 1;
  4714  00DF92  82A6               	bsf	4006,1,c	;volatile
  4715  00DF94                     l606:
  4716  00DF94  A8A1               	btfss	4001,4,c	;volatile
  4717  00DF96  D7FE               	goto	l606
  4718                           
  4719                           ;interface.c: 97: }
  4720                           ;interface.c: 99: PIR2bits.EEIF = 0;
  4721  00DF98  98A1               	bcf	4001,4,c	;volatile
  4722                           
  4723                           ;interface.c: 100: EECON1bits.WREN = 0;
  4724  00DF9A  94A6               	bcf	4006,2,c	;volatile
  4725  00DF9C  0012               	return		;funcret
  4726  00DF9E                     __end_of_eepromWrite:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           indf2	equ	0xFDF
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738 ;; *************** function _timePassed *****************
  4739 ;; Defined at:
  4740 ;;		line 19 in file "logic.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  start           2    6[COMRAM] int 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  2    6[COMRAM] int 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;Total ram usage:       11 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    1
  4761 ;; This function calls:
  4762 ;;		___wmul
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text10
  4769  00E54C                     __ptext10:
  4770                           	opt stack 0
  4771  00E54C                     _timePassed:
  4772                           	opt stack 29
  4773                           
  4774                           ;logic.c: 21: else{return ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0
      +                          x0F) + ((time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10) - st
      +                          art;}
  4775                           
  4776                           ;logic.c: 20: if(((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) + ((
      +                          time[1] & 0xF0)>>4)*10 + 3600*(time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10) >= 86400){ret
      +                          urn ((time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10 + 60*(time[1] & 0x0F) + ((time[1] & 0xF
  4777                           
  4778                           ;incstack = 0
  4779  00E54C  C007  F009         	movff	timePassed@start,??_timePassed
  4780  00E550  C008  F00A         	movff	timePassed@start+1,??_timePassed+1
  4781  00E554  1E09               	comf	??_timePassed,f,c
  4782  00E556  1E0A               	comf	??_timePassed+1,f,c
  4783  00E558  4A09               	infsnz	??_timePassed,f,c
  4784  00E55A  2A0A               	incf	??_timePassed+1,f,c
  4785  00E55C  C061  F00B         	movff	_time+2,??_timePassed+2
  4786  00E560  0E0F               	movlw	15
  4787  00E562  160B               	andwf	??_timePassed+2,f,c
  4788  00E564  500B               	movf	??_timePassed+2,w,c
  4789  00E566  6E01               	movwf	___wmul@multiplier,c
  4790  00E568  6A02               	clrf	___wmul@multiplier+1,c
  4791  00E56A  0E0E               	movlw	14
  4792  00E56C  6E04               	movwf	___wmul@multiplicand+1,c
  4793  00E56E  0E10               	movlw	16
  4794  00E570  6E03               	movwf	___wmul@multiplicand,c
  4795  00E572  EC5E  F06F         	call	___wmul	;wreg free
  4796  00E576  C05F  F00C         	movff	_time,??_timePassed+3
  4797  00E57A  3A0C               	swapf	??_timePassed+3,f,c
  4798  00E57C  0E0F               	movlw	15
  4799  00E57E  160C               	andwf	??_timePassed+3,f,c
  4800  00E580  0E0F               	movlw	15
  4801  00E582  160C               	andwf	??_timePassed+3,f,c
  4802  00E584  500C               	movf	??_timePassed+3,w,c
  4803  00E586  0D0A               	mullw	10
  4804  00E588  505F               	movf	_time,w,c
  4805  00E58A  0B0F               	andlw	15
  4806  00E58C  6E0D               	movwf	(??_timePassed+4)& (0+255),c
  4807  00E58E  6A0E               	clrf	(??_timePassed+5)& (0+255),c
  4808  00E590  50F3               	movf	prodl,w,c
  4809  00E592  260D               	addwf	??_timePassed+4,f,c
  4810  00E594  50F4               	movf	prodh,w,c
  4811  00E596  220E               	addwfc	??_timePassed+5,f,c
  4812  00E598  C060  F00F         	movff	_time+1,??_timePassed+6
  4813  00E59C  0E0F               	movlw	15
  4814  00E59E  160F               	andwf	??_timePassed+6,f,c
  4815  00E5A0  500F               	movf	??_timePassed+6,w,c
  4816  00E5A2  0D3C               	mullw	60
  4817  00E5A4  50F3               	movf	prodl,w,c
  4818  00E5A6  260D               	addwf	??_timePassed+4,f,c
  4819  00E5A8  50F4               	movf	prodh,w,c
  4820  00E5AA  220E               	addwfc	??_timePassed+5,f,c
  4821  00E5AC  C060  F010         	movff	_time+1,??_timePassed+7
  4822  00E5B0  3A10               	swapf	??_timePassed+7,f,c
  4823  00E5B2  0E0F               	movlw	15
  4824  00E5B4  1610               	andwf	??_timePassed+7,f,c
  4825  00E5B6  0E0F               	movlw	15
  4826  00E5B8  1610               	andwf	??_timePassed+7,f,c
  4827  00E5BA  5010               	movf	??_timePassed+7,w,c
  4828  00E5BC  0D0A               	mullw	10
  4829  00E5BE  50F3               	movf	prodl,w,c
  4830  00E5C0  260D               	addwf	??_timePassed+4,f,c
  4831  00E5C2  50F4               	movf	prodh,w,c
  4832  00E5C4  220E               	addwfc	??_timePassed+5,f,c
  4833  00E5C6  5001               	movf	?___wmul,w,c
  4834  00E5C8  260D               	addwf	??_timePassed+4,f,c
  4835  00E5CA  5002               	movf	?___wmul+1,w,c
  4836  00E5CC  220E               	addwfc	??_timePassed+5,f,c
  4837  00E5CE  C061  F011         	movff	_time+2,??_timePassed+8
  4838  00E5D2  3A11               	swapf	??_timePassed+8,f,c
  4839  00E5D4  0E0F               	movlw	15
  4840  00E5D6  1611               	andwf	??_timePassed+8,f,c
  4841  00E5D8  0E0F               	movlw	15
  4842  00E5DA  1611               	andwf	??_timePassed+8,f,c
  4843  00E5DC  5011               	movf	??_timePassed+8,w,c
  4844  00E5DE  0D0A               	mullw	10
  4845  00E5E0  50F3               	movf	prodl,w,c
  4846  00E5E2  260D               	addwf	??_timePassed+4,f,c
  4847  00E5E4  50F4               	movf	prodh,w,c
  4848  00E5E6  220E               	addwfc	??_timePassed+5,f,c
  4849  00E5E8  5009               	movf	??_timePassed,w,c
  4850  00E5EA  240D               	addwf	??_timePassed+4,w,c
  4851  00E5EC  6E07               	movwf	?_timePassed,c
  4852  00E5EE  500A               	movf	??_timePassed+1,w,c
  4853  00E5F0  200E               	addwfc	??_timePassed+5,w,c
  4854  00E5F2  6E08               	movwf	?_timePassed+1,c
  4855  00E5F4  0012               	return	
  4856  00E5F6                     __end_of_timePassed:
  4857                           	opt stack 0
  4858                           tblptru	equ	0xFF8
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           indf2	equ	0xFDF
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _readADC *****************
  4869 ;; Defined at:
  4870 ;;		line 24 in file "logic.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  channel         1    wreg     unsigned char 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  channel         1    1[COMRAM] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:        2 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_main
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text11
  4898  00DE98                     __ptext11:
  4899                           	opt stack 0
  4900  00DE98                     _readADC:
  4901                           	opt stack 30
  4902                           
  4903                           ;incstack = 0
  4904                           ;readADC@channel stored from wreg
  4905  00DE98  6E02               	movwf	readADC@channel,c
  4906                           
  4907                           ;logic.c: 26: ADCON0 = ((channel <<2));
  4908  00DE9A  4402               	rlncf	readADC@channel,w,c
  4909  00DE9C  46E8               	rlncf	wreg,f,c
  4910  00DE9E  0BFC               	andlw	252
  4911  00DEA0  6EC2               	movwf	4034,c	;volatile
  4912                           
  4913                           ;logic.c: 27: ADCON0bits.ADON = 1;
  4914  00DEA2  80C2               	bsf	4034,0,c	;volatile
  4915                           
  4916                           ;logic.c: 28: ADCON0bits.GO = 1;
  4917  00DEA4  82C2               	bsf	4034,1,c	;volatile
  4918                           
  4919                           ;logic.c: 29: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  4920  00DEA6  D007               	goto	l3085
  4921  00DEA8                     l3083:
  4922  00DEA8  0E34               	movlw	52
  4923  00DEAA  6E01               	movwf	??_readADC& (0+255),c
  4924  00DEAC  0EF2               	movlw	242
  4925  00DEAE                     u3647:
  4926  00DEAE  2EE8               	decfsz	wreg,f,c
  4927  00DEB0  D7FE               	bra	u3647
  4928  00DEB2  2E01               	decfsz	??_readADC& (0+255),f,c
  4929  00DEB4  D7FC               	bra	u3647
  4930  00DEB6                     l3085:
  4931  00DEB6  A2C2               	btfss	4034,1,c	;volatile
  4932  00DEB8  0012               	return	
  4933  00DEBA  D7F6               	goto	l3083
  4934  00DEBC                     __end_of_readADC:
  4935                           	opt stack 0
  4936                           tblptru	equ	0xFF8
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           indf2	equ	0xFDF
  4942                           fsr2h	equ	0xFDA
  4943                           fsr2l	equ	0xFD9
  4944                           status	equ	0xFD8
  4945                           
  4946 ;; *************** function _keyinterrupt *****************
  4947 ;; Defined at:
  4948 ;;		line 24 in file "interface.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text12
  4976  00DE50                     __ptext12:
  4977                           	opt stack 0
  4978  00DE50                     _keyinterrupt:
  4979                           	opt stack 30
  4980                           
  4981                           ;interface.c: 25: if(PORTBbits.RB1 == 1){
  4982                           
  4983                           ;incstack = 0
  4984  00DE50  A281               	btfss	3969,1,c	;volatile
  4985  00DE52  D006               	goto	l590
  4986                           
  4987                           ;interface.c: 26: keypress = (PORTB & 0xF0)>>4;
  4988  00DE54  3881               	swapf	3969,w,c	;volatile
  4989  00DE56  0B0F               	andlw	15
  4990  00DE58  0B0F               	andlw	15
  4991  00DE5A  6E70               	movwf	_keypress,c	;volatile
  4992  00DE5C                     l591:
  4993  00DE5C  B281               	btfsc	3969,1,c	;volatile
  4994  00DE5E  D7FE               	goto	l591
  4995  00DE60                     l590:
  4996                           
  4997                           ;interface.c: 32: }
  4998                           ;interface.c: 38: }
  4999                           ;interface.c: 39: __nop();
  5000  00DE60  F000               	nop	
  5001  00DE62  0012               	return		;funcret
  5002  00DE64                     __end_of_keyinterrupt:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           indf2	equ	0xFDF
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function _initialize *****************
  5015 ;; Defined at:
  5016 ;;		line 21 in file "main.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, status,2, status,0, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;Total ram usage:        0 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    3
  5037 ;; This function calls:
  5038 ;;		_I2C_Master_Init
  5039 ;;		_initLCD
  5040 ;; This function is called by:
  5041 ;;		_main
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text13
  5046  00E456                     __ptext13:
  5047                           	opt stack 0
  5048  00E456                     _initialize:
  5049                           	opt stack 27
  5050                           
  5051                           ;main.c: 22: OSCCON = 0b01110000;
  5052                           
  5053                           ;incstack = 0
  5054  00E456  0E70               	movlw	112
  5055  00E458  6ED3               	movwf	4051,c	;volatile
  5056                           
  5057                           ;main.c: 23: OSCTUNEbits.PLLEN = 1;
  5058  00E45A  8C9B               	bsf	3995,6,c	;volatile
  5059                           
  5060                           ;main.c: 25: TRISA = 0b11001111;
  5061  00E45C  0ECF               	movlw	207
  5062  00E45E  6E92               	movwf	3986,c	;volatile
  5063                           
  5064                           ;main.c: 26: TRISB = 0b11110010;
  5065  00E460  0EF2               	movlw	242
  5066  00E462  6E93               	movwf	3987,c	;volatile
  5067                           
  5068                           ;main.c: 27: TRISC = 0b00011000;
  5069  00E464  0E18               	movlw	24
  5070  00E466  6E94               	movwf	3988,c	;volatile
  5071                           
  5072                           ;main.c: 29: TRISD = 0x00;
  5073  00E468  0E00               	movlw	0
  5074  00E46A  6E95               	movwf	3989,c	;volatile
  5075                           
  5076                           ;main.c: 30: TRISE = 0b00000001;
  5077  00E46C  0E01               	movlw	1
  5078  00E46E  6E96               	movwf	3990,c	;volatile
  5079                           
  5080                           ;main.c: 32: PR2 = 0xff;
  5081  00E470  68CB               	setf	4043,c	;volatile
  5082                           
  5083                           ;main.c: 33: CCP1CON = 0b00001100;
  5084  00E472  0E0C               	movlw	12
  5085  00E474  6EBD               	movwf	4029,c	;volatile
  5086                           
  5087                           ;main.c: 34: CCPR1L = 0x00;
  5088  00E476  0E00               	movlw	0
  5089  00E478  6EBE               	movwf	4030,c	;volatile
  5090                           
  5091                           ;main.c: 35: CCP2CON = 0b00001100;
  5092  00E47A  0E0C               	movlw	12
  5093  00E47C  6EBA               	movwf	4026,c	;volatile
  5094                           
  5095                           ;main.c: 36: CCPR2L = 0x00;
  5096  00E47E  0E00               	movlw	0
  5097  00E480  6EBB               	movwf	4027,c	;volatile
  5098                           
  5099                           ;main.c: 37: T2CON = 0b00000101;
  5100  00E482  0E05               	movlw	5
  5101  00E484  6ECA               	movwf	4042,c	;volatile
  5102                           
  5103                           ;main.c: 39: LATA = 0x00;
  5104  00E486  0E00               	movlw	0
  5105  00E488  6E89               	movwf	3977,c	;volatile
  5106                           
  5107                           ;main.c: 40: LATB = 0x00;
  5108  00E48A  0E00               	movlw	0
  5109  00E48C  6E8A               	movwf	3978,c	;volatile
  5110                           
  5111                           ;main.c: 41: LATC = 0x00;
  5112  00E48E  0E00               	movlw	0
  5113  00E490  6E8B               	movwf	3979,c	;volatile
  5114                           
  5115                           ;main.c: 42: LATD = 0x00;
  5116  00E492  0E00               	movlw	0
  5117  00E494  6E8C               	movwf	3980,c	;volatile
  5118                           
  5119                           ;main.c: 43: LATE = 0x00;
  5120  00E496  0E00               	movlw	0
  5121  00E498  6E8D               	movwf	3981,c	;volatile
  5122                           
  5123                           ;main.c: 45: initLCD();
  5124  00E49A  ECCF  F070         	call	_initLCD	;wreg free
  5125                           
  5126                           ;main.c: 47: I2C_Master_Init(10000);
  5127  00E49E  0E10               	movlw	16
  5128  00E4A0  6E0E               	movwf	I2C_Master_Init@c,c
  5129  00E4A2  0E27               	movlw	39
  5130  00E4A4  6E0F               	movwf	I2C_Master_Init@c+1,c
  5131  00E4A6  0E00               	movlw	0
  5132  00E4A8  6E10               	movwf	I2C_Master_Init@c+2,c
  5133  00E4AA  0E00               	movlw	0
  5134  00E4AC  6E11               	movwf	I2C_Master_Init@c+3,c
  5135  00E4AE  EC67  F071         	call	_I2C_Master_Init	;wreg free
  5136                           
  5137                           ;main.c: 50: nRBPU = 0;
  5138  00E4B2  9EF1               	bcf	intcon2,7,c	;volatile
  5139                           
  5140                           ;main.c: 51: ADCON0 = 00000001;
  5141  00E4B4  0E01               	movlw	1
  5142  00E4B6  6EC2               	movwf	4034,c	;volatile
  5143                           
  5144                           ;main.c: 52: ADCON1 = 0b00001001;
  5145  00E4B8  0E09               	movlw	9
  5146  00E4BA  6EC1               	movwf	4033,c	;volatile
  5147                           
  5148                           ;main.c: 53: CVRCON = 0x00;
  5149  00E4BC  0E00               	movlw	0
  5150  00E4BE  6EB5               	movwf	4021,c	;volatile
  5151                           
  5152                           ;main.c: 54: CMCONbits.CIS = 0;
  5153  00E4C0  96B4               	bcf	4020,3,c	;volatile
  5154                           
  5155                           ;main.c: 55: ADFM = 1;
  5156  00E4C2  8EC0               	bsf	4032,7,c	;volatile
  5157                           
  5158                           ;main.c: 57: T0CON = 0b11011000;
  5159  00E4C4  0ED8               	movlw	216
  5160  00E4C6  6ED5               	movwf	4053,c	;volatile
  5161  00E4C8  0012               	return		;funcret
  5162  00E4CA                     __end_of_initialize:
  5163                           	opt stack 0
  5164                           tblptru	equ	0xFF8
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon2	equ	0xFF1
  5168                           postinc0	equ	0xFEE
  5169                           wreg	equ	0xFE8
  5170                           indf2	equ	0xFDF
  5171                           fsr2h	equ	0xFDA
  5172                           fsr2l	equ	0xFD9
  5173                           status	equ	0xFD8
  5174                           
  5175 ;; *************** function _initLCD *****************
  5176 ;; Defined at:
  5177 ;;		line 11 in file "lcd.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;Total ram usage:        1 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    2
  5198 ;; This function calls:
  5199 ;;		_lcdInst
  5200 ;; This function is called by:
  5201 ;;		_initialize
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text14
  5206  00E19E                     __ptext14:
  5207                           	opt stack 0
  5208  00E19E                     _initLCD:
  5209                           	opt stack 27
  5210                           
  5211                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  5212                           
  5213                           ;incstack = 0
  5214  00E19E  0E9C               	movlw	156
  5215  00E1A0  6E04               	movwf	??_initLCD& (0+255),c
  5216  00E1A2  0ED7               	movlw	215
  5217  00E1A4                     u3657:
  5218  00E1A4  2EE8               	decfsz	wreg,f,c
  5219  00E1A6  D7FE               	bra	u3657
  5220  00E1A8  2E04               	decfsz	??_initLCD& (0+255),f,c
  5221  00E1AA  D7FC               	bra	u3657
  5222  00E1AC  F000               	nop	
  5223                           
  5224                           ;lcd.c: 13: lcdInst(0b00110011);
  5225  00E1AE  0E33               	movlw	51
  5226  00E1B0  EC09  F06F         	call	_lcdInst
  5227                           
  5228                           ;lcd.c: 14: lcdInst(0b00110010);
  5229  00E1B4  0E32               	movlw	50
  5230  00E1B6  EC09  F06F         	call	_lcdInst
  5231                           
  5232                           ;lcd.c: 15: lcdInst(0b00101000);
  5233  00E1BA  0E28               	movlw	40
  5234  00E1BC  EC09  F06F         	call	_lcdInst
  5235                           
  5236                           ;lcd.c: 16: lcdInst(0b00001111);
  5237  00E1C0  0E0F               	movlw	15
  5238  00E1C2  EC09  F06F         	call	_lcdInst
  5239                           
  5240                           ;lcd.c: 17: lcdInst(0b00000110);
  5241  00E1C6  0E06               	movlw	6
  5242  00E1C8  EC09  F06F         	call	_lcdInst
  5243                           
  5244                           ;lcd.c: 18: lcdInst(0b00000001);
  5245  00E1CC  0E01               	movlw	1
  5246  00E1CE  EC09  F06F         	call	_lcdInst
  5247                           
  5248                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  5249  00E1D2  0E9C               	movlw	156
  5250  00E1D4  6E04               	movwf	??_initLCD& (0+255),c
  5251  00E1D6  0ED7               	movlw	215
  5252  00E1D8                     u3667:
  5253  00E1D8  2EE8               	decfsz	wreg,f,c
  5254  00E1DA  D7FE               	bra	u3667
  5255  00E1DC  2E04               	decfsz	??_initLCD& (0+255),f,c
  5256  00E1DE  D7FC               	bra	u3667
  5257  00E1E0  F000               	nop	
  5258  00E1E2  0012               	return		;funcret
  5259  00E1E4                     __end_of_initLCD:
  5260                           	opt stack 0
  5261                           tblptru	equ	0xFF8
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           intcon2	equ	0xFF1
  5265                           postinc0	equ	0xFEE
  5266                           wreg	equ	0xFE8
  5267                           indf2	equ	0xFDF
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _I2C_Master_Init *****************
  5273 ;; Defined at:
  5274 ;;		line 20 in file "I2C.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  c               4   13[COMRAM] const unsigned long 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      void 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;Total ram usage:        8 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    1
  5295 ;; This function calls:
  5296 ;;		___lldiv
  5297 ;; This function is called by:
  5298 ;;		_initialize
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text15
  5303  00E2CE                     __ptext15:
  5304                           	opt stack 0
  5305  00E2CE                     _I2C_Master_Init:
  5306                           	opt stack 28
  5307                           
  5308                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  5309                           
  5310                           ;incstack = 0
  5311  00E2CE  0E00               	movlw	0
  5312  00E2D0  6EC7               	movwf	4039,c	;volatile
  5313                           
  5314                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  5315  00E2D2  0E28               	movlw	40
  5316  00E2D4  6EC6               	movwf	4038,c	;volatile
  5317                           
  5318                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  5319  00E2D6  0E00               	movlw	0
  5320  00E2D8  6EC5               	movwf	4037,c	;volatile
  5321                           
  5322                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  5323  00E2DA  0E00               	movlw	0
  5324  00E2DC  6E01               	movwf	___lldiv@dividend,c
  5325  00E2DE  0E48               	movlw	72
  5326  00E2E0  6E02               	movwf	___lldiv@dividend+1,c
  5327  00E2E2  0EE8               	movlw	232
  5328  00E2E4  6E03               	movwf	___lldiv@dividend+2,c
  5329  00E2E6  0E01               	movlw	1
  5330  00E2E8  6E04               	movwf	___lldiv@dividend+3,c
  5331  00E2EA  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5332  00E2EE  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5333  00E2F2  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5334  00E2F6  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5335  00E2FA  0E02               	movlw	2
  5336  00E2FC                     u1885:
  5337  00E2FC  90D8               	bcf	status,0,c
  5338  00E2FE  3612               	rlcf	??_I2C_Master_Init,f,c
  5339  00E300  3613               	rlcf	??_I2C_Master_Init+1,f,c
  5340  00E302  3614               	rlcf	??_I2C_Master_Init+2,f,c
  5341  00E304  3615               	rlcf	??_I2C_Master_Init+3,f,c
  5342  00E306  2EE8               	decfsz	wreg,f,c
  5343  00E308  D7F9               	goto	u1885
  5344  00E30A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  5345  00E30E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5346  00E312  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5347  00E316  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5348  00E31A  EC65  F072         	call	___lldiv	;wreg free
  5349  00E31E  0401               	decf	?___lldiv,w,c
  5350  00E320  6EC8               	movwf	4040,c	;volatile
  5351                           
  5352                           ;I2C.c: 27: TRISC3 = 1;
  5353  00E322  8694               	bsf	3988,3,c	;volatile
  5354                           
  5355                           ;I2C.c: 28: TRISC4 = 1;
  5356  00E324  8894               	bsf	3988,4,c	;volatile
  5357  00E326  0012               	return		;funcret
  5358  00E328                     __end_of_I2C_Master_Init:
  5359                           	opt stack 0
  5360                           tblptru	equ	0xFF8
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon2	equ	0xFF1
  5364                           postinc0	equ	0xFEE
  5365                           wreg	equ	0xFE8
  5366                           indf2	equ	0xFDF
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _homescreen *****************
  5372 ;; Defined at:
  5373 ;;		line 3 in file "interface.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;Total ram usage:        0 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    3
  5394 ;; This function calls:
  5395 ;;		_lcdInst
  5396 ;;		_printf
  5397 ;; This function is called by:
  5398 ;;		_main
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           	psect	text16
  5403  00E328                     __ptext16:
  5404                           	opt stack 0
  5405  00E328                     _homescreen:
  5406                           	opt stack 27
  5407                           
  5408                           ;interface.c: 4: lcdInst(0b10000000);;
  5409                           
  5410                           ;incstack = 0
  5411  00E328  0E80               	movlw	128
  5412  00E32A  EC09  F06F         	call	_lcdInst
  5413                           
  5414                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  5415  00E32E  0E74               	movlw	low STR_33
  5416  00E330  6E17               	movwf	printf@f,c
  5417  00E332  0EFE               	movlw	high STR_33
  5418  00E334  6E18               	movwf	printf@f+1,c
  5419  00E336  C065  F019         	movff	_time+6,?_printf+2
  5420  00E33A  6A1A               	clrf	?_printf+3,c
  5421  00E33C  C064  F01B         	movff	_time+5,?_printf+4
  5422  00E340  6A1C               	clrf	?_printf+5,c
  5423  00E342  C063  F01D         	movff	_time+4,?_printf+6
  5424  00E346  6A1E               	clrf	?_printf+7,c
  5425  00E348  EC16  F074         	call	_printf	;wreg free
  5426                           
  5427                           ;interface.c: 6: printf("3:Start");
  5428  00E34C  0EE0               	movlw	low STR_34
  5429  00E34E  6E17               	movwf	printf@f,c
  5430  00E350  0EFF               	movlw	high STR_34
  5431  00E352  6E18               	movwf	printf@f+1,c
  5432  00E354  EC16  F074         	call	_printf	;wreg free
  5433                           
  5434                           ;interface.c: 7: lcdInst(0b11000000);;
  5435  00E358  0EC0               	movlw	192
  5436  00E35A  EC09  F06F         	call	_lcdInst
  5437                           
  5438                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5439  00E35E  0EE3               	movlw	low STR_35
  5440  00E360  6E17               	movwf	printf@f,c
  5441  00E362  0EFE               	movlw	high STR_35
  5442  00E364  6E18               	movwf	printf@f+1,c
  5443  00E366  C061  F019         	movff	_time+2,?_printf+2
  5444  00E36A  6A1A               	clrf	?_printf+3,c
  5445  00E36C  C060  F01B         	movff	_time+1,?_printf+4
  5446  00E370  6A1C               	clrf	?_printf+5,c
  5447  00E372  C05F  F01D         	movff	_time,?_printf+6
  5448  00E376  6A1E               	clrf	?_printf+7,c
  5449  00E378  EC16  F074         	call	_printf	;wreg free
  5450                           
  5451                           ;interface.c: 9: printf(" 2:Logs");
  5452  00E37C  0ED8               	movlw	low STR_36
  5453  00E37E  6E17               	movwf	printf@f,c
  5454  00E380  0EFF               	movlw	high STR_36
  5455  00E382  6E18               	movwf	printf@f+1,c
  5456  00E384  EC16  F074         	call	_printf	;wreg free
  5457  00E388  0012               	return		;funcret
  5458  00E38A                     __end_of_homescreen:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon2	equ	0xFF1
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           indf2	equ	0xFDF
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function _displayLogs *****************
  5472 ;; Defined at:
  5473 ;;		line 43 in file "interface.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;		None
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      void 
  5480 ;; Registers used:
  5481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;Total ram usage:        1 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    3
  5494 ;; This function calls:
  5495 ;;		_eepromRead
  5496 ;;		_keycheck
  5497 ;;		_lcdInst
  5498 ;;		_printf
  5499 ;; This function is called by:
  5500 ;;		_main
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           	psect	text17
  5505  00E5F6                     __ptext17:
  5506                           	opt stack 0
  5507  00E5F6                     _displayLogs:
  5508                           	opt stack 27
  5509                           
  5510                           ;interface.c: 44: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  5511                           
  5512                           ;incstack = 0
  5513  00E5F6  0E01               	movlw	1
  5514  00E5F8  EC09  F06F         	call	_lcdInst
  5515  00E5FC  0E68               	movlw	104
  5516  00E5FE  6E30               	movwf	??_displayLogs& (0+255),c
  5517  00E600  0EE4               	movlw	228
  5518  00E602                     u3677:
  5519  00E602  2EE8               	decfsz	wreg,f,c
  5520  00E604  D7FE               	bra	u3677
  5521  00E606  2E30               	decfsz	??_displayLogs& (0+255),f,c
  5522  00E608  D7FC               	bra	u3677
  5523  00E60A  D000               	nop2	
  5524                           
  5525                           ;interface.c: 45: printf("Run#1    A:Next");
  5526  00E60C  0E94               	movlw	low STR_37
  5527  00E60E  6E17               	movwf	printf@f,c
  5528  00E610  0EFE               	movlw	high STR_37
  5529  00E612  6E18               	movwf	printf@f+1,c
  5530  00E614  EC16  F074         	call	_printf	;wreg free
  5531                           
  5532                           ;interface.c: 46: lcdInst(0b11000000);;
  5533  00E618  0EC0               	movlw	192
  5534  00E61A  EC09  F06F         	call	_lcdInst
  5535                           
  5536                           ;interface.c: 47: printf("# of cans: %d", eepromRead(10));
  5537  00E61E  0EF2               	movlw	low STR_38
  5538  00E620  6E17               	movwf	printf@f,c
  5539  00E622  0EFE               	movlw	high STR_38
  5540  00E624  6E18               	movwf	printf@f+1,c
  5541  00E626  0E0A               	movlw	10
  5542  00E628  EC84  F06F         	call	_eepromRead
  5543  00E62C  6E19               	movwf	?_printf+2,c
  5544  00E62E  6A1A               	clrf	?_printf+3,c
  5545  00E630  BE19               	btfsc	?_printf+2,7,c
  5546  00E632  061A               	decf	?_printf+3,f,c
  5547  00E634  EC16  F074         	call	_printf	;wreg free
  5548                           
  5549                           ;interface.c: 48: keycheck();
  5550  00E638  EC1E  F06F         	call	_keycheck	;wreg free
  5551                           
  5552                           ;interface.c: 49: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  5553  00E63C  0E01               	movlw	1
  5554  00E63E  EC09  F06F         	call	_lcdInst
  5555  00E642  0E68               	movlw	104
  5556  00E644  6E30               	movwf	??_displayLogs& (0+255),c
  5557  00E646  0EE4               	movlw	228
  5558  00E648                     u3687:
  5559  00E648  2EE8               	decfsz	wreg,f,c
  5560  00E64A  D7FE               	bra	u3687
  5561  00E64C  2E30               	decfsz	??_displayLogs& (0+255),f,c
  5562  00E64E  D7FC               	bra	u3687
  5563  00E650  D000               	nop2	
  5564                           
  5565                           ;interface.c: 50: printf("Run#1    A:Next");
  5566  00E652  0E94               	movlw	low STR_37
  5567  00E654  6E17               	movwf	printf@f,c
  5568  00E656  0EFE               	movlw	high STR_37
  5569  00E658  6E18               	movwf	printf@f+1,c
  5570  00E65A  EC16  F074         	call	_printf	;wreg free
  5571                           
  5572                           ;interface.c: 51: lcdInst(0b11000000);;
  5573  00E65E  0EC0               	movlw	192
  5574  00E660  EC09  F06F         	call	_lcdInst
  5575                           
  5576                           ;interface.c: 52: printf("# soda cans: %d", eepromRead(20));
  5577  00E664  0E84               	movlw	low STR_40
  5578  00E666  6E17               	movwf	printf@f,c
  5579  00E668  0EFE               	movlw	high STR_40
  5580  00E66A  6E18               	movwf	printf@f+1,c
  5581  00E66C  0E14               	movlw	20
  5582  00E66E  EC84  F06F         	call	_eepromRead
  5583  00E672  6E19               	movwf	?_printf+2,c
  5584  00E674  6A1A               	clrf	?_printf+3,c
  5585  00E676  BE19               	btfsc	?_printf+2,7,c
  5586  00E678  061A               	decf	?_printf+3,f,c
  5587  00E67A  EC16  F074         	call	_printf	;wreg free
  5588                           
  5589                           ;interface.c: 53: keycheck();
  5590  00E67E  EC1E  F06F         	call	_keycheck	;wreg free
  5591                           
  5592                           ;interface.c: 54: lcdInst(0b00000001); _delay((unsigned long)((10)*(32000000/4000.0)));;
  5593  00E682  0E01               	movlw	1
  5594  00E684  EC09  F06F         	call	_lcdInst
  5595  00E688  0E68               	movlw	104
  5596  00E68A  6E30               	movwf	??_displayLogs& (0+255),c
  5597  00E68C  0EE4               	movlw	228
  5598  00E68E                     u3697:
  5599  00E68E  2EE8               	decfsz	wreg,f,c
  5600  00E690  D7FE               	bra	u3697
  5601  00E692  2E30               	decfsz	??_displayLogs& (0+255),f,c
  5602  00E694  D7FC               	bra	u3697
  5603  00E696  D000               	nop2	
  5604                           
  5605                           ;interface.c: 55: printf("Run#1    A:Next");
  5606  00E698  0E94               	movlw	low STR_37
  5607  00E69A  6E17               	movwf	printf@f,c
  5608  00E69C  0EFE               	movlw	high STR_37
  5609  00E69E  6E18               	movwf	printf@f+1,c
  5610  00E6A0  EC16  F074         	call	_printf	;wreg free
  5611                           
  5612                           ;interface.c: 56: lcdInst(0b11000000);;
  5613  00E6A4  0EC0               	movlw	192
  5614  00E6A6  EC09  F06F         	call	_lcdInst
  5615                           
  5616                           ;interface.c: 57: printf("# soup cans: 4");
  5617  00E6AA  0ED4               	movlw	low STR_42
  5618  00E6AC  6E17               	movwf	printf@f,c
  5619  00E6AE  0EFE               	movlw	high STR_42
  5620  00E6B0  6E18               	movwf	printf@f+1,c
  5621  00E6B2  EC16  F074         	call	_printf	;wreg free
  5622                           
  5623                           ;interface.c: 58: keycheck();
  5624  00E6B6  EC1E  F06F         	call	_keycheck	;wreg free
  5625  00E6BA  0012               	return		;funcret
  5626  00E6BC                     __end_of_displayLogs:
  5627                           	opt stack 0
  5628                           tblptru	equ	0xFF8
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           intcon2	equ	0xFF1
  5632                           postinc0	equ	0xFEE
  5633                           wreg	equ	0xFE8
  5634                           indf2	equ	0xFDF
  5635                           fsr2h	equ	0xFDA
  5636                           fsr2l	equ	0xFD9
  5637                           status	equ	0xFD8
  5638                           
  5639 ;; *************** function _printf *****************
  5640 ;; Defined at:
  5641 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  f               2   22[COMRAM] PTR const unsigned char 
  5644 ;;		 -> STR_42(15), STR_41(16), STR_40(16), STR_39(16), 
  5645 ;;		 -> STR_38(14), STR_37(16), STR_36(8), STR_35(15), 
  5646 ;;		 -> STR_34(8), STR_33(16), STR_32(7), STR_31(19), 
  5647 ;;		 -> STR_30(8), STR_29(12), STR_28(13), STR_27(11), 
  5648 ;;		 -> STR_26(6), STR_25(13), STR_24(11), STR_23(9), 
  5649 ;;		 -> STR_22(11), STR_21(10), STR_20(14), STR_19(11), 
  5650 ;;		 -> STR_18(14), STR_17(17), STR_16(8), STR_15(14), 
  5651 ;;		 -> STR_14(3), STR_13(12), STR_12(3), STR_11(12), 
  5652 ;;		 -> STR_10(3), STR_9(12), STR_8(11), STR_7(13), 
  5653 ;;		 -> STR_6(13), STR_5(16), STR_4(12), STR_3(12), 
  5654 ;;		 -> STR_2(16), STR_1(16), 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;  idx             1   34[COMRAM] unsigned char 
  5657 ;;  val             4   39[COMRAM] unsigned long 
  5658 ;;  tmpval          4    0        struct .
  5659 ;;  cp              3    0        PTR const unsigned char 
  5660 ;;  width           2   43[COMRAM] int 
  5661 ;;  ap              2   37[COMRAM] PTR void [1]
  5662 ;;		 -> ?_printf(2), 
  5663 ;;  prec            2   35[COMRAM] int 
  5664 ;;  len             2    0        unsigned int 
  5665 ;;  c               1   46[COMRAM] char 
  5666 ;;  flag            1   45[COMRAM] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  2   22[COMRAM] int 
  5669 ;; Registers used:
  5670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5676 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;Total ram usage:       25 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    2
  5683 ;; This function calls:
  5684 ;;		___lldiv
  5685 ;;		___llmod
  5686 ;;		___wmul
  5687 ;;		_isdigit
  5688 ;;		_putch
  5689 ;; This function is called by:
  5690 ;;		_main
  5691 ;;		_updateS1
  5692 ;;		_homescreen
  5693 ;;		_displayLogs
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text18
  5698  00E82C                     __ptext18:
  5699                           	opt stack 0
  5700  00E82C                     _printf:
  5701                           	opt stack 27
  5702                           
  5703                           ;doprnt.c: 466: va_list ap;
  5704                           ;doprnt.c: 499: signed char c;
  5705                           ;doprnt.c: 501: int width;
  5706                           ;doprnt.c: 504: int prec;
  5707                           ;doprnt.c: 508: unsigned char flag;
  5708                           ;doprnt.c: 523: union {
  5709                           ;doprnt.c: 524: unsigned long vd;
  5710                           ;doprnt.c: 525: double integ;
  5711                           ;doprnt.c: 526: } tmpval;
  5712                           ;doprnt.c: 528: unsigned long val;
  5713                           ;doprnt.c: 529: unsigned len;
  5714                           ;doprnt.c: 530: const char * cp;
  5715                           ;doprnt.c: 533: *ap = __va_start();
  5716                           
  5717                           ;incstack = 0
  5718  00E82C  0E19               	movlw	low (?_printf+2)
  5719  00E82E  6E26               	movwf	printf@ap,c
  5720  00E830  0E00               	movlw	high (?_printf+2)
  5721  00E832  6E27               	movwf	printf@ap+1,c
  5722                           
  5723                           ;doprnt.c: 536: while(c = *f++) {
  5724  00E834  D1F7               	goto	l2907
  5725  00E836                     l2765:
  5726                           
  5727                           ;doprnt.c: 538: if(c != '%')
  5728  00E836  0E25               	movlw	37
  5729  00E838  182F               	xorwf	printf@c,w,c
  5730  00E83A  B4D8               	btfsc	status,2,c
  5731  00E83C  D004               	goto	l2769
  5732                           
  5733                           ;doprnt.c: 540: {
  5734                           ;doprnt.c: 541: (putch(c) );
  5735  00E83E  502F               	movf	printf@c,w,c
  5736  00E840  EC0F  F06F         	call	_putch
  5737                           
  5738                           ;doprnt.c: 542: continue;
  5739  00E844  D1EF               	goto	l2907
  5740  00E846                     l2769:
  5741                           
  5742                           ;doprnt.c: 543: }
  5743                           ;doprnt.c: 546: width = 0;
  5744  00E846  0E00               	movlw	0
  5745  00E848  6E2D               	movwf	printf@width+1,c
  5746  00E84A  0E00               	movlw	0
  5747  00E84C  6E2C               	movwf	printf@width,c
  5748                           
  5749                           ;doprnt.c: 548: flag = 0;
  5750  00E84E  0E00               	movlw	0
  5751  00E850  6E2E               	movwf	printf@flag,c
  5752                           
  5753                           ;doprnt.c: 551: switch(*f) {
  5754                           
  5755                           ;doprnt.c: 550: for(;;) {
  5756  00E852  D003               	goto	l2775
  5757  00E854                     l2771:
  5758                           
  5759                           ;doprnt.c: 580: flag |= 0x04;
  5760  00E854  842E               	bsf	printf@flag,2,c
  5761                           
  5762                           ;doprnt.c: 581: f++;
  5763  00E856  4A17               	infsnz	printf@f,f,c
  5764  00E858  2A18               	incf	printf@f+1,f,c
  5765  00E85A                     l2775:
  5766  00E85A  C017  FFF6         	movff	printf@f,tblptrl
  5767  00E85E  C018  FFF7         	movff	printf@f+1,tblptrh
  5768  00E862                     	if	0	;tblptru may be non-zero
  5769  00E862                     	endif
  5770  00E862                     	if	0	;tblptru may be non-zero
  5771  00E862                     	endif
  5772  00E862  0008               	tblrd		*
  5773  00E864  50F5               	movf	tablat,w,c
  5774                           
  5775                           ; Switch size 1, requested type "space"
  5776                           ; Number of cases is 1, Range of values is 48 to 48
  5777                           ; switch strategies available:
  5778                           ; Name         Instructions Cycles
  5779                           ; simple_byte            4     3 (average)
  5780                           ;	Chosen strategy is simple_byte
  5781  00E866  0A30               	xorlw	48	; case 48
  5782  00E868  B4D8               	btfsc	status,2,c
  5783  00E86A  D7F4               	goto	l2771
  5784                           
  5785                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5786                           
  5787                           ;doprnt.c: 586: }
  5788                           
  5789                           ;doprnt.c: 585: break;
  5790  00E86C  C017  FFF6         	movff	printf@f,tblptrl
  5791  00E870  C018  FFF7         	movff	printf@f+1,tblptrh
  5792  00E874                     	if	0	;tblptru may be non-zero
  5793  00E874                     	endif
  5794  00E874                     	if	0	;tblptru may be non-zero
  5795  00E874                     	endif
  5796  00E874  0008               	tblrd		*
  5797  00E876  50F5               	movf	tablat,w,c
  5798  00E878  EC3D  F06F         	call	_isdigit
  5799  00E87C  A0D8               	btfss	status,0,c
  5800  00E87E  D03A               	goto	l2797
  5801                           
  5802                           ;doprnt.c: 598: width = 0;
  5803  00E880  0E00               	movlw	0
  5804  00E882  6E2D               	movwf	printf@width+1,c
  5805  00E884  0E00               	movlw	0
  5806  00E886  6E2C               	movwf	printf@width,c
  5807  00E888                     l2781:
  5808                           
  5809                           ;doprnt.c: 600: width *= 10;
  5810  00E888  C02C  F001         	movff	printf@width,___wmul@multiplier
  5811  00E88C  C02D  F002         	movff	printf@width+1,___wmul@multiplier+1
  5812  00E890  0E00               	movlw	0
  5813  00E892  6E04               	movwf	___wmul@multiplicand+1,c
  5814  00E894  0E0A               	movlw	10
  5815  00E896  6E03               	movwf	___wmul@multiplicand,c
  5816  00E898  EC5E  F06F         	call	___wmul	;wreg free
  5817  00E89C  C001  F02C         	movff	?___wmul,printf@width
  5818  00E8A0  C002  F02D         	movff	?___wmul+1,printf@width+1
  5819                           
  5820                           ;doprnt.c: 601: width += *f++ - '0';
  5821  00E8A4  0ED0               	movlw	208
  5822  00E8A6  6E1F               	movwf	??_printf& (0+255),c
  5823  00E8A8  0EFF               	movlw	255
  5824  00E8AA  6E20               	movwf	(??_printf+1)& (0+255),c
  5825  00E8AC  C017  FFF6         	movff	printf@f,tblptrl
  5826  00E8B0  C018  FFF7         	movff	printf@f+1,tblptrh
  5827  00E8B4                     	if	0	;tblptru may be non-zero
  5828  00E8B4                     	endif
  5829  00E8B4                     	if	0	;tblptru may be non-zero
  5830  00E8B4                     	endif
  5831  00E8B4  0008               	tblrd		*
  5832  00E8B6  50F5               	movf	tablat,w,c
  5833  00E8B8  6E21               	movwf	(??_printf+2)& (0+255),c
  5834  00E8BA  6A22               	clrf	(??_printf+3)& (0+255),c
  5835  00E8BC  501F               	movf	??_printf,w,c
  5836  00E8BE  2621               	addwf	??_printf+2,f,c
  5837  00E8C0  5020               	movf	??_printf+1,w,c
  5838  00E8C2  2222               	addwfc	??_printf+3,f,c
  5839  00E8C4  5021               	movf	??_printf+2,w,c
  5840  00E8C6  262C               	addwf	printf@width,f,c
  5841  00E8C8  5022               	movf	??_printf+3,w,c
  5842  00E8CA  222D               	addwfc	printf@width+1,f,c
  5843  00E8CC  4A17               	infsnz	printf@f,f,c
  5844  00E8CE  2A18               	incf	printf@f+1,f,c
  5845                           
  5846                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5847  00E8D0  C017  FFF6         	movff	printf@f,tblptrl
  5848  00E8D4  C018  FFF7         	movff	printf@f+1,tblptrh
  5849  00E8D8                     	if	0	;tblptru may be non-zero
  5850  00E8D8                     	endif
  5851  00E8D8                     	if	0	;tblptru may be non-zero
  5852  00E8D8                     	endif
  5853  00E8D8  0008               	tblrd		*
  5854  00E8DA  50F5               	movf	tablat,w,c
  5855  00E8DC  EC3D  F06F         	call	_isdigit
  5856  00E8E0  A0D8               	btfss	status,0,c
  5857  00E8E2  D008               	goto	l2797
  5858  00E8E4  D7D1               	goto	l2781
  5859  00E8E6                     l2789:
  5860                           
  5861                           ;doprnt.c: 643: flag |= 0x10;
  5862  00E8E6  882E               	bsf	printf@flag,4,c
  5863                           
  5864                           ;doprnt.c: 644: goto loop;
  5865  00E8E8  D005               	goto	l2797
  5866  00E8EA                     l2791:
  5867                           
  5868                           ;doprnt.c: 721: flag |= 0x80;
  5869  00E8EA  8E2E               	bsf	printf@flag,7,c
  5870                           
  5871                           ;doprnt.c: 723: break;
  5872  00E8EC  D020               	goto	l2799
  5873  00E8EE                     l2793:
  5874                           
  5875                           ;doprnt.c: 818: flag |= 0xC0;
  5876  00E8EE  0EC0               	movlw	192
  5877  00E8F0  122E               	iorwf	printf@flag,f,c
  5878                           
  5879                           ;doprnt.c: 822: }
  5880                           
  5881                           ;doprnt.c: 819: break;
  5882  00E8F2  D01D               	goto	l2799
  5883  00E8F4                     l2797:
  5884  00E8F4  C017  FFF6         	movff	printf@f,tblptrl
  5885  00E8F8  C018  FFF7         	movff	printf@f+1,tblptrh
  5886  00E8FC  4A17               	infsnz	printf@f,f,c
  5887  00E8FE  2A18               	incf	printf@f+1,f,c
  5888  00E900                     	if	0	;tblptru may be non-zero
  5889  00E900                     	endif
  5890  00E900                     	if	0	;tblptru may be non-zero
  5891  00E900                     	endif
  5892  00E900  0008               	tblrd		*
  5893  00E902  CFF5 F02F          	movff	tablat,printf@c
  5894  00E906  502F               	movf	printf@c,w,c
  5895                           
  5896                           ; Switch size 1, requested type "space"
  5897                           ; Number of cases is 6, Range of values is 0 to 120
  5898                           ; switch strategies available:
  5899                           ; Name         Instructions Cycles
  5900                           ; simple_byte           19    10 (average)
  5901                           ;	Chosen strategy is simple_byte
  5902  00E908  0A00               	xorlw	0	; case 0
  5903  00E90A  B4D8               	btfsc	status,2,c
  5904  00E90C  0012               	return	
  5905  00E90E  0A64               	xorlw	100	; case 100
  5906  00E910  B4D8               	btfsc	status,2,c
  5907  00E912  D00D               	goto	l2799
  5908  00E914  0A0D               	xorlw	13	; case 105
  5909  00E916  B4D8               	btfsc	status,2,c
  5910  00E918  D00A               	goto	l2799
  5911  00E91A  0A05               	xorlw	5	; case 108
  5912  00E91C  B4D8               	btfsc	status,2,c
  5913  00E91E  D7E3               	goto	l2789
  5914  00E920  0A19               	xorlw	25	; case 117
  5915  00E922  B4D8               	btfsc	status,2,c
  5916  00E924  D7E4               	goto	l2793
  5917  00E926  0A0D               	xorlw	13	; case 120
  5918  00E928  B4D8               	btfsc	status,2,c
  5919  00E92A  D7DF               	goto	l2791
  5920  00E92C  D17B               	goto	l2907
  5921  00E92E                     l2799:
  5922                           
  5923                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  5924  00E92E  C02E  F01F         	movff	printf@flag,??_printf
  5925  00E932  0EC0               	movlw	192
  5926  00E934  161F               	andwf	??_printf,f,c
  5927  00E936  A4D8               	btfss	status,2,c
  5928  00E938  D02E               	goto	l678
  5929                           
  5930                           ;doprnt.c: 1253: {
  5931                           ;doprnt.c: 1255: if(flag & 0x10)
  5932  00E93A  A82E               	btfss	printf@flag,4,c
  5933  00E93C  D00E               	goto	l2807
  5934                           
  5935                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  5936  00E93E  C026  FFD9         	movff	printf@ap,fsr2l
  5937  00E942  C027  FFDA         	movff	printf@ap+1,fsr2h
  5938  00E946  CFDE F028          	movff	postinc2,printf@val
  5939  00E94A  CFDE F029          	movff	postinc2,printf@val+1
  5940  00E94E  CFDE F02A          	movff	postinc2,printf@val+2
  5941  00E952  CFDE F02B          	movff	postinc2,printf@val+3
  5942  00E956  0E04               	movlw	4
  5943  00E958  D00E               	goto	L2
  5944  00E95A                     l2807:
  5945                           
  5946                           ;doprnt.c: 1257: else
  5947                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5948  00E95A  C026  FFD9         	movff	printf@ap,fsr2l
  5949  00E95E  C027  FFDA         	movff	printf@ap+1,fsr2h
  5950  00E962  CFDE F028          	movff	postinc2,printf@val
  5951  00E966  CFDD F029          	movff	postdec2,printf@val+1
  5952  00E96A  0E00               	movlw	0
  5953  00E96C  BE29               	btfsc	printf@val+1,7,c
  5954  00E96E  0EFF               	movlw	-1
  5955  00E970  6E2A               	movwf	printf@val+2,c
  5956  00E972  6E2B               	movwf	printf@val+3,c
  5957  00E974  0E02               	movlw	2
  5958  00E976                     L2:
  5959  00E976  2626               	addwf	printf@ap,f,c
  5960  00E978  0E00               	movlw	0
  5961  00E97A  2227               	addwfc	printf@ap+1,f,c
  5962                           
  5963                           ;doprnt.c: 1261: if((long)val < 0) {
  5964  00E97C  AE2B               	btfss	printf@val+3,7,c
  5965  00E97E  D06A               	goto	l2855
  5966                           
  5967                           ;doprnt.c: 1262: flag |= 0x03;
  5968  00E980  0E03               	movlw	3
  5969  00E982  122E               	iorwf	printf@flag,f,c
  5970                           
  5971                           ;doprnt.c: 1263: val = -val;
  5972  00E984  1E2B               	comf	printf@val+3,f,c
  5973  00E986  1E2A               	comf	printf@val+2,f,c
  5974  00E988  1E29               	comf	printf@val+1,f,c
  5975  00E98A  6C28               	negf	printf@val,c
  5976  00E98C  0E00               	movlw	0
  5977  00E98E  2229               	addwfc	printf@val+1,f,c
  5978  00E990  222A               	addwfc	printf@val+2,f,c
  5979  00E992  222B               	addwfc	printf@val+3,f,c
  5980                           
  5981                           ;doprnt.c: 1264: }
  5982                           ;doprnt.c: 1266: }
  5983  00E994  D05F               	goto	l2855
  5984  00E996                     l678:
  5985                           
  5986                           ;doprnt.c: 1268: else
  5987                           ;doprnt.c: 1273: {
  5988                           ;doprnt.c: 1281: if(flag & 0x10)
  5989  00E996  A82E               	btfss	printf@flag,4,c
  5990  00E998  D00E               	goto	l2821
  5991                           
  5992                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  5993  00E99A  C026  FFD9         	movff	printf@ap,fsr2l
  5994  00E99E  C027  FFDA         	movff	printf@ap+1,fsr2h
  5995  00E9A2  CFDE F028          	movff	postinc2,printf@val
  5996  00E9A6  CFDE F029          	movff	postinc2,printf@val+1
  5997  00E9AA  CFDE F02A          	movff	postinc2,printf@val+2
  5998  00E9AE  CFDE F02B          	movff	postinc2,printf@val+3
  5999  00E9B2  0E04               	movlw	4
  6000  00E9B4  D00F               	goto	L3
  6001  00E9B6                     l2821:
  6002                           
  6003                           ;doprnt.c: 1283: else
  6004                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6005  00E9B6  C026  FFD9         	movff	printf@ap,fsr2l
  6006  00E9BA  C027  FFDA         	movff	printf@ap+1,fsr2h
  6007  00E9BE  CFDE F01F          	movff	postinc2,??_printf
  6008  00E9C2  CFDD F020          	movff	postdec2,??_printf+1
  6009  00E9C6  C01F  F028         	movff	??_printf,printf@val
  6010  00E9CA  C020  F029         	movff	??_printf+1,printf@val+1
  6011  00E9CE  6A2A               	clrf	printf@val+2,c
  6012  00E9D0  6A2B               	clrf	printf@val+3,c
  6013  00E9D2  0E02               	movlw	2
  6014  00E9D4                     L3:
  6015  00E9D4  2626               	addwf	printf@ap,f,c
  6016  00E9D6  0E00               	movlw	0
  6017  00E9D8  2227               	addwfc	printf@ap+1,f,c
  6018                           
  6019                           ;doprnt.c: 1287: }
  6020                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  6021  00E9DA  D03C               	goto	l2855
  6022  00E9DC                     l2825:
  6023                           
  6024                           ;doprnt.c: 1302: case 0xC0:
  6025                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6026  00E9DC  0E01               	movlw	1
  6027  00E9DE  6E2F               	movwf	printf@c,c
  6028  00E9E0                     l2827:
  6029  00E9E0  0E0A               	movlw	10
  6030  00E9E2  182F               	xorwf	printf@c,w,c
  6031  00E9E4  B4D8               	btfsc	status,2,c
  6032  00E9E6  D041               	goto	l2857
  6033                           
  6034                           ;doprnt.c: 1306: if(val < dpowers[c])
  6035  00E9E8  502F               	movf	printf@c,w,c
  6036  00E9EA  0D04               	mullw	4
  6037  00E9EC  0EDF               	movlw	low _dpowers
  6038  00E9EE  24F3               	addwf	prodl,w,c
  6039  00E9F0  6EF6               	movwf	tblptrl,c
  6040  00E9F2  0EFD               	movlw	high _dpowers
  6041  00E9F4  20F4               	addwfc	prodh,w,c
  6042  00E9F6  6EF7               	movwf	tblptrh,c
  6043  00E9F8                     	if	0	;There are less than 3 active tblptr bytes
  6044  00E9F8                     	endif
  6045  00E9F8  0009               	tblrd		*+
  6046  00E9FA  50F5               	movf	tablat,w,c
  6047  00E9FC  5C28               	subwf	printf@val,w,c
  6048  00E9FE  0009               	tblrd		*+
  6049  00EA00  50F5               	movf	tablat,w,c
  6050  00EA02  5829               	subwfb	printf@val+1,w,c
  6051  00EA04  0009               	tblrd		*+
  6052  00EA06  50F5               	movf	tablat,w,c
  6053  00EA08  582A               	subwfb	printf@val+2,w,c
  6054  00EA0A  0009               	tblrd		*+
  6055  00EA0C  50F5               	movf	tablat,w,c
  6056  00EA0E  582B               	subwfb	printf@val+3,w,c
  6057  00EA10  A0D8               	btfss	status,0,c
  6058  00EA12  D02B               	goto	l2857
  6059                           
  6060                           ;doprnt.c: 1307: break;
  6061  00EA14  2A2F               	incf	printf@c,f,c
  6062  00EA16  D7E4               	goto	l2827
  6063  00EA18                     l2839:
  6064                           
  6065                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6066  00EA18  0E01               	movlw	1
  6067  00EA1A  6E2F               	movwf	printf@c,c
  6068  00EA1C                     l2841:
  6069  00EA1C  0E08               	movlw	8
  6070  00EA1E  182F               	xorwf	printf@c,w,c
  6071  00EA20  B4D8               	btfsc	status,2,c
  6072  00EA22  D023               	goto	l2857
  6073                           
  6074                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6075  00EA24  502F               	movf	printf@c,w,c
  6076  00EA26  0D04               	mullw	4
  6077  00EA28  0E07               	movlw	low _hexpowers
  6078  00EA2A  24F3               	addwf	prodl,w,c
  6079  00EA2C  6EF6               	movwf	tblptrl,c
  6080  00EA2E  0EFE               	movlw	high _hexpowers
  6081  00EA30  20F4               	addwfc	prodh,w,c
  6082  00EA32  6EF7               	movwf	tblptrh,c
  6083  00EA34                     	if	0	;There are less than 3 active tblptr bytes
  6084  00EA34                     	endif
  6085  00EA34  0009               	tblrd		*+
  6086  00EA36  50F5               	movf	tablat,w,c
  6087  00EA38  5C28               	subwf	printf@val,w,c
  6088  00EA3A  0009               	tblrd		*+
  6089  00EA3C  50F5               	movf	tablat,w,c
  6090  00EA3E  5829               	subwfb	printf@val+1,w,c
  6091  00EA40  0009               	tblrd		*+
  6092  00EA42  50F5               	movf	tablat,w,c
  6093  00EA44  582A               	subwfb	printf@val+2,w,c
  6094  00EA46  0009               	tblrd		*+
  6095  00EA48  50F5               	movf	tablat,w,c
  6096  00EA4A  582B               	subwfb	printf@val+3,w,c
  6097  00EA4C  A0D8               	btfss	status,0,c
  6098  00EA4E  D00D               	goto	l2857
  6099                           
  6100                           ;doprnt.c: 1318: break;
  6101  00EA50  2A2F               	incf	printf@c,f,c
  6102  00EA52  D7E4               	goto	l2841
  6103  00EA54                     l2855:
  6104  00EA54  502E               	movf	printf@flag,w,c
  6105  00EA56  0BC0               	andlw	192
  6106                           
  6107                           ; Switch size 1, requested type "space"
  6108                           ; Number of cases is 3, Range of values is 0 to 192
  6109                           ; switch strategies available:
  6110                           ; Name         Instructions Cycles
  6111                           ; simple_byte           10     6 (average)
  6112                           ;	Chosen strategy is simple_byte
  6113  00EA58  0A00               	xorlw	0	; case 0
  6114  00EA5A  B4D8               	btfsc	status,2,c
  6115  00EA5C  D7BF               	goto	l2825
  6116  00EA5E  0A80               	xorlw	128	; case 128
  6117  00EA60  B4D8               	btfsc	status,2,c
  6118  00EA62  D7DA               	goto	l2839
  6119  00EA64  0A40               	xorlw	64	; case 192
  6120  00EA66  B4D8               	btfsc	status,2,c
  6121  00EA68  D7B9               	goto	l2825
  6122  00EA6A                     l2857:
  6123                           
  6124                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6125  00EA6A  502C               	movf	printf@width,w,c
  6126  00EA6C  102D               	iorwf	printf@width+1,w,c
  6127  00EA6E  B4D8               	btfsc	status,2,c
  6128  00EA70  D009               	goto	l2863
  6129  00EA72  C02E  F01F         	movff	printf@flag,??_printf
  6130  00EA76  0E03               	movlw	3
  6131  00EA78  161F               	andwf	??_printf,f,c
  6132  00EA7A  B4D8               	btfsc	status,2,c
  6133  00EA7C  D003               	goto	l2863
  6134                           
  6135                           ;doprnt.c: 1346: width--;
  6136  00EA7E  062C               	decf	printf@width,f,c
  6137  00EA80  A0D8               	btfss	status,0,c
  6138  00EA82  062D               	decf	printf@width+1,f,c
  6139  00EA84                     l2863:
  6140                           
  6141                           ;doprnt.c: 1381: if(width > c)
  6142  00EA84  0E80               	movlw	128
  6143  00EA86  BE2F               	btfsc	printf@c,7,c
  6144  00EA88  0E7F               	movlw	127
  6145  00EA8A  6E1F               	movwf	??_printf& (0+255),c
  6146  00EA8C  502C               	movf	printf@width,w,c
  6147  00EA8E  5C2F               	subwf	printf@c,w,c
  6148  00EA90  502D               	movf	printf@width+1,w,c
  6149  00EA92  0A80               	xorlw	128
  6150  00EA94  581F               	subwfb	??_printf& (0+255),w,c
  6151  00EA96  B0D8               	btfsc	status,0,c
  6152  00EA98  D007               	goto	l2867
  6153                           
  6154                           ;doprnt.c: 1382: width -= c;
  6155  00EA9A  502F               	movf	printf@c,w,c
  6156  00EA9C  5E2C               	subwf	printf@width,f,c
  6157  00EA9E  0E00               	movlw	0
  6158  00EAA0  BE2F               	btfsc	printf@c,7,c
  6159  00EAA2  0EFF               	movlw	255
  6160  00EAA4  5A2D               	subwfb	printf@width+1,f,c
  6161  00EAA6  D004               	goto	l2869
  6162  00EAA8                     l2867:
  6163                           
  6164                           ;doprnt.c: 1383: else
  6165                           ;doprnt.c: 1384: width = 0;
  6166  00EAA8  0E00               	movlw	0
  6167  00EAAA  6E2D               	movwf	printf@width+1,c
  6168  00EAAC  0E00               	movlw	0
  6169  00EAAE  6E2C               	movwf	printf@width,c
  6170  00EAB0                     l2869:
  6171                           
  6172                           ;doprnt.c: 1387: if(flag & 0x04) {
  6173  00EAB0  A42E               	btfss	printf@flag,2,c
  6174  00EAB2  D014               	goto	l2881
  6175                           
  6176                           ;doprnt.c: 1392: if(flag & 0x03)
  6177  00EAB4  C02E  F01F         	movff	printf@flag,??_printf
  6178  00EAB8  0E03               	movlw	3
  6179  00EABA  161F               	andwf	??_printf,f,c
  6180  00EABC  B4D8               	btfsc	status,2,c
  6181  00EABE  D003               	goto	l2875
  6182                           
  6183                           ;doprnt.c: 1393: (putch('-') );
  6184  00EAC0  0E2D               	movlw	45
  6185  00EAC2  EC0F  F06F         	call	_putch
  6186  00EAC6                     l2875:
  6187                           
  6188                           ;doprnt.c: 1415: if(width)
  6189  00EAC6  502C               	movf	printf@width,w,c
  6190  00EAC8  102D               	iorwf	printf@width+1,w,c
  6191  00EACA  B4D8               	btfsc	status,2,c
  6192  00EACC  D01E               	goto	l2891
  6193                           
  6194                           ;doprnt.c: 1417: (putch('0') );
  6195                           
  6196                           ;doprnt.c: 1416: do
  6197  00EACE  0E30               	movlw	48
  6198  00EAD0  EC0F  F06F         	call	_putch
  6199                           
  6200                           ;doprnt.c: 1418: while(--width);
  6201  00EAD4  062C               	decf	printf@width,f,c
  6202  00EAD6  A0D8               	btfss	status,0,c
  6203  00EAD8  062D               	decf	printf@width+1,f,c
  6204  00EADA  D7F5               	goto	l2875
  6205  00EADC                     l2881:
  6206                           
  6207                           ;doprnt.c: 1422: {
  6208                           ;doprnt.c: 1424: if(width
  6209                           ;doprnt.c: 1428: )
  6210  00EADC  502C               	movf	printf@width,w,c
  6211  00EADE  102D               	iorwf	printf@width+1,w,c
  6212  00EAE0  B4D8               	btfsc	status,2,c
  6213  00EAE2  D00A               	goto	l2887
  6214  00EAE4                     l2883:
  6215                           
  6216                           ;doprnt.c: 1430: (putch(' ') );
  6217  00EAE4  0E20               	movlw	32
  6218  00EAE6  EC0F  F06F         	call	_putch
  6219                           
  6220                           ;doprnt.c: 1431: while(--width);
  6221  00EAEA  062C               	decf	printf@width,f,c
  6222  00EAEC  A0D8               	btfss	status,0,c
  6223  00EAEE  062D               	decf	printf@width+1,f,c
  6224  00EAF0  502C               	movf	printf@width,w,c
  6225  00EAF2  102D               	iorwf	printf@width+1,w,c
  6226  00EAF4  A4D8               	btfss	status,2,c
  6227  00EAF6  D7F6               	goto	l2883
  6228  00EAF8                     l2887:
  6229                           
  6230                           ;doprnt.c: 1438: if(flag & 0x03)
  6231  00EAF8  C02E  F01F         	movff	printf@flag,??_printf
  6232  00EAFC  0E03               	movlw	3
  6233  00EAFE  161F               	andwf	??_printf,f,c
  6234  00EB00  B4D8               	btfsc	status,2,c
  6235  00EB02  D003               	goto	l2891
  6236                           
  6237                           ;doprnt.c: 1439: (putch('-') );
  6238  00EB04  0E2D               	movlw	45
  6239  00EB06  EC0F  F06F         	call	_putch
  6240  00EB0A                     l2891:
  6241                           
  6242                           ;doprnt.c: 1469: }
  6243                           ;doprnt.c: 1472: prec = c;
  6244  00EB0A  502F               	movf	printf@c,w,c
  6245  00EB0C  6E24               	movwf	printf@prec,c
  6246  00EB0E  6A25               	clrf	printf@prec+1,c
  6247  00EB10  BE24               	btfsc	printf@prec,7,c
  6248  00EB12  0625               	decf	printf@prec+1,f,c
  6249                           
  6250                           ;doprnt.c: 1474: while(prec--) {
  6251  00EB14  D07F               	goto	l2905
  6252  00EB16                     l2893:
  6253                           
  6254                           ;doprnt.c: 1486: case 0xC0:
  6255                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6256  00EB16  C024  F01F         	movff	printf@prec,??_printf
  6257  00EB1A  C025  F020         	movff	printf@prec+1,??_printf+1
  6258  00EB1E  90D8               	bcf	status,0,c
  6259  00EB20  361F               	rlcf	??_printf,f,c
  6260  00EB22  3620               	rlcf	??_printf+1,f,c
  6261  00EB24  90D8               	bcf	status,0,c
  6262  00EB26  361F               	rlcf	??_printf,f,c
  6263  00EB28  3620               	rlcf	??_printf+1,f,c
  6264  00EB2A  0EDF               	movlw	low _dpowers
  6265  00EB2C  241F               	addwf	??_printf,w,c
  6266  00EB2E  6EF6               	movwf	tblptrl,c
  6267  00EB30  0EFD               	movlw	high _dpowers
  6268  00EB32  2020               	addwfc	??_printf+1,w,c
  6269  00EB34  6EF7               	movwf	tblptrh,c
  6270  00EB36                     	if	0	;There are less than 3 active tblptr bytes
  6271  00EB36                     	endif
  6272  00EB36  0009               	tblrd		*+
  6273  00EB38  CFF5 F005          	movff	tablat,___lldiv@divisor
  6274  00EB3C  0009               	tblrd		*+
  6275  00EB3E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6276  00EB42  0009               	tblrd		*+
  6277  00EB44  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6278  00EB48  000A               	tblrd		*-
  6279  00EB4A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6280  00EB4E  C028  F001         	movff	printf@val,___lldiv@dividend
  6281  00EB52  C029  F002         	movff	printf@val+1,___lldiv@dividend+1
  6282  00EB56  C02A  F003         	movff	printf@val+2,___lldiv@dividend+2
  6283  00EB5A  C02B  F004         	movff	printf@val+3,___lldiv@dividend+3
  6284  00EB5E  EC65  F072         	call	___lldiv	;wreg free
  6285  00EB62  C001  F00E         	movff	?___lldiv,___llmod@dividend
  6286  00EB66  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  6287  00EB6A  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  6288  00EB6E  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  6289  00EB72  0E0A               	movlw	10
  6290  00EB74  6E12               	movwf	___llmod@divisor,c
  6291  00EB76  0E00               	movlw	0
  6292  00EB78  6E13               	movwf	___llmod@divisor+1,c
  6293  00EB7A  0E00               	movlw	0
  6294  00EB7C  6E14               	movwf	___llmod@divisor+2,c
  6295  00EB7E  0E00               	movlw	0
  6296  00EB80  6E15               	movwf	___llmod@divisor+3,c
  6297  00EB82  ECC5  F071         	call	___llmod	;wreg free
  6298  00EB86  500E               	movf	?___llmod,w,c
  6299  00EB88  0F30               	addlw	48
  6300  00EB8A  6E2F               	movwf	printf@c,c
  6301                           
  6302                           ;doprnt.c: 1491: break;
  6303  00EB8C  D040               	goto	l2903
  6304  00EB8E                     l2895:
  6305                           
  6306                           ;doprnt.c: 1499: {
  6307                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6308  00EB8E  C028  F001         	movff	printf@val,___lldiv@dividend
  6309  00EB92  C029  F002         	movff	printf@val+1,___lldiv@dividend+1
  6310  00EB96  C02A  F003         	movff	printf@val+2,___lldiv@dividend+2
  6311  00EB9A  C02B  F004         	movff	printf@val+3,___lldiv@dividend+3
  6312  00EB9E  C024  F01F         	movff	printf@prec,??_printf
  6313  00EBA2  C025  F020         	movff	printf@prec+1,??_printf+1
  6314  00EBA6  90D8               	bcf	status,0,c
  6315  00EBA8  361F               	rlcf	??_printf,f,c
  6316  00EBAA  3620               	rlcf	??_printf+1,f,c
  6317  00EBAC  90D8               	bcf	status,0,c
  6318  00EBAE  361F               	rlcf	??_printf,f,c
  6319  00EBB0  3620               	rlcf	??_printf+1,f,c
  6320  00EBB2  0E07               	movlw	low _hexpowers
  6321  00EBB4  241F               	addwf	??_printf,w,c
  6322  00EBB6  6EF6               	movwf	tblptrl,c
  6323  00EBB8  0EFE               	movlw	high _hexpowers
  6324  00EBBA  2020               	addwfc	??_printf+1,w,c
  6325  00EBBC  6EF7               	movwf	tblptrh,c
  6326  00EBBE                     	if	0	;There are less than 3 active tblptr bytes
  6327  00EBBE                     	endif
  6328  00EBBE  0009               	tblrd		*+
  6329  00EBC0  CFF5 F005          	movff	tablat,___lldiv@divisor
  6330  00EBC4  0009               	tblrd		*+
  6331  00EBC6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6332  00EBCA  0009               	tblrd		*+
  6333  00EBCC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6334  00EBD0  000A               	tblrd		*-
  6335  00EBD2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6336  00EBD6  EC65  F072         	call	___lldiv	;wreg free
  6337  00EBDA  5001               	movf	?___lldiv,w,c
  6338  00EBDC  0B0F               	andlw	15
  6339  00EBDE  6E23               	movwf	printf@idx,c
  6340                           
  6341                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6342  00EBE0  5023               	movf	printf@idx,w,c
  6343  00EBE2  0D01               	mullw	1
  6344  00EBE4  0E52               	movlw	low STR_43
  6345  00EBE6  24F3               	addwf	prodl,w,c
  6346  00EBE8  6EF6               	movwf	tblptrl,c
  6347  00EBEA  0EFE               	movlw	high STR_43
  6348  00EBEC  20F4               	addwfc	prodh,w,c
  6349  00EBEE  6EF7               	movwf	tblptrh,c
  6350  00EBF0                     	if	0	;There are less than 3 active tblptr bytes
  6351  00EBF0                     	endif
  6352  00EBF0  0008               	tblrd		*
  6353  00EBF2  CFF5 F02F          	movff	tablat,printf@c
  6354                           
  6355                           ;doprnt.c: 1523: }
  6356                           
  6357                           ;doprnt.c: 1508: }
  6358                           ;doprnt.c: 1510: break;
  6359  00EBF6  D00B               	goto	l2903
  6360  00EBF8                     l2901:
  6361  00EBF8  502E               	movf	printf@flag,w,c
  6362  00EBFA  0BC0               	andlw	192
  6363                           
  6364                           ; Switch size 1, requested type "space"
  6365                           ; Number of cases is 3, Range of values is 0 to 192
  6366                           ; switch strategies available:
  6367                           ; Name         Instructions Cycles
  6368                           ; simple_byte           10     6 (average)
  6369                           ;	Chosen strategy is simple_byte
  6370  00EBFC  0A00               	xorlw	0	; case 0
  6371  00EBFE  B4D8               	btfsc	status,2,c
  6372  00EC00  D78A               	goto	l2893
  6373  00EC02  0A80               	xorlw	128	; case 128
  6374  00EC04  B4D8               	btfsc	status,2,c
  6375  00EC06  D7C3               	goto	l2895
  6376  00EC08  0A40               	xorlw	64	; case 192
  6377  00EC0A  B4D8               	btfsc	status,2,c
  6378  00EC0C  D784               	goto	l2893
  6379  00EC0E                     l2903:
  6380                           
  6381                           ;doprnt.c: 1524: (putch(c) );
  6382  00EC0E  502F               	movf	printf@c,w,c
  6383  00EC10  EC0F  F06F         	call	_putch
  6384  00EC14                     l2905:
  6385  00EC14  0624               	decf	printf@prec,f,c
  6386  00EC16  A0D8               	btfss	status,0,c
  6387  00EC18  0625               	decf	printf@prec+1,f,c
  6388  00EC1A  2824               	incf	printf@prec,w,c
  6389  00EC1C  E1ED               	bnz	l2901
  6390  00EC1E  2825               	incf	printf@prec+1,w,c
  6391  00EC20  A4D8               	btfss	status,2,c
  6392  00EC22  D7EA               	goto	l2901
  6393  00EC24                     l2907:
  6394  00EC24  C017  FFF6         	movff	printf@f,tblptrl
  6395  00EC28  C018  FFF7         	movff	printf@f+1,tblptrh
  6396  00EC2C  4A17               	infsnz	printf@f,f,c
  6397  00EC2E  2A18               	incf	printf@f+1,f,c
  6398  00EC30                     	if	0	;tblptru may be non-zero
  6399  00EC30                     	endif
  6400  00EC30                     	if	0	;tblptru may be non-zero
  6401  00EC30                     	endif
  6402  00EC30  0008               	tblrd		*
  6403  00EC32  CFF5 F02F          	movff	tablat,printf@c
  6404  00EC36  502F               	movf	printf@c,w,c
  6405  00EC38  B4D8               	btfsc	status,2,c
  6406  00EC3A  0012               	return	
  6407  00EC3C  D5FC               	goto	l2765
  6408  00EC3E                     __end_of_printf:
  6409                           	opt stack 0
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           intcon2	equ	0xFF1
  6417                           postinc0	equ	0xFEE
  6418                           wreg	equ	0xFE8
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _putch *****************
  6427 ;; Defined at:
  6428 ;;		line 27 in file "lcd.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  data            1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  data            1    2[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        1 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    1
  6449 ;; This function calls:
  6450 ;;		_lcdNibble
  6451 ;; This function is called by:
  6452 ;;		_printf
  6453 ;; This function uses a non-reentrant model
  6454 ;;
  6455                           
  6456                           	psect	text19
  6457  00DE1E                     __ptext19:
  6458                           	opt stack 0
  6459  00DE1E                     _putch:
  6460                           	opt stack 27
  6461                           
  6462                           ;incstack = 0
  6463                           ;putch@data stored from wreg
  6464  00DE1E  6E03               	movwf	putch@data,c
  6465                           
  6466                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6467  00DE20  848C               	bsf	3980,2,c	;volatile
  6468                           
  6469                           ;lcd.c: 29: lcdNibble(data);
  6470  00DE22  5003               	movf	putch@data,w,c
  6471  00DE24  EC3C  F071         	call	_lcdNibble
  6472  00DE28  0012               	return		;funcret
  6473  00DE2A                     __end_of_putch:
  6474                           	opt stack 0
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon2	equ	0xFF1
  6482                           postinc0	equ	0xFEE
  6483                           wreg	equ	0xFE8
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function _isdigit *****************
  6492 ;; Defined at:
  6493 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  c               1    wreg     unsigned char 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  c               1    2[COMRAM] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;		None               void
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;Total ram usage:        3 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; This function calls:
  6514 ;;		Nothing
  6515 ;; This function is called by:
  6516 ;;		_printf
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text20
  6521  00DE7A                     __ptext20:
  6522                           	opt stack 0
  6523  00DE7A                     _isdigit:
  6524                           	opt stack 28
  6525                           
  6526                           ;incstack = 0
  6527                           ;isdigit@c stored from wreg
  6528  00DE7A  6E03               	movwf	isdigit@c,c
  6529  00DE7C  0E00               	movlw	0
  6530  00DE7E  6E02               	movwf	_isdigit$1262,c
  6531  00DE80  0E3A               	movlw	58
  6532  00DE82  6003               	cpfslt	isdigit@c,c
  6533  00DE84  D005               	goto	l2693
  6534  00DE86  0E2F               	movlw	47
  6535  00DE88  6403               	cpfsgt	isdigit@c,c
  6536  00DE8A  D002               	goto	l2693
  6537  00DE8C  0E01               	movlw	1
  6538  00DE8E  6E02               	movwf	_isdigit$1262,c
  6539  00DE90                     l2693:
  6540  00DE90  C002  F001         	movff	_isdigit$1262,??_isdigit
  6541  00DE94  3001               	rrcf	??_isdigit,w,c
  6542  00DE96  0012               	return	
  6543  00DE98                     __end_of_isdigit:
  6544                           	opt stack 0
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon2	equ	0xFF1
  6552                           postinc0	equ	0xFEE
  6553                           wreg	equ	0xFE8
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           postdec2	equ	0xFDD
  6557                           fsr2h	equ	0xFDA
  6558                           fsr2l	equ	0xFD9
  6559                           status	equ	0xFD8
  6560                           
  6561 ;; *************** function ___wmul *****************
  6562 ;; Defined at:
  6563 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;  multiplier      2    0[COMRAM] unsigned int 
  6566 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;  product         2    4[COMRAM] unsigned int 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  2    0[COMRAM] unsigned int 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0, prodl, prodh
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;Total ram usage:        6 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;;		_timePassed
  6589 ;;		_printf
  6590 ;;		_backlogTest
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           	psect	text21
  6595  00DEBC                     __ptext21:
  6596                           	opt stack 0
  6597  00DEBC                     ___wmul:
  6598                           	opt stack 28
  6599                           
  6600                           ;incstack = 0
  6601  00DEBC  5001               	movf	___wmul@multiplier,w,c
  6602  00DEBE  0203               	mulwf	___wmul@multiplicand,c
  6603  00DEC0  CFF3 F005          	movff	prodl,___wmul@product
  6604  00DEC4  CFF4 F006          	movff	prodh,___wmul@product+1
  6605  00DEC8  5001               	movf	___wmul@multiplier,w,c
  6606  00DECA  0204               	mulwf	___wmul@multiplicand+1,c
  6607  00DECC  50F3               	movf	prodl,w,c
  6608  00DECE  2606               	addwf	___wmul@product+1,f,c
  6609  00DED0  5002               	movf	___wmul@multiplier+1,w,c
  6610  00DED2  0203               	mulwf	___wmul@multiplicand,c
  6611  00DED4  50F3               	movf	prodl,w,c
  6612  00DED6  2606               	addwf	___wmul@product+1,f,c
  6613  00DED8  C005  F001         	movff	___wmul@product,?___wmul
  6614  00DEDC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6615  00DEE0  0012               	return	
  6616  00DEE2                     __end_of___wmul:
  6617                           	opt stack 0
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon2	equ	0xFF1
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           indf2	equ	0xFDF
  6628                           postinc2	equ	0xFDE
  6629                           postdec2	equ	0xFDD
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function ___llmod *****************
  6635 ;; Defined at:
  6636 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  dividend        4   13[COMRAM] unsigned long 
  6639 ;;  divisor         4   17[COMRAM] unsigned long 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  counter         1   21[COMRAM] unsigned char 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  4   13[COMRAM] unsigned long 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6651 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;Total ram usage:        9 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_main
  6661 ;;		_printf
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text22
  6666  00E38A                     __ptext22:
  6667                           	opt stack 0
  6668  00E38A                     ___llmod:
  6669                           	opt stack 28
  6670                           
  6671                           ;incstack = 0
  6672  00E38A  5012               	movf	___llmod@divisor,w,c
  6673  00E38C  1013               	iorwf	___llmod@divisor+1,w,c
  6674  00E38E  1014               	iorwf	___llmod@divisor+2,w,c
  6675  00E390  1015               	iorwf	___llmod@divisor+3,w,c
  6676  00E392  B4D8               	btfsc	status,2,c
  6677  00E394  D024               	goto	l1083
  6678  00E396  0E01               	movlw	1
  6679  00E398  6E16               	movwf	___llmod@counter,c
  6680  00E39A  D006               	goto	l2731
  6681  00E39C                     l2729:
  6682  00E39C  90D8               	bcf	status,0,c
  6683  00E39E  3612               	rlcf	___llmod@divisor,f,c
  6684  00E3A0  3613               	rlcf	___llmod@divisor+1,f,c
  6685  00E3A2  3614               	rlcf	___llmod@divisor+2,f,c
  6686  00E3A4  3615               	rlcf	___llmod@divisor+3,f,c
  6687  00E3A6  2A16               	incf	___llmod@counter,f,c
  6688  00E3A8                     l2731:
  6689  00E3A8  AE15               	btfss	___llmod@divisor+3,7,c
  6690  00E3AA  D7F8               	goto	l2729
  6691  00E3AC                     l2733:
  6692  00E3AC  5012               	movf	___llmod@divisor,w,c
  6693  00E3AE  5C0E               	subwf	___llmod@dividend,w,c
  6694  00E3B0  5013               	movf	___llmod@divisor+1,w,c
  6695  00E3B2  580F               	subwfb	___llmod@dividend+1,w,c
  6696  00E3B4  5014               	movf	___llmod@divisor+2,w,c
  6697  00E3B6  5810               	subwfb	___llmod@dividend+2,w,c
  6698  00E3B8  5015               	movf	___llmod@divisor+3,w,c
  6699  00E3BA  5811               	subwfb	___llmod@dividend+3,w,c
  6700  00E3BC  A0D8               	btfss	status,0,c
  6701  00E3BE  D008               	goto	l2737
  6702  00E3C0  5012               	movf	___llmod@divisor,w,c
  6703  00E3C2  5E0E               	subwf	___llmod@dividend,f,c
  6704  00E3C4  5013               	movf	___llmod@divisor+1,w,c
  6705  00E3C6  5A0F               	subwfb	___llmod@dividend+1,f,c
  6706  00E3C8  5014               	movf	___llmod@divisor+2,w,c
  6707  00E3CA  5A10               	subwfb	___llmod@dividend+2,f,c
  6708  00E3CC  5015               	movf	___llmod@divisor+3,w,c
  6709  00E3CE  5A11               	subwfb	___llmod@dividend+3,f,c
  6710  00E3D0                     l2737:
  6711  00E3D0  90D8               	bcf	status,0,c
  6712  00E3D2  3215               	rrcf	___llmod@divisor+3,f,c
  6713  00E3D4  3214               	rrcf	___llmod@divisor+2,f,c
  6714  00E3D6  3213               	rrcf	___llmod@divisor+1,f,c
  6715  00E3D8  3212               	rrcf	___llmod@divisor,f,c
  6716  00E3DA  2E16               	decfsz	___llmod@counter,f,c
  6717  00E3DC  D7E7               	goto	l2733
  6718  00E3DE                     l1083:
  6719  00E3DE  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6720  00E3E2  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6721  00E3E6  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6722  00E3EA  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6723  00E3EE  0012               	return		;funcret
  6724  00E3F0                     __end_of___llmod:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           intcon2	equ	0xFF1
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function ___lldiv *****************
  6743 ;; Defined at:
  6744 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  dividend        4    0[COMRAM] unsigned long 
  6747 ;;  divisor         4    4[COMRAM] unsigned long 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  quotient        4    8[COMRAM] unsigned long 
  6750 ;;  counter         1   12[COMRAM] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  4    0[COMRAM] unsigned long 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:       13 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_I2C_Master_Init
  6770 ;;		_printf
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text23
  6775  00E4CA                     __ptext23:
  6776                           	opt stack 0
  6777  00E4CA                     ___lldiv:
  6778                           	opt stack 28
  6779                           
  6780                           ;incstack = 0
  6781  00E4CA  0E00               	movlw	0
  6782  00E4CC  6E09               	movwf	___lldiv@quotient,c
  6783  00E4CE  0E00               	movlw	0
  6784  00E4D0  6E0A               	movwf	___lldiv@quotient+1,c
  6785  00E4D2  0E00               	movlw	0
  6786  00E4D4  6E0B               	movwf	___lldiv@quotient+2,c
  6787  00E4D6  0E00               	movlw	0
  6788  00E4D8  6E0C               	movwf	___lldiv@quotient+3,c
  6789  00E4DA  5005               	movf	___lldiv@divisor,w,c
  6790  00E4DC  1006               	iorwf	___lldiv@divisor+1,w,c
  6791  00E4DE  1007               	iorwf	___lldiv@divisor+2,w,c
  6792  00E4E0  1008               	iorwf	___lldiv@divisor+3,w,c
  6793  00E4E2  B4D8               	btfsc	status,2,c
  6794  00E4E4  D02A               	goto	l1073
  6795  00E4E6  0E01               	movlw	1
  6796  00E4E8  6E0D               	movwf	___lldiv@counter,c
  6797  00E4EA  D006               	goto	l2711
  6798  00E4EC                     l2709:
  6799  00E4EC  90D8               	bcf	status,0,c
  6800  00E4EE  3605               	rlcf	___lldiv@divisor,f,c
  6801  00E4F0  3606               	rlcf	___lldiv@divisor+1,f,c
  6802  00E4F2  3607               	rlcf	___lldiv@divisor+2,f,c
  6803  00E4F4  3608               	rlcf	___lldiv@divisor+3,f,c
  6804  00E4F6  2A0D               	incf	___lldiv@counter,f,c
  6805  00E4F8                     l2711:
  6806  00E4F8  AE08               	btfss	___lldiv@divisor+3,7,c
  6807  00E4FA  D7F8               	goto	l2709
  6808  00E4FC                     l2713:
  6809  00E4FC  90D8               	bcf	status,0,c
  6810  00E4FE  3609               	rlcf	___lldiv@quotient,f,c
  6811  00E500  360A               	rlcf	___lldiv@quotient+1,f,c
  6812  00E502  360B               	rlcf	___lldiv@quotient+2,f,c
  6813  00E504  360C               	rlcf	___lldiv@quotient+3,f,c
  6814  00E506  5005               	movf	___lldiv@divisor,w,c
  6815  00E508  5C01               	subwf	___lldiv@dividend,w,c
  6816  00E50A  5006               	movf	___lldiv@divisor+1,w,c
  6817  00E50C  5802               	subwfb	___lldiv@dividend+1,w,c
  6818  00E50E  5007               	movf	___lldiv@divisor+2,w,c
  6819  00E510  5803               	subwfb	___lldiv@dividend+2,w,c
  6820  00E512  5008               	movf	___lldiv@divisor+3,w,c
  6821  00E514  5804               	subwfb	___lldiv@dividend+3,w,c
  6822  00E516  A0D8               	btfss	status,0,c
  6823  00E518  D009               	goto	l2721
  6824  00E51A  5005               	movf	___lldiv@divisor,w,c
  6825  00E51C  5E01               	subwf	___lldiv@dividend,f,c
  6826  00E51E  5006               	movf	___lldiv@divisor+1,w,c
  6827  00E520  5A02               	subwfb	___lldiv@dividend+1,f,c
  6828  00E522  5007               	movf	___lldiv@divisor+2,w,c
  6829  00E524  5A03               	subwfb	___lldiv@dividend+2,f,c
  6830  00E526  5008               	movf	___lldiv@divisor+3,w,c
  6831  00E528  5A04               	subwfb	___lldiv@dividend+3,f,c
  6832  00E52A  8009               	bsf	___lldiv@quotient,0,c
  6833  00E52C                     l2721:
  6834  00E52C  90D8               	bcf	status,0,c
  6835  00E52E  3208               	rrcf	___lldiv@divisor+3,f,c
  6836  00E530  3207               	rrcf	___lldiv@divisor+2,f,c
  6837  00E532  3206               	rrcf	___lldiv@divisor+1,f,c
  6838  00E534  3205               	rrcf	___lldiv@divisor,f,c
  6839  00E536  2E0D               	decfsz	___lldiv@counter,f,c
  6840  00E538  D7E1               	goto	l2713
  6841  00E53A                     l1073:
  6842  00E53A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6843  00E53E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6844  00E542  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6845  00E546  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6846  00E54A  0012               	return		;funcret
  6847  00E54C                     __end_of___lldiv:
  6848                           	opt stack 0
  6849                           tblptru	equ	0xFF8
  6850                           tblptrh	equ	0xFF7
  6851                           tblptrl	equ	0xFF6
  6852                           tablat	equ	0xFF5
  6853                           prodh	equ	0xFF4
  6854                           prodl	equ	0xFF3
  6855                           intcon2	equ	0xFF1
  6856                           postinc0	equ	0xFEE
  6857                           wreg	equ	0xFE8
  6858                           indf2	equ	0xFDF
  6859                           postinc2	equ	0xFDE
  6860                           postdec2	equ	0xFDD
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _lcdInst *****************
  6866 ;; Defined at:
  6867 ;;		line 22 in file "lcd.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  data            1    wreg     unsigned char 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;  data            1    2[COMRAM] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  1    wreg      void 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;Total ram usage:        1 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    1
  6888 ;; This function calls:
  6889 ;;		_lcdNibble
  6890 ;; This function is called by:
  6891 ;;		_main
  6892 ;;		_initLCD
  6893 ;;		_updateS1
  6894 ;;		_homescreen
  6895 ;;		_displayLogs
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text24
  6900  00DE12                     __ptext24:
  6901                           	opt stack 0
  6902  00DE12                     _lcdInst:
  6903                           	opt stack 28
  6904                           
  6905                           ;incstack = 0
  6906                           ;lcdInst@data stored from wreg
  6907  00DE12  6E03               	movwf	lcdInst@data,c
  6908                           
  6909                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6910  00DE14  948C               	bcf	3980,2,c	;volatile
  6911                           
  6912                           ;lcd.c: 24: lcdNibble(data);
  6913  00DE16  5003               	movf	lcdInst@data,w,c
  6914  00DE18  EC3C  F071         	call	_lcdNibble
  6915  00DE1C  0012               	return		;funcret
  6916  00DE1E                     __end_of_lcdInst:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           intcon2	equ	0xFF1
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           indf2	equ	0xFDF
  6928                           postinc2	equ	0xFDE
  6929                           postdec2	equ	0xFDD
  6930                           fsr2h	equ	0xFDA
  6931                           fsr2l	equ	0xFD9
  6932                           status	equ	0xFD8
  6933                           
  6934 ;; *************** function _lcdNibble *****************
  6935 ;; Defined at:
  6936 ;;		line 32 in file "lcd.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  data            1    wreg     unsigned char 
  6939 ;; Auto vars:     Size  Location     Type
  6940 ;;  data            1    1[COMRAM] unsigned char 
  6941 ;;  temp            1    0[COMRAM] unsigned char 
  6942 ;; Return value:  Size  Location     Type
  6943 ;;                  1    wreg      void 
  6944 ;; Registers used:
  6945 ;;		wreg, status,2, status,0
  6946 ;; Tracked objects:
  6947 ;;		On entry : 0/0
  6948 ;;		On exit  : 0/0
  6949 ;;		Unchanged: 0/0
  6950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;Total ram usage:        2 bytes
  6956 ;; Hardware stack levels used:    1
  6957 ;; This function calls:
  6958 ;;		Nothing
  6959 ;; This function is called by:
  6960 ;;		_lcdInst
  6961 ;;		_putch
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           	psect	text25
  6966  00E278                     __ptext25:
  6967                           	opt stack 0
  6968  00E278                     _lcdNibble:
  6969                           	opt stack 27
  6970                           
  6971                           ;incstack = 0
  6972                           ;lcdNibble@data stored from wreg
  6973  00E278  6E02               	movwf	lcdNibble@data,c
  6974                           
  6975                           ;lcd.c: 34: char temp = data & 0xF0;
  6976  00E27A  5002               	movf	lcdNibble@data,w,c
  6977  00E27C  0BF0               	andlw	240
  6978  00E27E  6E01               	movwf	lcdNibble@temp,c
  6979                           
  6980                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6981  00E280  508C               	movf	3980,w,c	;volatile
  6982  00E282  0B0F               	andlw	15
  6983  00E284  6E8C               	movwf	3980,c	;volatile
  6984                           
  6985                           ;lcd.c: 36: LATD = temp | LATD;
  6986  00E286  5001               	movf	lcdNibble@temp,w,c
  6987  00E288  108C               	iorwf	3980,w,c	;volatile
  6988  00E28A  6E8C               	movwf	3980,c	;volatile
  6989                           
  6990                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6991  00E28C  968C               	bcf	3980,3,c	;volatile
  6992                           
  6993                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6994  00E28E  0E42               	movlw	66
  6995  00E290                     u3707:
  6996  00E290  2EE8               	decfsz	wreg,f,c
  6997  00E292  D7FE               	bra	u3707
  6998  00E294  D000               	nop2	
  6999                           
  7000                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7001  00E296  868C               	bsf	3980,3,c	;volatile
  7002                           
  7003                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7004  00E298  0E42               	movlw	66
  7005  00E29A                     u3717:
  7006  00E29A  2EE8               	decfsz	wreg,f,c
  7007  00E29C  D7FE               	bra	u3717
  7008  00E29E  D000               	nop2	
  7009                           
  7010                           ;lcd.c: 43: data = data << 4;
  7011  00E2A0  3802               	swapf	lcdNibble@data,w,c
  7012  00E2A2  0BF0               	andlw	240
  7013  00E2A4  6E02               	movwf	lcdNibble@data,c
  7014                           
  7015                           ;lcd.c: 45: temp = data & 0xF0;
  7016  00E2A6  5002               	movf	lcdNibble@data,w,c
  7017  00E2A8  0BF0               	andlw	240
  7018  00E2AA  6E01               	movwf	lcdNibble@temp,c
  7019                           
  7020                           ;lcd.c: 46: LATD = LATD & 0x0F;
  7021  00E2AC  508C               	movf	3980,w,c	;volatile
  7022  00E2AE  0B0F               	andlw	15
  7023  00E2B0  6E8C               	movwf	3980,c	;volatile
  7024                           
  7025                           ;lcd.c: 47: LATD = temp | LATD;
  7026  00E2B2  5001               	movf	lcdNibble@temp,w,c
  7027  00E2B4  108C               	iorwf	3980,w,c	;volatile
  7028  00E2B6  6E8C               	movwf	3980,c	;volatile
  7029                           
  7030                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  7031  00E2B8  968C               	bcf	3980,3,c	;volatile
  7032                           
  7033                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7034  00E2BA  0E42               	movlw	66
  7035  00E2BC                     u3727:
  7036  00E2BC  2EE8               	decfsz	wreg,f,c
  7037  00E2BE  D7FE               	bra	u3727
  7038  00E2C0  D000               	nop2	
  7039                           
  7040                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  7041  00E2C2  868C               	bsf	3980,3,c	;volatile
  7042                           
  7043                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7044  00E2C4  0E42               	movlw	66
  7045  00E2C6                     u3737:
  7046  00E2C6  2EE8               	decfsz	wreg,f,c
  7047  00E2C8  D7FE               	bra	u3737
  7048  00E2CA  D000               	nop2	
  7049  00E2CC  0012               	return		;funcret
  7050  00E2CE                     __end_of_lcdNibble:
  7051                           	opt stack 0
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           intcon2	equ	0xFF1
  7059                           postinc0	equ	0xFEE
  7060                           wreg	equ	0xFE8
  7061                           indf2	equ	0xFDF
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068 ;; *************** function _keycheck *****************
  7069 ;; Defined at:
  7070 ;;		line 12 in file "interface.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;		None
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      void 
  7077 ;; Registers used:
  7078 ;;		wreg, status,2, status,0
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;Total ram usage:        0 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_main
  7094 ;;		_displayLogs
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text26
  7099  00DE3C                     __ptext26:
  7100                           	opt stack 0
  7101  00DE3C                     _keycheck:
  7102                           	opt stack 30
  7103  00DE3C                     l581:
  7104  00DE3C  A281               	btfss	3969,1,c	;volatile
  7105  00DE3E  D7FE               	goto	l581
  7106                           
  7107                           ;interface.c: 16: }
  7108                           ;interface.c: 17: keypress = (PORTB & 0xF0)>>4;
  7109  00DE40  3881               	swapf	3969,w,c	;volatile
  7110  00DE42  0B0F               	andlw	15
  7111  00DE44  0B0F               	andlw	15
  7112  00DE46  6E70               	movwf	_keypress,c	;volatile
  7113  00DE48                     l584:
  7114  00DE48  B281               	btfsc	3969,1,c	;volatile
  7115  00DE4A  D7FE               	goto	l584
  7116                           
  7117                           ;interface.c: 20: }
  7118                           ;interface.c: 21: __nop();
  7119  00DE4C  F000               	nop	
  7120                           
  7121                           ;interface.c: 22: return;
  7122  00DE4E  0012               	return		;funcret
  7123  00DE50                     __end_of_keycheck:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon2	equ	0xFF1
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           fsr2h	equ	0xFDA
  7138                           fsr2l	equ	0xFD9
  7139                           status	equ	0xFD8
  7140                           
  7141 ;; *************** function _eepromRead *****************
  7142 ;; Defined at:
  7143 ;;		line 61 in file "interface.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  address         1    wreg     char 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  address         1    2[COMRAM] char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      char 
  7150 ;; Registers used:
  7151 ;;		wreg, status,2, status,0
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;Total ram usage:        3 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; This function calls:
  7164 ;;		Nothing
  7165 ;; This function is called by:
  7166 ;;		_displayLogs
  7167 ;;		_updateEEPROM
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text27
  7172  00DF08                     __ptext27:
  7173                           	opt stack 0
  7174  00DF08                     _eepromRead:
  7175                           	opt stack 29
  7176                           
  7177                           ;incstack = 0
  7178                           ;eepromRead@address stored from wreg
  7179  00DF08  6E03               	movwf	eepromRead@address,c
  7180                           
  7181                           ;interface.c: 63: EEADRH = (signed char)(address >> 8);
  7182  00DF0A  C003  F001         	movff	eepromRead@address,??_eepromRead
  7183  00DF0E  0E08               	movlw	8
  7184  00DF10  6E02               	movwf	(??_eepromRead+1)& (0+255),c
  7185  00DF12                     u2185:
  7186  00DF12  3401               	rlcf	??_eepromRead,w,c
  7187  00DF14  3201               	rrcf	??_eepromRead,f,c
  7188  00DF16  2E02               	decfsz	(??_eepromRead+1)& (0+255),f,c
  7189  00DF18  D7FC               	goto	u2185
  7190  00DF1A  5001               	movf	??_eepromRead,w,c
  7191  00DF1C  6EAA               	movwf	4010,c	;volatile
  7192                           
  7193                           ;interface.c: 64: EEADR = (signed char)address;
  7194  00DF1E  C003  FFA9         	movff	eepromRead@address,4009	;volatile
  7195                           
  7196                           ;interface.c: 66: EECON1bits.EEPGD = 0;
  7197  00DF22  9EA6               	bcf	4006,7,c	;volatile
  7198                           
  7199                           ;interface.c: 67: EECON1bits.CFGS = 0;
  7200  00DF24  9CA6               	bcf	4006,6,c	;volatile
  7201                           
  7202                           ;interface.c: 68: EECON1bits.RD = 1;
  7203  00DF26  80A6               	bsf	4006,0,c	;volatile
  7204  00DF28                     l600:
  7205  00DF28  B0A6               	btfsc	4006,0,c	;volatile
  7206  00DF2A  D7FE               	goto	l600
  7207                           
  7208                           ;interface.c: 74: return EEDATA;
  7209  00DF2C  50A8               	movf	4008,w,c	;volatile
  7210  00DF2E  0012               	return	
  7211  00DF30                     __end_of_eepromRead:
  7212                           	opt stack 0
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon2	equ	0xFF1
  7220                           postinc0	equ	0xFEE
  7221                           wreg	equ	0xFE8
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _S3forward *****************
  7230 ;; Defined at:
  7231 ;;		line 206 in file "motors.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;		None
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;		None
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		wreg, status,2, status,0
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;Total ram usage:        0 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; This function calls:
  7252 ;;		Nothing
  7253 ;; This function is called by:
  7254 ;;		_main
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text28
  7259  00E15E                     __ptext28:
  7260                           	opt stack 0
  7261  00E15E                     _S3forward:
  7262                           	opt stack 30
  7263                           
  7264                           ;motors.c: 207: if (s == 1){LATCbits.LATC7 = 1;}
  7265                           
  7266                           ;incstack = 0
  7267  00E15E  046C               	decf	_s,w,c
  7268  00E160  106D               	iorwf	_s+1,w,c
  7269  00E162  A4D8               	btfss	status,2,c
  7270  00E164  D002               	goto	l515
  7271  00E166  8E8B               	bsf	3979,7,c	;volatile
  7272  00E168  D001               	goto	l3157
  7273  00E16A                     l515:
  7274                           
  7275                           ;motors.c: 208: else{LATCbits.LATC7 = 0;}
  7276  00E16A  9E8B               	bcf	3979,7,c	;volatile
  7277  00E16C                     l3157:
  7278                           
  7279                           ;motors.c: 209: if (s == 2){LATCbits.LATC6 = 1;}
  7280  00E16C  0E02               	movlw	2
  7281  00E16E  186C               	xorwf	_s,w,c
  7282  00E170  106D               	iorwf	_s+1,w,c
  7283  00E172  A4D8               	btfss	status,2,c
  7284  00E174  D002               	goto	l517
  7285  00E176  8C8B               	bsf	3979,6,c	;volatile
  7286  00E178  D001               	goto	l3161
  7287  00E17A                     l517:
  7288                           
  7289                           ;motors.c: 210: else{LATCbits.LATC6 = 0;}
  7290  00E17A  9C8B               	bcf	3979,6,c	;volatile
  7291  00E17C                     l3161:
  7292                           
  7293                           ;motors.c: 211: if (s == 3){LATCbits.LATC0 = 1;}
  7294  00E17C  0E03               	movlw	3
  7295  00E17E  186C               	xorwf	_s,w,c
  7296  00E180  106D               	iorwf	_s+1,w,c
  7297  00E182  A4D8               	btfss	status,2,c
  7298  00E184  D002               	goto	l519
  7299  00E186  808B               	bsf	3979,0,c	;volatile
  7300  00E188  D001               	goto	l3165
  7301  00E18A                     l519:
  7302                           
  7303                           ;motors.c: 212: else{LATCbits.LATC0 = 0;}
  7304  00E18A  908B               	bcf	3979,0,c	;volatile
  7305  00E18C                     l3165:
  7306                           
  7307                           ;motors.c: 213: if (s == 4){LATCbits.LATC5 = 1;}
  7308  00E18C  0E04               	movlw	4
  7309  00E18E  186C               	xorwf	_s,w,c
  7310  00E190  106D               	iorwf	_s+1,w,c
  7311  00E192  A4D8               	btfss	status,2,c
  7312  00E194  D002               	goto	l521
  7313  00E196  8A8B               	bsf	3979,5,c	;volatile
  7314  00E198  0012               	return	
  7315  00E19A                     l521:
  7316                           
  7317                           ;motors.c: 214: else{LATCbits.LATC5 = 0;}
  7318  00E19A  9A8B               	bcf	3979,5,c	;volatile
  7319  00E19C  0012               	return	
  7320  00E19E                     __end_of_S3forward:
  7321                           	opt stack 0
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon2	equ	0xFF1
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           indf2	equ	0xFDF
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function _S3backward *****************
  7339 ;; Defined at:
  7340 ;;		line 217 in file "motors.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;Total ram usage:        0 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_main
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text29
  7368  00E11E                     __ptext29:
  7369                           	opt stack 0
  7370  00E11E                     _S3backward:
  7371                           	opt stack 30
  7372                           
  7373                           ;motors.c: 218: if (s == 4){LATCbits.LATC7 = 1;}
  7374                           
  7375                           ;incstack = 0
  7376  00E11E  0E04               	movlw	4
  7377  00E120  186C               	xorwf	_s,w,c
  7378  00E122  106D               	iorwf	_s+1,w,c
  7379  00E124  A4D8               	btfss	status,2,c
  7380  00E126  D002               	goto	l526
  7381  00E128  8E8B               	bsf	3979,7,c	;volatile
  7382  00E12A  D001               	goto	l3189
  7383  00E12C                     l526:
  7384                           
  7385                           ;motors.c: 219: else{LATCbits.LATC7 = 0;}
  7386  00E12C  9E8B               	bcf	3979,7,c	;volatile
  7387  00E12E                     l3189:
  7388                           
  7389                           ;motors.c: 220: if (s == 3){LATCbits.LATC6 = 1;}
  7390  00E12E  0E03               	movlw	3
  7391  00E130  186C               	xorwf	_s,w,c
  7392  00E132  106D               	iorwf	_s+1,w,c
  7393  00E134  A4D8               	btfss	status,2,c
  7394  00E136  D002               	goto	l528
  7395  00E138  8C8B               	bsf	3979,6,c	;volatile
  7396  00E13A  D001               	goto	l3193
  7397  00E13C                     l528:
  7398                           
  7399                           ;motors.c: 221: else{LATCbits.LATC6 = 0;}
  7400  00E13C  9C8B               	bcf	3979,6,c	;volatile
  7401  00E13E                     l3193:
  7402                           
  7403                           ;motors.c: 222: if (s == 2){LATCbits.LATC0 = 1;}
  7404  00E13E  0E02               	movlw	2
  7405  00E140  186C               	xorwf	_s,w,c
  7406  00E142  106D               	iorwf	_s+1,w,c
  7407  00E144  A4D8               	btfss	status,2,c
  7408  00E146  D002               	goto	l530
  7409  00E148  808B               	bsf	3979,0,c	;volatile
  7410  00E14A  D001               	goto	l3197
  7411  00E14C                     l530:
  7412                           
  7413                           ;motors.c: 223: else{LATCbits.LATC0 = 0;}
  7414  00E14C  908B               	bcf	3979,0,c	;volatile
  7415  00E14E                     l3197:
  7416                           
  7417                           ;motors.c: 224: if (s == 1){LATCbits.LATC5 = 1;}
  7418  00E14E  046C               	decf	_s,w,c
  7419  00E150  106D               	iorwf	_s+1,w,c
  7420  00E152  A4D8               	btfss	status,2,c
  7421  00E154  D002               	goto	l532
  7422  00E156  8A8B               	bsf	3979,5,c	;volatile
  7423  00E158  0012               	return	
  7424  00E15A                     l532:
  7425                           
  7426                           ;motors.c: 225: else{LATCbits.LATC5 = 0;}
  7427  00E15A  9A8B               	bcf	3979,5,c	;volatile
  7428  00E15C  0012               	return	
  7429  00E15E                     __end_of_S3backward:
  7430                           	opt stack 0
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon2	equ	0xFF1
  7438                           postinc0	equ	0xFEE
  7439                           wreg	equ	0xFE8
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _S2off *****************
  7448 ;; Defined at:
  7449 ;;		line 152 in file "motors.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;		None
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;		None
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, status,2, status,0
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:        0 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; This function calls:
  7470 ;;		Nothing
  7471 ;; This function is called by:
  7472 ;;		_main
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text30
  7477  00E0DE                     __ptext30:
  7478                           	opt stack 0
  7479  00E0DE                     _S2off:
  7480                           	opt stack 30
  7481                           
  7482                           ;motors.c: 153: if (s == 4){LATEbits.LATE2 = 1;}
  7483                           
  7484                           ;incstack = 0
  7485  00E0DE  0E04               	movlw	4
  7486  00E0E0  186C               	xorwf	_s,w,c
  7487  00E0E2  106D               	iorwf	_s+1,w,c
  7488  00E0E4  A4D8               	btfss	status,2,c
  7489  00E0E6  D002               	goto	l456
  7490  00E0E8  848D               	bsf	3981,2,c	;volatile
  7491  00E0EA  D001               	goto	l3241
  7492  00E0EC                     l456:
  7493                           
  7494                           ;motors.c: 154: else{LATEbits.LATE2 = 0;}
  7495  00E0EC  948D               	bcf	3981,2,c	;volatile
  7496  00E0EE                     l3241:
  7497                           
  7498                           ;motors.c: 155: if (s == 2){LATEbits.LATE1 = 1;}
  7499  00E0EE  0E02               	movlw	2
  7500  00E0F0  186C               	xorwf	_s,w,c
  7501  00E0F2  106D               	iorwf	_s+1,w,c
  7502  00E0F4  A4D8               	btfss	status,2,c
  7503  00E0F6  D002               	goto	l458
  7504  00E0F8  828D               	bsf	3981,1,c	;volatile
  7505  00E0FA  D001               	goto	l3245
  7506  00E0FC                     l458:
  7507                           
  7508                           ;motors.c: 156: else{LATEbits.LATE1 = 0;}
  7509  00E0FC  928D               	bcf	3981,1,c	;volatile
  7510  00E0FE                     l3245:
  7511                           
  7512                           ;motors.c: 157: if (s == 3){LATAbits.LATA4 = 1;}
  7513  00E0FE  0E03               	movlw	3
  7514  00E100  186C               	xorwf	_s,w,c
  7515  00E102  106D               	iorwf	_s+1,w,c
  7516  00E104  A4D8               	btfss	status,2,c
  7517  00E106  D002               	goto	l460
  7518  00E108  8889               	bsf	3977,4,c	;volatile
  7519  00E10A  D001               	goto	l3249
  7520  00E10C                     l460:
  7521                           
  7522                           ;motors.c: 158: else{LATAbits.LATA4 = 0;}
  7523  00E10C  9889               	bcf	3977,4,c	;volatile
  7524  00E10E                     l3249:
  7525                           
  7526                           ;motors.c: 159: if (s == 1){LATDbits.LATD0 = 1;}
  7527  00E10E  046C               	decf	_s,w,c
  7528  00E110  106D               	iorwf	_s+1,w,c
  7529  00E112  A4D8               	btfss	status,2,c
  7530  00E114  D002               	goto	l462
  7531  00E116  808C               	bsf	3980,0,c	;volatile
  7532  00E118  0012               	return	
  7533  00E11A                     l462:
  7534                           
  7535                           ;motors.c: 160: else{LATDbits.LATD0 = 0;}
  7536  00E11A  908C               	bcf	3980,0,c	;volatile
  7537  00E11C  0012               	return	
  7538  00E11E                     __end_of_S2off:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon2	equ	0xFF1
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function _S2forward *****************
  7557 ;; Defined at:
  7558 ;;		line 131 in file "motors.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;		None
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;		None
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      void 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;Total ram usage:        0 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; This function calls:
  7579 ;;		Nothing
  7580 ;; This function is called by:
  7581 ;;		_main
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text31
  7586  00E09E                     __ptext31:
  7587                           	opt stack 0
  7588  00E09E                     _S2forward:
  7589                           	opt stack 30
  7590                           
  7591                           ;motors.c: 132: if (s == 1){LATEbits.LATE2 = 1;}
  7592                           
  7593                           ;incstack = 0
  7594  00E09E  046C               	decf	_s,w,c
  7595  00E0A0  106D               	iorwf	_s+1,w,c
  7596  00E0A2  A4D8               	btfss	status,2,c
  7597  00E0A4  D002               	goto	l434
  7598  00E0A6  848D               	bsf	3981,2,c	;volatile
  7599  00E0A8  D001               	goto	l3141
  7600  00E0AA                     l434:
  7601                           
  7602                           ;motors.c: 133: else{LATEbits.LATE2 = 0;}
  7603  00E0AA  948D               	bcf	3981,2,c	;volatile
  7604  00E0AC                     l3141:
  7605                           
  7606                           ;motors.c: 134: if (s == 2){LATEbits.LATE1 = 1;}
  7607  00E0AC  0E02               	movlw	2
  7608  00E0AE  186C               	xorwf	_s,w,c
  7609  00E0B0  106D               	iorwf	_s+1,w,c
  7610  00E0B2  A4D8               	btfss	status,2,c
  7611  00E0B4  D002               	goto	l436
  7612  00E0B6  828D               	bsf	3981,1,c	;volatile
  7613  00E0B8  D001               	goto	l3145
  7614  00E0BA                     l436:
  7615                           
  7616                           ;motors.c: 135: else{LATEbits.LATE1 = 0;}
  7617  00E0BA  928D               	bcf	3981,1,c	;volatile
  7618  00E0BC                     l3145:
  7619                           
  7620                           ;motors.c: 136: if (s == 3){LATAbits.LATA4 = 1;}
  7621  00E0BC  0E03               	movlw	3
  7622  00E0BE  186C               	xorwf	_s,w,c
  7623  00E0C0  106D               	iorwf	_s+1,w,c
  7624  00E0C2  A4D8               	btfss	status,2,c
  7625  00E0C4  D002               	goto	l438
  7626  00E0C6  8889               	bsf	3977,4,c	;volatile
  7627  00E0C8  D001               	goto	l3149
  7628  00E0CA                     l438:
  7629                           
  7630                           ;motors.c: 137: else{LATAbits.LATA4 = 0;}
  7631  00E0CA  9889               	bcf	3977,4,c	;volatile
  7632  00E0CC                     l3149:
  7633                           
  7634                           ;motors.c: 138: if (s == 4){LATDbits.LATD0 = 1;}
  7635  00E0CC  0E04               	movlw	4
  7636  00E0CE  186C               	xorwf	_s,w,c
  7637  00E0D0  106D               	iorwf	_s+1,w,c
  7638  00E0D2  A4D8               	btfss	status,2,c
  7639  00E0D4  D002               	goto	l440
  7640  00E0D6  808C               	bsf	3980,0,c	;volatile
  7641  00E0D8  0012               	return	
  7642  00E0DA                     l440:
  7643                           
  7644                           ;motors.c: 139: else{LATDbits.LATD0 = 0;}
  7645  00E0DA  908C               	bcf	3980,0,c	;volatile
  7646  00E0DC  0012               	return	
  7647  00E0DE                     __end_of_S2forward:
  7648                           	opt stack 0
  7649                           tblptru	equ	0xFF8
  7650                           tblptrh	equ	0xFF7
  7651                           tblptrl	equ	0xFF6
  7652                           tablat	equ	0xFF5
  7653                           prodh	equ	0xFF4
  7654                           prodl	equ	0xFF3
  7655                           intcon2	equ	0xFF1
  7656                           postinc0	equ	0xFEE
  7657                           wreg	equ	0xFE8
  7658                           indf2	equ	0xFDF
  7659                           postinc2	equ	0xFDE
  7660                           postdec2	equ	0xFDD
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _S2backward *****************
  7666 ;; Defined at:
  7667 ;;		line 142 in file "motors.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, status,2, status,0
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;Total ram usage:        0 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; This function calls:
  7688 ;;		Nothing
  7689 ;; This function is called by:
  7690 ;;		_main
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text32
  7695  00E05E                     __ptext32:
  7696                           	opt stack 0
  7697  00E05E                     _S2backward:
  7698                           	opt stack 30
  7699                           
  7700                           ;motors.c: 143: if (s == 4){LATEbits.LATE2 = 1;}
  7701                           
  7702                           ;incstack = 0
  7703  00E05E  0E04               	movlw	4
  7704  00E060  186C               	xorwf	_s,w,c
  7705  00E062  106D               	iorwf	_s+1,w,c
  7706  00E064  A4D8               	btfss	status,2,c
  7707  00E066  D002               	goto	l445
  7708  00E068  848D               	bsf	3981,2,c	;volatile
  7709  00E06A  D001               	goto	l3173
  7710  00E06C                     l445:
  7711                           
  7712                           ;motors.c: 144: else{LATEbits.LATE2 = 0;}
  7713  00E06C  948D               	bcf	3981,2,c	;volatile
  7714  00E06E                     l3173:
  7715                           
  7716                           ;motors.c: 145: if (s == 3){LATEbits.LATE1 = 1;}
  7717  00E06E  0E03               	movlw	3
  7718  00E070  186C               	xorwf	_s,w,c
  7719  00E072  106D               	iorwf	_s+1,w,c
  7720  00E074  A4D8               	btfss	status,2,c
  7721  00E076  D002               	goto	l447
  7722  00E078  828D               	bsf	3981,1,c	;volatile
  7723  00E07A  D001               	goto	l3177
  7724  00E07C                     l447:
  7725                           
  7726                           ;motors.c: 146: else{LATEbits.LATE1 = 0;}
  7727  00E07C  928D               	bcf	3981,1,c	;volatile
  7728  00E07E                     l3177:
  7729                           
  7730                           ;motors.c: 147: if (s == 2){LATAbits.LATA4 = 1;}
  7731  00E07E  0E02               	movlw	2
  7732  00E080  186C               	xorwf	_s,w,c
  7733  00E082  106D               	iorwf	_s+1,w,c
  7734  00E084  A4D8               	btfss	status,2,c
  7735  00E086  D002               	goto	l449
  7736  00E088  8889               	bsf	3977,4,c	;volatile
  7737  00E08A  D001               	goto	l3181
  7738  00E08C                     l449:
  7739                           
  7740                           ;motors.c: 148: else{LATAbits.LATA4 = 0;}
  7741  00E08C  9889               	bcf	3977,4,c	;volatile
  7742  00E08E                     l3181:
  7743                           
  7744                           ;motors.c: 149: if (s == 1){LATDbits.LATD0 = 1;}
  7745  00E08E  046C               	decf	_s,w,c
  7746  00E090  106D               	iorwf	_s+1,w,c
  7747  00E092  A4D8               	btfss	status,2,c
  7748  00E094  D002               	goto	l451
  7749  00E096  808C               	bsf	3980,0,c	;volatile
  7750  00E098  0012               	return	
  7751  00E09A                     l451:
  7752                           
  7753                           ;motors.c: 150: else{LATDbits.LATD0 = 0;}
  7754  00E09A  908C               	bcf	3980,0,c	;volatile
  7755  00E09C  0012               	return	
  7756  00E09E                     __end_of_S2backward:
  7757                           	opt stack 0
  7758                           tblptru	equ	0xFF8
  7759                           tblptrh	equ	0xFF7
  7760                           tblptrl	equ	0xFF6
  7761                           tablat	equ	0xFF5
  7762                           prodh	equ	0xFF4
  7763                           prodl	equ	0xFF3
  7764                           intcon2	equ	0xFF1
  7765                           postinc0	equ	0xFEE
  7766                           wreg	equ	0xFE8
  7767                           indf2	equ	0xFDF
  7768                           postinc2	equ	0xFDE
  7769                           postdec2	equ	0xFDD
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function _S1off *****************
  7775 ;; Defined at:
  7776 ;;		line 184 in file "motors.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;		None
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;		None
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;Total ram usage:        0 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; This function calls:
  7797 ;;		Nothing
  7798 ;; This function is called by:
  7799 ;;		_main
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           	psect	text33
  7804  00E01E                     __ptext33:
  7805                           	opt stack 0
  7806  00E01E                     _S1off:
  7807                           	opt stack 30
  7808                           
  7809                           ;motors.c: 185: if (s == 4){LATDbits.LATD1 = 1;}
  7810                           
  7811                           ;incstack = 0
  7812  00E01E  0E04               	movlw	4
  7813  00E020  186C               	xorwf	_s,w,c
  7814  00E022  106D               	iorwf	_s+1,w,c
  7815  00E024  A4D8               	btfss	status,2,c
  7816  00E026  D002               	goto	l489
  7817  00E028  828C               	bsf	3980,1,c	;volatile
  7818  00E02A  D001               	goto	l3225
  7819  00E02C                     l489:
  7820                           
  7821                           ;motors.c: 186: else{LATDbits.LATD1 = 0;}
  7822  00E02C  928C               	bcf	3980,1,c	;volatile
  7823  00E02E                     l3225:
  7824                           
  7825                           ;motors.c: 187: if (s == 2){LATBbits.LATB3 = 1;}
  7826  00E02E  0E02               	movlw	2
  7827  00E030  186C               	xorwf	_s,w,c
  7828  00E032  106D               	iorwf	_s+1,w,c
  7829  00E034  A4D8               	btfss	status,2,c
  7830  00E036  D002               	goto	l491
  7831  00E038  868A               	bsf	3978,3,c	;volatile
  7832  00E03A  D001               	goto	l3229
  7833  00E03C                     l491:
  7834                           
  7835                           ;motors.c: 188: else{LATBbits.LATB3 = 0;}
  7836  00E03C  968A               	bcf	3978,3,c	;volatile
  7837  00E03E                     l3229:
  7838                           
  7839                           ;motors.c: 189: if (s == 3){LATBbits.LATB2 = 1;}
  7840  00E03E  0E03               	movlw	3
  7841  00E040  186C               	xorwf	_s,w,c
  7842  00E042  106D               	iorwf	_s+1,w,c
  7843  00E044  A4D8               	btfss	status,2,c
  7844  00E046  D002               	goto	l493
  7845  00E048  848A               	bsf	3978,2,c	;volatile
  7846  00E04A  D001               	goto	l3233
  7847  00E04C                     l493:
  7848                           
  7849                           ;motors.c: 190: else{LATBbits.LATB2 = 0;}
  7850  00E04C  948A               	bcf	3978,2,c	;volatile
  7851  00E04E                     l3233:
  7852                           
  7853                           ;motors.c: 191: if (s == 1){LATBbits.LATB0 = 1;}
  7854  00E04E  046C               	decf	_s,w,c
  7855  00E050  106D               	iorwf	_s+1,w,c
  7856  00E052  A4D8               	btfss	status,2,c
  7857  00E054  D002               	goto	l495
  7858  00E056  808A               	bsf	3978,0,c	;volatile
  7859  00E058  0012               	return	
  7860  00E05A                     l495:
  7861                           
  7862                           ;motors.c: 192: else{LATBbits.LATB0 = 0;}
  7863  00E05A  908A               	bcf	3978,0,c	;volatile
  7864  00E05C  0012               	return	
  7865  00E05E                     __end_of_S1off:
  7866                           	opt stack 0
  7867                           tblptru	equ	0xFF8
  7868                           tblptrh	equ	0xFF7
  7869                           tblptrl	equ	0xFF6
  7870                           tablat	equ	0xFF5
  7871                           prodh	equ	0xFF4
  7872                           prodl	equ	0xFF3
  7873                           intcon2	equ	0xFF1
  7874                           postinc0	equ	0xFEE
  7875                           wreg	equ	0xFE8
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _S1forward *****************
  7884 ;; Defined at:
  7885 ;;		line 163 in file "motors.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;		None
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;		None
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  1    wreg      void 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;Total ram usage:        0 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_main
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text34
  7913  00DFDE                     __ptext34:
  7914                           	opt stack 0
  7915  00DFDE                     _S1forward:
  7916                           	opt stack 30
  7917                           
  7918                           ;motors.c: 164: if (s == 1){LATDbits.LATD1 = 1;}
  7919                           
  7920                           ;incstack = 0
  7921  00DFDE  046C               	decf	_s,w,c
  7922  00DFE0  106D               	iorwf	_s+1,w,c
  7923  00DFE2  A4D8               	btfss	status,2,c
  7924  00DFE4  D002               	goto	l467
  7925  00DFE6  828C               	bsf	3980,1,c	;volatile
  7926  00DFE8  D001               	goto	l3273
  7927  00DFEA                     l467:
  7928                           
  7929                           ;motors.c: 165: else{LATDbits.LATD1 = 0;}
  7930  00DFEA  928C               	bcf	3980,1,c	;volatile
  7931  00DFEC                     l3273:
  7932                           
  7933                           ;motors.c: 166: if (s == 2){LATBbits.LATB3 = 1;}
  7934  00DFEC  0E02               	movlw	2
  7935  00DFEE  186C               	xorwf	_s,w,c
  7936  00DFF0  106D               	iorwf	_s+1,w,c
  7937  00DFF2  A4D8               	btfss	status,2,c
  7938  00DFF4  D002               	goto	l469
  7939  00DFF6  868A               	bsf	3978,3,c	;volatile
  7940  00DFF8  D001               	goto	l3277
  7941  00DFFA                     l469:
  7942                           
  7943                           ;motors.c: 167: else{LATBbits.LATB3 = 0;}
  7944  00DFFA  968A               	bcf	3978,3,c	;volatile
  7945  00DFFC                     l3277:
  7946                           
  7947                           ;motors.c: 168: if (s == 3){LATBbits.LATB2 = 1;}
  7948  00DFFC  0E03               	movlw	3
  7949  00DFFE  186C               	xorwf	_s,w,c
  7950  00E000  106D               	iorwf	_s+1,w,c
  7951  00E002  A4D8               	btfss	status,2,c
  7952  00E004  D002               	goto	l471
  7953  00E006  848A               	bsf	3978,2,c	;volatile
  7954  00E008  D001               	goto	l3281
  7955  00E00A                     l471:
  7956                           
  7957                           ;motors.c: 169: else{LATBbits.LATB2 = 0;}
  7958  00E00A  948A               	bcf	3978,2,c	;volatile
  7959  00E00C                     l3281:
  7960                           
  7961                           ;motors.c: 170: if (s == 4){LATBbits.LATB0 = 1;}
  7962  00E00C  0E04               	movlw	4
  7963  00E00E  186C               	xorwf	_s,w,c
  7964  00E010  106D               	iorwf	_s+1,w,c
  7965  00E012  A4D8               	btfss	status,2,c
  7966  00E014  D002               	goto	l473
  7967  00E016  808A               	bsf	3978,0,c	;volatile
  7968  00E018  0012               	return	
  7969  00E01A                     l473:
  7970                           
  7971                           ;motors.c: 171: else{LATBbits.LATB0 = 0;}
  7972  00E01A  908A               	bcf	3978,0,c	;volatile
  7973  00E01C  0012               	return	
  7974  00E01E                     __end_of_S1forward:
  7975                           	opt stack 0
  7976                           tblptru	equ	0xFF8
  7977                           tblptrh	equ	0xFF7
  7978                           tblptrl	equ	0xFF6
  7979                           tablat	equ	0xFF5
  7980                           prodh	equ	0xFF4
  7981                           prodl	equ	0xFF3
  7982                           intcon2	equ	0xFF1
  7983                           postinc0	equ	0xFEE
  7984                           wreg	equ	0xFE8
  7985                           indf2	equ	0xFDF
  7986                           postinc2	equ	0xFDE
  7987                           postdec2	equ	0xFDD
  7988                           fsr2h	equ	0xFDA
  7989                           fsr2l	equ	0xFD9
  7990                           status	equ	0xFD8
  7991                           
  7992 ;; *************** function _S1backward *****************
  7993 ;; Defined at:
  7994 ;;		line 174 in file "motors.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;		None
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      void 
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;Total ram usage:        0 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_main
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text35
  8022  00DF9E                     __ptext35:
  8023                           	opt stack 0
  8024  00DF9E                     _S1backward:
  8025                           	opt stack 30
  8026                           
  8027                           ;motors.c: 175: if (s == 4){LATDbits.LATD1 = 1;}
  8028                           
  8029                           ;incstack = 0
  8030  00DF9E  0E04               	movlw	4
  8031  00DFA0  186C               	xorwf	_s,w,c
  8032  00DFA2  106D               	iorwf	_s+1,w,c
  8033  00DFA4  A4D8               	btfss	status,2,c
  8034  00DFA6  D002               	goto	l478
  8035  00DFA8  828C               	bsf	3980,1,c	;volatile
  8036  00DFAA  D001               	goto	l3257
  8037  00DFAC                     l478:
  8038                           
  8039                           ;motors.c: 176: else{LATDbits.LATD1 = 0;}
  8040  00DFAC  928C               	bcf	3980,1,c	;volatile
  8041  00DFAE                     l3257:
  8042                           
  8043                           ;motors.c: 177: if (s == 3){LATBbits.LATB3 = 1;}
  8044  00DFAE  0E03               	movlw	3
  8045  00DFB0  186C               	xorwf	_s,w,c
  8046  00DFB2  106D               	iorwf	_s+1,w,c
  8047  00DFB4  A4D8               	btfss	status,2,c
  8048  00DFB6  D002               	goto	l480
  8049  00DFB8  868A               	bsf	3978,3,c	;volatile
  8050  00DFBA  D001               	goto	l3261
  8051  00DFBC                     l480:
  8052                           
  8053                           ;motors.c: 178: else{LATBbits.LATB3 = 0;}
  8054  00DFBC  968A               	bcf	3978,3,c	;volatile
  8055  00DFBE                     l3261:
  8056                           
  8057                           ;motors.c: 179: if (s == 2){LATBbits.LATB2 = 1;}
  8058  00DFBE  0E02               	movlw	2
  8059  00DFC0  186C               	xorwf	_s,w,c
  8060  00DFC2  106D               	iorwf	_s+1,w,c
  8061  00DFC4  A4D8               	btfss	status,2,c
  8062  00DFC6  D002               	goto	l482
  8063  00DFC8  848A               	bsf	3978,2,c	;volatile
  8064  00DFCA  D001               	goto	l3265
  8065  00DFCC                     l482:
  8066                           
  8067                           ;motors.c: 180: else{LATBbits.LATB2 = 0;}
  8068  00DFCC  948A               	bcf	3978,2,c	;volatile
  8069  00DFCE                     l3265:
  8070                           
  8071                           ;motors.c: 181: if (s == 1){LATBbits.LATB0 = 1;}
  8072  00DFCE  046C               	decf	_s,w,c
  8073  00DFD0  106D               	iorwf	_s+1,w,c
  8074  00DFD2  A4D8               	btfss	status,2,c
  8075  00DFD4  D002               	goto	l484
  8076  00DFD6  808A               	bsf	3978,0,c	;volatile
  8077  00DFD8  0012               	return	
  8078  00DFDA                     l484:
  8079                           
  8080                           ;motors.c: 182: else{LATBbits.LATB0 = 0;}
  8081  00DFDA  908A               	bcf	3978,0,c	;volatile
  8082  00DFDC  0012               	return	
  8083  00DFDE                     __end_of_S1backward:
  8084                           	opt stack 0
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon2	equ	0xFF1
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           indf2	equ	0xFDF
  8095                           postinc2	equ	0xFDE
  8096                           postdec2	equ	0xFDD
  8097                           fsr2h	equ	0xFDA
  8098                           fsr2l	equ	0xFD9
  8099                           status	equ	0xFD8
  8100                           
  8101 ;; *************** function _PWM2off *****************
  8102 ;; Defined at:
  8103 ;;		line 44 in file "motors.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; This function calls:
  8124 ;;		Nothing
  8125 ;; This function is called by:
  8126 ;;		_main
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           	psect	text36
  8131  00DDFE                     __ptext36:
  8132                           	opt stack 0
  8133  00DDFE                     _PWM2off:
  8134                           	opt stack 30
  8135                           
  8136                           ;motors.c: 45: CCP2CONbits.DC2B0 = 0;
  8137                           
  8138                           ;incstack = 0
  8139  00DDFE  98BA               	bcf	4026,4,c	;volatile
  8140                           
  8141                           ;motors.c: 46: CCP2CONbits.DC2B1 = 0;
  8142  00DE00  9ABA               	bcf	4026,5,c	;volatile
  8143                           
  8144                           ;motors.c: 48: CCPR2L = 0;
  8145  00DE02  0E00               	movlw	0
  8146  00DE04  6EBB               	movwf	4027,c	;volatile
  8147  00DE06  0012               	return		;funcret
  8148  00DE08                     __end_of_PWM2off:
  8149                           	opt stack 0
  8150                           tblptru	equ	0xFF8
  8151                           tblptrh	equ	0xFF7
  8152                           tblptrl	equ	0xFF6
  8153                           tablat	equ	0xFF5
  8154                           prodh	equ	0xFF4
  8155                           prodl	equ	0xFF3
  8156                           intcon2	equ	0xFF1
  8157                           postinc0	equ	0xFEE
  8158                           wreg	equ	0xFE8
  8159                           indf2	equ	0xFDF
  8160                           postinc2	equ	0xFDE
  8161                           postdec2	equ	0xFDD
  8162                           fsr2h	equ	0xFDA
  8163                           fsr2l	equ	0xFD9
  8164                           status	equ	0xFD8
  8165                           
  8166 ;; *************** function _PWM2 *****************
  8167 ;; Defined at:
  8168 ;;		line 30 in file "motors.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  duty            2    0[COMRAM] int 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;		None
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      void 
  8175 ;; Registers used:
  8176 ;;		wreg, status,2, status,0
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;Total ram usage:        4 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; This function calls:
  8189 ;;		Nothing
  8190 ;; This function is called by:
  8191 ;;		_main
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text37
  8196  00E22E                     __ptext37:
  8197                           	opt stack 0
  8198  00E22E                     _PWM2:
  8199                           	opt stack 30
  8200                           
  8201                           ;motors.c: 38: CCP2CONbits.DC2B0 = duty & 1;
  8202                           
  8203                           ;incstack = 0
  8204  00E22E  C001  F003         	movff	PWM2@duty,??_PWM2
  8205  00E232  0E01               	movlw	1
  8206  00E234  1603               	andwf	??_PWM2,f,c
  8207  00E236  3A03               	swapf	??_PWM2,f,c
  8208  00E238  50BA               	movf	4026,w,c	;volatile
  8209  00E23A  1803               	xorwf	??_PWM2,w,c
  8210  00E23C  0BEF               	andlw	-17
  8211  00E23E  1803               	xorwf	??_PWM2,w,c
  8212  00E240  6EBA               	movwf	4026,c	;volatile
  8213                           
  8214                           ;motors.c: 39: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  8215  00E242  3402               	rlcf	PWM2@duty+1,w,c
  8216  00E244  3002               	rrcf	PWM2@duty+1,w,c
  8217  00E246  6E04               	movwf	(??_PWM2+1)& (0+255),c
  8218  00E248  3001               	rrcf	PWM2@duty,w,c
  8219  00E24A  6E03               	movwf	??_PWM2& (0+255),c
  8220  00E24C  0E01               	movlw	1
  8221  00E24E  1603               	andwf	??_PWM2,f,c
  8222  00E250  3A03               	swapf	??_PWM2,f,c
  8223  00E252  4603               	rlncf	??_PWM2,f,c
  8224  00E254  50BA               	movf	4026,w,c	;volatile
  8225  00E256  1803               	xorwf	??_PWM2,w,c
  8226  00E258  0BDF               	andlw	-33
  8227  00E25A  1803               	xorwf	??_PWM2,w,c
  8228  00E25C  6EBA               	movwf	4026,c	;volatile
  8229                           
  8230                           ;motors.c: 40: CCPR2L = (duty >> 2);
  8231  00E25E  C001  F003         	movff	PWM2@duty,??_PWM2
  8232  00E262  C002  F004         	movff	PWM2@duty+1,??_PWM2+1
  8233  00E266  3404               	rlcf	??_PWM2+1,w,c
  8234  00E268  3204               	rrcf	??_PWM2+1,f,c
  8235  00E26A  3203               	rrcf	??_PWM2,f,c
  8236  00E26C  3404               	rlcf	??_PWM2+1,w,c
  8237  00E26E  3204               	rrcf	??_PWM2+1,f,c
  8238  00E270  3203               	rrcf	??_PWM2,f,c
  8239  00E272  5003               	movf	??_PWM2,w,c
  8240  00E274  6EBB               	movwf	4027,c	;volatile
  8241  00E276  0012               	return		;funcret
  8242  00E278                     __end_of_PWM2:
  8243                           	opt stack 0
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           prodh	equ	0xFF4
  8249                           prodl	equ	0xFF3
  8250                           intcon2	equ	0xFF1
  8251                           postinc0	equ	0xFEE
  8252                           wreg	equ	0xFE8
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _PWM1off *****************
  8261 ;; Defined at:
  8262 ;;		line 24 in file "motors.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      void 
  8269 ;; Registers used:
  8270 ;;		wreg, status,2
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        0 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; This function calls:
  8283 ;;		Nothing
  8284 ;; This function is called by:
  8285 ;;		_main
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           	psect	text38
  8290  00DDF4                     __ptext38:
  8291                           	opt stack 0
  8292  00DDF4                     _PWM1off:
  8293                           	opt stack 30
  8294                           
  8295                           ;motors.c: 25: CCP1CONbits.DC1B0 = 0;
  8296                           
  8297                           ;incstack = 0
  8298  00DDF4  98BD               	bcf	4029,4,c	;volatile
  8299                           
  8300                           ;motors.c: 26: CCP1CONbits.DC1B1 = 0;
  8301  00DDF6  9ABD               	bcf	4029,5,c	;volatile
  8302                           
  8303                           ;motors.c: 27: CCPR1L = 0;
  8304  00DDF8  0E00               	movlw	0
  8305  00DDFA  6EBE               	movwf	4030,c	;volatile
  8306  00DDFC  0012               	return		;funcret
  8307  00DDFE                     __end_of_PWM1off:
  8308                           	opt stack 0
  8309                           tblptru	equ	0xFF8
  8310                           tblptrh	equ	0xFF7
  8311                           tblptrl	equ	0xFF6
  8312                           tablat	equ	0xFF5
  8313                           prodh	equ	0xFF4
  8314                           prodl	equ	0xFF3
  8315                           intcon2	equ	0xFF1
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           indf2	equ	0xFDF
  8319                           postinc2	equ	0xFDE
  8320                           postdec2	equ	0xFDD
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _PWM1 *****************
  8326 ;; Defined at:
  8327 ;;		line 10 in file "motors.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  duty            2    0[COMRAM] int 
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      void 
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;Total ram usage:        4 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; This function calls:
  8348 ;;		Nothing
  8349 ;; This function is called by:
  8350 ;;		_main
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text39
  8355  00E1E4                     __ptext39:
  8356                           	opt stack 0
  8357  00E1E4                     _PWM1:
  8358                           	opt stack 30
  8359                           
  8360                           ;motors.c: 18: CCP1CONbits.DC1B0 = duty & 1;
  8361                           
  8362                           ;incstack = 0
  8363  00E1E4  C001  F003         	movff	PWM1@duty,??_PWM1
  8364  00E1E8  0E01               	movlw	1
  8365  00E1EA  1603               	andwf	??_PWM1,f,c
  8366  00E1EC  3A03               	swapf	??_PWM1,f,c
  8367  00E1EE  50BD               	movf	4029,w,c	;volatile
  8368  00E1F0  1803               	xorwf	??_PWM1,w,c
  8369  00E1F2  0BEF               	andlw	-17
  8370  00E1F4  1803               	xorwf	??_PWM1,w,c
  8371  00E1F6  6EBD               	movwf	4029,c	;volatile
  8372                           
  8373                           ;motors.c: 19: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  8374  00E1F8  3402               	rlcf	PWM1@duty+1,w,c
  8375  00E1FA  3002               	rrcf	PWM1@duty+1,w,c
  8376  00E1FC  6E04               	movwf	(??_PWM1+1)& (0+255),c
  8377  00E1FE  3001               	rrcf	PWM1@duty,w,c
  8378  00E200  6E03               	movwf	??_PWM1& (0+255),c
  8379  00E202  0E01               	movlw	1
  8380  00E204  1603               	andwf	??_PWM1,f,c
  8381  00E206  3A03               	swapf	??_PWM1,f,c
  8382  00E208  4603               	rlncf	??_PWM1,f,c
  8383  00E20A  50BD               	movf	4029,w,c	;volatile
  8384  00E20C  1803               	xorwf	??_PWM1,w,c
  8385  00E20E  0BDF               	andlw	-33
  8386  00E210  1803               	xorwf	??_PWM1,w,c
  8387  00E212  6EBD               	movwf	4029,c	;volatile
  8388                           
  8389                           ;motors.c: 20: CCPR1L = (duty >> 2);
  8390  00E214  C001  F003         	movff	PWM1@duty,??_PWM1
  8391  00E218  C002  F004         	movff	PWM1@duty+1,??_PWM1+1
  8392  00E21C  3404               	rlcf	??_PWM1+1,w,c
  8393  00E21E  3204               	rrcf	??_PWM1+1,f,c
  8394  00E220  3203               	rrcf	??_PWM1,f,c
  8395  00E222  3404               	rlcf	??_PWM1+1,w,c
  8396  00E224  3204               	rrcf	??_PWM1+1,f,c
  8397  00E226  3203               	rrcf	??_PWM1,f,c
  8398  00E228  5003               	movf	??_PWM1,w,c
  8399  00E22A  6EBE               	movwf	4030,c	;volatile
  8400  00E22C  0012               	return		;funcret
  8401  00E22E                     __end_of_PWM1:
  8402                           	opt stack 0
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon2	equ	0xFF1
  8410                           postinc0	equ	0xFEE
  8411                           wreg	equ	0xFE8
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           tblptru	equ	0xFF8
  8419                           tblptrh	equ	0xFF7
  8420                           tblptrl	equ	0xFF6
  8421                           tablat	equ	0xFF5
  8422                           prodh	equ	0xFF4
  8423                           prodl	equ	0xFF3
  8424                           intcon2	equ	0xFF1
  8425                           postinc0	equ	0xFEE
  8426                           wreg	equ	0xFE8
  8427                           indf2	equ	0xFDF
  8428                           postinc2	equ	0xFDE
  8429                           postdec2	equ	0xFDD
  8430                           fsr2h	equ	0xFDA
  8431                           fsr2l	equ	0xFD9
  8432                           status	equ	0xFD8
  8433                           
  8434                           	psect	rparam
  8435  0000                     tblptru	equ	0xFF8
  8436                           tblptrh	equ	0xFF7
  8437                           tblptrl	equ	0xFF6
  8438                           tablat	equ	0xFF5
  8439                           prodh	equ	0xFF4
  8440                           prodl	equ	0xFF3
  8441                           intcon2	equ	0xFF1
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           indf2	equ	0xFDF
  8445                           postinc2	equ	0xFDE
  8446                           postdec2	equ	0xFDD
  8447                           fsr2h	equ	0xFDA
  8448                           fsr2l	equ	0xFD9
  8449                           status	equ	0xFD8


Data Sizes:
    Strings     448
    Constant    96
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     94     112
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_42(CODE[15]), STR_41(CODE[16]), STR_40(CODE[16]), STR_39(CODE[16]), 
		 -> STR_38(CODE[14]), STR_37(CODE[16]), STR_36(CODE[8]), STR_35(CODE[15]), 
		 -> STR_34(CODE[8]), STR_33(CODE[16]), STR_32(CODE[7]), STR_31(CODE[19]), 
		 -> STR_30(CODE[8]), STR_29(CODE[12]), STR_28(CODE[13]), STR_27(CODE[11]), 
		 -> STR_26(CODE[6]), STR_25(CODE[13]), STR_24(CODE[11]), STR_23(CODE[9]), 
		 -> STR_22(CODE[11]), STR_21(CODE[10]), STR_20(CODE[14]), STR_19(CODE[11]), 
		 -> STR_18(CODE[14]), STR_17(CODE[17]), STR_16(CODE[8]), STR_15(CODE[14]), 
		 -> STR_14(CODE[3]), STR_13(CODE[12]), STR_12(CODE[3]), STR_11(CODE[12]), 
		 -> STR_10(CODE[3]), STR_9(CODE[12]), STR_8(CODE[11]), STR_7(CODE[13]), 
		 -> STR_6(CODE[13]), STR_5(CODE[16]), STR_4(CODE[12]), STR_3(CODE[12]), 
		 -> STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_updateS1
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _updateS1->_printf
    _updateEEPROM->_timePassed
    _eepromWrite->_eepromRead
    _timePassed->___wmul
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLogs->_printf
    _printf->___llmod
    _putch->_lcdNibble
    ___llmod->___lldiv
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0   38047
                                             49 COMRAM    45    45      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                         _S1backward
                          _S1forward
                              _S1off
                         _S2backward
                          _S2forward
                              _S2off
                         _S3backward
                          _S3forward
                            ___llmod
                             ___wmul
                        _displayLogs
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                         _timePassed
                       _updateEEPROM
                           _updateS1
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     519
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     406
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             2     0      2    7779
                                             47 COMRAM     2     0      2
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _updateEEPROM                                         2     0      2     452
                                             17 COMRAM     2     0      2
                         _eepromRead
                        _eepromWrite
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1     322
                                              3 COMRAM     4     3      1
                         _eepromRead (ARG)
 ---------------------------------------------------------------------------------
 (1) _timePassed                                          11     9      2    3275
                                              6 COMRAM    11     9      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     767
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     632
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    7029
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLogs                                          1     1      0    7073
                                             47 COMRAM     1     1      0
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              34    26      8    6894
                                             22 COMRAM    25    17      8
                            ___lldiv
                            ___llmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
                         _timePassed (ARG)
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1951
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     415
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _S3forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S3backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S2off                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S2forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S2backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1off                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1forward                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _S1backward                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     194
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   _S1backward
   _S1forward
   _S1off
   _S2backward
   _S2forward
   _S2off
   _S3backward
   _S3forward
   ___llmod
     ___lldiv (ARG)
   ___wmul
   _displayLogs
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
     _timePassed (ARG)
       ___wmul
   _readADC
   _timePassed
     ___wmul
   _updateEEPROM
     _eepromRead
     _eepromWrite
       _eepromRead (ARG)
     _timePassed (ARG)
       ___wmul
   _updateS1
     _lcdInst
       _lcdNibble
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
       _timePassed (ARG)
         ___wmul
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5E      70       1       88.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      70      34        0.0%
DATA                 0      0      70       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Mar 19 15:42:55 2017

                        _s 006C                          _t 006A               ?_displayLogs 0001  
                       _s1 006E        ___wmul@multiplicand 0003                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000                        l140 F4F8  
                      l221 FC2C                        l151 F2A8                        l401 E76C  
                      l162 F3CA                        l154 F316                        l411 E7B6  
                      l164 F3DE                        l148 F23A                        l421 E7F0  
                      l405 E788                        l157 F388                        l166 F3F2  
                      l423 E80E                        l415 E7DA                        l407 E798  
                      l440 E0DA                        l600 DF28                        l168 F406  
                      l521 E19A                        l425 E80A                        l417 E7D6  
                      l409 E7A8                        l434 E0AA                        l530 E14C  
                      l290 DE2A                        l451 E09A                        l515 E16A  
                      l427 E828                        l419 E7F4                        l436 E0BA  
                      l460 E10C                        l532 E15A                        l445 E06C  
                      l517 E17A                        l429 E824                        l438 E0CA  
                      l462 E11A                        l526 E12C                        l606 DF94  
                      l471 E00A                        l447 E07C                        l519 E18A  
                      l480 DFBC                        l456 E0EC                        l528 E13C  
                      l473 E01A                        l449 E08C                        l482 DFCC  
                      l458 E0FC                        l467 DFEA                        l491 E03C  
                      l395 E73C                        l484 DFDA                        l469 DFFA  
                      l493 E04C                        l581 DE3C                        l397 E74C  
                      l478 DFAC                        l590 DE60                        l495 E05A  
                      l591 DE5C                        l399 E75C                        l584 DE48  
                      l489 E02C                        l678 E996               __CFG_CPB$OFF 000000  
                      _PR2 000FCB                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28                        prod 000FF3                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1073 E53A  
                     l3001 E448                       l1083 E3DE                       l3011 E6F0  
                     l3023 E728                       l3033 E74E                       l3041 E770  
                     l3017 E70C                       l3051 E79A                       l3141 E0AC  
                     l3037 E75E                       l3029 E73E                       l3055 E7AA  
                     l3047 E78A                       l3233 E04E                       l3225 E02E  
                     l3145 E0BC                       l3241 E0EE                       l3161 E17C  
                     l3073 E810                       l3065 E7DC                       l3083 DEA8  
                     l3059 E7BA                       l3261 DFBE                       l3229 E03E  
                     l3181 E08E                       l3173 E06E                       l3149 E0CC  
                     l3245 E0FE                       l3165 E18C                       l3157 E16C  
                     l3085 DEB6                       l3069 E7F6                       l2711 E4F8  
                     l3431 EFA8                       l3319 ECCA                       l3265 DFCE  
                     l3257 DFAE                       l3281 E00C                       l3273 DFEC  
                     l3177 E07E                       l3249 E10E                       l3193 E13E  
                     l2721 E52C                       l2713 E4FC                       l3441 EFD8  
                     l3417 EF70                       l3329 ECF4                       l2731 E3A8  
                     l3603 F462                       l3507 F246                       l3277 DFFC  
                     l3197 E14E                       l3189 E12E                       l2709 E4EC  
                     l2733 E3AC                       l2901 EBF8                       l2821 E9B6  
                     l3621 F4EA                       l3373 EE2C                       l3365 EE0E  
                     l2903 EC0E                       l2807 E95A                       l3527 F2B4  
                     l2737 E3D0                       l2729 E39C                       l2905 EC14  
                     l2841 EA1C                       l2825 E9DC                       l3801 FC1E  
                     l3705 F80E                       l3393 EF0C                       l3385 EE5C  
                     l3369 EE1A                       l2827 E9E0                       l2771 E854  
                     l2907 EC24                       l3803 FC24                       l3707 F810  
                     l3651 F6A6                       l3619 F4E6                       l3547 F322  
                     l3467 F0DA                       l3483 F1CC                       l3627 F508  
                     l3395 EF16                       l2693 DE90                       l2781 E888  
                     l2765 E836                       l2933 DF02                       l3733 F8E8  
                     l3725 F894                       l3661 F6CE                       l2863 EA84  
                     l2839 EA18                       l2855 EA54                       l2791 E8EA  
                     l2775 E85A                       l3823 FC96                       l3807 FC38  
                     l3727 F8B0                       l3719 F85C                       l3735 F8F4  
                     l3671 F720                       l3647 F682                       l3591 F408  
                     l3583 F3E0                       l3567 F394                       l3487 F1D8  
                     l2881 EADC                       l2857 EA6A                       l2793 E8EE  
                     l2769 E846                       l3809 FC5E                       l3681 F73E  
                     l3753 FA06                       l2883 EAE4                       l2891 EB0A  
                     l2875 EAC6                       l2867 EAA8                       l3771 FADC  
                     l3747 F9E2                       l3691 F782                       l3595 F42C  
                     l3587 F3F4                       l3579 F3CC                       l2893 EB16  
                     l2869 EAB0                       l2789 E8E6                       l2797 E8F4  
                     l3837 FCE2                       l3781 FB2C                       l3773 FAF8  
                     l3765 FAB6                       l3757 FA12                       l3749 F9EE  
                     l2895 EB8E                       l2887 EAF8                       l2799 E92E  
                     l2991 E424                       l3839 FD72                       l3599 F446  
                     l3793 FBEE                       l3777 FB0A                       l3785 FBC0  
                     l3769 FAD6                       l3697 F7BA                       l2995 E42C  
                     l3795 FBF4                       l3779 FB26                       l3699 F7D6  
                     l3797 FC10                       l3789 FBE0                       _ADFM 007E07  
                     STR_1 FEA4                       STR_2 FEC4                       STR_3 FF8D  
                     STR_4 FF75                       STR_5 FEB4                       STR_6 FF37  
                     STR_7 FF2A                       STR_8 FFBA                       STR_9 FF51  
                     u3010 F424                       u2205 DF70                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       u2160 DF00  
                     _LATD 000F8C                       _LATE 000F8D                       u2250 E704  
                     u2260 E720                       u3300 FCB2                       u2185 DF12  
                     u3190 F9E2                       u3407 EFE4                       u3417 F01A  
                     u3507 F330                       u3427 F0EC                       u3517 F34A  
                     u3437 F106                       u3607 F900                       u3527 F3A4  
                     u3447 F1E6                       u3617 FC6A                       u3537 F436  
                     u3457 F200                       u3377 ECC0                       u3707 E290  
                     u3627 FD88                       u3547 F4AE                       u3467 F254  
                     u3387 ED38                       u3717 E29A                       u1885 E2FC  
                     u3637 FDA8                       u3557 F51E                       u3477 F26E  
                     u3397 EF2C                       u3727 E2BC                       u3647 DEAE  
                     u3567 F676                       u3487 F2C2                       u3737 E2C6  
                     u3657 E1A4                       u3577 F6DA                       u3497 F2DC  
                     u3667 E1D8                       u3587 F74A                       _RCEN 007E2B  
                     u3677 E602                       u3597 F824                       u3687 E648  
                     u3697 E68E                       _PWM1 E1E4                       _PWM2 E22E  
                     _RSEN 007E29            __end_of_PWM1off DDFE            __end_of_PWM2off DE08  
                     _main EC3E                       _curr 0066                       _keys FE27  
                     _time 005F                       _prev 0068                       fsr2h 000FDA  
                     indf2 000FDF                       fsr2l 000FD9                main@standby 0055  
                     prodh 000FF4               main@canCheck 0041                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                ?_S1backward 0001                ?_S2backward 0001  
              ?_S3backward 0001                      ?_PWM1 0001                      ?_PWM2 0001  
         ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D                      _ADRES 000FC3                      _EEADR 000FA9  
                    STR_10 FFF5                      STR_11 FF5D                      STR_12 FFF5  
                    STR_20 FF1C                      STR_21 FFC5                      STR_13 FF69  
                    STR_14 FFF5                      STR_30 FFE8                      STR_22 FFA4  
                    STR_23 FFCF                      STR_15 FF0E                      STR_31 FE3F  
                    STR_32 FFF8                      STR_16 FFF0                      STR_24 FF99  
                    STR_40 FE84                      STR_41 FE94                      STR_25 FF44  
                    STR_33 FE74                      STR_17 FE63                      STR_26 FF16  
                    STR_34 FFE0                      STR_18 FF00                      STR_42 FED4  
                    STR_27 FF99                      STR_19 FFAF                      STR_35 FEE3  
                    STR_43 FE52                      STR_28 FF44                      STR_36 FFD8  
                    STR_29 FF81                      STR_37 FE94                      STR_38 FEF2  
                    STR_39 FE94            __end_of___lldiv E54C                      _T0CON 000FD5  
          __end_of___llmod E3F0                      _T2CON 000FCA               updateS1@mode 0030  
                    _TMR0L 000FD6                      _S1off E01E                      _PORTB 000F81  
                    _S2off E0DE                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
             main@tabState 0047              __CFG_PWRT$OFF 000000            timePassed@start 0007  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst DE1E             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC DEBC  
          __end_of_initLCD E1E4             __CFG_EBTRB$OFF 000000         __size_of_S1forward 0040  
          __end_of_dpowers FE07         __size_of_S2forward 0040               main@sodaLoad 0045  
          __end_of_isdigit DE98         __size_of_S3forward 0040                      _putch DE1E  
                    main@c 0057                      main@s 0051                      tablat 000FF5  
                    status 000FD8               main@soupLoad 004B               main@soupSort 0049  
           __CFG_PBADEN$ON 000000               __end_of_PWM1 E22E               __end_of_PWM2 E278  
          __initialization DE64               __end_of_main FDDE               __end_of_keys FE38  
                   ??_PWM1 0003                     ??_PWM2 0003                     ??_main 0032  
            __activetblptr 000002                     ?_S1off 0001                     ?_S2off 0001  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002         ??_I2C_Master_Start 0002  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0004  
                ??_PWM1off 0001                  ??_PWM2off 0001           ___llmod@dividend 000E  
                   _ADRESH 000FC4                     _EEADRH 000FAA                     _ADRESL 000FC3  
                   _EEDATA 000FA8                     _CCPR1L 000FBE                     _CCPR2L 000FBB  
                   _EECON2 000FA7        __size_of_S1backward 0040                     ?_putch 0001  
                   _CVRCON 000FB5        __size_of_S2backward 0040                     _OSCCON 000FD3  
      __size_of_S3backward 0040                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
     __size_of_eepromWrite 0038          __end_of_S1forward E01E                     ___wmul DEBC  
           __CFG_STVREN$ON 000000          __end_of_S2forward E0DE                  ??___lldiv 0009  
                ??___llmod 0016          __end_of_S3forward E19E           __end_of_keycheck DE50  
                   clear_0 DE6A            eepromWrite@data 0004           __end_of_currtime FE3F  
            main@sodaState 0043                  ??_lcdInst 0003                     _printf E82C  
     __size_of_displayLogs 00C6                     main@dc 003B                  ??_readADC 0001  
                ??_initLCD 0004                  ??_isdigit 0001               __mediumconst FDDE  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            ?_keyinterrupt 0001           __end_of_updateS1 E82C              main@startTime 004D  
               __accesstop 0080    __end_of__initialization DE70              ___rparam_used 000001  
            __end_of_S1off E05E              __end_of_S2off E11E             __pcstackCOMRAM 0001  
            __end_of_putch DE2A         __size_of_lcdNibble 0056          eepromRead@address 0003  
                  ??_S1off 0001                    ??_S2off 0001             ??_keyinterrupt 0001  
                  ??_putch 0003             main@labelState 004F               ??_S1backward 0001  
                  ?___wmul 0001               ??_S2backward 0001               ??_S3backward 0001  
                  _CCP1CON 000FBD                    _CCP2CON 000FBA           updateEEPROM@time 0012  
                  ?_printf 0017                 _eepromRead DF08                    _PWM1off DDF4  
                  _PWM2off DDFE                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7         __end_of_S1backward DFDE         __end_of_S2backward E09E  
                ?_keycheck 0001         __end_of_S3backward E15E          __end_of_lcdNibble E2CE  
                  __Hparam 0000                    __Lparam 0000                  ?_updateS1 0030  
                  ___lldiv E4CA            __size_of___wmul 0026                    ___llmod E38A  
                _CMCONbits 000FB4                 _homescreen E328                    __pcinit DE64  
                  __ramtop 1000                 _initialize E456                    _lcdInst DE12  
                  __ptext0 EC3E                    __ptext1 E3F0                    __ptext2 DE08  
                  __ptext3 DDEC                    __ptext4 DDE4                    __ptext5 DEE2  
                  __ptext6 DE2A                    __ptext7 E6BC                    __ptext8 DF30  
                  __ptext9 DF66            __size_of_printf 0412                    _readADC DE98  
                  _initLCD E19E          __end_of_hexpowers FE27                    _dpowers FDDF  
                  _isdigit DE7A   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008       end_of_initialization DE70  
               ??_keycheck 0001              __Lmediumconst FDDE  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
     __end_of_keyinterrupt DE64                 _timePassed E54C                    printf@c 002F  
                  printf@f 0017           I2C_Master_Init@c 000E           I2C_Master_Read@a 0002  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
               ??_updateS1 0032                  _S1forward DFDE                  _PORTBbits 000F81  
                _S2forward E09E                  _S3forward E15E                ?_eepromRead 0001  
               main@S1mode 005D                 _updateTime E3F0              ?_updateEEPROM 0012  
              _CCP1CONbits 000FBD              ??_eepromWrite 0005                printf@width 002C  
              _CCP2CONbits 000FBA              ??_displayLogs 0030                ?_homescreen 0001  
           __end_of___wmul DEE2                ?_initialize 0001                 ?_S1forward 0001  
               ?_S2forward 0001                 ?_S3forward 0001             __end_of_printf EC3E  
      start_initialization DE64                updateTime@j 0004             ??_updateEEPROM 0014  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002            ___llmod@divisor 0012            ___llmod@counter 0016  
      __size_of_eepromRead 0028                ?_timePassed 0007        __end_of_eepromWrite DF9E  
                 ??___wmul 0005           __CFG_LPT1OSC$OFF 000000                   ??_printf 001F  
      __end_of_displayLogs E6BC                __pbssCOMRAM 005F                ?_updateTime 0001  
             _isdigit$1262 0002                   ?_PWM1off 0001                   ?_PWM2off 0001  
      __size_of_homescreen 0062      __size_of_keyinterrupt 0014        __size_of_initialize 0074  
         _I2C_Master_Start DDE4           _I2C_Master_Write DE08          __size_of_keycheck 0014  
                _main$1616 003F          __CFG_CCP2MX$PORTC 000000              __pmediumconst FDDE  
                _lcdNibble E278                   ?___lldiv 0001                   PWM1@duty 0001  
                 ?___llmod 000E                   PWM2@duty 0001          __size_of_updateS1 0170  
              ??_S1forward 0001                   ?_lcdInst 0001                ??_S2forward 0001  
              ??_S3forward 0001                   ?_readADC 0001                   ?_initLCD 0001  
                 ?_isdigit 0001             __size_of_S1off 0040             __size_of_S2off 0040  
             _keyinterrupt DE50                  _hexpowers FE07        __size_of_timePassed 00AA  
           __size_of_putch 000C         eepromWrite@address 0007             ___wmul@product 0005  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _LATCbits 000F8B  
                 _LATDbits 000F8C                   _LATEbits 000F8D                _eepromWrite DF66  
                 _PIR2bits 000FA1           __CFG_WDTPS$32768 000000        __size_of_updateTime 0066  
               ?_lcdNibble 0001       __end_of_updateEEPROM DF66                _displayLogs E5F6  
               _ADCON0bits 000FC2          ___wmul@multiplier 0001              lcdNibble@data 0002  
             ??_eepromRead 0001                 printf@flag 002E              lcdNibble@temp 0001  
               printf@prec 0024           main@prevSodaTime 0053        I2C_Master_Read@temp 0003  
         __size_of_PWM1off 000A           __size_of_PWM2off 000A           main@prevSoupLoad 003D  
         main@prevSoupTime 005B                 _EECON1bits 000FA6                   __Hrparam 0000  
                 __Lrparam 0000         __end_of_eepromRead DF30         __CFG_BOREN$SBORDIS 000000  
             ??_homescreen 0030           __size_of___lldiv 0082           __size_of___llmod 0066  
           readADC@channel 0002               ??_initialize 0016           __size_of_lcdInst 000C  
          _I2C_Master_Init E2CE           __size_of_readADC 0024            _I2C_Master_Read DEE2  
         __size_of_initLCD 0046            _I2C_Master_Wait DE2A            _I2C_Master_Stop DDEC  
         __size_of_isdigit 001E                   __ptext10 E54C                   __ptext11 DE98  
                 __ptext20 DE7A                   __ptext12 DE50                   __ptext21 DEBC  
                 __ptext13 E456                   __ptext30 E0DE                   __ptext22 E38A  
                 __ptext14 E19E                   __ptext31 E09E                   __ptext23 E4CA  
                 __ptext15 E2CE                   __ptext32 E05E                   __ptext24 DE12  
                 __ptext16 E328                   __ptext33 E01E                   __ptext25 E278  
                 __ptext17 E5F6                   __ptext34 DFDE                   __ptext26 DE3C  
                 __ptext18 E82C                   __ptext35 DF9E                   __ptext27 DF08  
                 __ptext19 DE1E                   __ptext36 DDFE                   __ptext28 E15E  
                 __ptext37 E22E                   __ptext29 E11E                   __ptext38 DDF4  
                 __ptext39 E1E4              __size_of_PWM1 004A              __size_of_PWM2 004A  
       __end_of_homescreen E38A                   _keycheck DE3C              __size_of_main 11A0  
                 _currtime FE38                   _keypress 0070         __end_of_initialize E4CA  
             ??_timePassed 0009                ??_lcdNibble 0001                   _updateS1 E6BC  
                printf@idx 0023                  printf@val 0028            main@prevUnblock 0039  
                putch@data 0003   __end_of_I2C_Master_Start DDEC                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write DE12               ??_updateTime 0004                   isdigit@c 0003  
       __end_of_timePassed E5F6           ___lldiv@dividend 0001      __size_of_updateEEPROM 0036  
               _S1backward DF9E                   printf@ap 0026         __end_of_updateTime E456  
               _S2backward E05E    __end_of_I2C_Master_Init E328    __end_of_I2C_Master_Read DF08  
  __end_of_I2C_Master_Wait DE3C                 _S3backward E11E    __end_of_I2C_Master_Stop DDF4  
              lcdInst@data 0003           ___lldiv@quotient 0009          I2C_Master_Write@d 0002  
             _updateEEPROM DF30               ?_eepromWrite 0004  
