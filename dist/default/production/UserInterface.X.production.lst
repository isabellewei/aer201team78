

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Apr 11 01:48:38 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.41
    59                           ; Generated 25/01/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	mediumconst
    94  00FDF6                     __pmediumconst:
    95                           	opt stack 0
    96  00FDF6  00                 	db	0
    97  00FDF7                     _keys:
    98                           	opt stack 0
    99  00FDF7  31                 	db	49
   100  00FDF8  32                 	db	50
   101  00FDF9  33                 	db	51
   102  00FDFA  41                 	db	65
   103  00FDFB  34                 	db	52
   104  00FDFC  35                 	db	53
   105  00FDFD  36                 	db	54
   106  00FDFE  42                 	db	66
   107  00FDFF  37                 	db	55
   108  00FE00  38                 	db	56
   109  00FE01  39                 	db	57
   110  00FE02  43                 	db	67
   111  00FE03  2A                 	db	42
   112  00FE04  30                 	db	48
   113  00FE05  23                 	db	35
   114  00FE06  44                 	db	68
   115  00FE07  00                 	db	0
   116  00FE08                     __end_of_keys:
   117                           	opt stack 0
   118  00FE08                     _dpowers:
   119                           	opt stack 0
   120  00FE08  0001               	dw	1
   121  00FE0A  000A               	dw	10
   122  00FE0C  0064               	dw	100
   123  00FE0E  03E8               	dw	1000
   124  00FE10  2710               	dw	10000
   125  00FE12                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FE12                     _hexpowers:
   128                           	opt stack 0
   129  00FE12  0001               	dw	1
   130  00FE14  0010               	dw	16
   131  00FE16  0100               	dw	256
   132  00FE18  1000               	dw	4096
   133  00FE1A                     __end_of_hexpowers:
   134                           	opt stack 0
   135  00FE1A                     _currtime:
   136                           	opt stack 0
   137  00FE1A  30                 	db	48
   138  00FE1B  26                 	db	38
   139  00FE1C  13                 	db	19
   140  00FE1D  04                 	db	4
   141  00FE1E  01                 	db	1
   142  00FE1F  03                 	db	3
   143  00FE20  17                 	db	23
   144  00FE21                     __end_of_currtime:
   145                           	opt stack 0
   146  0000                     _ADRES	set	4035
   147  0000                     _TMR1L	set	4046
   148  0000                     _TMR1H	set	4047
   149  0000                     _T1CON	set	4045
   150  0000                     _TMR3L	set	4018
   151  0000                     _TMR3H	set	4019
   152  0000                     _T3CON	set	4017
   153  0000                     _ADCON0bits	set	4034
   154  0000                     _ADCON0	set	4034
   155  0000                     _PIR2bits	set	4001
   156  0000                     _EECON2	set	4007
   157  0000                     _EEDATA	set	4008
   158  0000                     _EECON1bits	set	4006
   159  0000                     _EEADR	set	4009
   160  0000                     _EEADRH	set	4010
   161  0000                     _PORTB	set	3969
   162  0000                     _PORTBbits	set	3969
   163  0000                     _CCP2CONbits	set	4026
   164  0000                     _CCP1CONbits	set	4029
   165  0000                     _SSPBUF	set	4041
   166  0000                     _SSPADD	set	4040
   167  0000                     _SSPCON2	set	4037
   168  0000                     _SSPCON1	set	4038
   169  0000                     _SSPSTAT	set	4039
   170  0000                     _ADRESH	set	4036
   171  0000                     _LATAbits	set	3977
   172  0000                     _LATEbits	set	3981
   173  0000                     _LATCbits	set	3979
   174  0000                     _LATBbits	set	3978
   175  0000                     _LATDbits	set	3980
   176  0000                     _T0CONbits	set	4053
   177  0000                     _CMCONbits	set	4020
   178  0000                     _CVRCON	set	4021
   179  0000                     _ADCON2	set	4032
   180  0000                     _ADCON1	set	4033
   181  0000                     _LATE	set	3981
   182  0000                     _LATD	set	3980
   183  0000                     _LATC	set	3979
   184  0000                     _LATB	set	3978
   185  0000                     _LATA	set	3977
   186  0000                     _T2CON	set	4042
   187  0000                     _CCPR2L	set	4027
   188  0000                     _CCP2CON	set	4026
   189  0000                     _CCPR1L	set	4030
   190  0000                     _CCP1CON	set	4029
   191  0000                     _PR2	set	4043
   192  0000                     _TRISE	set	3990
   193  0000                     _TRISD	set	3989
   194  0000                     _TRISC	set	3988
   195  0000                     _TRISB	set	3987
   196  0000                     _TRISA	set	3986
   197  0000                     _OSCTUNEbits	set	3995
   198  0000                     _OSCCON	set	4051
   199  0000                     _TMR0L	set	4054
   200  0000                     _TMR0H	set	4055
   201  0000                     _T0CON	set	4053
   202  0000                     _INTCONbits	set	4082
   203  0000                     _TMR3ON	set	32136
   204  0000                     _ACKEN	set	32300
   205  0000                     _ACKDT	set	32301
   206  0000                     _RCEN	set	32299
   207  0000                     _PEN	set	32298
   208  0000                     _RSEN	set	32297
   209  0000                     _SEN	set	32296
   210  0000                     _TRISC4	set	31908
   211  0000                     _TRISC3	set	31907
   212  0000                     _PEIE	set	32662
   213  0000                     _TMR1IE	set	31976
   214  0000                     _TMR0IE	set	32661
   215  0000                     _ADFM	set	32263
   216  0000                     _nRBPU	set	32655
   217  0000                     _TMR1ON	set	32360
   218  0000                     _TMR1IF	set	31984
   219  0000                     _TMR0ON	set	32431
   220  0000                     _TMR0IF	set	32658
   221  00FE21                     STR_44:
   222  00FE21  44                 	db	68	;'D'
   223  00FE22  61                 	db	97	;'a'
   224  00FE23  74                 	db	116	;'t'
   225  00FE24  65                 	db	101	;'e'
   226  00FE25  3A                 	db	58	;':'
   227  00FE26  20                 	db	32
   228  00FE27  25                 	db	37
   229  00FE28  30                 	db	48	;'0'
   230  00FE29  32                 	db	50	;'2'
   231  00FE2A  78                 	db	120	;'x'
   232  00FE2B  2F                 	db	47
   233  00FE2C  25                 	db	37
   234  00FE2D  30                 	db	48	;'0'
   235  00FE2E  32                 	db	50	;'2'
   236  00FE2F  78                 	db	120	;'x'
   237  00FE30  2F                 	db	47
   238  00FE31  25                 	db	37
   239  00FE32  30                 	db	48	;'0'
   240  00FE33  32                 	db	50	;'2'
   241  00FE34  78                 	db	120	;'x'
   242  00FE35  00                 	db	0
   243  00FE36                     STR_55:
   244  00FE36  30                 	db	48	;'0'
   245  00FE37  31                 	db	49	;'1'
   246  00FE38  32                 	db	50	;'2'
   247  00FE39  33                 	db	51	;'3'
   248  00FE3A  34                 	db	52	;'4'
   249  00FE3B  35                 	db	53	;'5'
   250  00FE3C  36                 	db	54	;'6'
   251  00FE3D  37                 	db	55	;'7'
   252  00FE3E  38                 	db	56	;'8'
   253  00FE3F  39                 	db	57	;'9'
   254  00FE40  61                 	db	97	;'a'
   255  00FE41  62                 	db	98	;'b'
   256  00FE42  63                 	db	99	;'c'
   257  00FE43  64                 	db	100	;'d'
   258  00FE44  65                 	db	101	;'e'
   259  00FE45  66                 	db	102	;'f'
   260  00FE46  00                 	db	0
   261  00FE47                     STR_50:
   262  00FE47  53                 	db	83	;'S'
   263  00FE48  6F                 	db	111	;'o'
   264  00FE49  64                 	db	100	;'d'
   265  00FE4A  61                 	db	97	;'a'
   266  00FE4B  20                 	db	32
   267  00FE4C  77                 	db	119	;'w'
   268  00FE4D  2F                 	db	47
   269  00FE4E  6F                 	db	111	;'o'
   270  00FE4F  20                 	db	32
   271  00FE50  74                 	db	116	;'t'
   272  00FE51  61                 	db	97	;'a'
   273  00FE52  62                 	db	98	;'b'
   274  00FE53  3A                 	db	58	;':'
   275  00FE54  20                 	db	32
   276  00FE55  25                 	db	37
   277  00FE56  64                 	db	100	;'d'
   278  00FE57  00                 	db	0
   279  00FE58                     STR_54:
   280  00FE58  53                 	db	83	;'S'
   281  00FE59  6F                 	db	111	;'o'
   282  00FE5A  75                 	db	117	;'u'
   283  00FE5B  70                 	db	112	;'p'
   284  00FE5C  20                 	db	32
   285  00FE5D  77                 	db	119	;'w'
   286  00FE5E  2F                 	db	47
   287  00FE5F  6F                 	db	111	;'o'
   288  00FE60  20                 	db	32
   289  00FE61  6C                 	db	108	;'l'
   290  00FE62  62                 	db	98	;'b'
   291  00FE63  6C                 	db	108	;'l'
   292  00FE64  3A                 	db	58	;':'
   293  00FE65  20                 	db	32
   294  00FE66  25                 	db	37
   295  00FE67  64                 	db	100	;'d'
   296  00FE68  00                 	db	0
   297  00FE69                     STR_41:
   298  00FE69  52                 	db	82	;'R'
   299  00FE6A  75                 	db	117	;'u'
   300  00FE6B  6E                 	db	110	;'n'
   301  00FE6C  23                 	db	35
   302  00FE6D  25                 	db	37
   303  00FE6E  64                 	db	100	;'d'
   304  00FE6F  20                 	db	32
   305  00FE70  20                 	db	32
   306  00FE71  20                 	db	32
   307  00FE72  20                 	db	32
   308  00FE73  41                 	db	65	;'A'
   309  00FE74  3A                 	db	58	;':'
   310  00FE75  4E                 	db	78	;'N'
   311  00FE76  65                 	db	101	;'e'
   312  00FE77  78                 	db	120	;'x'
   313  00FE78  74                 	db	116	;'t'
   314  00FE79  00                 	db	0
   315  00FE7A                     STR_4:
   316  00FE7A  74                 	db	116	;'t'
   317  00FE7B  65                 	db	101	;'e'
   318  00FE7C  73                 	db	115	;'s'
   319  00FE7D  74                 	db	116	;'t'
   320  00FE7E  69                 	db	105	;'i'
   321  00FE7F  6E                 	db	110	;'n'
   322  00FE80  67                 	db	103	;'g'
   323  00FE81  20                 	db	32
   324  00FE82  50                 	db	80	;'P'
   325  00FE83  57                 	db	87	;'W'
   326  00FE84  4D                 	db	77	;'M'
   327  00FE85  32                 	db	50	;'2'
   328  00FE86  20                 	db	32
   329  00FE87  43                 	db	67	;'C'
   330  00FE88  43                 	db	67	;'C'
   331  00FE89  57                 	db	87	;'W'
   332  00FE8A  00                 	db	0
   333  00FE8B                     STR_35:
   334  00FE8B  56                 	db	86	;'V'
   335  00FE8C  69                 	db	105	;'i'
   336  00FE8D  65                 	db	101	;'e'
   337  00FE8E  77                 	db	119	;'w'
   338  00FE8F  20                 	db	32
   339  00FE90  4C                 	db	76	;'L'
   340  00FE91  6F                 	db	111	;'o'
   341  00FE92  67                 	db	103	;'g'
   342  00FE93  73                 	db	115	;'s'
   343  00FE94  3F                 	db	63	;'?'
   344  00FE95  20                 	db	32
   345  00FE96  42                 	db	66	;'B'
   346  00FE97  3A                 	db	58	;':'
   347  00FE98  59                 	db	89	;'Y'
   348  00FE99  65                 	db	101	;'e'
   349  00FE9A  73                 	db	115	;'s'
   350  00FE9B  00                 	db	0
   351  00FE9C                     STR_36:
   352  00FE9C  25                 	db	37
   353  00FE9D  30                 	db	48	;'0'
   354  00FE9E  32                 	db	50	;'2'
   355  00FE9F  78                 	db	120	;'x'
   356  00FEA0  2F                 	db	47
   357  00FEA1  25                 	db	37
   358  00FEA2  30                 	db	48	;'0'
   359  00FEA3  32                 	db	50	;'2'
   360  00FEA4  78                 	db	120	;'x'
   361  00FEA5  2F                 	db	47
   362  00FEA6  25                 	db	37
   363  00FEA7  30                 	db	48	;'0'
   364  00FEA8  32                 	db	50	;'2'
   365  00FEA9  78                 	db	120	;'x'
   366  00FEAA  20                 	db	32
   367  00FEAB  00                 	db	0
   368  00FEAC                     STR_48:
   369  00FEAC  53                 	db	83	;'S'
   370  00FEAD  6F                 	db	111	;'o'
   371  00FEAE  64                 	db	100	;'d'
   372  00FEAF  61                 	db	97	;'a'
   373  00FEB0  20                 	db	32
   374  00FEB1  77                 	db	119	;'w'
   375  00FEB2  2F                 	db	47
   376  00FEB3  20                 	db	32
   377  00FEB4  74                 	db	116	;'t'
   378  00FEB5  61                 	db	97	;'a'
   379  00FEB6  62                 	db	98	;'b'
   380  00FEB7  3A                 	db	58	;':'
   381  00FEB8  20                 	db	32
   382  00FEB9  25                 	db	37
   383  00FEBA  64                 	db	100	;'d'
   384  00FEBB  00                 	db	0
   385  00FEBC                     STR_52:
   386  00FEBC  53                 	db	83	;'S'
   387  00FEBD  6F                 	db	111	;'o'
   388  00FEBE  75                 	db	117	;'u'
   389  00FEBF  70                 	db	112	;'p'
   390  00FEC0  20                 	db	32
   391  00FEC1  77                 	db	119	;'w'
   392  00FEC2  2F                 	db	47
   393  00FEC3  20                 	db	32
   394  00FEC4  6C                 	db	108	;'l'
   395  00FEC5  62                 	db	98	;'b'
   396  00FEC6  6C                 	db	108	;'l'
   397  00FEC7  3A                 	db	58	;':'
   398  00FEC8  20                 	db	32
   399  00FEC9  25                 	db	37
   400  00FECA  64                 	db	100	;'d'
   401  00FECB  00                 	db	0
   402  00FECC                     STR_46:
   403  00FECC  53                 	db	83	;'S'
   404  00FECD  74                 	db	116	;'t'
   405  00FECE  61                 	db	97	;'a'
   406  00FECF  72                 	db	114	;'r'
   407  00FED0  74                 	db	116	;'t'
   408  00FED1  3A                 	db	58	;':'
   409  00FED2  20                 	db	32
   410  00FED3  25                 	db	37
   411  00FED4  64                 	db	100	;'d'
   412  00FED5  3A                 	db	58	;':'
   413  00FED6  25                 	db	37
   414  00FED7  64                 	db	100	;'d'
   415  00FED8  3A                 	db	58	;':'
   416  00FED9  25                 	db	37
   417  00FEDA  64                 	db	100	;'d'
   418  00FEDB  00                 	db	0
   419  00FEDC                     STR_1:
   420  00FEDC  53                 	db	83	;'S'
   421  00FEDD  6F                 	db	111	;'o'
   422  00FEDE  72                 	db	114	;'r'
   423  00FEDF  74                 	db	116	;'t'
   424  00FEE0  69                 	db	105	;'i'
   425  00FEE1  6E                 	db	110	;'n'
   426  00FEE2  67                 	db	103	;'g'
   427  00FEE3  20                 	db	32
   428  00FEE4  63                 	db	99	;'c'
   429  00FEE5  61                 	db	97	;'a'
   430  00FEE6  6E                 	db	110	;'n'
   431  00FEE7  73                 	db	115	;'s'
   432  00FEE8  2E                 	db	46
   433  00FEE9  2E                 	db	46
   434  00FEEA  2E                 	db	46
   435  00FEEB  00                 	db	0
   436  00FEEC                     STR_3:
   437  00FEEC  74                 	db	116	;'t'
   438  00FEED  65                 	db	101	;'e'
   439  00FEEE  73                 	db	115	;'s'
   440  00FEEF  74                 	db	116	;'t'
   441  00FEF0  69                 	db	105	;'i'
   442  00FEF1  6E                 	db	110	;'n'
   443  00FEF2  67                 	db	103	;'g'
   444  00FEF3  20                 	db	32
   445  00FEF4  50                 	db	80	;'P'
   446  00FEF5  57                 	db	87	;'W'
   447  00FEF6  4D                 	db	77	;'M'
   448  00FEF7  32                 	db	50	;'2'
   449  00FEF8  20                 	db	32
   450  00FEF9  43                 	db	67	;'C'
   451  00FEFA  57                 	db	87	;'W'
   452  00FEFB  00                 	db	0
   453  00FEFC                     STR_7:
   454  00FEFC  74                 	db	116	;'t'
   455  00FEFD  65                 	db	101	;'e'
   456  00FEFE  73                 	db	115	;'s'
   457  00FEFF  74                 	db	116	;'t'
   458  00FF00  69                 	db	105	;'i'
   459  00FF01  6E                 	db	110	;'n'
   460  00FF02  67                 	db	103	;'g'
   461  00FF03  20                 	db	32
   462  00FF04  53                 	db	83	;'S'
   463  00FF05  20                 	db	32
   464  00FF06  73                 	db	115	;'s'
   465  00FF07  68                 	db	104	;'h'
   466  00FF08  61                 	db	97	;'a'
   467  00FF09  6B                 	db	107	;'k'
   468  00FF0A  65                 	db	101	;'e'
   469  00FF0B  00                 	db	0
   470  00FF0C                     STR_34:
   471  00FF0C  53                 	db	83	;'S'
   472  00FF0D  6F                 	db	111	;'o'
   473  00FF0E  72                 	db	114	;'r'
   474  00FF0F  74                 	db	116	;'t'
   475  00FF10  20                 	db	32
   476  00FF11  64                 	db	100	;'d'
   477  00FF12  6F                 	db	111	;'o'
   478  00FF13  6E                 	db	110	;'n'
   479  00FF14  65                 	db	101	;'e'
   480  00FF15  21                 	db	33
   481  00FF16  20                 	db	32
   482  00FF17  41                 	db	65	;'A'
   483  00FF18  3A                 	db	58	;':'
   484  00FF19  4E                 	db	78	;'N'
   485  00FF1A  6F                 	db	111	;'o'
   486  00FF1B  00                 	db	0
   487  00FF1C                     STR_2:
   488  00FF1C  41                 	db	65	;'A'
   489  00FF1D  6E                 	db	110	;'n'
   490  00FF1E  79                 	db	121	;'y'
   491  00FF1F  20                 	db	32
   492  00FF20  6B                 	db	107	;'k'
   493  00FF21  65                 	db	101	;'e'
   494  00FF22  79                 	db	121	;'y'
   495  00FF23  20                 	db	32
   496  00FF24  74                 	db	116	;'t'
   497  00FF25  6F                 	db	111	;'o'
   498  00FF26  20                 	db	32
   499  00FF27  73                 	db	115	;'s'
   500  00FF28  74                 	db	116	;'t'
   501  00FF29  6F                 	db	111	;'o'
   502  00FF2A  70                 	db	112	;'p'
   503  00FF2B  00                 	db	0
   504  00FF2C                     STR_8:
   505  00FF2C  74                 	db	116	;'t'
   506  00FF2D  65                 	db	101	;'e'
   507  00FF2E  73                 	db	115	;'s'
   508  00FF2F  74                 	db	116	;'t'
   509  00FF30  69                 	db	105	;'i'
   510  00FF31  6E                 	db	110	;'n'
   511  00FF32  67                 	db	103	;'g'
   512  00FF33  20                 	db	32
   513  00FF34  53                 	db	83	;'S'
   514  00FF35  31                 	db	49	;'1'
   515  00FF36  20                 	db	32
   516  00FF37  70                 	db	112	;'p'
   517  00FF38  69                 	db	105	;'i'
   518  00FF39  6E                 	db	110	;'n'
   519  00FF3A  73                 	db	115	;'s'
   520  00FF3B  00                 	db	0
   521  00FF3C                     STR_10:
   522  00FF3C  74                 	db	116	;'t'
   523  00FF3D  65                 	db	101	;'e'
   524  00FF3E  73                 	db	115	;'s'
   525  00FF3F  74                 	db	116	;'t'
   526  00FF40  69                 	db	105	;'i'
   527  00FF41  6E                 	db	110	;'n'
   528  00FF42  67                 	db	103	;'g'
   529  00FF43  20                 	db	32
   530  00FF44  53                 	db	83	;'S'
   531  00FF45  32                 	db	50	;'2'
   532  00FF46  20                 	db	32
   533  00FF47  70                 	db	112	;'p'
   534  00FF48  69                 	db	105	;'i'
   535  00FF49  6E                 	db	110	;'n'
   536  00FF4A  73                 	db	115	;'s'
   537  00FF4B  00                 	db	0
   538  00FF4C                     STR_11:
   539  00FF4C  74                 	db	116	;'t'
   540  00FF4D  65                 	db	101	;'e'
   541  00FF4E  73                 	db	115	;'s'
   542  00FF4F  74                 	db	116	;'t'
   543  00FF50  69                 	db	105	;'i'
   544  00FF51  6E                 	db	110	;'n'
   545  00FF52  67                 	db	103	;'g'
   546  00FF53  20                 	db	32
   547  00FF54  53                 	db	83	;'S'
   548  00FF55  33                 	db	51	;'3'
   549  00FF56  20                 	db	32
   550  00FF57  70                 	db	112	;'p'
   551  00FF58  69                 	db	105	;'i'
   552  00FF59  6E                 	db	110	;'n'
   553  00FF5A  73                 	db	115	;'s'
   554  00FF5B  00                 	db	0
   555  00FF5C                     STR_38:
   556  00FF5C  25                 	db	37
   557  00FF5D  30                 	db	48	;'0'
   558  00FF5E  32                 	db	50	;'2'
   559  00FF5F  78                 	db	120	;'x'
   560  00FF60  3A                 	db	58	;':'
   561  00FF61  25                 	db	37
   562  00FF62  30                 	db	48	;'0'
   563  00FF63  32                 	db	50	;'2'
   564  00FF64  78                 	db	120	;'x'
   565  00FF65  3A                 	db	58	;':'
   566  00FF66  25                 	db	37
   567  00FF67  30                 	db	48	;'0'
   568  00FF68  32                 	db	50	;'2'
   569  00FF69  78                 	db	120	;'x'
   570  00FF6A  00                 	db	0
   571  00FF6B                     STR_14:
   572  00FF6B  74                 	db	116	;'t'
   573  00FF6C  65                 	db	101	;'e'
   574  00FF6D  73                 	db	115	;'s'
   575  00FF6E  74                 	db	116	;'t'
   576  00FF6F  69                 	db	105	;'i'
   577  00FF70  6E                 	db	110	;'n'
   578  00FF71  67                 	db	103	;'g'
   579  00FF72  20                 	db	32
   580  00FF73  54                 	db	84	;'T'
   581  00FF74  4D                 	db	77	;'M'
   582  00FF75  52                 	db	82	;'R'
   583  00FF76  30                 	db	48	;'0'
   584  00FF77  00                 	db	0
   585  00FF78                     STR_13:
   586  00FF78  74                 	db	116	;'t'
   587  00FF79  65                 	db	101	;'e'
   588  00FF7A  73                 	db	115	;'s'
   589  00FF7B  74                 	db	116	;'t'
   590  00FF7C  69                 	db	105	;'i'
   591  00FF7D  6E                 	db	110	;'n'
   592  00FF7E  67                 	db	103	;'g'
   593  00FF7F  20                 	db	32
   594  00FF80  50                 	db	80	;'P'
   595  00FF81  57                 	db	87	;'W'
   596  00FF82  4D                 	db	77	;'M'
   597  00FF83  31                 	db	49	;'1'
   598  00FF84  00                 	db	0
   599  00FF85                     STR_42:
   600  00FF85  52                 	db	82	;'R'
   601  00FF86  75                 	db	117	;'u'
   602  00FF87  6E                 	db	110	;'n'
   603  00FF88  74                 	db	116	;'t'
   604  00FF89  69                 	db	105	;'i'
   605  00FF8A  6D                 	db	109	;'m'
   606  00FF8B  65                 	db	101	;'e'
   607  00FF8C  3A                 	db	58	;':'
   608  00FF8D  20                 	db	32
   609  00FF8E  25                 	db	37
   610  00FF8F  64                 	db	100	;'d'
   611  00FF90  00                 	db	0
   612  00FF91                     STR_6:
   613  00FF91  74                 	db	116	;'t'
   614  00FF92  65                 	db	101	;'e'
   615  00FF93  73                 	db	115	;'s'
   616  00FF94  74                 	db	116	;'t'
   617  00FF95  69                 	db	105	;'i'
   618  00FF96  6E                 	db	110	;'n'
   619  00FF97  67                 	db	103	;'g'
   620  00FF98  20                 	db	32
   621  00FF99  53                 	db	83	;'S'
   622  00FF9A  20                 	db	32
   623  00FF9B  62                 	db	98	;'b'
   624  00FF9C  00                 	db	0
   625  00FF9D                     STR_21:
   626  00FF9D  6C                 	db	108	;'l'
   627  00FF9E  61                 	db	97	;'a'
   628  00FF9F  62                 	db	98	;'b'
   629  00FFA0  65                 	db	101	;'e'
   630  00FFA1  6C                 	db	108	;'l'
   631  00FFA2  20                 	db	32
   632  00FFA3  20                 	db	32
   633  00FFA4  20                 	db	32
   634  00FFA5  74                 	db	116	;'t'
   635  00FFA6  61                 	db	97	;'a'
   636  00FFA7  62                 	db	98	;'b'
   637  00FFA8  00                 	db	0
   638  00FFA9                     STR_30:
   639  00FFA9  73                 	db	115	;'s'
   640  00FFAA  6F                 	db	111	;'o'
   641  00FFAB  64                 	db	100	;'d'
   642  00FFAC  61                 	db	97	;'a'
   643  00FFAD  3A                 	db	58	;':'
   644  00FFAE  20                 	db	32
   645  00FFAF  25                 	db	37
   646  00FFB0  78                 	db	120	;'x'
   647  00FFB1  20                 	db	32
   648  00FFB2  25                 	db	37
   649  00FFB3  64                 	db	100	;'d'
   650  00FFB4  00                 	db	0
   651  00FFB5                     STR_24:
   652  00FFB5  73                 	db	115	;'s'
   653  00FFB6  6F                 	db	111	;'o'
   654  00FFB7  75                 	db	117	;'u'
   655  00FFB8  70                 	db	112	;'p'
   656  00FFB9  3A                 	db	58	;':'
   657  00FFBA  20                 	db	32
   658  00FFBB  25                 	db	37
   659  00FFBC  78                 	db	120	;'x'
   660  00FFBD  20                 	db	32
   661  00FFBE  25                 	db	37
   662  00FFBF  64                 	db	100	;'d'
   663  00FFC0  00                 	db	0
   664  00FFC1                     STR_5:
   665  00FFC1  74                 	db	116	;'t'
   666  00FFC2  65                 	db	101	;'e'
   667  00FFC3  73                 	db	115	;'s'
   668  00FFC4  74                 	db	116	;'t'
   669  00FFC5  69                 	db	105	;'i'
   670  00FFC6  6E                 	db	110	;'n'
   671  00FFC7  67                 	db	103	;'g'
   672  00FFC8  20                 	db	32
   673  00FFC9  53                 	db	83	;'S'
   674  00FFCA  20                 	db	32
   675  00FFCB  66                 	db	102	;'f'
   676  00FFCC  00                 	db	0
   677  00FFCD                     STR_16:
   678  00FFCD  74                 	db	116	;'t'
   679  00FFCE  65                 	db	101	;'e'
   680  00FFCF  73                 	db	115	;'s'
   681  00FFD0  74                 	db	116	;'t'
   682  00FFD1  69                 	db	105	;'i'
   683  00FFD2  6E                 	db	110	;'n'
   684  00FFD3  67                 	db	103	;'g'
   685  00FFD4  20                 	db	32
   686  00FFD5  49                 	db	73	;'I'
   687  00FFD6  52                 	db	82	;'R'
   688  00FFD7  00                 	db	0
   689  00FFD8                     STR_22:
   690  00FFD8  25                 	db	37
   691  00FFD9  78                 	db	120	;'x'
   692  00FFDA  20                 	db	32
   693  00FFDB  20                 	db	32
   694  00FFDC  20                 	db	32
   695  00FFDD  20                 	db	32
   696  00FFDE  20                 	db	32
   697  00FFDF  20                 	db	32
   698  00FFE0  00                 	db	0
   699  00FFE1                     STR_39:
   700  00FFE1  20                 	db	32
   701  00FFE2  41                 	db	65	;'A'
   702  00FFE3  3A                 	db	58	;':'
   703  00FFE4  4C                 	db	76	;'L'
   704  00FFE5  6F                 	db	111	;'o'
   705  00FFE6  67                 	db	103	;'g'
   706  00FFE7  73                 	db	115	;'s'
   707  00FFE8  00                 	db	0
   708  00FFE9                     STR_37:
   709  00FFE9  33                 	db	51	;'3'
   710  00FFEA  3A                 	db	58	;':'
   711  00FFEB  53                 	db	83	;'S'
   712  00FFEC  74                 	db	116	;'t'
   713  00FFED  61                 	db	97	;'a'
   714  00FFEE  72                 	db	114	;'r'
   715  00FFEF  74                 	db	116	;'t'
   716  00FFF0  00                 	db	0
   717  00FFF1                     STR_40:
   718  00FFF1  25                 	db	37
   719  00FFF2  64                 	db	100	;'d'
   720  00FFF3  20                 	db	32
   721  00FFF4  25                 	db	37
   722  00FFF5  64                 	db	100	;'d'
   723  00FFF6  00                 	db	0
   724  00FFF7                     STR_17:
   725  00FFF7  25                 	db	37
   726  00FFF8  78                 	db	120	;'x'
   727  00FFF9  20                 	db	32
   728  00FFFA  00                 	db	0
   729  00FFFB                     STR_25:
   730  00FFFB  20                 	db	32
   731  00FFFC  25                 	db	37
   732  00FFFD  78                 	db	120	;'x'
   733  00FFFE  00                 	db	0
   734  0000                     
   735                           ; #config settings
   736  00FFFF  00                 	db	0	; dummy byte at the end
   737  0000                     
   738                           	psect	cinit
   739  002530                     __pcinit:
   740                           	opt stack 0
   741  002530                     start_initialization:
   742                           	opt stack 0
   743  002530                     __initialization:
   744                           	opt stack 0
   745                           
   746                           ; Clear objects allocated to BANK0 (15 bytes)
   747  002530  EE00  F09E         	lfsr	0,__pbssBANK0
   748  002534  0E0F               	movlw	15
   749  002536                     clear_0:
   750  002536  6AEE               	clrf	postinc0,c
   751  002538  06E8               	decf	wreg,f,c
   752  00253A  E1FD               	bnz	clear_0
   753                           
   754                           ; Clear objects allocated to COMRAM (31 bytes)
   755  00253C  EE00  F042         	lfsr	0,__pbssCOMRAM
   756  002540  0E1F               	movlw	31
   757  002542                     clear_1:
   758  002542  6AEE               	clrf	postinc0,c
   759  002544  06E8               	decf	wreg,f,c
   760  002546  E1FD               	bnz	clear_1
   761  002548                     end_of_initialization:
   762                           	opt stack 0
   763  002548                     __end_of__initialization:
   764                           	opt stack 0
   765  002548  9061               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   766  00254A  9261               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   767  00254C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   768  00254E  6EF8               	movwf	tblptru,c
   769  002550  0100               	movlb	0
   770  002552  EF09  F000         	goto	_main	;jump to C main() function
   771                           tblptru	equ	0xFF8
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775                           	psect	bssCOMRAM
   776  000042                     __pbssCOMRAM:
   777                           	opt stack 0
   778  000042                     _t3:
   779                           	opt stack 0
   780  000042                     	ds	2
   781  000044                     _t2:
   782                           	opt stack 0
   783  000044                     	ds	2
   784  000046                     _t:
   785                           	opt stack 0
   786  000046                     	ds	2
   787  000048                     _s3:
   788                           	opt stack 0
   789  000048                     	ds	2
   790  00004A                     _s2:
   791                           	opt stack 0
   792  00004A                     	ds	2
   793  00004C                     _s1:
   794                           	opt stack 0
   795  00004C                     	ds	2
   796  00004E                     _soupAlign:
   797                           	opt stack 0
   798  00004E                     	ds	2
   799  000050                     _sodaAlign:
   800                           	opt stack 0
   801  000050                     	ds	2
   802  000052                     _labelState:
   803                           	opt stack 0
   804  000052                     	ds	2
   805  000054                     _tabState:
   806                           	opt stack 0
   807  000054                     	ds	2
   808  000056                     _sodaSteps:
   809                           	opt stack 0
   810  000056                     	ds	2
   811  000058                     _soupSteps:
   812                           	opt stack 0
   813  000058                     	ds	2
   814  00005A                     _S3mode:
   815                           	opt stack 0
   816  00005A                     	ds	2
   817  00005C                     _S1mode:
   818                           	opt stack 0
   819  00005C                     	ds	2
   820  00005E                     _seconds:
   821                           	opt stack 0
   822  00005E                     	ds	2
   823  000060                     _keypress:
   824                           	opt stack 0
   825  000060                     	ds	1
   826                           tblptru	equ	0xFF8
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           
   830                           	psect	bssBANK0
   831  00009E                     __pbssBANK0:
   832                           	opt stack 0
   833  00009E                     _time:
   834                           	opt stack 0
   835  00009E                     	ds	7
   836  0000A5                     _curr:
   837                           	opt stack 0
   838  0000A5                     	ds	2
   839  0000A7                     _prev:
   840                           	opt stack 0
   841  0000A7                     	ds	2
   842  0000A9                     _s:
   843                           	opt stack 0
   844  0000A9                     	ds	2
   845  0000AB                     _S2mode:
   846                           	opt stack 0
   847  0000AB                     	ds	2
   848                           tblptru	equ	0xFF8
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           
   852                           	psect	cstackBANK0
   853  000080                     __pcstackBANK0:
   854                           	opt stack 0
   855  000080                     main@soupLoad:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x0
   859  000080                     	ds	2
   860  000082                     main@sodaLoad:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x2
   864  000082                     	ds	2
   865  000084                     main@ee:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x4
   869  000084                     	ds	2
   870  000086                     main@s:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x6
   874  000086                     	ds	2
   875  000088                     main@soupL:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x8
   879  000088                     	ds	2
   880  00008A                     main@soupNL:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0xA
   884  00008A                     	ds	2
   885  00008C                     main@sodaT:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0xC
   889  00008C                     	ds	2
   890  00008E                     main@sodaNT:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0xE
   894  00008E                     	ds	2
   895  000090                     main@prevSoupLoad:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x10
   899  000090                     	ds	2
   900  000092                     main@prevSodaLoad:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x12
   904  000092                     	ds	2
   905  000094                     main@soupSort:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x14
   909  000094                     	ds	2
   910  000096                     main@sodaSort:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x16
   914  000096                     	ds	2
   915  000098                     main@prevSodaIR:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x18
   919  000098                     	ds	2
   920  00009A                     main@prevSoupIR:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x1A
   924  00009A                     	ds	2
   925  00009C                     main@standby:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x1C
   929  00009C                     	ds	2
   930                           tblptru	equ	0xFF8
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           
   934                           	psect	cstackCOMRAM
   935  000001                     __pcstackCOMRAM:
   936                           	opt stack 0
   937  000001                     ?i2___awmod:
   938                           	opt stack 0
   939  000001                     updateS2@mode:
   940                           	opt stack 0
   941  000001                     i2updateS1@mode:
   942                           	opt stack 0
   943  000001                     i2updateS3@mode:
   944                           	opt stack 0
   945  000001                     i2___awmod@dividend:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x0
   949  000001                     	ds	2
   950  000003                     ??_updateS2:
   951  000003                     ??i2_updateS1:
   952  000003                     ??i2_updateS3:
   953  000003                     i2___awmod@divisor:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x2
   957  000003                     	ds	2
   958  000005                     i2___awmod@counter:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x4
   962  000005                     	ds	1
   963  000006                     i2___awmod@sign:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x5
   967  000006                     	ds	1
   968  000007                     ??_handler:
   969                           
   970                           ; 1 bytes @ 0x6
   971  000007                     	ds	14
   972  000015                     ??_readADC:
   973  000015                     ??_isdigit:
   974  000015                     ??_I2C_Master_Wait:
   975  000015                     ??_eepromRead:
   976  000015                     ?___wmul:
   977                           	opt stack 0
   978  000015                     ?___awmod:
   979                           	opt stack 0
   980  000015                     ?___lwdiv:
   981                           	opt stack 0
   982  000015                     ?___lldiv:
   983                           	opt stack 0
   984  000015                     lcdNibble@temp:
   985                           	opt stack 0
   986  000015                     eepromWrite@data:
   987                           	opt stack 0
   988  000015                     PWM1@duty:
   989                           	opt stack 0
   990  000015                     PWM2@duty:
   991                           	opt stack 0
   992  000015                     updateS1@mode:
   993                           	opt stack 0
   994  000015                     updateS3@mode:
   995                           	opt stack 0
   996  000015                     ___wmul@multiplier:
   997                           	opt stack 0
   998  000015                     ___awmod@dividend:
   999                           	opt stack 0
  1000  000015                     ___lwdiv@dividend:
  1001                           	opt stack 0
  1002  000015                     ___lldiv@dividend:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x14
  1006  000015                     	ds	1
  1007  000016                     ??_eepromWrite:
  1008  000016                     lcdNibble@data:
  1009                           	opt stack 0
  1010  000016                     I2C_Master_Read@a:
  1011                           	opt stack 0
  1012  000016                     readADC@channel:
  1013                           	opt stack 0
  1014  000016                     _isdigit$1451:
  1015                           	opt stack 0
  1016  000016                     I2C_Master_Write@d:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x15
  1020  000016                     	ds	1
  1021  000017                     ??_updateS1:
  1022  000017                     ??_updateS3:
  1023  000017                     ??_PWM1:
  1024  000017                     lcdInst@data:
  1025                           	opt stack 0
  1026  000017                     putch@data:
  1027                           	opt stack 0
  1028  000017                     I2C_Master_Read@temp:
  1029                           	opt stack 0
  1030  000017                     eepromRead@address:
  1031                           	opt stack 0
  1032  000017                     isdigit@c:
  1033                           	opt stack 0
  1034  000017                     PWM2@dir:
  1035                           	opt stack 0
  1036  000017                     ___wmul@multiplicand:
  1037                           	opt stack 0
  1038  000017                     ___awmod@divisor:
  1039                           	opt stack 0
  1040  000017                     ___lwdiv@divisor:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x16
  1044  000017                     	ds	1
  1045  000018                     ??_initLCD:
  1046  000018                     updateTime@j:
  1047                           	opt stack 0
  1048  000018                     eepromWrite@address:
  1049                           	opt stack 0
  1050  000018                     calibrateWheels@prev:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x17
  1054  000018                     	ds	1
  1055  000019                     ??_PWM2:
  1056  000019                     ___awmod@counter:
  1057                           	opt stack 0
  1058  000019                     ___lwdiv@counter:
  1059                           	opt stack 0
  1060  000019                     addRun@dur:
  1061                           	opt stack 0
  1062  000019                     ___wmul@product:
  1063                           	opt stack 0
  1064  000019                     ___lldiv@divisor:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x18
  1068  000019                     	ds	1
  1069  00001A                     ___awmod@sign:
  1070                           	opt stack 0
  1071  00001A                     calibrateWheels@i:
  1072                           	opt stack 0
  1073  00001A                     ___lwdiv@quotient:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x19
  1077  00001A                     	ds	1
  1078  00001B                     addRun@year:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x1A
  1082  00001B                     	ds	1
  1083  00001C                     ?___lwmod:
  1084                           	opt stack 0
  1085  00001C                     ___lwmod@dividend:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x1B
  1089  00001C                     	ds	1
  1090  00001D                     addRun@month:
  1091                           	opt stack 0
  1092  00001D                     ___lldiv@quotient:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x1C
  1096  00001D                     	ds	1
  1097  00001E                     ___lwmod@divisor:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x1D
  1101  00001E                     	ds	1
  1102  00001F                     addRun@date:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x1E
  1106  00001F                     	ds	1
  1107  000020                     ___lwmod@counter:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x1F
  1111  000020                     	ds	1
  1112  000021                     ?_printf:
  1113                           	opt stack 0
  1114  000021                     ___lldiv@counter:
  1115                           	opt stack 0
  1116  000021                     addRun@hours:
  1117                           	opt stack 0
  1118  000021                     printf@f:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x20
  1122  000021                     	ds	1
  1123  000022                     I2C_Master_Init@c:
  1124                           	opt stack 0
  1125                           
  1126                           ; 4 bytes @ 0x21
  1127  000022                     	ds	1
  1128  000023                     addRun@mins:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x22
  1132  000023                     	ds	2
  1133  000025                     addRun@secs:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x24
  1137  000025                     	ds	1
  1138  000026                     ??_I2C_Master_Init:
  1139                           
  1140                           ; 1 bytes @ 0x25
  1141  000026                     	ds	1
  1142  000027                     addRun@sodaT:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x26
  1146  000027                     	ds	2
  1147  000029                     ??_printf:
  1148  000029                     addRun@sodaNT:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x28
  1152  000029                     	ds	1
  1153  00002A                     
  1154                           ; 1 bytes @ 0x29
  1155  00002A                     	ds	1
  1156  00002B                     addRun@soupL:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x2A
  1160  00002B                     	ds	2
  1161  00002D                     printf@idx:
  1162                           	opt stack 0
  1163  00002D                     addRun@soupNL:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x2C
  1167  00002D                     	ds	1
  1168  00002E                     printf@ap:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x2D
  1172  00002E                     	ds	1
  1173  00002F                     ??_addRun:
  1174                           
  1175                           ; 1 bytes @ 0x2E
  1176  00002F                     	ds	1
  1177  000030                     printf@prec:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x2F
  1181  000030                     	ds	1
  1182  000031                     printf@val:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x30
  1186  000031                     	ds	1
  1187  000032                     addRun@currRun:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x31
  1191  000032                     	ds	1
  1192  000033                     printf@flag:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x32
  1196  000033                     	ds	1
  1197  000034                     printf@width:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x33
  1201  000034                     	ds	2
  1202  000036                     printf@c:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x35
  1206  000036                     	ds	1
  1207  000037                     displayLog@run:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x36
  1211  000037                     	ds	2
  1212  000039                     ??_displayLog:
  1213                           
  1214                           ; 1 bytes @ 0x38
  1215  000039                     	ds	3
  1216  00003C                     displayLog@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x3B
  1220  00003C                     	ds	2
  1221  00003E                     displayLog@currRun:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x3D
  1225  00003E                     	ds	2
  1226  000040                     ??_main:
  1227                           
  1228                           ; 1 bytes @ 0x3F
  1229  000040                     	ds	2
  1230                           tblptru	equ	0xFF8
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           
  1234 ;;
  1235 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1236 ;;
  1237 ;; *************** function _main *****************
  1238 ;; Defined at:
  1239 ;;		line 132 in file "main.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  standby         2   28[BANK0 ] int 
  1244 ;;  prevSoupIR      2   26[BANK0 ] int 
  1245 ;;  prevSodaIR      2   24[BANK0 ] int 
  1246 ;;  sodaSort        2   22[BANK0 ] int 
  1247 ;;  soupSort        2   20[BANK0 ] int 
  1248 ;;  prevSodaLoad    2   18[BANK0 ] int 
  1249 ;;  prevSoupLoad    2   16[BANK0 ] int 
  1250 ;;  sodaNT          2   14[BANK0 ] int 
  1251 ;;  sodaT           2   12[BANK0 ] int 
  1252 ;;  soupNL          2   10[BANK0 ] int 
  1253 ;;  soupL           2    8[BANK0 ] int 
  1254 ;;  s               2    6[BANK0 ] int 
  1255 ;;  ee              2    4[BANK0 ] int 
  1256 ;;  sodaLoad        2    2[BANK0 ] int 
  1257 ;;  soupLoad        2    0[BANK0 ] int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2  177[None  ] int 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;      Totals:         2      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;Total ram usage:       32 bytes
  1272 ;; Hardware stack levels required when called:    6
  1273 ;; This function calls:
  1274 ;;		_PWM1
  1275 ;;		_PWM1off
  1276 ;;		_PWM2
  1277 ;;		_PWM2off
  1278 ;;		___awmod
  1279 ;;		_addRun
  1280 ;;		_calibrateWheels
  1281 ;;		_displayLog
  1282 ;;		_homescreen
  1283 ;;		_initialize
  1284 ;;		_keycheck
  1285 ;;		_keyinterrupt
  1286 ;;		_lcdInst
  1287 ;;		_printf
  1288 ;;		_readADC
  1289 ;;		_startTMR1
  1290 ;;		_updateS1
  1291 ;;		_updateS3
  1292 ;;		_updateTime
  1293 ;; This function is called by:
  1294 ;;		Startup code after reset
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text0
  1299  000012                     __ptext0:
  1300                           	opt stack 0
  1301  000012                     _main:
  1302                           	opt stack 25
  1303                           
  1304                           ;main.c: 133: LATA = 0;
  1305                           
  1306                           ;incstack = 0
  1307  000012  0E00               	movlw	0
  1308  000014  6E89               	movwf	3977,c	;volatile
  1309                           
  1310                           ;main.c: 135: initialize();
  1311  000016  EC31  F010         	call	_initialize	;wreg free
  1312                           
  1313                           ;main.c: 136: int standby = 1;
  1314  00001A  0E00               	movlw	0
  1315  00001C  0100               	movlb	0	; () banked
  1316  00001E  6F9D               	movwf	(main@standby+1)& (0+255),b
  1317  000020  0E01               	movlw	1
  1318  000022  6F9C               	movwf	main@standby& (0+255),b
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 137: int s = 0;
  1322  000024  0E00               	movlw	0
  1323  000026  0100               	movlb	0	; () banked
  1324  000028  6F87               	movwf	(main@s+1)& (0+255),b
  1325  00002A  0E00               	movlw	0
  1326  00002C  6F86               	movwf	main@s& (0+255),b
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 138: int prevSodaIR;
  1330                           ;main.c: 139: int prevSoupIR;
  1331                           ;main.c: 141: int soupLoad = 1;
  1332  00002E  0E00               	movlw	0
  1333  000030  0100               	movlb	0	; () banked
  1334  000032  6F81               	movwf	(main@soupLoad+1)& (0+255),b
  1335  000034  0E01               	movlw	1
  1336  000036  6F80               	movwf	main@soupLoad& (0+255),b
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 142: int sodaLoad = 1;
  1340  000038  0E00               	movlw	0
  1341  00003A  0100               	movlb	0	; () banked
  1342  00003C  6F83               	movwf	(main@sodaLoad+1)& (0+255),b
  1343  00003E  0E01               	movlw	1
  1344  000040  6F82               	movwf	main@sodaLoad& (0+255),b
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 145: int soupSort;
  1348                           ;main.c: 146: int prevSoupLoad;
  1349                           ;main.c: 147: int sodaSort;
  1350                           ;main.c: 148: int prevSodaLoad;
  1351                           ;main.c: 150: int soupL;
  1352                           ;main.c: 151: int soupNL ;
  1353                           ;main.c: 152: int sodaT;
  1354                           ;main.c: 153: int sodaNT;
  1355                           ;main.c: 155: T0CON = 0b00010111;
  1356  000042  0E17               	movlw	23
  1357  000044  6ED5               	movwf	4053,c	;volatile
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 156: TMR0H = 0b10000101;
  1361  000046  0E85               	movlw	133
  1362  000048  6ED7               	movwf	4055,c	;volatile
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 157: TMR0L = 0b10101110;
  1366  00004A  0EAE               	movlw	174
  1367  00004C  6ED6               	movwf	4054,c	;volatile
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;main.c: 158: T0CONbits.TMR0ON = 1;
  1371  00004E  8ED5               	bsf	4053,7,c	;volatile
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 159: startTMR1();
  1375  000050  EC0F  F013         	call	_startTMR1	;wreg free
  1376                           
  1377                           ;main.c: 162: int ee = 0x100;
  1378  000054  0E01               	movlw	1
  1379  000056  0100               	movlb	0	; () banked
  1380  000058  6F85               	movwf	(main@ee+1)& (0+255),b
  1381  00005A  0E00               	movlw	0
  1382  00005C  6F84               	movwf	main@ee& (0+255),b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 164: _delay((unsigned long)((10)*(32000000/4000.0)));
  1386  00005E  0E68               	movlw	104
  1387  000060  6E40               	movwf	??_main& (0+255),c
  1388  000062  0EE4               	movlw	228
  1389  000064                     u7627:
  1390  000064  2EE8               	decfsz	wreg,f,c
  1391  000066  D7FE               	bra	u7627
  1392  000068  2E40               	decfsz	??_main& (0+255),f,c
  1393  00006A  D7FC               	bra	u7627
  1394  00006C  D000               	nop2	
  1395  00006E                     l5765:
  1396                           
  1397                           ;main.c: 168: if (standby == 1){
  1398  00006E  0100               	movlb	0	; () banked
  1399  000070  059C               	decf	main@standby& (0+255),w,b
  1400  000072  0100               	movlb	0	; () banked
  1401  000074  119D               	iorwf	(main@standby+1)& (0+255),w,b
  1402  000076  A4D8               	btfss	status,2,c
  1403  000078  D0BE               	goto	l5813
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 169: keypress = (0);
  1407  00007A  0E00               	movlw	0
  1408  00007C  6E60               	movwf	_keypress,c	;volatile
  1409                           
  1410                           ;main.c: 170: while(keypress == (0)){
  1411  00007E  D006               	goto	l5775
  1412  000080                     l5769:
  1413                           
  1414                           ;main.c: 171: updateTime();
  1415  000080  EC19  F011         	call	_updateTime	;wreg free
  1416                           
  1417                           ;main.c: 172: homescreen();
  1418  000084  EC4D  F011         	call	_homescreen	;wreg free
  1419                           
  1420                           ;main.c: 173: keyinterrupt();
  1421  000088  ECF2  F012         	call	_keyinterrupt	;wreg free
  1422  00008C                     l5775:
  1423  00008C  5060               	movf	_keypress,w,c	;volatile
  1424  00008E  B4D8               	btfsc	status,2,c
  1425  000090  D7F7               	goto	l5769
  1426                           
  1427                           ;main.c: 174: }
  1428                           ;main.c: 176: if(keypress == 2){
  1429  000092  0E02               	movlw	2
  1430  000094  1860               	xorwf	_keypress,w,c	;volatile
  1431  000096  A4D8               	btfss	status,2,c
  1432  000098  D082               	goto	l5805
  1433                           
  1434                           ;main.c: 178: standby = 0;
  1435  00009A  0E00               	movlw	0
  1436  00009C  0100               	movlb	0	; () banked
  1437  00009E  6F9D               	movwf	(main@standby+1)& (0+255),b
  1438  0000A0  0E00               	movlw	0
  1439  0000A2  6F9C               	movwf	main@standby& (0+255),b
  1440                           
  1441                           ;main.c: 179: seconds = 0;
  1442  0000A4  0E00               	movlw	0
  1443  0000A6  6E5F               	movwf	_seconds+1,c
  1444  0000A8  0E00               	movlw	0
  1445  0000AA  6E5E               	movwf	_seconds,c
  1446                           
  1447                           ;main.c: 180: labelState = 0;
  1448  0000AC  0E00               	movlw	0
  1449  0000AE  6E53               	movwf	_labelState+1,c
  1450  0000B0  0E00               	movlw	0
  1451  0000B2  6E52               	movwf	_labelState,c
  1452                           
  1453                           ;main.c: 181: soupSort = 0;
  1454  0000B4  0E00               	movlw	0
  1455  0000B6  0100               	movlb	0	; () banked
  1456  0000B8  6F95               	movwf	(main@soupSort+1)& (0+255),b
  1457  0000BA  0E00               	movlw	0
  1458  0000BC  6F94               	movwf	main@soupSort& (0+255),b
  1459                           
  1460                           ;main.c: 182: tabState = 0;
  1461  0000BE  0E00               	movlw	0
  1462  0000C0  6E55               	movwf	_tabState+1,c
  1463  0000C2  0E00               	movlw	0
  1464  0000C4  6E54               	movwf	_tabState,c
  1465                           
  1466                           ;main.c: 183: sodaSort = 0;
  1467  0000C6  0E00               	movlw	0
  1468  0000C8  0100               	movlb	0	; () banked
  1469  0000CA  6F97               	movwf	(main@sodaSort+1)& (0+255),b
  1470  0000CC  0E00               	movlw	0
  1471  0000CE  6F96               	movwf	main@sodaSort& (0+255),b
  1472                           
  1473                           ;main.c: 184: soupSteps = 0;
  1474  0000D0  0E00               	movlw	0
  1475  0000D2  6E59               	movwf	_soupSteps+1,c
  1476  0000D4  0E00               	movlw	0
  1477  0000D6  6E58               	movwf	_soupSteps,c
  1478                           
  1479                           ;main.c: 185: sodaSteps = 0;
  1480  0000D8  0E00               	movlw	0
  1481  0000DA  6E57               	movwf	_sodaSteps+1,c
  1482  0000DC  0E00               	movlw	0
  1483  0000DE  6E56               	movwf	_sodaSteps,c
  1484                           
  1485                           ;main.c: 186: soupL = 0;
  1486  0000E0  0E00               	movlw	0
  1487  0000E2  0100               	movlb	0	; () banked
  1488  0000E4  6F89               	movwf	(main@soupL+1)& (0+255),b
  1489  0000E6  0E00               	movlw	0
  1490  0000E8  6F88               	movwf	main@soupL& (0+255),b
  1491                           
  1492                           ;main.c: 187: soupNL = 0;
  1493  0000EA  0E00               	movlw	0
  1494  0000EC  0100               	movlb	0	; () banked
  1495  0000EE  6F8B               	movwf	(main@soupNL+1)& (0+255),b
  1496  0000F0  0E00               	movlw	0
  1497  0000F2  6F8A               	movwf	main@soupNL& (0+255),b
  1498                           
  1499                           ;main.c: 188: sodaT = 0;
  1500  0000F4  0E00               	movlw	0
  1501  0000F6  0100               	movlb	0	; () banked
  1502  0000F8  6F8D               	movwf	(main@sodaT+1)& (0+255),b
  1503  0000FA  0E00               	movlw	0
  1504  0000FC  6F8C               	movwf	main@sodaT& (0+255),b
  1505                           
  1506                           ;main.c: 189: sodaNT = 0;
  1507  0000FE  0E00               	movlw	0
  1508  000100  0100               	movlb	0	; () banked
  1509  000102  6F8F               	movwf	(main@sodaNT+1)& (0+255),b
  1510  000104  0E00               	movlw	0
  1511  000106  6F8E               	movwf	main@sodaNT& (0+255),b
  1512                           
  1513                           ;main.c: 190: prevSoupIR = 0;
  1514  000108  0E00               	movlw	0
  1515  00010A  0100               	movlb	0	; () banked
  1516  00010C  6F9B               	movwf	(main@prevSoupIR+1)& (0+255),b
  1517  00010E  0E00               	movlw	0
  1518  000110  6F9A               	movwf	main@prevSoupIR& (0+255),b
  1519                           
  1520                           ;main.c: 191: prevSodaIR = 0;
  1521  000112  0E00               	movlw	0
  1522  000114  0100               	movlb	0	; () banked
  1523  000116  6F99               	movwf	(main@prevSodaIR+1)& (0+255),b
  1524  000118  0E00               	movlw	0
  1525  00011A  6F98               	movwf	main@prevSodaIR& (0+255),b
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;main.c: 193: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1529  00011C  0E01               	movlw	1
  1530  00011E  EC25  F013         	call	_lcdInst
  1531  000122  0E34               	movlw	52
  1532  000124  6E40               	movwf	??_main& (0+255),c
  1533  000126  0EF2               	movlw	242
  1534  000128                     u7637:
  1535  000128  2EE8               	decfsz	wreg,f,c
  1536  00012A  D7FE               	bra	u7637
  1537  00012C  2E40               	decfsz	??_main& (0+255),f,c
  1538  00012E  D7FC               	bra	u7637
  1539                           
  1540                           ;main.c: 194: printf("Sorting cans...");
  1541  000130  0EDC               	movlw	low STR_1
  1542  000132  6E21               	movwf	printf@f,c
  1543  000134  0EFE               	movlw	high STR_1
  1544  000136  6E22               	movwf	printf@f+1,c
  1545  000138  EC6F  F008         	call	_printf	;wreg free
  1546                           
  1547                           ;main.c: 195: lcdInst(0b11000000);;
  1548  00013C  0EC0               	movlw	192
  1549  00013E  EC25  F013         	call	_lcdInst
  1550                           
  1551                           ;main.c: 196: printf("Any key to stop");
  1552  000142  0E1C               	movlw	low STR_2
  1553  000144  6E21               	movwf	printf@f,c
  1554  000146  0EFF               	movlw	high STR_2
  1555  000148  6E22               	movwf	printf@f+1,c
  1556  00014A  EC6F  F008         	call	_printf	;wreg free
  1557                           
  1558                           ;main.c: 198: while(soupSteps < 8){
  1559  00014E  D005               	goto	l5793
  1560  000150                     l5791:
  1561                           
  1562                           ;main.c: 199: S2mode = 2;
  1563  000150  0E00               	movlw	0
  1564  000152  0100               	movlb	0	; () banked
  1565  000154  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1566  000156  0E02               	movlw	2
  1567  000158  6FAB               	movwf	_S2mode& (0+255),b
  1568  00015A                     l5793:
  1569  00015A  BE59               	btfsc	_soupSteps+1,7,c
  1570  00015C  D7F9               	goto	l5791
  1571  00015E  5059               	movf	_soupSteps+1,w,c
  1572  000160  E104               	bnz	l5795
  1573  000162  0E08               	movlw	8
  1574  000164  5C58               	subwf	_soupSteps,w,c
  1575  000166  A0D8               	btfss	status,0,c
  1576  000168  D7F3               	goto	l5791
  1577  00016A                     l5795:
  1578                           
  1579                           ;main.c: 200: }
  1580                           ;main.c: 201: S2mode = 4;
  1581  00016A  0E00               	movlw	0
  1582  00016C  0100               	movlb	0	; () banked
  1583  00016E  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1584  000170  0E04               	movlw	4
  1585  000172  6FAB               	movwf	_S2mode& (0+255),b
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 202: calibrateWheels();
  1589  000174  ECA1  F00C         	call	_calibrateWheels	;wreg free
  1590                           
  1591                           ;main.c: 203: PWM2(800, 1);
  1592  000178  0E03               	movlw	3
  1593  00017A  6E16               	movwf	PWM2@duty+1,c
  1594  00017C  0E20               	movlw	32
  1595  00017E  6E15               	movwf	PWM2@duty,c
  1596  000180  0E00               	movlw	0
  1597  000182  6E18               	movwf	PWM2@dir+1,c
  1598  000184  0E01               	movlw	1
  1599  000186  6E17               	movwf	PWM2@dir,c
  1600  000188  EC6D  F010         	call	_PWM2	;wreg free
  1601                           
  1602                           ;main.c: 204: PWM1(400);
  1603  00018C  0E01               	movlw	1
  1604  00018E  6E16               	movwf	PWM1@duty+1,c
  1605  000190  0E90               	movlw	144
  1606  000192  6E15               	movwf	PWM1@duty,c
  1607  000194  ECFF  F011         	call	_PWM1	;wreg free
  1608                           
  1609                           ;main.c: 206: keypress = (0);
  1610  000198  0E00               	movlw	0
  1611  00019A  6E60               	movwf	_keypress,c	;volatile
  1612                           
  1613                           ;main.c: 208: }
  1614  00019C  D768               	goto	l5765
  1615  00019E                     l5805:
  1616                           
  1617                           ;main.c: 209: else if(keypress == 3){
  1618  00019E  0E03               	movlw	3
  1619  0001A0  1860               	xorwf	_keypress,w,c	;volatile
  1620  0001A2  A4D8               	btfss	status,2,c
  1621  0001A4  D019               	goto	l5809
  1622                           
  1623                           ;main.c: 210: displayLog(1);
  1624  0001A6  0E00               	movlw	0
  1625  0001A8  6E38               	movwf	displayLog@run+1,c
  1626  0001AA  0E01               	movlw	1
  1627  0001AC  6E37               	movwf	displayLog@run,c
  1628  0001AE  ECC1  F006         	call	_displayLog	;wreg free
  1629                           
  1630                           ;main.c: 211: displayLog(2);
  1631  0001B2  0E00               	movlw	0
  1632  0001B4  6E38               	movwf	displayLog@run+1,c
  1633  0001B6  0E02               	movlw	2
  1634  0001B8  6E37               	movwf	displayLog@run,c
  1635  0001BA  ECC1  F006         	call	_displayLog	;wreg free
  1636                           
  1637                           ;main.c: 212: displayLog(3);
  1638  0001BE  0E00               	movlw	0
  1639  0001C0  6E38               	movwf	displayLog@run+1,c
  1640  0001C2  0E03               	movlw	3
  1641  0001C4  6E37               	movwf	displayLog@run,c
  1642  0001C6  ECC1  F006         	call	_displayLog	;wreg free
  1643                           
  1644                           ;main.c: 213: displayLog(4);
  1645  0001CA  0E00               	movlw	0
  1646  0001CC  6E38               	movwf	displayLog@run+1,c
  1647  0001CE  0E04               	movlw	4
  1648  0001D0  6E37               	movwf	displayLog@run,c
  1649  0001D2  ECC1  F006         	call	_displayLog	;wreg free
  1650                           
  1651                           ;main.c: 214: }
  1652  0001D6  D74B               	goto	l5765
  1653  0001D8                     l5809:
  1654                           
  1655                           ;main.c: 215: else if(keypress == 15 ) {
  1656  0001D8  0E0F               	movlw	15
  1657  0001DA  1860               	xorwf	_keypress,w,c	;volatile
  1658  0001DC  A4D8               	btfss	status,2,c
  1659  0001DE  D747               	goto	l5765
  1660                           
  1661                           ;main.c: 216: standby = 2;
  1662  0001E0  0E00               	movlw	0
  1663  0001E2  0100               	movlb	0	; () banked
  1664  0001E4  6F9D               	movwf	(main@standby+1)& (0+255),b
  1665  0001E6  0E02               	movlw	2
  1666  0001E8  6F9C               	movwf	main@standby& (0+255),b
  1667                           
  1668                           ;main.c: 217: s = 1;
  1669  0001EA  0E00               	movlw	0
  1670  0001EC  0100               	movlb	0	; () banked
  1671  0001EE  6F87               	movwf	(main@s+1)& (0+255),b
  1672  0001F0  0E01               	movlw	1
  1673  0001F2  6F86               	movwf	main@s& (0+255),b
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 218: }
  1677                           ;main.c: 220: }
  1678                           
  1679                           ; BSR set to: 0
  1680                           
  1681                           ; BSR set to: 0
  1682  0001F4  D73C               	goto	l5765
  1683  0001F6                     l5813:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;main.c: 221: else if(standby == 2){
  1687  0001F6  0E02               	movlw	2
  1688  0001F8  0100               	movlb	0	; () banked
  1689  0001FA  199C               	xorwf	main@standby& (0+255),w,b
  1690  0001FC  0100               	movlb	0	; () banked
  1691  0001FE  119D               	iorwf	(main@standby+1)& (0+255),w,b
  1692  000200  A4D8               	btfss	status,2,c
  1693  000202  D24E               	goto	l6069
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 224: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1697  000204  0E01               	movlw	1
  1698  000206  EC25  F013         	call	_lcdInst
  1699  00020A  0E34               	movlw	52
  1700  00020C  6E40               	movwf	??_main& (0+255),c
  1701  00020E  0EF2               	movlw	242
  1702  000210                     u7647:
  1703  000210  2EE8               	decfsz	wreg,f,c
  1704  000212  D7FE               	bra	u7647
  1705  000214  2E40               	decfsz	??_main& (0+255),f,c
  1706  000216  D7FC               	bra	u7647
  1707                           
  1708                           ;main.c: 225: printf("testing PWM2 CW");
  1709  000218  0EEC               	movlw	low STR_3
  1710  00021A  6E21               	movwf	printf@f,c
  1711  00021C  0EFE               	movlw	high STR_3
  1712  00021E  6E22               	movwf	printf@f+1,c
  1713  000220  EC6F  F008         	call	_printf	;wreg free
  1714                           
  1715                           ;main.c: 226: PWM2(800, 1);
  1716  000224  0E03               	movlw	3
  1717  000226  6E16               	movwf	PWM2@duty+1,c
  1718  000228  0E20               	movlw	32
  1719  00022A  6E15               	movwf	PWM2@duty,c
  1720  00022C  0E00               	movlw	0
  1721  00022E  6E18               	movwf	PWM2@dir+1,c
  1722  000230  0E01               	movlw	1
  1723  000232  6E17               	movwf	PWM2@dir,c
  1724  000234  EC6D  F010         	call	_PWM2	;wreg free
  1725                           
  1726                           ;main.c: 227: keycheck();
  1727  000238  ECFC  F012         	call	_keycheck	;wreg free
  1728                           
  1729                           ;main.c: 229: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1730  00023C  0E01               	movlw	1
  1731  00023E  EC25  F013         	call	_lcdInst
  1732  000242  0E34               	movlw	52
  1733  000244  6E40               	movwf	??_main& (0+255),c
  1734  000246  0EF2               	movlw	242
  1735  000248                     u7657:
  1736  000248  2EE8               	decfsz	wreg,f,c
  1737  00024A  D7FE               	bra	u7657
  1738  00024C  2E40               	decfsz	??_main& (0+255),f,c
  1739  00024E  D7FC               	bra	u7657
  1740                           
  1741                           ;main.c: 230: printf("testing PWM2 CCW");
  1742  000250  0E7A               	movlw	low STR_4
  1743  000252  6E21               	movwf	printf@f,c
  1744  000254  0EFE               	movlw	high STR_4
  1745  000256  6E22               	movwf	printf@f+1,c
  1746  000258  EC6F  F008         	call	_printf	;wreg free
  1747                           
  1748                           ;main.c: 231: PWM2(800, 2);
  1749  00025C  0E03               	movlw	3
  1750  00025E  6E16               	movwf	PWM2@duty+1,c
  1751  000260  0E20               	movlw	32
  1752  000262  6E15               	movwf	PWM2@duty,c
  1753  000264  0E00               	movlw	0
  1754  000266  6E18               	movwf	PWM2@dir+1,c
  1755  000268  0E02               	movlw	2
  1756  00026A  6E17               	movwf	PWM2@dir,c
  1757  00026C  EC6D  F010         	call	_PWM2	;wreg free
  1758                           
  1759                           ;main.c: 232: keycheck();
  1760  000270  ECFC  F012         	call	_keycheck	;wreg free
  1761                           
  1762                           ;main.c: 234: PWM2off();
  1763  000274  EC30  F013         	call	_PWM2off	;wreg free
  1764                           
  1765                           ;main.c: 236: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1766  000278  0E01               	movlw	1
  1767  00027A  EC25  F013         	call	_lcdInst
  1768  00027E  0E34               	movlw	52
  1769  000280  6E40               	movwf	??_main& (0+255),c
  1770  000282  0EF2               	movlw	242
  1771  000284                     u7667:
  1772  000284  2EE8               	decfsz	wreg,f,c
  1773  000286  D7FE               	bra	u7667
  1774  000288  2E40               	decfsz	??_main& (0+255),f,c
  1775  00028A  D7FC               	bra	u7667
  1776                           
  1777                           ;main.c: 237: printf("testing S f");
  1778  00028C  0EC1               	movlw	low STR_5
  1779  00028E  6E21               	movwf	printf@f,c
  1780  000290  0EFF               	movlw	high STR_5
  1781  000292  6E22               	movwf	printf@f+1,c
  1782  000294  EC6F  F008         	call	_printf	;wreg free
  1783                           
  1784                           ;main.c: 238: S1mode = 1;
  1785  000298  0E00               	movlw	0
  1786  00029A  6E5D               	movwf	_S1mode+1,c
  1787  00029C  0E01               	movlw	1
  1788  00029E  6E5C               	movwf	_S1mode,c
  1789                           
  1790                           ;main.c: 239: S2mode = 1;
  1791  0002A0  0E00               	movlw	0
  1792  0002A2  0100               	movlb	0	; () banked
  1793  0002A4  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1794  0002A6  0E01               	movlw	1
  1795  0002A8  6FAB               	movwf	_S2mode& (0+255),b
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;main.c: 240: S3mode = 1;
  1799  0002AA  0E00               	movlw	0
  1800  0002AC  6E5B               	movwf	_S3mode+1,c
  1801  0002AE  0E01               	movlw	1
  1802  0002B0  6E5A               	movwf	_S3mode,c
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 241: keycheck();
  1806  0002B2  ECFC  F012         	call	_keycheck	;wreg free
  1807                           
  1808                           ;main.c: 243: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1809  0002B6  0E01               	movlw	1
  1810  0002B8  EC25  F013         	call	_lcdInst
  1811  0002BC  0E34               	movlw	52
  1812  0002BE  6E40               	movwf	??_main& (0+255),c
  1813  0002C0  0EF2               	movlw	242
  1814  0002C2                     u7677:
  1815  0002C2  2EE8               	decfsz	wreg,f,c
  1816  0002C4  D7FE               	bra	u7677
  1817  0002C6  2E40               	decfsz	??_main& (0+255),f,c
  1818  0002C8  D7FC               	bra	u7677
  1819                           
  1820                           ;main.c: 244: printf("testing S b");
  1821  0002CA  0E91               	movlw	low STR_6
  1822  0002CC  6E21               	movwf	printf@f,c
  1823  0002CE  0EFF               	movlw	high STR_6
  1824  0002D0  6E22               	movwf	printf@f+1,c
  1825  0002D2  EC6F  F008         	call	_printf	;wreg free
  1826                           
  1827                           ;main.c: 245: S1mode = 2;
  1828  0002D6  0E00               	movlw	0
  1829  0002D8  6E5D               	movwf	_S1mode+1,c
  1830  0002DA  0E02               	movlw	2
  1831  0002DC  6E5C               	movwf	_S1mode,c
  1832                           
  1833                           ;main.c: 246: S2mode = 2;
  1834  0002DE  0E00               	movlw	0
  1835  0002E0  0100               	movlb	0	; () banked
  1836  0002E2  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1837  0002E4  0E02               	movlw	2
  1838  0002E6  6FAB               	movwf	_S2mode& (0+255),b
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 247: S3mode = 2;
  1842  0002E8  0E00               	movlw	0
  1843  0002EA  6E5B               	movwf	_S3mode+1,c
  1844  0002EC  0E02               	movlw	2
  1845  0002EE  6E5A               	movwf	_S3mode,c
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 248: keycheck();
  1849  0002F0  ECFC  F012         	call	_keycheck	;wreg free
  1850                           
  1851                           ;main.c: 250: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1852  0002F4  0E01               	movlw	1
  1853  0002F6  EC25  F013         	call	_lcdInst
  1854  0002FA  0E34               	movlw	52
  1855  0002FC  6E40               	movwf	??_main& (0+255),c
  1856  0002FE  0EF2               	movlw	242
  1857  000300                     u7687:
  1858  000300  2EE8               	decfsz	wreg,f,c
  1859  000302  D7FE               	bra	u7687
  1860  000304  2E40               	decfsz	??_main& (0+255),f,c
  1861  000306  D7FC               	bra	u7687
  1862                           
  1863                           ;main.c: 251: printf("testing S shake");
  1864  000308  0EFC               	movlw	low STR_7
  1865  00030A  6E21               	movwf	printf@f,c
  1866  00030C  0EFE               	movlw	high STR_7
  1867  00030E  6E22               	movwf	printf@f+1,c
  1868  000310  EC6F  F008         	call	_printf	;wreg free
  1869                           
  1870                           ;main.c: 252: S1mode = 3;
  1871  000314  0E00               	movlw	0
  1872  000316  6E5D               	movwf	_S1mode+1,c
  1873  000318  0E03               	movlw	3
  1874  00031A  6E5C               	movwf	_S1mode,c
  1875                           
  1876                           ;main.c: 253: S2mode = 3;
  1877  00031C  0E00               	movlw	0
  1878  00031E  0100               	movlb	0	; () banked
  1879  000320  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1880  000322  0E03               	movlw	3
  1881  000324  6FAB               	movwf	_S2mode& (0+255),b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 254: S3mode = 3;
  1885  000326  0E00               	movlw	0
  1886  000328  6E5B               	movwf	_S3mode+1,c
  1887  00032A  0E03               	movlw	3
  1888  00032C  6E5A               	movwf	_S3mode,c
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 255: keycheck();
  1892  00032E  ECFC  F012         	call	_keycheck	;wreg free
  1893                           
  1894                           ;main.c: 257: S1mode = 0;
  1895  000332  0E00               	movlw	0
  1896  000334  6E5D               	movwf	_S1mode+1,c
  1897  000336  0E00               	movlw	0
  1898  000338  6E5C               	movwf	_S1mode,c
  1899                           
  1900                           ;main.c: 258: S2mode = 0;
  1901  00033A  0E00               	movlw	0
  1902  00033C  0100               	movlb	0	; () banked
  1903  00033E  6FAC               	movwf	(_S2mode+1)& (0+255),b
  1904  000340  0E00               	movlw	0
  1905  000342  6FAB               	movwf	_S2mode& (0+255),b
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 259: S3mode = 0;
  1909  000344  0E00               	movlw	0
  1910  000346  6E5B               	movwf	_S3mode+1,c
  1911  000348  0E00               	movlw	0
  1912  00034A  6E5A               	movwf	_S3mode,c
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;main.c: 261: keypress = (0);
  1916  00034C  0E00               	movlw	0
  1917  00034E  6E60               	movwf	_keypress,c	;volatile
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 262: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  1921  000350  0E01               	movlw	1
  1922  000352  EC25  F013         	call	_lcdInst
  1923  000356  0E34               	movlw	52
  1924  000358  6E40               	movwf	??_main& (0+255),c
  1925  00035A  0EF2               	movlw	242
  1926  00035C                     u7697:
  1927  00035C  2EE8               	decfsz	wreg,f,c
  1928  00035E  D7FE               	bra	u7697
  1929  000360  2E40               	decfsz	??_main& (0+255),f,c
  1930  000362  D7FC               	bra	u7697
  1931                           
  1932                           ;main.c: 263: printf("testing S1 pins");
  1933  000364  0E2C               	movlw	low STR_8
  1934  000366  6E21               	movwf	printf@f,c
  1935  000368  0EFF               	movlw	high STR_8
  1936  00036A  6E22               	movwf	printf@f+1,c
  1937  00036C  EC6F  F008         	call	_printf	;wreg free
  1938                           
  1939                           ;main.c: 264: while(keypress!=3){
  1940  000370  D02E               	goto	l5913
  1941  000372                     l5891:
  1942                           
  1943                           ;main.c: 266: keyinterrupt();
  1944  000372  ECF2  F012         	call	_keyinterrupt	;wreg free
  1945                           
  1946                           ;main.c: 268: if (keypress == 2){LATDbits.LATD1 = 1;}
  1947  000376  0E02               	movlw	2
  1948  000378  1860               	xorwf	_keypress,w,c	;volatile
  1949  00037A  A4D8               	btfss	status,2,c
  1950  00037C  D002               	goto	l195
  1951  00037E  828C               	bsf	3980,1,c	;volatile
  1952  000380  D001               	goto	l5897
  1953  000382                     l195:
  1954                           
  1955                           ;main.c: 269: else{LATDbits.LATD1 = 0;}
  1956  000382  928C               	bcf	3980,1,c	;volatile
  1957  000384                     l5897:
  1958                           
  1959                           ;main.c: 270: if (keypress == 6){LATBbits.LATB3 = 1;}
  1960  000384  0E06               	movlw	6
  1961  000386  1860               	xorwf	_keypress,w,c	;volatile
  1962  000388  A4D8               	btfss	status,2,c
  1963  00038A  D002               	goto	l197
  1964  00038C  868A               	bsf	3978,3,c	;volatile
  1965  00038E  D001               	goto	l5901
  1966  000390                     l197:
  1967                           
  1968                           ;main.c: 271: else{LATBbits.LATB3 = 0;}
  1969  000390  968A               	bcf	3978,3,c	;volatile
  1970  000392                     l5901:
  1971                           
  1972                           ;main.c: 272: if (keypress == 10){LATBbits.LATB2 = 1;}
  1973  000392  0E0A               	movlw	10
  1974  000394  1860               	xorwf	_keypress,w,c	;volatile
  1975  000396  A4D8               	btfss	status,2,c
  1976  000398  D002               	goto	l199
  1977  00039A  848A               	bsf	3978,2,c	;volatile
  1978  00039C  D001               	goto	l5905
  1979  00039E                     l199:
  1980                           
  1981                           ;main.c: 273: else{LATBbits.LATB2 = 0;}
  1982  00039E  948A               	bcf	3978,2,c	;volatile
  1983  0003A0                     l5905:
  1984                           
  1985                           ;main.c: 274: if (keypress == 14){LATBbits.LATB0 = 1;}
  1986  0003A0  0E0E               	movlw	14
  1987  0003A2  1860               	xorwf	_keypress,w,c	;volatile
  1988  0003A4  A4D8               	btfss	status,2,c
  1989  0003A6  D002               	goto	l201
  1990  0003A8  808A               	bsf	3978,0,c	;volatile
  1991  0003AA  D001               	goto	l5909
  1992  0003AC                     l201:
  1993                           
  1994                           ;main.c: 275: else{LATBbits.LATB0 = 0;}
  1995  0003AC  908A               	bcf	3978,0,c	;volatile
  1996  0003AE                     l5909:
  1997                           
  1998                           ;main.c: 277: readADC(1);
  1999  0003AE  0E01               	movlw	1
  2000  0003B0  ECD1  F012         	call	_readADC
  2001                           
  2002                           ;main.c: 278: lcdInst(0b11000000);;
  2003  0003B4  0EC0               	movlw	192
  2004  0003B6  EC25  F013         	call	_lcdInst
  2005                           
  2006                           ;main.c: 279: printf("%x", ADRES);
  2007  0003BA  0EFC               	movlw	low (STR_25+1)
  2008  0003BC  6E21               	movwf	printf@f,c
  2009  0003BE  0EFF               	movlw	high (STR_25+1)
  2010  0003C0  6E22               	movwf	printf@f+1,c
  2011  0003C2  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2012  0003C6  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2013  0003CA  EC6F  F008         	call	_printf	;wreg free
  2014  0003CE                     l5913:
  2015  0003CE  0E03               	movlw	3
  2016  0003D0  1860               	xorwf	_keypress,w,c	;volatile
  2017  0003D2  A4D8               	btfss	status,2,c
  2018  0003D4  D7CE               	goto	l5891
  2019                           
  2020                           ;main.c: 280: }
  2021                           ;main.c: 282: keypress = (0);
  2022  0003D6  0E00               	movlw	0
  2023  0003D8  6E60               	movwf	_keypress,c	;volatile
  2024                           
  2025                           ;main.c: 283: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2026  0003DA  0E01               	movlw	1
  2027  0003DC  EC25  F013         	call	_lcdInst
  2028  0003E0  0E34               	movlw	52
  2029  0003E2  6E40               	movwf	??_main& (0+255),c
  2030  0003E4  0EF2               	movlw	242
  2031  0003E6                     u7707:
  2032  0003E6  2EE8               	decfsz	wreg,f,c
  2033  0003E8  D7FE               	bra	u7707
  2034  0003EA  2E40               	decfsz	??_main& (0+255),f,c
  2035  0003EC  D7FC               	bra	u7707
  2036                           
  2037                           ;main.c: 284: printf("testing S2 pins");
  2038  0003EE  0E3C               	movlw	low STR_10
  2039  0003F0  6E21               	movwf	printf@f,c
  2040  0003F2  0EFF               	movlw	high STR_10
  2041  0003F4  6E22               	movwf	printf@f+1,c
  2042  0003F6  EC6F  F008         	call	_printf	;wreg free
  2043                           
  2044                           ;main.c: 285: while(keypress!=3){
  2045  0003FA  D01E               	goto	l5941
  2046  0003FC                     l5923:
  2047                           
  2048                           ;main.c: 287: keyinterrupt();
  2049  0003FC  ECF2  F012         	call	_keyinterrupt	;wreg free
  2050                           
  2051                           ;main.c: 289: if (keypress == 2){LATCbits.LATC7 = 1;}
  2052  000400  0E02               	movlw	2
  2053  000402  1860               	xorwf	_keypress,w,c	;volatile
  2054  000404  A4D8               	btfss	status,2,c
  2055  000406  D002               	goto	l206
  2056  000408  8E8B               	bsf	3979,7,c	;volatile
  2057  00040A  D001               	goto	l5929
  2058  00040C                     l206:
  2059                           
  2060                           ;main.c: 290: else{LATCbits.LATC7 = 0;}
  2061  00040C  9E8B               	bcf	3979,7,c	;volatile
  2062  00040E                     l5929:
  2063                           
  2064                           ;main.c: 291: if (keypress == 6){LATCbits.LATC6 = 1;}
  2065  00040E  0E06               	movlw	6
  2066  000410  1860               	xorwf	_keypress,w,c	;volatile
  2067  000412  A4D8               	btfss	status,2,c
  2068  000414  D002               	goto	l208
  2069  000416  8C8B               	bsf	3979,6,c	;volatile
  2070  000418  D001               	goto	l5933
  2071  00041A                     l208:
  2072                           
  2073                           ;main.c: 292: else{LATCbits.LATC6 = 0;}
  2074  00041A  9C8B               	bcf	3979,6,c	;volatile
  2075  00041C                     l5933:
  2076                           
  2077                           ;main.c: 293: if (keypress == 10){LATCbits.LATC0 = 1;}
  2078  00041C  0E0A               	movlw	10
  2079  00041E  1860               	xorwf	_keypress,w,c	;volatile
  2080  000420  A4D8               	btfss	status,2,c
  2081  000422  D002               	goto	l210
  2082  000424  808B               	bsf	3979,0,c	;volatile
  2083  000426  D001               	goto	l5937
  2084  000428                     l210:
  2085                           
  2086                           ;main.c: 294: else{LATCbits.LATC0 = 0;}
  2087  000428  908B               	bcf	3979,0,c	;volatile
  2088  00042A                     l5937:
  2089                           
  2090                           ;main.c: 295: if (keypress == 14){LATCbits.LATC5 = 1;}
  2091  00042A  0E0E               	movlw	14
  2092  00042C  1860               	xorwf	_keypress,w,c	;volatile
  2093  00042E  A4D8               	btfss	status,2,c
  2094  000430  D002               	goto	l212
  2095  000432  8A8B               	bsf	3979,5,c	;volatile
  2096  000434  D001               	goto	l5941
  2097  000436                     l212:
  2098                           
  2099                           ;main.c: 296: else{LATCbits.LATC5 = 0;}
  2100  000436  9A8B               	bcf	3979,5,c	;volatile
  2101  000438                     l5941:
  2102  000438  0E03               	movlw	3
  2103  00043A  1860               	xorwf	_keypress,w,c	;volatile
  2104  00043C  A4D8               	btfss	status,2,c
  2105  00043E  D7DE               	goto	l5923
  2106                           
  2107                           ;main.c: 297: }
  2108                           ;main.c: 299: keypress = (0);
  2109  000440  0E00               	movlw	0
  2110  000442  6E60               	movwf	_keypress,c	;volatile
  2111                           
  2112                           ;main.c: 300: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2113  000444  0E01               	movlw	1
  2114  000446  EC25  F013         	call	_lcdInst
  2115  00044A  0E34               	movlw	52
  2116  00044C  6E40               	movwf	??_main& (0+255),c
  2117  00044E  0EF2               	movlw	242
  2118  000450                     u7717:
  2119  000450  2EE8               	decfsz	wreg,f,c
  2120  000452  D7FE               	bra	u7717
  2121  000454  2E40               	decfsz	??_main& (0+255),f,c
  2122  000456  D7FC               	bra	u7717
  2123                           
  2124                           ;main.c: 301: printf("testing S3 pins");
  2125  000458  0E4C               	movlw	low STR_11
  2126  00045A  6E21               	movwf	printf@f,c
  2127  00045C  0EFF               	movlw	high STR_11
  2128  00045E  6E22               	movwf	printf@f+1,c
  2129  000460  EC6F  F008         	call	_printf	;wreg free
  2130                           
  2131                           ;main.c: 302: while(keypress!=3){
  2132  000464  D02E               	goto	l5973
  2133  000466                     l5951:
  2134                           
  2135                           ;main.c: 304: keyinterrupt();
  2136  000466  ECF2  F012         	call	_keyinterrupt	;wreg free
  2137                           
  2138                           ;main.c: 306: if (keypress == 2){LATEbits.LATE2 = 1;}
  2139  00046A  0E02               	movlw	2
  2140  00046C  1860               	xorwf	_keypress,w,c	;volatile
  2141  00046E  A4D8               	btfss	status,2,c
  2142  000470  D002               	goto	l217
  2143  000472  848D               	bsf	3981,2,c	;volatile
  2144  000474  D001               	goto	l5957
  2145  000476                     l217:
  2146                           
  2147                           ;main.c: 307: else{LATEbits.LATE2 = 0;}
  2148  000476  948D               	bcf	3981,2,c	;volatile
  2149  000478                     l5957:
  2150                           
  2151                           ;main.c: 308: if (keypress == 6){LATEbits.LATE1 = 1;}
  2152  000478  0E06               	movlw	6
  2153  00047A  1860               	xorwf	_keypress,w,c	;volatile
  2154  00047C  A4D8               	btfss	status,2,c
  2155  00047E  D002               	goto	l219
  2156  000480  828D               	bsf	3981,1,c	;volatile
  2157  000482  D001               	goto	l5961
  2158  000484                     l219:
  2159                           
  2160                           ;main.c: 309: else{LATEbits.LATE1 = 0;}
  2161  000484  928D               	bcf	3981,1,c	;volatile
  2162  000486                     l5961:
  2163                           
  2164                           ;main.c: 310: if (keypress == 10){LATAbits.LATA4 = 1;}
  2165  000486  0E0A               	movlw	10
  2166  000488  1860               	xorwf	_keypress,w,c	;volatile
  2167  00048A  A4D8               	btfss	status,2,c
  2168  00048C  D002               	goto	l221
  2169  00048E  8889               	bsf	3977,4,c	;volatile
  2170  000490  D001               	goto	l5965
  2171  000492                     l221:
  2172                           
  2173                           ;main.c: 311: else{LATAbits.LATA4 = 0;}
  2174  000492  9889               	bcf	3977,4,c	;volatile
  2175  000494                     l5965:
  2176                           
  2177                           ;main.c: 312: if (keypress == 14){LATDbits.LATD0 = 1;}
  2178  000494  0E0E               	movlw	14
  2179  000496  1860               	xorwf	_keypress,w,c	;volatile
  2180  000498  A4D8               	btfss	status,2,c
  2181  00049A  D002               	goto	l223
  2182  00049C  808C               	bsf	3980,0,c	;volatile
  2183  00049E  D001               	goto	l5969
  2184  0004A0                     l223:
  2185                           
  2186                           ;main.c: 313: else{LATDbits.LATD0 = 0;}
  2187  0004A0  908C               	bcf	3980,0,c	;volatile
  2188  0004A2                     l5969:
  2189                           
  2190                           ;main.c: 315: readADC(5);
  2191  0004A2  0E05               	movlw	5
  2192  0004A4  ECD1  F012         	call	_readADC
  2193                           
  2194                           ;main.c: 316: lcdInst(0b11000000);;
  2195  0004A8  0EC0               	movlw	192
  2196  0004AA  EC25  F013         	call	_lcdInst
  2197                           
  2198                           ;main.c: 317: printf("%x", ADRES);
  2199  0004AE  0EFC               	movlw	low (STR_25+1)
  2200  0004B0  6E21               	movwf	printf@f,c
  2201  0004B2  0EFF               	movlw	high (STR_25+1)
  2202  0004B4  6E22               	movwf	printf@f+1,c
  2203  0004B6  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2204  0004BA  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2205  0004BE  EC6F  F008         	call	_printf	;wreg free
  2206  0004C2                     l5973:
  2207  0004C2  0E03               	movlw	3
  2208  0004C4  1860               	xorwf	_keypress,w,c	;volatile
  2209  0004C6  A4D8               	btfss	status,2,c
  2210  0004C8  D7CE               	goto	l5951
  2211                           
  2212                           ;main.c: 318: }
  2213                           ;main.c: 320: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2214  0004CA  0E01               	movlw	1
  2215  0004CC  EC25  F013         	call	_lcdInst
  2216  0004D0  0E34               	movlw	52
  2217  0004D2  6E40               	movwf	??_main& (0+255),c
  2218  0004D4  0EF2               	movlw	242
  2219  0004D6                     u7727:
  2220  0004D6  2EE8               	decfsz	wreg,f,c
  2221  0004D8  D7FE               	bra	u7727
  2222  0004DA  2E40               	decfsz	??_main& (0+255),f,c
  2223  0004DC  D7FC               	bra	u7727
  2224                           
  2225                           ;main.c: 321: printf("testing PWM1");
  2226  0004DE  0E78               	movlw	low STR_13
  2227  0004E0  6E21               	movwf	printf@f,c
  2228  0004E2  0EFF               	movlw	high STR_13
  2229  0004E4  6E22               	movwf	printf@f+1,c
  2230  0004E6  EC6F  F008         	call	_printf	;wreg free
  2231                           
  2232                           ;main.c: 322: PWM1(400);
  2233  0004EA  0E01               	movlw	1
  2234  0004EC  6E16               	movwf	PWM1@duty+1,c
  2235  0004EE  0E90               	movlw	144
  2236  0004F0  6E15               	movwf	PWM1@duty,c
  2237  0004F2  ECFF  F011         	call	_PWM1	;wreg free
  2238                           
  2239                           ;main.c: 323: keycheck();
  2240  0004F6  ECFC  F012         	call	_keycheck	;wreg free
  2241                           
  2242                           ;main.c: 324: PWM1off();
  2243  0004FA  EC35  F013         	call	_PWM1off	;wreg free
  2244                           
  2245                           ;main.c: 326: keypress = (0);
  2246  0004FE  0E00               	movlw	0
  2247  000500  6E60               	movwf	_keypress,c	;volatile
  2248                           
  2249                           ;main.c: 327: seconds = 0;
  2250  000502  0E00               	movlw	0
  2251  000504  6E5F               	movwf	_seconds+1,c
  2252  000506  0E00               	movlw	0
  2253  000508  6E5E               	movwf	_seconds,c
  2254                           
  2255                           ;main.c: 328: while(keypress==(0)){
  2256  00050A  D021               	goto	l6005
  2257  00050C                     l5991:
  2258                           
  2259                           ;main.c: 329: keypress = (0);
  2260  00050C  0E00               	movlw	0
  2261  00050E  6E60               	movwf	_keypress,c	;volatile
  2262                           
  2263                           ;main.c: 331: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2264  000510  0E01               	movlw	1
  2265  000512  EC25  F013         	call	_lcdInst
  2266  000516  0E34               	movlw	52
  2267  000518  6E40               	movwf	??_main& (0+255),c
  2268  00051A  0EF2               	movlw	242
  2269  00051C                     u7737:
  2270  00051C  2EE8               	decfsz	wreg,f,c
  2271  00051E  D7FE               	bra	u7737
  2272  000520  2E40               	decfsz	??_main& (0+255),f,c
  2273  000522  D7FC               	bra	u7737
  2274                           
  2275                           ;main.c: 332: printf("testing TMR0");
  2276  000524  0E6B               	movlw	low STR_14
  2277  000526  6E21               	movwf	printf@f,c
  2278  000528  0EFF               	movlw	high STR_14
  2279  00052A  6E22               	movwf	printf@f+1,c
  2280  00052C  EC6F  F008         	call	_printf	;wreg free
  2281                           
  2282                           ;main.c: 333: lcdInst(0b11000000);;
  2283  000530  0EC0               	movlw	192
  2284  000532  EC25  F013         	call	_lcdInst
  2285                           
  2286                           ;main.c: 334: printf("%d", seconds);
  2287  000536  0EB9               	movlw	low (STR_48+13)
  2288  000538  6E21               	movwf	printf@f,c
  2289  00053A  0EFE               	movlw	high (STR_48+13)
  2290  00053C  6E22               	movwf	printf@f+1,c
  2291  00053E  C05E  F023         	movff	_seconds,?_printf+2
  2292  000542  C05F  F024         	movff	_seconds+1,?_printf+3
  2293  000546  EC6F  F008         	call	_printf	;wreg free
  2294                           
  2295                           ;main.c: 335: keyinterrupt();
  2296  00054A  ECF2  F012         	call	_keyinterrupt	;wreg free
  2297  00054E                     l6005:
  2298  00054E  5060               	movf	_keypress,w,c	;volatile
  2299  000550  B4D8               	btfsc	status,2,c
  2300  000552  D7DC               	goto	l5991
  2301                           
  2302                           ;main.c: 336: }
  2303                           ;main.c: 338: keypress = (0);
  2304  000554  0E00               	movlw	0
  2305  000556  6E60               	movwf	_keypress,c	;volatile
  2306                           
  2307                           ;main.c: 339: while(keypress==(0)){
  2308  000558  D057               	goto	l6039
  2309  00055A                     l6009:
  2310                           
  2311                           ;main.c: 340: keypress = (0);
  2312  00055A  0E00               	movlw	0
  2313  00055C  6E60               	movwf	_keypress,c	;volatile
  2314                           
  2315                           ;main.c: 342: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2316  00055E  0E01               	movlw	1
  2317  000560  EC25  F013         	call	_lcdInst
  2318  000564  0E34               	movlw	52
  2319  000566  6E40               	movwf	??_main& (0+255),c
  2320  000568  0EF2               	movlw	242
  2321  00056A                     u7747:
  2322  00056A  2EE8               	decfsz	wreg,f,c
  2323  00056C  D7FE               	bra	u7747
  2324  00056E  2E40               	decfsz	??_main& (0+255),f,c
  2325  000570  D7FC               	bra	u7747
  2326                           
  2327                           ;main.c: 343: printf("testing IR");
  2328  000572  0ECD               	movlw	low STR_16
  2329  000574  6E21               	movwf	printf@f,c
  2330  000576  0EFF               	movlw	high STR_16
  2331  000578  6E22               	movwf	printf@f+1,c
  2332  00057A  EC6F  F008         	call	_printf	;wreg free
  2333                           
  2334                           ;main.c: 344: lcdInst(0b11000000);;
  2335  00057E  0EC0               	movlw	192
  2336  000580  EC25  F013         	call	_lcdInst
  2337                           
  2338                           ;main.c: 345: readADC(1);
  2339  000584  0E01               	movlw	1
  2340  000586  ECD1  F012         	call	_readADC
  2341                           
  2342                           ;main.c: 346: printf("%x ", ADRES);
  2343  00058A  0EF7               	movlw	low STR_17
  2344  00058C  6E21               	movwf	printf@f,c
  2345  00058E  0EFF               	movlw	high STR_17
  2346  000590  6E22               	movwf	printf@f+1,c
  2347  000592  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2348  000596  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2349  00059A  EC6F  F008         	call	_printf	;wreg free
  2350                           
  2351                           ;main.c: 347: readADC(0);
  2352  00059E  0E00               	movlw	0
  2353  0005A0  ECD1  F012         	call	_readADC
  2354                           
  2355                           ;main.c: 348: printf("%x ", ADRES);
  2356  0005A4  0EF7               	movlw	low STR_17
  2357  0005A6  6E21               	movwf	printf@f,c
  2358  0005A8  0EFF               	movlw	high STR_17
  2359  0005AA  6E22               	movwf	printf@f+1,c
  2360  0005AC  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2361  0005B0  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2362  0005B4  EC6F  F008         	call	_printf	;wreg free
  2363                           
  2364                           ;main.c: 349: readADC(2);
  2365  0005B8  0E02               	movlw	2
  2366  0005BA  ECD1  F012         	call	_readADC
  2367                           
  2368                           ;main.c: 350: printf("%x ", ADRES);
  2369  0005BE  0EF7               	movlw	low STR_17
  2370  0005C0  6E21               	movwf	printf@f,c
  2371  0005C2  0EFF               	movlw	high STR_17
  2372  0005C4  6E22               	movwf	printf@f+1,c
  2373  0005C6  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2374  0005CA  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2375  0005CE  EC6F  F008         	call	_printf	;wreg free
  2376                           
  2377                           ;main.c: 351: readADC(5);
  2378  0005D2  0E05               	movlw	5
  2379  0005D4  ECD1  F012         	call	_readADC
  2380                           
  2381                           ;main.c: 352: printf("%x ", ADRES);
  2382  0005D8  0EF7               	movlw	low STR_17
  2383  0005DA  6E21               	movwf	printf@f,c
  2384  0005DC  0EFF               	movlw	high STR_17
  2385  0005DE  6E22               	movwf	printf@f+1,c
  2386  0005E0  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2387  0005E4  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2388  0005E8  EC6F  F008         	call	_printf	;wreg free
  2389                           
  2390                           ;main.c: 353: keyinterrupt();
  2391  0005EC  ECF2  F012         	call	_keyinterrupt	;wreg free
  2392                           
  2393                           ;main.c: 354: _delay((unsigned long)((100)*(32000000/4000.0)));
  2394  0005F0  0E05               	movlw	5
  2395  0005F2  6E41               	movwf	(??_main+1)& (0+255),c
  2396  0005F4  0E0F               	movlw	15
  2397  0005F6  6E40               	movwf	??_main& (0+255),c
  2398  0005F8  0EF1               	movlw	241
  2399  0005FA                     u7757:
  2400  0005FA  2EE8               	decfsz	wreg,f,c
  2401  0005FC  D7FE               	bra	u7757
  2402  0005FE  2E40               	decfsz	??_main& (0+255),f,c
  2403  000600  D7FC               	bra	u7757
  2404  000602  2E41               	decfsz	(??_main+1)& (0+255),f,c
  2405  000604  D7FA               	bra	u7757
  2406  000606  F000               	nop	
  2407  000608                     l6039:
  2408  000608  5060               	movf	_keypress,w,c	;volatile
  2409  00060A  B4D8               	btfsc	status,2,c
  2410  00060C  D7A6               	goto	l6009
  2411                           
  2412                           ;main.c: 355: }
  2413                           ;main.c: 357: keypress = (0);
  2414  00060E  0E00               	movlw	0
  2415  000610  6E60               	movwf	_keypress,c	;volatile
  2416                           
  2417                           ;main.c: 358: while(keypress==(0)){
  2418  000612  D03D               	goto	l6065
  2419  000614                     l6043:
  2420                           
  2421                           ;main.c: 359: keypress = (0);
  2422  000614  0E00               	movlw	0
  2423  000616  6E60               	movwf	_keypress,c	;volatile
  2424                           
  2425                           ;main.c: 360: _delay((unsigned long)((50)*(32000000/4000.0)));
  2426  000618  0E03               	movlw	3
  2427  00061A  6E41               	movwf	(??_main+1)& (0+255),c
  2428  00061C  0E08               	movlw	8
  2429  00061E  6E40               	movwf	??_main& (0+255),c
  2430  000620  0E77               	movlw	119
  2431  000622                     u7767:
  2432  000622  2EE8               	decfsz	wreg,f,c
  2433  000624  D7FE               	bra	u7767
  2434  000626  2E40               	decfsz	??_main& (0+255),f,c
  2435  000628  D7FC               	bra	u7767
  2436  00062A  2E41               	decfsz	(??_main+1)& (0+255),f,c
  2437  00062C  D7FA               	bra	u7767
  2438  00062E  F000               	nop	
  2439                           
  2440                           ;main.c: 361: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2441  000630  0E01               	movlw	1
  2442  000632  EC25  F013         	call	_lcdInst
  2443  000636  0E34               	movlw	52
  2444  000638  6E40               	movwf	??_main& (0+255),c
  2445  00063A  0EF2               	movlw	242
  2446  00063C                     u7777:
  2447  00063C  2EE8               	decfsz	wreg,f,c
  2448  00063E  D7FE               	bra	u7777
  2449  000640  2E40               	decfsz	??_main& (0+255),f,c
  2450  000642  D7FC               	bra	u7777
  2451                           
  2452                           ;main.c: 362: printf("label   tab");
  2453  000644  0E9D               	movlw	low STR_21
  2454  000646  6E21               	movwf	printf@f,c
  2455  000648  0EFF               	movlw	high STR_21
  2456  00064A  6E22               	movwf	printf@f+1,c
  2457  00064C  EC6F  F008         	call	_printf	;wreg free
  2458                           
  2459                           ;main.c: 363: lcdInst(0b11000000);;
  2460  000650  0EC0               	movlw	192
  2461  000652  EC25  F013         	call	_lcdInst
  2462                           
  2463                           ;main.c: 364: readADC(4);
  2464  000656  0E04               	movlw	4
  2465  000658  ECD1  F012         	call	_readADC
  2466                           
  2467                           ;main.c: 365: printf("%x      ", ADRES);
  2468  00065C  0ED8               	movlw	low STR_22
  2469  00065E  6E21               	movwf	printf@f,c
  2470  000660  0EFF               	movlw	high STR_22
  2471  000662  6E22               	movwf	printf@f+1,c
  2472  000664  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2473  000668  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2474  00066C  EC6F  F008         	call	_printf	;wreg free
  2475                           
  2476                           ;main.c: 366: readADC(3);
  2477  000670  0E03               	movlw	3
  2478  000672  ECD1  F012         	call	_readADC
  2479                           
  2480                           ;main.c: 367: printf("%x      ", ADRES);
  2481  000676  0ED8               	movlw	low STR_22
  2482  000678  6E21               	movwf	printf@f,c
  2483  00067A  0EFF               	movlw	high STR_22
  2484  00067C  6E22               	movwf	printf@f+1,c
  2485  00067E  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2486  000682  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2487  000686  EC6F  F008         	call	_printf	;wreg free
  2488                           
  2489                           ;main.c: 368: keyinterrupt();
  2490  00068A  ECF2  F012         	call	_keyinterrupt	;wreg free
  2491  00068E                     l6065:
  2492  00068E  5060               	movf	_keypress,w,c	;volatile
  2493  000690  B4D8               	btfsc	status,2,c
  2494  000692  D7C0               	goto	l6043
  2495                           
  2496                           ;main.c: 369: }
  2497                           ;main.c: 371: standby = 1;
  2498  000694  0E00               	movlw	0
  2499  000696  0100               	movlb	0	; () banked
  2500  000698  6F9D               	movwf	(main@standby+1)& (0+255),b
  2501  00069A  0E01               	movlw	1
  2502  00069C  6F9C               	movwf	main@standby& (0+255),b
  2503                           
  2504                           ;main.c: 377: }
  2505  00069E  D4E7               	goto	l5765
  2506  0006A0                     l6069:
  2507                           
  2508                           ;main.c: 380: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  2509  0006A0  0E01               	movlw	1
  2510  0006A2  EC25  F013         	call	_lcdInst
  2511  0006A6  0E34               	movlw	52
  2512  0006A8  6E40               	movwf	??_main& (0+255),c
  2513  0006AA  0EF2               	movlw	242
  2514  0006AC                     u7787:
  2515  0006AC  2EE8               	decfsz	wreg,f,c
  2516  0006AE  D7FE               	bra	u7787
  2517  0006B0  2E40               	decfsz	??_main& (0+255),f,c
  2518  0006B2  D7FC               	bra	u7787
  2519                           
  2520                           ;main.c: 382: readADC(2);
  2521  0006B4  0E02               	movlw	2
  2522  0006B6  ECD1  F012         	call	_readADC
  2523                           
  2524                           ;main.c: 383: if(ADRES <= 0x250){
  2525  0006BA  0E51               	movlw	81
  2526  0006BC  5CC3               	subwf	4035,w,c	;volatile
  2527  0006BE  0E02               	movlw	2
  2528  0006C0  58C4               	subwfb	4036,w,c	;volatile
  2529  0006C2  B0D8               	btfsc	status,0,c
  2530  0006C4  D01F               	goto	l6085
  2531                           
  2532                           ;main.c: 384: prevSoupLoad = seconds;
  2533  0006C6  C05E  F090         	movff	_seconds,main@prevSoupLoad
  2534  0006CA  C05F  F091         	movff	_seconds+1,main@prevSoupLoad+1
  2535                           
  2536                           ;main.c: 385: if (!soupSort){
  2537  0006CE  0100               	movlb	0	; () banked
  2538  0006D0  5194               	movf	main@soupSort& (0+255),w,b
  2539  0006D2  0100               	movlb	0	; () banked
  2540  0006D4  1195               	iorwf	(main@soupSort+1)& (0+255),w,b
  2541  0006D6  A4D8               	btfss	status,2,c
  2542  0006D8  D015               	goto	l6085
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 386: soupSort = 1;
  2546  0006DA  0E00               	movlw	0
  2547  0006DC  0100               	movlb	0	; () banked
  2548  0006DE  6F95               	movwf	(main@soupSort+1)& (0+255),b
  2549  0006E0  0E01               	movlw	1
  2550  0006E2  6F94               	movwf	main@soupSort& (0+255),b
  2551                           
  2552                           ;main.c: 387: soupSteps = 0;
  2553  0006E4  0E00               	movlw	0
  2554  0006E6  6E59               	movwf	_soupSteps+1,c
  2555  0006E8  0E00               	movlw	0
  2556  0006EA  6E58               	movwf	_soupSteps,c
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 388: _delay((unsigned long)((150)*(32000000/4000.0)));
  2560  0006EC  0E07               	movlw	7
  2561  0006EE  6E41               	movwf	(??_main+1)& (0+255),c
  2562  0006F0  0E17               	movlw	23
  2563  0006F2  6E40               	movwf	??_main& (0+255),c
  2564  0006F4  0E6A               	movlw	106
  2565  0006F6                     u7797:
  2566  0006F6  2EE8               	decfsz	wreg,f,c
  2567  0006F8  D7FE               	bra	u7797
  2568  0006FA  2E40               	decfsz	??_main& (0+255),f,c
  2569  0006FC  D7FC               	bra	u7797
  2570  0006FE  2E41               	decfsz	(??_main+1)& (0+255),f,c
  2571  000700  D7FA               	bra	u7797
  2572  000702  D000               	nop2	
  2573  000704                     l6085:
  2574                           
  2575                           ;main.c: 389: }
  2576                           ;main.c: 390: }
  2577                           ;main.c: 392: printf("soup: %x %d", ADRES, soupSteps);
  2578  000704  0EB5               	movlw	low STR_24
  2579  000706  6E21               	movwf	printf@f,c
  2580  000708  0EFF               	movlw	high STR_24
  2581  00070A  6E22               	movwf	printf@f+1,c
  2582  00070C  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2583  000710  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2584  000714  C058  F025         	movff	_soupSteps,?_printf+4
  2585  000718  C059  F026         	movff	_soupSteps+1,?_printf+5
  2586  00071C  EC6F  F008         	call	_printf	;wreg free
  2587                           
  2588                           ;main.c: 394: if (soupSort){
  2589  000720  0100               	movlb	0	; () banked
  2590  000722  5194               	movf	main@soupSort& (0+255),w,b
  2591  000724  0100               	movlb	0	; () banked
  2592  000726  1195               	iorwf	(main@soupSort+1)& (0+255),w,b
  2593  000728  B4D8               	btfsc	status,2,c
  2594  00072A  D0FF               	goto	l6175
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 395: if (soupSteps < 80){
  2598  00072C  BE59               	btfsc	_soupSteps+1,7,c
  2599  00072E  D006               	goto	l6091
  2600  000730  5059               	movf	_soupSteps+1,w,c
  2601  000732  E11E               	bnz	l6101
  2602  000734  0E50               	movlw	80
  2603  000736  5C58               	subwf	_soupSteps,w,c
  2604  000738  B0D8               	btfsc	status,0,c
  2605  00073A  D01A               	goto	l6101
  2606  00073C                     l6091:
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;main.c: 396: S1mode = 3;
  2610  00073C  0E00               	movlw	0
  2611  00073E  6E5D               	movwf	_S1mode+1,c
  2612  000740  0E03               	movlw	3
  2613  000742  6E5C               	movwf	_S1mode,c
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 397: readADC(4);
  2617  000744  0E04               	movlw	4
  2618  000746  ECD1  F012         	call	_readADC
  2619                           
  2620                           ;main.c: 398: if(ADRES<0x200){labelState = 1;}
  2621  00074A  0E02               	movlw	2
  2622  00074C  5CC4               	subwf	4036,w,c	;volatile
  2623  00074E  B0D8               	btfsc	status,0,c
  2624  000750  D004               	goto	l6099
  2625  000752  0E00               	movlw	0
  2626  000754  6E53               	movwf	_labelState+1,c
  2627  000756  0E01               	movlw	1
  2628  000758  6E52               	movwf	_labelState,c
  2629  00075A                     l6099:
  2630                           
  2631                           ;main.c: 399: printf(" %x",ADRES);
  2632  00075A  0EFB               	movlw	low STR_25
  2633  00075C  6E21               	movwf	printf@f,c
  2634  00075E  0EFF               	movlw	high STR_25
  2635  000760  6E22               	movwf	printf@f+1,c
  2636  000762  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2637  000766  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2638  00076A  EC6F  F008         	call	_printf	;wreg free
  2639                           
  2640                           ;main.c: 400: }
  2641  00076E  D0E1               	goto	l6177
  2642  000770                     l6101:
  2643                           
  2644                           ;main.c: 401: else if (labelState == 1){
  2645  000770  0452               	decf	_labelState,w,c
  2646  000772  1053               	iorwf	_labelState+1,w,c
  2647  000774  A4D8               	btfss	status,2,c
  2648  000776  D050               	goto	l6129
  2649                           
  2650                           ;main.c: 402: if(soupSteps < (80+70)){
  2651  000778  BE59               	btfsc	_soupSteps+1,7,c
  2652  00077A  D006               	goto	l6105
  2653  00077C  5059               	movf	_soupSteps+1,w,c
  2654  00077E  E108               	bnz	l6107
  2655  000780  0E96               	movlw	150
  2656  000782  5C58               	subwf	_soupSteps,w,c
  2657  000784  B0D8               	btfsc	status,0,c
  2658  000786  D004               	goto	l6107
  2659  000788                     l6105:
  2660                           
  2661                           ;main.c: 403: S1mode = 1;
  2662  000788  0E00               	movlw	0
  2663  00078A  6E5D               	movwf	_S1mode+1,c
  2664  00078C  0E01               	movlw	1
  2665  00078E  D053               	goto	L1
  2666  000790                     l6107:
  2667                           
  2668                           ;main.c: 406: else if(soupSteps < (80+70+55)){
  2669  000790  BE59               	btfsc	_soupSteps+1,7,c
  2670  000792  D006               	goto	l6109
  2671  000794  5059               	movf	_soupSteps+1,w,c
  2672  000796  E10C               	bnz	l6111
  2673  000798  0ECD               	movlw	205
  2674  00079A  5C58               	subwf	_soupSteps,w,c
  2675  00079C  B0D8               	btfsc	status,0,c
  2676  00079E  D008               	goto	l6111
  2677  0007A0                     l6109:
  2678                           
  2679                           ;main.c: 407: S1mode = 2;
  2680  0007A0  0E00               	movlw	0
  2681  0007A2  6E5D               	movwf	_S1mode+1,c
  2682  0007A4  0E02               	movlw	2
  2683  0007A6  6E5C               	movwf	_S1mode,c
  2684                           
  2685                           ;main.c: 408: soupAlign = 2;
  2686  0007A8  0E00               	movlw	0
  2687  0007AA  6E4F               	movwf	_soupAlign+1,c
  2688  0007AC  0E02               	movlw	2
  2689  0007AE  D059               	goto	L2
  2690  0007B0                     l6111:
  2691                           
  2692                           ;main.c: 410: else{
  2693                           ;main.c: 411: S1mode = 10;
  2694  0007B0  0E00               	movlw	0
  2695  0007B2  6E5D               	movwf	_S1mode+1,c
  2696  0007B4  0E0A               	movlw	10
  2697  0007B6  6E5C               	movwf	_S1mode,c
  2698                           
  2699                           ;main.c: 412: printf(" %d", soupAlign);
  2700  0007B8  0EB8               	movlw	low (STR_48+12)
  2701  0007BA  6E21               	movwf	printf@f,c
  2702  0007BC  0EFE               	movlw	high (STR_48+12)
  2703  0007BE  6E22               	movwf	printf@f+1,c
  2704  0007C0  C04E  F023         	movff	_soupAlign,?_printf+2
  2705  0007C4  C04F  F024         	movff	_soupAlign+1,?_printf+3
  2706  0007C8  EC6F  F008         	call	_printf	;wreg free
  2707                           
  2708                           ;main.c: 413: updateS1(soupAlign);
  2709  0007CC  C04E  F015         	movff	_soupAlign,updateS1@mode
  2710  0007D0  C04F  F016         	movff	_soupAlign+1,updateS1@mode+1
  2711  0007D4  ECF5  F009         	call	_updateS1	;wreg free
  2712                           
  2713                           ;main.c: 414: readADC(1);
  2714  0007D8  0E01               	movlw	1
  2715  0007DA  ECD1  F012         	call	_readADC
  2716                           
  2717                           ;main.c: 415: printf(" %x", ADRES);
  2718  0007DE  0EFB               	movlw	low STR_25
  2719  0007E0  6E21               	movwf	printf@f,c
  2720  0007E2  0EFF               	movlw	high STR_25
  2721  0007E4  6E22               	movwf	printf@f+1,c
  2722  0007E6  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2723  0007EA  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2724  0007EE  EC6F  F008         	call	_printf	;wreg free
  2725                           
  2726                           ;main.c: 416: if (ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 101;}
  2727  0007F2  0100               	movlb	0	; () banked
  2728  0007F4  519A               	movf	main@prevSoupIR& (0+255),w,b
  2729  0007F6  5CC3               	subwf	4035,w,c	;volatile
  2730  0007F8  0100               	movlb	0	; () banked
  2731  0007FA  519B               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2732  0007FC  58C4               	subwfb	4036,w,c	;volatile
  2733  0007FE  B0D8               	btfsc	status,0,c
  2734  000800  D065               	goto	l6155
  2735                           
  2736                           ; BSR set to: 0
  2737  000802  0EAB               	movlw	171
  2738  000804  5CC3               	subwf	4035,w,c	;volatile
  2739  000806  0E03               	movlw	3
  2740  000808  58C4               	subwfb	4036,w,c	;volatile
  2741  00080A  A0D8               	btfss	status,0,c
  2742  00080C  D05F               	goto	l6155
  2743                           
  2744                           ; BSR set to: 0
  2745  00080E  0E00               	movlw	0
  2746  000810  6E53               	movwf	_labelState+1,c
  2747  000812  0E65               	movlw	101
  2748  000814  6E52               	movwf	_labelState,c
  2749  000816  D05A               	goto	l6155
  2750  000818                     l6129:
  2751                           
  2752                           ;main.c: 421: else if(labelState == 0){
  2753  000818  5052               	movf	_labelState,w,c
  2754  00081A  1053               	iorwf	_labelState+1,w,c
  2755  00081C  A4D8               	btfss	status,2,c
  2756  00081E  D05B               	goto	l6157
  2757                           
  2758                           ;main.c: 422: if(soupSteps < (80+70)){
  2759  000820  BE59               	btfsc	_soupSteps+1,7,c
  2760  000822  D006               	goto	l6133
  2761  000824  5059               	movf	_soupSteps+1,w,c
  2762  000826  E10E               	bnz	l6135
  2763  000828  0E96               	movlw	150
  2764  00082A  5C58               	subwf	_soupSteps,w,c
  2765  00082C  B0D8               	btfsc	status,0,c
  2766  00082E  D00A               	goto	l6135
  2767  000830                     l6133:
  2768                           
  2769                           ;main.c: 423: S1mode = 2;
  2770  000830  0E00               	movlw	0
  2771  000832  6E5D               	movwf	_S1mode+1,c
  2772  000834  0E02               	movlw	2
  2773  000836                     L1:
  2774  000836  6E5C               	movwf	_S1mode,c
  2775                           
  2776                           ;main.c: 424: prevSoupLoad = 0;
  2777  000838  0E00               	movlw	0
  2778  00083A  0100               	movlb	0	; () banked
  2779  00083C  6F91               	movwf	(main@prevSoupLoad+1)& (0+255),b
  2780  00083E  0E00               	movlw	0
  2781  000840  6F90               	movwf	main@prevSoupLoad& (0+255),b
  2782                           
  2783                           ;main.c: 425: }
  2784  000842  D077               	goto	l6177
  2785  000844                     l6135:
  2786                           
  2787                           ;main.c: 426: else if(soupSteps < (80+70+58)){
  2788  000844  BE59               	btfsc	_soupSteps+1,7,c
  2789  000846  D006               	goto	l6137
  2790  000848  5059               	movf	_soupSteps+1,w,c
  2791  00084A  E10D               	bnz	l6139
  2792  00084C  0ED0               	movlw	208
  2793  00084E  5C58               	subwf	_soupSteps,w,c
  2794  000850  B0D8               	btfsc	status,0,c
  2795  000852  D009               	goto	l6139
  2796  000854                     l6137:
  2797                           
  2798                           ;main.c: 427: S1mode = 1;
  2799  000854  0E00               	movlw	0
  2800  000856  6E5D               	movwf	_S1mode+1,c
  2801  000858  0E01               	movlw	1
  2802  00085A  6E5C               	movwf	_S1mode,c
  2803                           
  2804                           ;main.c: 428: soupAlign = 1;
  2805  00085C  0E00               	movlw	0
  2806  00085E  6E4F               	movwf	_soupAlign+1,c
  2807  000860  0E01               	movlw	1
  2808  000862                     L2:
  2809  000862  6E4E               	movwf	_soupAlign,c
  2810                           
  2811                           ;main.c: 429: }
  2812  000864  D066               	goto	l6177
  2813  000866                     l6139:
  2814                           
  2815                           ;main.c: 430: else{
  2816                           ;main.c: 431: S1mode = 10;
  2817  000866  0E00               	movlw	0
  2818  000868  6E5D               	movwf	_S1mode+1,c
  2819  00086A  0E0A               	movlw	10
  2820  00086C  6E5C               	movwf	_S1mode,c
  2821                           
  2822                           ;main.c: 432: printf(" %d", soupAlign);
  2823  00086E  0EB8               	movlw	low (STR_48+12)
  2824  000870  6E21               	movwf	printf@f,c
  2825  000872  0EFE               	movlw	high (STR_48+12)
  2826  000874  6E22               	movwf	printf@f+1,c
  2827  000876  C04E  F023         	movff	_soupAlign,?_printf+2
  2828  00087A  C04F  F024         	movff	_soupAlign+1,?_printf+3
  2829  00087E  EC6F  F008         	call	_printf	;wreg free
  2830                           
  2831                           ;main.c: 433: updateS1(soupAlign);
  2832  000882  C04E  F015         	movff	_soupAlign,updateS1@mode
  2833  000886  C04F  F016         	movff	_soupAlign+1,updateS1@mode+1
  2834  00088A  ECF5  F009         	call	_updateS1	;wreg free
  2835                           
  2836                           ;main.c: 434: readADC(1);
  2837  00088E  0E01               	movlw	1
  2838  000890  ECD1  F012         	call	_readADC
  2839                           
  2840                           ;main.c: 435: printf(" %x", ADRES);
  2841  000894  0EFB               	movlw	low STR_25
  2842  000896  6E21               	movwf	printf@f,c
  2843  000898  0EFF               	movlw	high STR_25
  2844  00089A  6E22               	movwf	printf@f+1,c
  2845  00089C  CFC3 F023          	movff	4035,?_printf+2	;volatile
  2846  0008A0  CFC4 F024          	movff	4036,?_printf+3	;volatile
  2847  0008A4  EC6F  F008         	call	_printf	;wreg free
  2848                           
  2849                           ;main.c: 436: if(ADRES < prevSoupIR && ADRES > 0x3aa){labelState = 100;}
  2850  0008A8  0100               	movlb	0	; () banked
  2851  0008AA  519A               	movf	main@prevSoupIR& (0+255),w,b
  2852  0008AC  5CC3               	subwf	4035,w,c	;volatile
  2853  0008AE  0100               	movlb	0	; () banked
  2854  0008B0  519B               	movf	(main@prevSoupIR+1)& (0+255),w,b
  2855  0008B2  58C4               	subwfb	4036,w,c	;volatile
  2856  0008B4  B0D8               	btfsc	status,0,c
  2857  0008B6  D00A               	goto	l6155
  2858                           
  2859                           ; BSR set to: 0
  2860  0008B8  0EAB               	movlw	171
  2861  0008BA  5CC3               	subwf	4035,w,c	;volatile
  2862  0008BC  0E03               	movlw	3
  2863  0008BE  58C4               	subwfb	4036,w,c	;volatile
  2864  0008C0  A0D8               	btfss	status,0,c
  2865  0008C2  D004               	goto	l6155
  2866                           
  2867                           ; BSR set to: 0
  2868  0008C4  0E00               	movlw	0
  2869  0008C6  6E53               	movwf	_labelState+1,c
  2870  0008C8  0E64               	movlw	100
  2871  0008CA  D7A4               	goto	L8
  2872  0008CC                     l6155:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 437: prevSoupIR = ADRES;
  2876  0008CC  CFC3 F09A          	movff	4035,main@prevSoupIR	;volatile
  2877  0008D0  CFC4 F09B          	movff	4036,main@prevSoupIR+1	;volatile
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 438: }
  2881                           ;main.c: 439: }
  2882                           
  2883                           ; BSR set to: 0
  2884  0008D4  D02E               	goto	l6177
  2885  0008D6                     l6157:
  2886                           
  2887                           ;main.c: 440: else{
  2888                           ;main.c: 441: if(labelState == 101){soupNL++;}
  2889  0008D6  0E65               	movlw	101
  2890  0008D8  1852               	xorwf	_labelState,w,c
  2891  0008DA  1053               	iorwf	_labelState+1,w,c
  2892  0008DC  A4D8               	btfss	status,2,c
  2893  0008DE  D004               	goto	l6161
  2894  0008E0  0100               	movlb	0	; () banked
  2895  0008E2  4B8A               	infsnz	main@soupNL& (0+255),f,b
  2896  0008E4  2B8B               	incf	(main@soupNL+1)& (0+255),f,b
  2897  0008E6  D008               	goto	l6165
  2898  0008E8                     l6161:
  2899                           
  2900                           ;main.c: 442: else if(labelState == 100){soupL++;}
  2901  0008E8  0E64               	movlw	100
  2902  0008EA  1852               	xorwf	_labelState,w,c
  2903  0008EC  1053               	iorwf	_labelState+1,w,c
  2904  0008EE  A4D8               	btfss	status,2,c
  2905  0008F0  D003               	goto	l6165
  2906  0008F2  0100               	movlb	0	; () banked
  2907  0008F4  4B88               	infsnz	main@soupL& (0+255),f,b
  2908  0008F6  2B89               	incf	(main@soupL+1)& (0+255),f,b
  2909  0008F8                     l6165:
  2910                           
  2911                           ;main.c: 443: soupSteps = 0;
  2912  0008F8  0E00               	movlw	0
  2913  0008FA  6E59               	movwf	_soupSteps+1,c
  2914  0008FC  0E00               	movlw	0
  2915  0008FE  6E58               	movwf	_soupSteps,c
  2916                           
  2917                           ;main.c: 444: prevSoupIR = 0;
  2918  000900  0E00               	movlw	0
  2919  000902  0100               	movlb	0	; () banked
  2920  000904  6F9B               	movwf	(main@prevSoupIR+1)& (0+255),b
  2921  000906  0E00               	movlw	0
  2922  000908  6F9A               	movwf	main@prevSoupIR& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 445: labelState = 0;
  2926  00090A  0E00               	movlw	0
  2927  00090C  6E53               	movwf	_labelState+1,c
  2928  00090E  0E00               	movlw	0
  2929  000910  6E52               	movwf	_labelState,c
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 446: if (prevSoupLoad == 0) {soupSort = 0;}
  2933  000912  0100               	movlb	0	; () banked
  2934  000914  5190               	movf	main@prevSoupLoad& (0+255),w,b
  2935  000916  0100               	movlb	0	; () banked
  2936  000918  1191               	iorwf	(main@prevSoupLoad+1)& (0+255),w,b
  2937  00091A  A4D8               	btfss	status,2,c
  2938  00091C  D00A               	goto	l6177
  2939                           
  2940                           ; BSR set to: 0
  2941  00091E  0E00               	movlw	0
  2942  000920  0100               	movlb	0	; () banked
  2943  000922  6F95               	movwf	(main@soupSort+1)& (0+255),b
  2944  000924  0E00               	movlw	0
  2945  000926  6F94               	movwf	main@soupSort& (0+255),b
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 447: }
  2949                           ;main.c: 448: }
  2950                           
  2951                           ; BSR set to: 0
  2952                           
  2953                           ; BSR set to: 0
  2954                           
  2955                           ; BSR set to: 0
  2956  000928  D004               	goto	l6177
  2957  00092A                     l6175:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 449: else{
  2961                           ;main.c: 450: S1mode = 3;
  2962  00092A  0E00               	movlw	0
  2963  00092C  6E5D               	movwf	_S1mode+1,c
  2964  00092E  0E03               	movlw	3
  2965  000930  6E5C               	movwf	_S1mode,c
  2966  000932                     l6177:
  2967                           
  2968                           ;main.c: 451: }
  2969                           ;main.c: 454: lcdInst(0b11000000);;
  2970  000932  0EC0               	movlw	192
  2971  000934  EC25  F013         	call	_lcdInst
  2972                           
  2973                           ;main.c: 456: readADC(0);
  2974  000938  0E00               	movlw	0
  2975  00093A  ECD1  F012         	call	_readADC
  2976                           
  2977                           ;main.c: 457: if(ADRES <= 0x250){
  2978  00093E  0E51               	movlw	81
  2979  000940  5CC3               	subwf	4035,w,c	;volatile
  2980  000942  0E02               	movlw	2
  2981  000944  58C4               	subwfb	4036,w,c	;volatile
  2982  000946  B0D8               	btfsc	status,0,c
  2983  000948  D01F               	goto	l6191
  2984                           
  2985                           ;main.c: 458: prevSodaLoad = seconds;
  2986  00094A  C05E  F092         	movff	_seconds,main@prevSodaLoad
  2987  00094E  C05F  F093         	movff	_seconds+1,main@prevSodaLoad+1
  2988                           
  2989                           ;main.c: 459: if (!sodaSort){
  2990  000952  0100               	movlb	0	; () banked
  2991  000954  5196               	movf	main@sodaSort& (0+255),w,b
  2992  000956  0100               	movlb	0	; () banked
  2993  000958  1197               	iorwf	(main@sodaSort+1)& (0+255),w,b
  2994  00095A  A4D8               	btfss	status,2,c
  2995  00095C  D015               	goto	l6191
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;main.c: 460: sodaSort = 1;
  2999  00095E  0E00               	movlw	0
  3000  000960  0100               	movlb	0	; () banked
  3001  000962  6F97               	movwf	(main@sodaSort+1)& (0+255),b
  3002  000964  0E01               	movlw	1
  3003  000966  6F96               	movwf	main@sodaSort& (0+255),b
  3004                           
  3005                           ;main.c: 461: sodaSteps = 0;
  3006  000968  0E00               	movlw	0
  3007  00096A  6E57               	movwf	_sodaSteps+1,c
  3008  00096C  0E00               	movlw	0
  3009  00096E  6E56               	movwf	_sodaSteps,c
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;main.c: 462: _delay((unsigned long)((150)*(32000000/4000.0)));
  3013  000970  0E07               	movlw	7
  3014  000972  6E41               	movwf	(??_main+1)& (0+255),c
  3015  000974  0E17               	movlw	23
  3016  000976  6E40               	movwf	??_main& (0+255),c
  3017  000978  0E6A               	movlw	106
  3018  00097A                     u7807:
  3019  00097A  2EE8               	decfsz	wreg,f,c
  3020  00097C  D7FE               	bra	u7807
  3021  00097E  2E40               	decfsz	??_main& (0+255),f,c
  3022  000980  D7FC               	bra	u7807
  3023  000982  2E41               	decfsz	(??_main+1)& (0+255),f,c
  3024  000984  D7FA               	bra	u7807
  3025  000986  D000               	nop2	
  3026  000988                     l6191:
  3027                           
  3028                           ;main.c: 463: }
  3029                           ;main.c: 464: }
  3030                           ;main.c: 466: printf("soda: %x %d", ADRES, sodaSteps);
  3031  000988  0EA9               	movlw	low STR_30
  3032  00098A  6E21               	movwf	printf@f,c
  3033  00098C  0EFF               	movlw	high STR_30
  3034  00098E  6E22               	movwf	printf@f+1,c
  3035  000990  CFC3 F023          	movff	4035,?_printf+2	;volatile
  3036  000994  CFC4 F024          	movff	4036,?_printf+3	;volatile
  3037  000998  C056  F025         	movff	_sodaSteps,?_printf+4
  3038  00099C  C057  F026         	movff	_sodaSteps+1,?_printf+5
  3039  0009A0  EC6F  F008         	call	_printf	;wreg free
  3040                           
  3041                           ;main.c: 468: if (sodaSort){
  3042  0009A4  0100               	movlb	0	; () banked
  3043  0009A6  5196               	movf	main@sodaSort& (0+255),w,b
  3044  0009A8  0100               	movlb	0	; () banked
  3045  0009AA  1197               	iorwf	(main@sodaSort+1)& (0+255),w,b
  3046  0009AC  A4D8               	btfss	status,2,c
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 469: if(sodaSteps < 48){
  3050  0009AE  BE57               	btfsc	_sodaSteps+1,7,c
  3051  0009B0  D140               	goto	l6293
  3052  0009B2  5057               	movf	_sodaSteps+1,w,c
  3053  0009B4  E104               	bnz	l6199
  3054  0009B6  0E30               	movlw	48
  3055  0009B8  5C56               	subwf	_sodaSteps,w,c
  3056  0009BA  A0D8               	btfss	status,0,c
  3057  0009BC  D13A               	goto	l6293
  3058  0009BE                     l6199:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;main.c: 473: else if (sodaSteps < (48+43)){
  3062  0009BE  BE57               	btfsc	_sodaSteps+1,7,c
  3063  0009C0  D006               	goto	l6201
  3064  0009C2  5057               	movf	_sodaSteps+1,w,c
  3065  0009C4  E108               	bnz	l6203
  3066  0009C6  0E5B               	movlw	91
  3067  0009C8  5C56               	subwf	_sodaSteps,w,c
  3068  0009CA  B0D8               	btfsc	status,0,c
  3069  0009CC  D004               	goto	l6203
  3070  0009CE                     l6201:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;main.c: 474: S3mode = 1;
  3074  0009CE  0E00               	movlw	0
  3075  0009D0  6E5B               	movwf	_S3mode+1,c
  3076  0009D2  0E01               	movlw	1
  3077  0009D4  D131               	goto	L9
  3078  0009D6                     l6203:
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;main.c: 477: else if (sodaSteps < (48+43+10)){
  3082  0009D6  BE57               	btfsc	_sodaSteps+1,7,c
  3083  0009D8  D006               	goto	l6205
  3084  0009DA  5057               	movf	_sodaSteps+1,w,c
  3085  0009DC  E10D               	bnz	l6207
  3086  0009DE  0E65               	movlw	101
  3087  0009E0  5C56               	subwf	_sodaSteps,w,c
  3088  0009E2  B0D8               	btfsc	status,0,c
  3089  0009E4  D009               	goto	l6207
  3090  0009E6                     l6205:
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 478: S3mode = 4;
  3094  0009E6  0E00               	movlw	0
  3095  0009E8  6E5B               	movwf	_S3mode+1,c
  3096  0009EA  0E04               	movlw	4
  3097  0009EC  6E5A               	movwf	_S3mode,c
  3098                           
  3099                           ;main.c: 479: S2mode = 1;
  3100  0009EE  0E00               	movlw	0
  3101  0009F0  0100               	movlb	0	; () banked
  3102  0009F2  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3103  0009F4  0E01               	movlw	1
  3104  0009F6  D125               	goto	L5
  3105  0009F8                     l6207:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;main.c: 481: else if (sodaSteps < (48+43+10+12)){
  3109  0009F8  BE57               	btfsc	_sodaSteps+1,7,c
  3110  0009FA  D006               	goto	l6209
  3111  0009FC  5057               	movf	_sodaSteps+1,w,c
  3112  0009FE  E121               	bnz	l6219
  3113  000A00  0E71               	movlw	113
  3114  000A02  5C56               	subwf	_sodaSteps,w,c
  3115  000A04  B0D8               	btfsc	status,0,c
  3116  000A06  D01D               	goto	l6219
  3117  000A08                     l6209:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 482: S2mode = 4;
  3121  000A08  0E00               	movlw	0
  3122  000A0A  0100               	movlb	0	; () banked
  3123  000A0C  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3124  000A0E  0E04               	movlw	4
  3125  000A10  6FAB               	movwf	_S2mode& (0+255),b
  3126                           
  3127                           ;main.c: 483: S3mode = 4;
  3128  000A12  0E00               	movlw	0
  3129  000A14  6E5B               	movwf	_S3mode+1,c
  3130  000A16  0E04               	movlw	4
  3131  000A18  6E5A               	movwf	_S3mode,c
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;main.c: 484: readADC(3);
  3135  000A1A  0E03               	movlw	3
  3136  000A1C  ECD1  F012         	call	_readADC
  3137                           
  3138                           ;main.c: 485: if(ADRESH<=1){tabState = 1;}
  3139  000A20  0E02               	movlw	2
  3140  000A22  60C4               	cpfslt	4036,c	;volatile
  3141  000A24  D004               	goto	l6217
  3142  000A26  0E00               	movlw	0
  3143  000A28  6E55               	movwf	_tabState+1,c
  3144  000A2A  0E01               	movlw	1
  3145  000A2C  6E54               	movwf	_tabState,c
  3146  000A2E                     l6217:
  3147                           
  3148                           ;main.c: 486: printf(" %x",ADRESH);
  3149  000A2E  0EFB               	movlw	low STR_25
  3150  000A30  6E21               	movwf	printf@f,c
  3151  000A32  0EFF               	movlw	high STR_25
  3152  000A34  6E22               	movwf	printf@f+1,c
  3153  000A36  CFC4 F023          	movff	4036,?_printf+2	;volatile
  3154  000A3A  6A24               	clrf	?_printf+3,c
  3155  000A3C  EC6F  F008         	call	_printf	;wreg free
  3156                           
  3157                           ;main.c: 487: }
  3158  000A40  D101               	goto	l6295
  3159  000A42                     l6219:
  3160                           
  3161                           ;main.c: 488: else if (sodaSteps < (48+43+10+12+10)){
  3162  000A42  BE57               	btfsc	_sodaSteps+1,7,c
  3163  000A44  D006               	goto	l6221
  3164  000A46  5057               	movf	_sodaSteps+1,w,c
  3165  000A48  E10E               	bnz	l6223
  3166  000A4A  0E7B               	movlw	123
  3167  000A4C  5C56               	subwf	_sodaSteps,w,c
  3168  000A4E  B0D8               	btfsc	status,0,c
  3169  000A50  D00A               	goto	l6223
  3170  000A52                     l6221:
  3171                           
  3172                           ;main.c: 489: S2mode = 2;
  3173  000A52  0E00               	movlw	0
  3174  000A54  0100               	movlb	0	; () banked
  3175  000A56  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3176  000A58  0E02               	movlw	2
  3177  000A5A  6FAB               	movwf	_S2mode& (0+255),b
  3178                           
  3179                           ;main.c: 490: S3mode = 4;
  3180  000A5C  0E00               	movlw	0
  3181  000A5E  6E5B               	movwf	_S3mode+1,c
  3182  000A60  0E04               	movlw	4
  3183  000A62  6E5A               	movwf	_S3mode,c
  3184                           
  3185                           ;main.c: 491: }
  3186  000A64  D0EF               	goto	l6295
  3187  000A66                     l6223:
  3188                           
  3189                           ;main.c: 492: else if (tabState == 1){
  3190  000A66  0454               	decf	_tabState,w,c
  3191  000A68  1055               	iorwf	_tabState+1,w,c
  3192  000A6A  A4D8               	btfss	status,2,c
  3193  000A6C  D054               	goto	l6249
  3194                           
  3195                           ;main.c: 493: if(sodaSteps < (48+43+10+12+10+30)){
  3196  000A6E  BE57               	btfsc	_sodaSteps+1,7,c
  3197  000A70  D006               	goto	l6227
  3198  000A72  5057               	movf	_sodaSteps+1,w,c
  3199  000A74  E108               	bnz	l6229
  3200  000A76  0E99               	movlw	153
  3201  000A78  5C56               	subwf	_sodaSteps,w,c
  3202  000A7A  B0D8               	btfsc	status,0,c
  3203  000A7C  D004               	goto	l6229
  3204  000A7E                     l6227:
  3205                           
  3206                           ;main.c: 494: S3mode = 1;
  3207  000A7E  0E00               	movlw	0
  3208  000A80  6E5B               	movwf	_S3mode+1,c
  3209  000A82  0E01               	movlw	1
  3210  000A84  D057               	goto	L6
  3211  000A86                     l6229:
  3212                           
  3213                           ;main.c: 498: else if(sodaSteps < (48+43+10+12+10+30+57)){
  3214  000A86  BE57               	btfsc	_sodaSteps+1,7,c
  3215  000A88  D006               	goto	l6231
  3216  000A8A  5057               	movf	_sodaSteps+1,w,c
  3217  000A8C  E111               	bnz	l6233
  3218  000A8E  0ED2               	movlw	210
  3219  000A90  5C56               	subwf	_sodaSteps,w,c
  3220  000A92  B0D8               	btfsc	status,0,c
  3221  000A94  D00D               	goto	l6233
  3222  000A96                     l6231:
  3223                           
  3224                           ;main.c: 499: S3mode = 2;
  3225  000A96  0E00               	movlw	0
  3226  000A98  6E5B               	movwf	_S3mode+1,c
  3227  000A9A  0E02               	movlw	2
  3228  000A9C  6E5A               	movwf	_S3mode,c
  3229                           
  3230                           ;main.c: 500: S2mode = 4;
  3231  000A9E  0E00               	movlw	0
  3232  000AA0  0100               	movlb	0	; () banked
  3233  000AA2  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3234  000AA4  0E04               	movlw	4
  3235  000AA6  6FAB               	movwf	_S2mode& (0+255),b
  3236                           
  3237                           ;main.c: 501: sodaAlign = 2;
  3238  000AA8  0E00               	movlw	0
  3239  000AAA  6E51               	movwf	_sodaAlign+1,c
  3240  000AAC  0E02               	movlw	2
  3241  000AAE  D062               	goto	L7
  3242  000AB0                     l6233:
  3243                           
  3244                           ;main.c: 503: else {
  3245                           ;main.c: 504: S2mode = 4;
  3246  000AB0  0E00               	movlw	0
  3247  000AB2  0100               	movlb	0	; () banked
  3248  000AB4  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3249  000AB6  0E04               	movlw	4
  3250  000AB8  6FAB               	movwf	_S2mode& (0+255),b
  3251                           
  3252                           ;main.c: 505: S3mode = 10;
  3253  000ABA  0E00               	movlw	0
  3254  000ABC  6E5B               	movwf	_S3mode+1,c
  3255  000ABE  0E0A               	movlw	10
  3256  000AC0  6E5A               	movwf	_S3mode,c
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 506: updateS3(sodaAlign);
  3260  000AC2  C050  F015         	movff	_sodaAlign,updateS3@mode
  3261  000AC6  C051  F016         	movff	_sodaAlign+1,updateS3@mode+1
  3262  000ACA  EC65  F00D         	call	_updateS3	;wreg free
  3263                           
  3264                           ;main.c: 507: readADC(5);
  3265  000ACE  0E05               	movlw	5
  3266  000AD0  ECD1  F012         	call	_readADC
  3267                           
  3268                           ;main.c: 508: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 101;}
  3269  000AD4  0100               	movlb	0	; () banked
  3270  000AD6  5198               	movf	main@prevSodaIR& (0+255),w,b
  3271  000AD8  5CC3               	subwf	4035,w,c	;volatile
  3272  000ADA  0100               	movlb	0	; () banked
  3273  000ADC  5199               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3274  000ADE  58C4               	subwfb	4036,w,c	;volatile
  3275  000AE0  B0D8               	btfsc	status,0,c
  3276  000AE2  D00A               	goto	l6245
  3277                           
  3278                           ; BSR set to: 0
  3279  000AE4  0EAB               	movlw	171
  3280  000AE6  5CC3               	subwf	4035,w,c	;volatile
  3281  000AE8  0E03               	movlw	3
  3282  000AEA  58C4               	subwfb	4036,w,c	;volatile
  3283  000AEC  A0D8               	btfss	status,0,c
  3284  000AEE  D004               	goto	l6245
  3285                           
  3286                           ; BSR set to: 0
  3287  000AF0  0E00               	movlw	0
  3288  000AF2  6E55               	movwf	_tabState+1,c
  3289  000AF4  0E65               	movlw	101
  3290  000AF6  6E54               	movwf	_tabState,c
  3291  000AF8                     l6245:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;main.c: 509: prevSodaIR = ADRES;
  3295  000AF8  CFC3 F098          	movff	4035,main@prevSodaIR	;volatile
  3296  000AFC  CFC4 F099          	movff	4036,main@prevSodaIR+1	;volatile
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;main.c: 510: printf(" %x", ADRES);
  3300  000B00  0EFB               	movlw	low STR_25
  3301  000B02  6E21               	movwf	printf@f,c
  3302  000B04  0EFF               	movlw	high STR_25
  3303  000B06  6E22               	movwf	printf@f+1,c
  3304  000B08  CFC3 F023          	movff	4035,?_printf+2	;volatile
  3305  000B0C  CFC4 F024          	movff	4036,?_printf+3	;volatile
  3306  000B10  EC6F  F008         	call	_printf	;wreg free
  3307                           
  3308                           ;main.c: 511: }
  3309                           ;main.c: 512: }
  3310  000B14  D097               	goto	l6295
  3311  000B16                     l6249:
  3312                           
  3313                           ;main.c: 513: else if(tabState == 0){
  3314  000B16  5054               	movf	_tabState,w,c
  3315  000B18  1055               	iorwf	_tabState+1,w,c
  3316  000B1A  A4D8               	btfss	status,2,c
  3317  000B1C  D060               	goto	l6275
  3318                           
  3319                           ;main.c: 514: if(sodaSteps < (48+43+10+12+10+(44+75))){
  3320  000B1E  BE57               	btfsc	_sodaSteps+1,7,c
  3321  000B20  D006               	goto	l6253
  3322  000B22  5057               	movf	_sodaSteps+1,w,c
  3323  000B24  E113               	bnz	l6255
  3324  000B26  0EF2               	movlw	242
  3325  000B28  5C56               	subwf	_sodaSteps,w,c
  3326  000B2A  B0D8               	btfsc	status,0,c
  3327  000B2C  D00F               	goto	l6255
  3328  000B2E                     l6253:
  3329                           
  3330                           ;main.c: 515: S3mode = 2;
  3331  000B2E  0E00               	movlw	0
  3332  000B30  6E5B               	movwf	_S3mode+1,c
  3333  000B32  0E02               	movlw	2
  3334  000B34                     L6:
  3335  000B34  6E5A               	movwf	_S3mode,c
  3336                           
  3337                           ;main.c: 516: S2mode = 4;
  3338  000B36  0E00               	movlw	0
  3339  000B38  0100               	movlb	0	; () banked
  3340  000B3A  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3341  000B3C  0E04               	movlw	4
  3342  000B3E  6FAB               	movwf	_S2mode& (0+255),b
  3343                           
  3344                           ;main.c: 517: prevSodaLoad = 0;
  3345  000B40  0E00               	movlw	0
  3346  000B42  0100               	movlb	0	; () banked
  3347  000B44  6F93               	movwf	(main@prevSodaLoad+1)& (0+255),b
  3348  000B46  0E00               	movlw	0
  3349  000B48  6F92               	movwf	main@prevSodaLoad& (0+255),b
  3350                           
  3351                           ;main.c: 518: }
  3352  000B4A  D07C               	goto	l6295
  3353  000B4C                     l6255:
  3354                           
  3355                           ;main.c: 519: else if(sodaSteps < (48+43+10+12+10+(44+75)+62)){
  3356  000B4C  BE57               	btfsc	_sodaSteps+1,7,c
  3357  000B4E  D006               	goto	l6257
  3358  000B50  0E30               	movlw	48
  3359  000B52  5C56               	subwf	_sodaSteps,w,c
  3360  000B54  0E01               	movlw	1
  3361  000B56  5857               	subwfb	_sodaSteps+1,w,c
  3362  000B58  B0D8               	btfsc	status,0,c
  3363  000B5A  D00E               	goto	l6259
  3364  000B5C                     l6257:
  3365                           
  3366                           ;main.c: 520: S3mode = 1;
  3367  000B5C  0E00               	movlw	0
  3368  000B5E  6E5B               	movwf	_S3mode+1,c
  3369  000B60  0E01               	movlw	1
  3370  000B62  6E5A               	movwf	_S3mode,c
  3371                           
  3372                           ;main.c: 521: S2mode = 4;
  3373  000B64  0E00               	movlw	0
  3374  000B66  0100               	movlb	0	; () banked
  3375  000B68  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3376  000B6A  0E04               	movlw	4
  3377  000B6C  6FAB               	movwf	_S2mode& (0+255),b
  3378                           
  3379                           ;main.c: 522: sodaAlign = 1;
  3380  000B6E  0E00               	movlw	0
  3381  000B70  6E51               	movwf	_sodaAlign+1,c
  3382  000B72  0E01               	movlw	1
  3383  000B74                     L7:
  3384  000B74  6E50               	movwf	_sodaAlign,c
  3385                           
  3386                           ;main.c: 523: }
  3387  000B76  D066               	goto	l6295
  3388  000B78                     l6259:
  3389                           
  3390                           ;main.c: 524: else {
  3391                           ;main.c: 525: S3mode = 10;
  3392  000B78  0E00               	movlw	0
  3393  000B7A  6E5B               	movwf	_S3mode+1,c
  3394  000B7C  0E0A               	movlw	10
  3395  000B7E  6E5A               	movwf	_S3mode,c
  3396                           
  3397                           ;main.c: 526: S2mode = 4;
  3398  000B80  0E00               	movlw	0
  3399  000B82  0100               	movlb	0	; () banked
  3400  000B84  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3401  000B86  0E04               	movlw	4
  3402  000B88  6FAB               	movwf	_S2mode& (0+255),b
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 527: updateS3(sodaAlign);
  3406  000B8A  C050  F015         	movff	_sodaAlign,updateS3@mode
  3407  000B8E  C051  F016         	movff	_sodaAlign+1,updateS3@mode+1
  3408  000B92  EC65  F00D         	call	_updateS3	;wreg free
  3409                           
  3410                           ;main.c: 528: readADC(5);
  3411  000B96  0E05               	movlw	5
  3412  000B98  ECD1  F012         	call	_readADC
  3413                           
  3414                           ;main.c: 529: if(ADRES <prevSodaIR && ADRES > 0x3aa){tabState = 100;}
  3415  000B9C  0100               	movlb	0	; () banked
  3416  000B9E  5198               	movf	main@prevSodaIR& (0+255),w,b
  3417  000BA0  5CC3               	subwf	4035,w,c	;volatile
  3418  000BA2  0100               	movlb	0	; () banked
  3419  000BA4  5199               	movf	(main@prevSodaIR+1)& (0+255),w,b
  3420  000BA6  58C4               	subwfb	4036,w,c	;volatile
  3421  000BA8  B0D8               	btfsc	status,0,c
  3422  000BAA  D00A               	goto	l6271
  3423                           
  3424                           ; BSR set to: 0
  3425  000BAC  0EAB               	movlw	171
  3426  000BAE  5CC3               	subwf	4035,w,c	;volatile
  3427  000BB0  0E03               	movlw	3
  3428  000BB2  58C4               	subwfb	4036,w,c	;volatile
  3429  000BB4  A0D8               	btfss	status,0,c
  3430  000BB6  D004               	goto	l6271
  3431                           
  3432                           ; BSR set to: 0
  3433  000BB8  0E00               	movlw	0
  3434  000BBA  6E55               	movwf	_tabState+1,c
  3435  000BBC  0E64               	movlw	100
  3436  000BBE  6E54               	movwf	_tabState,c
  3437  000BC0                     l6271:
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;main.c: 530: prevSodaIR = ADRES;
  3441  000BC0  CFC3 F098          	movff	4035,main@prevSodaIR	;volatile
  3442  000BC4  CFC4 F099          	movff	4036,main@prevSodaIR+1	;volatile
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 531: printf(" %x", ADRES);
  3446  000BC8  0EFB               	movlw	low STR_25
  3447  000BCA  6E21               	movwf	printf@f,c
  3448  000BCC  0EFF               	movlw	high STR_25
  3449  000BCE  6E22               	movwf	printf@f+1,c
  3450  000BD0  CFC3 F023          	movff	4035,?_printf+2	;volatile
  3451  000BD4  CFC4 F024          	movff	4036,?_printf+3	;volatile
  3452  000BD8  EC6F  F008         	call	_printf	;wreg free
  3453                           
  3454                           ;main.c: 532: }
  3455                           ;main.c: 533: }
  3456  000BDC  D033               	goto	l6295
  3457  000BDE                     l6275:
  3458                           
  3459                           ;main.c: 534: else{
  3460                           ;main.c: 535: if(tabState==101){sodaT++;}
  3461  000BDE  0E65               	movlw	101
  3462  000BE0  1854               	xorwf	_tabState,w,c
  3463  000BE2  1055               	iorwf	_tabState+1,w,c
  3464  000BE4  A4D8               	btfss	status,2,c
  3465  000BE6  D004               	goto	l6279
  3466  000BE8  0100               	movlb	0	; () banked
  3467  000BEA  4B8C               	infsnz	main@sodaT& (0+255),f,b
  3468  000BEC  2B8D               	incf	(main@sodaT+1)& (0+255),f,b
  3469  000BEE  D008               	goto	l6283
  3470  000BF0                     l6279:
  3471                           
  3472                           ;main.c: 536: else if(tabState==10){sodaNT++;}
  3473  000BF0  0E0A               	movlw	10
  3474  000BF2  1854               	xorwf	_tabState,w,c
  3475  000BF4  1055               	iorwf	_tabState+1,w,c
  3476  000BF6  A4D8               	btfss	status,2,c
  3477  000BF8  D003               	goto	l6283
  3478  000BFA  0100               	movlb	0	; () banked
  3479  000BFC  4B8E               	infsnz	main@sodaNT& (0+255),f,b
  3480  000BFE  2B8F               	incf	(main@sodaNT+1)& (0+255),f,b
  3481  000C00                     l6283:
  3482                           
  3483                           ;main.c: 537: sodaSteps = 0;
  3484  000C00  0E00               	movlw	0
  3485  000C02  6E57               	movwf	_sodaSteps+1,c
  3486  000C04  0E00               	movlw	0
  3487  000C06  6E56               	movwf	_sodaSteps,c
  3488                           
  3489                           ;main.c: 538: tabState = 0;
  3490  000C08  0E00               	movlw	0
  3491  000C0A  6E55               	movwf	_tabState+1,c
  3492  000C0C  0E00               	movlw	0
  3493  000C0E  6E54               	movwf	_tabState,c
  3494                           
  3495                           ;main.c: 539: prevSodaIR = 0;
  3496  000C10  0E00               	movlw	0
  3497  000C12  0100               	movlb	0	; () banked
  3498  000C14  6F99               	movwf	(main@prevSodaIR+1)& (0+255),b
  3499  000C16  0E00               	movlw	0
  3500  000C18  6F98               	movwf	main@prevSodaIR& (0+255),b
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;main.c: 540: if (prevSodaLoad == 0) {sodaSort = 0;}
  3504  000C1A  0100               	movlb	0	; () banked
  3505  000C1C  5192               	movf	main@prevSodaLoad& (0+255),w,b
  3506  000C1E  0100               	movlb	0	; () banked
  3507  000C20  1193               	iorwf	(main@prevSodaLoad+1)& (0+255),w,b
  3508  000C22  A4D8               	btfss	status,2,c
  3509  000C24  D00F               	goto	l6295
  3510                           
  3511                           ; BSR set to: 0
  3512  000C26  0E00               	movlw	0
  3513  000C28  0100               	movlb	0	; () banked
  3514  000C2A  6F97               	movwf	(main@sodaSort+1)& (0+255),b
  3515  000C2C  0E00               	movlw	0
  3516  000C2E  6F96               	movwf	main@sodaSort& (0+255),b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;main.c: 541: }
  3520                           ;main.c: 542: }
  3521                           
  3522                           ; BSR set to: 0
  3523                           
  3524                           ; BSR set to: 0
  3525                           
  3526                           ; BSR set to: 0
  3527                           
  3528                           ; BSR set to: 0
  3529                           
  3530                           ; BSR set to: 0
  3531                           
  3532                           ; BSR set to: 0
  3533                           
  3534                           ; BSR set to: 0
  3535  000C30  D009               	goto	l6295
  3536  000C32                     l6293:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;main.c: 543: else{
  3540                           ;main.c: 544: S3mode = 3;
  3541  000C32  0E00               	movlw	0
  3542  000C34  6E5B               	movwf	_S3mode+1,c
  3543  000C36  0E03               	movlw	3
  3544  000C38                     L9:
  3545  000C38  6E5A               	movwf	_S3mode,c
  3546                           
  3547                           ;main.c: 545: S2mode = 4;
  3548  000C3A  0E00               	movlw	0
  3549  000C3C  0100               	movlb	0	; () banked
  3550  000C3E  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3551  000C40  0E04               	movlw	4
  3552  000C42                     L5:
  3553  000C42  6FAB               	movwf	_S2mode& (0+255),b
  3554  000C44                     l6295:
  3555                           
  3556                           ;main.c: 546: }
  3557                           ;main.c: 549: if(seconds%12==10){PWM2(800,2);}
  3558  000C44  C05E  F015         	movff	_seconds,___awmod@dividend
  3559  000C48  C05F  F016         	movff	_seconds+1,___awmod@dividend+1
  3560  000C4C  0E00               	movlw	0
  3561  000C4E  6E18               	movwf	___awmod@divisor+1,c
  3562  000C50  0E0C               	movlw	12
  3563  000C52  6E17               	movwf	___awmod@divisor,c
  3564  000C54  ECA9  F010         	call	___awmod	;wreg free
  3565  000C58  0E0A               	movlw	10
  3566  000C5A  1815               	xorwf	?___awmod,w,c
  3567  000C5C  1016               	iorwf	?___awmod+1,w,c
  3568  000C5E  A4D8               	btfss	status,2,c
  3569  000C60  D00B               	goto	l6299
  3570  000C62  0E03               	movlw	3
  3571  000C64  6E16               	movwf	PWM2@duty+1,c
  3572  000C66  0E20               	movlw	32
  3573  000C68  6E15               	movwf	PWM2@duty,c
  3574  000C6A  0E00               	movlw	0
  3575  000C6C  6E18               	movwf	PWM2@dir+1,c
  3576  000C6E  0E02               	movlw	2
  3577  000C70  6E17               	movwf	PWM2@dir,c
  3578  000C72  EC6D  F010         	call	_PWM2	;wreg free
  3579  000C76  D018               	goto	l296
  3580  000C78                     l6299:
  3581                           
  3582                           ;main.c: 550: else if(seconds%12 == 0){PWM2(800, 1);}
  3583  000C78  C05E  F015         	movff	_seconds,___awmod@dividend
  3584  000C7C  C05F  F016         	movff	_seconds+1,___awmod@dividend+1
  3585  000C80  0E00               	movlw	0
  3586  000C82  6E18               	movwf	___awmod@divisor+1,c
  3587  000C84  0E0C               	movlw	12
  3588  000C86  6E17               	movwf	___awmod@divisor,c
  3589  000C88  ECA9  F010         	call	___awmod	;wreg free
  3590  000C8C  5015               	movf	?___awmod,w,c
  3591  000C8E  1016               	iorwf	?___awmod+1,w,c
  3592  000C90  A4D8               	btfss	status,2,c
  3593  000C92  D00A               	goto	l296
  3594  000C94  0E03               	movlw	3
  3595  000C96  6E16               	movwf	PWM2@duty+1,c
  3596  000C98  0E20               	movlw	32
  3597  000C9A  6E15               	movwf	PWM2@duty,c
  3598  000C9C  0E00               	movlw	0
  3599  000C9E  6E18               	movwf	PWM2@dir+1,c
  3600  000CA0  0E01               	movlw	1
  3601  000CA2  6E17               	movwf	PWM2@dir,c
  3602  000CA4  EC6D  F010         	call	_PWM2	;wreg free
  3603  000CA8                     l296:
  3604                           
  3605                           ;main.c: 552: keyinterrupt();
  3606  000CA8  ECF2  F012         	call	_keyinterrupt	;wreg free
  3607                           
  3608                           ;main.c: 553: }while( keypress==(0));
  3609  000CAC  5060               	movf	_keypress,w,c	;volatile
  3610  000CAE  B4D8               	btfsc	status,2,c
  3611  000CB0  D4F7               	goto	l6069
  3612                           
  3613                           ;main.c: 555: standby = 1;
  3614  000CB2  0E00               	movlw	0
  3615  000CB4  0100               	movlb	0	; () banked
  3616  000CB6  6F9D               	movwf	(main@standby+1)& (0+255),b
  3617  000CB8  0E01               	movlw	1
  3618  000CBA  6F9C               	movwf	main@standby& (0+255),b
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;main.c: 556: PWM2off();
  3622  000CBC  EC30  F013         	call	_PWM2off	;wreg free
  3623                           
  3624                           ;main.c: 557: PWM1off();
  3625  000CC0  EC35  F013         	call	_PWM1off	;wreg free
  3626                           
  3627                           ;main.c: 558: S1mode = 0;
  3628  000CC4  0E00               	movlw	0
  3629  000CC6  6E5D               	movwf	_S1mode+1,c
  3630  000CC8  0E00               	movlw	0
  3631  000CCA  6E5C               	movwf	_S1mode,c
  3632                           
  3633                           ;main.c: 559: S2mode = 0;
  3634  000CCC  0E00               	movlw	0
  3635  000CCE  0100               	movlb	0	; () banked
  3636  000CD0  6FAC               	movwf	(_S2mode+1)& (0+255),b
  3637  000CD2  0E00               	movlw	0
  3638  000CD4  6FAB               	movwf	_S2mode& (0+255),b
  3639                           
  3640                           ;main.c: 560: S3mode = 0;
  3641  000CD6  0E00               	movlw	0
  3642  000CD8  6E5B               	movwf	_S3mode+1,c
  3643  000CDA  0E00               	movlw	0
  3644  000CDC  6E5A               	movwf	_S3mode,c
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;main.c: 562: updateTime();
  3648  000CDE  EC19  F011         	call	_updateTime	;wreg free
  3649                           
  3650                           ;main.c: 563: addRun(seconds, time[6], time[5], time[4], time[2], time[1], time[0], soda
      +                          T, sodaNT, soupL, soupNL);
  3651  000CE2  C05E  F019         	movff	_seconds,addRun@dur
  3652  000CE6  C05F  F01A         	movff	_seconds+1,addRun@dur+1
  3653  000CEA  C0A4  F01B         	movff	_time+6,addRun@year
  3654  000CEE  6A1C               	clrf	addRun@year+1,c
  3655  000CF0  C0A3  F01D         	movff	_time+5,addRun@month
  3656  000CF4  6A1E               	clrf	addRun@month+1,c
  3657  000CF6  C0A2  F01F         	movff	_time+4,addRun@date
  3658  000CFA  6A20               	clrf	addRun@date+1,c
  3659  000CFC  C0A0  F021         	movff	_time+2,addRun@hours
  3660  000D00  6A22               	clrf	addRun@hours+1,c
  3661  000D02  C09F  F023         	movff	_time+1,addRun@mins
  3662  000D06  6A24               	clrf	addRun@mins+1,c
  3663  000D08  C09E  F025         	movff	_time,addRun@secs
  3664  000D0C  6A26               	clrf	addRun@secs+1,c
  3665  000D0E  C08C  F027         	movff	main@sodaT,addRun@sodaT
  3666  000D12  C08D  F028         	movff	main@sodaT+1,addRun@sodaT+1
  3667  000D16  C08E  F029         	movff	main@sodaNT,addRun@sodaNT
  3668  000D1A  C08F  F02A         	movff	main@sodaNT+1,addRun@sodaNT+1
  3669  000D1E  C088  F02B         	movff	main@soupL,addRun@soupL
  3670  000D22  C089  F02C         	movff	main@soupL+1,addRun@soupL+1
  3671  000D26  C08A  F02D         	movff	main@soupNL,addRun@soupNL
  3672  000D2A  C08B  F02E         	movff	main@soupNL+1,addRun@soupNL+1
  3673  000D2E  EC57  F00F         	call	_addRun	;wreg free
  3674                           
  3675                           ;main.c: 565: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  3676  000D32  0E01               	movlw	1
  3677  000D34  EC25  F013         	call	_lcdInst
  3678  000D38  0E34               	movlw	52
  3679  000D3A  6E40               	movwf	??_main& (0+255),c
  3680  000D3C  0EF2               	movlw	242
  3681  000D3E                     u7817:
  3682  000D3E  2EE8               	decfsz	wreg,f,c
  3683  000D40  D7FE               	bra	u7817
  3684  000D42  2E40               	decfsz	??_main& (0+255),f,c
  3685  000D44  D7FC               	bra	u7817
  3686                           
  3687                           ;main.c: 566: printf("Sort done! A:No");
  3688  000D46  0E0C               	movlw	low STR_34
  3689  000D48  6E21               	movwf	printf@f,c
  3690  000D4A  0EFF               	movlw	high STR_34
  3691  000D4C  6E22               	movwf	printf@f+1,c
  3692  000D4E  EC6F  F008         	call	_printf	;wreg free
  3693                           
  3694                           ;main.c: 567: lcdInst(0b11000000);;
  3695  000D52  0EC0               	movlw	192
  3696  000D54  EC25  F013         	call	_lcdInst
  3697                           
  3698                           ;main.c: 568: printf("View Logs? B:Yes");
  3699  000D58  0E8B               	movlw	low STR_35
  3700  000D5A  6E21               	movwf	printf@f,c
  3701  000D5C  0EFE               	movlw	high STR_35
  3702  000D5E  6E22               	movwf	printf@f+1,c
  3703  000D60  EC6F  F008         	call	_printf	;wreg free
  3704                           
  3705                           ;main.c: 569: keycheck();
  3706  000D64  ECFC  F012         	call	_keycheck	;wreg free
  3707                           
  3708                           ;main.c: 570: if(keypress == 7){
  3709  000D68  0E07               	movlw	7
  3710  000D6A  1860               	xorwf	_keypress,w,c	;volatile
  3711  000D6C  A4D8               	btfss	status,2,c
  3712  000D6E  EF37  F000         	goto	l5765
  3713                           
  3714                           ;main.c: 571: displayLog(1);
  3715  000D72  0E00               	movlw	0
  3716  000D74  6E38               	movwf	displayLog@run+1,c
  3717  000D76  0E01               	movlw	1
  3718  000D78  6E37               	movwf	displayLog@run,c
  3719  000D7A  ECC1  F006         	call	_displayLog	;wreg free
  3720  000D7E  EF37  F000         	goto	l5765
  3721  000D82                     __end_of_main:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           postinc0	equ	0xFEE
  3725                           wreg	equ	0xFE8
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function _updateTime *****************
  3729 ;; Defined at:
  3730 ;;		line 89 in file "I2C.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  j               1   23[COMRAM] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;Total ram usage:        1 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    4
  3751 ;; This function calls:
  3752 ;;		_I2C_Master_Read
  3753 ;;		_I2C_Master_Start
  3754 ;;		_I2C_Master_Stop
  3755 ;;		_I2C_Master_Write
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text1
  3762  002232                     __ptext1:
  3763                           	opt stack 0
  3764  002232                     _updateTime:
  3765                           	opt stack 26
  3766                           
  3767                           ;I2C.c: 91: I2C_Master_Start();
  3768                           
  3769                           ;incstack = 0
  3770  002232  EC3E  F013         	call	_I2C_Master_Start	;wreg free
  3771                           
  3772                           ;I2C.c: 92: I2C_Master_Write(0b11010000);
  3773  002236  0E00               	movlw	0
  3774  002238  6E17               	movwf	I2C_Master_Write@d+1,c
  3775  00223A  0ED0               	movlw	208
  3776  00223C  6E16               	movwf	I2C_Master_Write@d,c
  3777  00223E  EC2B  F013         	call	_I2C_Master_Write	;wreg free
  3778                           
  3779                           ;I2C.c: 93: I2C_Master_Write(0x00);
  3780  002242  0E00               	movlw	0
  3781  002244  6E17               	movwf	I2C_Master_Write@d+1,c
  3782  002246  0E00               	movlw	0
  3783  002248  6E16               	movwf	I2C_Master_Write@d,c
  3784  00224A  EC2B  F013         	call	_I2C_Master_Write	;wreg free
  3785                           
  3786                           ;I2C.c: 94: I2C_Master_Stop();
  3787  00224E  EC3A  F013         	call	_I2C_Master_Stop	;wreg free
  3788                           
  3789                           ;I2C.c: 97: I2C_Master_Start();
  3790  002252  EC3E  F013         	call	_I2C_Master_Start	;wreg free
  3791                           
  3792                           ;I2C.c: 98: I2C_Master_Write(0b11010001);
  3793  002256  0E00               	movlw	0
  3794  002258  6E17               	movwf	I2C_Master_Write@d+1,c
  3795  00225A  0ED1               	movlw	209
  3796  00225C  6E16               	movwf	I2C_Master_Write@d,c
  3797  00225E  EC2B  F013         	call	_I2C_Master_Write	;wreg free
  3798                           
  3799                           ;I2C.c: 99: for(unsigned char j=0;j<0x06;j++){
  3800  002262  0E00               	movlw	0
  3801  002264  6E18               	movwf	updateTime@j,c
  3802  002266                     l5463:
  3803  002266  0E05               	movlw	5
  3804  002268  6418               	cpfsgt	updateTime@j,c
  3805  00226A  D001               	goto	l5467
  3806  00226C  D00E               	goto	l5473
  3807  00226E                     l5467:
  3808                           
  3809                           ;I2C.c: 100: time[j] = I2C_Master_Read(1);
  3810  00226E  5018               	movf	updateTime@j,w,c
  3811  002270  0D01               	mullw	1
  3812  002272  0E9E               	movlw	low _time
  3813  002274  24F3               	addwf	prodl,w,c
  3814  002276  6ED9               	movwf	fsr2l,c
  3815  002278  0E00               	movlw	high _time
  3816  00227A  20F4               	addwfc	prodh,w,c
  3817  00227C  6EDA               	movwf	fsr2h,c
  3818  00227E  0E01               	movlw	1
  3819  002280  ECAB  F012         	call	_I2C_Master_Read
  3820  002284  6EDF               	movwf	indf2,c
  3821  002286  2A18               	incf	updateTime@j,f,c
  3822  002288  D7EE               	goto	l5463
  3823  00228A                     l5473:
  3824                           
  3825                           ;I2C.c: 101: }
  3826                           ;I2C.c: 102: time[6] = I2C_Master_Read(0);
  3827  00228A  0E00               	movlw	0
  3828  00228C  ECAB  F012         	call	_I2C_Master_Read
  3829  002290  0100               	movlb	0	; () banked
  3830  002292  6FA4               	movwf	(_time+6)& (0+255),b
  3831                           
  3832                           ;I2C.c: 103: I2C_Master_Stop();
  3833  002294  EC3A  F013         	call	_I2C_Master_Stop	;wreg free
  3834  002298  0012               	return		;funcret
  3835  00229A                     __end_of_updateTime:
  3836                           	opt stack 0
  3837                           tblptru	equ	0xFF8
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           indf2	equ	0xFDF
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _I2C_Master_Write *****************
  3848 ;; Defined at:
  3849 ;;		line 54 in file "I2C.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  d               2   21[COMRAM] unsigned int 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3863 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;Total ram usage:        2 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    3
  3870 ;; This function calls:
  3871 ;;		_I2C_Master_Wait
  3872 ;; This function is called by:
  3873 ;;		_updateTime
  3874 ;;		_set_time
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text2
  3879  002656                     __ptext2:
  3880                           	opt stack 0
  3881  002656                     _I2C_Master_Write:
  3882                           	opt stack 26
  3883                           
  3884                           ;I2C.c: 56: I2C_Master_Wait();
  3885                           
  3886                           ;incstack = 0
  3887  002656  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3888                           
  3889                           ;I2C.c: 57: SSPBUF = d;
  3890  00265A  C016  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3891  00265E  0012               	return		;funcret
  3892  002660                     __end_of_I2C_Master_Write:
  3893                           	opt stack 0
  3894                           tblptru	equ	0xFF8
  3895                           prodh	equ	0xFF4
  3896                           prodl	equ	0xFF3
  3897                           postinc0	equ	0xFEE
  3898                           wreg	equ	0xFE8
  3899                           indf2	equ	0xFDF
  3900                           fsr2h	equ	0xFDA
  3901                           fsr2l	equ	0xFD9
  3902                           status	equ	0xFD8
  3903                           
  3904 ;; *************** function _I2C_Master_Stop *****************
  3905 ;; Defined at:
  3906 ;;		line 48 in file "I2C.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;Total ram usage:        0 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    3
  3927 ;; This function calls:
  3928 ;;		_I2C_Master_Wait
  3929 ;; This function is called by:
  3930 ;;		_updateTime
  3931 ;;		_set_time
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text3
  3936  002674                     __ptext3:
  3937                           	opt stack 0
  3938  002674                     _I2C_Master_Stop:
  3939                           	opt stack 26
  3940                           
  3941                           ;I2C.c: 50: I2C_Master_Wait();
  3942                           
  3943                           ;incstack = 0
  3944  002674  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3945                           
  3946                           ;I2C.c: 51: PEN = 1;
  3947  002678  84C5               	bsf	4037,2,c	;volatile
  3948  00267A  0012               	return		;funcret
  3949  00267C                     __end_of_I2C_Master_Stop:
  3950                           	opt stack 0
  3951                           tblptru	equ	0xFF8
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf2	equ	0xFDF
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _I2C_Master_Start *****************
  3962 ;; Defined at:
  3963 ;;		line 36 in file "I2C.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      void 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        0 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    3
  3984 ;; This function calls:
  3985 ;;		_I2C_Master_Wait
  3986 ;; This function is called by:
  3987 ;;		_updateTime
  3988 ;;		_set_time
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text4
  3993  00267C                     __ptext4:
  3994                           	opt stack 0
  3995  00267C                     _I2C_Master_Start:
  3996                           	opt stack 26
  3997                           
  3998                           ;I2C.c: 38: I2C_Master_Wait();
  3999                           
  4000                           ;incstack = 0
  4001  00267C  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  4002                           
  4003                           ;I2C.c: 39: SEN = 1;
  4004  002680  80C5               	bsf	4037,0,c	;volatile
  4005  002682  0012               	return		;funcret
  4006  002684                     __end_of_I2C_Master_Start:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           postinc0	equ	0xFEE
  4012                           wreg	equ	0xFE8
  4013                           indf2	equ	0xFDF
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _I2C_Master_Read *****************
  4019 ;; Defined at:
  4020 ;;		line 60 in file "I2C.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  a               1    wreg     unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  a               1   21[COMRAM] unsigned char 
  4025 ;;  temp            1   22[COMRAM] unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      unsigned char 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;Total ram usage:        2 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    3
  4042 ;; This function calls:
  4043 ;;		_I2C_Master_Wait
  4044 ;; This function is called by:
  4045 ;;		_updateTime
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text5
  4050  002556                     __ptext5:
  4051                           	opt stack 0
  4052  002556                     _I2C_Master_Read:
  4053                           	opt stack 26
  4054                           
  4055                           ;incstack = 0
  4056                           ;I2C_Master_Read@a stored from wreg
  4057  002556  6E16               	movwf	I2C_Master_Read@a,c
  4058                           
  4059                           ;I2C.c: 62: unsigned char temp;
  4060                           ;I2C.c: 63: I2C_Master_Wait();
  4061  002558  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  4062                           
  4063                           ;I2C.c: 64: RCEN = 1;
  4064  00255C  86C5               	bsf	4037,3,c	;volatile
  4065                           
  4066                           ;I2C.c: 65: I2C_Master_Wait();
  4067  00255E  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  4068                           
  4069                           ;I2C.c: 66: temp = SSPBUF;
  4070  002562  CFC9 F017          	movff	4041,I2C_Master_Read@temp	;volatile
  4071                           
  4072                           ;I2C.c: 67: I2C_Master_Wait();
  4073  002566  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  4074                           
  4075                           ;I2C.c: 68: ACKDT = (a)?0:1;
  4076  00256A  5016               	movf	I2C_Master_Read@a,w,c
  4077  00256C  A4D8               	btfss	status,2,c
  4078  00256E  D002               	goto	u6570
  4079  002570  8AC5               	bsf	4037,5,c	;volatile
  4080  002572  D001               	goto	l5397
  4081  002574                     u6570:
  4082  002574  9AC5               	bcf	4037,5,c	;volatile
  4083  002576                     l5397:
  4084                           
  4085                           ;I2C.c: 69: ACKEN = 1;
  4086  002576  88C5               	bsf	4037,4,c	;volatile
  4087                           
  4088                           ;I2C.c: 70: return temp;
  4089  002578  5017               	movf	I2C_Master_Read@temp,w,c
  4090  00257A  0012               	return	
  4091  00257C                     __end_of_I2C_Master_Read:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           prodh	equ	0xFF4
  4095                           prodl	equ	0xFF3
  4096                           postinc0	equ	0xFEE
  4097                           wreg	equ	0xFE8
  4098                           indf2	equ	0xFDF
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _I2C_Master_Wait *****************
  4104 ;; Defined at:
  4105 ;;		line 31 in file "I2C.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;Total ram usage:        1 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    2
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_I2C_Master_Start
  4130 ;;		_I2C_Master_Stop
  4131 ;;		_I2C_Master_Write
  4132 ;;		_I2C_Master_Read
  4133 ;;		_I2C_Master_RepeatedStart
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text6
  4138  00260C                     __ptext6:
  4139                           	opt stack 0
  4140  00260C                     _I2C_Master_Wait:
  4141                           	opt stack 26
  4142  00260C                     l362:
  4143  00260C  B4C7               	btfsc	4039,2,c	;volatile
  4144  00260E  D7FE               	goto	l362
  4145  002610  CFC5 F015          	movff	4037,??_I2C_Master_Wait	;volatile
  4146  002614  0E1F               	movlw	31
  4147  002616  1615               	andwf	??_I2C_Master_Wait,f,c
  4148  002618  B4D8               	btfsc	status,2,c
  4149  00261A  0012               	return	
  4150  00261C  D7F7               	goto	l362
  4151  00261E                     __end_of_I2C_Master_Wait:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           prodh	equ	0xFF4
  4155                           prodl	equ	0xFF3
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           indf2	equ	0xFDF
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _keyinterrupt *****************
  4164 ;; Defined at:
  4165 ;;		line 19 in file "interface.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;Total ram usage:        0 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    2
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text7
  4194  0025E4                     __ptext7:
  4195                           	opt stack 0
  4196  0025E4                     _keyinterrupt:
  4197                           	opt stack 28
  4198                           
  4199                           ;interface.c: 20: if(PORTBbits.RB1 == 1){
  4200                           
  4201                           ;incstack = 0
  4202  0025E4  A281               	btfss	3969,1,c	;volatile
  4203  0025E6  D006               	goto	l620
  4204                           
  4205                           ;interface.c: 21: keypress = (PORTB & 0xF0)>>4;
  4206  0025E8  3881               	swapf	3969,w,c	;volatile
  4207  0025EA  0B0F               	andlw	15
  4208  0025EC  0B0F               	andlw	15
  4209  0025EE  6E60               	movwf	_keypress,c	;volatile
  4210  0025F0                     l621:
  4211  0025F0  B281               	btfsc	3969,1,c	;volatile
  4212  0025F2  D7FE               	goto	l621
  4213  0025F4                     l620:
  4214                           
  4215                           ;interface.c: 23: }
  4216                           ;interface.c: 24: __nop();
  4217  0025F4  F000               	nop	
  4218  0025F6  0012               	return		;funcret
  4219  0025F8                     __end_of_keyinterrupt:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           prodh	equ	0xFF4
  4223                           prodl	equ	0xFF3
  4224                           postinc0	equ	0xFEE
  4225                           wreg	equ	0xFE8
  4226                           indf2	equ	0xFDF
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function _initialize *****************
  4232 ;; Defined at:
  4233 ;;		line 86 in file "main.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		_I2C_Master_Init
  4256 ;;		_initLCD
  4257 ;; This function is called by:
  4258 ;;		_main
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text8
  4263  002062                     __ptext8:
  4264                           	opt stack 0
  4265  002062                     _initialize:
  4266                           	opt stack 25
  4267                           
  4268                           ;main.c: 88: OSCCON = 0xF0;
  4269                           
  4270                           ;incstack = 0
  4271  002062  0EF0               	movlw	240
  4272  002064  6ED3               	movwf	4051,c	;volatile
  4273                           
  4274                           ;main.c: 89: OSCTUNEbits.PLLEN = 1;
  4275  002066  8C9B               	bsf	3995,6,c	;volatile
  4276                           
  4277                           ;main.c: 91: TRISA = 0b00101111;
  4278  002068  0E2F               	movlw	47
  4279  00206A  6E92               	movwf	3986,c	;volatile
  4280                           
  4281                           ;main.c: 92: TRISB = 0b11110010;
  4282  00206C  0EF2               	movlw	242
  4283  00206E  6E93               	movwf	3987,c	;volatile
  4284                           
  4285                           ;main.c: 93: TRISC = 0b00000000;
  4286  002070  0E00               	movlw	0
  4287  002072  6E94               	movwf	3988,c	;volatile
  4288                           
  4289                           ;main.c: 95: TRISD = 0x00;
  4290  002074  0E00               	movlw	0
  4291  002076  6E95               	movwf	3989,c	;volatile
  4292                           
  4293                           ;main.c: 96: TRISE = 0b00000001;
  4294  002078  0E01               	movlw	1
  4295  00207A  6E96               	movwf	3990,c	;volatile
  4296                           
  4297                           ;main.c: 98: PR2 = 0xff;
  4298  00207C  68CB               	setf	4043,c	;volatile
  4299                           
  4300                           ;main.c: 99: CCP1CON = 0b00001100;
  4301  00207E  0E0C               	movlw	12
  4302  002080  6EBD               	movwf	4029,c	;volatile
  4303                           
  4304                           ;main.c: 100: CCPR1L = 0x00;
  4305  002082  0E00               	movlw	0
  4306  002084  6EBE               	movwf	4030,c	;volatile
  4307                           
  4308                           ;main.c: 101: CCP2CON = 0b00001100;
  4309  002086  0E0C               	movlw	12
  4310  002088  6EBA               	movwf	4026,c	;volatile
  4311                           
  4312                           ;main.c: 102: CCPR2L = 0x00;
  4313  00208A  0E00               	movlw	0
  4314  00208C  6EBB               	movwf	4027,c	;volatile
  4315                           
  4316                           ;main.c: 103: T2CON = 0b00000101;
  4317  00208E  0E05               	movlw	5
  4318  002090  6ECA               	movwf	4042,c	;volatile
  4319                           
  4320                           ;main.c: 105: LATA = 0x00;
  4321  002092  0E00               	movlw	0
  4322  002094  6E89               	movwf	3977,c	;volatile
  4323                           
  4324                           ;main.c: 106: LATB = 0x00;
  4325  002096  0E00               	movlw	0
  4326  002098  6E8A               	movwf	3978,c	;volatile
  4327                           
  4328                           ;main.c: 107: LATC = 0x00;
  4329  00209A  0E00               	movlw	0
  4330  00209C  6E8B               	movwf	3979,c	;volatile
  4331                           
  4332                           ;main.c: 108: LATD = 0x00;
  4333  00209E  0E00               	movlw	0
  4334  0020A0  6E8C               	movwf	3980,c	;volatile
  4335                           
  4336                           ;main.c: 109: LATE = 0x00;
  4337  0020A2  0E00               	movlw	0
  4338  0020A4  6E8D               	movwf	3981,c	;volatile
  4339                           
  4340                           ;main.c: 111: initLCD();
  4341  0020A6  EC24  F012         	call	_initLCD	;wreg free
  4342                           
  4343                           ;main.c: 113: I2C_Master_Init(32000);
  4344  0020AA  0E00               	movlw	0
  4345  0020AC  6E22               	movwf	I2C_Master_Init@c,c
  4346  0020AE  0E7D               	movlw	125
  4347  0020B0  6E23               	movwf	I2C_Master_Init@c+1,c
  4348  0020B2  0E00               	movlw	0
  4349  0020B4  6E24               	movwf	I2C_Master_Init@c+2,c
  4350  0020B6  0E00               	movlw	0
  4351  0020B8  6E25               	movwf	I2C_Master_Init@c+3,c
  4352  0020BA  EC7E  F011         	call	_I2C_Master_Init	;wreg free
  4353                           
  4354                           ;main.c: 116: nRBPU = 0;
  4355  0020BE  9EF1               	bcf	intcon2,7,c	;volatile
  4356                           
  4357                           ;main.c: 118: ADCON1 = 0b00001001;
  4358  0020C0  0E09               	movlw	9
  4359  0020C2  6EC1               	movwf	4033,c	;volatile
  4360                           
  4361                           ;main.c: 119: ADCON2 = 0b10001001;
  4362  0020C4  0E89               	movlw	137
  4363  0020C6  6EC0               	movwf	4032,c	;volatile
  4364                           
  4365                           ;main.c: 120: CVRCON = 0x00;
  4366  0020C8  0E00               	movlw	0
  4367  0020CA  6EB5               	movwf	4021,c	;volatile
  4368                           
  4369                           ;main.c: 121: CMCONbits.CIS = 0;
  4370  0020CC  96B4               	bcf	4020,3,c	;volatile
  4371                           
  4372                           ;main.c: 122: ADFM = 1;
  4373  0020CE  8EC0               	bsf	4032,7,c	;volatile
  4374                           
  4375                           ;main.c: 124: TMR0IE = 1;
  4376  0020D0  8AF2               	bsf	intcon,5,c	;volatile
  4377                           
  4378                           ;main.c: 125: TMR1IE = 1;
  4379  0020D2  809D               	bsf	3997,0,c	;volatile
  4380                           
  4381                           ;main.c: 127: PEIE = 1;
  4382  0020D4  8CF2               	bsf	intcon,6,c	;volatile
  4383                           
  4384                           ;main.c: 129: (INTCONbits.GIE = 1);
  4385  0020D6  8EF2               	bsf	intcon,7,c	;volatile
  4386  0020D8  0012               	return		;funcret
  4387  0020DA                     __end_of_initialize:
  4388                           	opt stack 0
  4389                           tblptru	equ	0xFF8
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           intcon2	equ	0xFF1
  4394                           postinc0	equ	0xFEE
  4395                           wreg	equ	0xFE8
  4396                           indf2	equ	0xFDF
  4397                           fsr2h	equ	0xFDA
  4398                           fsr2l	equ	0xFD9
  4399                           status	equ	0xFD8
  4400                           
  4401 ;; *************** function _initLCD *****************
  4402 ;; Defined at:
  4403 ;;		line 11 in file "lcd.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;		None
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;		None
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  1    wreg      void 
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;Total ram usage:        1 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    4
  4424 ;; This function calls:
  4425 ;;		_lcdInst
  4426 ;; This function is called by:
  4427 ;;		_initialize
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           	psect	text9
  4432  002448                     __ptext9:
  4433                           	opt stack 0
  4434  002448                     _initLCD:
  4435                           	opt stack 25
  4436                           
  4437                           ;lcd.c: 12: _delay((unsigned long)((15)*(32000000/4000.0)));
  4438                           
  4439                           ;incstack = 0
  4440  002448  0E9C               	movlw	156
  4441  00244A  6E18               	movwf	??_initLCD& (0+255),c
  4442  00244C  0ED7               	movlw	215
  4443  00244E                     u7827:
  4444  00244E  2EE8               	decfsz	wreg,f,c
  4445  002450  D7FE               	bra	u7827
  4446  002452  2E18               	decfsz	??_initLCD& (0+255),f,c
  4447  002454  D7FC               	bra	u7827
  4448  002456  F000               	nop	
  4449                           
  4450                           ;lcd.c: 13: lcdInst(0b00110011);
  4451  002458  0E33               	movlw	51
  4452  00245A  EC25  F013         	call	_lcdInst
  4453                           
  4454                           ;lcd.c: 14: lcdInst(0b00110010);
  4455  00245E  0E32               	movlw	50
  4456  002460  EC25  F013         	call	_lcdInst
  4457                           
  4458                           ;lcd.c: 15: lcdInst(0b00101000);
  4459  002464  0E28               	movlw	40
  4460  002466  EC25  F013         	call	_lcdInst
  4461                           
  4462                           ;lcd.c: 16: lcdInst(0b00001111);
  4463  00246A  0E0F               	movlw	15
  4464  00246C  EC25  F013         	call	_lcdInst
  4465                           
  4466                           ;lcd.c: 17: lcdInst(0b00000110);
  4467  002470  0E06               	movlw	6
  4468  002472  EC25  F013         	call	_lcdInst
  4469                           
  4470                           ;lcd.c: 18: lcdInst(0b00000001);
  4471  002476  0E01               	movlw	1
  4472  002478  EC25  F013         	call	_lcdInst
  4473                           
  4474                           ;lcd.c: 19: _delay((unsigned long)((15)*(32000000/4000.0)));
  4475  00247C  0E9C               	movlw	156
  4476  00247E  6E18               	movwf	??_initLCD& (0+255),c
  4477  002480  0ED7               	movlw	215
  4478  002482                     u7837:
  4479  002482  2EE8               	decfsz	wreg,f,c
  4480  002484  D7FE               	bra	u7837
  4481  002486  2E18               	decfsz	??_initLCD& (0+255),f,c
  4482  002488  D7FC               	bra	u7837
  4483  00248A  F000               	nop	
  4484  00248C  0012               	return		;funcret
  4485  00248E                     __end_of_initLCD:
  4486                           	opt stack 0
  4487                           tblptru	equ	0xFF8
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           intcon2	equ	0xFF1
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           indf2	equ	0xFDF
  4495                           fsr2h	equ	0xFDA
  4496                           fsr2l	equ	0xFD9
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function _I2C_Master_Init *****************
  4500 ;; Defined at:
  4501 ;;		line 20 in file "I2C.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  c               4   33[COMRAM] const unsigned long 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4515 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;Total ram usage:        8 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    3
  4522 ;; This function calls:
  4523 ;;		___lldiv
  4524 ;; This function is called by:
  4525 ;;		_initialize
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text10
  4530  0022FC                     __ptext10:
  4531                           	opt stack 0
  4532  0022FC                     _I2C_Master_Init:
  4533                           	opt stack 26
  4534                           
  4535                           ;I2C.c: 23: SSPSTAT = 0b00000000;
  4536                           
  4537                           ;incstack = 0
  4538  0022FC  0E00               	movlw	0
  4539  0022FE  6EC7               	movwf	4039,c	;volatile
  4540                           
  4541                           ;I2C.c: 24: SSPCON1 = 0b00101000;
  4542  002300  0E28               	movlw	40
  4543  002302  6EC6               	movwf	4038,c	;volatile
  4544                           
  4545                           ;I2C.c: 25: SSPCON2 = 0b00000000;
  4546  002304  0E00               	movlw	0
  4547  002306  6EC5               	movwf	4037,c	;volatile
  4548                           
  4549                           ;I2C.c: 26: SSPADD = (32000000/(4*c))-1;
  4550  002308  0E00               	movlw	0
  4551  00230A  6E15               	movwf	___lldiv@dividend,c
  4552  00230C  0E48               	movlw	72
  4553  00230E  6E16               	movwf	___lldiv@dividend+1,c
  4554  002310  0EE8               	movlw	232
  4555  002312  6E17               	movwf	___lldiv@dividend+2,c
  4556  002314  0E01               	movlw	1
  4557  002316  6E18               	movwf	___lldiv@dividend+3,c
  4558  002318  C022  F026         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4559  00231C  C023  F027         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4560  002320  C024  F028         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4561  002324  C025  F029         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4562  002328  0E02               	movlw	2
  4563  00232A                     u6305:
  4564  00232A  90D8               	bcf	status,0,c
  4565  00232C  3626               	rlcf	??_I2C_Master_Init,f,c
  4566  00232E  3627               	rlcf	??_I2C_Master_Init+1,f,c
  4567  002330  3628               	rlcf	??_I2C_Master_Init+2,f,c
  4568  002332  3629               	rlcf	??_I2C_Master_Init+3,f,c
  4569  002334  2EE8               	decfsz	wreg,f,c
  4570  002336  D7F9               	goto	u6305
  4571  002338  C026  F019         	movff	??_I2C_Master_Init,___lldiv@divisor
  4572  00233C  C027  F01A         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4573  002340  C028  F01B         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4574  002344  C029  F01C         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4575  002348  ECF0  F00F         	call	___lldiv	;wreg free
  4576  00234C  0415               	decf	?___lldiv,w,c
  4577  00234E  6EC8               	movwf	4040,c	;volatile
  4578                           
  4579                           ;I2C.c: 27: TRISC3 = 1;
  4580  002350  8694               	bsf	3988,3,c	;volatile
  4581                           
  4582                           ;I2C.c: 28: TRISC4 = 1;
  4583  002352  8894               	bsf	3988,4,c	;volatile
  4584  002354  0012               	return		;funcret
  4585  002356                     __end_of_I2C_Master_Init:
  4586                           	opt stack 0
  4587                           tblptru	equ	0xFF8
  4588                           prodh	equ	0xFF4
  4589                           prodl	equ	0xFF3
  4590                           intcon	equ	0xFF2
  4591                           intcon2	equ	0xFF1
  4592                           postinc0	equ	0xFEE
  4593                           wreg	equ	0xFE8
  4594                           indf2	equ	0xFDF
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function ___lldiv *****************
  4600 ;; Defined at:
  4601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  dividend        4   20[COMRAM] unsigned long 
  4604 ;;  divisor         4   24[COMRAM] unsigned long 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  quotient        4   28[COMRAM] unsigned long 
  4607 ;;  counter         1   32[COMRAM] unsigned char 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  4   20[COMRAM] unsigned long 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4617 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;Total ram usage:       13 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    2
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_I2C_Master_Init
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text11
  4632  001FE0                     __ptext11:
  4633                           	opt stack 0
  4634  001FE0                     ___lldiv:
  4635                           	opt stack 26
  4636                           
  4637                           ;incstack = 0
  4638  001FE0  0E00               	movlw	0
  4639  001FE2  6E1D               	movwf	___lldiv@quotient,c
  4640  001FE4  0E00               	movlw	0
  4641  001FE6  6E1E               	movwf	___lldiv@quotient+1,c
  4642  001FE8  0E00               	movlw	0
  4643  001FEA  6E1F               	movwf	___lldiv@quotient+2,c
  4644  001FEC  0E00               	movlw	0
  4645  001FEE  6E20               	movwf	___lldiv@quotient+3,c
  4646  001FF0  5019               	movf	___lldiv@divisor,w,c
  4647  001FF2  101A               	iorwf	___lldiv@divisor+1,w,c
  4648  001FF4  101B               	iorwf	___lldiv@divisor+2,w,c
  4649  001FF6  101C               	iorwf	___lldiv@divisor+3,w,c
  4650  001FF8  B4D8               	btfsc	status,2,c
  4651  001FFA  D02A               	goto	l1145
  4652  001FFC  0E01               	movlw	1
  4653  001FFE  6E21               	movwf	___lldiv@counter,c
  4654  002000  D006               	goto	l4995
  4655  002002                     l4993:
  4656  002002  90D8               	bcf	status,0,c
  4657  002004  3619               	rlcf	___lldiv@divisor,f,c
  4658  002006  361A               	rlcf	___lldiv@divisor+1,f,c
  4659  002008  361B               	rlcf	___lldiv@divisor+2,f,c
  4660  00200A  361C               	rlcf	___lldiv@divisor+3,f,c
  4661  00200C  2A21               	incf	___lldiv@counter,f,c
  4662  00200E                     l4995:
  4663  00200E  AE1C               	btfss	___lldiv@divisor+3,7,c
  4664  002010  D7F8               	goto	l4993
  4665  002012                     l4997:
  4666  002012  90D8               	bcf	status,0,c
  4667  002014  361D               	rlcf	___lldiv@quotient,f,c
  4668  002016  361E               	rlcf	___lldiv@quotient+1,f,c
  4669  002018  361F               	rlcf	___lldiv@quotient+2,f,c
  4670  00201A  3620               	rlcf	___lldiv@quotient+3,f,c
  4671  00201C  5019               	movf	___lldiv@divisor,w,c
  4672  00201E  5C15               	subwf	___lldiv@dividend,w,c
  4673  002020  501A               	movf	___lldiv@divisor+1,w,c
  4674  002022  5816               	subwfb	___lldiv@dividend+1,w,c
  4675  002024  501B               	movf	___lldiv@divisor+2,w,c
  4676  002026  5817               	subwfb	___lldiv@dividend+2,w,c
  4677  002028  501C               	movf	___lldiv@divisor+3,w,c
  4678  00202A  5818               	subwfb	___lldiv@dividend+3,w,c
  4679  00202C  A0D8               	btfss	status,0,c
  4680  00202E  D009               	goto	l5005
  4681  002030  5019               	movf	___lldiv@divisor,w,c
  4682  002032  5E15               	subwf	___lldiv@dividend,f,c
  4683  002034  501A               	movf	___lldiv@divisor+1,w,c
  4684  002036  5A16               	subwfb	___lldiv@dividend+1,f,c
  4685  002038  501B               	movf	___lldiv@divisor+2,w,c
  4686  00203A  5A17               	subwfb	___lldiv@dividend+2,f,c
  4687  00203C  501C               	movf	___lldiv@divisor+3,w,c
  4688  00203E  5A18               	subwfb	___lldiv@dividend+3,f,c
  4689  002040  801D               	bsf	___lldiv@quotient,0,c
  4690  002042                     l5005:
  4691  002042  90D8               	bcf	status,0,c
  4692  002044  321C               	rrcf	___lldiv@divisor+3,f,c
  4693  002046  321B               	rrcf	___lldiv@divisor+2,f,c
  4694  002048  321A               	rrcf	___lldiv@divisor+1,f,c
  4695  00204A  3219               	rrcf	___lldiv@divisor,f,c
  4696  00204C  2E21               	decfsz	___lldiv@counter,f,c
  4697  00204E  D7E1               	goto	l4997
  4698  002050                     l1145:
  4699  002050  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  4700  002054  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  4701  002058  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  4702  00205C  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  4703  002060  0012               	return		;funcret
  4704  002062                     __end_of___lldiv:
  4705                           	opt stack 0
  4706                           tblptru	equ	0xFF8
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           indf2	equ	0xFDF
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _homescreen *****************
  4719 ;; Defined at:
  4720 ;;		line 3 in file "interface.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    5
  4741 ;; This function calls:
  4742 ;;		_lcdInst
  4743 ;;		_printf
  4744 ;; This function is called by:
  4745 ;;		_main
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text12
  4750  00229A                     __ptext12:
  4751                           	opt stack 0
  4752  00229A                     _homescreen:
  4753                           	opt stack 25
  4754                           
  4755                           ;interface.c: 4: lcdInst(0b10000000);;
  4756                           
  4757                           ;incstack = 0
  4758  00229A  0E80               	movlw	128
  4759  00229C  EC25  F013         	call	_lcdInst
  4760                           
  4761                           ;interface.c: 5: printf("%02x/%02x/%02x ", time[6],time[5],time[4]);
  4762  0022A0  0E9C               	movlw	low STR_36
  4763  0022A2  6E21               	movwf	printf@f,c
  4764  0022A4  0EFE               	movlw	high STR_36
  4765  0022A6  6E22               	movwf	printf@f+1,c
  4766  0022A8  C0A4  F023         	movff	_time+6,?_printf+2
  4767  0022AC  6A24               	clrf	?_printf+3,c
  4768  0022AE  C0A3  F025         	movff	_time+5,?_printf+4
  4769  0022B2  6A26               	clrf	?_printf+5,c
  4770  0022B4  C0A2  F027         	movff	_time+4,?_printf+6
  4771  0022B8  6A28               	clrf	?_printf+7,c
  4772  0022BA  EC6F  F008         	call	_printf	;wreg free
  4773                           
  4774                           ;interface.c: 6: printf("3:Start");
  4775  0022BE  0EE9               	movlw	low STR_37
  4776  0022C0  6E21               	movwf	printf@f,c
  4777  0022C2  0EFF               	movlw	high STR_37
  4778  0022C4  6E22               	movwf	printf@f+1,c
  4779  0022C6  EC6F  F008         	call	_printf	;wreg free
  4780                           
  4781                           ;interface.c: 7: lcdInst(0b11000000);;
  4782  0022CA  0EC0               	movlw	192
  4783  0022CC  EC25  F013         	call	_lcdInst
  4784                           
  4785                           ;interface.c: 8: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4786  0022D0  0E5C               	movlw	low STR_38
  4787  0022D2  6E21               	movwf	printf@f,c
  4788  0022D4  0EFF               	movlw	high STR_38
  4789  0022D6  6E22               	movwf	printf@f+1,c
  4790  0022D8  C0A0  F023         	movff	_time+2,?_printf+2
  4791  0022DC  6A24               	clrf	?_printf+3,c
  4792  0022DE  C09F  F025         	movff	_time+1,?_printf+4
  4793  0022E2  6A26               	clrf	?_printf+5,c
  4794  0022E4  C09E  F027         	movff	_time,?_printf+6
  4795  0022E8  6A28               	clrf	?_printf+7,c
  4796  0022EA  EC6F  F008         	call	_printf	;wreg free
  4797                           
  4798                           ;interface.c: 9: printf(" A:Logs");
  4799  0022EE  0EE1               	movlw	low STR_39
  4800  0022F0  6E21               	movwf	printf@f,c
  4801  0022F2  0EFF               	movlw	high STR_39
  4802  0022F4  6E22               	movwf	printf@f+1,c
  4803  0022F6  EC6F  F008         	call	_printf	;wreg free
  4804  0022FA  0012               	return		;funcret
  4805  0022FC                     __end_of_homescreen:
  4806                           	opt stack 0
  4807                           tblptru	equ	0xFF8
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           intcon2	equ	0xFF1
  4812                           postinc0	equ	0xFEE
  4813                           wreg	equ	0xFE8
  4814                           indf2	equ	0xFDF
  4815                           fsr2h	equ	0xFDA
  4816                           fsr2l	equ	0xFD9
  4817                           status	equ	0xFD8
  4818                           
  4819 ;; *************** function _displayLog *****************
  4820 ;; Defined at:
  4821 ;;		line 87 in file "interface.c"
  4822 ;; Parameters:    Size  Location     Type
  4823 ;;  run             2   54[COMRAM] int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  currRun         2   61[COMRAM] int 
  4826 ;;  i               2   59[COMRAM] int 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  1    wreg      void 
  4829 ;; Registers used:
  4830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;Total ram usage:        9 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    5
  4843 ;; This function calls:
  4844 ;;		_eepromRead
  4845 ;;		_keycheck
  4846 ;;		_lcdInst
  4847 ;;		_printf
  4848 ;; This function is called by:
  4849 ;;		_main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text13
  4854  000D82                     __ptext13:
  4855                           	opt stack 0
  4856  000D82                     _displayLog:
  4857                           	opt stack 25
  4858                           
  4859                           ;interface.c: 88: int currRun = eepromRead(0);
  4860                           
  4861                           ;incstack = 0
  4862  000D82  0E00               	movlw	0
  4863  000D84  EC84  F012         	call	_eepromRead
  4864  000D88  6E3E               	movwf	displayLog@currRun,c
  4865  000D8A  6A3F               	clrf	displayLog@currRun+1,c
  4866  000D8C  BE3E               	btfsc	displayLog@currRun,7,c
  4867  000D8E  063F               	decf	displayLog@currRun+1,f,c
  4868                           
  4869                           ;interface.c: 89: int i;
  4870                           ;interface.c: 90: for (i=1;i<(run);i++){
  4871  000D90  0E00               	movlw	0
  4872  000D92  6E3D               	movwf	displayLog@i+1,c
  4873  000D94  0E01               	movlw	1
  4874  000D96  6E3C               	movwf	displayLog@i,c
  4875  000D98  D010               	goto	l5581
  4876  000D9A                     l5573:
  4877                           
  4878                           ;interface.c: 91: currRun++;
  4879  000D9A  4A3E               	infsnz	displayLog@currRun,f,c
  4880  000D9C  2A3F               	incf	displayLog@currRun+1,f,c
  4881                           
  4882                           ;interface.c: 92: if (currRun > 4){currRun = 1;}
  4883  000D9E  BE3F               	btfsc	displayLog@currRun+1,7,c
  4884  000DA0  D00A               	goto	l5579
  4885  000DA2  503F               	movf	displayLog@currRun+1,w,c
  4886  000DA4  E104               	bnz	u6820
  4887  000DA6  0E05               	movlw	5
  4888  000DA8  5C3E               	subwf	displayLog@currRun,w,c
  4889  000DAA  A0D8               	btfss	status,0,c
  4890  000DAC  D004               	goto	l5579
  4891  000DAE                     u6820:
  4892  000DAE  0E00               	movlw	0
  4893  000DB0  6E3F               	movwf	displayLog@currRun+1,c
  4894  000DB2  0E01               	movlw	1
  4895  000DB4  6E3E               	movwf	displayLog@currRun,c
  4896  000DB6                     l5579:
  4897  000DB6  4A3C               	infsnz	displayLog@i,f,c
  4898  000DB8  2A3D               	incf	displayLog@i+1,f,c
  4899  000DBA                     l5581:
  4900  000DBA  5037               	movf	displayLog@run,w,c
  4901  000DBC  5C3C               	subwf	displayLog@i,w,c
  4902  000DBE  503D               	movf	displayLog@i+1,w,c
  4903  000DC0  0A80               	xorlw	128
  4904  000DC2  6E39               	movwf	??_displayLog& (0+255),c
  4905  000DC4  5038               	movf	displayLog@run+1,w,c
  4906  000DC6  0A80               	xorlw	128
  4907  000DC8  5839               	subwfb	??_displayLog& (0+255),w,c
  4908  000DCA  A0D8               	btfss	status,0,c
  4909  000DCC  D7E6               	goto	l5573
  4910                           
  4911                           ;interface.c: 93: }
  4912                           ;interface.c: 95: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4913  000DCE  0E01               	movlw	1
  4914  000DD0  EC25  F013         	call	_lcdInst
  4915  000DD4  0E34               	movlw	52
  4916  000DD6  6E39               	movwf	??_displayLog& (0+255),c
  4917  000DD8  0EF2               	movlw	242
  4918  000DDA                     u7847:
  4919  000DDA  2EE8               	decfsz	wreg,f,c
  4920  000DDC  D7FE               	bra	u7847
  4921  000DDE  2E39               	decfsz	??_displayLog& (0+255),f,c
  4922  000DE0  D7FC               	bra	u7847
  4923                           
  4924                           ;interface.c: 96: lcdInst(0b10000000);;
  4925  000DE2  0E80               	movlw	128
  4926  000DE4  EC25  F013         	call	_lcdInst
  4927                           
  4928                           ;interface.c: 97: printf("%d %d", eepromRead(0), currRun);
  4929  000DE8  0EF1               	movlw	low STR_40
  4930  000DEA  6E21               	movwf	printf@f,c
  4931  000DEC  0EFF               	movlw	high STR_40
  4932  000DEE  6E22               	movwf	printf@f+1,c
  4933  000DF0  0E00               	movlw	0
  4934  000DF2  EC84  F012         	call	_eepromRead
  4935  000DF6  6E23               	movwf	?_printf+2,c
  4936  000DF8  6A24               	clrf	?_printf+3,c
  4937  000DFA  BE23               	btfsc	?_printf+2,7,c
  4938  000DFC  0624               	decf	?_printf+3,f,c
  4939  000DFE  C03E  F025         	movff	displayLog@currRun,?_printf+4
  4940  000E02  C03F  F026         	movff	displayLog@currRun+1,?_printf+5
  4941  000E06  EC6F  F008         	call	_printf	;wreg free
  4942                           
  4943                           ;interface.c: 98: keycheck();
  4944  000E0A  ECFC  F012         	call	_keycheck	;wreg free
  4945                           
  4946                           ;interface.c: 99: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4947  000E0E  0E01               	movlw	1
  4948  000E10  EC25  F013         	call	_lcdInst
  4949  000E14  0E34               	movlw	52
  4950  000E16  6E39               	movwf	??_displayLog& (0+255),c
  4951  000E18  0EF2               	movlw	242
  4952  000E1A                     u7857:
  4953  000E1A  2EE8               	decfsz	wreg,f,c
  4954  000E1C  D7FE               	bra	u7857
  4955  000E1E  2E39               	decfsz	??_displayLog& (0+255),f,c
  4956  000E20  D7FC               	bra	u7857
  4957                           
  4958                           ;interface.c: 100: printf("Run#%d    A:Next", run);
  4959  000E22  0E69               	movlw	low STR_41
  4960  000E24  6E21               	movwf	printf@f,c
  4961  000E26  0EFE               	movlw	high STR_41
  4962  000E28  6E22               	movwf	printf@f+1,c
  4963  000E2A  C037  F023         	movff	displayLog@run,?_printf+2
  4964  000E2E  C038  F024         	movff	displayLog@run+1,?_printf+3
  4965  000E32  EC6F  F008         	call	_printf	;wreg free
  4966                           
  4967                           ;interface.c: 101: lcdInst(0b11000000);;
  4968  000E36  0EC0               	movlw	192
  4969  000E38  EC25  F013         	call	_lcdInst
  4970                           
  4971                           ;interface.c: 102: printf("Runtime: %d", eepromRead(currRun*0x10 + 1));
  4972  000E3C  0E85               	movlw	low STR_42
  4973  000E3E  6E21               	movwf	printf@f,c
  4974  000E40  0EFF               	movlw	high STR_42
  4975  000E42  6E22               	movwf	printf@f+1,c
  4976  000E44  C03E  F039         	movff	displayLog@currRun,??_displayLog
  4977  000E48  3A39               	swapf	??_displayLog,f,c
  4978  000E4A  0EF0               	movlw	240
  4979  000E4C  1639               	andwf	??_displayLog,f,c
  4980  000E4E  2839               	incf	??_displayLog,w,c
  4981  000E50  EC84  F012         	call	_eepromRead
  4982  000E54  6E23               	movwf	?_printf+2,c
  4983  000E56  6A24               	clrf	?_printf+3,c
  4984  000E58  BE23               	btfsc	?_printf+2,7,c
  4985  000E5A  0624               	decf	?_printf+3,f,c
  4986  000E5C  EC6F  F008         	call	_printf	;wreg free
  4987                           
  4988                           ;interface.c: 103: keycheck();
  4989  000E60  ECFC  F012         	call	_keycheck	;wreg free
  4990                           
  4991                           ;interface.c: 104: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  4992  000E64  0E01               	movlw	1
  4993  000E66  EC25  F013         	call	_lcdInst
  4994  000E6A  0E34               	movlw	52
  4995  000E6C  6E39               	movwf	??_displayLog& (0+255),c
  4996  000E6E  0EF2               	movlw	242
  4997  000E70                     u7867:
  4998  000E70  2EE8               	decfsz	wreg,f,c
  4999  000E72  D7FE               	bra	u7867
  5000  000E74  2E39               	decfsz	??_displayLog& (0+255),f,c
  5001  000E76  D7FC               	bra	u7867
  5002                           
  5003                           ;interface.c: 105: printf("Run#%d    A:Next", run);
  5004  000E78  0E69               	movlw	low STR_41
  5005  000E7A  6E21               	movwf	printf@f,c
  5006  000E7C  0EFE               	movlw	high STR_41
  5007  000E7E  6E22               	movwf	printf@f+1,c
  5008  000E80  C037  F023         	movff	displayLog@run,?_printf+2
  5009  000E84  C038  F024         	movff	displayLog@run+1,?_printf+3
  5010  000E88  EC6F  F008         	call	_printf	;wreg free
  5011                           
  5012                           ;interface.c: 106: lcdInst(0b11000000);;
  5013  000E8C  0EC0               	movlw	192
  5014  000E8E  EC25  F013         	call	_lcdInst
  5015                           
  5016                           ;interface.c: 107: printf("Date: %02x/%02x/%02x", eepromRead(currRun*0x10 + 2),eepromRea
      +                          d(currRun*0x10 + 3),eepromRead(currRun*0x10 + 4));
  5017  000E92  0E21               	movlw	low STR_44
  5018  000E94  6E21               	movwf	printf@f,c
  5019  000E96  0EFE               	movlw	high STR_44
  5020  000E98  6E22               	movwf	printf@f+1,c
  5021  000E9A  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5022  000E9E  3A39               	swapf	??_displayLog,f,c
  5023  000EA0  0EF0               	movlw	240
  5024  000EA2  1639               	andwf	??_displayLog,f,c
  5025  000EA4  5039               	movf	??_displayLog,w,c
  5026  000EA6  0F02               	addlw	2
  5027  000EA8  EC84  F012         	call	_eepromRead
  5028  000EAC  6E23               	movwf	?_printf+2,c
  5029  000EAE  6A24               	clrf	?_printf+3,c
  5030  000EB0  BE23               	btfsc	?_printf+2,7,c
  5031  000EB2  0624               	decf	?_printf+3,f,c
  5032  000EB4  C03E  F03A         	movff	displayLog@currRun,??_displayLog+1
  5033  000EB8  3A3A               	swapf	??_displayLog+1,f,c
  5034  000EBA  0EF0               	movlw	240
  5035  000EBC  163A               	andwf	??_displayLog+1,f,c
  5036  000EBE  503A               	movf	??_displayLog+1,w,c
  5037  000EC0  0F03               	addlw	3
  5038  000EC2  EC84  F012         	call	_eepromRead
  5039  000EC6  6E25               	movwf	?_printf+4,c
  5040  000EC8  6A26               	clrf	?_printf+5,c
  5041  000ECA  BE25               	btfsc	?_printf+4,7,c
  5042  000ECC  0626               	decf	?_printf+5,f,c
  5043  000ECE  C03E  F03B         	movff	displayLog@currRun,??_displayLog+2
  5044  000ED2  3A3B               	swapf	??_displayLog+2,f,c
  5045  000ED4  0EF0               	movlw	240
  5046  000ED6  163B               	andwf	??_displayLog+2,f,c
  5047  000ED8  503B               	movf	??_displayLog+2,w,c
  5048  000EDA  0F04               	addlw	4
  5049  000EDC  EC84  F012         	call	_eepromRead
  5050  000EE0  6E27               	movwf	?_printf+6,c
  5051  000EE2  6A28               	clrf	?_printf+7,c
  5052  000EE4  BE27               	btfsc	?_printf+6,7,c
  5053  000EE6  0628               	decf	?_printf+7,f,c
  5054  000EE8  EC6F  F008         	call	_printf	;wreg free
  5055                           
  5056                           ;interface.c: 108: keycheck();
  5057  000EEC  ECFC  F012         	call	_keycheck	;wreg free
  5058                           
  5059                           ;interface.c: 109: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5060  000EF0  0E01               	movlw	1
  5061  000EF2  EC25  F013         	call	_lcdInst
  5062  000EF6  0E34               	movlw	52
  5063  000EF8  6E39               	movwf	??_displayLog& (0+255),c
  5064  000EFA  0EF2               	movlw	242
  5065  000EFC                     u7877:
  5066  000EFC  2EE8               	decfsz	wreg,f,c
  5067  000EFE  D7FE               	bra	u7877
  5068  000F00  2E39               	decfsz	??_displayLog& (0+255),f,c
  5069  000F02  D7FC               	bra	u7877
  5070                           
  5071                           ;interface.c: 110: printf("Run#%d    A:Next", run);
  5072  000F04  0E69               	movlw	low STR_41
  5073  000F06  6E21               	movwf	printf@f,c
  5074  000F08  0EFE               	movlw	high STR_41
  5075  000F0A  6E22               	movwf	printf@f+1,c
  5076  000F0C  C037  F023         	movff	displayLog@run,?_printf+2
  5077  000F10  C038  F024         	movff	displayLog@run+1,?_printf+3
  5078  000F14  EC6F  F008         	call	_printf	;wreg free
  5079                           
  5080                           ;interface.c: 111: lcdInst(0b11000000);;
  5081  000F18  0EC0               	movlw	192
  5082  000F1A  EC25  F013         	call	_lcdInst
  5083                           
  5084                           ;interface.c: 112: printf("Start: %d:%d:%d", eepromRead(currRun*0x10 + 5), eepromRead(cu
      +                          rrRun*0x10 + 6), eepromRead(currRun*0x10 + 7));
  5085  000F1E  0ECC               	movlw	low STR_46
  5086  000F20  6E21               	movwf	printf@f,c
  5087  000F22  0EFE               	movlw	high STR_46
  5088  000F24  6E22               	movwf	printf@f+1,c
  5089  000F26  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5090  000F2A  3A39               	swapf	??_displayLog,f,c
  5091  000F2C  0EF0               	movlw	240
  5092  000F2E  1639               	andwf	??_displayLog,f,c
  5093  000F30  5039               	movf	??_displayLog,w,c
  5094  000F32  0F05               	addlw	5
  5095  000F34  EC84  F012         	call	_eepromRead
  5096  000F38  6E23               	movwf	?_printf+2,c
  5097  000F3A  6A24               	clrf	?_printf+3,c
  5098  000F3C  BE23               	btfsc	?_printf+2,7,c
  5099  000F3E  0624               	decf	?_printf+3,f,c
  5100  000F40  C03E  F03A         	movff	displayLog@currRun,??_displayLog+1
  5101  000F44  3A3A               	swapf	??_displayLog+1,f,c
  5102  000F46  0EF0               	movlw	240
  5103  000F48  163A               	andwf	??_displayLog+1,f,c
  5104  000F4A  503A               	movf	??_displayLog+1,w,c
  5105  000F4C  0F06               	addlw	6
  5106  000F4E  EC84  F012         	call	_eepromRead
  5107  000F52  6E25               	movwf	?_printf+4,c
  5108  000F54  6A26               	clrf	?_printf+5,c
  5109  000F56  BE25               	btfsc	?_printf+4,7,c
  5110  000F58  0626               	decf	?_printf+5,f,c
  5111  000F5A  C03E  F03B         	movff	displayLog@currRun,??_displayLog+2
  5112  000F5E  3A3B               	swapf	??_displayLog+2,f,c
  5113  000F60  0EF0               	movlw	240
  5114  000F62  163B               	andwf	??_displayLog+2,f,c
  5115  000F64  503B               	movf	??_displayLog+2,w,c
  5116  000F66  0F07               	addlw	7
  5117  000F68  EC84  F012         	call	_eepromRead
  5118  000F6C  6E27               	movwf	?_printf+6,c
  5119  000F6E  6A28               	clrf	?_printf+7,c
  5120  000F70  BE27               	btfsc	?_printf+6,7,c
  5121  000F72  0628               	decf	?_printf+7,f,c
  5122  000F74  EC6F  F008         	call	_printf	;wreg free
  5123                           
  5124                           ;interface.c: 113: keycheck();
  5125  000F78  ECFC  F012         	call	_keycheck	;wreg free
  5126                           
  5127                           ;interface.c: 114: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5128  000F7C  0E01               	movlw	1
  5129  000F7E  EC25  F013         	call	_lcdInst
  5130  000F82  0E34               	movlw	52
  5131  000F84  6E39               	movwf	??_displayLog& (0+255),c
  5132  000F86  0EF2               	movlw	242
  5133  000F88                     u7887:
  5134  000F88  2EE8               	decfsz	wreg,f,c
  5135  000F8A  D7FE               	bra	u7887
  5136  000F8C  2E39               	decfsz	??_displayLog& (0+255),f,c
  5137  000F8E  D7FC               	bra	u7887
  5138                           
  5139                           ;interface.c: 115: printf("Run#%d    A:Next", run);
  5140  000F90  0E69               	movlw	low STR_41
  5141  000F92  6E21               	movwf	printf@f,c
  5142  000F94  0EFE               	movlw	high STR_41
  5143  000F96  6E22               	movwf	printf@f+1,c
  5144  000F98  C037  F023         	movff	displayLog@run,?_printf+2
  5145  000F9C  C038  F024         	movff	displayLog@run+1,?_printf+3
  5146  000FA0  EC6F  F008         	call	_printf	;wreg free
  5147                           
  5148                           ;interface.c: 116: lcdInst(0b11000000);;
  5149  000FA4  0EC0               	movlw	192
  5150  000FA6  EC25  F013         	call	_lcdInst
  5151                           
  5152                           ;interface.c: 117: printf("Soda w/ tab: %d", eepromRead(currRun*0x10 + 8));
  5153  000FAA  0EAC               	movlw	low STR_48
  5154  000FAC  6E21               	movwf	printf@f,c
  5155  000FAE  0EFE               	movlw	high STR_48
  5156  000FB0  6E22               	movwf	printf@f+1,c
  5157  000FB2  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5158  000FB6  3A39               	swapf	??_displayLog,f,c
  5159  000FB8  0EF0               	movlw	240
  5160  000FBA  1639               	andwf	??_displayLog,f,c
  5161  000FBC  5039               	movf	??_displayLog,w,c
  5162  000FBE  0F08               	addlw	8
  5163  000FC0  EC84  F012         	call	_eepromRead
  5164  000FC4  6E23               	movwf	?_printf+2,c
  5165  000FC6  6A24               	clrf	?_printf+3,c
  5166  000FC8  BE23               	btfsc	?_printf+2,7,c
  5167  000FCA  0624               	decf	?_printf+3,f,c
  5168  000FCC  EC6F  F008         	call	_printf	;wreg free
  5169                           
  5170                           ;interface.c: 118: keycheck();
  5171  000FD0  ECFC  F012         	call	_keycheck	;wreg free
  5172                           
  5173                           ;interface.c: 119: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5174  000FD4  0E01               	movlw	1
  5175  000FD6  EC25  F013         	call	_lcdInst
  5176  000FDA  0E34               	movlw	52
  5177  000FDC  6E39               	movwf	??_displayLog& (0+255),c
  5178  000FDE  0EF2               	movlw	242
  5179  000FE0                     u7897:
  5180  000FE0  2EE8               	decfsz	wreg,f,c
  5181  000FE2  D7FE               	bra	u7897
  5182  000FE4  2E39               	decfsz	??_displayLog& (0+255),f,c
  5183  000FE6  D7FC               	bra	u7897
  5184                           
  5185                           ;interface.c: 120: printf("Run#%d    A:Next", run);
  5186  000FE8  0E69               	movlw	low STR_41
  5187  000FEA  6E21               	movwf	printf@f,c
  5188  000FEC  0EFE               	movlw	high STR_41
  5189  000FEE  6E22               	movwf	printf@f+1,c
  5190  000FF0  C037  F023         	movff	displayLog@run,?_printf+2
  5191  000FF4  C038  F024         	movff	displayLog@run+1,?_printf+3
  5192  000FF8  EC6F  F008         	call	_printf	;wreg free
  5193                           
  5194                           ;interface.c: 121: lcdInst(0b11000000);;
  5195  000FFC  0EC0               	movlw	192
  5196  000FFE  EC25  F013         	call	_lcdInst
  5197                           
  5198                           ;interface.c: 122: printf("Soda w/o tab: %d", eepromRead(currRun*0x10 + 9));
  5199  001002  0E47               	movlw	low STR_50
  5200  001004  6E21               	movwf	printf@f,c
  5201  001006  0EFE               	movlw	high STR_50
  5202  001008  6E22               	movwf	printf@f+1,c
  5203  00100A  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5204  00100E  3A39               	swapf	??_displayLog,f,c
  5205  001010  0EF0               	movlw	240
  5206  001012  1639               	andwf	??_displayLog,f,c
  5207  001014  5039               	movf	??_displayLog,w,c
  5208  001016  0F09               	addlw	9
  5209  001018  EC84  F012         	call	_eepromRead
  5210  00101C  6E23               	movwf	?_printf+2,c
  5211  00101E  6A24               	clrf	?_printf+3,c
  5212  001020  BE23               	btfsc	?_printf+2,7,c
  5213  001022  0624               	decf	?_printf+3,f,c
  5214  001024  EC6F  F008         	call	_printf	;wreg free
  5215                           
  5216                           ;interface.c: 123: keycheck();
  5217  001028  ECFC  F012         	call	_keycheck	;wreg free
  5218                           
  5219                           ;interface.c: 124: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5220  00102C  0E01               	movlw	1
  5221  00102E  EC25  F013         	call	_lcdInst
  5222  001032  0E34               	movlw	52
  5223  001034  6E39               	movwf	??_displayLog& (0+255),c
  5224  001036  0EF2               	movlw	242
  5225  001038                     u7907:
  5226  001038  2EE8               	decfsz	wreg,f,c
  5227  00103A  D7FE               	bra	u7907
  5228  00103C  2E39               	decfsz	??_displayLog& (0+255),f,c
  5229  00103E  D7FC               	bra	u7907
  5230                           
  5231                           ;interface.c: 125: printf("Run#%d    A:Next", run);
  5232  001040  0E69               	movlw	low STR_41
  5233  001042  6E21               	movwf	printf@f,c
  5234  001044  0EFE               	movlw	high STR_41
  5235  001046  6E22               	movwf	printf@f+1,c
  5236  001048  C037  F023         	movff	displayLog@run,?_printf+2
  5237  00104C  C038  F024         	movff	displayLog@run+1,?_printf+3
  5238  001050  EC6F  F008         	call	_printf	;wreg free
  5239                           
  5240                           ;interface.c: 126: lcdInst(0b11000000);;
  5241  001054  0EC0               	movlw	192
  5242  001056  EC25  F013         	call	_lcdInst
  5243                           
  5244                           ;interface.c: 127: printf("Soup w/ lbl: %d", eepromRead(currRun*0x10 + 0xa));
  5245  00105A  0EBC               	movlw	low STR_52
  5246  00105C  6E21               	movwf	printf@f,c
  5247  00105E  0EFE               	movlw	high STR_52
  5248  001060  6E22               	movwf	printf@f+1,c
  5249  001062  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5250  001066  3A39               	swapf	??_displayLog,f,c
  5251  001068  0EF0               	movlw	240
  5252  00106A  1639               	andwf	??_displayLog,f,c
  5253  00106C  5039               	movf	??_displayLog,w,c
  5254  00106E  0F0A               	addlw	10
  5255  001070  EC84  F012         	call	_eepromRead
  5256  001074  6E23               	movwf	?_printf+2,c
  5257  001076  6A24               	clrf	?_printf+3,c
  5258  001078  BE23               	btfsc	?_printf+2,7,c
  5259  00107A  0624               	decf	?_printf+3,f,c
  5260  00107C  EC6F  F008         	call	_printf	;wreg free
  5261                           
  5262                           ;interface.c: 128: keycheck();
  5263  001080  ECFC  F012         	call	_keycheck	;wreg free
  5264                           
  5265                           ;interface.c: 129: lcdInst(0b00000001); _delay((unsigned long)((5)*(32000000/4000.0)));;
  5266  001084  0E01               	movlw	1
  5267  001086  EC25  F013         	call	_lcdInst
  5268  00108A  0E34               	movlw	52
  5269  00108C  6E39               	movwf	??_displayLog& (0+255),c
  5270  00108E  0EF2               	movlw	242
  5271  001090                     u7917:
  5272  001090  2EE8               	decfsz	wreg,f,c
  5273  001092  D7FE               	bra	u7917
  5274  001094  2E39               	decfsz	??_displayLog& (0+255),f,c
  5275  001096  D7FC               	bra	u7917
  5276                           
  5277                           ;interface.c: 130: printf("Run#%d    A:Next", run);
  5278  001098  0E69               	movlw	low STR_41
  5279  00109A  6E21               	movwf	printf@f,c
  5280  00109C  0EFE               	movlw	high STR_41
  5281  00109E  6E22               	movwf	printf@f+1,c
  5282  0010A0  C037  F023         	movff	displayLog@run,?_printf+2
  5283  0010A4  C038  F024         	movff	displayLog@run+1,?_printf+3
  5284  0010A8  EC6F  F008         	call	_printf	;wreg free
  5285                           
  5286                           ;interface.c: 131: lcdInst(0b11000000);;
  5287  0010AC  0EC0               	movlw	192
  5288  0010AE  EC25  F013         	call	_lcdInst
  5289                           
  5290                           ;interface.c: 132: printf("Soup w/o lbl: %d", eepromRead(currRun*0x10 + 0xb));
  5291  0010B2  0E58               	movlw	low STR_54
  5292  0010B4  6E21               	movwf	printf@f,c
  5293  0010B6  0EFE               	movlw	high STR_54
  5294  0010B8  6E22               	movwf	printf@f+1,c
  5295  0010BA  C03E  F039         	movff	displayLog@currRun,??_displayLog
  5296  0010BE  3A39               	swapf	??_displayLog,f,c
  5297  0010C0  0EF0               	movlw	240
  5298  0010C2  1639               	andwf	??_displayLog,f,c
  5299  0010C4  5039               	movf	??_displayLog,w,c
  5300  0010C6  0F0B               	addlw	11
  5301  0010C8  EC84  F012         	call	_eepromRead
  5302  0010CC  6E23               	movwf	?_printf+2,c
  5303  0010CE  6A24               	clrf	?_printf+3,c
  5304  0010D0  BE23               	btfsc	?_printf+2,7,c
  5305  0010D2  0624               	decf	?_printf+3,f,c
  5306  0010D4  EC6F  F008         	call	_printf	;wreg free
  5307                           
  5308                           ;interface.c: 133: keycheck();
  5309  0010D8  ECFC  F012         	call	_keycheck	;wreg free
  5310  0010DC  0012               	return		;funcret
  5311  0010DE                     __end_of_displayLog:
  5312                           	opt stack 0
  5313                           tblptru	equ	0xFF8
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           intcon	equ	0xFF2
  5317                           intcon2	equ	0xFF1
  5318                           postinc0	equ	0xFEE
  5319                           wreg	equ	0xFE8
  5320                           indf2	equ	0xFDF
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _printf *****************
  5326 ;; Defined at:
  5327 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  f               2   32[COMRAM] PTR const unsigned char 
  5330 ;;		 -> STR_54(17), STR_53(17), STR_52(16), STR_51(17), 
  5331 ;;		 -> STR_50(17), STR_49(17), STR_48(16), STR_47(17), 
  5332 ;;		 -> STR_46(16), STR_45(17), STR_44(21), STR_43(17), 
  5333 ;;		 -> STR_42(12), STR_41(17), STR_40(6), STR_39(8), 
  5334 ;;		 -> STR_38(15), STR_37(8), STR_36(16), STR_35(17), 
  5335 ;;		 -> STR_34(16), STR_33(4), STR_32(4), STR_31(4), 
  5336 ;;		 -> STR_30(12), STR_29(4), STR_28(4), STR_27(4), 
  5337 ;;		 -> STR_26(4), STR_25(4), STR_24(12), STR_23(9), 
  5338 ;;		 -> STR_22(9), STR_21(12), STR_20(4), STR_19(4), 
  5339 ;;		 -> STR_18(4), STR_17(4), STR_16(11), STR_15(3), 
  5340 ;;		 -> STR_14(13), STR_13(13), STR_12(3), STR_11(16), 
  5341 ;;		 -> STR_10(16), STR_9(3), STR_8(16), STR_7(16), 
  5342 ;;		 -> STR_6(12), STR_5(12), STR_4(17), STR_3(16), 
  5343 ;;		 -> STR_2(16), STR_1(16), 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  idx             1   44[COMRAM] unsigned char 
  5346 ;;  tmpval          4    0        struct .
  5347 ;;  cp              3    0        PTR const unsigned char 
  5348 ;;  width           2   51[COMRAM] int 
  5349 ;;  val             2   48[COMRAM] unsigned int 
  5350 ;;  ap              2   45[COMRAM] PTR void [1]
  5351 ;;		 -> ?_printf(2), 
  5352 ;;  len             2    0        unsigned int 
  5353 ;;  c               1   53[COMRAM] char 
  5354 ;;  flag            1   50[COMRAM] unsigned char 
  5355 ;;  prec            1   47[COMRAM] char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  2   32[COMRAM] int 
  5358 ;; Registers used:
  5359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5365 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;Total ram usage:       22 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    4
  5372 ;; This function calls:
  5373 ;;		___lwdiv
  5374 ;;		___lwmod
  5375 ;;		___wmul
  5376 ;;		_isdigit
  5377 ;;		_putch
  5378 ;; This function is called by:
  5379 ;;		_main
  5380 ;;		_homescreen
  5381 ;;		_displayLog
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           	psect	text14
  5386  0010DE                     __ptext14:
  5387                           	opt stack 0
  5388  0010DE                     _printf:
  5389                           	opt stack 26
  5390                           
  5391                           ;doprnt.c: 466: va_list ap;
  5392                           ;doprnt.c: 499: signed char c;
  5393                           ;doprnt.c: 501: int width;
  5394                           ;doprnt.c: 506: signed char prec;
  5395                           ;doprnt.c: 508: unsigned char flag;
  5396                           ;doprnt.c: 523: union {
  5397                           ;doprnt.c: 524: unsigned long vd;
  5398                           ;doprnt.c: 525: double integ;
  5399                           ;doprnt.c: 526: } tmpval;
  5400                           ;doprnt.c: 528: unsigned int val;
  5401                           ;doprnt.c: 529: unsigned len;
  5402                           ;doprnt.c: 530: const char * cp;
  5403                           ;doprnt.c: 533: *ap = __va_start();
  5404                           
  5405                           ;incstack = 0
  5406  0010DE  0E23               	movlw	low (?_printf+2)
  5407  0010E0  6E2E               	movwf	printf@ap,c
  5408  0010E2  0E00               	movlw	high (?_printf+2)
  5409  0010E4  6E2F               	movwf	printf@ap+1,c
  5410                           
  5411                           ;doprnt.c: 536: while(c = *f++) {
  5412  0010E6  D174               	goto	l5361
  5413  0010E8                     l5235:
  5414                           
  5415                           ;doprnt.c: 538: if(c != '%')
  5416  0010E8  0E25               	movlw	37
  5417  0010EA  1836               	xorwf	printf@c,w,c
  5418  0010EC  B4D8               	btfsc	status,2,c
  5419  0010EE  D004               	goto	l5239
  5420                           
  5421                           ;doprnt.c: 540: {
  5422                           ;doprnt.c: 541: (putch(c) );
  5423  0010F0  5036               	movf	printf@c,w,c
  5424  0010F2  EC1F  F013         	call	_putch
  5425                           
  5426                           ;doprnt.c: 542: continue;
  5427  0010F6  D16C               	goto	l5361
  5428  0010F8                     l5239:
  5429                           
  5430                           ;doprnt.c: 543: }
  5431                           ;doprnt.c: 546: width = 0;
  5432  0010F8  0E00               	movlw	0
  5433  0010FA  6E35               	movwf	printf@width+1,c
  5434  0010FC  0E00               	movlw	0
  5435  0010FE  6E34               	movwf	printf@width,c
  5436                           
  5437                           ;doprnt.c: 548: flag = 0;
  5438  001100  0E00               	movlw	0
  5439  001102  6E33               	movwf	printf@flag,c
  5440                           
  5441                           ;doprnt.c: 551: switch(*f) {
  5442                           
  5443                           ;doprnt.c: 550: for(;;) {
  5444  001104  D003               	goto	l5245
  5445  001106                     l5241:
  5446                           
  5447                           ;doprnt.c: 580: flag |= 0x04;
  5448  001106  8433               	bsf	printf@flag,2,c
  5449                           
  5450                           ;doprnt.c: 581: f++;
  5451  001108  4A21               	infsnz	printf@f,f,c
  5452  00110A  2A22               	incf	printf@f+1,f,c
  5453  00110C                     l5245:
  5454  00110C  C021  FFF6         	movff	printf@f,tblptrl
  5455  001110  C022  FFF7         	movff	printf@f+1,tblptrh
  5456  001114                     	if	0	;tblptru may be non-zero
  5457  001114                     	endif
  5458  001114                     	if	0	;tblptru may be non-zero
  5459  001114                     	endif
  5460  001114  0008               	tblrd		*
  5461  001116  50F5               	movf	tablat,w,c
  5462                           
  5463                           ; Switch size 1, requested type "space"
  5464                           ; Number of cases is 1, Range of values is 48 to 48
  5465                           ; switch strategies available:
  5466                           ; Name         Instructions Cycles
  5467                           ; simple_byte            4     3 (average)
  5468                           ;	Chosen strategy is simple_byte
  5469  001118  0A30               	xorlw	48	; case 48
  5470  00111A  B4D8               	btfsc	status,2,c
  5471  00111C  D7F4               	goto	l5241
  5472                           
  5473                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5474                           
  5475                           ;doprnt.c: 586: }
  5476                           
  5477                           ;doprnt.c: 585: break;
  5478  00111E  C021  FFF6         	movff	printf@f,tblptrl
  5479  001122  C022  FFF7         	movff	printf@f+1,tblptrh
  5480  001126                     	if	0	;tblptru may be non-zero
  5481  001126                     	endif
  5482  001126                     	if	0	;tblptru may be non-zero
  5483  001126                     	endif
  5484  001126  0008               	tblrd		*
  5485  001128  50F5               	movf	tablat,w,c
  5486  00112A  ECE3  F012         	call	_isdigit
  5487  00112E  A0D8               	btfss	status,0,c
  5488  001130  D035               	goto	l5263
  5489                           
  5490                           ;doprnt.c: 598: width = 0;
  5491  001132  0E00               	movlw	0
  5492  001134  6E35               	movwf	printf@width+1,c
  5493  001136  0E00               	movlw	0
  5494  001138  6E34               	movwf	printf@width,c
  5495  00113A                     l5251:
  5496                           
  5497                           ;doprnt.c: 600: width *= 10;
  5498  00113A  C034  F015         	movff	printf@width,___wmul@multiplier
  5499  00113E  C035  F016         	movff	printf@width+1,___wmul@multiplier+1
  5500  001142  0E00               	movlw	0
  5501  001144  6E18               	movwf	___wmul@multiplicand+1,c
  5502  001146  0E0A               	movlw	10
  5503  001148  6E17               	movwf	___wmul@multiplicand,c
  5504  00114A  ECBE  F012         	call	___wmul	;wreg free
  5505  00114E  C015  F034         	movff	?___wmul,printf@width
  5506  001152  C016  F035         	movff	?___wmul+1,printf@width+1
  5507                           
  5508                           ;doprnt.c: 601: width += *f++ - '0';
  5509  001156  0ED0               	movlw	208
  5510  001158  6E29               	movwf	??_printf& (0+255),c
  5511  00115A  0EFF               	movlw	255
  5512  00115C  6E2A               	movwf	(??_printf+1)& (0+255),c
  5513  00115E  C021  FFF6         	movff	printf@f,tblptrl
  5514  001162  C022  FFF7         	movff	printf@f+1,tblptrh
  5515  001166                     	if	0	;tblptru may be non-zero
  5516  001166                     	endif
  5517  001166                     	if	0	;tblptru may be non-zero
  5518  001166                     	endif
  5519  001166  0008               	tblrd		*
  5520  001168  50F5               	movf	tablat,w,c
  5521  00116A  6E2B               	movwf	(??_printf+2)& (0+255),c
  5522  00116C  6A2C               	clrf	(??_printf+3)& (0+255),c
  5523  00116E  5029               	movf	??_printf,w,c
  5524  001170  262B               	addwf	??_printf+2,f,c
  5525  001172  502A               	movf	??_printf+1,w,c
  5526  001174  222C               	addwfc	??_printf+3,f,c
  5527  001176  502B               	movf	??_printf+2,w,c
  5528  001178  2634               	addwf	printf@width,f,c
  5529  00117A  502C               	movf	??_printf+3,w,c
  5530  00117C  2235               	addwfc	printf@width+1,f,c
  5531  00117E  4A21               	infsnz	printf@f,f,c
  5532  001180  2A22               	incf	printf@f+1,f,c
  5533                           
  5534                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5535  001182  C021  FFF6         	movff	printf@f,tblptrl
  5536  001186  C022  FFF7         	movff	printf@f+1,tblptrh
  5537  00118A                     	if	0	;tblptru may be non-zero
  5538  00118A                     	endif
  5539  00118A                     	if	0	;tblptru may be non-zero
  5540  00118A                     	endif
  5541  00118A  0008               	tblrd		*
  5542  00118C  50F5               	movf	tablat,w,c
  5543  00118E  ECE3  F012         	call	_isdigit
  5544  001192  A0D8               	btfss	status,0,c
  5545  001194  D003               	goto	l5263
  5546  001196  D7D1               	goto	l5251
  5547  001198                     l5259:
  5548                           
  5549                           ;doprnt.c: 721: flag |= 0x80;
  5550  001198  8E33               	bsf	printf@flag,7,c
  5551                           
  5552                           ;doprnt.c: 723: break;
  5553  00119A  D017               	goto	l753
  5554  00119C                     l5263:
  5555  00119C  C021  FFF6         	movff	printf@f,tblptrl
  5556  0011A0  C022  FFF7         	movff	printf@f+1,tblptrh
  5557  0011A4  4A21               	infsnz	printf@f,f,c
  5558  0011A6  2A22               	incf	printf@f+1,f,c
  5559  0011A8                     	if	0	;tblptru may be non-zero
  5560  0011A8                     	endif
  5561  0011A8                     	if	0	;tblptru may be non-zero
  5562  0011A8                     	endif
  5563  0011A8  0008               	tblrd		*
  5564  0011AA  CFF5 F036          	movff	tablat,printf@c
  5565  0011AE  5036               	movf	printf@c,w,c
  5566                           
  5567                           ; Switch size 1, requested type "space"
  5568                           ; Number of cases is 4, Range of values is 0 to 120
  5569                           ; switch strategies available:
  5570                           ; Name         Instructions Cycles
  5571                           ; simple_byte           13     7 (average)
  5572                           ;	Chosen strategy is simple_byte
  5573  0011B0  0A00               	xorlw	0	; case 0
  5574  0011B2  B4D8               	btfsc	status,2,c
  5575  0011B4  0012               	return	
  5576  0011B6  0A64               	xorlw	100	; case 100
  5577  0011B8  B4D8               	btfsc	status,2,c
  5578  0011BA  D007               	goto	l753
  5579  0011BC  0A0D               	xorlw	13	; case 105
  5580  0011BE  B4D8               	btfsc	status,2,c
  5581  0011C0  D004               	goto	l753
  5582  0011C2  0A11               	xorlw	17	; case 120
  5583  0011C4  B4D8               	btfsc	status,2,c
  5584  0011C6  D7E8               	goto	l5259
  5585  0011C8  D103               	goto	l5361
  5586  0011CA                     l753:
  5587                           
  5588                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5589  0011CA  BE33               	btfsc	printf@flag,7,c
  5590  0011CC  D015               	goto	l5275
  5591                           
  5592                           ;doprnt.c: 1253: {
  5593                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5594  0011CE  C02E  FFD9         	movff	printf@ap,fsr2l
  5595  0011D2  C02F  FFDA         	movff	printf@ap+1,fsr2h
  5596  0011D6  CFDE F031          	movff	postinc2,printf@val
  5597  0011DA  CFDD F032          	movff	postdec2,printf@val+1
  5598  0011DE  0E02               	movlw	2
  5599  0011E0  262E               	addwf	printf@ap,f,c
  5600  0011E2  0E00               	movlw	0
  5601  0011E4  222F               	addwfc	printf@ap+1,f,c
  5602                           
  5603                           ;doprnt.c: 1261: if((int)val < 0) {
  5604  0011E6  AE32               	btfss	printf@val+1,7,c
  5605  0011E8  D044               	goto	l5309
  5606                           
  5607                           ;doprnt.c: 1262: flag |= 0x03;
  5608  0011EA  0E03               	movlw	3
  5609  0011EC  1233               	iorwf	printf@flag,f,c
  5610                           
  5611                           ;doprnt.c: 1263: val = -val;
  5612  0011EE  6C31               	negf	printf@val,c
  5613  0011F0  1E32               	comf	printf@val+1,f,c
  5614  0011F2  B0D8               	btfsc	status,0,c
  5615  0011F4  2A32               	incf	printf@val+1,f,c
  5616                           
  5617                           ;doprnt.c: 1264: }
  5618                           ;doprnt.c: 1266: }
  5619  0011F6  D03D               	goto	l5309
  5620  0011F8                     l5275:
  5621                           
  5622                           ;doprnt.c: 1268: else
  5623                           ;doprnt.c: 1273: {
  5624                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5625  0011F8  C02E  FFD9         	movff	printf@ap,fsr2l
  5626  0011FC  C02F  FFDA         	movff	printf@ap+1,fsr2h
  5627  001200  CFDE F031          	movff	postinc2,printf@val
  5628  001204  CFDD F032          	movff	postdec2,printf@val+1
  5629  001208  0E02               	movlw	2
  5630  00120A  262E               	addwf	printf@ap,f,c
  5631  00120C  0E00               	movlw	0
  5632  00120E  222F               	addwfc	printf@ap+1,f,c
  5633                           
  5634                           ;doprnt.c: 1287: }
  5635                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5636  001210  D030               	goto	l5309
  5637  001212                     l5279:
  5638                           
  5639                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5640  001212  0E01               	movlw	1
  5641  001214  6E36               	movwf	printf@c,c
  5642  001216                     l5281:
  5643  001216  0E05               	movlw	5
  5644  001218  1836               	xorwf	printf@c,w,c
  5645  00121A  B4D8               	btfsc	status,2,c
  5646  00121C  D032               	goto	l5311
  5647                           
  5648                           ;doprnt.c: 1306: if(val < dpowers[c])
  5649  00121E  5036               	movf	printf@c,w,c
  5650  001220  0D02               	mullw	2
  5651  001222  0E08               	movlw	low _dpowers
  5652  001224  24F3               	addwf	prodl,w,c
  5653  001226  6EF6               	movwf	tblptrl,c
  5654  001228  0EFE               	movlw	high _dpowers
  5655  00122A  20F4               	addwfc	prodh,w,c
  5656  00122C  6EF7               	movwf	tblptrh,c
  5657  00122E                     	if	0	;There are less than 3 active tblptr bytes
  5658  00122E                     	endif
  5659  00122E  0009               	tblrd		*+
  5660  001230  50F5               	movf	tablat,w,c
  5661  001232  5C31               	subwf	printf@val,w,c
  5662  001234  0009               	tblrd		*+
  5663  001236  50F5               	movf	tablat,w,c
  5664  001238  5832               	subwfb	printf@val+1,w,c
  5665  00123A  A0D8               	btfss	status,0,c
  5666  00123C  D022               	goto	l5311
  5667                           
  5668                           ;doprnt.c: 1307: break;
  5669  00123E  2A36               	incf	printf@c,f,c
  5670  001240  D7EA               	goto	l5281
  5671  001242                     l5293:
  5672                           
  5673                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5674  001242  0E01               	movlw	1
  5675  001244  6E36               	movwf	printf@c,c
  5676  001246                     l5295:
  5677  001246  0E04               	movlw	4
  5678  001248  1836               	xorwf	printf@c,w,c
  5679  00124A  B4D8               	btfsc	status,2,c
  5680  00124C  D01A               	goto	l5311
  5681                           
  5682                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5683  00124E  5036               	movf	printf@c,w,c
  5684  001250  0D02               	mullw	2
  5685  001252  0E12               	movlw	low _hexpowers
  5686  001254  24F3               	addwf	prodl,w,c
  5687  001256  6EF6               	movwf	tblptrl,c
  5688  001258  0EFE               	movlw	high _hexpowers
  5689  00125A  20F4               	addwfc	prodh,w,c
  5690  00125C  6EF7               	movwf	tblptrh,c
  5691  00125E                     	if	0	;There are less than 3 active tblptr bytes
  5692  00125E                     	endif
  5693  00125E  0009               	tblrd		*+
  5694  001260  50F5               	movf	tablat,w,c
  5695  001262  5C31               	subwf	printf@val,w,c
  5696  001264  0009               	tblrd		*+
  5697  001266  50F5               	movf	tablat,w,c
  5698  001268  5832               	subwfb	printf@val+1,w,c
  5699  00126A  A0D8               	btfss	status,0,c
  5700  00126C  D00A               	goto	l5311
  5701                           
  5702                           ;doprnt.c: 1318: break;
  5703  00126E  2A36               	incf	printf@c,f,c
  5704  001270  D7EA               	goto	l5295
  5705  001272                     l5309:
  5706  001272  5033               	movf	printf@flag,w,c
  5707  001274  0B80               	andlw	128
  5708                           
  5709                           ; Switch size 1, requested type "space"
  5710                           ; Number of cases is 2, Range of values is 0 to 128
  5711                           ; switch strategies available:
  5712                           ; Name         Instructions Cycles
  5713                           ; simple_byte            7     4 (average)
  5714                           ;	Chosen strategy is simple_byte
  5715  001276  0A00               	xorlw	0	; case 0
  5716  001278  B4D8               	btfsc	status,2,c
  5717  00127A  D7CB               	goto	l5279
  5718  00127C  0A80               	xorlw	128	; case 128
  5719  00127E  B4D8               	btfsc	status,2,c
  5720  001280  D7E0               	goto	l5293
  5721  001282                     l5311:
  5722                           
  5723                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5724  001282  5034               	movf	printf@width,w,c
  5725  001284  1035               	iorwf	printf@width+1,w,c
  5726  001286  B4D8               	btfsc	status,2,c
  5727  001288  D009               	goto	l5317
  5728  00128A  C033  F029         	movff	printf@flag,??_printf
  5729  00128E  0E03               	movlw	3
  5730  001290  1629               	andwf	??_printf,f,c
  5731  001292  B4D8               	btfsc	status,2,c
  5732  001294  D003               	goto	l5317
  5733                           
  5734                           ;doprnt.c: 1346: width--;
  5735  001296  0634               	decf	printf@width,f,c
  5736  001298  A0D8               	btfss	status,0,c
  5737  00129A  0635               	decf	printf@width+1,f,c
  5738  00129C                     l5317:
  5739                           
  5740                           ;doprnt.c: 1381: if(width > c)
  5741  00129C  0E80               	movlw	128
  5742  00129E  BE36               	btfsc	printf@c,7,c
  5743  0012A0  0E7F               	movlw	127
  5744  0012A2  6E29               	movwf	??_printf& (0+255),c
  5745  0012A4  5034               	movf	printf@width,w,c
  5746  0012A6  5C36               	subwf	printf@c,w,c
  5747  0012A8  5035               	movf	printf@width+1,w,c
  5748  0012AA  0A80               	xorlw	128
  5749  0012AC  5829               	subwfb	??_printf& (0+255),w,c
  5750  0012AE  B0D8               	btfsc	status,0,c
  5751  0012B0  D007               	goto	l5321
  5752                           
  5753                           ;doprnt.c: 1382: width -= c;
  5754  0012B2  5036               	movf	printf@c,w,c
  5755  0012B4  5E34               	subwf	printf@width,f,c
  5756  0012B6  0E00               	movlw	0
  5757  0012B8  BE36               	btfsc	printf@c,7,c
  5758  0012BA  0EFF               	movlw	255
  5759  0012BC  5A35               	subwfb	printf@width+1,f,c
  5760  0012BE  D004               	goto	l5323
  5761  0012C0                     l5321:
  5762                           
  5763                           ;doprnt.c: 1383: else
  5764                           ;doprnt.c: 1384: width = 0;
  5765  0012C0  0E00               	movlw	0
  5766  0012C2  6E35               	movwf	printf@width+1,c
  5767  0012C4  0E00               	movlw	0
  5768  0012C6  6E34               	movwf	printf@width,c
  5769  0012C8                     l5323:
  5770                           
  5771                           ;doprnt.c: 1387: if(flag & 0x04) {
  5772  0012C8  A433               	btfss	printf@flag,2,c
  5773  0012CA  D014               	goto	l5335
  5774                           
  5775                           ;doprnt.c: 1392: if(flag & 0x03)
  5776  0012CC  C033  F029         	movff	printf@flag,??_printf
  5777  0012D0  0E03               	movlw	3
  5778  0012D2  1629               	andwf	??_printf,f,c
  5779  0012D4  B4D8               	btfsc	status,2,c
  5780  0012D6  D003               	goto	l5329
  5781                           
  5782                           ;doprnt.c: 1393: (putch('-') );
  5783  0012D8  0E2D               	movlw	45
  5784  0012DA  EC1F  F013         	call	_putch
  5785  0012DE                     l5329:
  5786                           
  5787                           ;doprnt.c: 1415: if(width)
  5788  0012DE  5034               	movf	printf@width,w,c
  5789  0012E0  1035               	iorwf	printf@width+1,w,c
  5790  0012E2  B4D8               	btfsc	status,2,c
  5791  0012E4  D01E               	goto	l5345
  5792                           
  5793                           ;doprnt.c: 1417: (putch('0') );
  5794                           
  5795                           ;doprnt.c: 1416: do
  5796  0012E6  0E30               	movlw	48
  5797  0012E8  EC1F  F013         	call	_putch
  5798                           
  5799                           ;doprnt.c: 1418: while(--width);
  5800  0012EC  0634               	decf	printf@width,f,c
  5801  0012EE  A0D8               	btfss	status,0,c
  5802  0012F0  0635               	decf	printf@width+1,f,c
  5803  0012F2  D7F5               	goto	l5329
  5804  0012F4                     l5335:
  5805                           
  5806                           ;doprnt.c: 1422: {
  5807                           ;doprnt.c: 1424: if(width
  5808                           ;doprnt.c: 1428: )
  5809  0012F4  5034               	movf	printf@width,w,c
  5810  0012F6  1035               	iorwf	printf@width+1,w,c
  5811  0012F8  B4D8               	btfsc	status,2,c
  5812  0012FA  D00A               	goto	l5341
  5813  0012FC                     l5337:
  5814                           
  5815                           ;doprnt.c: 1430: (putch(' ') );
  5816  0012FC  0E20               	movlw	32
  5817  0012FE  EC1F  F013         	call	_putch
  5818                           
  5819                           ;doprnt.c: 1431: while(--width);
  5820  001302  0634               	decf	printf@width,f,c
  5821  001304  A0D8               	btfss	status,0,c
  5822  001306  0635               	decf	printf@width+1,f,c
  5823  001308  5034               	movf	printf@width,w,c
  5824  00130A  1035               	iorwf	printf@width+1,w,c
  5825  00130C  A4D8               	btfss	status,2,c
  5826  00130E  D7F6               	goto	l5337
  5827  001310                     l5341:
  5828                           
  5829                           ;doprnt.c: 1438: if(flag & 0x03)
  5830  001310  C033  F029         	movff	printf@flag,??_printf
  5831  001314  0E03               	movlw	3
  5832  001316  1629               	andwf	??_printf,f,c
  5833  001318  B4D8               	btfsc	status,2,c
  5834  00131A  D003               	goto	l5345
  5835                           
  5836                           ;doprnt.c: 1439: (putch('-') );
  5837  00131C  0E2D               	movlw	45
  5838  00131E  EC1F  F013         	call	_putch
  5839  001322                     l5345:
  5840                           
  5841                           ;doprnt.c: 1469: }
  5842                           ;doprnt.c: 1472: prec = c;
  5843  001322  C036  F030         	movff	printf@c,printf@prec
  5844                           
  5845                           ;doprnt.c: 1474: while(prec--) {
  5846  001326  D050               	goto	l5359
  5847  001328                     l5347:
  5848                           
  5849                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5850  001328  5030               	movf	printf@prec,w,c
  5851  00132A  0D02               	mullw	2
  5852  00132C  0E08               	movlw	low _dpowers
  5853  00132E  24F3               	addwf	prodl,w,c
  5854  001330  6EF6               	movwf	tblptrl,c
  5855  001332  0EFE               	movlw	high _dpowers
  5856  001334  20F4               	addwfc	prodh,w,c
  5857  001336  6EF7               	movwf	tblptrh,c
  5858  001338                     	if	0	;There are less than 3 active tblptr bytes
  5859  001338                     	endif
  5860  001338  0009               	tblrd		*+
  5861  00133A  CFF5 F017          	movff	tablat,___lwdiv@divisor
  5862  00133E  000A               	tblrd		*-
  5863  001340  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  5864  001344  C031  F015         	movff	printf@val,___lwdiv@dividend
  5865  001348  C032  F016         	movff	printf@val+1,___lwdiv@dividend+1
  5866  00134C  ECD6  F011         	call	___lwdiv	;wreg free
  5867  001350  C015  F01C         	movff	?___lwdiv,___lwmod@dividend
  5868  001354  C016  F01D         	movff	?___lwdiv+1,___lwmod@dividend+1
  5869  001358  0E00               	movlw	0
  5870  00135A  6E1F               	movwf	___lwmod@divisor+1,c
  5871  00135C  0E0A               	movlw	10
  5872  00135E  6E1E               	movwf	___lwmod@divisor,c
  5873  001360  EC47  F012         	call	___lwmod	;wreg free
  5874  001364  501C               	movf	?___lwmod,w,c
  5875  001366  0F30               	addlw	48
  5876  001368  6E36               	movwf	printf@c,c
  5877                           
  5878                           ;doprnt.c: 1491: break;
  5879  00136A  D02B               	goto	l5357
  5880  00136C                     l5349:
  5881                           
  5882                           ;doprnt.c: 1499: {
  5883                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5884  00136C  C031  F015         	movff	printf@val,___lwdiv@dividend
  5885  001370  C032  F016         	movff	printf@val+1,___lwdiv@dividend+1
  5886  001374  5030               	movf	printf@prec,w,c
  5887  001376  0D02               	mullw	2
  5888  001378  0E12               	movlw	low _hexpowers
  5889  00137A  24F3               	addwf	prodl,w,c
  5890  00137C  6EF6               	movwf	tblptrl,c
  5891  00137E  0EFE               	movlw	high _hexpowers
  5892  001380  20F4               	addwfc	prodh,w,c
  5893  001382  6EF7               	movwf	tblptrh,c
  5894  001384                     	if	0	;There are less than 3 active tblptr bytes
  5895  001384                     	endif
  5896  001384  0009               	tblrd		*+
  5897  001386  CFF5 F017          	movff	tablat,___lwdiv@divisor
  5898  00138A  000A               	tblrd		*-
  5899  00138C  CFF5 F018          	movff	tablat,___lwdiv@divisor+1
  5900  001390  ECD6  F011         	call	___lwdiv	;wreg free
  5901  001394  5015               	movf	?___lwdiv,w,c
  5902  001396  0B0F               	andlw	15
  5903  001398  6E2D               	movwf	printf@idx,c
  5904                           
  5905                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5906  00139A  502D               	movf	printf@idx,w,c
  5907  00139C  0D01               	mullw	1
  5908  00139E  0E36               	movlw	low STR_55
  5909  0013A0  24F3               	addwf	prodl,w,c
  5910  0013A2  6EF6               	movwf	tblptrl,c
  5911  0013A4  0EFE               	movlw	high STR_55
  5912  0013A6  20F4               	addwfc	prodh,w,c
  5913  0013A8  6EF7               	movwf	tblptrh,c
  5914  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  5915  0013AA                     	endif
  5916  0013AA  0008               	tblrd		*
  5917  0013AC  CFF5 F036          	movff	tablat,printf@c
  5918                           
  5919                           ;doprnt.c: 1523: }
  5920                           
  5921                           ;doprnt.c: 1508: }
  5922                           ;doprnt.c: 1510: break;
  5923  0013B0  D008               	goto	l5357
  5924  0013B2                     l5355:
  5925  0013B2  5033               	movf	printf@flag,w,c
  5926  0013B4  0B80               	andlw	128
  5927                           
  5928                           ; Switch size 1, requested type "space"
  5929                           ; Number of cases is 2, Range of values is 0 to 128
  5930                           ; switch strategies available:
  5931                           ; Name         Instructions Cycles
  5932                           ; simple_byte            7     4 (average)
  5933                           ;	Chosen strategy is simple_byte
  5934  0013B6  0A00               	xorlw	0	; case 0
  5935  0013B8  B4D8               	btfsc	status,2,c
  5936  0013BA  D7B6               	goto	l5347
  5937  0013BC  0A80               	xorlw	128	; case 128
  5938  0013BE  B4D8               	btfsc	status,2,c
  5939  0013C0  D7D5               	goto	l5349
  5940  0013C2                     l5357:
  5941                           
  5942                           ;doprnt.c: 1524: (putch(c) );
  5943  0013C2  5036               	movf	printf@c,w,c
  5944  0013C4  EC1F  F013         	call	_putch
  5945  0013C8                     l5359:
  5946  0013C8  0630               	decf	printf@prec,f,c
  5947  0013CA  2830               	incf	printf@prec,w,c
  5948  0013CC  A4D8               	btfss	status,2,c
  5949  0013CE  D7F1               	goto	l5355
  5950  0013D0                     l5361:
  5951  0013D0  C021  FFF6         	movff	printf@f,tblptrl
  5952  0013D4  C022  FFF7         	movff	printf@f+1,tblptrh
  5953  0013D8  4A21               	infsnz	printf@f,f,c
  5954  0013DA  2A22               	incf	printf@f+1,f,c
  5955  0013DC                     	if	0	;tblptru may be non-zero
  5956  0013DC                     	endif
  5957  0013DC                     	if	0	;tblptru may be non-zero
  5958  0013DC                     	endif
  5959  0013DC  0008               	tblrd		*
  5960  0013DE  CFF5 F036          	movff	tablat,printf@c
  5961  0013E2  5036               	movf	printf@c,w,c
  5962  0013E4  B4D8               	btfsc	status,2,c
  5963  0013E6  0012               	return	
  5964  0013E8  D67F               	goto	l5235
  5965  0013EA                     __end_of_printf:
  5966                           	opt stack 0
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           intcon	equ	0xFF2
  5974                           intcon2	equ	0xFF1
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _putch *****************
  5985 ;; Defined at:
  5986 ;;		line 27 in file "lcd.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  data            1    wreg     unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  data            1   22[COMRAM] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;Total ram usage:        1 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    3
  6007 ;; This function calls:
  6008 ;;		_lcdNibble
  6009 ;; This function is called by:
  6010 ;;		_printf
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text15
  6015  00263E                     __ptext15:
  6016                           	opt stack 0
  6017  00263E                     _putch:
  6018                           	opt stack 26
  6019                           
  6020                           ;incstack = 0
  6021                           ;putch@data stored from wreg
  6022  00263E  6E17               	movwf	putch@data,c
  6023                           
  6024                           ;lcd.c: 28: LATDbits.LATD2 = 1;
  6025  002640  848C               	bsf	3980,2,c	;volatile
  6026                           
  6027                           ;lcd.c: 29: lcdNibble(data);
  6028  002642  5017               	movf	putch@data,w,c
  6029  002644  ECAB  F011         	call	_lcdNibble
  6030  002648  0012               	return		;funcret
  6031  00264A                     __end_of_putch:
  6032                           	opt stack 0
  6033                           tblptru	equ	0xFF8
  6034                           tblptrh	equ	0xFF7
  6035                           tblptrl	equ	0xFF6
  6036                           tablat	equ	0xFF5
  6037                           prodh	equ	0xFF4
  6038                           prodl	equ	0xFF3
  6039                           intcon	equ	0xFF2
  6040                           intcon2	equ	0xFF1
  6041                           postinc0	equ	0xFEE
  6042                           wreg	equ	0xFE8
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function _isdigit *****************
  6051 ;; Defined at:
  6052 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  c               1    wreg     unsigned char 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  c               1   22[COMRAM] unsigned char 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;		None               void
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;Total ram usage:        3 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    2
  6073 ;; This function calls:
  6074 ;;		Nothing
  6075 ;; This function is called by:
  6076 ;;		_printf
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text16
  6081  0025C6                     __ptext16:
  6082                           	opt stack 0
  6083  0025C6                     _isdigit:
  6084                           	opt stack 27
  6085                           
  6086                           ;incstack = 0
  6087                           ;isdigit@c stored from wreg
  6088  0025C6  6E17               	movwf	isdigit@c,c
  6089  0025C8  0E00               	movlw	0
  6090  0025CA  6E16               	movwf	_isdigit$1451,c
  6091  0025CC  0E3A               	movlw	58
  6092  0025CE  6017               	cpfslt	isdigit@c,c
  6093  0025D0  D005               	goto	l4977
  6094  0025D2  0E2F               	movlw	47
  6095  0025D4  6417               	cpfsgt	isdigit@c,c
  6096  0025D6  D002               	goto	l4977
  6097  0025D8  0E01               	movlw	1
  6098  0025DA  6E16               	movwf	_isdigit$1451,c
  6099  0025DC                     l4977:
  6100  0025DC  C016  F015         	movff	_isdigit$1451,??_isdigit
  6101  0025E0  3015               	rrcf	??_isdigit,w,c
  6102  0025E2  0012               	return	
  6103  0025E4                     __end_of_isdigit:
  6104                           	opt stack 0
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           intcon2	equ	0xFF1
  6113                           postinc0	equ	0xFEE
  6114                           wreg	equ	0xFE8
  6115                           indf2	equ	0xFDF
  6116                           postinc2	equ	0xFDE
  6117                           postdec2	equ	0xFDD
  6118                           fsr2h	equ	0xFDA
  6119                           fsr2l	equ	0xFD9
  6120                           status	equ	0xFD8
  6121                           
  6122 ;; *************** function ___wmul *****************
  6123 ;; Defined at:
  6124 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  multiplier      2   20[COMRAM] unsigned int 
  6127 ;;  multiplicand    2   22[COMRAM] unsigned int 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  product         2   24[COMRAM] unsigned int 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  2   20[COMRAM] unsigned int 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0, prodl, prodh
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;Total ram usage:        6 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    2
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_printf
  6150 ;;		_timePassed
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text17
  6155  00257C                     __ptext17:
  6156                           	opt stack 0
  6157  00257C                     ___wmul:
  6158                           	opt stack 27
  6159                           
  6160                           ;incstack = 0
  6161  00257C  5015               	movf	___wmul@multiplier,w,c
  6162  00257E  0217               	mulwf	___wmul@multiplicand,c
  6163  002580  CFF3 F019          	movff	prodl,___wmul@product
  6164  002584  CFF4 F01A          	movff	prodh,___wmul@product+1
  6165  002588  5015               	movf	___wmul@multiplier,w,c
  6166  00258A  0218               	mulwf	___wmul@multiplicand+1,c
  6167  00258C  50F3               	movf	prodl,w,c
  6168  00258E  261A               	addwf	___wmul@product+1,f,c
  6169  002590  5016               	movf	___wmul@multiplier+1,w,c
  6170  002592  0217               	mulwf	___wmul@multiplicand,c
  6171  002594  50F3               	movf	prodl,w,c
  6172  002596  261A               	addwf	___wmul@product+1,f,c
  6173  002598  C019  F015         	movff	___wmul@product,?___wmul
  6174  00259C  C01A  F016         	movff	___wmul@product+1,?___wmul+1
  6175  0025A0  0012               	return	
  6176  0025A2                     __end_of___wmul:
  6177                           	opt stack 0
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           intcon2	equ	0xFF1
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           indf2	equ	0xFDF
  6189                           postinc2	equ	0xFDE
  6190                           postdec2	equ	0xFDD
  6191                           fsr2h	equ	0xFDA
  6192                           fsr2l	equ	0xFD9
  6193                           status	equ	0xFD8
  6194                           
  6195 ;; *************** function ___lwmod *****************
  6196 ;; Defined at:
  6197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  dividend        2   27[COMRAM] unsigned int 
  6200 ;;  divisor         2   29[COMRAM] unsigned int 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  counter         1   31[COMRAM] unsigned char 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  2   27[COMRAM] unsigned int 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;Total ram usage:        5 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    2
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_printf
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text18
  6227  00248E                     __ptext18:
  6228                           	opt stack 0
  6229  00248E                     ___lwmod:
  6230                           	opt stack 27
  6231                           
  6232                           ;incstack = 0
  6233  00248E  501E               	movf	___lwmod@divisor,w,c
  6234  002490  101F               	iorwf	___lwmod@divisor+1,w,c
  6235  002492  B4D8               	btfsc	status,2,c
  6236  002494  D018               	goto	l1208
  6237  002496  0E01               	movlw	1
  6238  002498  6E20               	movwf	___lwmod@counter,c
  6239  00249A  D004               	goto	l5037
  6240  00249C                     l5035:
  6241  00249C  90D8               	bcf	status,0,c
  6242  00249E  361E               	rlcf	___lwmod@divisor,f,c
  6243  0024A0  361F               	rlcf	___lwmod@divisor+1,f,c
  6244  0024A2  2A20               	incf	___lwmod@counter,f,c
  6245  0024A4                     l5037:
  6246  0024A4  AE1F               	btfss	___lwmod@divisor+1,7,c
  6247  0024A6  D7FA               	goto	l5035
  6248  0024A8                     l5039:
  6249  0024A8  501E               	movf	___lwmod@divisor,w,c
  6250  0024AA  5C1C               	subwf	___lwmod@dividend,w,c
  6251  0024AC  501F               	movf	___lwmod@divisor+1,w,c
  6252  0024AE  581D               	subwfb	___lwmod@dividend+1,w,c
  6253  0024B0  A0D8               	btfss	status,0,c
  6254  0024B2  D004               	goto	l5043
  6255  0024B4  501E               	movf	___lwmod@divisor,w,c
  6256  0024B6  5E1C               	subwf	___lwmod@dividend,f,c
  6257  0024B8  501F               	movf	___lwmod@divisor+1,w,c
  6258  0024BA  5A1D               	subwfb	___lwmod@dividend+1,f,c
  6259  0024BC                     l5043:
  6260  0024BC  90D8               	bcf	status,0,c
  6261  0024BE  321F               	rrcf	___lwmod@divisor+1,f,c
  6262  0024C0  321E               	rrcf	___lwmod@divisor,f,c
  6263  0024C2  2E20               	decfsz	___lwmod@counter,f,c
  6264  0024C4  D7F1               	goto	l5039
  6265  0024C6                     l1208:
  6266  0024C6  C01C  F01C         	movff	___lwmod@dividend,?___lwmod
  6267  0024CA  C01D  F01D         	movff	___lwmod@dividend+1,?___lwmod+1
  6268  0024CE  0012               	return		;funcret
  6269  0024D0                     __end_of___lwmod:
  6270                           	opt stack 0
  6271                           tblptru	equ	0xFF8
  6272                           tblptrh	equ	0xFF7
  6273                           tblptrl	equ	0xFF6
  6274                           tablat	equ	0xFF5
  6275                           prodh	equ	0xFF4
  6276                           prodl	equ	0xFF3
  6277                           intcon	equ	0xFF2
  6278                           intcon2	equ	0xFF1
  6279                           postinc0	equ	0xFEE
  6280                           wreg	equ	0xFE8
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           postdec2	equ	0xFDD
  6284                           fsr2h	equ	0xFDA
  6285                           fsr2l	equ	0xFD9
  6286                           status	equ	0xFD8
  6287                           
  6288 ;; *************** function ___lwdiv *****************
  6289 ;; Defined at:
  6290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  dividend        2   20[COMRAM] unsigned int 
  6293 ;;  divisor         2   22[COMRAM] unsigned int 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  quotient        2   25[COMRAM] unsigned int 
  6296 ;;  counter         1   24[COMRAM] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  2   20[COMRAM] unsigned int 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:        7 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    2
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_printf
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	text19
  6321  0023AC                     __ptext19:
  6322                           	opt stack 0
  6323  0023AC                     ___lwdiv:
  6324                           	opt stack 27
  6325                           
  6326                           ;incstack = 0
  6327  0023AC  0E00               	movlw	0
  6328  0023AE  6E1B               	movwf	___lwdiv@quotient+1,c
  6329  0023B0  0E00               	movlw	0
  6330  0023B2  6E1A               	movwf	___lwdiv@quotient,c
  6331  0023B4  5017               	movf	___lwdiv@divisor,w,c
  6332  0023B6  1018               	iorwf	___lwdiv@divisor+1,w,c
  6333  0023B8  B4D8               	btfsc	status,2,c
  6334  0023BA  D01C               	goto	l1198
  6335  0023BC  0E01               	movlw	1
  6336  0023BE  6E19               	movwf	___lwdiv@counter,c
  6337  0023C0  D004               	goto	l5017
  6338  0023C2                     l5015:
  6339  0023C2  90D8               	bcf	status,0,c
  6340  0023C4  3617               	rlcf	___lwdiv@divisor,f,c
  6341  0023C6  3618               	rlcf	___lwdiv@divisor+1,f,c
  6342  0023C8  2A19               	incf	___lwdiv@counter,f,c
  6343  0023CA                     l5017:
  6344  0023CA  AE18               	btfss	___lwdiv@divisor+1,7,c
  6345  0023CC  D7FA               	goto	l5015
  6346  0023CE                     l5019:
  6347  0023CE  90D8               	bcf	status,0,c
  6348  0023D0  361A               	rlcf	___lwdiv@quotient,f,c
  6349  0023D2  361B               	rlcf	___lwdiv@quotient+1,f,c
  6350  0023D4  5017               	movf	___lwdiv@divisor,w,c
  6351  0023D6  5C15               	subwf	___lwdiv@dividend,w,c
  6352  0023D8  5018               	movf	___lwdiv@divisor+1,w,c
  6353  0023DA  5816               	subwfb	___lwdiv@dividend+1,w,c
  6354  0023DC  A0D8               	btfss	status,0,c
  6355  0023DE  D005               	goto	l5027
  6356  0023E0  5017               	movf	___lwdiv@divisor,w,c
  6357  0023E2  5E15               	subwf	___lwdiv@dividend,f,c
  6358  0023E4  5018               	movf	___lwdiv@divisor+1,w,c
  6359  0023E6  5A16               	subwfb	___lwdiv@dividend+1,f,c
  6360  0023E8  801A               	bsf	___lwdiv@quotient,0,c
  6361  0023EA                     l5027:
  6362  0023EA  90D8               	bcf	status,0,c
  6363  0023EC  3218               	rrcf	___lwdiv@divisor+1,f,c
  6364  0023EE  3217               	rrcf	___lwdiv@divisor,f,c
  6365  0023F0  2E19               	decfsz	___lwdiv@counter,f,c
  6366  0023F2  D7ED               	goto	l5019
  6367  0023F4                     l1198:
  6368  0023F4  C01A  F015         	movff	___lwdiv@quotient,?___lwdiv
  6369  0023F8  C01B  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6370  0023FC  0012               	return		;funcret
  6371  0023FE                     __end_of___lwdiv:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           intcon	equ	0xFF2
  6380                           intcon2	equ	0xFF1
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _lcdInst *****************
  6391 ;; Defined at:
  6392 ;;		line 22 in file "lcd.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  data            1    wreg     unsigned char 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  data            1   22[COMRAM] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      void 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2, status,0, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;Total ram usage:        1 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    3
  6413 ;; This function calls:
  6414 ;;		_lcdNibble
  6415 ;; This function is called by:
  6416 ;;		_main
  6417 ;;		_initLCD
  6418 ;;		_homescreen
  6419 ;;		_displayLog
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           	psect	text20
  6424  00264A                     __ptext20:
  6425                           	opt stack 0
  6426  00264A                     _lcdInst:
  6427                           	opt stack 27
  6428                           
  6429                           ;incstack = 0
  6430                           ;lcdInst@data stored from wreg
  6431  00264A  6E17               	movwf	lcdInst@data,c
  6432                           
  6433                           ;lcd.c: 23: LATDbits.LATD2 = 0;
  6434  00264C  948C               	bcf	3980,2,c	;volatile
  6435                           
  6436                           ;lcd.c: 24: lcdNibble(data);
  6437  00264E  5017               	movf	lcdInst@data,w,c
  6438  002650  ECAB  F011         	call	_lcdNibble
  6439  002654  0012               	return		;funcret
  6440  002656                     __end_of_lcdInst:
  6441                           	opt stack 0
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           intcon2	equ	0xFF1
  6450                           postinc0	equ	0xFEE
  6451                           wreg	equ	0xFE8
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _lcdNibble *****************
  6460 ;; Defined at:
  6461 ;;		line 32 in file "lcd.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  data            1    wreg     unsigned char 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  data            1   21[COMRAM] unsigned char 
  6466 ;;  temp            1   20[COMRAM] unsigned char 
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      void 
  6469 ;; Registers used:
  6470 ;;		wreg, status,2, status,0
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;Total ram usage:        2 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    2
  6483 ;; This function calls:
  6484 ;;		Nothing
  6485 ;; This function is called by:
  6486 ;;		_lcdInst
  6487 ;;		_putch
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text21
  6492  002356                     __ptext21:
  6493                           	opt stack 0
  6494  002356                     _lcdNibble:
  6495                           	opt stack 26
  6496                           
  6497                           ;incstack = 0
  6498                           ;lcdNibble@data stored from wreg
  6499  002356  6E16               	movwf	lcdNibble@data,c
  6500                           
  6501                           ;lcd.c: 34: char temp = data & 0xF0;
  6502  002358  5016               	movf	lcdNibble@data,w,c
  6503  00235A  0BF0               	andlw	240
  6504  00235C  6E15               	movwf	lcdNibble@temp,c
  6505                           
  6506                           ;lcd.c: 35: LATD = LATD & 0x0F;
  6507  00235E  508C               	movf	3980,w,c	;volatile
  6508  002360  0B0F               	andlw	15
  6509  002362  6E8C               	movwf	3980,c	;volatile
  6510                           
  6511                           ;lcd.c: 36: LATD = temp | LATD;
  6512  002364  5015               	movf	lcdNibble@temp,w,c
  6513  002366  108C               	iorwf	3980,w,c	;volatile
  6514  002368  6E8C               	movwf	3980,c	;volatile
  6515                           
  6516                           ;lcd.c: 38: LATDbits.LATD3 = 0;
  6517  00236A  968C               	bcf	3980,3,c	;volatile
  6518                           
  6519                           ;lcd.c: 39: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6520  00236C  0E42               	movlw	66
  6521  00236E                     u7927:
  6522  00236E  2EE8               	decfsz	wreg,f,c
  6523  002370  D7FE               	bra	u7927
  6524  002372  D000               	nop2	
  6525                           
  6526                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  6527  002374  868C               	bsf	3980,3,c	;volatile
  6528                           
  6529                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6530  002376  0E42               	movlw	66
  6531  002378                     u7937:
  6532  002378  2EE8               	decfsz	wreg,f,c
  6533  00237A  D7FE               	bra	u7937
  6534  00237C  D000               	nop2	
  6535                           
  6536                           ;lcd.c: 43: data = data << 4;
  6537  00237E  3816               	swapf	lcdNibble@data,w,c
  6538  002380  0BF0               	andlw	240
  6539  002382  6E16               	movwf	lcdNibble@data,c
  6540                           
  6541                           ;lcd.c: 45: temp = data & 0xF0;
  6542  002384  5016               	movf	lcdNibble@data,w,c
  6543  002386  0BF0               	andlw	240
  6544  002388  6E15               	movwf	lcdNibble@temp,c
  6545                           
  6546                           ;lcd.c: 46: LATD = LATD & 0x0F;
  6547  00238A  508C               	movf	3980,w,c	;volatile
  6548  00238C  0B0F               	andlw	15
  6549  00238E  6E8C               	movwf	3980,c	;volatile
  6550                           
  6551                           ;lcd.c: 47: LATD = temp | LATD;
  6552  002390  5015               	movf	lcdNibble@temp,w,c
  6553  002392  108C               	iorwf	3980,w,c	;volatile
  6554  002394  6E8C               	movwf	3980,c	;volatile
  6555                           
  6556                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  6557  002396  968C               	bcf	3980,3,c	;volatile
  6558                           
  6559                           ;lcd.c: 50: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6560  002398  0E42               	movlw	66
  6561  00239A                     u7947:
  6562  00239A  2EE8               	decfsz	wreg,f,c
  6563  00239C  D7FE               	bra	u7947
  6564  00239E  D000               	nop2	
  6565                           
  6566                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  6567  0023A0  868C               	bsf	3980,3,c	;volatile
  6568                           
  6569                           ;lcd.c: 52: _delay((unsigned long)((25)*(32000000/4000000.0)));
  6570  0023A2  0E42               	movlw	66
  6571  0023A4                     u7957:
  6572  0023A4  2EE8               	decfsz	wreg,f,c
  6573  0023A6  D7FE               	bra	u7957
  6574  0023A8  D000               	nop2	
  6575  0023AA  0012               	return		;funcret
  6576  0023AC                     __end_of_lcdNibble:
  6577                           	opt stack 0
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           intcon2	equ	0xFF1
  6586                           postinc0	equ	0xFEE
  6587                           wreg	equ	0xFE8
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           fsr2h	equ	0xFDA
  6592                           fsr2l	equ	0xFD9
  6593                           status	equ	0xFD8
  6594                           
  6595 ;; *************** function _keycheck *****************
  6596 ;; Defined at:
  6597 ;;		line 12 in file "interface.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;Total ram usage:        0 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    2
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_main
  6622 ;;		_displayLog
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text22
  6627  0025F8                     __ptext22:
  6628                           	opt stack 0
  6629  0025F8                     _keycheck:
  6630                           	opt stack 28
  6631  0025F8                     l611:
  6632  0025F8  A281               	btfss	3969,1,c	;volatile
  6633  0025FA  D7FE               	goto	l611
  6634                           
  6635                           ;interface.c: 14: keypress = (PORTB & 0xF0)>>4;
  6636  0025FC  3881               	swapf	3969,w,c	;volatile
  6637  0025FE  0B0F               	andlw	15
  6638  002600  0B0F               	andlw	15
  6639  002602  6E60               	movwf	_keypress,c	;volatile
  6640  002604                     l614:
  6641  002604  B281               	btfsc	3969,1,c	;volatile
  6642  002606  D7FE               	goto	l614
  6643                           
  6644                           ;interface.c: 16: __nop();
  6645  002608  F000               	nop	
  6646                           
  6647                           ;interface.c: 17: return;
  6648  00260A  0012               	return		;funcret
  6649  00260C                     __end_of_keycheck:
  6650                           	opt stack 0
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           intcon2	equ	0xFF1
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           indf2	equ	0xFDF
  6662                           postinc2	equ	0xFDE
  6663                           postdec2	equ	0xFDD
  6664                           fsr2h	equ	0xFDA
  6665                           fsr2l	equ	0xFD9
  6666                           status	equ	0xFD8
  6667                           
  6668 ;; *************** function _calibrateWheels *****************
  6669 ;; Defined at:
  6670 ;;		line 31 in file "logic.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  i               2   25[COMRAM] int 
  6675 ;;  prev            2   23[COMRAM] int 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:        4 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    3
  6692 ;; This function calls:
  6693 ;;		_readADC
  6694 ;;		_startTMR1
  6695 ;;		_updateS1
  6696 ;;		_updateS3
  6697 ;; This function is called by:
  6698 ;;		_main
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text23
  6703  001942                     __ptext23:
  6704                           	opt stack 0
  6705  001942                     _calibrateWheels:
  6706                           	opt stack 27
  6707                           
  6708                           ;logic.c: 32: TMR1ON = 0;
  6709                           
  6710                           ;incstack = 0
  6711  001942  90CD               	bcf	4045,0,c	;volatile
  6712                           
  6713                           ;logic.c: 33: int i = 1;
  6714  001944  0E00               	movlw	0
  6715  001946  6E1B               	movwf	calibrateWheels@i+1,c
  6716  001948  0E01               	movlw	1
  6717  00194A  6E1A               	movwf	calibrateWheels@i,c
  6718  00194C                     l5493:
  6719                           
  6720                           ;logic.c: 36: if (i < 20){updateS1(1);}
  6721  00194C  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6722  00194E  D006               	goto	l5495
  6723  001950  501B               	movf	calibrateWheels@i+1,w,c
  6724  001952  E10B               	bnz	l5497
  6725  001954  0E14               	movlw	20
  6726  001956  5C1A               	subwf	calibrateWheels@i,w,c
  6727  001958  B0D8               	btfsc	status,0,c
  6728  00195A  D007               	goto	l5497
  6729  00195C                     l5495:
  6730  00195C  0E00               	movlw	0
  6731  00195E  6E16               	movwf	updateS1@mode+1,c
  6732  001960  0E01               	movlw	1
  6733  001962  6E15               	movwf	updateS1@mode,c
  6734  001964  ECF5  F009         	call	_updateS1	;wreg free
  6735  001968  D031               	goto	l5511
  6736  00196A                     l5497:
  6737                           
  6738                           ;logic.c: 37: else if(i<(20+40)){updateS1(2);}
  6739  00196A  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6740  00196C  D006               	goto	l5499
  6741  00196E  501B               	movf	calibrateWheels@i+1,w,c
  6742  001970  E10B               	bnz	l5501
  6743  001972  0E3C               	movlw	60
  6744  001974  5C1A               	subwf	calibrateWheels@i,w,c
  6745  001976  B0D8               	btfsc	status,0,c
  6746  001978  D007               	goto	l5501
  6747  00197A                     l5499:
  6748  00197A  0E00               	movlw	0
  6749  00197C  6E16               	movwf	updateS1@mode+1,c
  6750  00197E  0E02               	movlw	2
  6751  001980  6E15               	movwf	updateS1@mode,c
  6752  001982  ECF5  F009         	call	_updateS1	;wreg free
  6753  001986  D022               	goto	l5511
  6754  001988                     l5501:
  6755                           
  6756                           ;logic.c: 38: else if(i<(20+40+80)){updateS1(1);}
  6757  001988  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6758  00198A  D006               	goto	l5503
  6759  00198C  501B               	movf	calibrateWheels@i+1,w,c
  6760  00198E  E10B               	bnz	l5505
  6761  001990  0E8C               	movlw	140
  6762  001992  5C1A               	subwf	calibrateWheels@i,w,c
  6763  001994  B0D8               	btfsc	status,0,c
  6764  001996  D007               	goto	l5505
  6765  001998                     l5503:
  6766  001998  0E00               	movlw	0
  6767  00199A  6E16               	movwf	updateS1@mode+1,c
  6768  00199C  0E01               	movlw	1
  6769  00199E  6E15               	movwf	updateS1@mode,c
  6770  0019A0  ECF5  F009         	call	_updateS1	;wreg free
  6771  0019A4  D013               	goto	l5511
  6772  0019A6                     l5505:
  6773                           
  6774                           ;logic.c: 39: else if(i<(20+40+80+100)){updateS1(2);}
  6775  0019A6  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6776  0019A8  D006               	goto	l5507
  6777  0019AA  501B               	movf	calibrateWheels@i+1,w,c
  6778  0019AC  E10B               	bnz	l5509
  6779  0019AE  0EF0               	movlw	240
  6780  0019B0  5C1A               	subwf	calibrateWheels@i,w,c
  6781  0019B2  B0D8               	btfsc	status,0,c
  6782  0019B4  D007               	goto	l5509
  6783  0019B6                     l5507:
  6784  0019B6  0E00               	movlw	0
  6785  0019B8  6E16               	movwf	updateS1@mode+1,c
  6786  0019BA  0E02               	movlw	2
  6787  0019BC  6E15               	movwf	updateS1@mode,c
  6788  0019BE  ECF5  F009         	call	_updateS1	;wreg free
  6789  0019C2  D004               	goto	l5511
  6790  0019C4                     l5509:
  6791                           
  6792                           ;logic.c: 40: else{i=1;}
  6793  0019C4  0E00               	movlw	0
  6794  0019C6  6E1B               	movwf	calibrateWheels@i+1,c
  6795  0019C8  0E01               	movlw	1
  6796  0019CA  6E1A               	movwf	calibrateWheels@i,c
  6797  0019CC                     l5511:
  6798                           
  6799                           ;logic.c: 42: i++;
  6800  0019CC  4A1A               	infsnz	calibrateWheels@i,f,c
  6801  0019CE  2A1B               	incf	calibrateWheels@i+1,f,c
  6802                           
  6803                           ;logic.c: 43: if (i==1){prev = 0;}
  6804  0019D0  041A               	decf	calibrateWheels@i,w,c
  6805  0019D2  101B               	iorwf	calibrateWheels@i+1,w,c
  6806  0019D4  A4D8               	btfss	status,2,c
  6807  0019D6  D005               	goto	l706
  6808  0019D8  0E00               	movlw	0
  6809  0019DA  6E19               	movwf	calibrateWheels@prev+1,c
  6810  0019DC  0E00               	movlw	0
  6811  0019DE  6E18               	movwf	calibrateWheels@prev,c
  6812  0019E0  D004               	goto	l5517
  6813  0019E2                     l706:
  6814                           
  6815                           ;logic.c: 44: else{prev = ADRES;}
  6816  0019E2  CFC3 F018          	movff	4035,calibrateWheels@prev	;volatile
  6817  0019E6  CFC4 F019          	movff	4036,calibrateWheels@prev+1	;volatile
  6818  0019EA                     l5517:
  6819                           
  6820                           ;logic.c: 45: readADC(1);
  6821  0019EA  0E01               	movlw	1
  6822  0019EC  ECD1  F012         	call	_readADC
  6823                           
  6824                           ;logic.c: 46: }while(ADRES>prev || ADRES<0x3aa);
  6825  0019F0  50C3               	movf	4035,w,c	;volatile
  6826  0019F2  5C18               	subwf	calibrateWheels@prev,w,c
  6827  0019F4  50C4               	movf	4036,w,c	;volatile
  6828  0019F6  5819               	subwfb	calibrateWheels@prev+1,w,c
  6829  0019F8  A0D8               	btfss	status,0,c
  6830  0019FA  D7A8               	goto	l5493
  6831  0019FC  0EAA               	movlw	170
  6832  0019FE  5CC3               	subwf	4035,w,c	;volatile
  6833  001A00  0E03               	movlw	3
  6834  001A02  58C4               	subwfb	4036,w,c	;volatile
  6835  001A04  A0D8               	btfss	status,0,c
  6836  001A06  D7A2               	goto	l5493
  6837  001A08                     l5523:
  6838                           
  6839                           ;logic.c: 49: if (i < 20){updateS3(1);}
  6840  001A08  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6841  001A0A  D006               	goto	l5525
  6842  001A0C  501B               	movf	calibrateWheels@i+1,w,c
  6843  001A0E  E10B               	bnz	l5527
  6844  001A10  0E14               	movlw	20
  6845  001A12  5C1A               	subwf	calibrateWheels@i,w,c
  6846  001A14  B0D8               	btfsc	status,0,c
  6847  001A16  D007               	goto	l5527
  6848  001A18                     l5525:
  6849  001A18  0E00               	movlw	0
  6850  001A1A  6E16               	movwf	updateS3@mode+1,c
  6851  001A1C  0E01               	movlw	1
  6852  001A1E  6E15               	movwf	updateS3@mode,c
  6853  001A20  EC65  F00D         	call	_updateS3	;wreg free
  6854  001A24  D031               	goto	l5541
  6855  001A26                     l5527:
  6856                           
  6857                           ;logic.c: 50: else if(i<(20+40)){updateS3(2);}
  6858  001A26  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6859  001A28  D006               	goto	l5529
  6860  001A2A  501B               	movf	calibrateWheels@i+1,w,c
  6861  001A2C  E10B               	bnz	l5531
  6862  001A2E  0E3C               	movlw	60
  6863  001A30  5C1A               	subwf	calibrateWheels@i,w,c
  6864  001A32  B0D8               	btfsc	status,0,c
  6865  001A34  D007               	goto	l5531
  6866  001A36                     l5529:
  6867  001A36  0E00               	movlw	0
  6868  001A38  6E16               	movwf	updateS3@mode+1,c
  6869  001A3A  0E02               	movlw	2
  6870  001A3C  6E15               	movwf	updateS3@mode,c
  6871  001A3E  EC65  F00D         	call	_updateS3	;wreg free
  6872  001A42  D022               	goto	l5541
  6873  001A44                     l5531:
  6874                           
  6875                           ;logic.c: 51: else if(i<(20+40+80)){updateS3(1);}
  6876  001A44  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6877  001A46  D006               	goto	l5533
  6878  001A48  501B               	movf	calibrateWheels@i+1,w,c
  6879  001A4A  E10B               	bnz	l5535
  6880  001A4C  0E8C               	movlw	140
  6881  001A4E  5C1A               	subwf	calibrateWheels@i,w,c
  6882  001A50  B0D8               	btfsc	status,0,c
  6883  001A52  D007               	goto	l5535
  6884  001A54                     l5533:
  6885  001A54  0E00               	movlw	0
  6886  001A56  6E16               	movwf	updateS3@mode+1,c
  6887  001A58  0E01               	movlw	1
  6888  001A5A  6E15               	movwf	updateS3@mode,c
  6889  001A5C  EC65  F00D         	call	_updateS3	;wreg free
  6890  001A60  D013               	goto	l5541
  6891  001A62                     l5535:
  6892                           
  6893                           ;logic.c: 52: else if(i<(20+40+80+100)){updateS3(2);}
  6894  001A62  BE1B               	btfsc	calibrateWheels@i+1,7,c
  6895  001A64  D006               	goto	l5537
  6896  001A66  501B               	movf	calibrateWheels@i+1,w,c
  6897  001A68  E10B               	bnz	l5539
  6898  001A6A  0EF0               	movlw	240
  6899  001A6C  5C1A               	subwf	calibrateWheels@i,w,c
  6900  001A6E  B0D8               	btfsc	status,0,c
  6901  001A70  D007               	goto	l5539
  6902  001A72                     l5537:
  6903  001A72  0E00               	movlw	0
  6904  001A74  6E16               	movwf	updateS3@mode+1,c
  6905  001A76  0E02               	movlw	2
  6906  001A78  6E15               	movwf	updateS3@mode,c
  6907  001A7A  EC65  F00D         	call	_updateS3	;wreg free
  6908  001A7E  D004               	goto	l5541
  6909  001A80                     l5539:
  6910                           
  6911                           ;logic.c: 53: else{i=1;}
  6912  001A80  0E00               	movlw	0
  6913  001A82  6E1B               	movwf	calibrateWheels@i+1,c
  6914  001A84  0E01               	movlw	1
  6915  001A86  6E1A               	movwf	calibrateWheels@i,c
  6916  001A88                     l5541:
  6917                           
  6918                           ;logic.c: 55: i++;
  6919  001A88  4A1A               	infsnz	calibrateWheels@i,f,c
  6920  001A8A  2A1B               	incf	calibrateWheels@i+1,f,c
  6921                           
  6922                           ;logic.c: 56: if (i==1){prev = 0;}
  6923  001A8C  041A               	decf	calibrateWheels@i,w,c
  6924  001A8E  101B               	iorwf	calibrateWheels@i+1,w,c
  6925  001A90  A4D8               	btfss	status,2,c
  6926  001A92  D005               	goto	l718
  6927  001A94  0E00               	movlw	0
  6928  001A96  6E19               	movwf	calibrateWheels@prev+1,c
  6929  001A98  0E00               	movlw	0
  6930  001A9A  6E18               	movwf	calibrateWheels@prev,c
  6931  001A9C  D004               	goto	l5547
  6932  001A9E                     l718:
  6933                           
  6934                           ;logic.c: 57: else{prev = ADRES;}
  6935  001A9E  CFC3 F018          	movff	4035,calibrateWheels@prev	;volatile
  6936  001AA2  CFC4 F019          	movff	4036,calibrateWheels@prev+1	;volatile
  6937  001AA6                     l5547:
  6938                           
  6939                           ;logic.c: 58: readADC(5);
  6940  001AA6  0E05               	movlw	5
  6941  001AA8  ECD1  F012         	call	_readADC
  6942                           
  6943                           ;logic.c: 59: }while(ADRES>prev || ADRES<0x3aa);
  6944  001AAC  50C3               	movf	4035,w,c	;volatile
  6945  001AAE  5C18               	subwf	calibrateWheels@prev,w,c
  6946  001AB0  50C4               	movf	4036,w,c	;volatile
  6947  001AB2  5819               	subwfb	calibrateWheels@prev+1,w,c
  6948  001AB4  A0D8               	btfss	status,0,c
  6949  001AB6  D7A8               	goto	l5523
  6950  001AB8  0EAA               	movlw	170
  6951  001ABA  5CC3               	subwf	4035,w,c	;volatile
  6952  001ABC  0E03               	movlw	3
  6953  001ABE  58C4               	subwfb	4036,w,c	;volatile
  6954  001AC0  A0D8               	btfss	status,0,c
  6955  001AC2  D7A2               	goto	l5523
  6956                           
  6957                           ;logic.c: 60: startTMR1();
  6958  001AC4  EC0F  F013         	call	_startTMR1	;wreg free
  6959  001AC8  0012               	return		;funcret
  6960  001ACA                     __end_of_calibrateWheels:
  6961                           	opt stack 0
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           intcon	equ	0xFF2
  6969                           intcon2	equ	0xFF1
  6970                           postinc0	equ	0xFEE
  6971                           wreg	equ	0xFE8
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           
  6979 ;; *************** function _updateS3 *****************
  6980 ;; Defined at:
  6981 ;;		line 168 in file "motors.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  mode            2   20[COMRAM] int 
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;		None
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      void 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2, status,0
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;Total ram usage:        3 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    2
  7002 ;; This function calls:
  7003 ;;		Nothing
  7004 ;; This function is called by:
  7005 ;;		_main
  7006 ;;		_calibrateWheels
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text24
  7011  001ACA                     __ptext24:
  7012                           	opt stack 0
  7013  001ACA                     _updateS3:
  7014                           	opt stack 28
  7015                           
  7016                           ;motors.c: 169: _delay((unsigned long)((5)*(32000000/4000.0)));
  7017                           
  7018                           ;incstack = 0
  7019  001ACA  0E34               	movlw	52
  7020  001ACC  6E17               	movwf	??_updateS3& (0+255),c
  7021  001ACE  0EF2               	movlw	242
  7022  001AD0                     u7967:
  7023  001AD0  2EE8               	decfsz	wreg,f,c
  7024  001AD2  D7FE               	bra	u7967
  7025  001AD4  2E17               	decfsz	??_updateS3& (0+255),f,c
  7026  001AD6  D7FC               	bra	u7967
  7027                           
  7028                           ;motors.c: 171: if(mode == 0){
  7029  001AD8  5015               	movf	updateS3@mode,w,c
  7030  001ADA  1016               	iorwf	updateS3@mode+1,w,c
  7031  001ADC  A4D8               	btfss	status,2,c
  7032  001ADE  D005               	goto	l5147
  7033                           
  7034                           ;motors.c: 172: LATEbits.LATE2 = 0;
  7035  001AE0  948D               	bcf	3981,2,c	;volatile
  7036                           
  7037                           ;motors.c: 173: LATEbits.LATE1 = 0;
  7038  001AE2  928D               	bcf	3981,1,c	;volatile
  7039                           
  7040                           ;motors.c: 174: LATAbits.LATA4 = 0;
  7041  001AE4  9889               	bcf	3977,4,c	;volatile
  7042                           
  7043                           ;motors.c: 175: LATDbits.LATD0 = 0;
  7044  001AE6  908C               	bcf	3980,0,c	;volatile
  7045                           
  7046                           ;motors.c: 176: }
  7047  001AE8  0012               	return	
  7048  001AEA                     l5147:
  7049                           
  7050                           ;motors.c: 177: else if(mode == 4){
  7051  001AEA  0E04               	movlw	4
  7052  001AEC  1815               	xorwf	updateS3@mode,w,c
  7053  001AEE  1016               	iorwf	updateS3@mode+1,w,c
  7054  001AF0  A4D8               	btfss	status,2,c
  7055  001AF2  D005               	goto	l5151
  7056                           
  7057                           ;motors.c: 178: LATEbits.LATE2 = 1;
  7058  001AF4  848D               	bsf	3981,2,c	;volatile
  7059                           
  7060                           ;motors.c: 179: LATEbits.LATE1 = 0;
  7061  001AF6  928D               	bcf	3981,1,c	;volatile
  7062                           
  7063                           ;motors.c: 180: LATAbits.LATA4 = 0;
  7064  001AF8  9889               	bcf	3977,4,c	;volatile
  7065                           
  7066                           ;motors.c: 181: LATDbits.LATD0 = 0;
  7067  001AFA  908C               	bcf	3980,0,c	;volatile
  7068                           
  7069                           ;motors.c: 182: }
  7070  001AFC  0012               	return	
  7071  001AFE                     l5151:
  7072                           
  7073                           ;motors.c: 183: else if(mode == 3){
  7074  001AFE  0E03               	movlw	3
  7075  001B00  1815               	xorwf	updateS3@mode,w,c
  7076  001B02  1016               	iorwf	updateS3@mode+1,w,c
  7077  001B04  A4D8               	btfss	status,2,c
  7078  001B06  D042               	goto	l5175
  7079                           
  7080                           ;motors.c: 184: t3++;
  7081  001B08  4A42               	infsnz	_t3,f,c
  7082  001B0A  2A43               	incf	_t3+1,f,c
  7083                           
  7084                           ;motors.c: 185: if (t3>8) {t3=1;}
  7085  001B0C  BE43               	btfsc	_t3+1,7,c
  7086  001B0E  D00A               	goto	l5159
  7087  001B10  5043               	movf	_t3+1,w,c
  7088  001B12  E104               	bnz	u6130
  7089  001B14  0E09               	movlw	9
  7090  001B16  5C42               	subwf	_t3,w,c
  7091  001B18  A0D8               	btfss	status,0,c
  7092  001B1A  D004               	goto	l5159
  7093  001B1C                     u6130:
  7094  001B1C  0E00               	movlw	0
  7095  001B1E  6E43               	movwf	_t3+1,c
  7096  001B20  0E01               	movlw	1
  7097  001B22  6E42               	movwf	_t3,c
  7098  001B24                     l5159:
  7099                           
  7100                           ;motors.c: 186: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  7101  001B24  0442               	decf	_t3,w,c
  7102  001B26  1043               	iorwf	_t3+1,w,c
  7103  001B28  B4D8               	btfsc	status,2,c
  7104  001B2A  D005               	goto	l549
  7105  001B2C  0E08               	movlw	8
  7106  001B2E  1842               	xorwf	_t3,w,c
  7107  001B30  1043               	iorwf	_t3+1,w,c
  7108  001B32  A4D8               	btfss	status,2,c
  7109  001B34  D002               	goto	l547
  7110  001B36                     l549:
  7111  001B36  848D               	bsf	3981,2,c	;volatile
  7112  001B38  D001               	goto	l5163
  7113  001B3A                     l547:
  7114                           
  7115                           ;motors.c: 187: else{LATEbits.LATE2 = 0;}
  7116  001B3A  948D               	bcf	3981,2,c	;volatile
  7117  001B3C                     l5163:
  7118                           
  7119                           ;motors.c: 188: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  7120  001B3C  0E02               	movlw	2
  7121  001B3E  1842               	xorwf	_t3,w,c
  7122  001B40  1043               	iorwf	_t3+1,w,c
  7123  001B42  B4D8               	btfsc	status,2,c
  7124  001B44  D005               	goto	l553
  7125  001B46  0E07               	movlw	7
  7126  001B48  1842               	xorwf	_t3,w,c
  7127  001B4A  1043               	iorwf	_t3+1,w,c
  7128  001B4C  A4D8               	btfss	status,2,c
  7129  001B4E  D002               	goto	l551
  7130  001B50                     l553:
  7131  001B50  828D               	bsf	3981,1,c	;volatile
  7132  001B52  D001               	goto	l5167
  7133  001B54                     l551:
  7134                           
  7135                           ;motors.c: 189: else{LATEbits.LATE1 = 0;}
  7136  001B54  928D               	bcf	3981,1,c	;volatile
  7137  001B56                     l5167:
  7138                           
  7139                           ;motors.c: 190: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  7140  001B56  0E03               	movlw	3
  7141  001B58  1842               	xorwf	_t3,w,c
  7142  001B5A  1043               	iorwf	_t3+1,w,c
  7143  001B5C  B4D8               	btfsc	status,2,c
  7144  001B5E  D005               	goto	l557
  7145  001B60  0E06               	movlw	6
  7146  001B62  1842               	xorwf	_t3,w,c
  7147  001B64  1043               	iorwf	_t3+1,w,c
  7148  001B66  A4D8               	btfss	status,2,c
  7149  001B68  D002               	goto	l555
  7150  001B6A                     l557:
  7151  001B6A  8889               	bsf	3977,4,c	;volatile
  7152  001B6C  D001               	goto	l5171
  7153  001B6E                     l555:
  7154                           
  7155                           ;motors.c: 191: else{LATAbits.LATA4 = 0;}
  7156  001B6E  9889               	bcf	3977,4,c	;volatile
  7157  001B70                     l5171:
  7158                           
  7159                           ;motors.c: 192: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  7160  001B70  0E04               	movlw	4
  7161  001B72  1842               	xorwf	_t3,w,c
  7162  001B74  1043               	iorwf	_t3+1,w,c
  7163  001B76  B4D8               	btfsc	status,2,c
  7164  001B78  D005               	goto	l561
  7165  001B7A  0E05               	movlw	5
  7166  001B7C  1842               	xorwf	_t3,w,c
  7167  001B7E  1043               	iorwf	_t3+1,w,c
  7168  001B80  A4D8               	btfss	status,2,c
  7169  001B82  D002               	goto	l559
  7170  001B84                     l561:
  7171  001B84  808C               	bsf	3980,0,c	;volatile
  7172  001B86  0012               	return	
  7173  001B88                     l559:
  7174                           
  7175                           ;motors.c: 193: else{LATDbits.LATD0 = 0;}
  7176  001B88  908C               	bcf	3980,0,c	;volatile
  7177                           
  7178                           ;motors.c: 194: }
  7179  001B8A  0012               	return	
  7180  001B8C                     l5175:
  7181                           
  7182                           ;motors.c: 195: else{
  7183                           ;motors.c: 196: if(mode == 1){
  7184  001B8C  0415               	decf	updateS3@mode,w,c
  7185  001B8E  1016               	iorwf	updateS3@mode+1,w,c
  7186  001B90  A4D8               	btfss	status,2,c
  7187  001B92  D00E               	goto	l5183
  7188                           
  7189                           ;motors.c: 197: s3 ++;
  7190  001B94  4A48               	infsnz	_s3,f,c
  7191  001B96  2A49               	incf	_s3+1,f,c
  7192                           
  7193                           ;motors.c: 198: if (s3>4) {s3=1;}
  7194  001B98  BE49               	btfsc	_s3+1,7,c
  7195  001B9A  D01D               	goto	l5191
  7196  001B9C  5049               	movf	_s3+1,w,c
  7197  001B9E  E104               	bnz	u6230
  7198  001BA0  0E05               	movlw	5
  7199  001BA2  5C48               	subwf	_s3,w,c
  7200  001BA4  A0D8               	btfss	status,0,c
  7201  001BA6  D017               	goto	l5191
  7202  001BA8                     u6230:
  7203  001BA8  0E00               	movlw	0
  7204  001BAA  6E49               	movwf	_s3+1,c
  7205  001BAC  0E01               	movlw	1
  7206  001BAE  D012               	goto	L10
  7207  001BB0                     l5183:
  7208                           
  7209                           ;motors.c: 200: else if(mode == 2){
  7210  001BB0  0E02               	movlw	2
  7211  001BB2  1815               	xorwf	updateS3@mode,w,c
  7212  001BB4  1016               	iorwf	updateS3@mode+1,w,c
  7213  001BB6  A4D8               	btfss	status,2,c
  7214  001BB8  D00E               	goto	l5191
  7215                           
  7216                           ;motors.c: 201: s3 --;
  7217  001BBA  0648               	decf	_s3,f,c
  7218  001BBC  A0D8               	btfss	status,0,c
  7219  001BBE  0649               	decf	_s3+1,f,c
  7220                           
  7221                           ;motors.c: 202: if (s3<1) {s3=4;}
  7222  001BC0  BE49               	btfsc	_s3+1,7,c
  7223  001BC2  D005               	goto	l5189
  7224  001BC4  5049               	movf	_s3+1,w,c
  7225  001BC6  E107               	bnz	l5191
  7226  001BC8  0448               	decf	_s3,w,c
  7227  001BCA  B0D8               	btfsc	status,0,c
  7228  001BCC  D004               	goto	l5191
  7229  001BCE                     l5189:
  7230  001BCE  0E00               	movlw	0
  7231  001BD0  6E49               	movwf	_s3+1,c
  7232  001BD2  0E04               	movlw	4
  7233  001BD4                     L10:
  7234  001BD4  6E48               	movwf	_s3,c
  7235  001BD6                     l5191:
  7236                           
  7237                           ;motors.c: 203: }
  7238                           ;motors.c: 204: if (s3 == 1){LATEbits.LATE2 = 1;}
  7239  001BD6  0448               	decf	_s3,w,c
  7240  001BD8  1049               	iorwf	_s3+1,w,c
  7241  001BDA  A4D8               	btfss	status,2,c
  7242  001BDC  D002               	goto	l569
  7243  001BDE  848D               	bsf	3981,2,c	;volatile
  7244  001BE0  D001               	goto	l5195
  7245  001BE2                     l569:
  7246                           
  7247                           ;motors.c: 205: else{LATEbits.LATE2 = 0;}
  7248  001BE2  948D               	bcf	3981,2,c	;volatile
  7249  001BE4                     l5195:
  7250                           
  7251                           ;motors.c: 206: if (s3 == 2){LATEbits.LATE1 = 1;}
  7252  001BE4  0E02               	movlw	2
  7253  001BE6  1848               	xorwf	_s3,w,c
  7254  001BE8  1049               	iorwf	_s3+1,w,c
  7255  001BEA  A4D8               	btfss	status,2,c
  7256  001BEC  D002               	goto	l571
  7257  001BEE  828D               	bsf	3981,1,c	;volatile
  7258  001BF0  D001               	goto	l5199
  7259  001BF2                     l571:
  7260                           
  7261                           ;motors.c: 207: else{LATEbits.LATE1 = 0;}
  7262  001BF2  928D               	bcf	3981,1,c	;volatile
  7263  001BF4                     l5199:
  7264                           
  7265                           ;motors.c: 208: if (s3 == 3){LATAbits.LATA4 = 1;}
  7266  001BF4  0E03               	movlw	3
  7267  001BF6  1848               	xorwf	_s3,w,c
  7268  001BF8  1049               	iorwf	_s3+1,w,c
  7269  001BFA  A4D8               	btfss	status,2,c
  7270  001BFC  D002               	goto	l573
  7271  001BFE  8889               	bsf	3977,4,c	;volatile
  7272  001C00  D001               	goto	l5203
  7273  001C02                     l573:
  7274                           
  7275                           ;motors.c: 209: else{LATAbits.LATA4 = 0;}
  7276  001C02  9889               	bcf	3977,4,c	;volatile
  7277  001C04                     l5203:
  7278                           
  7279                           ;motors.c: 210: if (s3 == 4){LATDbits.LATD0 = 1;}
  7280  001C04  0E04               	movlw	4
  7281  001C06  1848               	xorwf	_s3,w,c
  7282  001C08  1049               	iorwf	_s3+1,w,c
  7283  001C0A  A4D8               	btfss	status,2,c
  7284  001C0C  D002               	goto	l575
  7285  001C0E  808C               	bsf	3980,0,c	;volatile
  7286  001C10  0012               	return	
  7287  001C12                     l575:
  7288                           
  7289                           ;motors.c: 211: else{LATDbits.LATD0 = 0;}
  7290  001C12  908C               	bcf	3980,0,c	;volatile
  7291  001C14  0012               	return	
  7292  001C16                     __end_of_updateS3:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           intcon	equ	0xFF2
  7301                           intcon2	equ	0xFF1
  7302                           postinc0	equ	0xFEE
  7303                           wreg	equ	0xFE8
  7304                           indf2	equ	0xFDF
  7305                           postinc2	equ	0xFDE
  7306                           postdec2	equ	0xFDD
  7307                           fsr2h	equ	0xFDA
  7308                           fsr2l	equ	0xFD9
  7309                           status	equ	0xFD8
  7310                           
  7311 ;; *************** function _updateS1 *****************
  7312 ;; Defined at:
  7313 ;;		line 66 in file "motors.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  mode            2   20[COMRAM] int 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;		None
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  1    wreg      void 
  7320 ;; Registers used:
  7321 ;;		wreg, status,2, status,0
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7327 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;Total ram usage:        3 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    2
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_main
  7338 ;;		_calibrateWheels
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text25
  7343  0013EA                     __ptext25:
  7344                           	opt stack 0
  7345  0013EA                     _updateS1:
  7346                           	opt stack 28
  7347                           
  7348                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  7349                           
  7350                           ;incstack = 0
  7351  0013EA  0E34               	movlw	52
  7352  0013EC  6E17               	movwf	??_updateS1& (0+255),c
  7353  0013EE  0EF2               	movlw	242
  7354  0013F0                     u7977:
  7355  0013F0  2EE8               	decfsz	wreg,f,c
  7356  0013F2  D7FE               	bra	u7977
  7357  0013F4  2E17               	decfsz	??_updateS1& (0+255),f,c
  7358  0013F6  D7FC               	bra	u7977
  7359                           
  7360                           ;motors.c: 69: if(mode == 0){
  7361  0013F8  5015               	movf	updateS1@mode,w,c
  7362  0013FA  1016               	iorwf	updateS1@mode+1,w,c
  7363  0013FC  A4D8               	btfss	status,2,c
  7364  0013FE  D005               	goto	l5053
  7365                           
  7366                           ;motors.c: 70: LATDbits.LATD1 = 0;
  7367  001400  928C               	bcf	3980,1,c	;volatile
  7368                           
  7369                           ;motors.c: 71: LATBbits.LATB3 = 0;
  7370  001402  968A               	bcf	3978,3,c	;volatile
  7371                           
  7372                           ;motors.c: 72: LATBbits.LATB2 = 0;
  7373  001404  948A               	bcf	3978,2,c	;volatile
  7374                           
  7375                           ;motors.c: 73: LATBbits.LATB0 = 0;
  7376  001406  908A               	bcf	3978,0,c	;volatile
  7377                           
  7378                           ;motors.c: 74: }
  7379  001408  0012               	return	
  7380  00140A                     l5053:
  7381                           
  7382                           ;motors.c: 75: else if(mode == 3){
  7383  00140A  0E03               	movlw	3
  7384  00140C  1815               	xorwf	updateS1@mode,w,c
  7385  00140E  1016               	iorwf	updateS1@mode+1,w,c
  7386  001410  A4D8               	btfss	status,2,c
  7387  001412  D049               	goto	l5079
  7388                           
  7389                           ;motors.c: 76: t++;
  7390  001414  4A46               	infsnz	_t,f,c
  7391  001416  2A47               	incf	_t+1,f,c
  7392                           
  7393                           ;motors.c: 77: if (t>8) {t=1;}
  7394  001418  BE47               	btfsc	_t+1,7,c
  7395  00141A  D00A               	goto	l5061
  7396  00141C  5047               	movf	_t+1,w,c
  7397  00141E  E104               	bnz	u5830
  7398  001420  0E09               	movlw	9
  7399  001422  5C46               	subwf	_t,w,c
  7400  001424  A0D8               	btfss	status,0,c
  7401  001426  D004               	goto	l5061
  7402  001428                     u5830:
  7403  001428  0E00               	movlw	0
  7404  00142A  6E47               	movwf	_t+1,c
  7405  00142C  0E01               	movlw	1
  7406  00142E  6E46               	movwf	_t,c
  7407  001430                     l5061:
  7408                           
  7409                           ;motors.c: 78: _delay((unsigned long)((5)*(32000000/4000.0)));
  7410  001430  0E34               	movlw	52
  7411  001432  6E17               	movwf	??_updateS1& (0+255),c
  7412  001434  0EF2               	movlw	242
  7413  001436                     u7987:
  7414  001436  2EE8               	decfsz	wreg,f,c
  7415  001438  D7FE               	bra	u7987
  7416  00143A  2E17               	decfsz	??_updateS1& (0+255),f,c
  7417  00143C  D7FC               	bra	u7987
  7418                           
  7419                           ;motors.c: 79: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  7420  00143E  0446               	decf	_t,w,c
  7421  001440  1047               	iorwf	_t+1,w,c
  7422  001442  B4D8               	btfsc	status,2,c
  7423  001444  D005               	goto	l457
  7424  001446  0E08               	movlw	8
  7425  001448  1846               	xorwf	_t,w,c
  7426  00144A  1047               	iorwf	_t+1,w,c
  7427  00144C  A4D8               	btfss	status,2,c
  7428  00144E  D002               	goto	l455
  7429  001450                     l457:
  7430  001450  828C               	bsf	3980,1,c	;volatile
  7431  001452  D001               	goto	l5067
  7432  001454                     l455:
  7433                           
  7434                           ;motors.c: 80: else{LATDbits.LATD1 = 0;}
  7435  001454  928C               	bcf	3980,1,c	;volatile
  7436  001456                     l5067:
  7437                           
  7438                           ;motors.c: 81: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  7439  001456  0E02               	movlw	2
  7440  001458  1846               	xorwf	_t,w,c
  7441  00145A  1047               	iorwf	_t+1,w,c
  7442  00145C  B4D8               	btfsc	status,2,c
  7443  00145E  D005               	goto	l461
  7444  001460  0E07               	movlw	7
  7445  001462  1846               	xorwf	_t,w,c
  7446  001464  1047               	iorwf	_t+1,w,c
  7447  001466  A4D8               	btfss	status,2,c
  7448  001468  D002               	goto	l459
  7449  00146A                     l461:
  7450  00146A  868A               	bsf	3978,3,c	;volatile
  7451  00146C  D001               	goto	l5071
  7452  00146E                     l459:
  7453                           
  7454                           ;motors.c: 82: else{LATBbits.LATB3 = 0;}
  7455  00146E  968A               	bcf	3978,3,c	;volatile
  7456  001470                     l5071:
  7457                           
  7458                           ;motors.c: 83: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  7459  001470  0E03               	movlw	3
  7460  001472  1846               	xorwf	_t,w,c
  7461  001474  1047               	iorwf	_t+1,w,c
  7462  001476  B4D8               	btfsc	status,2,c
  7463  001478  D005               	goto	l465
  7464  00147A  0E06               	movlw	6
  7465  00147C  1846               	xorwf	_t,w,c
  7466  00147E  1047               	iorwf	_t+1,w,c
  7467  001480  A4D8               	btfss	status,2,c
  7468  001482  D002               	goto	l463
  7469  001484                     l465:
  7470  001484  848A               	bsf	3978,2,c	;volatile
  7471  001486  D001               	goto	l5075
  7472  001488                     l463:
  7473                           
  7474                           ;motors.c: 84: else{LATBbits.LATB2 = 0;}
  7475  001488  948A               	bcf	3978,2,c	;volatile
  7476  00148A                     l5075:
  7477                           
  7478                           ;motors.c: 85: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  7479  00148A  0E04               	movlw	4
  7480  00148C  1846               	xorwf	_t,w,c
  7481  00148E  1047               	iorwf	_t+1,w,c
  7482  001490  B4D8               	btfsc	status,2,c
  7483  001492  D005               	goto	l469
  7484  001494  0E05               	movlw	5
  7485  001496  1846               	xorwf	_t,w,c
  7486  001498  1047               	iorwf	_t+1,w,c
  7487  00149A  A4D8               	btfss	status,2,c
  7488  00149C  D002               	goto	l467
  7489  00149E                     l469:
  7490  00149E  808A               	bsf	3978,0,c	;volatile
  7491  0014A0  0012               	return	
  7492  0014A2                     l467:
  7493                           
  7494                           ;motors.c: 86: else{LATBbits.LATB0 = 0;}
  7495  0014A2  908A               	bcf	3978,0,c	;volatile
  7496                           
  7497                           ;motors.c: 87: }
  7498  0014A4  0012               	return	
  7499  0014A6                     l5079:
  7500                           
  7501                           ;motors.c: 88: else{
  7502                           ;motors.c: 89: _delay((unsigned long)((10)*(32000000/4000.0)));
  7503  0014A6  0E68               	movlw	104
  7504  0014A8  6E17               	movwf	??_updateS1& (0+255),c
  7505  0014AA  0EE4               	movlw	228
  7506  0014AC                     u7997:
  7507  0014AC  2EE8               	decfsz	wreg,f,c
  7508  0014AE  D7FE               	bra	u7997
  7509  0014B0  2E17               	decfsz	??_updateS1& (0+255),f,c
  7510  0014B2  D7FC               	bra	u7997
  7511  0014B4  D000               	nop2	
  7512                           
  7513                           ;motors.c: 91: if(mode == 1 || mode == 5){
  7514  0014B6  0415               	decf	updateS1@mode,w,c
  7515  0014B8  1016               	iorwf	updateS1@mode+1,w,c
  7516  0014BA  B4D8               	btfsc	status,2,c
  7517  0014BC  D005               	goto	l5085
  7518  0014BE  0E05               	movlw	5
  7519  0014C0  1815               	xorwf	updateS1@mode,w,c
  7520  0014C2  1016               	iorwf	updateS1@mode+1,w,c
  7521  0014C4  A4D8               	btfss	status,2,c
  7522  0014C6  D00E               	goto	l5091
  7523  0014C8                     l5085:
  7524                           
  7525                           ;motors.c: 92: s1 ++;
  7526  0014C8  4A4C               	infsnz	_s1,f,c
  7527  0014CA  2A4D               	incf	_s1+1,f,c
  7528                           
  7529                           ;motors.c: 93: if (s1>4) {s1=1;}
  7530  0014CC  BE4D               	btfsc	_s1+1,7,c
  7531  0014CE  D022               	goto	l5101
  7532  0014D0  504D               	movf	_s1+1,w,c
  7533  0014D2  E104               	bnz	u5940
  7534  0014D4  0E05               	movlw	5
  7535  0014D6  5C4C               	subwf	_s1,w,c
  7536  0014D8  A0D8               	btfss	status,0,c
  7537  0014DA  D01C               	goto	l5101
  7538  0014DC                     u5940:
  7539  0014DC  0E00               	movlw	0
  7540  0014DE  6E4D               	movwf	_s1+1,c
  7541  0014E0  0E01               	movlw	1
  7542  0014E2  D017               	goto	L11
  7543  0014E4                     l5091:
  7544                           
  7545                           ;motors.c: 96: else if(mode == 2 || mode==6){
  7546  0014E4  0E02               	movlw	2
  7547  0014E6  1815               	xorwf	updateS1@mode,w,c
  7548  0014E8  1016               	iorwf	updateS1@mode+1,w,c
  7549  0014EA  B4D8               	btfsc	status,2,c
  7550  0014EC  D005               	goto	l5095
  7551  0014EE  0E06               	movlw	6
  7552  0014F0  1815               	xorwf	updateS1@mode,w,c
  7553  0014F2  1016               	iorwf	updateS1@mode+1,w,c
  7554  0014F4  A4D8               	btfss	status,2,c
  7555  0014F6  D00E               	goto	l5101
  7556  0014F8                     l5095:
  7557                           
  7558                           ;motors.c: 97: s1 --;
  7559  0014F8  064C               	decf	_s1,f,c
  7560  0014FA  A0D8               	btfss	status,0,c
  7561  0014FC  064D               	decf	_s1+1,f,c
  7562                           
  7563                           ;motors.c: 98: if (s1<1) {s1=4;}
  7564  0014FE  BE4D               	btfsc	_s1+1,7,c
  7565  001500  D005               	goto	l5099
  7566  001502  504D               	movf	_s1+1,w,c
  7567  001504  E107               	bnz	l5101
  7568  001506  044C               	decf	_s1,w,c
  7569  001508  B0D8               	btfsc	status,0,c
  7570  00150A  D004               	goto	l5101
  7571  00150C                     l5099:
  7572  00150C  0E00               	movlw	0
  7573  00150E  6E4D               	movwf	_s1+1,c
  7574  001510  0E04               	movlw	4
  7575  001512                     L11:
  7576  001512  6E4C               	movwf	_s1,c
  7577  001514                     l5101:
  7578                           
  7579                           ;motors.c: 99: }
  7580                           ;motors.c: 101: if(mode == 1 || mode ==2){
  7581  001514  0415               	decf	updateS1@mode,w,c
  7582  001516  1016               	iorwf	updateS1@mode+1,w,c
  7583  001518  B4D8               	btfsc	status,2,c
  7584  00151A  D005               	goto	l5105
  7585  00151C  0E02               	movlw	2
  7586  00151E  1815               	xorwf	updateS1@mode,w,c
  7587  001520  1016               	iorwf	updateS1@mode+1,w,c
  7588  001522  A4D8               	btfss	status,2,c
  7589  001524  D01F               	goto	l5121
  7590  001526                     l5105:
  7591                           
  7592                           ;motors.c: 102: if (s1 == 1){LATDbits.LATD1 = 1;}
  7593  001526  044C               	decf	_s1,w,c
  7594  001528  104D               	iorwf	_s1+1,w,c
  7595  00152A  A4D8               	btfss	status,2,c
  7596  00152C  D002               	goto	l484
  7597  00152E  828C               	bsf	3980,1,c	;volatile
  7598  001530  D001               	goto	l5109
  7599  001532                     l484:
  7600                           
  7601                           ;motors.c: 103: else{LATDbits.LATD1 = 0;}
  7602  001532  928C               	bcf	3980,1,c	;volatile
  7603  001534                     l5109:
  7604                           
  7605                           ;motors.c: 104: if (s1 == 2){LATBbits.LATB3 = 1;}
  7606  001534  0E02               	movlw	2
  7607  001536  184C               	xorwf	_s1,w,c
  7608  001538  104D               	iorwf	_s1+1,w,c
  7609  00153A  A4D8               	btfss	status,2,c
  7610  00153C  D002               	goto	l486
  7611  00153E  868A               	bsf	3978,3,c	;volatile
  7612  001540  D001               	goto	l5113
  7613  001542                     l486:
  7614                           
  7615                           ;motors.c: 105: else{LATBbits.LATB3 = 0;}
  7616  001542  968A               	bcf	3978,3,c	;volatile
  7617  001544                     l5113:
  7618                           
  7619                           ;motors.c: 106: if (s1 == 3){LATBbits.LATB2 = 1;}
  7620  001544  0E03               	movlw	3
  7621  001546  184C               	xorwf	_s1,w,c
  7622  001548  104D               	iorwf	_s1+1,w,c
  7623  00154A  A4D8               	btfss	status,2,c
  7624  00154C  D002               	goto	l488
  7625  00154E  848A               	bsf	3978,2,c	;volatile
  7626  001550  D001               	goto	l5117
  7627  001552                     l488:
  7628                           
  7629                           ;motors.c: 107: else{LATBbits.LATB2 = 0;}
  7630  001552  948A               	bcf	3978,2,c	;volatile
  7631  001554                     l5117:
  7632                           
  7633                           ;motors.c: 108: if (s1 == 4){LATBbits.LATB0 = 1;}
  7634  001554  0E04               	movlw	4
  7635  001556  184C               	xorwf	_s1,w,c
  7636  001558  104D               	iorwf	_s1+1,w,c
  7637  00155A  A4D8               	btfss	status,2,c
  7638  00155C  D002               	goto	l490
  7639  00155E  808A               	bsf	3978,0,c	;volatile
  7640  001560  D001               	goto	l5121
  7641  001562                     l490:
  7642                           
  7643                           ;motors.c: 109: else{LATBbits.LATB0 = 0;}
  7644  001562  908A               	bcf	3978,0,c	;volatile
  7645  001564                     l5121:
  7646                           
  7647                           ;motors.c: 110: }
  7648                           ;motors.c: 111: if(mode == 5 || mode ==6){
  7649  001564  0E05               	movlw	5
  7650  001566  1815               	xorwf	updateS1@mode,w,c
  7651  001568  1016               	iorwf	updateS1@mode+1,w,c
  7652  00156A  B4D8               	btfsc	status,2,c
  7653  00156C  D005               	goto	l5125
  7654  00156E  0E06               	movlw	6
  7655  001570  1815               	xorwf	updateS1@mode,w,c
  7656  001572  1016               	iorwf	updateS1@mode+1,w,c
  7657  001574  A4D8               	btfss	status,2,c
  7658  001576  0012               	return	
  7659  001578                     l5125:
  7660                           
  7661                           ;motors.c: 112: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  7662  001578  044C               	decf	_s1,w,c
  7663  00157A  104D               	iorwf	_s1+1,w,c
  7664  00157C  A4D8               	btfss	status,2,c
  7665  00157E  D004               	goto	l5129
  7666  001580  828C               	bsf	3980,1,c	;volatile
  7667  001582  868A               	bsf	3978,3,c	;volatile
  7668  001584  948A               	bcf	3978,2,c	;volatile
  7669  001586  908A               	bcf	3978,0,c	;volatile
  7670  001588                     l5129:
  7671                           
  7672                           ;motors.c: 113: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  7673  001588  0E02               	movlw	2
  7674  00158A  184C               	xorwf	_s1,w,c
  7675  00158C  104D               	iorwf	_s1+1,w,c
  7676  00158E  A4D8               	btfss	status,2,c
  7677  001590  D004               	goto	l5133
  7678  001592  928C               	bcf	3980,1,c	;volatile
  7679  001594  868A               	bsf	3978,3,c	;volatile
  7680  001596  848A               	bsf	3978,2,c	;volatile
  7681  001598  908A               	bcf	3978,0,c	;volatile
  7682  00159A                     l5133:
  7683                           
  7684                           ;motors.c: 114: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  7685  00159A  0E03               	movlw	3
  7686  00159C  184C               	xorwf	_s1,w,c
  7687  00159E  104D               	iorwf	_s1+1,w,c
  7688  0015A0  A4D8               	btfss	status,2,c
  7689  0015A2  D004               	goto	l5137
  7690  0015A4  928C               	bcf	3980,1,c	;volatile
  7691  0015A6  968A               	bcf	3978,3,c	;volatile
  7692  0015A8  848A               	bsf	3978,2,c	;volatile
  7693  0015AA  808A               	bsf	3978,0,c	;volatile
  7694  0015AC                     l5137:
  7695                           
  7696                           ;motors.c: 115: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  7697  0015AC  0E04               	movlw	4
  7698  0015AE  184C               	xorwf	_s1,w,c
  7699  0015B0  104D               	iorwf	_s1+1,w,c
  7700  0015B2  A4D8               	btfss	status,2,c
  7701  0015B4  0012               	return	
  7702  0015B6  828C               	bsf	3980,1,c	;volatile
  7703  0015B8  968A               	bcf	3978,3,c	;volatile
  7704  0015BA  948A               	bcf	3978,2,c	;volatile
  7705  0015BC  808A               	bsf	3978,0,c	;volatile
  7706  0015BE  0012               	return	
  7707  0015C0                     __end_of_updateS1:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           intcon2	equ	0xFF1
  7717                           postinc0	equ	0xFEE
  7718                           wreg	equ	0xFE8
  7719                           indf2	equ	0xFDF
  7720                           postinc2	equ	0xFDE
  7721                           postdec2	equ	0xFDD
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function _startTMR1 *****************
  7727 ;; Defined at:
  7728 ;;		line 24 in file "logic.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;		None
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;		None
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  2   24[None  ] int 
  7735 ;; Registers used:
  7736 ;;		wreg, status,2
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;Total ram usage:        0 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    2
  7749 ;; This function calls:
  7750 ;;		Nothing
  7751 ;; This function is called by:
  7752 ;;		_main
  7753 ;;		_calibrateWheels
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           	psect	text26
  7758  00261E                     __ptext26:
  7759                           	opt stack 0
  7760  00261E                     _startTMR1:
  7761                           	opt stack 28
  7762                           
  7763                           ;logic.c: 25: T1CON = 0b10110000;
  7764                           
  7765                           ;incstack = 0
  7766  00261E  0EB0               	movlw	176
  7767  002620  6ECD               	movwf	4045,c	;volatile
  7768                           
  7769                           ;logic.c: 26: TMR1H = 0b11101001;
  7770  002622  0EE9               	movlw	233
  7771  002624  6ECF               	movwf	4047,c	;volatile
  7772                           
  7773                           ;logic.c: 27: TMR1L = 0b01011011;
  7774  002626  0E5B               	movlw	91
  7775  002628  6ECE               	movwf	4046,c	;volatile
  7776                           
  7777                           ;logic.c: 28: TMR1ON = 1;
  7778  00262A  80CD               	bsf	4045,0,c	;volatile
  7779  00262C  0012               	return		;funcret
  7780  00262E                     __end_of_startTMR1:
  7781                           	opt stack 0
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           intcon	equ	0xFF2
  7789                           intcon2	equ	0xFF1
  7790                           postinc0	equ	0xFEE
  7791                           wreg	equ	0xFE8
  7792                           indf2	equ	0xFDF
  7793                           postinc2	equ	0xFDE
  7794                           postdec2	equ	0xFDD
  7795                           fsr2h	equ	0xFDA
  7796                           fsr2l	equ	0xFD9
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function _readADC *****************
  7800 ;; Defined at:
  7801 ;;		line 9 in file "logic.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  channel         1    wreg     unsigned char 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  channel         1   21[COMRAM] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      void 
  7808 ;; Registers used:
  7809 ;;		wreg, status,2, status,0, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;Total ram usage:        2 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    2
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_main
  7826 ;;		_calibrateWheels
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text27
  7831  0025A2                     __ptext27:
  7832                           	opt stack 0
  7833  0025A2                     _readADC:
  7834                           	opt stack 28
  7835                           
  7836                           ;incstack = 0
  7837                           ;readADC@channel stored from wreg
  7838  0025A2  6E16               	movwf	readADC@channel,c
  7839                           
  7840                           ;logic.c: 11: ADCON0 = ((channel <<2));
  7841  0025A4  4416               	rlncf	readADC@channel,w,c
  7842  0025A6  46E8               	rlncf	wreg,f,c
  7843  0025A8  0BFC               	andlw	252
  7844  0025AA  6EC2               	movwf	4034,c	;volatile
  7845                           
  7846                           ;logic.c: 12: ADCON0bits.ADON = 1;
  7847  0025AC  80C2               	bsf	4034,0,c	;volatile
  7848                           
  7849                           ;logic.c: 13: ADCON0bits.GO = 1;
  7850  0025AE  82C2               	bsf	4034,1,c	;volatile
  7851                           
  7852                           ;logic.c: 14: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000000/4000.0)
      +                          ));}
  7853  0025B0  D007               	goto	l5375
  7854  0025B2                     l5373:
  7855  0025B2  0E34               	movlw	52
  7856  0025B4  6E15               	movwf	??_readADC& (0+255),c
  7857  0025B6  0EF2               	movlw	242
  7858  0025B8                     u8007:
  7859  0025B8  2EE8               	decfsz	wreg,f,c
  7860  0025BA  D7FE               	bra	u8007
  7861  0025BC  2E15               	decfsz	??_readADC& (0+255),f,c
  7862  0025BE  D7FC               	bra	u8007
  7863  0025C0                     l5375:
  7864  0025C0  A2C2               	btfss	4034,1,c	;volatile
  7865  0025C2  0012               	return	
  7866  0025C4  D7F6               	goto	l5373
  7867  0025C6                     __end_of_readADC:
  7868                           	opt stack 0
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           intcon2	equ	0xFF1
  7877                           postinc0	equ	0xFEE
  7878                           wreg	equ	0xFE8
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function _addRun *****************
  7887 ;; Defined at:
  7888 ;;		line 69 in file "interface.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  dur             2   24[COMRAM] int 
  7891 ;;  year            2   26[COMRAM] int 
  7892 ;;  month           2   28[COMRAM] int 
  7893 ;;  date            2   30[COMRAM] int 
  7894 ;;  hours           2   32[COMRAM] int 
  7895 ;;  mins            2   34[COMRAM] int 
  7896 ;;  secs            2   36[COMRAM] int 
  7897 ;;  sodaT           2   38[COMRAM] int 
  7898 ;;  sodaNT          2   40[COMRAM] int 
  7899 ;;  soupL           2   42[COMRAM] int 
  7900 ;;  soupNL          2   44[COMRAM] int 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  currRun         2   49[COMRAM] int 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      void 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7912 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7915 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;Total ram usage:       27 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    3
  7919 ;; This function calls:
  7920 ;;		_eepromRead
  7921 ;;		_eepromWrite
  7922 ;; This function is called by:
  7923 ;;		_main
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           	psect	text28
  7928  001EAE                     __ptext28:
  7929                           	opt stack 0
  7930  001EAE                     _addRun:
  7931                           	opt stack 27
  7932                           
  7933                           ;interface.c: 70: int currRun = eepromRead(0)-1;
  7934                           
  7935                           ;incstack = 0
  7936  001EAE  0EFF               	movlw	255
  7937  001EB0  6E2F               	movwf	??_addRun& (0+255),c
  7938  001EB2  0EFF               	movlw	255
  7939  001EB4  6E30               	movwf	(??_addRun+1)& (0+255),c
  7940  001EB6  0E00               	movlw	0
  7941  001EB8  EC84  F012         	call	_eepromRead
  7942  001EBC  6E31               	movwf	(??_addRun+2)& (0+255),c
  7943  001EBE  502F               	movf	??_addRun,w,c
  7944  001EC0  2431               	addwf	??_addRun+2,w,c
  7945  001EC2  6E32               	movwf	addRun@currRun,c
  7946  001EC4  0E00               	movlw	0
  7947  001EC6  BE31               	btfsc	??_addRun+2,7,c
  7948  001EC8  0EFF               	movlw	255
  7949  001ECA  2030               	addwfc	??_addRun+1,w,c
  7950  001ECC  6E33               	movwf	addRun@currRun+1,c
  7951                           
  7952                           ;interface.c: 71: if (currRun < 1){currRun = 4;}
  7953  001ECE  BE33               	btfsc	addRun@currRun+1,7,c
  7954  001ED0  D005               	goto	l5677
  7955  001ED2  5033               	movf	addRun@currRun+1,w,c
  7956  001ED4  E107               	bnz	l5679
  7957  001ED6  0432               	decf	addRun@currRun,w,c
  7958  001ED8  B0D8               	btfsc	status,0,c
  7959  001EDA  D004               	goto	l5679
  7960  001EDC                     l5677:
  7961  001EDC  0E00               	movlw	0
  7962  001EDE  6E33               	movwf	addRun@currRun+1,c
  7963  001EE0  0E04               	movlw	4
  7964  001EE2  6E32               	movwf	addRun@currRun,c
  7965  001EE4                     l5679:
  7966                           
  7967                           ;interface.c: 72: eepromWrite(0, currRun);
  7968  001EE4  C032  F015         	movff	addRun@currRun,eepromWrite@data
  7969  001EE8  0E00               	movlw	0
  7970  001EEA  EC68  F012         	call	_eepromWrite
  7971                           
  7972                           ;interface.c: 74: eepromWrite(currRun*0x10 + 1, dur);
  7973  001EEE  C019  F015         	movff	addRun@dur,eepromWrite@data
  7974  001EF2  C032  F02F         	movff	addRun@currRun,??_addRun
  7975  001EF6  3A2F               	swapf	??_addRun,f,c
  7976  001EF8  0EF0               	movlw	240
  7977  001EFA  162F               	andwf	??_addRun,f,c
  7978  001EFC  282F               	incf	??_addRun,w,c
  7979  001EFE  EC68  F012         	call	_eepromWrite
  7980                           
  7981                           ;interface.c: 75: eepromWrite(currRun*0x10 + 2, year);
  7982  001F02  C01B  F015         	movff	addRun@year,eepromWrite@data
  7983  001F06  C032  F02F         	movff	addRun@currRun,??_addRun
  7984  001F0A  3A2F               	swapf	??_addRun,f,c
  7985  001F0C  0EF0               	movlw	240
  7986  001F0E  162F               	andwf	??_addRun,f,c
  7987  001F10  502F               	movf	??_addRun,w,c
  7988  001F12  0F02               	addlw	2
  7989  001F14  EC68  F012         	call	_eepromWrite
  7990                           
  7991                           ;interface.c: 76: eepromWrite(currRun*0x10 + 3, month);
  7992  001F18  C01D  F015         	movff	addRun@month,eepromWrite@data
  7993  001F1C  C032  F02F         	movff	addRun@currRun,??_addRun
  7994  001F20  3A2F               	swapf	??_addRun,f,c
  7995  001F22  0EF0               	movlw	240
  7996  001F24  162F               	andwf	??_addRun,f,c
  7997  001F26  502F               	movf	??_addRun,w,c
  7998  001F28  0F03               	addlw	3
  7999  001F2A  EC68  F012         	call	_eepromWrite
  8000                           
  8001                           ;interface.c: 77: eepromWrite(currRun*0x10 + 4, date);
  8002  001F2E  C01F  F015         	movff	addRun@date,eepromWrite@data
  8003  001F32  C032  F02F         	movff	addRun@currRun,??_addRun
  8004  001F36  3A2F               	swapf	??_addRun,f,c
  8005  001F38  0EF0               	movlw	240
  8006  001F3A  162F               	andwf	??_addRun,f,c
  8007  001F3C  502F               	movf	??_addRun,w,c
  8008  001F3E  0F04               	addlw	4
  8009  001F40  EC68  F012         	call	_eepromWrite
  8010                           
  8011                           ;interface.c: 78: eepromWrite(currRun*0x10 + 5, hours);
  8012  001F44  C021  F015         	movff	addRun@hours,eepromWrite@data
  8013  001F48  C032  F02F         	movff	addRun@currRun,??_addRun
  8014  001F4C  3A2F               	swapf	??_addRun,f,c
  8015  001F4E  0EF0               	movlw	240
  8016  001F50  162F               	andwf	??_addRun,f,c
  8017  001F52  502F               	movf	??_addRun,w,c
  8018  001F54  0F05               	addlw	5
  8019  001F56  EC68  F012         	call	_eepromWrite
  8020                           
  8021                           ;interface.c: 79: eepromWrite(currRun*0x10 + 6, mins);
  8022  001F5A  C023  F015         	movff	addRun@mins,eepromWrite@data
  8023  001F5E  C032  F02F         	movff	addRun@currRun,??_addRun
  8024  001F62  3A2F               	swapf	??_addRun,f,c
  8025  001F64  0EF0               	movlw	240
  8026  001F66  162F               	andwf	??_addRun,f,c
  8027  001F68  502F               	movf	??_addRun,w,c
  8028  001F6A  0F06               	addlw	6
  8029  001F6C  EC68  F012         	call	_eepromWrite
  8030                           
  8031                           ;interface.c: 80: eepromWrite(currRun*0x10 + 7, secs);
  8032  001F70  C025  F015         	movff	addRun@secs,eepromWrite@data
  8033  001F74  C032  F02F         	movff	addRun@currRun,??_addRun
  8034  001F78  3A2F               	swapf	??_addRun,f,c
  8035  001F7A  0EF0               	movlw	240
  8036  001F7C  162F               	andwf	??_addRun,f,c
  8037  001F7E  502F               	movf	??_addRun,w,c
  8038  001F80  0F07               	addlw	7
  8039  001F82  EC68  F012         	call	_eepromWrite
  8040                           
  8041                           ;interface.c: 81: eepromWrite(currRun*0x10 + 8, sodaT);
  8042  001F86  C027  F015         	movff	addRun@sodaT,eepromWrite@data
  8043  001F8A  C032  F02F         	movff	addRun@currRun,??_addRun
  8044  001F8E  3A2F               	swapf	??_addRun,f,c
  8045  001F90  0EF0               	movlw	240
  8046  001F92  162F               	andwf	??_addRun,f,c
  8047  001F94  502F               	movf	??_addRun,w,c
  8048  001F96  0F08               	addlw	8
  8049  001F98  EC68  F012         	call	_eepromWrite
  8050                           
  8051                           ;interface.c: 82: eepromWrite(currRun*0x10 + 9, sodaNT);
  8052  001F9C  C029  F015         	movff	addRun@sodaNT,eepromWrite@data
  8053  001FA0  C032  F02F         	movff	addRun@currRun,??_addRun
  8054  001FA4  3A2F               	swapf	??_addRun,f,c
  8055  001FA6  0EF0               	movlw	240
  8056  001FA8  162F               	andwf	??_addRun,f,c
  8057  001FAA  502F               	movf	??_addRun,w,c
  8058  001FAC  0F09               	addlw	9
  8059  001FAE  EC68  F012         	call	_eepromWrite
  8060                           
  8061                           ;interface.c: 83: eepromWrite(currRun*0x10 + 0xa, soupL);
  8062  001FB2  C02B  F015         	movff	addRun@soupL,eepromWrite@data
  8063  001FB6  C032  F02F         	movff	addRun@currRun,??_addRun
  8064  001FBA  3A2F               	swapf	??_addRun,f,c
  8065  001FBC  0EF0               	movlw	240
  8066  001FBE  162F               	andwf	??_addRun,f,c
  8067  001FC0  502F               	movf	??_addRun,w,c
  8068  001FC2  0F0A               	addlw	10
  8069  001FC4  EC68  F012         	call	_eepromWrite
  8070                           
  8071                           ;interface.c: 84: eepromWrite(currRun*0x10 + 0xb, soupNL);
  8072  001FC8  C02D  F015         	movff	addRun@soupNL,eepromWrite@data
  8073  001FCC  C032  F02F         	movff	addRun@currRun,??_addRun
  8074  001FD0  3A2F               	swapf	??_addRun,f,c
  8075  001FD2  0EF0               	movlw	240
  8076  001FD4  162F               	andwf	??_addRun,f,c
  8077  001FD6  502F               	movf	??_addRun,w,c
  8078  001FD8  0F0B               	addlw	11
  8079  001FDA  EC68  F012         	call	_eepromWrite
  8080  001FDE  0012               	return		;funcret
  8081  001FE0                     __end_of_addRun:
  8082                           	opt stack 0
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           intcon	equ	0xFF2
  8090                           intcon2	equ	0xFF1
  8091                           postinc0	equ	0xFEE
  8092                           wreg	equ	0xFE8
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _eepromWrite *****************
  8101 ;; Defined at:
  8102 ;;		line 43 in file "interface.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;  address         1    wreg     char 
  8105 ;;  data            1   20[COMRAM] char 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  address         1   23[COMRAM] char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2, status,0
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8117 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;Total ram usage:        4 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    2
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_addRun
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           	psect	text29
  8132  0024D0                     __ptext29:
  8133                           	opt stack 0
  8134  0024D0                     _eepromWrite:
  8135                           	opt stack 27
  8136                           
  8137                           ;incstack = 0
  8138                           ;eepromWrite@address stored from wreg
  8139  0024D0  6E18               	movwf	eepromWrite@address,c
  8140                           
  8141                           ;interface.c: 45: EEADRH = (signed char)(address >> 8);
  8142  0024D2  C018  F016         	movff	eepromWrite@address,??_eepromWrite
  8143  0024D6  0E08               	movlw	8
  8144  0024D8  6E17               	movwf	(??_eepromWrite+1)& (0+255),c
  8145  0024DA                     u6615:
  8146  0024DA  3416               	rlcf	??_eepromWrite,w,c
  8147  0024DC  3216               	rrcf	??_eepromWrite,f,c
  8148  0024DE  2E17               	decfsz	(??_eepromWrite+1)& (0+255),f,c
  8149  0024E0  D7FC               	goto	u6615
  8150  0024E2  5016               	movf	??_eepromWrite,w,c
  8151  0024E4  6EAA               	movwf	4010,c	;volatile
  8152                           
  8153                           ;interface.c: 46: EEADR = (signed char)address;
  8154  0024E6  C018  FFA9         	movff	eepromWrite@address,4009	;volatile
  8155                           
  8156                           ;interface.c: 48: EEDATA = data;
  8157  0024EA  C015  FFA8         	movff	eepromWrite@data,4008	;volatile
  8158                           
  8159                           ;interface.c: 49: EECON1bits.EEPGD = 0;
  8160  0024EE  9EA6               	bcf	4006,7,c	;volatile
  8161                           
  8162                           ;interface.c: 50: EECON1bits.CFGS = 0;
  8163  0024F0  9CA6               	bcf	4006,6,c	;volatile
  8164                           
  8165                           ;interface.c: 51: EECON1bits.WREN = 1;
  8166  0024F2  84A6               	bsf	4006,2,c	;volatile
  8167                           
  8168                           ;interface.c: 55: EECON2 = 0x55;
  8169  0024F4  0E55               	movlw	85
  8170  0024F6  6EA7               	movwf	4007,c	;volatile
  8171                           
  8172                           ;interface.c: 56: EECON2 = 0xAA;
  8173  0024F8  0EAA               	movlw	170
  8174  0024FA  6EA7               	movwf	4007,c	;volatile
  8175                           
  8176                           ;interface.c: 57: EECON1bits.WR = 1;
  8177  0024FC  82A6               	bsf	4006,1,c	;volatile
  8178  0024FE                     l633:
  8179  0024FE  A8A1               	btfss	4001,4,c	;volatile
  8180  002500  D7FE               	goto	l633
  8181                           
  8182                           ;interface.c: 63: }
  8183                           ;interface.c: 65: PIR2bits.EEIF = 0;
  8184  002502  98A1               	bcf	4001,4,c	;volatile
  8185                           
  8186                           ;interface.c: 66: EECON1bits.WREN = 0;
  8187  002504  94A6               	bcf	4006,2,c	;volatile
  8188  002506  0012               	return		;funcret
  8189  002508                     __end_of_eepromWrite:
  8190                           	opt stack 0
  8191                           tblptru	equ	0xFF8
  8192                           tblptrh	equ	0xFF7
  8193                           tblptrl	equ	0xFF6
  8194                           tablat	equ	0xFF5
  8195                           prodh	equ	0xFF4
  8196                           prodl	equ	0xFF3
  8197                           intcon	equ	0xFF2
  8198                           intcon2	equ	0xFF1
  8199                           postinc0	equ	0xFEE
  8200                           wreg	equ	0xFE8
  8201                           indf2	equ	0xFDF
  8202                           postinc2	equ	0xFDE
  8203                           postdec2	equ	0xFDD
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _eepromRead *****************
  8209 ;; Defined at:
  8210 ;;		line 27 in file "interface.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;  address         1    wreg     char 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  address         1   22[COMRAM] char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      char 
  8217 ;; Registers used:
  8218 ;;		wreg, status,2, status,0
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;Total ram usage:        3 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    2
  8231 ;; This function calls:
  8232 ;;		Nothing
  8233 ;; This function is called by:
  8234 ;;		_addRun
  8235 ;;		_displayLog
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text30
  8240  002508                     __ptext30:
  8241                           	opt stack 0
  8242  002508                     _eepromRead:
  8243                           	opt stack 27
  8244                           
  8245                           ;incstack = 0
  8246                           ;eepromRead@address stored from wreg
  8247  002508  6E17               	movwf	eepromRead@address,c
  8248                           
  8249                           ;interface.c: 29: EEADRH = (signed char)(address >> 8);
  8250  00250A  C017  F015         	movff	eepromRead@address,??_eepromRead
  8251  00250E  0E08               	movlw	8
  8252  002510  6E16               	movwf	(??_eepromRead+1)& (0+255),c
  8253  002512                     u6595:
  8254  002512  3415               	rlcf	??_eepromRead,w,c
  8255  002514  3215               	rrcf	??_eepromRead,f,c
  8256  002516  2E16               	decfsz	(??_eepromRead+1)& (0+255),f,c
  8257  002518  D7FC               	goto	u6595
  8258  00251A  5015               	movf	??_eepromRead,w,c
  8259  00251C  6EAA               	movwf	4010,c	;volatile
  8260                           
  8261                           ;interface.c: 30: EEADR = (signed char)address;
  8262  00251E  C017  FFA9         	movff	eepromRead@address,4009	;volatile
  8263                           
  8264                           ;interface.c: 32: EECON1bits.EEPGD = 0;
  8265  002522  9EA6               	bcf	4006,7,c	;volatile
  8266                           
  8267                           ;interface.c: 33: EECON1bits.CFGS = 0;
  8268  002524  9CA6               	bcf	4006,6,c	;volatile
  8269                           
  8270                           ;interface.c: 34: EECON1bits.RD = 1;
  8271  002526  80A6               	bsf	4006,0,c	;volatile
  8272  002528                     l627:
  8273  002528  B0A6               	btfsc	4006,0,c	;volatile
  8274  00252A  D7FE               	goto	l627
  8275                           
  8276                           ;interface.c: 40: return EEDATA;
  8277  00252C  50A8               	movf	4008,w,c	;volatile
  8278  00252E  0012               	return	
  8279  002530                     __end_of_eepromRead:
  8280                           	opt stack 0
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           intcon2	equ	0xFF1
  8289                           postinc0	equ	0xFEE
  8290                           wreg	equ	0xFE8
  8291                           indf2	equ	0xFDF
  8292                           postinc2	equ	0xFDE
  8293                           postdec2	equ	0xFDD
  8294                           fsr2h	equ	0xFDA
  8295                           fsr2l	equ	0xFD9
  8296                           status	equ	0xFD8
  8297                           
  8298 ;; *************** function ___awmod *****************
  8299 ;; Defined at:
  8300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  8301 ;; Parameters:    Size  Location     Type
  8302 ;;  dividend        2   20[COMRAM] int 
  8303 ;;  divisor         2   22[COMRAM] int 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  sign            1   25[COMRAM] unsigned char 
  8306 ;;  counter         1   24[COMRAM] unsigned char 
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  2   20[COMRAM] int 
  8309 ;; Registers used:
  8310 ;;		wreg, status,2, status,0
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;Total ram usage:        6 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:    2
  8323 ;; This function calls:
  8324 ;;		Nothing
  8325 ;; This function is called by:
  8326 ;;		_main
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           	psect	text31
  8331  002152                     __ptext31:
  8332                           	opt stack 0
  8333  002152                     ___awmod:
  8334                           	opt stack 28
  8335                           
  8336                           ;incstack = 0
  8337  002152  0E00               	movlw	0
  8338  002154  6E1A               	movwf	___awmod@sign,c
  8339  002156  AE16               	btfss	___awmod@dividend+1,7,c
  8340  002158  D006               	goto	l5711
  8341  00215A  6C15               	negf	___awmod@dividend,c
  8342  00215C  1E16               	comf	___awmod@dividend+1,f,c
  8343  00215E  B0D8               	btfsc	status,0,c
  8344  002160  2A16               	incf	___awmod@dividend+1,f,c
  8345  002162  0E01               	movlw	1
  8346  002164  6E1A               	movwf	___awmod@sign,c
  8347  002166                     l5711:
  8348  002166  AE18               	btfss	___awmod@divisor+1,7,c
  8349  002168  D004               	goto	l5715
  8350  00216A  6C17               	negf	___awmod@divisor,c
  8351  00216C  1E18               	comf	___awmod@divisor+1,f,c
  8352  00216E  B0D8               	btfsc	status,0,c
  8353  002170  2A18               	incf	___awmod@divisor+1,f,c
  8354  002172                     l5715:
  8355  002172  5017               	movf	___awmod@divisor,w,c
  8356  002174  1018               	iorwf	___awmod@divisor+1,w,c
  8357  002176  B4D8               	btfsc	status,2,c
  8358  002178  D018               	goto	l5731
  8359  00217A  0E01               	movlw	1
  8360  00217C  6E19               	movwf	___awmod@counter,c
  8361  00217E  D004               	goto	l5721
  8362  002180                     l5719:
  8363  002180  90D8               	bcf	status,0,c
  8364  002182  3617               	rlcf	___awmod@divisor,f,c
  8365  002184  3618               	rlcf	___awmod@divisor+1,f,c
  8366  002186  2A19               	incf	___awmod@counter,f,c
  8367  002188                     l5721:
  8368  002188  AE18               	btfss	___awmod@divisor+1,7,c
  8369  00218A  D7FA               	goto	l5719
  8370  00218C                     l5723:
  8371  00218C  5017               	movf	___awmod@divisor,w,c
  8372  00218E  5C15               	subwf	___awmod@dividend,w,c
  8373  002190  5018               	movf	___awmod@divisor+1,w,c
  8374  002192  5816               	subwfb	___awmod@dividend+1,w,c
  8375  002194  A0D8               	btfss	status,0,c
  8376  002196  D004               	goto	l5727
  8377  002198  5017               	movf	___awmod@divisor,w,c
  8378  00219A  5E15               	subwf	___awmod@dividend,f,c
  8379  00219C  5018               	movf	___awmod@divisor+1,w,c
  8380  00219E  5A16               	subwfb	___awmod@dividend+1,f,c
  8381  0021A0                     l5727:
  8382  0021A0  90D8               	bcf	status,0,c
  8383  0021A2  3218               	rrcf	___awmod@divisor+1,f,c
  8384  0021A4  3217               	rrcf	___awmod@divisor,f,c
  8385  0021A6  2E19               	decfsz	___awmod@counter,f,c
  8386  0021A8  D7F1               	goto	l5723
  8387  0021AA                     l5731:
  8388  0021AA  501A               	movf	___awmod@sign,w,c
  8389  0021AC  B4D8               	btfsc	status,2,c
  8390  0021AE  D004               	goto	l5735
  8391  0021B0  6C15               	negf	___awmod@dividend,c
  8392  0021B2  1E16               	comf	___awmod@dividend+1,f,c
  8393  0021B4  B0D8               	btfsc	status,0,c
  8394  0021B6  2A16               	incf	___awmod@dividend+1,f,c
  8395  0021B8                     l5735:
  8396  0021B8  C015  F015         	movff	___awmod@dividend,?___awmod
  8397  0021BC  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  8398  0021C0  0012               	return	
  8399  0021C2                     __end_of___awmod:
  8400                           	opt stack 0
  8401                           tblptru	equ	0xFF8
  8402                           tblptrh	equ	0xFF7
  8403                           tblptrl	equ	0xFF6
  8404                           tablat	equ	0xFF5
  8405                           prodh	equ	0xFF4
  8406                           prodl	equ	0xFF3
  8407                           intcon	equ	0xFF2
  8408                           intcon2	equ	0xFF1
  8409                           postinc0	equ	0xFEE
  8410                           wreg	equ	0xFE8
  8411                           indf2	equ	0xFDF
  8412                           postinc2	equ	0xFDE
  8413                           postdec2	equ	0xFDD
  8414                           fsr2h	equ	0xFDA
  8415                           fsr2l	equ	0xFD9
  8416                           status	equ	0xFD8
  8417                           
  8418 ;; *************** function _PWM2off *****************
  8419 ;; Defined at:
  8420 ;;		line 60 in file "motors.c"
  8421 ;; Parameters:    Size  Location     Type
  8422 ;;		None
  8423 ;; Auto vars:     Size  Location     Type
  8424 ;;		None
  8425 ;; Return value:  Size  Location     Type
  8426 ;;                  1    wreg      void 
  8427 ;; Registers used:
  8428 ;;		wreg, status,2
  8429 ;; Tracked objects:
  8430 ;;		On entry : 0/0
  8431 ;;		On exit  : 0/0
  8432 ;;		Unchanged: 0/0
  8433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;Total ram usage:        0 bytes
  8439 ;; Hardware stack levels used:    1
  8440 ;; Hardware stack levels required when called:    2
  8441 ;; This function calls:
  8442 ;;		Nothing
  8443 ;; This function is called by:
  8444 ;;		_main
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text32
  8449  002660                     __ptext32:
  8450                           	opt stack 0
  8451  002660                     _PWM2off:
  8452                           	opt stack 28
  8453                           
  8454                           ;motors.c: 61: CCP2CONbits.DC2B0 = 0;
  8455                           
  8456                           ;incstack = 0
  8457  002660  98BA               	bcf	4026,4,c	;volatile
  8458                           
  8459                           ;motors.c: 62: CCP2CONbits.DC2B1 = 0;
  8460  002662  9ABA               	bcf	4026,5,c	;volatile
  8461                           
  8462                           ;motors.c: 63: CCPR2L = 0;
  8463  002664  0E00               	movlw	0
  8464  002666  6EBB               	movwf	4027,c	;volatile
  8465  002668  0012               	return		;funcret
  8466  00266A                     __end_of_PWM2off:
  8467                           	opt stack 0
  8468                           tblptru	equ	0xFF8
  8469                           tblptrh	equ	0xFF7
  8470                           tblptrl	equ	0xFF6
  8471                           tablat	equ	0xFF5
  8472                           prodh	equ	0xFF4
  8473                           prodl	equ	0xFF3
  8474                           intcon	equ	0xFF2
  8475                           intcon2	equ	0xFF1
  8476                           postinc0	equ	0xFEE
  8477                           wreg	equ	0xFE8
  8478                           indf2	equ	0xFDF
  8479                           postinc2	equ	0xFDE
  8480                           postdec2	equ	0xFDD
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function _PWM2 *****************
  8486 ;; Defined at:
  8487 ;;		line 34 in file "motors.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  duty            2   20[COMRAM] int 
  8490 ;;  dir             2   22[COMRAM] int 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;		None
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      void 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;Total ram usage:        6 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    2
  8509 ;; This function calls:
  8510 ;;		Nothing
  8511 ;; This function is called by:
  8512 ;;		_main
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text33
  8517  0020DA                     __ptext33:
  8518                           	opt stack 0
  8519  0020DA                     _PWM2:
  8520                           	opt stack 28
  8521                           
  8522                           ;motors.c: 42: CCP2CONbits.DC2B0 = duty & 1;
  8523                           
  8524                           ;incstack = 0
  8525  0020DA  C015  F019         	movff	PWM2@duty,??_PWM2
  8526  0020DE  0E01               	movlw	1
  8527  0020E0  1619               	andwf	??_PWM2,f,c
  8528  0020E2  3A19               	swapf	??_PWM2,f,c
  8529  0020E4  50BA               	movf	4026,w,c	;volatile
  8530  0020E6  1819               	xorwf	??_PWM2,w,c
  8531  0020E8  0BEF               	andlw	-17
  8532  0020EA  1819               	xorwf	??_PWM2,w,c
  8533  0020EC  6EBA               	movwf	4026,c	;volatile
  8534                           
  8535                           ;motors.c: 43: CCP2CONbits.DC2B1 = (duty >> 1) & 1;
  8536  0020EE  3416               	rlcf	PWM2@duty+1,w,c
  8537  0020F0  3016               	rrcf	PWM2@duty+1,w,c
  8538  0020F2  6E1A               	movwf	(??_PWM2+1)& (0+255),c
  8539  0020F4  3015               	rrcf	PWM2@duty,w,c
  8540  0020F6  6E19               	movwf	??_PWM2& (0+255),c
  8541  0020F8  0E01               	movlw	1
  8542  0020FA  1619               	andwf	??_PWM2,f,c
  8543  0020FC  3A19               	swapf	??_PWM2,f,c
  8544  0020FE  4619               	rlncf	??_PWM2,f,c
  8545  002100  50BA               	movf	4026,w,c	;volatile
  8546  002102  1819               	xorwf	??_PWM2,w,c
  8547  002104  0BDF               	andlw	-33
  8548  002106  1819               	xorwf	??_PWM2,w,c
  8549  002108  6EBA               	movwf	4026,c	;volatile
  8550                           
  8551                           ;motors.c: 44: CCPR2L = (duty >> 2);
  8552  00210A  C015  F019         	movff	PWM2@duty,??_PWM2
  8553  00210E  C016  F01A         	movff	PWM2@duty+1,??_PWM2+1
  8554  002112  341A               	rlcf	??_PWM2+1,w,c
  8555  002114  321A               	rrcf	??_PWM2+1,f,c
  8556  002116  3219               	rrcf	??_PWM2,f,c
  8557  002118  341A               	rlcf	??_PWM2+1,w,c
  8558  00211A  321A               	rrcf	??_PWM2+1,f,c
  8559  00211C  3219               	rrcf	??_PWM2,f,c
  8560  00211E  5019               	movf	??_PWM2,w,c
  8561  002120  6EBB               	movwf	4027,c	;volatile
  8562                           
  8563                           ;motors.c: 46: LATAbits.LATA6 = 0;
  8564  002122  9C89               	bcf	3977,6,c	;volatile
  8565                           
  8566                           ;motors.c: 47: LATAbits.LATA7 = 0;
  8567  002124  9E89               	bcf	3977,7,c	;volatile
  8568                           
  8569                           ;motors.c: 48: _delay((unsigned long)((50)*(32000000/4000.0)));
  8570  002126  0E03               	movlw	3
  8571  002128  6E1A               	movwf	(??_PWM2+1)& (0+255),c
  8572  00212A  0E08               	movlw	8
  8573  00212C  6E19               	movwf	??_PWM2& (0+255),c
  8574  00212E  0E77               	movlw	119
  8575  002130                     u8017:
  8576  002130  2EE8               	decfsz	wreg,f,c
  8577  002132  D7FE               	bra	u8017
  8578  002134  2E19               	decfsz	??_PWM2& (0+255),f,c
  8579  002136  D7FC               	bra	u8017
  8580  002138  2E1A               	decfsz	(??_PWM2+1)& (0+255),f,c
  8581  00213A  D7FA               	bra	u8017
  8582  00213C  F000               	nop	
  8583                           
  8584                           ;motors.c: 49: if(dir==1){
  8585  00213E  0417               	decf	PWM2@dir,w,c
  8586  002140  1018               	iorwf	PWM2@dir+1,w,c
  8587  002142  A4D8               	btfss	status,2,c
  8588  002144  D003               	goto	l443
  8589                           
  8590                           ;motors.c: 50: LATAbits.LATA6 = 1;
  8591  002146  8C89               	bsf	3977,6,c	;volatile
  8592                           
  8593                           ;motors.c: 51: LATAbits.LATA7 = 0;
  8594  002148  9E89               	bcf	3977,7,c	;volatile
  8595                           
  8596                           ;motors.c: 52: }
  8597  00214A  0012               	return	
  8598  00214C                     l443:
  8599                           
  8600                           ;motors.c: 53: else{
  8601                           ;motors.c: 54: LATAbits.LATA6 = 0;
  8602  00214C  9C89               	bcf	3977,6,c	;volatile
  8603                           
  8604                           ;motors.c: 55: LATAbits.LATA7 = 1;
  8605  00214E  8E89               	bsf	3977,7,c	;volatile
  8606  002150  0012               	return	
  8607  002152                     __end_of_PWM2:
  8608                           	opt stack 0
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           intcon	equ	0xFF2
  8616                           intcon2	equ	0xFF1
  8617                           postinc0	equ	0xFEE
  8618                           wreg	equ	0xFE8
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           postdec2	equ	0xFDD
  8622                           fsr2h	equ	0xFDA
  8623                           fsr2l	equ	0xFD9
  8624                           status	equ	0xFD8
  8625                           
  8626 ;; *************** function _PWM1off *****************
  8627 ;; Defined at:
  8628 ;;		line 28 in file "motors.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;		None
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		wreg, status,2
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8646 ;;Total ram usage:        0 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    2
  8649 ;; This function calls:
  8650 ;;		Nothing
  8651 ;; This function is called by:
  8652 ;;		_main
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text34
  8657  00266A                     __ptext34:
  8658                           	opt stack 0
  8659  00266A                     _PWM1off:
  8660                           	opt stack 28
  8661                           
  8662                           ;motors.c: 29: CCP1CONbits.DC1B0 = 0;
  8663                           
  8664                           ;incstack = 0
  8665  00266A  98BD               	bcf	4029,4,c	;volatile
  8666                           
  8667                           ;motors.c: 30: CCP1CONbits.DC1B1 = 0;
  8668  00266C  9ABD               	bcf	4029,5,c	;volatile
  8669                           
  8670                           ;motors.c: 31: CCPR1L = 0;
  8671  00266E  0E00               	movlw	0
  8672  002670  6EBE               	movwf	4030,c	;volatile
  8673  002672  0012               	return		;funcret
  8674  002674                     __end_of_PWM1off:
  8675                           	opt stack 0
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           intcon2	equ	0xFF1
  8684                           postinc0	equ	0xFEE
  8685                           wreg	equ	0xFE8
  8686                           indf2	equ	0xFDF
  8687                           postinc2	equ	0xFDE
  8688                           postdec2	equ	0xFDD
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function _PWM1 *****************
  8694 ;; Defined at:
  8695 ;;		line 14 in file "motors.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;  duty            2   20[COMRAM] int 
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8709 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8711 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;Total ram usage:        4 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    2
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_main
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text35
  8724  0023FE                     __ptext35:
  8725                           	opt stack 0
  8726  0023FE                     _PWM1:
  8727                           	opt stack 28
  8728                           
  8729                           ;motors.c: 22: CCP1CONbits.DC1B0 = duty & 1;
  8730                           
  8731                           ;incstack = 0
  8732  0023FE  C015  F017         	movff	PWM1@duty,??_PWM1
  8733  002402  0E01               	movlw	1
  8734  002404  1617               	andwf	??_PWM1,f,c
  8735  002406  3A17               	swapf	??_PWM1,f,c
  8736  002408  50BD               	movf	4029,w,c	;volatile
  8737  00240A  1817               	xorwf	??_PWM1,w,c
  8738  00240C  0BEF               	andlw	-17
  8739  00240E  1817               	xorwf	??_PWM1,w,c
  8740  002410  6EBD               	movwf	4029,c	;volatile
  8741                           
  8742                           ;motors.c: 23: CCP1CONbits.DC1B1 = (duty >> 1) & 1;
  8743  002412  3416               	rlcf	PWM1@duty+1,w,c
  8744  002414  3016               	rrcf	PWM1@duty+1,w,c
  8745  002416  6E18               	movwf	(??_PWM1+1)& (0+255),c
  8746  002418  3015               	rrcf	PWM1@duty,w,c
  8747  00241A  6E17               	movwf	??_PWM1& (0+255),c
  8748  00241C  0E01               	movlw	1
  8749  00241E  1617               	andwf	??_PWM1,f,c
  8750  002420  3A17               	swapf	??_PWM1,f,c
  8751  002422  4617               	rlncf	??_PWM1,f,c
  8752  002424  50BD               	movf	4029,w,c	;volatile
  8753  002426  1817               	xorwf	??_PWM1,w,c
  8754  002428  0BDF               	andlw	-33
  8755  00242A  1817               	xorwf	??_PWM1,w,c
  8756  00242C  6EBD               	movwf	4029,c	;volatile
  8757                           
  8758                           ;motors.c: 24: CCPR1L = (duty >> 2);
  8759  00242E  C015  F017         	movff	PWM1@duty,??_PWM1
  8760  002432  C016  F018         	movff	PWM1@duty+1,??_PWM1+1
  8761  002436  3418               	rlcf	??_PWM1+1,w,c
  8762  002438  3218               	rrcf	??_PWM1+1,f,c
  8763  00243A  3217               	rrcf	??_PWM1,f,c
  8764  00243C  3418               	rlcf	??_PWM1+1,w,c
  8765  00243E  3218               	rrcf	??_PWM1+1,f,c
  8766  002440  3217               	rrcf	??_PWM1,f,c
  8767  002442  5017               	movf	??_PWM1,w,c
  8768  002444  6EBE               	movwf	4030,c	;volatile
  8769  002446  0012               	return		;funcret
  8770  002448                     __end_of_PWM1:
  8771                           	opt stack 0
  8772                           tblptru	equ	0xFF8
  8773                           tblptrh	equ	0xFF7
  8774                           tblptrl	equ	0xFF6
  8775                           tablat	equ	0xFF5
  8776                           prodh	equ	0xFF4
  8777                           prodl	equ	0xFF3
  8778                           intcon	equ	0xFF2
  8779                           intcon2	equ	0xFF1
  8780                           postinc0	equ	0xFEE
  8781                           wreg	equ	0xFE8
  8782                           indf2	equ	0xFDF
  8783                           postinc2	equ	0xFDE
  8784                           postdec2	equ	0xFDD
  8785                           fsr2h	equ	0xFDA
  8786                           fsr2l	equ	0xFD9
  8787                           status	equ	0xFD8
  8788                           
  8789 ;; *************** function _handler *****************
  8790 ;; Defined at:
  8791 ;;		line 27 in file "main.c"
  8792 ;; Parameters:    Size  Location     Type
  8793 ;;		None
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;		None
  8796 ;; Return value:  Size  Location     Type
  8797 ;;                  1    wreg      void 
  8798 ;; Registers used:
  8799 ;;		wreg, status,2, status,0, cstack
  8800 ;; Tracked objects:
  8801 ;;		On entry : 0/0
  8802 ;;		On exit  : 0/0
  8803 ;;		Unchanged: 0/0
  8804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8809 ;;Total ram usage:       14 bytes
  8810 ;; Hardware stack levels used:    1
  8811 ;; Hardware stack levels required when called:    1
  8812 ;; This function calls:
  8813 ;;		_updateS2
  8814 ;;		i2___awmod
  8815 ;;		i2_startTMR1
  8816 ;;		i2_updateS1
  8817 ;;		i2_updateS3
  8818 ;; This function is called by:
  8819 ;;		Interrupt level 2
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	intcode
  8824  000008                     __pintcode:
  8825                           	opt stack 0
  8826  000008                     _handler:
  8827                           	opt stack 25
  8828                           
  8829                           ;incstack = 0
  8830  000008  8261               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8831  00000A  EDCB  F00B         	call	int_func,f	;refresh shadow registers
  8832                           tblptru	equ	0xFF8
  8833                           tblptrh	equ	0xFF7
  8834                           tblptrl	equ	0xFF6
  8835                           tablat	equ	0xFF5
  8836                           prodh	equ	0xFF4
  8837                           prodl	equ	0xFF3
  8838                           intcon	equ	0xFF2
  8839                           intcon2	equ	0xFF1
  8840                           postinc0	equ	0xFEE
  8841                           wreg	equ	0xFE8
  8842                           indf2	equ	0xFDF
  8843                           postinc2	equ	0xFDE
  8844                           postdec2	equ	0xFDD
  8845                           fsr2h	equ	0xFDA
  8846                           fsr2l	equ	0xFD9
  8847                           status	equ	0xFD8
  8848                           
  8849                           	psect	intcode_body
  8850  001796                     __pintcode_body:
  8851                           	opt stack 25
  8852  001796                     int_func:
  8853                           	opt stack 25
  8854  001796  0006               	pop		; remove dummy address from shadow register refresh
  8855  001798  CFFA F007          	movff	pclath,??_handler
  8856  00179C  CFFB F008          	movff	pclatu,??_handler+1
  8857  0017A0  CFE9 F009          	movff	fsr0l,??_handler+2
  8858  0017A4  CFEA F00A          	movff	fsr0h,??_handler+3
  8859  0017A8  CFE1 F00B          	movff	fsr1l,??_handler+4
  8860  0017AC  CFE2 F00C          	movff	fsr1h,??_handler+5
  8861  0017B0  CFD9 F00D          	movff	fsr2l,??_handler+6
  8862  0017B4  CFDA F00E          	movff	fsr2h,??_handler+7
  8863  0017B8  CFF3 F00F          	movff	prodl,??_handler+8
  8864  0017BC  CFF4 F010          	movff	prodh,??_handler+9
  8865  0017C0  CFF6 F011          	movff	tblptrl,??_handler+10
  8866  0017C4  CFF7 F012          	movff	tblptrh,??_handler+11
  8867  0017C8  CFF8 F013          	movff	tblptru,??_handler+12
  8868  0017CC  CFF5 F014          	movff	tablat,??_handler+13
  8869                           
  8870                           ;main.c: 29: (INTCONbits.GIE = 0);
  8871  0017D0  9EF2               	bcf	intcon,7,c	;volatile
  8872                           
  8873                           ;main.c: 30: if(TMR0IF){
  8874  0017D2  A4F2               	btfss	intcon,2,c	;volatile
  8875  0017D4  D00D               	goto	i2l4261
  8876                           
  8877                           ;main.c: 31: TMR0IF = 0;
  8878  0017D6  94F2               	bcf	intcon,2,c	;volatile
  8879                           
  8880                           ;main.c: 32: seconds++;
  8881  0017D8  4A5E               	infsnz	_seconds,f,c
  8882  0017DA  2A5F               	incf	_seconds+1,f,c
  8883                           
  8884                           ;main.c: 33: TMR0ON = 0;
  8885  0017DC  9ED5               	bcf	4053,7,c	;volatile
  8886                           
  8887                           ;main.c: 36: T0CON = 0b00010111;
  8888  0017DE  0E17               	movlw	23
  8889  0017E0  6ED5               	movwf	4053,c	;volatile
  8890                           
  8891                           ;main.c: 37: TMR0H = 0b10000101;
  8892  0017E2  0E85               	movlw	133
  8893  0017E4  6ED7               	movwf	4055,c	;volatile
  8894                           
  8895                           ;main.c: 38: TMR0L = 0b10101110;
  8896  0017E6  0EAE               	movlw	174
  8897  0017E8  6ED6               	movwf	4054,c	;volatile
  8898                           
  8899                           ;main.c: 39: T0CON = T0CON | 0b10000000;
  8900  0017EA  50D5               	movf	4053,w,c	;volatile
  8901  0017EC  0980               	iorlw	128
  8902  0017EE  6ED5               	movwf	4053,c	;volatile
  8903  0017F0                     i2l4261:
  8904                           
  8905                           ;main.c: 40: }
  8906                           ;main.c: 42: if(TMR1IF){
  8907  0017F0  A09E               	btfss	3998,0,c	;volatile
  8908  0017F2  D089               	goto	i2l172
  8909                           
  8910                           ;main.c: 43: TMR1IF = 0;
  8911  0017F4  909E               	bcf	3998,0,c	;volatile
  8912                           
  8913                           ;main.c: 44: updateS2(S2mode);
  8914  0017F6  C0AB  F001         	movff	_S2mode,updateS2@mode
  8915  0017FA  C0AC  F002         	movff	_S2mode+1,updateS2@mode+1
  8916  0017FE  ECB1  F00E         	call	_updateS2	;wreg free
  8917                           
  8918                           ;main.c: 45: if (S1mode!=10){updateS1(S1mode);}
  8919  001802  0E0A               	movlw	10
  8920  001804  185C               	xorwf	_S1mode,w,c
  8921  001806  105D               	iorwf	_S1mode+1,w,c
  8922  001808  B4D8               	btfsc	status,2,c
  8923  00180A  D006               	goto	i2l4271
  8924  00180C  C05C  F001         	movff	_S1mode,i2updateS1@mode
  8925  001810  C05D  F002         	movff	_S1mode+1,i2updateS1@mode+1
  8926  001814  ECE0  F00A         	call	i2_updateS1	;wreg free
  8927  001818                     i2l4271:
  8928                           
  8929                           ;main.c: 46: if (S3mode!=10){updateS3(S3mode);}
  8930  001818  0E0A               	movlw	10
  8931  00181A  185A               	xorwf	_S3mode,w,c
  8932  00181C  105B               	iorwf	_S3mode+1,w,c
  8933  00181E  B4D8               	btfsc	status,2,c
  8934  001820  D006               	goto	i2l4275
  8935  001822  C05A  F001         	movff	_S3mode,i2updateS3@mode
  8936  001826  C05B  F002         	movff	_S3mode+1,i2updateS3@mode+1
  8937  00182A  EC0B  F00E         	call	i2_updateS3	;wreg free
  8938  00182E                     i2l4275:
  8939                           
  8940                           ;main.c: 47: soupSteps ++;
  8941  00182E  4A58               	infsnz	_soupSteps,f,c
  8942  001830  2A59               	incf	_soupSteps+1,f,c
  8943                           
  8944                           ;main.c: 48: sodaSteps ++;
  8945  001832  4A56               	infsnz	_sodaSteps,f,c
  8946  001834  2A57               	incf	_sodaSteps+1,f,c
  8947                           
  8948                           ;main.c: 50: if(tabState == 0){
  8949  001836  5054               	movf	_tabState,w,c
  8950  001838  1055               	iorwf	_tabState+1,w,c
  8951  00183A  A4D8               	btfss	status,2,c
  8952  00183C  D01F               	goto	i2l4291
  8953                           
  8954                           ;main.c: 51: if(sodaSteps > 599 && sodaSteps % 400 == 200){
  8955  00183E  BE57               	btfsc	_sodaSteps+1,7,c
  8956  001840  D03C               	goto	i2l4301
  8957  001842  0E58               	movlw	88
  8958  001844  5C56               	subwf	_sodaSteps,w,c
  8959  001846  0E02               	movlw	2
  8960  001848  5857               	subwfb	_sodaSteps+1,w,c
  8961  00184A  A0D8               	btfss	status,0,c
  8962  00184C  D036               	goto	i2l4301
  8963  00184E  C056  F001         	movff	_sodaSteps,i2___awmod@dividend
  8964  001852  C057  F002         	movff	_sodaSteps+1,i2___awmod@dividend+1
  8965  001856  0E01               	movlw	1
  8966  001858  6E04               	movwf	i2___awmod@divisor+1,c
  8967  00185A  0E90               	movlw	144
  8968  00185C  6E03               	movwf	i2___awmod@divisor,c
  8969  00185E  ECE1  F010         	call	i2___awmod	;wreg free
  8970  001862  0EC8               	movlw	200
  8971  001864  1801               	xorwf	?i2___awmod,w,c
  8972  001866  1002               	iorwf	?i2___awmod+1,w,c
  8973  001868  A4D8               	btfss	status,2,c
  8974  00186A  D027               	goto	i2l4301
  8975                           
  8976                           ;main.c: 52: if(sodaAlign == 1){
  8977  00186C  0450               	decf	_sodaAlign,w,c
  8978  00186E  1051               	iorwf	_sodaAlign+1,w,c
  8979  001870  A4D8               	btfss	status,2,c
  8980  001872  D01F               	goto	i2l4299
  8981  001874                     i2l4287:
  8982                           
  8983                           ;main.c: 53: sodaAlign = 2;
  8984  001874  0E00               	movlw	0
  8985  001876  6E51               	movwf	_sodaAlign+1,c
  8986  001878  0E02               	movlw	2
  8987  00187A  D01E               	goto	L14
  8988  00187C                     i2l4291:
  8989                           
  8990                           ;main.c: 60: else{
  8991                           ;main.c: 61: if(sodaSteps > 499 && sodaSteps % 400 == 100){
  8992  00187C  BE57               	btfsc	_sodaSteps+1,7,c
  8993  00187E  D01D               	goto	i2l4301
  8994  001880  0EF4               	movlw	244
  8995  001882  5C56               	subwf	_sodaSteps,w,c
  8996  001884  0E01               	movlw	1
  8997  001886  5857               	subwfb	_sodaSteps+1,w,c
  8998  001888  A0D8               	btfss	status,0,c
  8999  00188A  D017               	goto	i2l4301
  9000  00188C  C056  F001         	movff	_sodaSteps,i2___awmod@dividend
  9001  001890  C057  F002         	movff	_sodaSteps+1,i2___awmod@dividend+1
  9002  001894  0E01               	movlw	1
  9003  001896  6E04               	movwf	i2___awmod@divisor+1,c
  9004  001898  0E90               	movlw	144
  9005  00189A  6E03               	movwf	i2___awmod@divisor,c
  9006  00189C  ECE1  F010         	call	i2___awmod	;wreg free
  9007  0018A0  0E64               	movlw	100
  9008  0018A2  1801               	xorwf	?i2___awmod,w,c
  9009  0018A4  1002               	iorwf	?i2___awmod+1,w,c
  9010  0018A6  A4D8               	btfss	status,2,c
  9011  0018A8  D008               	goto	i2l4301
  9012                           
  9013                           ;main.c: 62: if(sodaAlign == 1){
  9014  0018AA  0450               	decf	_sodaAlign,w,c
  9015  0018AC  1051               	iorwf	_sodaAlign+1,w,c
  9016  0018AE  B4D8               	btfsc	status,2,c
  9017  0018B0  D7E1               	goto	i2l4287
  9018  0018B2                     i2l4299:
  9019                           
  9020                           ;main.c: 65: else{
  9021                           ;main.c: 66: sodaAlign = 1;
  9022  0018B2  0E00               	movlw	0
  9023  0018B4  6E51               	movwf	_sodaAlign+1,c
  9024  0018B6  0E01               	movlw	1
  9025  0018B8                     L14:
  9026  0018B8  6E50               	movwf	_sodaAlign,c
  9027  0018BA                     i2l4301:
  9028                           
  9029                           ;main.c: 67: }
  9030                           ;main.c: 68: }
  9031                           ;main.c: 69: }
  9032                           ;main.c: 76: if(soupSteps > 499 && soupSteps % 400 == 100){
  9033  0018BA  BE59               	btfsc	_soupSteps+1,7,c
  9034  0018BC  D021               	goto	i2l4311
  9035  0018BE  0EF4               	movlw	244
  9036  0018C0  5C58               	subwf	_soupSteps,w,c
  9037  0018C2  0E01               	movlw	1
  9038  0018C4  5859               	subwfb	_soupSteps+1,w,c
  9039  0018C6  A0D8               	btfss	status,0,c
  9040  0018C8  D01B               	goto	i2l4311
  9041  0018CA  C058  F001         	movff	_soupSteps,i2___awmod@dividend
  9042  0018CE  C059  F002         	movff	_soupSteps+1,i2___awmod@dividend+1
  9043  0018D2  0E01               	movlw	1
  9044  0018D4  6E04               	movwf	i2___awmod@divisor+1,c
  9045  0018D6  0E90               	movlw	144
  9046  0018D8  6E03               	movwf	i2___awmod@divisor,c
  9047  0018DA  ECE1  F010         	call	i2___awmod	;wreg free
  9048  0018DE  0E64               	movlw	100
  9049  0018E0  1801               	xorwf	?i2___awmod,w,c
  9050  0018E2  1002               	iorwf	?i2___awmod+1,w,c
  9051  0018E4  A4D8               	btfss	status,2,c
  9052  0018E6  D00C               	goto	i2l4311
  9053                           
  9054                           ;main.c: 77: if(soupAlign == 1){soupAlign = 2;}
  9055  0018E8  044E               	decf	_soupAlign,w,c
  9056  0018EA  104F               	iorwf	_soupAlign+1,w,c
  9057  0018EC  A4D8               	btfss	status,2,c
  9058  0018EE  D004               	goto	i2l4309
  9059  0018F0  0E00               	movlw	0
  9060  0018F2  6E4F               	movwf	_soupAlign+1,c
  9061  0018F4  0E02               	movlw	2
  9062  0018F6  D003               	goto	L15
  9063  0018F8                     i2l4309:
  9064                           
  9065                           ;main.c: 78: else{soupAlign = 1;}
  9066  0018F8  0E00               	movlw	0
  9067  0018FA  6E4F               	movwf	_soupAlign+1,c
  9068  0018FC  0E01               	movlw	1
  9069  0018FE                     L15:
  9070  0018FE  6E4E               	movwf	_soupAlign,c
  9071  001900                     i2l4311:
  9072                           
  9073                           ;main.c: 79: }
  9074                           ;main.c: 80: TMR1ON = 0;
  9075  001900  90CD               	bcf	4045,0,c	;volatile
  9076                           
  9077                           ;main.c: 82: startTMR1();
  9078  001902  EC17  F013         	call	i2_startTMR1	;wreg free
  9079  001906                     i2l172:
  9080  001906  C014  FFF5         	movff	??_handler+13,tablat
  9081  00190A  C013  FFF8         	movff	??_handler+12,tblptru
  9082  00190E  C012  FFF7         	movff	??_handler+11,tblptrh
  9083  001912  C011  FFF6         	movff	??_handler+10,tblptrl
  9084  001916  C010  FFF4         	movff	??_handler+9,prodh
  9085  00191A  C00F  FFF3         	movff	??_handler+8,prodl
  9086  00191E  C00E  FFDA         	movff	??_handler+7,fsr2h
  9087  001922  C00D  FFD9         	movff	??_handler+6,fsr2l
  9088  001926  C00C  FFE2         	movff	??_handler+5,fsr1h
  9089  00192A  C00B  FFE1         	movff	??_handler+4,fsr1l
  9090  00192E  C00A  FFEA         	movff	??_handler+3,fsr0h
  9091  001932  C009  FFE9         	movff	??_handler+2,fsr0l
  9092  001936  C008  FFFB         	movff	??_handler+1,pclatu
  9093  00193A  C007  FFFA         	movff	??_handler,pclath
  9094  00193E  9261               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9095  001940  0011               	retfie		f
  9096  001942                     __end_of_handler:
  9097                           	opt stack 0
  9098                           pclatu	equ	0xFFB
  9099                           pclath	equ	0xFFA
  9100                           tblptru	equ	0xFF8
  9101                           tblptrh	equ	0xFF7
  9102                           tblptrl	equ	0xFF6
  9103                           tablat	equ	0xFF5
  9104                           prodh	equ	0xFF4
  9105                           prodl	equ	0xFF3
  9106                           intcon	equ	0xFF2
  9107                           intcon2	equ	0xFF1
  9108                           postinc0	equ	0xFEE
  9109                           fsr0h	equ	0xFEA
  9110                           fsr0l	equ	0xFE9
  9111                           wreg	equ	0xFE8
  9112                           fsr1h	equ	0xFE2
  9113                           fsr1l	equ	0xFE1
  9114                           indf2	equ	0xFDF
  9115                           postinc2	equ	0xFDE
  9116                           postdec2	equ	0xFDD
  9117                           fsr2h	equ	0xFDA
  9118                           fsr2l	equ	0xFD9
  9119                           status	equ	0xFD8
  9120                           
  9121 ;; *************** function i2_updateS3 *****************
  9122 ;; Defined at:
  9123 ;;		line 168 in file "motors.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  mode            2    0[COMRAM] int 
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;		None
  9128 ;; Return value:  Size  Location     Type
  9129 ;;                  1    wreg      void 
  9130 ;; Registers used:
  9131 ;;		wreg, status,2, status,0
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9139 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9140 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;Total ram usage:        3 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; This function calls:
  9144 ;;		Nothing
  9145 ;; This function is called by:
  9146 ;;		_handler
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           	psect	text37
  9151  001C16                     __ptext37:
  9152                           	opt stack 0
  9153  001C16                     i2_updateS3:
  9154                           	opt stack 25
  9155                           
  9156                           ;motors.c: 169: _delay((unsigned long)((5)*(32000000/4000.0)));
  9157                           
  9158                           ;incstack = 0
  9159  001C16  0E34               	movlw	52
  9160  001C18  6E03               	movwf	??i2_updateS3& (0+255),c
  9161  001C1A  0EF2               	movlw	242
  9162  001C1C                     i2u802_47:
  9163  001C1C  2EE8               	decfsz	wreg,f,c
  9164  001C1E  D7FE               	bra	i2u802_47
  9165  001C20  2E03               	decfsz	??i2_updateS3& (0+255),f,c
  9166  001C22  D7FC               	bra	i2u802_47
  9167                           
  9168                           ;motors.c: 171: if(mode == 0){
  9169  001C24  5001               	movf	i2updateS3@mode,w,c
  9170  001C26  1002               	iorwf	i2updateS3@mode+1,w,c
  9171  001C28  A4D8               	btfss	status,2,c
  9172  001C2A  D005               	goto	i2l4145
  9173                           
  9174                           ;motors.c: 172: LATEbits.LATE2 = 0;
  9175  001C2C  948D               	bcf	3981,2,c	;volatile
  9176                           
  9177                           ;motors.c: 173: LATEbits.LATE1 = 0;
  9178  001C2E  928D               	bcf	3981,1,c	;volatile
  9179                           
  9180                           ;motors.c: 174: LATAbits.LATA4 = 0;
  9181  001C30  9889               	bcf	3977,4,c	;volatile
  9182                           
  9183                           ;motors.c: 175: LATDbits.LATD0 = 0;
  9184  001C32  908C               	bcf	3980,0,c	;volatile
  9185                           
  9186                           ;motors.c: 176: }
  9187  001C34  0012               	return	
  9188  001C36                     i2l4145:
  9189                           
  9190                           ;motors.c: 177: else if(mode == 4){
  9191  001C36  0E04               	movlw	4
  9192  001C38  1801               	xorwf	i2updateS3@mode,w,c
  9193  001C3A  1002               	iorwf	i2updateS3@mode+1,w,c
  9194  001C3C  A4D8               	btfss	status,2,c
  9195  001C3E  D005               	goto	i2l4149
  9196                           
  9197                           ;motors.c: 178: LATEbits.LATE2 = 1;
  9198  001C40  848D               	bsf	3981,2,c	;volatile
  9199                           
  9200                           ;motors.c: 179: LATEbits.LATE1 = 0;
  9201  001C42  928D               	bcf	3981,1,c	;volatile
  9202                           
  9203                           ;motors.c: 180: LATAbits.LATA4 = 0;
  9204  001C44  9889               	bcf	3977,4,c	;volatile
  9205                           
  9206                           ;motors.c: 181: LATDbits.LATD0 = 0;
  9207  001C46  908C               	bcf	3980,0,c	;volatile
  9208                           
  9209                           ;motors.c: 182: }
  9210  001C48  0012               	return	
  9211  001C4A                     i2l4149:
  9212                           
  9213                           ;motors.c: 183: else if(mode == 3){
  9214  001C4A  0E03               	movlw	3
  9215  001C4C  1801               	xorwf	i2updateS3@mode,w,c
  9216  001C4E  1002               	iorwf	i2updateS3@mode+1,w,c
  9217  001C50  A4D8               	btfss	status,2,c
  9218  001C52  D042               	goto	i2l4173
  9219                           
  9220                           ;motors.c: 184: t3++;
  9221  001C54  4A42               	infsnz	_t3,f,c
  9222  001C56  2A43               	incf	_t3+1,f,c
  9223                           
  9224                           ;motors.c: 185: if (t3>8) {t3=1;}
  9225  001C58  BE43               	btfsc	_t3+1,7,c
  9226  001C5A  D00A               	goto	i2l4157
  9227  001C5C  5043               	movf	_t3+1,w,c
  9228  001C5E  E104               	bnz	i2u460_40
  9229  001C60  0E09               	movlw	9
  9230  001C62  5C42               	subwf	_t3,w,c
  9231  001C64  A0D8               	btfss	status,0,c
  9232  001C66  D004               	goto	i2l4157
  9233  001C68                     i2u460_40:
  9234  001C68  0E00               	movlw	0
  9235  001C6A  6E43               	movwf	_t3+1,c
  9236  001C6C  0E01               	movlw	1
  9237  001C6E  6E42               	movwf	_t3,c
  9238  001C70                     i2l4157:
  9239                           
  9240                           ;motors.c: 186: if (t3 == 1 || t3==8){LATEbits.LATE2 = 1;}
  9241  001C70  0442               	decf	_t3,w,c
  9242  001C72  1043               	iorwf	_t3+1,w,c
  9243  001C74  B4D8               	btfsc	status,2,c
  9244  001C76  D005               	goto	i2l549
  9245  001C78  0E08               	movlw	8
  9246  001C7A  1842               	xorwf	_t3,w,c
  9247  001C7C  1043               	iorwf	_t3+1,w,c
  9248  001C7E  A4D8               	btfss	status,2,c
  9249  001C80  D002               	goto	i2l547
  9250  001C82                     i2l549:
  9251  001C82  848D               	bsf	3981,2,c	;volatile
  9252  001C84  D001               	goto	i2l4161
  9253  001C86                     i2l547:
  9254                           
  9255                           ;motors.c: 187: else{LATEbits.LATE2 = 0;}
  9256  001C86  948D               	bcf	3981,2,c	;volatile
  9257  001C88                     i2l4161:
  9258                           
  9259                           ;motors.c: 188: if (t3 == 2 || t3==7){LATEbits.LATE1 = 1;}
  9260  001C88  0E02               	movlw	2
  9261  001C8A  1842               	xorwf	_t3,w,c
  9262  001C8C  1043               	iorwf	_t3+1,w,c
  9263  001C8E  B4D8               	btfsc	status,2,c
  9264  001C90  D005               	goto	i2l553
  9265  001C92  0E07               	movlw	7
  9266  001C94  1842               	xorwf	_t3,w,c
  9267  001C96  1043               	iorwf	_t3+1,w,c
  9268  001C98  A4D8               	btfss	status,2,c
  9269  001C9A  D002               	goto	i2l551
  9270  001C9C                     i2l553:
  9271  001C9C  828D               	bsf	3981,1,c	;volatile
  9272  001C9E  D001               	goto	i2l4165
  9273  001CA0                     i2l551:
  9274                           
  9275                           ;motors.c: 189: else{LATEbits.LATE1 = 0;}
  9276  001CA0  928D               	bcf	3981,1,c	;volatile
  9277  001CA2                     i2l4165:
  9278                           
  9279                           ;motors.c: 190: if (t3 == 3 || t3==6){LATAbits.LATA4 = 1;}
  9280  001CA2  0E03               	movlw	3
  9281  001CA4  1842               	xorwf	_t3,w,c
  9282  001CA6  1043               	iorwf	_t3+1,w,c
  9283  001CA8  B4D8               	btfsc	status,2,c
  9284  001CAA  D005               	goto	i2l557
  9285  001CAC  0E06               	movlw	6
  9286  001CAE  1842               	xorwf	_t3,w,c
  9287  001CB0  1043               	iorwf	_t3+1,w,c
  9288  001CB2  A4D8               	btfss	status,2,c
  9289  001CB4  D002               	goto	i2l555
  9290  001CB6                     i2l557:
  9291  001CB6  8889               	bsf	3977,4,c	;volatile
  9292  001CB8  D001               	goto	i2l4169
  9293  001CBA                     i2l555:
  9294                           
  9295                           ;motors.c: 191: else{LATAbits.LATA4 = 0;}
  9296  001CBA  9889               	bcf	3977,4,c	;volatile
  9297  001CBC                     i2l4169:
  9298                           
  9299                           ;motors.c: 192: if (t3 == 4 || t3==5){LATDbits.LATD0 = 1;}
  9300  001CBC  0E04               	movlw	4
  9301  001CBE  1842               	xorwf	_t3,w,c
  9302  001CC0  1043               	iorwf	_t3+1,w,c
  9303  001CC2  B4D8               	btfsc	status,2,c
  9304  001CC4  D005               	goto	i2l561
  9305  001CC6  0E05               	movlw	5
  9306  001CC8  1842               	xorwf	_t3,w,c
  9307  001CCA  1043               	iorwf	_t3+1,w,c
  9308  001CCC  A4D8               	btfss	status,2,c
  9309  001CCE  D002               	goto	i2l559
  9310  001CD0                     i2l561:
  9311  001CD0  808C               	bsf	3980,0,c	;volatile
  9312  001CD2  0012               	return	
  9313  001CD4                     i2l559:
  9314                           
  9315                           ;motors.c: 193: else{LATDbits.LATD0 = 0;}
  9316  001CD4  908C               	bcf	3980,0,c	;volatile
  9317                           
  9318                           ;motors.c: 194: }
  9319  001CD6  0012               	return	
  9320  001CD8                     i2l4173:
  9321                           
  9322                           ;motors.c: 195: else{
  9323                           ;motors.c: 196: if(mode == 1){
  9324  001CD8  0401               	decf	i2updateS3@mode,w,c
  9325  001CDA  1002               	iorwf	i2updateS3@mode+1,w,c
  9326  001CDC  A4D8               	btfss	status,2,c
  9327  001CDE  D00E               	goto	i2l4181
  9328                           
  9329                           ;motors.c: 197: s3 ++;
  9330  001CE0  4A48               	infsnz	_s3,f,c
  9331  001CE2  2A49               	incf	_s3+1,f,c
  9332                           
  9333                           ;motors.c: 198: if (s3>4) {s3=1;}
  9334  001CE4  BE49               	btfsc	_s3+1,7,c
  9335  001CE6  D01D               	goto	i2l4189
  9336  001CE8  5049               	movf	_s3+1,w,c
  9337  001CEA  E104               	bnz	i2u470_40
  9338  001CEC  0E05               	movlw	5
  9339  001CEE  5C48               	subwf	_s3,w,c
  9340  001CF0  A0D8               	btfss	status,0,c
  9341  001CF2  D017               	goto	i2l4189
  9342  001CF4                     i2u470_40:
  9343  001CF4  0E00               	movlw	0
  9344  001CF6  6E49               	movwf	_s3+1,c
  9345  001CF8  0E01               	movlw	1
  9346  001CFA  D012               	goto	L16
  9347  001CFC                     i2l4181:
  9348                           
  9349                           ;motors.c: 200: else if(mode == 2){
  9350  001CFC  0E02               	movlw	2
  9351  001CFE  1801               	xorwf	i2updateS3@mode,w,c
  9352  001D00  1002               	iorwf	i2updateS3@mode+1,w,c
  9353  001D02  A4D8               	btfss	status,2,c
  9354  001D04  D00E               	goto	i2l4189
  9355                           
  9356                           ;motors.c: 201: s3 --;
  9357  001D06  0648               	decf	_s3,f,c
  9358  001D08  A0D8               	btfss	status,0,c
  9359  001D0A  0649               	decf	_s3+1,f,c
  9360                           
  9361                           ;motors.c: 202: if (s3<1) {s3=4;}
  9362  001D0C  BE49               	btfsc	_s3+1,7,c
  9363  001D0E  D005               	goto	i2l4187
  9364  001D10  5049               	movf	_s3+1,w,c
  9365  001D12  E107               	bnz	i2l4189
  9366  001D14  0448               	decf	_s3,w,c
  9367  001D16  B0D8               	btfsc	status,0,c
  9368  001D18  D004               	goto	i2l4189
  9369  001D1A                     i2l4187:
  9370  001D1A  0E00               	movlw	0
  9371  001D1C  6E49               	movwf	_s3+1,c
  9372  001D1E  0E04               	movlw	4
  9373  001D20                     L16:
  9374  001D20  6E48               	movwf	_s3,c
  9375  001D22                     i2l4189:
  9376                           
  9377                           ;motors.c: 203: }
  9378                           ;motors.c: 204: if (s3 == 1){LATEbits.LATE2 = 1;}
  9379  001D22  0448               	decf	_s3,w,c
  9380  001D24  1049               	iorwf	_s3+1,w,c
  9381  001D26  A4D8               	btfss	status,2,c
  9382  001D28  D002               	goto	i2l569
  9383  001D2A  848D               	bsf	3981,2,c	;volatile
  9384  001D2C  D001               	goto	i2l4193
  9385  001D2E                     i2l569:
  9386                           
  9387                           ;motors.c: 205: else{LATEbits.LATE2 = 0;}
  9388  001D2E  948D               	bcf	3981,2,c	;volatile
  9389  001D30                     i2l4193:
  9390                           
  9391                           ;motors.c: 206: if (s3 == 2){LATEbits.LATE1 = 1;}
  9392  001D30  0E02               	movlw	2
  9393  001D32  1848               	xorwf	_s3,w,c
  9394  001D34  1049               	iorwf	_s3+1,w,c
  9395  001D36  A4D8               	btfss	status,2,c
  9396  001D38  D002               	goto	i2l571
  9397  001D3A  828D               	bsf	3981,1,c	;volatile
  9398  001D3C  D001               	goto	i2l4197
  9399  001D3E                     i2l571:
  9400                           
  9401                           ;motors.c: 207: else{LATEbits.LATE1 = 0;}
  9402  001D3E  928D               	bcf	3981,1,c	;volatile
  9403  001D40                     i2l4197:
  9404                           
  9405                           ;motors.c: 208: if (s3 == 3){LATAbits.LATA4 = 1;}
  9406  001D40  0E03               	movlw	3
  9407  001D42  1848               	xorwf	_s3,w,c
  9408  001D44  1049               	iorwf	_s3+1,w,c
  9409  001D46  A4D8               	btfss	status,2,c
  9410  001D48  D002               	goto	i2l573
  9411  001D4A  8889               	bsf	3977,4,c	;volatile
  9412  001D4C  D001               	goto	i2l4201
  9413  001D4E                     i2l573:
  9414                           
  9415                           ;motors.c: 209: else{LATAbits.LATA4 = 0;}
  9416  001D4E  9889               	bcf	3977,4,c	;volatile
  9417  001D50                     i2l4201:
  9418                           
  9419                           ;motors.c: 210: if (s3 == 4){LATDbits.LATD0 = 1;}
  9420  001D50  0E04               	movlw	4
  9421  001D52  1848               	xorwf	_s3,w,c
  9422  001D54  1049               	iorwf	_s3+1,w,c
  9423  001D56  A4D8               	btfss	status,2,c
  9424  001D58  D002               	goto	i2l575
  9425  001D5A  808C               	bsf	3980,0,c	;volatile
  9426  001D5C  0012               	return	
  9427  001D5E                     i2l575:
  9428                           
  9429                           ;motors.c: 211: else{LATDbits.LATD0 = 0;}
  9430  001D5E  908C               	bcf	3980,0,c	;volatile
  9431  001D60  0012               	return	
  9432  001D62                     __end_ofi2_updateS3:
  9433                           	opt stack 0
  9434                           pclatu	equ	0xFFB
  9435                           pclath	equ	0xFFA
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon2	equ	0xFF1
  9444                           postinc0	equ	0xFEE
  9445                           fsr0h	equ	0xFEA
  9446                           fsr0l	equ	0xFE9
  9447                           wreg	equ	0xFE8
  9448                           fsr1h	equ	0xFE2
  9449                           fsr1l	equ	0xFE1
  9450                           indf2	equ	0xFDF
  9451                           postinc2	equ	0xFDE
  9452                           postdec2	equ	0xFDD
  9453                           fsr2h	equ	0xFDA
  9454                           fsr2l	equ	0xFD9
  9455                           status	equ	0xFD8
  9456                           
  9457 ;; *************** function i2_updateS1 *****************
  9458 ;; Defined at:
  9459 ;;		line 66 in file "motors.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;  mode            2    0[COMRAM] int 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;		None
  9464 ;; Return value:  Size  Location     Type
  9465 ;;                  1    wreg      void 
  9466 ;; Registers used:
  9467 ;;		wreg, status,2, status,0
  9468 ;; Tracked objects:
  9469 ;;		On entry : 0/0
  9470 ;;		On exit  : 0/0
  9471 ;;		Unchanged: 0/0
  9472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9473 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;Total ram usage:        3 bytes
  9478 ;; Hardware stack levels used:    1
  9479 ;; This function calls:
  9480 ;;		Nothing
  9481 ;; This function is called by:
  9482 ;;		_handler
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           	psect	text38
  9487  0015C0                     __ptext38:
  9488                           	opt stack 0
  9489  0015C0                     i2_updateS1:
  9490                           	opt stack 25
  9491                           
  9492                           ;motors.c: 67: _delay((unsigned long)((5)*(32000000/4000.0)));
  9493                           
  9494                           ;incstack = 0
  9495  0015C0  0E34               	movlw	52
  9496  0015C2  6E03               	movwf	??i2_updateS1& (0+255),c
  9497  0015C4  0EF2               	movlw	242
  9498  0015C6                     i2u803_47:
  9499  0015C6  2EE8               	decfsz	wreg,f,c
  9500  0015C8  D7FE               	bra	i2u803_47
  9501  0015CA  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9502  0015CC  D7FC               	bra	i2u803_47
  9503                           
  9504                           ;motors.c: 69: if(mode == 0){
  9505  0015CE  5001               	movf	i2updateS1@mode,w,c
  9506  0015D0  1002               	iorwf	i2updateS1@mode+1,w,c
  9507  0015D2  A4D8               	btfss	status,2,c
  9508  0015D4  D005               	goto	i2l4051
  9509                           
  9510                           ;motors.c: 70: LATDbits.LATD1 = 0;
  9511  0015D6  928C               	bcf	3980,1,c	;volatile
  9512                           
  9513                           ;motors.c: 71: LATBbits.LATB3 = 0;
  9514  0015D8  968A               	bcf	3978,3,c	;volatile
  9515                           
  9516                           ;motors.c: 72: LATBbits.LATB2 = 0;
  9517  0015DA  948A               	bcf	3978,2,c	;volatile
  9518                           
  9519                           ;motors.c: 73: LATBbits.LATB0 = 0;
  9520  0015DC  908A               	bcf	3978,0,c	;volatile
  9521                           
  9522                           ;motors.c: 74: }
  9523  0015DE  0012               	return	
  9524  0015E0                     i2l4051:
  9525                           
  9526                           ;motors.c: 75: else if(mode == 3){
  9527  0015E0  0E03               	movlw	3
  9528  0015E2  1801               	xorwf	i2updateS1@mode,w,c
  9529  0015E4  1002               	iorwf	i2updateS1@mode+1,w,c
  9530  0015E6  A4D8               	btfss	status,2,c
  9531  0015E8  D049               	goto	i2l4077
  9532                           
  9533                           ;motors.c: 76: t++;
  9534  0015EA  4A46               	infsnz	_t,f,c
  9535  0015EC  2A47               	incf	_t+1,f,c
  9536                           
  9537                           ;motors.c: 77: if (t>8) {t=1;}
  9538  0015EE  BE47               	btfsc	_t+1,7,c
  9539  0015F0  D00A               	goto	i2l4059
  9540  0015F2  5047               	movf	_t+1,w,c
  9541  0015F4  E104               	bnz	i2u430_40
  9542  0015F6  0E09               	movlw	9
  9543  0015F8  5C46               	subwf	_t,w,c
  9544  0015FA  A0D8               	btfss	status,0,c
  9545  0015FC  D004               	goto	i2l4059
  9546  0015FE                     i2u430_40:
  9547  0015FE  0E00               	movlw	0
  9548  001600  6E47               	movwf	_t+1,c
  9549  001602  0E01               	movlw	1
  9550  001604  6E46               	movwf	_t,c
  9551  001606                     i2l4059:
  9552                           
  9553                           ;motors.c: 78: _delay((unsigned long)((5)*(32000000/4000.0)));
  9554  001606  0E34               	movlw	52
  9555  001608  6E03               	movwf	??i2_updateS1& (0+255),c
  9556  00160A  0EF2               	movlw	242
  9557  00160C                     i2u804_47:
  9558  00160C  2EE8               	decfsz	wreg,f,c
  9559  00160E  D7FE               	bra	i2u804_47
  9560  001610  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9561  001612  D7FC               	bra	i2u804_47
  9562                           
  9563                           ;motors.c: 79: if (t == 1 || t==8){LATDbits.LATD1 = 1;}
  9564  001614  0446               	decf	_t,w,c
  9565  001616  1047               	iorwf	_t+1,w,c
  9566  001618  B4D8               	btfsc	status,2,c
  9567  00161A  D005               	goto	i2l457
  9568  00161C  0E08               	movlw	8
  9569  00161E  1846               	xorwf	_t,w,c
  9570  001620  1047               	iorwf	_t+1,w,c
  9571  001622  A4D8               	btfss	status,2,c
  9572  001624  D002               	goto	i2l455
  9573  001626                     i2l457:
  9574  001626  828C               	bsf	3980,1,c	;volatile
  9575  001628  D001               	goto	i2l4065
  9576  00162A                     i2l455:
  9577                           
  9578                           ;motors.c: 80: else{LATDbits.LATD1 = 0;}
  9579  00162A  928C               	bcf	3980,1,c	;volatile
  9580  00162C                     i2l4065:
  9581                           
  9582                           ;motors.c: 81: if (t == 2 || t==7){LATBbits.LATB3 = 1;}
  9583  00162C  0E02               	movlw	2
  9584  00162E  1846               	xorwf	_t,w,c
  9585  001630  1047               	iorwf	_t+1,w,c
  9586  001632  B4D8               	btfsc	status,2,c
  9587  001634  D005               	goto	i2l461
  9588  001636  0E07               	movlw	7
  9589  001638  1846               	xorwf	_t,w,c
  9590  00163A  1047               	iorwf	_t+1,w,c
  9591  00163C  A4D8               	btfss	status,2,c
  9592  00163E  D002               	goto	i2l459
  9593  001640                     i2l461:
  9594  001640  868A               	bsf	3978,3,c	;volatile
  9595  001642  D001               	goto	i2l4069
  9596  001644                     i2l459:
  9597                           
  9598                           ;motors.c: 82: else{LATBbits.LATB3 = 0;}
  9599  001644  968A               	bcf	3978,3,c	;volatile
  9600  001646                     i2l4069:
  9601                           
  9602                           ;motors.c: 83: if (t == 3 || t==6){LATBbits.LATB2 = 1;}
  9603  001646  0E03               	movlw	3
  9604  001648  1846               	xorwf	_t,w,c
  9605  00164A  1047               	iorwf	_t+1,w,c
  9606  00164C  B4D8               	btfsc	status,2,c
  9607  00164E  D005               	goto	i2l465
  9608  001650  0E06               	movlw	6
  9609  001652  1846               	xorwf	_t,w,c
  9610  001654  1047               	iorwf	_t+1,w,c
  9611  001656  A4D8               	btfss	status,2,c
  9612  001658  D002               	goto	i2l463
  9613  00165A                     i2l465:
  9614  00165A  848A               	bsf	3978,2,c	;volatile
  9615  00165C  D001               	goto	i2l4073
  9616  00165E                     i2l463:
  9617                           
  9618                           ;motors.c: 84: else{LATBbits.LATB2 = 0;}
  9619  00165E  948A               	bcf	3978,2,c	;volatile
  9620  001660                     i2l4073:
  9621                           
  9622                           ;motors.c: 85: if (t == 4 || t==5){LATBbits.LATB0 = 1;}
  9623  001660  0E04               	movlw	4
  9624  001662  1846               	xorwf	_t,w,c
  9625  001664  1047               	iorwf	_t+1,w,c
  9626  001666  B4D8               	btfsc	status,2,c
  9627  001668  D005               	goto	i2l469
  9628  00166A  0E05               	movlw	5
  9629  00166C  1846               	xorwf	_t,w,c
  9630  00166E  1047               	iorwf	_t+1,w,c
  9631  001670  A4D8               	btfss	status,2,c
  9632  001672  D002               	goto	i2l467
  9633  001674                     i2l469:
  9634  001674  808A               	bsf	3978,0,c	;volatile
  9635  001676  0012               	return	
  9636  001678                     i2l467:
  9637                           
  9638                           ;motors.c: 86: else{LATBbits.LATB0 = 0;}
  9639  001678  908A               	bcf	3978,0,c	;volatile
  9640                           
  9641                           ;motors.c: 87: }
  9642  00167A  0012               	return	
  9643  00167C                     i2l4077:
  9644                           
  9645                           ;motors.c: 88: else{
  9646                           ;motors.c: 89: _delay((unsigned long)((10)*(32000000/4000.0)));
  9647  00167C  0E68               	movlw	104
  9648  00167E  6E03               	movwf	??i2_updateS1& (0+255),c
  9649  001680  0EE4               	movlw	228
  9650  001682                     i2u805_47:
  9651  001682  2EE8               	decfsz	wreg,f,c
  9652  001684  D7FE               	bra	i2u805_47
  9653  001686  2E03               	decfsz	??i2_updateS1& (0+255),f,c
  9654  001688  D7FC               	bra	i2u805_47
  9655  00168A  D000               	nop2	
  9656                           
  9657                           ;motors.c: 91: if(mode == 1 || mode == 5){
  9658  00168C  0401               	decf	i2updateS1@mode,w,c
  9659  00168E  1002               	iorwf	i2updateS1@mode+1,w,c
  9660  001690  B4D8               	btfsc	status,2,c
  9661  001692  D005               	goto	i2l4083
  9662  001694  0E05               	movlw	5
  9663  001696  1801               	xorwf	i2updateS1@mode,w,c
  9664  001698  1002               	iorwf	i2updateS1@mode+1,w,c
  9665  00169A  A4D8               	btfss	status,2,c
  9666  00169C  D00E               	goto	i2l4089
  9667  00169E                     i2l4083:
  9668                           
  9669                           ;motors.c: 92: s1 ++;
  9670  00169E  4A4C               	infsnz	_s1,f,c
  9671  0016A0  2A4D               	incf	_s1+1,f,c
  9672                           
  9673                           ;motors.c: 93: if (s1>4) {s1=1;}
  9674  0016A2  BE4D               	btfsc	_s1+1,7,c
  9675  0016A4  D022               	goto	i2l4099
  9676  0016A6  504D               	movf	_s1+1,w,c
  9677  0016A8  E104               	bnz	i2u441_40
  9678  0016AA  0E05               	movlw	5
  9679  0016AC  5C4C               	subwf	_s1,w,c
  9680  0016AE  A0D8               	btfss	status,0,c
  9681  0016B0  D01C               	goto	i2l4099
  9682  0016B2                     i2u441_40:
  9683  0016B2  0E00               	movlw	0
  9684  0016B4  6E4D               	movwf	_s1+1,c
  9685  0016B6  0E01               	movlw	1
  9686  0016B8  D017               	goto	L17
  9687  0016BA                     i2l4089:
  9688                           
  9689                           ;motors.c: 96: else if(mode == 2 || mode==6){
  9690  0016BA  0E02               	movlw	2
  9691  0016BC  1801               	xorwf	i2updateS1@mode,w,c
  9692  0016BE  1002               	iorwf	i2updateS1@mode+1,w,c
  9693  0016C0  B4D8               	btfsc	status,2,c
  9694  0016C2  D005               	goto	i2l4093
  9695  0016C4  0E06               	movlw	6
  9696  0016C6  1801               	xorwf	i2updateS1@mode,w,c
  9697  0016C8  1002               	iorwf	i2updateS1@mode+1,w,c
  9698  0016CA  A4D8               	btfss	status,2,c
  9699  0016CC  D00E               	goto	i2l4099
  9700  0016CE                     i2l4093:
  9701                           
  9702                           ;motors.c: 97: s1 --;
  9703  0016CE  064C               	decf	_s1,f,c
  9704  0016D0  A0D8               	btfss	status,0,c
  9705  0016D2  064D               	decf	_s1+1,f,c
  9706                           
  9707                           ;motors.c: 98: if (s1<1) {s1=4;}
  9708  0016D4  BE4D               	btfsc	_s1+1,7,c
  9709  0016D6  D005               	goto	i2l4097
  9710  0016D8  504D               	movf	_s1+1,w,c
  9711  0016DA  E107               	bnz	i2l4099
  9712  0016DC  044C               	decf	_s1,w,c
  9713  0016DE  B0D8               	btfsc	status,0,c
  9714  0016E0  D004               	goto	i2l4099
  9715  0016E2                     i2l4097:
  9716  0016E2  0E00               	movlw	0
  9717  0016E4  6E4D               	movwf	_s1+1,c
  9718  0016E6  0E04               	movlw	4
  9719  0016E8                     L17:
  9720  0016E8  6E4C               	movwf	_s1,c
  9721  0016EA                     i2l4099:
  9722                           
  9723                           ;motors.c: 99: }
  9724                           ;motors.c: 101: if(mode == 1 || mode ==2){
  9725  0016EA  0401               	decf	i2updateS1@mode,w,c
  9726  0016EC  1002               	iorwf	i2updateS1@mode+1,w,c
  9727  0016EE  B4D8               	btfsc	status,2,c
  9728  0016F0  D005               	goto	i2l4103
  9729  0016F2  0E02               	movlw	2
  9730  0016F4  1801               	xorwf	i2updateS1@mode,w,c
  9731  0016F6  1002               	iorwf	i2updateS1@mode+1,w,c
  9732  0016F8  A4D8               	btfss	status,2,c
  9733  0016FA  D01F               	goto	i2l4119
  9734  0016FC                     i2l4103:
  9735                           
  9736                           ;motors.c: 102: if (s1 == 1){LATDbits.LATD1 = 1;}
  9737  0016FC  044C               	decf	_s1,w,c
  9738  0016FE  104D               	iorwf	_s1+1,w,c
  9739  001700  A4D8               	btfss	status,2,c
  9740  001702  D002               	goto	i2l484
  9741  001704  828C               	bsf	3980,1,c	;volatile
  9742  001706  D001               	goto	i2l4107
  9743  001708                     i2l484:
  9744                           
  9745                           ;motors.c: 103: else{LATDbits.LATD1 = 0;}
  9746  001708  928C               	bcf	3980,1,c	;volatile
  9747  00170A                     i2l4107:
  9748                           
  9749                           ;motors.c: 104: if (s1 == 2){LATBbits.LATB3 = 1;}
  9750  00170A  0E02               	movlw	2
  9751  00170C  184C               	xorwf	_s1,w,c
  9752  00170E  104D               	iorwf	_s1+1,w,c
  9753  001710  A4D8               	btfss	status,2,c
  9754  001712  D002               	goto	i2l486
  9755  001714  868A               	bsf	3978,3,c	;volatile
  9756  001716  D001               	goto	i2l4111
  9757  001718                     i2l486:
  9758                           
  9759                           ;motors.c: 105: else{LATBbits.LATB3 = 0;}
  9760  001718  968A               	bcf	3978,3,c	;volatile
  9761  00171A                     i2l4111:
  9762                           
  9763                           ;motors.c: 106: if (s1 == 3){LATBbits.LATB2 = 1;}
  9764  00171A  0E03               	movlw	3
  9765  00171C  184C               	xorwf	_s1,w,c
  9766  00171E  104D               	iorwf	_s1+1,w,c
  9767  001720  A4D8               	btfss	status,2,c
  9768  001722  D002               	goto	i2l488
  9769  001724  848A               	bsf	3978,2,c	;volatile
  9770  001726  D001               	goto	i2l4115
  9771  001728                     i2l488:
  9772                           
  9773                           ;motors.c: 107: else{LATBbits.LATB2 = 0;}
  9774  001728  948A               	bcf	3978,2,c	;volatile
  9775  00172A                     i2l4115:
  9776                           
  9777                           ;motors.c: 108: if (s1 == 4){LATBbits.LATB0 = 1;}
  9778  00172A  0E04               	movlw	4
  9779  00172C  184C               	xorwf	_s1,w,c
  9780  00172E  104D               	iorwf	_s1+1,w,c
  9781  001730  A4D8               	btfss	status,2,c
  9782  001732  D002               	goto	i2l490
  9783  001734  808A               	bsf	3978,0,c	;volatile
  9784  001736  D001               	goto	i2l4119
  9785  001738                     i2l490:
  9786                           
  9787                           ;motors.c: 109: else{LATBbits.LATB0 = 0;}
  9788  001738  908A               	bcf	3978,0,c	;volatile
  9789  00173A                     i2l4119:
  9790                           
  9791                           ;motors.c: 110: }
  9792                           ;motors.c: 111: if(mode == 5 || mode ==6){
  9793  00173A  0E05               	movlw	5
  9794  00173C  1801               	xorwf	i2updateS1@mode,w,c
  9795  00173E  1002               	iorwf	i2updateS1@mode+1,w,c
  9796  001740  B4D8               	btfsc	status,2,c
  9797  001742  D005               	goto	i2l4123
  9798  001744  0E06               	movlw	6
  9799  001746  1801               	xorwf	i2updateS1@mode,w,c
  9800  001748  1002               	iorwf	i2updateS1@mode+1,w,c
  9801  00174A  A4D8               	btfss	status,2,c
  9802  00174C  0012               	return	
  9803  00174E                     i2l4123:
  9804                           
  9805                           ;motors.c: 112: if (s1 == 1){LATDbits.LATD1 = 1; LATBbits.LATB3 = 1; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 0;}
  9806  00174E  044C               	decf	_s1,w,c
  9807  001750  104D               	iorwf	_s1+1,w,c
  9808  001752  A4D8               	btfss	status,2,c
  9809  001754  D004               	goto	i2l4127
  9810  001756  828C               	bsf	3980,1,c	;volatile
  9811  001758  868A               	bsf	3978,3,c	;volatile
  9812  00175A  948A               	bcf	3978,2,c	;volatile
  9813  00175C  908A               	bcf	3978,0,c	;volatile
  9814  00175E                     i2l4127:
  9815                           
  9816                           ;motors.c: 113: if (s1 == 2){LATDbits.LATD1 = 0; LATBbits.LATB3 = 1; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 0;}
  9817  00175E  0E02               	movlw	2
  9818  001760  184C               	xorwf	_s1,w,c
  9819  001762  104D               	iorwf	_s1+1,w,c
  9820  001764  A4D8               	btfss	status,2,c
  9821  001766  D004               	goto	i2l4131
  9822  001768  928C               	bcf	3980,1,c	;volatile
  9823  00176A  868A               	bsf	3978,3,c	;volatile
  9824  00176C  848A               	bsf	3978,2,c	;volatile
  9825  00176E  908A               	bcf	3978,0,c	;volatile
  9826  001770                     i2l4131:
  9827                           
  9828                           ;motors.c: 114: if (s1 == 3){LATDbits.LATD1 = 0; LATBbits.LATB3 = 0; LATBbits.LATB2 = 1;
      +                           LATBbits.LATB0 = 1;}
  9829  001770  0E03               	movlw	3
  9830  001772  184C               	xorwf	_s1,w,c
  9831  001774  104D               	iorwf	_s1+1,w,c
  9832  001776  A4D8               	btfss	status,2,c
  9833  001778  D004               	goto	i2l4135
  9834  00177A  928C               	bcf	3980,1,c	;volatile
  9835  00177C  968A               	bcf	3978,3,c	;volatile
  9836  00177E  848A               	bsf	3978,2,c	;volatile
  9837  001780  808A               	bsf	3978,0,c	;volatile
  9838  001782                     i2l4135:
  9839                           
  9840                           ;motors.c: 115: if (s1 == 4){LATDbits.LATD1 = 1; LATBbits.LATB3 = 0; LATBbits.LATB2 = 0;
      +                           LATBbits.LATB0 = 1;}
  9841  001782  0E04               	movlw	4
  9842  001784  184C               	xorwf	_s1,w,c
  9843  001786  104D               	iorwf	_s1+1,w,c
  9844  001788  A4D8               	btfss	status,2,c
  9845  00178A  0012               	return	
  9846  00178C  828C               	bsf	3980,1,c	;volatile
  9847  00178E  968A               	bcf	3978,3,c	;volatile
  9848  001790  948A               	bcf	3978,2,c	;volatile
  9849  001792  808A               	bsf	3978,0,c	;volatile
  9850  001794  0012               	return	
  9851  001796                     __end_ofi2_updateS1:
  9852                           	opt stack 0
  9853                           pclatu	equ	0xFFB
  9854                           pclath	equ	0xFFA
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           intcon2	equ	0xFF1
  9863                           postinc0	equ	0xFEE
  9864                           fsr0h	equ	0xFEA
  9865                           fsr0l	equ	0xFE9
  9866                           wreg	equ	0xFE8
  9867                           fsr1h	equ	0xFE2
  9868                           fsr1l	equ	0xFE1
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           fsr2h	equ	0xFDA
  9873                           fsr2l	equ	0xFD9
  9874                           status	equ	0xFD8
  9875                           
  9876 ;; *************** function i2_startTMR1 *****************
  9877 ;; Defined at:
  9878 ;;		line 24 in file "logic.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;		None
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;		None
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  2    0[None  ] int 
  9885 ;; Registers used:
  9886 ;;		wreg, status,2
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;Total ram usage:        0 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; This function calls:
  9899 ;;		Nothing
  9900 ;; This function is called by:
  9901 ;;		_handler
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           	psect	text39
  9906  00262E                     __ptext39:
  9907                           	opt stack 0
  9908  00262E                     i2_startTMR1:
  9909                           	opt stack 25
  9910                           
  9911                           ;logic.c: 25: T1CON = 0b10110000;
  9912                           
  9913                           ;incstack = 0
  9914  00262E  0EB0               	movlw	176
  9915  002630  6ECD               	movwf	4045,c	;volatile
  9916                           
  9917                           ;logic.c: 26: TMR1H = 0b11101001;
  9918  002632  0EE9               	movlw	233
  9919  002634  6ECF               	movwf	4047,c	;volatile
  9920                           
  9921                           ;logic.c: 27: TMR1L = 0b01011011;
  9922  002636  0E5B               	movlw	91
  9923  002638  6ECE               	movwf	4046,c	;volatile
  9924                           
  9925                           ;logic.c: 28: TMR1ON = 1;
  9926  00263A  80CD               	bsf	4045,0,c	;volatile
  9927  00263C  0012               	return		;funcret
  9928  00263E                     __end_ofi2_startTMR1:
  9929                           	opt stack 0
  9930                           pclatu	equ	0xFFB
  9931                           pclath	equ	0xFFA
  9932                           tblptru	equ	0xFF8
  9933                           tblptrh	equ	0xFF7
  9934                           tblptrl	equ	0xFF6
  9935                           tablat	equ	0xFF5
  9936                           prodh	equ	0xFF4
  9937                           prodl	equ	0xFF3
  9938                           intcon	equ	0xFF2
  9939                           intcon2	equ	0xFF1
  9940                           postinc0	equ	0xFEE
  9941                           fsr0h	equ	0xFEA
  9942                           fsr0l	equ	0xFE9
  9943                           wreg	equ	0xFE8
  9944                           fsr1h	equ	0xFE2
  9945                           fsr1l	equ	0xFE1
  9946                           indf2	equ	0xFDF
  9947                           postinc2	equ	0xFDE
  9948                           postdec2	equ	0xFDD
  9949                           fsr2h	equ	0xFDA
  9950                           fsr2l	equ	0xFD9
  9951                           status	equ	0xFD8
  9952                           
  9953 ;; *************** function i2___awmod *****************
  9954 ;; Defined at:
  9955 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;  dividend        2    0[COMRAM] int 
  9958 ;;  divisor         2    2[COMRAM] int 
  9959 ;; Auto vars:     Size  Location     Type
  9960 ;;  __awmod         1    5[COMRAM] unsigned char 
  9961 ;;  __awmod         1    4[COMRAM] unsigned char 
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  2    0[COMRAM] int 
  9964 ;; Registers used:
  9965 ;;		wreg, status,2, status,0
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9974 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9975 ;;Total ram usage:        6 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; This function calls:
  9978 ;;		Nothing
  9979 ;; This function is called by:
  9980 ;;		_handler
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text40
  9985  0021C2                     __ptext40:
  9986                           	opt stack 0
  9987  0021C2                     i2___awmod:
  9988                           	opt stack 25
  9989                           
  9990                           ;incstack = 0
  9991  0021C2  0E00               	movlw	0
  9992  0021C4  6E06               	movwf	i2___awmod@sign,c
  9993  0021C6  AE02               	btfss	i2___awmod@dividend+1,7,c
  9994  0021C8  D006               	goto	i2l4217
  9995  0021CA  6C01               	negf	i2___awmod@dividend,c
  9996  0021CC  1E02               	comf	i2___awmod@dividend+1,f,c
  9997  0021CE  B0D8               	btfsc	status,0,c
  9998  0021D0  2A02               	incf	i2___awmod@dividend+1,f,c
  9999  0021D2  0E01               	movlw	1
 10000  0021D4  6E06               	movwf	i2___awmod@sign,c
 10001  0021D6                     i2l4217:
 10002  0021D6  AE04               	btfss	i2___awmod@divisor+1,7,c
 10003  0021D8  D004               	goto	i2l4221
 10004  0021DA  6C03               	negf	i2___awmod@divisor,c
 10005  0021DC  1E04               	comf	i2___awmod@divisor+1,f,c
 10006  0021DE  B0D8               	btfsc	status,0,c
 10007  0021E0  2A04               	incf	i2___awmod@divisor+1,f,c
 10008  0021E2                     i2l4221:
 10009  0021E2  5003               	movf	i2___awmod@divisor,w,c
 10010  0021E4  1004               	iorwf	i2___awmod@divisor+1,w,c
 10011  0021E6  B4D8               	btfsc	status,2,c
 10012  0021E8  D018               	goto	i2l4237
 10013  0021EA  0E01               	movlw	1
 10014  0021EC  6E05               	movwf	i2___awmod@counter,c
 10015  0021EE  D004               	goto	i2l4227
 10016  0021F0                     i2l4225:
 10017  0021F0  90D8               	bcf	status,0,c
 10018  0021F2  3603               	rlcf	i2___awmod@divisor,f,c
 10019  0021F4  3604               	rlcf	i2___awmod@divisor+1,f,c
 10020  0021F6  2A05               	incf	i2___awmod@counter,f,c
 10021  0021F8                     i2l4227:
 10022  0021F8  AE04               	btfss	i2___awmod@divisor+1,7,c
 10023  0021FA  D7FA               	goto	i2l4225
 10024  0021FC                     i2l4229:
 10025  0021FC  5003               	movf	i2___awmod@divisor,w,c
 10026  0021FE  5C01               	subwf	i2___awmod@dividend,w,c
 10027  002200  5004               	movf	i2___awmod@divisor+1,w,c
 10028  002202  5802               	subwfb	i2___awmod@dividend+1,w,c
 10029  002204  A0D8               	btfss	status,0,c
 10030  002206  D004               	goto	i2l4233
 10031  002208  5003               	movf	i2___awmod@divisor,w,c
 10032  00220A  5E01               	subwf	i2___awmod@dividend,f,c
 10033  00220C  5004               	movf	i2___awmod@divisor+1,w,c
 10034  00220E  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10035  002210                     i2l4233:
 10036  002210  90D8               	bcf	status,0,c
 10037  002212  3204               	rrcf	i2___awmod@divisor+1,f,c
 10038  002214  3203               	rrcf	i2___awmod@divisor,f,c
 10039  002216  2E05               	decfsz	i2___awmod@counter,f,c
 10040  002218  D7F1               	goto	i2l4229
 10041  00221A                     i2l4237:
 10042  00221A  5006               	movf	i2___awmod@sign,w,c
 10043  00221C  B4D8               	btfsc	status,2,c
 10044  00221E  D004               	goto	i2l4241
 10045  002220  6C01               	negf	i2___awmod@dividend,c
 10046  002222  1E02               	comf	i2___awmod@dividend+1,f,c
 10047  002224  B0D8               	btfsc	status,0,c
 10048  002226  2A02               	incf	i2___awmod@dividend+1,f,c
 10049  002228                     i2l4241:
 10050  002228  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10051  00222C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10052  002230  0012               	return	
 10053  002232                     __end_ofi2___awmod:
 10054                           	opt stack 0
 10055                           pclatu	equ	0xFFB
 10056                           pclath	equ	0xFFA
 10057                           tblptru	equ	0xFF8
 10058                           tblptrh	equ	0xFF7
 10059                           tblptrl	equ	0xFF6
 10060                           tablat	equ	0xFF5
 10061                           prodh	equ	0xFF4
 10062                           prodl	equ	0xFF3
 10063                           intcon	equ	0xFF2
 10064                           intcon2	equ	0xFF1
 10065                           postinc0	equ	0xFEE
 10066                           fsr0h	equ	0xFEA
 10067                           fsr0l	equ	0xFE9
 10068                           wreg	equ	0xFE8
 10069                           fsr1h	equ	0xFE2
 10070                           fsr1l	equ	0xFE1
 10071                           indf2	equ	0xFDF
 10072                           postinc2	equ	0xFDE
 10073                           postdec2	equ	0xFDD
 10074                           fsr2h	equ	0xFDA
 10075                           fsr2l	equ	0xFD9
 10076                           status	equ	0xFD8
 10077                           
 10078 ;; *************** function _updateS2 *****************
 10079 ;; Defined at:
 10080 ;;		line 121 in file "motors.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;  mode            2    0[COMRAM] int 
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;		None
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      void 
 10087 ;; Registers used:
 10088 ;;		wreg, status,2, status,0
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10094 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;Total ram usage:        3 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; This function calls:
 10101 ;;		Nothing
 10102 ;; This function is called by:
 10103 ;;		_handler
 10104 ;; This function uses a non-reentrant model
 10105 ;;
 10106                           
 10107                           	psect	text41
 10108  001D62                     __ptext41:
 10109                           	opt stack 0
 10110  001D62                     _updateS2:
 10111                           	opt stack 25
 10112                           
 10113                           ;motors.c: 122: _delay((unsigned long)((5)*(32000000/4000.0)));
 10114                           
 10115                           ;incstack = 0
 10116  001D62  0E34               	movlw	52
 10117  001D64  6E03               	movwf	??_updateS2& (0+255),c
 10118  001D66  0EF2               	movlw	242
 10119  001D68                     i2u806_47:
 10120  001D68  2EE8               	decfsz	wreg,f,c
 10121  001D6A  D7FE               	bra	i2u806_47
 10122  001D6C  2E03               	decfsz	??_updateS2& (0+255),f,c
 10123  001D6E  D7FC               	bra	i2u806_47
 10124                           
 10125                           ;motors.c: 124: if(mode == 0){
 10126  001D70  5001               	movf	updateS2@mode,w,c
 10127  001D72  1002               	iorwf	updateS2@mode+1,w,c
 10128  001D74  A4D8               	btfss	status,2,c
 10129  001D76  D005               	goto	i2l3681
 10130                           
 10131                           ;motors.c: 125: LATCbits.LATC7 = 0;
 10132  001D78  9E8B               	bcf	3979,7,c	;volatile
 10133                           
 10134                           ;motors.c: 126: LATCbits.LATC6 = 0;
 10135  001D7A  9C8B               	bcf	3979,6,c	;volatile
 10136                           
 10137                           ;motors.c: 127: LATCbits.LATC0 = 0;
 10138  001D7C  908B               	bcf	3979,0,c	;volatile
 10139                           
 10140                           ;motors.c: 128: LATCbits.LATC5 = 0;
 10141  001D7E  9A8B               	bcf	3979,5,c	;volatile
 10142                           
 10143                           ;motors.c: 129: }
 10144  001D80  0012               	return	
 10145  001D82                     i2l3681:
 10146                           
 10147                           ;motors.c: 130: else if(mode == 4){
 10148  001D82  0E04               	movlw	4
 10149  001D84  1801               	xorwf	updateS2@mode,w,c
 10150  001D86  1002               	iorwf	updateS2@mode+1,w,c
 10151  001D88  A4D8               	btfss	status,2,c
 10152  001D8A  D005               	goto	i2l3685
 10153                           
 10154                           ;motors.c: 131: LATCbits.LATC7 = 1;
 10155  001D8C  8E8B               	bsf	3979,7,c	;volatile
 10156                           
 10157                           ;motors.c: 132: LATCbits.LATC6 = 0;
 10158  001D8E  9C8B               	bcf	3979,6,c	;volatile
 10159                           
 10160                           ;motors.c: 133: LATCbits.LATC0 = 0;
 10161  001D90  908B               	bcf	3979,0,c	;volatile
 10162                           
 10163                           ;motors.c: 134: LATCbits.LATC5 = 0;
 10164  001D92  9A8B               	bcf	3979,5,c	;volatile
 10165                           
 10166                           ;motors.c: 135: }
 10167  001D94  0012               	return	
 10168  001D96                     i2l3685:
 10169                           
 10170                           ;motors.c: 136: else if(mode == 3){
 10171  001D96  0E03               	movlw	3
 10172  001D98  1801               	xorwf	updateS2@mode,w,c
 10173  001D9A  1002               	iorwf	updateS2@mode+1,w,c
 10174  001D9C  A4D8               	btfss	status,2,c
 10175  001D9E  D042               	goto	i2l3709
 10176                           
 10177                           ;motors.c: 137: t2++;
 10178  001DA0  4A44               	infsnz	_t2,f,c
 10179  001DA2  2A45               	incf	_t2+1,f,c
 10180                           
 10181                           ;motors.c: 138: if (t2>8) {t2=1;}
 10182  001DA4  BE45               	btfsc	_t2+1,7,c
 10183  001DA6  D00A               	goto	i2l3693
 10184  001DA8  5045               	movf	_t2+1,w,c
 10185  001DAA  E104               	bnz	i2u383_40
 10186  001DAC  0E09               	movlw	9
 10187  001DAE  5C44               	subwf	_t2,w,c
 10188  001DB0  A0D8               	btfss	status,0,c
 10189  001DB2  D004               	goto	i2l3693
 10190  001DB4                     i2u383_40:
 10191  001DB4  0E00               	movlw	0
 10192  001DB6  6E45               	movwf	_t2+1,c
 10193  001DB8  0E01               	movlw	1
 10194  001DBA  6E44               	movwf	_t2,c
 10195  001DBC                     i2l3693:
 10196                           
 10197                           ;motors.c: 139: if (t2 == 1 || t2==8){LATCbits.LATC7 = 1;}
 10198  001DBC  0444               	decf	_t2,w,c
 10199  001DBE  1045               	iorwf	_t2+1,w,c
 10200  001DC0  B4D8               	btfsc	status,2,c
 10201  001DC2  D005               	goto	i2l510
 10202  001DC4  0E08               	movlw	8
 10203  001DC6  1844               	xorwf	_t2,w,c
 10204  001DC8  1045               	iorwf	_t2+1,w,c
 10205  001DCA  A4D8               	btfss	status,2,c
 10206  001DCC  D002               	goto	i2l508
 10207  001DCE                     i2l510:
 10208  001DCE  8E8B               	bsf	3979,7,c	;volatile
 10209  001DD0  D001               	goto	i2l3697
 10210  001DD2                     i2l508:
 10211                           
 10212                           ;motors.c: 140: else{LATCbits.LATC7 = 0;}
 10213  001DD2  9E8B               	bcf	3979,7,c	;volatile
 10214  001DD4                     i2l3697:
 10215                           
 10216                           ;motors.c: 141: if (t2 == 2 || t2==7){LATCbits.LATC6 = 1;}
 10217  001DD4  0E02               	movlw	2
 10218  001DD6  1844               	xorwf	_t2,w,c
 10219  001DD8  1045               	iorwf	_t2+1,w,c
 10220  001DDA  B4D8               	btfsc	status,2,c
 10221  001DDC  D005               	goto	i2l514
 10222  001DDE  0E07               	movlw	7
 10223  001DE0  1844               	xorwf	_t2,w,c
 10224  001DE2  1045               	iorwf	_t2+1,w,c
 10225  001DE4  A4D8               	btfss	status,2,c
 10226  001DE6  D002               	goto	i2l512
 10227  001DE8                     i2l514:
 10228  001DE8  8C8B               	bsf	3979,6,c	;volatile
 10229  001DEA  D001               	goto	i2l3701
 10230  001DEC                     i2l512:
 10231                           
 10232                           ;motors.c: 142: else{LATCbits.LATC6 = 0;}
 10233  001DEC  9C8B               	bcf	3979,6,c	;volatile
 10234  001DEE                     i2l3701:
 10235                           
 10236                           ;motors.c: 143: if (t2 == 3 || t2==6){LATCbits.LATC0 = 1;}
 10237  001DEE  0E03               	movlw	3
 10238  001DF0  1844               	xorwf	_t2,w,c
 10239  001DF2  1045               	iorwf	_t2+1,w,c
 10240  001DF4  B4D8               	btfsc	status,2,c
 10241  001DF6  D005               	goto	i2l518
 10242  001DF8  0E06               	movlw	6
 10243  001DFA  1844               	xorwf	_t2,w,c
 10244  001DFC  1045               	iorwf	_t2+1,w,c
 10245  001DFE  A4D8               	btfss	status,2,c
 10246  001E00  D002               	goto	i2l516
 10247  001E02                     i2l518:
 10248  001E02  808B               	bsf	3979,0,c	;volatile
 10249  001E04  D001               	goto	i2l3705
 10250  001E06                     i2l516:
 10251                           
 10252                           ;motors.c: 144: else{LATCbits.LATC0 = 0;}
 10253  001E06  908B               	bcf	3979,0,c	;volatile
 10254  001E08                     i2l3705:
 10255                           
 10256                           ;motors.c: 145: if (t2 == 4 || t2==5){LATCbits.LATC5 = 1;}
 10257  001E08  0E04               	movlw	4
 10258  001E0A  1844               	xorwf	_t2,w,c
 10259  001E0C  1045               	iorwf	_t2+1,w,c
 10260  001E0E  B4D8               	btfsc	status,2,c
 10261  001E10  D005               	goto	i2l522
 10262  001E12  0E05               	movlw	5
 10263  001E14  1844               	xorwf	_t2,w,c
 10264  001E16  1045               	iorwf	_t2+1,w,c
 10265  001E18  A4D8               	btfss	status,2,c
 10266  001E1A  D002               	goto	i2l520
 10267  001E1C                     i2l522:
 10268  001E1C  8A8B               	bsf	3979,5,c	;volatile
 10269  001E1E  0012               	return	
 10270  001E20                     i2l520:
 10271                           
 10272                           ;motors.c: 146: else{LATCbits.LATC5 = 0;}
 10273  001E20  9A8B               	bcf	3979,5,c	;volatile
 10274                           
 10275                           ;motors.c: 147: }
 10276  001E22  0012               	return	
 10277  001E24                     i2l3709:
 10278                           
 10279                           ;motors.c: 148: else{
 10280                           ;motors.c: 149: if(mode == 1){
 10281  001E24  0401               	decf	updateS2@mode,w,c
 10282  001E26  1002               	iorwf	updateS2@mode+1,w,c
 10283  001E28  A4D8               	btfss	status,2,c
 10284  001E2A  D00E               	goto	i2l3717
 10285                           
 10286                           ;motors.c: 150: s2 ++;
 10287  001E2C  4A4A               	infsnz	_s2,f,c
 10288  001E2E  2A4B               	incf	_s2+1,f,c
 10289                           
 10290                           ;motors.c: 151: if (s2>4) {s2=1;}
 10291  001E30  BE4B               	btfsc	_s2+1,7,c
 10292  001E32  D01D               	goto	i2l3725
 10293  001E34  504B               	movf	_s2+1,w,c
 10294  001E36  E104               	bnz	i2u393_40
 10295  001E38  0E05               	movlw	5
 10296  001E3A  5C4A               	subwf	_s2,w,c
 10297  001E3C  A0D8               	btfss	status,0,c
 10298  001E3E  D017               	goto	i2l3725
 10299  001E40                     i2u393_40:
 10300  001E40  0E00               	movlw	0
 10301  001E42  6E4B               	movwf	_s2+1,c
 10302  001E44  0E01               	movlw	1
 10303  001E46  D012               	goto	L18
 10304  001E48                     i2l3717:
 10305                           
 10306                           ;motors.c: 153: else if(mode == 2){
 10307  001E48  0E02               	movlw	2
 10308  001E4A  1801               	xorwf	updateS2@mode,w,c
 10309  001E4C  1002               	iorwf	updateS2@mode+1,w,c
 10310  001E4E  A4D8               	btfss	status,2,c
 10311  001E50  D00E               	goto	i2l3725
 10312                           
 10313                           ;motors.c: 154: s2 --;
 10314  001E52  064A               	decf	_s2,f,c
 10315  001E54  A0D8               	btfss	status,0,c
 10316  001E56  064B               	decf	_s2+1,f,c
 10317                           
 10318                           ;motors.c: 155: if (s2<1) {s2=4;}
 10319  001E58  BE4B               	btfsc	_s2+1,7,c
 10320  001E5A  D005               	goto	i2l3723
 10321  001E5C  504B               	movf	_s2+1,w,c
 10322  001E5E  E107               	bnz	i2l3725
 10323  001E60  044A               	decf	_s2,w,c
 10324  001E62  B0D8               	btfsc	status,0,c
 10325  001E64  D004               	goto	i2l3725
 10326  001E66                     i2l3723:
 10327  001E66  0E00               	movlw	0
 10328  001E68  6E4B               	movwf	_s2+1,c
 10329  001E6A  0E04               	movlw	4
 10330  001E6C                     L18:
 10331  001E6C  6E4A               	movwf	_s2,c
 10332  001E6E                     i2l3725:
 10333                           
 10334                           ;motors.c: 156: }
 10335                           ;motors.c: 157: if (s2 == 1){LATCbits.LATC7 = 1;}
 10336  001E6E  044A               	decf	_s2,w,c
 10337  001E70  104B               	iorwf	_s2+1,w,c
 10338  001E72  A4D8               	btfss	status,2,c
 10339  001E74  D002               	goto	i2l530
 10340  001E76  8E8B               	bsf	3979,7,c	;volatile
 10341  001E78  D001               	goto	i2l3729
 10342  001E7A                     i2l530:
 10343                           
 10344                           ;motors.c: 158: else{LATCbits.LATC7 = 0;}
 10345  001E7A  9E8B               	bcf	3979,7,c	;volatile
 10346  001E7C                     i2l3729:
 10347                           
 10348                           ;motors.c: 159: if (s2 == 2){LATCbits.LATC6 = 1;}
 10349  001E7C  0E02               	movlw	2
 10350  001E7E  184A               	xorwf	_s2,w,c
 10351  001E80  104B               	iorwf	_s2+1,w,c
 10352  001E82  A4D8               	btfss	status,2,c
 10353  001E84  D002               	goto	i2l532
 10354  001E86  8C8B               	bsf	3979,6,c	;volatile
 10355  001E88  D001               	goto	i2l3733
 10356  001E8A                     i2l532:
 10357                           
 10358                           ;motors.c: 160: else{LATCbits.LATC6 = 0;}
 10359  001E8A  9C8B               	bcf	3979,6,c	;volatile
 10360  001E8C                     i2l3733:
 10361                           
 10362                           ;motors.c: 161: if (s2 == 3){LATCbits.LATC0 = 1;}
 10363  001E8C  0E03               	movlw	3
 10364  001E8E  184A               	xorwf	_s2,w,c
 10365  001E90  104B               	iorwf	_s2+1,w,c
 10366  001E92  A4D8               	btfss	status,2,c
 10367  001E94  D002               	goto	i2l534
 10368  001E96  808B               	bsf	3979,0,c	;volatile
 10369  001E98  D001               	goto	i2l3737
 10370  001E9A                     i2l534:
 10371                           
 10372                           ;motors.c: 162: else{LATCbits.LATC0 = 0;}
 10373  001E9A  908B               	bcf	3979,0,c	;volatile
 10374  001E9C                     i2l3737:
 10375                           
 10376                           ;motors.c: 163: if (s2 == 4){LATCbits.LATC5 = 1;}
 10377  001E9C  0E04               	movlw	4
 10378  001E9E  184A               	xorwf	_s2,w,c
 10379  001EA0  104B               	iorwf	_s2+1,w,c
 10380  001EA2  A4D8               	btfss	status,2,c
 10381  001EA4  D002               	goto	i2l536
 10382  001EA6  8A8B               	bsf	3979,5,c	;volatile
 10383  001EA8  0012               	return	
 10384  001EAA                     i2l536:
 10385                           
 10386                           ;motors.c: 164: else{LATCbits.LATC5 = 0;}
 10387  001EAA  9A8B               	bcf	3979,5,c	;volatile
 10388  001EAC  0012               	return	
 10389  001EAE                     __end_of_updateS2:
 10390                           	opt stack 0
 10391                           pclatu	equ	0xFFB
 10392                           pclath	equ	0xFFA
 10393                           tblptru	equ	0xFF8
 10394                           tblptrh	equ	0xFF7
 10395                           tblptrl	equ	0xFF6
 10396                           tablat	equ	0xFF5
 10397                           prodh	equ	0xFF4
 10398                           prodl	equ	0xFF3
 10399                           intcon	equ	0xFF2
 10400                           intcon2	equ	0xFF1
 10401                           postinc0	equ	0xFEE
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           fsr1h	equ	0xFE2
 10406                           fsr1l	equ	0xFE1
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           pclatu	equ	0xFFB
 10414                           pclath	equ	0xFFA
 10415                           tblptru	equ	0xFF8
 10416                           tblptrh	equ	0xFF7
 10417                           tblptrl	equ	0xFF6
 10418                           tablat	equ	0xFF5
 10419                           prodh	equ	0xFF4
 10420                           prodl	equ	0xFF3
 10421                           intcon	equ	0xFF2
 10422                           intcon2	equ	0xFF1
 10423                           postinc0	equ	0xFEE
 10424                           fsr0h	equ	0xFEA
 10425                           fsr0l	equ	0xFE9
 10426                           wreg	equ	0xFE8
 10427                           fsr1h	equ	0xFE2
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           postdec2	equ	0xFDD
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436                           	psect	rparam
 10437  0000                     pclatu	equ	0xFFB
 10438                           pclath	equ	0xFFA
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           prodh	equ	0xFF4
 10444                           prodl	equ	0xFF3
 10445                           intcon	equ	0xFF2
 10446                           intcon2	equ	0xFF1
 10447                           postinc0	equ	0xFEE
 10448                           fsr0h	equ	0xFEA
 10449                           fsr0l	equ	0xFE9
 10450                           wreg	equ	0xFE8
 10451                           fsr1h	equ	0xFE2
 10452                           fsr1l	equ	0xFE1
 10453                           indf2	equ	0xFDF
 10454                           postinc2	equ	0xFDE
 10455                           postdec2	equ	0xFDD
 10456                           fsr2h	equ	0xFDA
 10457                           fsr2l	equ	0xFD9
 10458                           status	equ	0xFD8
 10459                           
 10460                           	psect	temp
 10461  000061                     btemp:
 10462                           	opt stack 0
 10463  000061                     	ds	1
 10464  0000                     int$flags	set	btemp
 10465                           pclatu	equ	0xFFB
 10466                           pclath	equ	0xFFA
 10467                           tblptru	equ	0xFF8
 10468                           tblptrh	equ	0xFF7
 10469                           tblptrl	equ	0xFF6
 10470                           tablat	equ	0xFF5
 10471                           prodh	equ	0xFF4
 10472                           prodl	equ	0xFF3
 10473                           intcon	equ	0xFF2
 10474                           intcon2	equ	0xFF1
 10475                           postinc0	equ	0xFEE
 10476                           fsr0h	equ	0xFEA
 10477                           fsr0l	equ	0xFE9
 10478                           wreg	equ	0xFE8
 10479                           fsr1h	equ	0xFE2
 10480                           fsr1l	equ	0xFE1
 10481                           indf2	equ	0xFDF
 10482                           postinc2	equ	0xFDE
 10483                           postdec2	equ	0xFDD
 10484                           fsr2h	equ	0xFDA
 10485                           fsr2l	equ	0xFD9
 10486                           status	equ	0xFD8


Data Sizes:
    Strings     478
    Constant    42
    Data        0
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     65      96
    BANK0           128     30      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_54(CODE[17]), STR_53(CODE[17]), STR_52(CODE[16]), STR_51(CODE[17]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[16]), STR_47(CODE[17]), 
		 -> STR_46(CODE[16]), STR_45(CODE[17]), STR_44(CODE[21]), STR_43(CODE[17]), 
		 -> STR_42(CODE[12]), STR_41(CODE[17]), STR_40(CODE[6]), STR_39(CODE[8]), 
		 -> STR_38(CODE[15]), STR_37(CODE[8]), STR_36(CODE[16]), STR_35(CODE[17]), 
		 -> STR_34(CODE[16]), STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[12]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[12]), STR_23(CODE[9]), 
		 -> STR_22(CODE[9]), STR_21(CODE[12]), STR_20(CODE[4]), STR_19(CODE[4]), 
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[11]), STR_15(CODE[3]), 
		 -> STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[16]), 
		 -> STR_10(CODE[16]), STR_9(CODE[3]), STR_8(CODE[16]), STR_7(CODE[16]), 
		 -> STR_6(CODE[12]), STR_5(CODE[12]), STR_4(CODE[17]), STR_3(CODE[16]), 
		 -> STR_2(CODE[16]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_displayLog
    _updateTime->_I2C_Master_Read
    _updateTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLCD->_lcdInst
    _I2C_Master_Init->___lldiv
    _homescreen->_printf
    _displayLog->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _calibrateWheels->_updateS1
    _calibrateWheels->_updateS3
    _addRun->_eepromWrite

Critical Paths under _handler in COMRAM

    _handler->i2___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   34507
                                             63 COMRAM     2     2      0
                                              0 BANK0     30    30      0
                               _PWM1
                            _PWM1off
                               _PWM2
                            _PWM2off
                            ___awmod
                             _addRun
                    _calibrateWheels
                         _displayLog
                         _homescreen
                         _initialize
                           _keycheck
                       _keyinterrupt
                            _lcdInst
                             _printf
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
                         _updateTime
 ---------------------------------------------------------------------------------
 (1) _updateTime                                           1     1      0     657
                                             23 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                             21 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                             21 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _keyinterrupt                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     698
                    _I2C_Master_Init
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             23 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     503
                                             33 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     395
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _homescreen                                           0     0      0    7727
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayLog                                           9     7      2    8871
                                             54 COMRAM     9     7      2
                         _eepromRead
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    23      8    7532
                                             32 COMRAM    22    14      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                         _eepromRead (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             22 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     694
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     386
                                             27 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     549
                                             20 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     195
                                             22 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateWheels                                      4     4      0    1903
                                             23 COMRAM     4     4      0
                            _readADC
                          _startTMR1
                           _updateS1
                           _updateS3
 ---------------------------------------------------------------------------------
 (1) _updateS3                                             3     1      2     659
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _updateS1                                             3     1      2     814
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _startTMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      31
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _addRun                                              27     5     22    2676
                                             24 COMRAM    27     5     22
                         _eepromRead
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (2) _eepromWrite                                          4     3      1    1017
                                             20 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _eepromRead                                           3     3      0      62
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     993
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM2off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2                                                 6     2      4     894
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PWM1off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1                                                 4     2      2     247
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _handler                                             14    14      0    1008
                                              6 COMRAM    14    14      0
                           _updateS2
                          i2___awmod
                        i2_startTMR1
                         i2_updateS1
                         i2_updateS3
 ---------------------------------------------------------------------------------
 (6) i2_updateS3                                           3     1      2     136
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_updateS1                                           3     1      2     246
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (6) i2_startTMR1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2___awmod                                            6     2      4     452
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _updateS2                                             3     1      2     174
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1
   _PWM1off
   _PWM2
   _PWM2off
   ___awmod
   _addRun
     _eepromRead
     _eepromWrite
   _calibrateWheels
     _readADC
     _startTMR1
     _updateS1
     _updateS3
   _displayLog
     _eepromRead
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _homescreen
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _eepromRead (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
   _keycheck
   _keyinterrupt
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _eepromRead (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _readADC
   _startTMR1
   _updateS1
   _updateS3
   _updateTime
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 _handler (ROOT)
   _updateS2
   i2___awmod
   i2_startTMR1
   i2_updateS1
   i2_updateS3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1E      2D       5       35.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     41      60       1       76.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8D      34        0.0%
DATA                 0      0      8D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Apr 11 01:48:38 2017

                        _s 00A9                          _t 0046                         _s1 004C  
                       _s2 004A                         _s3 0048                         _t2 0044  
                       _t3 0042        ___wmul@multiplicand 0017                __CFG_BORV$3 000000  
         ?_calibrateWheels 0001               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l201 03AC  
                      l210 0428                        l212 0436                        l221 0492  
                      l206 040C                        l223 04A0                        l208 041A  
                      l217 0476                        l219 0484                        l362 260C  
                      l443 214C                        l611 25F8                        l195 0382  
                      l620 25F4                        l461 146A                        l621 25F0  
                      l197 0390                        l614 2604                        l463 1488  
                      l455 1454                        l551 1B54                        l199 039E  
                      l296 0CA8                        l633 24FE                        l465 1484  
                      l457 1450                        l561 1B84                        l553 1B50  
                      l490 1562                        l706 19E2                        l627 2528  
                      l467 14A2                        l459 146E                        l571 1BF2  
                      l555 1B6E                        l547 1B3A                        l484 1532  
                      l469 149E                        l573 1C02                        l557 1B6A  
                      l549 1B36                        l486 1542                        l718 1A9E  
                      l575 1C12                        l559 1B88                        l488 1552  
                      l569 1BE2                        l753 11CA               __CFG_CPB$OFF 000000  
                      _PR2 000FCB                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28               ___awmod@sign 001A                        prod 000FF3  
                      wreg 000FE8        __end_ofi2_startTMR1 263E               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1208 24C6                       l1145 2050  
                     l1198 23F4                       l5101 1514                       l5005 2042  
                     l5015 23C2                       l5113 1544                       l5121 1564  
                     l5105 1526                       l5017 23CA                       l5203 1C04  
                     l5027 23EA                       l5019 23CE                       l5043 24BC  
                     l5035 249C                       l5133 159A                       l5125 1578  
                     l5117 1554                       l5109 1534                       l5061 1430  
                     l5053 140A                       l5037 24A4                       l6101 0770  
                     l6005 054E                       l5071 1470                       l5151 1AFE  
                     l5039 24A8                       l5311 1282                       l6111 07B0  
                     l5137 15AC                       l5129 1588                       l5321 12C0  
                     l5241 1106                       l6201 09CE                       l6105 0788  
                     l6009 055A                       l5091 14E4                       l5075 148A  
                     l5067 1456                       l5171 1B70                       l5163 1B3C  
                     l5147 1AEA                       l5323 12C8                       l5251 113A  
                     l5235 10E8                       l6203 09D6                       l6107 0790  
                     l6043 0614                       l5085 14C8                       l5501 1988  
                     l5341 1310                       l5317 129C                       l5309 1272  
                     l5245 110C                       l6221 0A52                       l6205 09E6  
                     l6133 0830                       l6109 07A0                       l5095 14F8  
                     l5079 14A6                       l5191 1BD6                       l5183 1BB0  
                     l5167 1B56                       l5159 1B24                       l5175 1B8C  
                     l5503 1998                       l5511 19CC                       l5335 12F4  
                     l5263 119C                       l5239 10F8                       l6231 0A96  
                     l6223 0A66                       l6207 09F8                       l6135 0844  
                     l6039 0608                       l5505 19A6                       l5337 12FC  
                     l5345 1322                       l5329 12DE                       l5281 1216  
                     l5361 13D0                       l6233 0AB0                       l6217 0A2E  
                     l6209 0A08                       l6161 08E8                       l6137 0854  
                     l6129 0818                       l6065 068E                       l5099 150C  
                     l5195 1BE4                       l5531 1A44                       l5523 1A08  
                     l5507 19B6                       l5347 1328                       l5355 13B2  
                     l5275 11F8                       l5259 1198                       l6227 0A7E  
                     l6219 0A42                       l6155 08CC                       l6139 0866  
                     l6091 073C                       l5373 25B2                       l5189 1BCE  
                     l5533 1A54                       l5541 1A88                       l5525 1A18  
                     l5517 19EA                       l5509 19C4                       l5349 136C  
                     l5357 13C2                       l5293 1242                       l6253 0B2E  
                     l6245 0AF8                       l6229 0A86                       l6165 08F8  
                     l6157 08D6                       l6085 0704                       l6069 06A0  
                     l5711 2166                       l5375 25C0                       l5199 1BF4  
                     l5535 1A62                       l5527 1A26                       l5359 13C8  
                     l5295 1246                       l5279 1212                       l5463 2266  
                     l6271 0BC0                       l6255 0B4C                       l6191 0988  
                     l6175 092A                       l5721 2188                       l5537 1A72  
                     l5529 1A36                       l5473 228A                       l6257 0B5C  
                     l6249 0B16                       l6177 0932                       l5723 218C  
                     l5731 21AA                       l5715 2172                       l5547 1AA6  
                     l5539 1A80                       l5467 226E                       l6283 0C00  
                     l6259 0B78                       l6275 0BDE                       l6099 075A  
                     l5493 194C                       l5573 0D9A                       l5581 0DBA  
                     l5397 2576                       l6293 0C32                       l5901 0392  
                     l5805 019E                       l5813 01F6                       l5735 21B8  
                     l5727 21A0                       l5719 2180                       l5495 195C  
                     l6279 0BF0                       l6295 0C44                       l6199 09BE  
                     l5497 196A                       l5905 03A0                       l5913 03CE  
                     l5809 01D8                       _ADFM 007E07                       l5499 197A  
                     l5579 0DB6                       l6299 0C78                       l5923 03FC  
                     l5677 1EDC                       l5933 041C                       l5941 0438  
                     l5909 03AE                       l5765 006E                       l5679 1EE4  
                     l5951 0466                       l5791 0150                       l5775 008C  
                     l4977 25DC                       l4993 2002                       l5961 0486  
                     l5937 042A                       l5929 040E                       l5793 015A  
                     l5769 0080                       l4995 200E                       l5891 0372  
                     l5795 016A                       l4997 2012                       l5965 0494  
                     l5957 0478                       l5973 04C2                       l5991 050C  
                     l5969 04A2                       l5897 0384                       STR_1 FEDC  
                     STR_2 FF1C                       STR_3 FEEC                       STR_4 FE7A  
                     STR_5 FFC1                       STR_6 FF91                       STR_7 FEFC  
                     STR_8 FF2C                       STR_9 FFFC                       _LATA 000F89  
                     _LATB 000F8A                       _LATC 000F8B                       _LATD 000F8C  
                     _LATE 000F8D                       u6130 1B1C                       _PEIE 007F96  
                     u6230 1BA8                       u6305 232A                       _RCEN 007E2B  
                     u8007 25B8                       u8017 2130                       u5830 1428  
                     u6615 24DA                       u6570 2574                       u5940 14DC  
                     u6820 0DAE                       u6595 2512                       u7707 03E6  
                     u7627 0064                       u7717 0450                       u7637 0128  
                     u7807 097A                       u7727 04D6                       u7647 0210  
                     u7817 0D3E                       u7737 051C                       u7657 0248  
                     u7907 1038                       u7827 244E                       u7747 056A  
                     u7667 0284                       u7917 1090                       u7837 2482  
                     u7757 05FA                       u7677 02C2                       u7927 236E  
                     u7847 0DDA                       u7767 0622                       u7687 0300  
                     u7937 2378                       u7857 0E1A                       u7777 063C  
                     u7697 035C                       u7947 239A                       u7867 0E70  
                     u7787 06AC                       u7957 23A4                       u7877 0EFC  
                     u7797 06F6                       u7967 1AD0                       u7887 0F88  
                     u7977 13F0                       u7897 0FE0                       u7987 1436  
                     u7997 14AC                       _PWM1 23FE                       _PWM2 20DA  
                     _RSEN 007E29                displayLog@i 003C            __end_of_PWM1off 2674  
          __end_of_PWM2off 266A                       _main 0012                       _curr 00A5  
                     _keys FDF7                       _time 009E                       _prev 00A7  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0061                main@standby 009C  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___param_bank 000000  
               i2_updateS1 15C0                 i2_updateS3 1C16                      ?_PWM1 0015  
                    ?_PWM2 0015           ?_I2C_Master_Init 0022           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D                      _ADRES 000FC3  
                    _EEADR 000FA9                      STR_10 FF3C                      STR_11 FF4C  
                    STR_20 FFF7                      STR_12 FFFC                      STR_21 FF9D  
                    STR_13 FF78                      STR_22 FFD8                      STR_30 FFA9  
                    STR_14 FF6B                      STR_23 FFD8                      STR_15 FEB9  
                    STR_31 FFFB                      STR_32 FFFB                      STR_40 FFF1  
                    STR_16 FFCD                      STR_24 FFB5                      STR_33 FFFB  
                    STR_25 FFFB                      STR_17 FFF7                      STR_41 FE69  
                    STR_18 FFF7                      STR_26 FEB8                      STR_42 FF85  
                    STR_34 FF0C                      STR_50 FE47                      STR_19 FFF7  
                    STR_51 FE69                      STR_43 FE69                      STR_27 FFFB  
                    STR_35 FE8B                      STR_28 FEB8                      STR_52 FEBC  
                    STR_36 FE9C                      STR_44 FE21            __end_of___awmod 21C2  
                    STR_53 FE69                      STR_45 FE69                      STR_29 FFFB  
                    STR_37 FFE9                      STR_38 FF5C                      STR_46 FECC  
                    STR_54 FE58                      STR_47 FE69                      STR_39 FFE1  
                    STR_55 FE36                      STR_48 FEAC                      STR_49 FE69  
          __end_of___lldiv 2062                      _T0CON 000FD5                      _T1CON 000FCD  
                    _T2CON 000FCA                      _T3CON 000FB1            __end_of___lwdiv 23FE  
          __end_of___lwmod 24D0                      i2l172 1906                      i2l510 1DCE  
                    i2l520 1E20                      i2l512 1DEC                      i2l530 1E7A  
                    i2l522 1E1C                      i2l514 1DE8                      i2l532 1E8A  
                    i2l516 1E06                      i2l508 1DD2                      i2l461 1640  
                    i2l534 1E9A                      i2l518 1E02                      i2l463 165E  
                    i2l455 162A                      i2l551 1CA0                      i2l536 1EAA  
                    i2l465 165A                      i2l457 1626                      i2l561 1CD0  
                    i2l553 1C9C                      i2l490 1738                      i2l467 1678  
                    i2l459 1644                      i2l571 1D3E                      i2l555 1CBA  
                    i2l547 1C86                      i2l484 1708                      i2l469 1674  
                    i2l573 1D4E                      i2l557 1CB6                      i2l549 1C82  
                    i2l486 1718                      i2l575 1D5E                      i2l559 1CD4  
                    i2l488 1728                      i2l569 1D2E               updateS1@mode 0015  
             updateS2@mode 0001               updateS3@mode 0015                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR3H 000FB3  
                    _TMR1L 000FCE                      _TMR3L 000FB2                      _PORTB 000F81  
                    _TRISA 000F92                      _TRISB 000F93                      _TRISC 000F94  
                    _TRISD 000F95                      _TRISE 000F96              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 2656            __end_of_handler 1942  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 25C6            __end_of_initLCD 248E             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers FE12               main@sodaLoad 0082            __end_of_isdigit 25E4  
             main@sodaSort 0096                      _putch 263E                      main@s 0086  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
             main@soupLoad 0080               main@soupSort 0094         __size_ofi2___awmod 0070  
           __CFG_PBADEN$ON 000000               __end_of_PWM1 2448               __end_of_PWM2 2152  
          __initialization 2530               __end_of_main 0D82               __end_of_keys FE08  
                   ??_PWM1 0017                     ??_PWM2 0019                i2_startTMR1 262E  
                   ??_main 0040              __activetblptr 000002          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0016         ??_I2C_Master_Start 0016                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0018                     _ADCON2 000FC0  
                ??_PWM1off 0015                  ??_PWM2off 0015                     _ADRESH 000FC4  
                   _EEADRH 000FAA                     _EEDATA 000FA8                     _CCPR1L 000FBE  
                   _CCPR2L 000FBB                     _EECON2 000FA7                     ?_putch 0001  
                   _CVRCON 000FB5                     i2l4111 171A                     i2l4103 16FC  
                   i2l4201 1D50                     i2l4131 1770                     i2l4123 174E  
                   i2l4115 172A                     i2l4107 170A                     i2l4051 15E0  
                   i2l4221 21E2                     i2l4301 18BA                     i2l4135 1782  
                   i2l4127 175E                     i2l4119 173A                     i2l4311 1900  
                   i2l4241 2228                     i2l4233 2210                     i2l4225 21F0  
                   i2l4217 21D6                     i2l4073 1660                     i2l4065 162C  
                   i2l4161 1C88                     i2l4145 1C36                     i2l4227 21F8  
                   i2l4083 169E                     i2l4059 1606                     i2l3701 1DEE  
                   i2l4229 21FC                     i2l4237 221A                     i2l4093 16CE  
                   i2l4069 1646                     i2l4077 167C                     i2l4181 1CFC  
                   i2l4165 1CA2                     i2l4157 1C70                     i2l4173 1CD8  
                   i2l4149 1C4A                     i2l4309 18F8                     i2l4261 17F0  
                   i2l4271 1818                     i2l3705 1E08                     i2l4097 16E2  
                   i2l4089 16BA                     i2l4193 1D30                     i2l4169 1CBC  
                   i2l3723 1E66                     i2l4099 16EA                     i2l4187 1D1A  
                   i2l4291 187C                     i2l4275 182E                     i2l3733 1E8C  
                   i2l3725 1E6E                     i2l3717 1E48                     i2l3709 1E24  
                   i2l4197 1D40                     i2l4189 1D22                     i2l4287 1874  
                   i2l3737 1E9C                     i2l3729 1E7C                     i2l3681 1D82  
                   i2l4299 18B2                     i2l3693 1DBC                     i2l3685 1D96  
                   i2l3697 1DD4                     _OSCCON 000FD3                     _TMR0IE 007F95  
                   _TMR0IF 007F92                     _TMR1IE 007CE8                     _TMR1IF 007CF0  
                   _TMR0ON 007EAF                     _TMR1ON 007E68                     _TMR3ON 007D88  
                   _S1mode 005C                     _S2mode 00AB                     _SSPADD 000FC8  
                   _S3mode 005A                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9             __CFG_XINST$OFF 000000       __size_of_eepromWrite 0038  
                   _addRun 1EAE                     ___wmul 257C             __CFG_STVREN$ON 000000  
                ??___awmod 0019                ?i2_updateS1 0001                ?i2_updateS3 0001  
                ??___lldiv 001D                  ??___lwdiv 0019                  ??___lwmod 0020  
            displayLog@run 0037           __end_of_keycheck 260C           calibrateWheels@i 001A  
                   clear_0 2536                     clear_1 2542            eepromWrite@data 0015  
         __end_of_currtime FE21            ___awmod@divisor 0017            ___awmod@counter 0019  
                ??_lcdInst 0017                     _printf 10DE                  ??_handler 0007  
                   main@ee 0084                  ??_readADC 0015                  ??_initLCD 0018  
                ??_isdigit 0015          __end_ofi2___awmod 2232               __mediumconst FDF6  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
            ?_keyinterrupt 0001           __end_of_updateS1 15C0           __end_of_updateS2 1EAE  
         __end_of_updateS3 1C16             i2___awmod@sign 0006                 __accesstop 0080  
  __end_of__initialization 2548               addRun@sodaNT 0029               addRun@soupNL 002D  
            ___rparam_used 000001             __pcstackCOMRAM 0001              __end_of_putch 264A  
       __size_of_lcdNibble 0056          eepromRead@address 0017             ??_keyinterrupt 0015  
           i2updateS1@mode 0001             i2updateS3@mode 0001                    ??_putch 0017  
               addRun@date 001F        __size_ofi2_updateS1 01D6        __size_ofi2_updateS3 014C  
               __pbssBANK0 009E                 addRun@mins 0023                 addRun@secs 0025  
               addRun@year 001B                    PWM2@dir 0017                    ?_addRun 0019  
                  ?___wmul 0015                    _CCP1CON 000FBD                    _CCP2CON 000FBA  
                  ?_printf 0021                 _labelState 0052                 _eepromRead 2508  
        displayLog@currRun 003E   __size_of_calibrateWheels 0188         __size_of_startTMR1 0010  
               _displayLog 0D82                    _PWM1off 266A                    _PWM2off 2660  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                ?_keycheck 0001          __end_of_lcdNibble 23AC                    __Hparam 0000  
                  __Lparam 0000            __size_of_addRun 0132                  ?_updateS1 0015  
                ?_updateS2 0001                  ?_updateS3 0015                    ___awmod 2152  
                  ___lldiv 1FE0            __size_of___wmul 0026                    ___lwdiv 23AC  
                  ___lwmod 248E                  _CMCONbits 000FB4                 _homescreen 229A  
                  __pcinit 2530                    __ramtop 1000                 _initialize 2062  
             ?i2_startTMR1 0001                    _lcdInst 264A                    _handler 0008  
                  __ptext0 0012                    __ptext1 2232                    __ptext2 2656  
                  __ptext3 2674                    __ptext4 267C                    __ptext5 2556  
                  __ptext6 260C                    __ptext7 25E4                    __ptext8 2062  
                  __ptext9 2448            __size_of_printf 030C                  _T0CONbits 000FD5  
                  _readADC 25A2                    _initLCD 2448          __end_of_hexpowers FE1A  
                  _dpowers FE08                    _isdigit 25C6           ___awmod@dividend 0015  
                  _seconds 005E   __size_of_I2C_Master_Init 005A   __size_of_I2C_Master_Read 0026  
 __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008             main@prevSodaIR 0098  
           __pintcode_body 1796       end_of_initialization 2548             main@prevSoupIR 009A  
               ??_keycheck 0015              __Lmediumconst FDF6                    int_func 1796  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0019  
          ___lldiv@counter 0021       __end_of_keyinterrupt 25F8                    printf@c 0036  
                  printf@f 0021           I2C_Master_Init@c 0022           I2C_Master_Read@a 0016  
                  postdec2 000FDD          __end_of_startTMR1 262E                    postinc0 000FEE  
                  postinc2 000FDE               ??i2_updateS1 0003               ??i2_updateS3 0003  
               ??_updateS1 0017                 ??_updateS2 0003                 ??_updateS3 0017  
                _PORTBbits 000F81                ?_eepromRead 0001              addRun@currRun 0032  
               _updateTime 2232                ?_displayLog 0037                  i2___awmod 21C2  
       __end_ofi2_updateS1 1796         __end_ofi2_updateS3 1D62          ??_calibrateWheels 0018  
              _CCP1CONbits 000FBD              ??_eepromWrite 0016                printf@width 0034  
              _CCP2CONbits 000FBA                 main@sodaNT 008E                 main@soupNL 008A  
              ?_homescreen 0001             __end_of_addRun 1FE0             __end_of___wmul 25A2  
              ?_initialize 0001             __end_of_printf 13EA        start_initialization 2530  
              updateTime@j 0018                 ?i2___awmod 0001          ??_I2C_Master_Init 0026  
        ??_I2C_Master_Read 0016          ??_I2C_Master_Wait 0015          ??_I2C_Master_Stop 0016  
         __CFG_OSC$INTIO67 000000        __size_of_eepromRead 0028                   ??_addRun 002F  
      __end_of_eepromWrite 2508                   ??___wmul 0019        __size_of_displayLog 035C  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 0029                addRun@hours 0021  
              addRun@sodaT 0027                addRun@month 001D                addRun@soupL 002B  
     __size_ofi2_startTMR1 0010                __pbssCOMRAM 0042              __pcstackBANK0 0080  
              ?_updateTime 0001               _isdigit$1451 0016                   ?_PWM1off 0001  
                 ?_PWM2off 0001        __size_of_homescreen 0062      __size_of_keyinterrupt 0014  
      __size_of_initialize 0078                  addRun@dur 0019           _I2C_Master_Start 267C  
         _I2C_Master_Write 2656          __size_of_keycheck 0014           ___lwdiv@dividend 0015  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FDF6  
                _lcdNibble 2356                   ?___awmod 0015                   ?___lldiv 0015  
                 PWM1@duty 0015                   PWM2@duty 0015                   ?___lwdiv 0015  
                 ?___lwmod 001C          __size_of_updateS1 01D6          __size_of_updateS2 014C  
        __size_of_updateS3 014C                   ?_lcdInst 0001                   ?_handler 0001  
                 ?_readADC 0001                   ?_initLCD 0001                   ?_isdigit 0001  
             _keyinterrupt 25E4                  _hexpowers FE12           ___lwdiv@quotient 001A  
              ??i2___awmod 0005             __size_of_putch 000C         eepromWrite@address 0018  
      calibrateWheels@prev 0018             ___wmul@product 0019                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                _eepromWrite 24D0                  _sodaAlign 0050  
                 i2u430_40 15FE                   i2u441_40 16B2                   _PIR2bits 000FA1  
                 i2u460_40 1C68                   i2u470_40 1CF4                   i2u383_40 1DB4  
                 i2u393_40 1E40                   i2u802_47 1C1C                   i2u803_47 15C6  
                 i2u804_47 160C                   i2u805_47 1682                  _sodaSteps 0056  
                 i2u806_47 1D68           __CFG_WDTPS$32768 000000        __size_of_updateTime 0068  
               ?_lcdNibble 0001                  _startTMR1 261E                 _ADCON0bits 000FC2  
        ___wmul@multiplier 0015                  _soupAlign 004E              lcdNibble@data 0016  
             ??_eepromRead 0015                 printf@flag 0033              lcdNibble@temp 0015  
                _soupSteps 0058                 printf@prec 0030                  main@sodaT 008C  
          _calibrateWheels 1942                  main@soupL 0088           main@prevSodaLoad 0092  
             ??_displayLog 0039        I2C_Master_Read@temp 0017           __size_of_PWM1off 000A  
         __size_of_PWM2off 000A         i2___awmod@dividend 0001           main@prevSoupLoad 0090  
               _EECON1bits 000FA6                   __Hrparam 0000                   __Lrparam 0000  
       __end_of_eepromRead 2530         __CFG_BOREN$SBORDIS 000000               ??_homescreen 0037  
         __size_of___awmod 0070         __end_of_displayLog 10DE           __size_of___lldiv 0082  
         __size_of___lwdiv 0052           __size_of___lwmod 0042             readADC@channel 0016  
             ??_initialize 002A                 ?_startTMR1 0001           __size_of_lcdInst 000C  
         __size_of_handler 193A            _I2C_Master_Init 22FC           __size_of_readADC 0024  
          _I2C_Master_Read 2556           __size_of_initLCD 0046            _I2C_Master_Wait 260C  
          _I2C_Master_Stop 2674           __size_of_isdigit 001E            ___lwdiv@divisor 0017  
          ___lwdiv@counter 0019                   __ptext10 22FC                   __ptext11 1FE0  
                 __ptext20 264A                   __ptext12 229A                   __ptext21 2356  
                 __ptext13 0D82                   __ptext30 2508                   __ptext22 25F8  
                 __ptext14 10DE                   __ptext31 2152                   __ptext23 1942  
                 __ptext15 263E                   __ptext40 21C2                   __ptext32 2660  
                 __ptext24 1ACA                   __ptext16 25C6                   __ptext41 1D62  
                 __ptext33 20DA                   __ptext25 13EA                   __ptext17 257C  
                 __ptext34 266A                   __ptext26 261E                   __ptext18 248E  
                 __ptext35 23FE                   __ptext27 25A2                   __ptext19 23AC  
                 __ptext28 1EAE                   __ptext37 1C16                   __ptext29 24D0  
                 __ptext38 15C0                   __ptext39 262E              __size_of_PWM1 004A  
            __size_of_PWM2 0078         __end_of_homescreen 22FC                   _keycheck 25F8  
                 _tabState 0054              __size_of_main 0D70                   _currtime FE1A  
                 _keypress 0060         __end_of_initialize 20DA                ??_lcdNibble 0015  
                 int$flags 0061                   _updateS1 13EA                   _updateS2 1D62  
                 _updateS3 1ACA                  printf@idx 002D                  printf@val 0031  
  __end_of_calibrateWheels 1ACA          i2___awmod@divisor 0003                  putch@data 0017  
        i2___awmod@counter 0005   __end_of_I2C_Master_Start 2684                _OSCTUNEbits 000F9B  
 __end_of_I2C_Master_Write 2660                 _INTCONbits 000FF2               ??_updateTime 0018  
                 isdigit@c 0017                   intlevel2 0000           ___lwmod@dividend 001C  
         ___lldiv@dividend 0015                   printf@ap 002E         __end_of_updateTime 229A  
  __end_of_I2C_Master_Init 2356    __end_of_I2C_Master_Read 257C    __end_of_I2C_Master_Wait 261E  
  __end_of_I2C_Master_Stop 267C                lcdInst@data 0017              ??i2_startTMR1 0001  
              ??_startTMR1 0015           ___lldiv@quotient 001D          I2C_Master_Write@d 0016  
          ___lwmod@divisor 001E            ___lwmod@counter 0020               ?_eepromWrite 0015  
